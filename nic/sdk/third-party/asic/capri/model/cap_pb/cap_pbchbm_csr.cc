
#include "cap_pbchbm_csr.h"
#include "LogMsg.h"        
using namespace std;
        
cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_stop_int_test_set_t::cap_pbchbm_csr_int_hbm_stop_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_stop_int_test_set_t::~cap_pbchbm_csr_int_hbm_stop_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_stop_t::cap_pbchbm_csr_int_hbm_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_stop_t::~cap_pbchbm_csr_int_hbm_stop_t() { }

cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::~cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_truncate_no_t::cap_pbchbm_csr_int_hbm_truncate_no_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_truncate_no_t::~cap_pbchbm_csr_int_hbm_truncate_no_t() { }

cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::~cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_drop_threshold_t::cap_pbchbm_csr_int_hbm_drop_threshold_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_threshold_t::~cap_pbchbm_csr_int_hbm_drop_threshold_t() { }

cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::~cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_drop_ctrl_t::cap_pbchbm_csr_int_hbm_drop_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_ctrl_t::~cap_pbchbm_csr_int_hbm_drop_ctrl_t() { }

cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::~cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_drop_write_ack_t::cap_pbchbm_csr_int_hbm_drop_write_ack_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_write_ack_t::~cap_pbchbm_csr_int_hbm_drop_write_ack_t() { }

cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::~cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_drop_emergency_t::cap_pbchbm_csr_int_hbm_drop_emergency_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_emergency_t::~cap_pbchbm_csr_int_hbm_drop_emergency_t() { }

cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::~cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_axi_err_rsp_t::cap_pbchbm_csr_int_hbm_axi_err_rsp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_axi_err_rsp_t::~cap_pbchbm_csr_int_hbm_axi_err_rsp_t() { }

cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_drop_int_test_set_t::cap_pbchbm_csr_int_hbm_drop_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_int_test_set_t::~cap_pbchbm_csr_int_hbm_drop_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_drop_t::cap_pbchbm_csr_int_hbm_drop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_drop_t::~cap_pbchbm_csr_int_hbm_drop_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::~cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_out_t::cap_pbchbm_csr_int_hbm_pbus_violation_out_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_out_t::~cap_pbchbm_csr_int_hbm_pbus_violation_out_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::~cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_pbus_violation_in_t::cap_pbchbm_csr_int_hbm_pbus_violation_in_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_pbus_violation_in_t::~cap_pbchbm_csr_int_hbm_pbus_violation_in_t() { }

cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::~cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t() { }

cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::cap_pbchbm_csr_int_hbm_xoff_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::~cap_pbchbm_csr_int_hbm_xoff_int_test_set_t() { }

cap_pbchbm_csr_int_hbm_xoff_t::cap_pbchbm_csr_int_hbm_xoff_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_hbm_xoff_t::~cap_pbchbm_csr_int_hbm_xoff_t() { }

cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::~cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t() { }

cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::~cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t() { }

cap_pbchbm_csr_int_ecc_hbm_mtu_t::cap_pbchbm_csr_int_ecc_hbm_mtu_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_mtu_t::~cap_pbchbm_csr_int_ecc_hbm_mtu_t() { }

cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::~cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t() { }

cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::~cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t() { }

cap_pbchbm_csr_int_ecc_hbm_rb_t::cap_pbchbm_csr_int_ecc_hbm_rb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_ecc_hbm_rb_t::~cap_pbchbm_csr_int_ecc_hbm_rb_t() { }

cap_pbchbm_csr_intreg_status_t::cap_pbchbm_csr_intreg_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_intreg_status_t::~cap_pbchbm_csr_intreg_status_t() { }

cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::cap_pbchbm_csr_int_groups_int_enable_rw_reg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::~cap_pbchbm_csr_int_groups_int_enable_rw_reg_t() { }

cap_pbchbm_csr_intgrp_status_t::cap_pbchbm_csr_intgrp_status_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_intgrp_status_t::~cap_pbchbm_csr_intgrp_status_t() { }

cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::~cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t() { }

cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::~cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t() { }

cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::~cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t() { }

cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::~cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t() { }

cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::~cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t() { }

cap_pbchbm_csr_dhs_hbm_wb_wm_t::cap_pbchbm_csr_dhs_hbm_wb_wm_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_wb_wm_t::~cap_pbchbm_csr_dhs_hbm_wb_wm_t() { }

cap_pbchbm_csr_dhs_hbm_r2a_entry_t::cap_pbchbm_csr_dhs_hbm_r2a_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_r2a_entry_t::~cap_pbchbm_csr_dhs_hbm_r2a_entry_t() { }

cap_pbchbm_csr_dhs_hbm_r2a_t::cap_pbchbm_csr_dhs_hbm_r2a_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_r2a_t::~cap_pbchbm_csr_dhs_hbm_r2a_t() { }

cap_pbchbm_csr_dhs_hbm_mem_entry_t::cap_pbchbm_csr_dhs_hbm_mem_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_mem_entry_t::~cap_pbchbm_csr_dhs_hbm_mem_entry_t() { }

cap_pbchbm_csr_dhs_hbm_mem_t::cap_pbchbm_csr_dhs_hbm_mem_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_mem_t::~cap_pbchbm_csr_dhs_hbm_mem_t() { }

cap_pbchbm_csr_dhs_hbm_cdt_entry_t::cap_pbchbm_csr_dhs_hbm_cdt_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_cdt_entry_t::~cap_pbchbm_csr_dhs_hbm_cdt_entry_t() { }

cap_pbchbm_csr_dhs_hbm_cdt_t::cap_pbchbm_csr_dhs_hbm_cdt_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_dhs_hbm_cdt_t::~cap_pbchbm_csr_dhs_hbm_cdt_t() { }

cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::cap_pbchbm_csr_cnt_hbm_axi_timestamp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::~cap_pbchbm_csr_cnt_hbm_axi_timestamp_t() { }

cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::cap_pbchbm_csr_cnt_hbm_axi_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::~cap_pbchbm_csr_cnt_hbm_axi_ctrl_t() { }

cap_pbchbm_csr_cnt_hbm_axi_pyld_t::cap_pbchbm_csr_cnt_hbm_axi_pyld_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm_axi_pyld_t::~cap_pbchbm_csr_cnt_hbm_axi_pyld_t() { }

cap_pbchbm_csr_cnt_hbm_axi_rpl_t::cap_pbchbm_csr_cnt_hbm_axi_rpl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm_axi_rpl_t::~cap_pbchbm_csr_cnt_hbm_axi_rpl_t() { }

cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::cap_pbchbm_csr_cfg_hbm_tx_clear_context_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::~cap_pbchbm_csr_cfg_hbm_tx_clear_context_t() { }

cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::cap_pbchbm_csr_cfg_hbm_eth_clear_context_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::~cap_pbchbm_csr_cfg_hbm_eth_clear_context_t() { }

cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::~cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t() { }

cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::~cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t() { }

cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::~cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t() { }

cap_pbchbm_csr_cfg_hbm_tx_flush_t::cap_pbchbm_csr_cfg_hbm_tx_flush_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_flush_t::~cap_pbchbm_csr_cfg_hbm_tx_flush_t() { }

cap_pbchbm_csr_cfg_hbm_eth_flush_t::cap_pbchbm_csr_cfg_hbm_eth_flush_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_flush_t::~cap_pbchbm_csr_cfg_hbm_eth_flush_t() { }

cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::cap_pbchbm_csr_cfg_hbm_tx_reset_context_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::~cap_pbchbm_csr_cfg_hbm_tx_reset_context_t() { }

cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::cap_pbchbm_csr_cfg_hbm_eth_reset_context_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::~cap_pbchbm_csr_cfg_hbm_eth_reset_context_t() { }

cap_pbchbm_csr_cfg_hbm_qdepth_t::cap_pbchbm_csr_cfg_hbm_qdepth_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_qdepth_t::~cap_pbchbm_csr_cfg_hbm_qdepth_t() { }

cap_pbchbm_csr_cfg_hbm_parser_snap_t::cap_pbchbm_csr_cfg_hbm_parser_snap_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_parser_snap_t::~cap_pbchbm_csr_cfg_hbm_parser_snap_t() { }

cap_pbchbm_csr_cfg_hbm_cut_thru_t::cap_pbchbm_csr_cfg_hbm_cut_thru_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_cut_thru_t::~cap_pbchbm_csr_cfg_hbm_cut_thru_t() { }

cap_pbchbm_csr_sta_hbm_timestamp_t::cap_pbchbm_csr_sta_hbm_timestamp_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_timestamp_t::~cap_pbchbm_csr_sta_hbm_timestamp_t() { }

cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::cap_pbchbm_csr_sta_hbm_tx_pend_acks_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::~cap_pbchbm_csr_sta_hbm_tx_pend_acks_t() { }

cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::cap_pbchbm_csr_sta_hbm_eth_pend_acks_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::~cap_pbchbm_csr_sta_hbm_eth_pend_acks_t() { }

cap_pbchbm_csr_sta_hbm_wb_depth_t::cap_pbchbm_csr_sta_hbm_wb_depth_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_wb_depth_t::~cap_pbchbm_csr_sta_hbm_wb_depth_t() { }

cap_pbchbm_csr_sat_hbm8_ctrl_full_t::cap_pbchbm_csr_sat_hbm8_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm8_ctrl_full_t::~cap_pbchbm_csr_sat_hbm8_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm8_truncate_t::cap_pbchbm_csr_cnt_hbm8_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm8_truncate_t::~cap_pbchbm_csr_cnt_hbm8_truncate_t() { }

cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::cap_pbchbm_csr_cnt_hbm8_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm8_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::cap_pbchbm_csr_cnt_hbm8_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm8_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm7_ctrl_full_t::cap_pbchbm_csr_sat_hbm7_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm7_ctrl_full_t::~cap_pbchbm_csr_sat_hbm7_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm7_truncate_t::cap_pbchbm_csr_cnt_hbm7_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm7_truncate_t::~cap_pbchbm_csr_cnt_hbm7_truncate_t() { }

cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::cap_pbchbm_csr_cnt_hbm7_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm7_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::cap_pbchbm_csr_cnt_hbm7_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm7_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm6_ctrl_full_t::cap_pbchbm_csr_sat_hbm6_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm6_ctrl_full_t::~cap_pbchbm_csr_sat_hbm6_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm6_truncate_t::cap_pbchbm_csr_cnt_hbm6_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm6_truncate_t::~cap_pbchbm_csr_cnt_hbm6_truncate_t() { }

cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::cap_pbchbm_csr_cnt_hbm6_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm6_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::cap_pbchbm_csr_cnt_hbm6_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm6_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm5_ctrl_full_t::cap_pbchbm_csr_sat_hbm5_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm5_ctrl_full_t::~cap_pbchbm_csr_sat_hbm5_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm5_truncate_t::cap_pbchbm_csr_cnt_hbm5_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm5_truncate_t::~cap_pbchbm_csr_cnt_hbm5_truncate_t() { }

cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::cap_pbchbm_csr_cnt_hbm5_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm5_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::cap_pbchbm_csr_cnt_hbm5_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm5_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm4_ctrl_full_t::cap_pbchbm_csr_sat_hbm4_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm4_ctrl_full_t::~cap_pbchbm_csr_sat_hbm4_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm4_truncate_t::cap_pbchbm_csr_cnt_hbm4_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm4_truncate_t::~cap_pbchbm_csr_cnt_hbm4_truncate_t() { }

cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::cap_pbchbm_csr_cnt_hbm4_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm4_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::cap_pbchbm_csr_cnt_hbm4_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm4_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm3_ctrl_full_t::cap_pbchbm_csr_sat_hbm3_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm3_ctrl_full_t::~cap_pbchbm_csr_sat_hbm3_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm3_truncate_t::cap_pbchbm_csr_cnt_hbm3_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm3_truncate_t::~cap_pbchbm_csr_cnt_hbm3_truncate_t() { }

cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::cap_pbchbm_csr_cnt_hbm3_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm3_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::cap_pbchbm_csr_cnt_hbm3_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm3_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm2_ctrl_full_t::cap_pbchbm_csr_sat_hbm2_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm2_ctrl_full_t::~cap_pbchbm_csr_sat_hbm2_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm2_truncate_t::cap_pbchbm_csr_cnt_hbm2_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm2_truncate_t::~cap_pbchbm_csr_cnt_hbm2_truncate_t() { }

cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::cap_pbchbm_csr_cnt_hbm2_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm2_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::cap_pbchbm_csr_cnt_hbm2_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm2_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm1_ctrl_full_t::cap_pbchbm_csr_sat_hbm1_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm1_ctrl_full_t::~cap_pbchbm_csr_sat_hbm1_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm1_truncate_t::cap_pbchbm_csr_cnt_hbm1_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm1_truncate_t::~cap_pbchbm_csr_cnt_hbm1_truncate_t() { }

cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::cap_pbchbm_csr_cnt_hbm1_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm1_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::cap_pbchbm_csr_cnt_hbm1_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm1_emergency_stop_t() { }

cap_pbchbm_csr_sat_hbm0_ctrl_full_t::cap_pbchbm_csr_sat_hbm0_ctrl_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sat_hbm0_ctrl_full_t::~cap_pbchbm_csr_sat_hbm0_ctrl_full_t() { }

cap_pbchbm_csr_cnt_hbm0_truncate_t::cap_pbchbm_csr_cnt_hbm0_truncate_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm0_truncate_t::~cap_pbchbm_csr_cnt_hbm0_truncate_t() { }

cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::cap_pbchbm_csr_cnt_hbm0_write_ack_full_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::~cap_pbchbm_csr_cnt_hbm0_write_ack_full_t() { }

cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::~cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t() { }

cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::cap_pbchbm_csr_cnt_hbm0_emergency_stop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::~cap_pbchbm_csr_cnt_hbm0_emergency_stop_t() { }

cap_pbchbm_csr_cfg_hbm_r2a_t::cap_pbchbm_csr_cfg_hbm_r2a_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_r2a_t::~cap_pbchbm_csr_cfg_hbm_r2a_t() { }

cap_pbchbm_csr_cfg_hbm_axi_base_t::cap_pbchbm_csr_cfg_hbm_axi_base_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_axi_base_t::~cap_pbchbm_csr_cfg_hbm_axi_base_t() { }

cap_pbchbm_csr_sta_hbm_axi_t::cap_pbchbm_csr_sta_hbm_axi_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_axi_t::~cap_pbchbm_csr_sta_hbm_axi_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_15_t::cap_pbchbm_csr_sta_hbm_tx_context_15_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_15_t::~cap_pbchbm_csr_sta_hbm_tx_context_15_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_14_t::cap_pbchbm_csr_sta_hbm_tx_context_14_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_14_t::~cap_pbchbm_csr_sta_hbm_tx_context_14_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_13_t::cap_pbchbm_csr_sta_hbm_tx_context_13_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_13_t::~cap_pbchbm_csr_sta_hbm_tx_context_13_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_12_t::cap_pbchbm_csr_sta_hbm_tx_context_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_12_t::~cap_pbchbm_csr_sta_hbm_tx_context_12_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_11_t::cap_pbchbm_csr_sta_hbm_tx_context_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_11_t::~cap_pbchbm_csr_sta_hbm_tx_context_11_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_10_t::cap_pbchbm_csr_sta_hbm_tx_context_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_10_t::~cap_pbchbm_csr_sta_hbm_tx_context_10_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_9_t::cap_pbchbm_csr_sta_hbm_tx_context_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_9_t::~cap_pbchbm_csr_sta_hbm_tx_context_9_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_8_t::cap_pbchbm_csr_sta_hbm_tx_context_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_8_t::~cap_pbchbm_csr_sta_hbm_tx_context_8_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_7_t::cap_pbchbm_csr_sta_hbm_tx_context_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_7_t::~cap_pbchbm_csr_sta_hbm_tx_context_7_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_6_t::cap_pbchbm_csr_sta_hbm_tx_context_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_6_t::~cap_pbchbm_csr_sta_hbm_tx_context_6_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_5_t::cap_pbchbm_csr_sta_hbm_tx_context_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_5_t::~cap_pbchbm_csr_sta_hbm_tx_context_5_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_4_t::cap_pbchbm_csr_sta_hbm_tx_context_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_4_t::~cap_pbchbm_csr_sta_hbm_tx_context_4_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_3_t::cap_pbchbm_csr_sta_hbm_tx_context_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_3_t::~cap_pbchbm_csr_sta_hbm_tx_context_3_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_2_t::cap_pbchbm_csr_sta_hbm_tx_context_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_2_t::~cap_pbchbm_csr_sta_hbm_tx_context_2_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_1_t::cap_pbchbm_csr_sta_hbm_tx_context_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_1_t::~cap_pbchbm_csr_sta_hbm_tx_context_1_t() { }

cap_pbchbm_csr_sta_hbm_tx_context_0_t::cap_pbchbm_csr_sta_hbm_tx_context_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_tx_context_0_t::~cap_pbchbm_csr_sta_hbm_tx_context_0_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_31_t::cap_pbchbm_csr_sta_hbm_eth_context_31_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_31_t::~cap_pbchbm_csr_sta_hbm_eth_context_31_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_30_t::cap_pbchbm_csr_sta_hbm_eth_context_30_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_30_t::~cap_pbchbm_csr_sta_hbm_eth_context_30_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_29_t::cap_pbchbm_csr_sta_hbm_eth_context_29_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_29_t::~cap_pbchbm_csr_sta_hbm_eth_context_29_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_28_t::cap_pbchbm_csr_sta_hbm_eth_context_28_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_28_t::~cap_pbchbm_csr_sta_hbm_eth_context_28_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_27_t::cap_pbchbm_csr_sta_hbm_eth_context_27_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_27_t::~cap_pbchbm_csr_sta_hbm_eth_context_27_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_26_t::cap_pbchbm_csr_sta_hbm_eth_context_26_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_26_t::~cap_pbchbm_csr_sta_hbm_eth_context_26_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_25_t::cap_pbchbm_csr_sta_hbm_eth_context_25_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_25_t::~cap_pbchbm_csr_sta_hbm_eth_context_25_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_24_t::cap_pbchbm_csr_sta_hbm_eth_context_24_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_24_t::~cap_pbchbm_csr_sta_hbm_eth_context_24_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_23_t::cap_pbchbm_csr_sta_hbm_eth_context_23_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_23_t::~cap_pbchbm_csr_sta_hbm_eth_context_23_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_22_t::cap_pbchbm_csr_sta_hbm_eth_context_22_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_22_t::~cap_pbchbm_csr_sta_hbm_eth_context_22_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_21_t::cap_pbchbm_csr_sta_hbm_eth_context_21_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_21_t::~cap_pbchbm_csr_sta_hbm_eth_context_21_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_20_t::cap_pbchbm_csr_sta_hbm_eth_context_20_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_20_t::~cap_pbchbm_csr_sta_hbm_eth_context_20_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_19_t::cap_pbchbm_csr_sta_hbm_eth_context_19_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_19_t::~cap_pbchbm_csr_sta_hbm_eth_context_19_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_18_t::cap_pbchbm_csr_sta_hbm_eth_context_18_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_18_t::~cap_pbchbm_csr_sta_hbm_eth_context_18_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_17_t::cap_pbchbm_csr_sta_hbm_eth_context_17_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_17_t::~cap_pbchbm_csr_sta_hbm_eth_context_17_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_16_t::cap_pbchbm_csr_sta_hbm_eth_context_16_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_16_t::~cap_pbchbm_csr_sta_hbm_eth_context_16_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_15_t::cap_pbchbm_csr_sta_hbm_eth_context_15_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_15_t::~cap_pbchbm_csr_sta_hbm_eth_context_15_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_14_t::cap_pbchbm_csr_sta_hbm_eth_context_14_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_14_t::~cap_pbchbm_csr_sta_hbm_eth_context_14_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_13_t::cap_pbchbm_csr_sta_hbm_eth_context_13_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_13_t::~cap_pbchbm_csr_sta_hbm_eth_context_13_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_12_t::cap_pbchbm_csr_sta_hbm_eth_context_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_12_t::~cap_pbchbm_csr_sta_hbm_eth_context_12_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_11_t::cap_pbchbm_csr_sta_hbm_eth_context_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_11_t::~cap_pbchbm_csr_sta_hbm_eth_context_11_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_10_t::cap_pbchbm_csr_sta_hbm_eth_context_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_10_t::~cap_pbchbm_csr_sta_hbm_eth_context_10_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_9_t::cap_pbchbm_csr_sta_hbm_eth_context_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_9_t::~cap_pbchbm_csr_sta_hbm_eth_context_9_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_8_t::cap_pbchbm_csr_sta_hbm_eth_context_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_8_t::~cap_pbchbm_csr_sta_hbm_eth_context_8_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_7_t::cap_pbchbm_csr_sta_hbm_eth_context_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_7_t::~cap_pbchbm_csr_sta_hbm_eth_context_7_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_6_t::cap_pbchbm_csr_sta_hbm_eth_context_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_6_t::~cap_pbchbm_csr_sta_hbm_eth_context_6_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_5_t::cap_pbchbm_csr_sta_hbm_eth_context_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_5_t::~cap_pbchbm_csr_sta_hbm_eth_context_5_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_4_t::cap_pbchbm_csr_sta_hbm_eth_context_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_4_t::~cap_pbchbm_csr_sta_hbm_eth_context_4_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_3_t::cap_pbchbm_csr_sta_hbm_eth_context_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_3_t::~cap_pbchbm_csr_sta_hbm_eth_context_3_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_2_t::cap_pbchbm_csr_sta_hbm_eth_context_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_2_t::~cap_pbchbm_csr_sta_hbm_eth_context_2_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_1_t::cap_pbchbm_csr_sta_hbm_eth_context_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_1_t::~cap_pbchbm_csr_sta_hbm_eth_context_1_t() { }

cap_pbchbm_csr_sta_hbm_eth_context_0_t::cap_pbchbm_csr_sta_hbm_eth_context_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_eth_context_0_t::~cap_pbchbm_csr_sta_hbm_eth_context_0_t() { }

cap_pbchbm_csr_sta_hbm_t::cap_pbchbm_csr_sta_hbm_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_t::~cap_pbchbm_csr_sta_hbm_t() { }

cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::~cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t() { }

cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::cap_pbchbm_csr_cfg_hbm_tx_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::~cap_pbchbm_csr_cfg_hbm_tx_ctrl_t() { }

cap_pbchbm_csr_cfg_hbm_tx_payload_t::cap_pbchbm_csr_cfg_hbm_tx_payload_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_tx_payload_t::~cap_pbchbm_csr_cfg_hbm_tx_payload_t() { }

cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::~cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t() { }

cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::cap_pbchbm_csr_cfg_hbm_eth_ctrl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::~cap_pbchbm_csr_cfg_hbm_eth_ctrl_t() { }

cap_pbchbm_csr_cfg_hbm_eth_payload_t::cap_pbchbm_csr_cfg_hbm_eth_payload_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_eth_payload_t::~cap_pbchbm_csr_cfg_hbm_eth_payload_t() { }

cap_pbchbm_csr_cfg_hbm_threshold_t::cap_pbchbm_csr_cfg_hbm_threshold_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_threshold_t::~cap_pbchbm_csr_cfg_hbm_threshold_t() { }

cap_pbchbm_csr_sta_bist_t::cap_pbchbm_csr_sta_bist_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_bist_t::~cap_pbchbm_csr_sta_bist_t() { }

cap_pbchbm_csr_sta_ecc_hbm_ht_t::cap_pbchbm_csr_sta_ecc_hbm_ht_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_ecc_hbm_ht_t::~cap_pbchbm_csr_sta_ecc_hbm_ht_t() { }

cap_pbchbm_csr_cfg_hbm_ht_t::cap_pbchbm_csr_cfg_hbm_ht_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_ht_t::~cap_pbchbm_csr_cfg_hbm_ht_t() { }

cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::cap_pbchbm_csr_cfg_hbm_axi_write_attr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::~cap_pbchbm_csr_cfg_hbm_axi_write_attr_t() { }

cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::cap_pbchbm_csr_cfg_hbm_axi_read_attr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::~cap_pbchbm_csr_cfg_hbm_axi_read_attr_t() { }

cap_pbchbm_csr_sta_hbm_wb_t::cap_pbchbm_csr_sta_hbm_wb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_wb_t::~cap_pbchbm_csr_sta_hbm_wb_t() { }

cap_pbchbm_csr_sta_hbm_rb_t::cap_pbchbm_csr_sta_hbm_rb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_hbm_rb_t::~cap_pbchbm_csr_sta_hbm_rb_t() { }

cap_pbchbm_csr_cfg_hbm_wb_drop_t::cap_pbchbm_csr_cfg_hbm_wb_drop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_wb_drop_t::~cap_pbchbm_csr_cfg_hbm_wb_drop_t() { }

cap_pbchbm_csr_cfg_hbm_wb_t::cap_pbchbm_csr_cfg_hbm_wb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_wb_t::~cap_pbchbm_csr_cfg_hbm_wb_t() { }

cap_pbchbm_csr_cfg_hbm_xoff_t::cap_pbchbm_csr_cfg_hbm_xoff_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_xoff_t::~cap_pbchbm_csr_cfg_hbm_xoff_t() { }

cap_pbchbm_csr_cfg_hbm_t::cap_pbchbm_csr_cfg_hbm_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_t::~cap_pbchbm_csr_cfg_hbm_t() { }

cap_pbchbm_csr_cfg_hbm_spare_t::cap_pbchbm_csr_cfg_hbm_spare_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_spare_t::~cap_pbchbm_csr_cfg_hbm_spare_t() { }

cap_pbchbm_csr_cfg_hbm_rb_t::cap_pbchbm_csr_cfg_hbm_rb_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_rb_t::~cap_pbchbm_csr_cfg_hbm_rb_t() { }

cap_pbchbm_csr_cfg_hbm_cdt_t::cap_pbchbm_csr_cfg_hbm_cdt_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_cfg_hbm_cdt_t::~cap_pbchbm_csr_cfg_hbm_cdt_t() { }

cap_pbchbm_csr_sta_ecc_hbm_mtu_t::cap_pbchbm_csr_sta_ecc_hbm_mtu_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_sta_ecc_hbm_mtu_t::~cap_pbchbm_csr_sta_ecc_hbm_mtu_t() { }

cap_pbchbm_csr_csr_intr_t::cap_pbchbm_csr_csr_intr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbchbm_csr_csr_intr_t::~cap_pbchbm_csr_csr_intr_t() { }

cap_pbchbm_csr_t::cap_pbchbm_csr_t(string name, cap_csr_base * parent): 
    cap_block_base(name, parent)  { 
        set_byte_size(16384);
        set_attributes(0,get_name(), 0);
        }
cap_pbchbm_csr_t::~cap_pbchbm_csr_t() { }

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_9_enable: 0x" << int_var__occupancy_9_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_stop_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_9_interrupt: 0x" << int_var__occupancy_9_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop_0_enable: 0x" << int_var__drop_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_1_enable: 0x" << int_var__drop_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_2_enable: 0x" << int_var__drop_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_3_enable: 0x" << int_var__drop_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_4_enable: 0x" << int_var__drop_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_5_enable: 0x" << int_var__drop_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_6_enable: 0x" << int_var__drop_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_7_enable: 0x" << int_var__drop_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_8_enable: 0x" << int_var__drop_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop_0_interrupt: 0x" << int_var__drop_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_1_interrupt: 0x" << int_var__drop_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_2_interrupt: 0x" << int_var__drop_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_3_interrupt: 0x" << int_var__drop_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_4_interrupt: 0x" << int_var__drop_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_5_interrupt: 0x" << int_var__drop_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_6_interrupt: 0x" << int_var__drop_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_7_interrupt: 0x" << int_var__drop_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_8_interrupt: 0x" << int_var__drop_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_truncate_no_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_0_enable: 0x" << int_var__crossed_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_1_enable: 0x" << int_var__crossed_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_2_enable: 0x" << int_var__crossed_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_3_enable: 0x" << int_var__crossed_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_4_enable: 0x" << int_var__crossed_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_5_enable: 0x" << int_var__crossed_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_6_enable: 0x" << int_var__crossed_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_7_enable: 0x" << int_var__crossed_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_8_enable: 0x" << int_var__crossed_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_0_interrupt: 0x" << int_var__crossed_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_1_interrupt: 0x" << int_var__crossed_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_2_interrupt: 0x" << int_var__crossed_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_3_interrupt: 0x" << int_var__crossed_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_4_interrupt: 0x" << int_var__crossed_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_5_interrupt: 0x" << int_var__crossed_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_6_interrupt: 0x" << int_var__crossed_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_7_interrupt: 0x" << int_var__crossed_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".crossed_8_interrupt: 0x" << int_var__crossed_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_threshold_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".full_0_enable: 0x" << int_var__full_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_1_enable: 0x" << int_var__full_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_2_enable: 0x" << int_var__full_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_3_enable: 0x" << int_var__full_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_4_enable: 0x" << int_var__full_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_5_enable: 0x" << int_var__full_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_6_enable: 0x" << int_var__full_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_7_enable: 0x" << int_var__full_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_8_enable: 0x" << int_var__full_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".full_0_interrupt: 0x" << int_var__full_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_1_interrupt: 0x" << int_var__full_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_2_interrupt: 0x" << int_var__full_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_3_interrupt: 0x" << int_var__full_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_4_interrupt: 0x" << int_var__full_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_5_interrupt: 0x" << int_var__full_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_6_interrupt: 0x" << int_var__full_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_7_interrupt: 0x" << int_var__full_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_8_interrupt: 0x" << int_var__full_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_0_enable: 0x" << int_var__filling_up_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_1_enable: 0x" << int_var__filling_up_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_2_enable: 0x" << int_var__filling_up_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_3_enable: 0x" << int_var__filling_up_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_4_enable: 0x" << int_var__filling_up_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_5_enable: 0x" << int_var__filling_up_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_6_enable: 0x" << int_var__filling_up_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_7_enable: 0x" << int_var__filling_up_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_8_enable: 0x" << int_var__filling_up_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_0_enable: 0x" << int_var__full_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_1_enable: 0x" << int_var__full_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_2_enable: 0x" << int_var__full_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_3_enable: 0x" << int_var__full_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_4_enable: 0x" << int_var__full_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_5_enable: 0x" << int_var__full_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_6_enable: 0x" << int_var__full_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_7_enable: 0x" << int_var__full_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_8_enable: 0x" << int_var__full_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_0_interrupt: 0x" << int_var__filling_up_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_1_interrupt: 0x" << int_var__filling_up_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_2_interrupt: 0x" << int_var__filling_up_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_3_interrupt: 0x" << int_var__filling_up_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_4_interrupt: 0x" << int_var__filling_up_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_5_interrupt: 0x" << int_var__filling_up_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_6_interrupt: 0x" << int_var__filling_up_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_7_interrupt: 0x" << int_var__filling_up_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".filling_up_8_interrupt: 0x" << int_var__filling_up_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_0_interrupt: 0x" << int_var__full_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_1_interrupt: 0x" << int_var__full_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_2_interrupt: 0x" << int_var__full_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_3_interrupt: 0x" << int_var__full_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_4_interrupt: 0x" << int_var__full_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_5_interrupt: 0x" << int_var__full_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_6_interrupt: 0x" << int_var__full_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_7_interrupt: 0x" << int_var__full_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".full_8_interrupt: 0x" << int_var__full_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_write_ack_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".stop_0_enable: 0x" << int_var__stop_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_1_enable: 0x" << int_var__stop_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_2_enable: 0x" << int_var__stop_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_3_enable: 0x" << int_var__stop_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_4_enable: 0x" << int_var__stop_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_5_enable: 0x" << int_var__stop_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_6_enable: 0x" << int_var__stop_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_7_enable: 0x" << int_var__stop_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_8_enable: 0x" << int_var__stop_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".stop_0_interrupt: 0x" << int_var__stop_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_1_interrupt: 0x" << int_var__stop_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_2_interrupt: 0x" << int_var__stop_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_3_interrupt: 0x" << int_var__stop_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_4_interrupt: 0x" << int_var__stop_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_5_interrupt: 0x" << int_var__stop_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_6_interrupt: 0x" << int_var__stop_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_7_interrupt: 0x" << int_var__stop_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".stop_8_interrupt: 0x" << int_var__stop_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_emergency_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ctrl_enable: 0x" << int_var__ctrl_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pyld_enable: 0x" << int_var__pyld_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".r2a_enable: 0x" << int_var__r2a_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ctrl_interrupt: 0x" << int_var__ctrl_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pyld_interrupt: 0x" << int_var__pyld_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".r2a_interrupt: 0x" << int_var__r2a_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_axi_err_rsp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0_enable: 0x" << int_var__occupancy_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1_enable: 0x" << int_var__occupancy_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2_enable: 0x" << int_var__occupancy_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3_enable: 0x" << int_var__occupancy_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4_enable: 0x" << int_var__occupancy_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5_enable: 0x" << int_var__occupancy_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6_enable: 0x" << int_var__occupancy_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7_enable: 0x" << int_var__occupancy_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_8_enable: 0x" << int_var__occupancy_8_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0_interrupt: 0x" << int_var__occupancy_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1_interrupt: 0x" << int_var__occupancy_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2_interrupt: 0x" << int_var__occupancy_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3_interrupt: 0x" << int_var__occupancy_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4_interrupt: 0x" << int_var__occupancy_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5_interrupt: 0x" << int_var__occupancy_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6_interrupt: 0x" << int_var__occupancy_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7_interrupt: 0x" << int_var__occupancy_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_8_interrupt: 0x" << int_var__occupancy_8_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_drop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_0_enable: 0x" << int_var__sop_sop_out_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_1_enable: 0x" << int_var__sop_sop_out_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_2_enable: 0x" << int_var__sop_sop_out_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_3_enable: 0x" << int_var__sop_sop_out_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_4_enable: 0x" << int_var__sop_sop_out_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_5_enable: 0x" << int_var__sop_sop_out_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_6_enable: 0x" << int_var__sop_sop_out_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_7_enable: 0x" << int_var__sop_sop_out_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_8_enable: 0x" << int_var__sop_sop_out_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_9_enable: 0x" << int_var__sop_sop_out_9_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_0_enable: 0x" << int_var__eop_eop_out_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_1_enable: 0x" << int_var__eop_eop_out_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_2_enable: 0x" << int_var__eop_eop_out_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_3_enable: 0x" << int_var__eop_eop_out_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_4_enable: 0x" << int_var__eop_eop_out_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_5_enable: 0x" << int_var__eop_eop_out_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_6_enable: 0x" << int_var__eop_eop_out_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_7_enable: 0x" << int_var__eop_eop_out_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_8_enable: 0x" << int_var__eop_eop_out_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_9_enable: 0x" << int_var__eop_eop_out_9_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_0_interrupt: 0x" << int_var__sop_sop_out_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_1_interrupt: 0x" << int_var__sop_sop_out_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_2_interrupt: 0x" << int_var__sop_sop_out_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_3_interrupt: 0x" << int_var__sop_sop_out_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_4_interrupt: 0x" << int_var__sop_sop_out_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_5_interrupt: 0x" << int_var__sop_sop_out_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_6_interrupt: 0x" << int_var__sop_sop_out_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_7_interrupt: 0x" << int_var__sop_sop_out_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_8_interrupt: 0x" << int_var__sop_sop_out_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_out_9_interrupt: 0x" << int_var__sop_sop_out_9_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_0_interrupt: 0x" << int_var__eop_eop_out_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_1_interrupt: 0x" << int_var__eop_eop_out_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_2_interrupt: 0x" << int_var__eop_eop_out_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_3_interrupt: 0x" << int_var__eop_eop_out_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_4_interrupt: 0x" << int_var__eop_eop_out_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_5_interrupt: 0x" << int_var__eop_eop_out_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_6_interrupt: 0x" << int_var__eop_eop_out_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_7_interrupt: 0x" << int_var__eop_eop_out_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_8_interrupt: 0x" << int_var__eop_eop_out_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_out_9_interrupt: 0x" << int_var__eop_eop_out_9_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_out_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_0_enable: 0x" << int_var__sop_sop_in_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_1_enable: 0x" << int_var__sop_sop_in_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_2_enable: 0x" << int_var__sop_sop_in_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_3_enable: 0x" << int_var__sop_sop_in_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_4_enable: 0x" << int_var__sop_sop_in_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_5_enable: 0x" << int_var__sop_sop_in_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_6_enable: 0x" << int_var__sop_sop_in_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_7_enable: 0x" << int_var__sop_sop_in_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_8_enable: 0x" << int_var__sop_sop_in_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_9_enable: 0x" << int_var__sop_sop_in_9_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_0_enable: 0x" << int_var__eop_eop_in_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_1_enable: 0x" << int_var__eop_eop_in_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_2_enable: 0x" << int_var__eop_eop_in_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_3_enable: 0x" << int_var__eop_eop_in_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_4_enable: 0x" << int_var__eop_eop_in_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_5_enable: 0x" << int_var__eop_eop_in_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_6_enable: 0x" << int_var__eop_eop_in_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_7_enable: 0x" << int_var__eop_eop_in_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_8_enable: 0x" << int_var__eop_eop_in_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_9_enable: 0x" << int_var__eop_eop_in_9_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_0_interrupt: 0x" << int_var__sop_sop_in_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_1_interrupt: 0x" << int_var__sop_sop_in_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_2_interrupt: 0x" << int_var__sop_sop_in_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_3_interrupt: 0x" << int_var__sop_sop_in_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_4_interrupt: 0x" << int_var__sop_sop_in_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_5_interrupt: 0x" << int_var__sop_sop_in_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_6_interrupt: 0x" << int_var__sop_sop_in_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_7_interrupt: 0x" << int_var__sop_sop_in_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_8_interrupt: 0x" << int_var__sop_sop_in_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_sop_in_9_interrupt: 0x" << int_var__sop_sop_in_9_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_0_interrupt: 0x" << int_var__eop_eop_in_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_1_interrupt: 0x" << int_var__eop_eop_in_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_2_interrupt: 0x" << int_var__eop_eop_in_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_3_interrupt: 0x" << int_var__eop_eop_in_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_4_interrupt: 0x" << int_var__eop_eop_in_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_5_interrupt: 0x" << int_var__eop_eop_in_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_6_interrupt: 0x" << int_var__eop_eop_in_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_7_interrupt: 0x" << int_var__eop_eop_in_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_8_interrupt: 0x" << int_var__eop_eop_in_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_eop_in_9_interrupt: 0x" << int_var__eop_eop_in_9_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_pbus_violation_in_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_0_enable: 0x" << int_var__timeout_0_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_1_enable: 0x" << int_var__timeout_1_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_2_enable: 0x" << int_var__timeout_2_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_3_enable: 0x" << int_var__timeout_3_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_4_enable: 0x" << int_var__timeout_4_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_5_enable: 0x" << int_var__timeout_5_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_6_enable: 0x" << int_var__timeout_6_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_7_enable: 0x" << int_var__timeout_7_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_8_enable: 0x" << int_var__timeout_8_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_9_enable: 0x" << int_var__timeout_9_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_10_enable: 0x" << int_var__timeout_10_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_11_enable: 0x" << int_var__timeout_11_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_12_enable: 0x" << int_var__timeout_12_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_13_enable: 0x" << int_var__timeout_13_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_14_enable: 0x" << int_var__timeout_14_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_15_enable: 0x" << int_var__timeout_15_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_16_enable: 0x" << int_var__timeout_16_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_17_enable: 0x" << int_var__timeout_17_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_18_enable: 0x" << int_var__timeout_18_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_19_enable: 0x" << int_var__timeout_19_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_20_enable: 0x" << int_var__timeout_20_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_21_enable: 0x" << int_var__timeout_21_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_22_enable: 0x" << int_var__timeout_22_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_23_enable: 0x" << int_var__timeout_23_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_24_enable: 0x" << int_var__timeout_24_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_25_enable: 0x" << int_var__timeout_25_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_26_enable: 0x" << int_var__timeout_26_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_27_enable: 0x" << int_var__timeout_27_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_28_enable: 0x" << int_var__timeout_28_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_29_enable: 0x" << int_var__timeout_29_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_30_enable: 0x" << int_var__timeout_30_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_31_enable: 0x" << int_var__timeout_31_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_0_interrupt: 0x" << int_var__timeout_0_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_1_interrupt: 0x" << int_var__timeout_1_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_2_interrupt: 0x" << int_var__timeout_2_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_3_interrupt: 0x" << int_var__timeout_3_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_4_interrupt: 0x" << int_var__timeout_4_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_5_interrupt: 0x" << int_var__timeout_5_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_6_interrupt: 0x" << int_var__timeout_6_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_7_interrupt: 0x" << int_var__timeout_7_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_8_interrupt: 0x" << int_var__timeout_8_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_9_interrupt: 0x" << int_var__timeout_9_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_10_interrupt: 0x" << int_var__timeout_10_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_11_interrupt: 0x" << int_var__timeout_11_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_12_interrupt: 0x" << int_var__timeout_12_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_13_interrupt: 0x" << int_var__timeout_13_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_14_interrupt: 0x" << int_var__timeout_14_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_15_interrupt: 0x" << int_var__timeout_15_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_16_interrupt: 0x" << int_var__timeout_16_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_17_interrupt: 0x" << int_var__timeout_17_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_18_interrupt: 0x" << int_var__timeout_18_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_19_interrupt: 0x" << int_var__timeout_19_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_20_interrupt: 0x" << int_var__timeout_20_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_21_interrupt: 0x" << int_var__timeout_21_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_22_interrupt: 0x" << int_var__timeout_22_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_23_interrupt: 0x" << int_var__timeout_23_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_24_interrupt: 0x" << int_var__timeout_24_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_25_interrupt: 0x" << int_var__timeout_25_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_26_interrupt: 0x" << int_var__timeout_26_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_27_interrupt: 0x" << int_var__timeout_27_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_28_interrupt: 0x" << int_var__timeout_28_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_29_interrupt: 0x" << int_var__timeout_29_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_30_interrupt: 0x" << int_var__timeout_30_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".timeout_31_interrupt: 0x" << int_var__timeout_31_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_hbm_xoff_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable_enable: 0x" << int_var__uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable_enable: 0x" << int_var__correctable_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable_interrupt: 0x" << int_var__uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable_interrupt: 0x" << int_var__correctable_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_mtu_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rb_uncorrectable_enable: 0x" << int_var__rb_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_correctable_enable: 0x" << int_var__rb_correctable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_uncorrectable_enable: 0x" << int_var__cdt_uncorrectable_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_correctable_enable: 0x" << int_var__cdt_correctable_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rb_uncorrectable_interrupt: 0x" << int_var__rb_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_correctable_interrupt: 0x" << int_var__rb_correctable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_uncorrectable_interrupt: 0x" << int_var__cdt_uncorrectable_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_correctable_interrupt: 0x" << int_var__cdt_correctable_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_ecc_hbm_rb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_test_set.show();
    int_enable_set.show();
    int_enable_clear.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_intreg_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_mtu_interrupt: 0x" << int_var__int_ecc_hbm_mtu_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_rb_interrupt: 0x" << int_var__int_ecc_hbm_rb_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_wb_interrupt: 0x" << int_var__int_ecc_hbm_wb_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_ht_interrupt: 0x" << int_var__int_ecc_hbm_ht_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_xoff_interrupt: 0x" << int_var__int_hbm_xoff_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_pbus_violation_in_interrupt: 0x" << int_var__int_hbm_pbus_violation_in_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_pbus_violation_out_interrupt: 0x" << int_var__int_hbm_pbus_violation_out_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_interrupt: 0x" << int_var__int_hbm_drop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_stop_interrupt: 0x" << int_var__int_hbm_stop_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_axi_err_rsp_interrupt: 0x" << int_var__int_hbm_axi_err_rsp_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_emergency_interrupt: 0x" << int_var__int_hbm_drop_emergency_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_write_ack_interrupt: 0x" << int_var__int_hbm_drop_write_ack_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_ctrl_interrupt: 0x" << int_var__int_hbm_drop_ctrl_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_threshold_interrupt: 0x" << int_var__int_hbm_drop_threshold_interrupt << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_truncate_no_interrupt: 0x" << int_var__int_hbm_truncate_no_interrupt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_mtu_enable: 0x" << int_var__int_ecc_hbm_mtu_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_rb_enable: 0x" << int_var__int_ecc_hbm_rb_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_wb_enable: 0x" << int_var__int_ecc_hbm_wb_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_ecc_hbm_ht_enable: 0x" << int_var__int_ecc_hbm_ht_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_xoff_enable: 0x" << int_var__int_hbm_xoff_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_pbus_violation_in_enable: 0x" << int_var__int_hbm_pbus_violation_in_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_pbus_violation_out_enable: 0x" << int_var__int_hbm_pbus_violation_out_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_enable: 0x" << int_var__int_hbm_drop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_stop_enable: 0x" << int_var__int_hbm_stop_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_axi_err_rsp_enable: 0x" << int_var__int_hbm_axi_err_rsp_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_emergency_enable: 0x" << int_var__int_hbm_drop_emergency_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_write_ack_enable: 0x" << int_var__int_hbm_drop_write_ack_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_ctrl_enable: 0x" << int_var__int_hbm_drop_ctrl_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_drop_threshold_enable: 0x" << int_var__int_hbm_drop_threshold_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".int_hbm_truncate_no_enable: 0x" << int_var__int_hbm_truncate_no_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_intgrp_status_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    intreg.show();
    int_enable_rw_reg.show();
    int_rw_reg.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_wb_wm_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".command: 0x" << int_var__command << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_credit: 0x" << int_var__current_credit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".quota: 0x" << int_var__quota << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_r2a_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 3 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 3; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_mem_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rsvd: 0x" << int_var__rsvd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_mem_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    entry.show();
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".command: 0x" << int_var__command << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".current_credit: 0x" << int_var__current_credit << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".quota: 0x" << int_var__quota << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_dhs_hbm_cdt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    #if 88 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.show(); // large_array
    #else
    for(int ii = 0; ii < 88; ii++) {
        entry[ii].show();
    }
    #endif
    
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".write: 0x" << int_var__write << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".read: 0x" << int_var__read << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm_axi_pyld_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".read: 0x" << int_var__read << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm_axi_rpl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".read: 0x" << int_var__read << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".counters: 0x" << int_var__counters << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".counters: 0x" << int_var__counters << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff: 0x" << int_var__xoff << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".xon: 0x" << int_var__xon << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".auto_xon: 0x" << int_var__auto_xon << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".auto_clear: 0x" << int_var__auto_clear << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".write: 0x" << int_var__write << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".gather: 0x" << int_var__gather << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_flush_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".context: 0x" << int_var__context << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_flush_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".context: 0x" << int_var__context << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".index: 0x" << int_var__index << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".valid: 0x" << int_var__valid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".index: 0x" << int_var__index << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_qdepth_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".rsvd: 0x" << int_var__rsvd << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_parser_snap_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ctrl_oui: 0x" << int_var__ctrl_oui << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_cut_thru_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_timestamp_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_wb_depth_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".value: 0x" << int_var__value << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm8_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm8_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm7_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm7_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm6_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm6_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm5_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm5_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm4_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm4_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm3_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm3_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm2_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm2_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm1_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm1_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sat_hbm0_ctrl_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm0_truncate_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".drop: 0x" << int_var__drop << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_r2a_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".timer: 0x" << int_var__timer << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".enable_wrr: 0x" << int_var__enable_wrr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".strict_priority: 0x" << int_var__strict_priority << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".strict_priority_bypass_timer: 0x" << int_var__strict_priority_bypass_timer << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".selection: 0x" << int_var__selection << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_selection: 0x" << int_var__dhs_selection << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_axi_base_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_axi_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ctrl_rresp: 0x" << int_var__ctrl_rresp << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ctrl_rid: 0x" << int_var__ctrl_rid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pyld_rid: 0x" << int_var__pyld_rid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".pyld_rresp: 0x" << int_var__pyld_rresp << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".r2a_bid: 0x" << int_var__r2a_bid << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".r2a_bresp: 0x" << int_var__r2a_bresp << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_15_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_14_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_13_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_12_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_11_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_10_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_8_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_tx_context_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_31_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_30_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_29_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_28_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_27_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_26_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_25_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_24_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_23_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_22_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_21_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_20_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_19_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_18_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_17_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_16_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_15_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_14_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_13_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_12_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_11_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_10_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_9_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_8_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_7_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_6_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_5_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_4_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_3_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_2_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_1_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_eth_context_0_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".depth: 0x" << int_var__depth << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout_iq: 0x" << int_var__xoff_timeout_iq << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout_port: 0x" << int_var__xoff_timeout_port << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_ctrl_init_head_done: 0x" << int_var__tx_ctrl_init_head_done << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_ctrl_init_tail_done: 0x" << int_var__tx_ctrl_init_tail_done << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_ctrl_init_head_done: 0x" << int_var__eth_ctrl_init_head_done << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_ctrl_init_tail_done: 0x" << int_var__eth_ctrl_init_tail_done << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".head_start: 0x" << int_var__head_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tail_start: 0x" << int_var__tail_start << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_sz: 0x" << int_var__mem_sz << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_tx_payload_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_sz: 0x" << int_var__mem_sz << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".head_start: 0x" << int_var__head_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tail_start: 0x" << int_var__tail_start << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_sz: 0x" << int_var__mem_sz << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_eth_payload_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_sz: 0x" << int_var__mem_sz << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_threshold_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff: 0x" << int_var__xoff << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".xon: 0x" << int_var__xon << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_bist_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ht_eth_tail_done_fail: 0x" << int_var__ht_eth_tail_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_eth_tail_done_pass: 0x" << int_var__ht_eth_tail_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_eth_head_done_fail: 0x" << int_var__ht_eth_head_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_eth_head_done_pass: 0x" << int_var__ht_eth_head_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_tx_tail_done_fail: 0x" << int_var__ht_tx_tail_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_tx_tail_done_pass: 0x" << int_var__ht_tx_tail_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_tx_head_done_fail: 0x" << int_var__ht_tx_head_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ht_tx_head_done_pass: 0x" << int_var__ht_tx_head_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hbm_write_fifo_done_fail: 0x" << int_var__hbm_write_fifo_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hbm_write_fifo_done_pass: 0x" << int_var__hbm_write_fifo_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hbm_read_fifo_done_fail: 0x" << int_var__hbm_read_fifo_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hbm_read_fifo_done_pass: 0x" << int_var__hbm_read_fifo_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_ecc_hbm_ht_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_ht_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".eth_head_ecc_disable_cor: 0x" << int_var__eth_head_ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_head_ecc_disable_det: 0x" << int_var__eth_head_ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_head_dhs_eccbypass: 0x" << int_var__eth_head_dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_tail_ecc_disable_cor: 0x" << int_var__eth_tail_ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_tail_ecc_disable_det: 0x" << int_var__eth_tail_ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".eth_tail_dhs_eccbypass: 0x" << int_var__eth_tail_dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_head_dhs_eccbypass: 0x" << int_var__tx_head_dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".tx_tail_dhs_eccbypass: 0x" << int_var__tx_tail_dhs_eccbypass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cache: 0x" << int_var__cache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prot: 0x" << int_var__prot << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qos: 0x" << int_var__qos << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lock: 0x" << int_var__lock << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cache: 0x" << int_var__cache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".prot: 0x" << int_var__prot << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".qos: 0x" << int_var__qos << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".lock: 0x" << int_var__lock << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_cache: 0x" << int_var__rpl_cache << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_prot: 0x" << int_var__rpl_prot << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_qos: 0x" << int_var__rpl_qos << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_lock: 0x" << int_var__rpl_lock << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_wb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable: 0x" << int_var__ecc_correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable: 0x" << int_var__ecc_uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_syndrome: 0x" << int_var__ecc_syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_addr: 0x" << int_var__ecc_addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_hbm_rb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".init_done: 0x" << int_var__init_done << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_ecc_correctable: 0x" << int_var__cdt_ecc_correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_ecc_uncorrectable: 0x" << int_var__cdt_ecc_uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_ecc_correctable: 0x" << int_var__rb_ecc_correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_ecc_uncorrectable: 0x" << int_var__rb_ecc_uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_ecc_syndrome: 0x" << int_var__rb_ecc_syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".rb_ecc_addr: 0x" << int_var__rb_ecc_addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_ecc_syndrome: 0x" << int_var__cdt_ecc_syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_ecc_addr: 0x" << int_var__cdt_ecc_addr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_fail: 0x" << int_var__bist_done_fail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_done_pass: 0x" << int_var__bist_done_pass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hct_init_done: 0x" << int_var__hct_init_done << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_wb_drop_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".threshold: 0x" << int_var__threshold << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_wb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_threshold: 0x" << int_var__xoff_threshold << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ack_fifo_xoff_threshold: 0x" << int_var__ack_fifo_xoff_threshold << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ack_fifo_xon_threshold: 0x" << int_var__ack_fifo_xon_threshold << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr_swizzle: 0x" << int_var__addr_swizzle << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_xoff_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".timeout: 0x" << int_var__timeout << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_mem_address: 0x" << int_var__dhs_mem_address << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mtu_dhs_selection: 0x" << int_var__mtu_dhs_selection << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".debug_port_enable: 0x" << int_var__debug_port_enable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".debug_port_select: 0x" << int_var__debug_port_select << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run_tx_head: 0x" << int_var__bist_run_tx_head << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run_tx_tail: 0x" << int_var__bist_run_tx_tail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run_eth_head: 0x" << int_var__bist_run_eth_head << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run_eth_tail: 0x" << int_var__bist_run_eth_tail << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".control_sw_reset: 0x" << int_var__control_sw_reset << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_spare_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_rb_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".mem_ecc_disable_cor: 0x" << int_var__mem_ecc_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_ecc_disable_det: 0x" << int_var__mem_ecc_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".mem_dhs_eccbypass: 0x" << int_var__mem_dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".enable_wrr: 0x" << int_var__enable_wrr << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".cdt_dhs_selection: 0x" << int_var__cdt_dhs_selection << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hct_dhs_eccbypass: 0x" << int_var__hct_dhs_eccbypass << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_hct_disable_cor: 0x" << int_var__ecc_hct_disable_cor << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_hct_disable_det: 0x" << int_var__ecc_hct_disable_det << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".bist_run: 0x" << int_var__bist_run << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".hct_init_start: 0x" << int_var__hct_init_start << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr_swizzle: 0x" << int_var__addr_swizzle << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".max_arlen: 0x" << int_var__max_arlen << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_cfg_hbm_cdt_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".cfg_hbm_cdt: 0x" << int_var__cfg_hbm_cdt << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_csr_intr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream: 0x" << int_var__dowstream << dec << endl);
    PLOG_MSG(hex << string(get_hier_path()) << ".dowstream_enable: 0x" << int_var__dowstream_enable << dec << endl);
}
#endif // CSR_NO_SHOW_IMPL

#ifndef CSR_NO_SHOW_IMPL 
void cap_pbchbm_csr_t::show() {
    PLOG_MSG(get_hier_path() << "(all) : 0x" << hex << all() << dec << endl);
    if(all() == 0) return;

    csr_intr.show();
    sta_ecc_hbm_mtu.show();
    cfg_hbm_cdt.show();
    cfg_hbm_rb.show();
    cfg_hbm_spare.show();
    cfg_hbm.show();
    cfg_hbm_xoff.show();
    cfg_hbm_wb.show();
    cfg_hbm_wb_drop.show();
    sta_hbm_rb.show();
    sta_hbm_wb.show();
    cfg_hbm_axi_read_attr.show();
    cfg_hbm_axi_write_attr.show();
    cfg_hbm_ht.show();
    sta_ecc_hbm_ht.show();
    sta_bist.show();
    cfg_hbm_threshold.show();
    cfg_hbm_eth_payload.show();
    cfg_hbm_eth_ctrl.show();
    cfg_hbm_eth_ctrl_init.show();
    cfg_hbm_tx_payload.show();
    cfg_hbm_tx_ctrl.show();
    cfg_hbm_tx_ctrl_init.show();
    sta_hbm.show();
    sta_hbm_eth_context_0.show();
    sta_hbm_eth_context_1.show();
    sta_hbm_eth_context_2.show();
    sta_hbm_eth_context_3.show();
    sta_hbm_eth_context_4.show();
    sta_hbm_eth_context_5.show();
    sta_hbm_eth_context_6.show();
    sta_hbm_eth_context_7.show();
    sta_hbm_eth_context_8.show();
    sta_hbm_eth_context_9.show();
    sta_hbm_eth_context_10.show();
    sta_hbm_eth_context_11.show();
    sta_hbm_eth_context_12.show();
    sta_hbm_eth_context_13.show();
    sta_hbm_eth_context_14.show();
    sta_hbm_eth_context_15.show();
    sta_hbm_eth_context_16.show();
    sta_hbm_eth_context_17.show();
    sta_hbm_eth_context_18.show();
    sta_hbm_eth_context_19.show();
    sta_hbm_eth_context_20.show();
    sta_hbm_eth_context_21.show();
    sta_hbm_eth_context_22.show();
    sta_hbm_eth_context_23.show();
    sta_hbm_eth_context_24.show();
    sta_hbm_eth_context_25.show();
    sta_hbm_eth_context_26.show();
    sta_hbm_eth_context_27.show();
    sta_hbm_eth_context_28.show();
    sta_hbm_eth_context_29.show();
    sta_hbm_eth_context_30.show();
    sta_hbm_eth_context_31.show();
    sta_hbm_tx_context_0.show();
    sta_hbm_tx_context_1.show();
    sta_hbm_tx_context_2.show();
    sta_hbm_tx_context_3.show();
    sta_hbm_tx_context_4.show();
    sta_hbm_tx_context_5.show();
    sta_hbm_tx_context_6.show();
    sta_hbm_tx_context_7.show();
    sta_hbm_tx_context_8.show();
    sta_hbm_tx_context_9.show();
    sta_hbm_tx_context_10.show();
    sta_hbm_tx_context_11.show();
    sta_hbm_tx_context_12.show();
    sta_hbm_tx_context_13.show();
    sta_hbm_tx_context_14.show();
    sta_hbm_tx_context_15.show();
    sta_hbm_axi.show();
    cfg_hbm_axi_base.show();
    cfg_hbm_r2a.show();
    cnt_hbm0_emergency_stop.show();
    cnt_hbm0_write_ack_filling_up.show();
    cnt_hbm0_write_ack_full.show();
    cnt_hbm0_truncate.show();
    sat_hbm0_ctrl_full.show();
    cnt_hbm1_emergency_stop.show();
    cnt_hbm1_write_ack_filling_up.show();
    cnt_hbm1_write_ack_full.show();
    cnt_hbm1_truncate.show();
    sat_hbm1_ctrl_full.show();
    cnt_hbm2_emergency_stop.show();
    cnt_hbm2_write_ack_filling_up.show();
    cnt_hbm2_write_ack_full.show();
    cnt_hbm2_truncate.show();
    sat_hbm2_ctrl_full.show();
    cnt_hbm3_emergency_stop.show();
    cnt_hbm3_write_ack_filling_up.show();
    cnt_hbm3_write_ack_full.show();
    cnt_hbm3_truncate.show();
    sat_hbm3_ctrl_full.show();
    cnt_hbm4_emergency_stop.show();
    cnt_hbm4_write_ack_filling_up.show();
    cnt_hbm4_write_ack_full.show();
    cnt_hbm4_truncate.show();
    sat_hbm4_ctrl_full.show();
    cnt_hbm5_emergency_stop.show();
    cnt_hbm5_write_ack_filling_up.show();
    cnt_hbm5_write_ack_full.show();
    cnt_hbm5_truncate.show();
    sat_hbm5_ctrl_full.show();
    cnt_hbm6_emergency_stop.show();
    cnt_hbm6_write_ack_filling_up.show();
    cnt_hbm6_write_ack_full.show();
    cnt_hbm6_truncate.show();
    sat_hbm6_ctrl_full.show();
    cnt_hbm7_emergency_stop.show();
    cnt_hbm7_write_ack_filling_up.show();
    cnt_hbm7_write_ack_full.show();
    cnt_hbm7_truncate.show();
    sat_hbm7_ctrl_full.show();
    cnt_hbm8_emergency_stop.show();
    cnt_hbm8_write_ack_filling_up.show();
    cnt_hbm8_write_ack_full.show();
    cnt_hbm8_truncate.show();
    sat_hbm8_ctrl_full.show();
    sta_hbm_wb_depth.show();
    sta_hbm_eth_pend_acks.show();
    sta_hbm_tx_pend_acks.show();
    sta_hbm_timestamp.show();
    cfg_hbm_cut_thru.show();
    cfg_hbm_parser_snap.show();
    cfg_hbm_qdepth.show();
    cfg_hbm_eth_reset_context.show();
    cfg_hbm_tx_reset_context.show();
    cfg_hbm_eth_flush.show();
    cfg_hbm_tx_flush.show();
    cfg_hbm_wb_duty_cycle.show();
    cfg_hbm_eth_xoff_timeout.show();
    cfg_hbm_eth_xoff_force.show();
    cfg_hbm_eth_clear_context.show();
    cfg_hbm_tx_clear_context.show();
    cnt_hbm_axi_rpl.show();
    cnt_hbm_axi_pyld.show();
    cnt_hbm_axi_ctrl.show();
    cnt_hbm_axi_timestamp.show();
    dhs_hbm_cdt.show();
    dhs_hbm_mem.show();
    dhs_hbm_r2a.show();
    dhs_hbm_wb_wm.show();
    dhs_hbm_eth_pend_acks_wm.show();
    dhs_hbm_tx_pend_acks_wm.show();
    hbm_port_0.show();
    hbm_port_1.show();
    hbm_port_2.show();
    hbm_port_3.show();
    hbm_port_4.show();
    hbm_port_5.show();
    hbm_port_6.show();
    hbm_port_7.show();
    hbm_port_8.show();
    hbm_port_9.show();
    int_groups.show();
    int_ecc_hbm_mtu.show();
    int_ecc_hbm_rb.show();
    int_ecc_hbm_wb.show();
    int_ecc_hbm_ht.show();
    int_hbm_xoff.show();
    int_hbm_pbus_violation_in.show();
    int_hbm_pbus_violation_out.show();
    int_hbm_drop.show();
    int_hbm_axi_err_rsp.show();
    int_hbm_drop_emergency.show();
    int_hbm_drop_write_ack.show();
    int_hbm_drop_ctrl.show();
    int_hbm_drop_threshold.show();
    int_hbm_truncate_no.show();
    int_hbm_stop.show();
}
#endif // CSR_NO_SHOW_IMPL

int cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_stop_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_stop_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_stop_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_stop_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_truncate_no_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_truncate_no_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_threshold_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_threshold_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_ctrl_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_ctrl_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_write_ack_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_write_ack_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_emergency_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_emergency_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_axi_err_rsp_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_drop_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_drop_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_out_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_pbus_violation_in_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_xoff_t::get_width() const {
    return cap_pbchbm_csr_int_hbm_xoff_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_mtu_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_mtu_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::s_get_width();

}

int cap_pbchbm_csr_int_ecc_hbm_rb_t::get_width() const {
    return cap_pbchbm_csr_int_ecc_hbm_rb_t::s_get_width();

}

int cap_pbchbm_csr_intreg_status_t::get_width() const {
    return cap_pbchbm_csr_intreg_status_t::s_get_width();

}

int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::get_width() const {
    return cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::s_get_width();

}

int cap_pbchbm_csr_intgrp_status_t::get_width() const {
    return cap_pbchbm_csr_intgrp_status_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_wb_wm_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_wb_wm_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_r2a_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_r2a_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_r2a_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_mem_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_mem_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_mem_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_mem_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_cdt_entry_t::s_get_width();

}

int cap_pbchbm_csr_dhs_hbm_cdt_t::get_width() const {
    return cap_pbchbm_csr_dhs_hbm_cdt_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm_axi_pyld_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm_axi_pyld_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm_axi_rpl_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm_axi_rpl_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_flush_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_flush_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_flush_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_flush_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_qdepth_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_qdepth_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_parser_snap_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_parser_snap_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_cut_thru_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_cut_thru_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_timestamp_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_timestamp_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_wb_depth_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_wb_depth_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm8_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm8_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm8_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm8_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm7_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm7_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm7_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm7_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm6_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm6_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm6_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm6_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm5_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm5_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm5_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm5_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm4_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm4_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm4_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm4_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm3_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm3_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm3_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm3_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm2_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm2_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm2_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm2_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm1_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm1_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm1_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm1_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_sat_hbm0_ctrl_full_t::get_width() const {
    return cap_pbchbm_csr_sat_hbm0_ctrl_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm0_truncate_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm0_truncate_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::s_get_width();

}

int cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::get_width() const {
    return cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_r2a_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_r2a_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_axi_base_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_axi_base_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_axi_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_axi_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_15_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_15_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_14_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_14_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_13_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_13_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_12_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_12_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_11_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_11_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_10_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_10_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_9_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_9_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_8_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_8_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_7_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_7_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_6_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_6_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_5_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_5_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_4_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_4_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_3_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_3_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_2_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_2_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_1_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_1_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_tx_context_0_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_tx_context_0_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_31_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_31_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_30_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_30_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_29_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_29_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_28_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_28_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_27_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_27_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_26_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_26_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_25_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_25_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_24_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_24_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_23_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_23_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_22_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_22_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_21_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_21_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_20_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_20_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_19_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_19_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_18_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_18_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_17_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_17_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_16_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_16_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_15_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_15_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_14_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_14_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_13_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_13_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_12_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_12_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_11_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_11_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_10_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_10_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_9_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_9_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_8_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_8_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_7_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_7_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_6_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_6_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_5_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_5_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_4_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_4_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_3_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_3_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_2_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_2_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_1_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_1_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_eth_context_0_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_eth_context_0_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_tx_payload_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_tx_payload_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_eth_payload_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_eth_payload_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_threshold_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_threshold_t::s_get_width();

}

int cap_pbchbm_csr_sta_bist_t::get_width() const {
    return cap_pbchbm_csr_sta_bist_t::s_get_width();

}

int cap_pbchbm_csr_sta_ecc_hbm_ht_t::get_width() const {
    return cap_pbchbm_csr_sta_ecc_hbm_ht_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_ht_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_ht_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_wb_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_wb_t::s_get_width();

}

int cap_pbchbm_csr_sta_hbm_rb_t::get_width() const {
    return cap_pbchbm_csr_sta_hbm_rb_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_wb_drop_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_wb_drop_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_wb_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_wb_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_xoff_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_xoff_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_spare_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_spare_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_rb_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_rb_t::s_get_width();

}

int cap_pbchbm_csr_cfg_hbm_cdt_t::get_width() const {
    return cap_pbchbm_csr_cfg_hbm_cdt_t::s_get_width();

}

int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::get_width() const {
    return cap_pbchbm_csr_sta_ecc_hbm_mtu_t::s_get_width();

}

int cap_pbchbm_csr_csr_intr_t::get_width() const {
    return cap_pbchbm_csr_csr_intr_t::s_get_width();

}

int cap_pbchbm_csr_t::get_width() const {
    return cap_pbchbm_csr_t::s_get_width();

}

int cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // occupancy_9_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_stop_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // occupancy_9_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_stop_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_stop_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_stop_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // drop_0_enable
    _count += 1; // drop_1_enable
    _count += 1; // drop_2_enable
    _count += 1; // drop_3_enable
    _count += 1; // drop_4_enable
    _count += 1; // drop_5_enable
    _count += 1; // drop_6_enable
    _count += 1; // drop_7_enable
    _count += 1; // drop_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // drop_0_interrupt
    _count += 1; // drop_1_interrupt
    _count += 1; // drop_2_interrupt
    _count += 1; // drop_3_interrupt
    _count += 1; // drop_4_interrupt
    _count += 1; // drop_5_interrupt
    _count += 1; // drop_6_interrupt
    _count += 1; // drop_7_interrupt
    _count += 1; // drop_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_truncate_no_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // crossed_0_enable
    _count += 1; // crossed_1_enable
    _count += 1; // crossed_2_enable
    _count += 1; // crossed_3_enable
    _count += 1; // crossed_4_enable
    _count += 1; // crossed_5_enable
    _count += 1; // crossed_6_enable
    _count += 1; // crossed_7_enable
    _count += 1; // crossed_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // crossed_0_interrupt
    _count += 1; // crossed_1_interrupt
    _count += 1; // crossed_2_interrupt
    _count += 1; // crossed_3_interrupt
    _count += 1; // crossed_4_interrupt
    _count += 1; // crossed_5_interrupt
    _count += 1; // crossed_6_interrupt
    _count += 1; // crossed_7_interrupt
    _count += 1; // crossed_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_threshold_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // full_0_enable
    _count += 1; // full_1_enable
    _count += 1; // full_2_enable
    _count += 1; // full_3_enable
    _count += 1; // full_4_enable
    _count += 1; // full_5_enable
    _count += 1; // full_6_enable
    _count += 1; // full_7_enable
    _count += 1; // full_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // full_0_interrupt
    _count += 1; // full_1_interrupt
    _count += 1; // full_2_interrupt
    _count += 1; // full_3_interrupt
    _count += 1; // full_4_interrupt
    _count += 1; // full_5_interrupt
    _count += 1; // full_6_interrupt
    _count += 1; // full_7_interrupt
    _count += 1; // full_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_ctrl_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // filling_up_0_enable
    _count += 1; // filling_up_1_enable
    _count += 1; // filling_up_2_enable
    _count += 1; // filling_up_3_enable
    _count += 1; // filling_up_4_enable
    _count += 1; // filling_up_5_enable
    _count += 1; // filling_up_6_enable
    _count += 1; // filling_up_7_enable
    _count += 1; // filling_up_8_enable
    _count += 1; // full_0_enable
    _count += 1; // full_1_enable
    _count += 1; // full_2_enable
    _count += 1; // full_3_enable
    _count += 1; // full_4_enable
    _count += 1; // full_5_enable
    _count += 1; // full_6_enable
    _count += 1; // full_7_enable
    _count += 1; // full_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // filling_up_0_interrupt
    _count += 1; // filling_up_1_interrupt
    _count += 1; // filling_up_2_interrupt
    _count += 1; // filling_up_3_interrupt
    _count += 1; // filling_up_4_interrupt
    _count += 1; // filling_up_5_interrupt
    _count += 1; // filling_up_6_interrupt
    _count += 1; // filling_up_7_interrupt
    _count += 1; // filling_up_8_interrupt
    _count += 1; // full_0_interrupt
    _count += 1; // full_1_interrupt
    _count += 1; // full_2_interrupt
    _count += 1; // full_3_interrupt
    _count += 1; // full_4_interrupt
    _count += 1; // full_5_interrupt
    _count += 1; // full_6_interrupt
    _count += 1; // full_7_interrupt
    _count += 1; // full_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_write_ack_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // stop_0_enable
    _count += 1; // stop_1_enable
    _count += 1; // stop_2_enable
    _count += 1; // stop_3_enable
    _count += 1; // stop_4_enable
    _count += 1; // stop_5_enable
    _count += 1; // stop_6_enable
    _count += 1; // stop_7_enable
    _count += 1; // stop_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // stop_0_interrupt
    _count += 1; // stop_1_interrupt
    _count += 1; // stop_2_interrupt
    _count += 1; // stop_3_interrupt
    _count += 1; // stop_4_interrupt
    _count += 1; // stop_5_interrupt
    _count += 1; // stop_6_interrupt
    _count += 1; // stop_7_interrupt
    _count += 1; // stop_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_emergency_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // ctrl_enable
    _count += 1; // pyld_enable
    _count += 1; // r2a_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // ctrl_interrupt
    _count += 1; // pyld_interrupt
    _count += 1; // r2a_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_axi_err_rsp_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // occupancy_0_enable
    _count += 1; // occupancy_1_enable
    _count += 1; // occupancy_2_enable
    _count += 1; // occupancy_3_enable
    _count += 1; // occupancy_4_enable
    _count += 1; // occupancy_5_enable
    _count += 1; // occupancy_6_enable
    _count += 1; // occupancy_7_enable
    _count += 1; // occupancy_8_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // occupancy_0_interrupt
    _count += 1; // occupancy_1_interrupt
    _count += 1; // occupancy_2_interrupt
    _count += 1; // occupancy_3_interrupt
    _count += 1; // occupancy_4_interrupt
    _count += 1; // occupancy_5_interrupt
    _count += 1; // occupancy_6_interrupt
    _count += 1; // occupancy_7_interrupt
    _count += 1; // occupancy_8_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_drop_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_drop_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_drop_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // sop_sop_out_0_enable
    _count += 1; // sop_sop_out_1_enable
    _count += 1; // sop_sop_out_2_enable
    _count += 1; // sop_sop_out_3_enable
    _count += 1; // sop_sop_out_4_enable
    _count += 1; // sop_sop_out_5_enable
    _count += 1; // sop_sop_out_6_enable
    _count += 1; // sop_sop_out_7_enable
    _count += 1; // sop_sop_out_8_enable
    _count += 1; // sop_sop_out_9_enable
    _count += 1; // eop_eop_out_0_enable
    _count += 1; // eop_eop_out_1_enable
    _count += 1; // eop_eop_out_2_enable
    _count += 1; // eop_eop_out_3_enable
    _count += 1; // eop_eop_out_4_enable
    _count += 1; // eop_eop_out_5_enable
    _count += 1; // eop_eop_out_6_enable
    _count += 1; // eop_eop_out_7_enable
    _count += 1; // eop_eop_out_8_enable
    _count += 1; // eop_eop_out_9_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // sop_sop_out_0_interrupt
    _count += 1; // sop_sop_out_1_interrupt
    _count += 1; // sop_sop_out_2_interrupt
    _count += 1; // sop_sop_out_3_interrupt
    _count += 1; // sop_sop_out_4_interrupt
    _count += 1; // sop_sop_out_5_interrupt
    _count += 1; // sop_sop_out_6_interrupt
    _count += 1; // sop_sop_out_7_interrupt
    _count += 1; // sop_sop_out_8_interrupt
    _count += 1; // sop_sop_out_9_interrupt
    _count += 1; // eop_eop_out_0_interrupt
    _count += 1; // eop_eop_out_1_interrupt
    _count += 1; // eop_eop_out_2_interrupt
    _count += 1; // eop_eop_out_3_interrupt
    _count += 1; // eop_eop_out_4_interrupt
    _count += 1; // eop_eop_out_5_interrupt
    _count += 1; // eop_eop_out_6_interrupt
    _count += 1; // eop_eop_out_7_interrupt
    _count += 1; // eop_eop_out_8_interrupt
    _count += 1; // eop_eop_out_9_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_out_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // sop_sop_in_0_enable
    _count += 1; // sop_sop_in_1_enable
    _count += 1; // sop_sop_in_2_enable
    _count += 1; // sop_sop_in_3_enable
    _count += 1; // sop_sop_in_4_enable
    _count += 1; // sop_sop_in_5_enable
    _count += 1; // sop_sop_in_6_enable
    _count += 1; // sop_sop_in_7_enable
    _count += 1; // sop_sop_in_8_enable
    _count += 1; // sop_sop_in_9_enable
    _count += 1; // eop_eop_in_0_enable
    _count += 1; // eop_eop_in_1_enable
    _count += 1; // eop_eop_in_2_enable
    _count += 1; // eop_eop_in_3_enable
    _count += 1; // eop_eop_in_4_enable
    _count += 1; // eop_eop_in_5_enable
    _count += 1; // eop_eop_in_6_enable
    _count += 1; // eop_eop_in_7_enable
    _count += 1; // eop_eop_in_8_enable
    _count += 1; // eop_eop_in_9_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // sop_sop_in_0_interrupt
    _count += 1; // sop_sop_in_1_interrupt
    _count += 1; // sop_sop_in_2_interrupt
    _count += 1; // sop_sop_in_3_interrupt
    _count += 1; // sop_sop_in_4_interrupt
    _count += 1; // sop_sop_in_5_interrupt
    _count += 1; // sop_sop_in_6_interrupt
    _count += 1; // sop_sop_in_7_interrupt
    _count += 1; // sop_sop_in_8_interrupt
    _count += 1; // sop_sop_in_9_interrupt
    _count += 1; // eop_eop_in_0_interrupt
    _count += 1; // eop_eop_in_1_interrupt
    _count += 1; // eop_eop_in_2_interrupt
    _count += 1; // eop_eop_in_3_interrupt
    _count += 1; // eop_eop_in_4_interrupt
    _count += 1; // eop_eop_in_5_interrupt
    _count += 1; // eop_eop_in_6_interrupt
    _count += 1; // eop_eop_in_7_interrupt
    _count += 1; // eop_eop_in_8_interrupt
    _count += 1; // eop_eop_in_9_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_pbus_violation_in_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // timeout_0_enable
    _count += 1; // timeout_1_enable
    _count += 1; // timeout_2_enable
    _count += 1; // timeout_3_enable
    _count += 1; // timeout_4_enable
    _count += 1; // timeout_5_enable
    _count += 1; // timeout_6_enable
    _count += 1; // timeout_7_enable
    _count += 1; // timeout_8_enable
    _count += 1; // timeout_9_enable
    _count += 1; // timeout_10_enable
    _count += 1; // timeout_11_enable
    _count += 1; // timeout_12_enable
    _count += 1; // timeout_13_enable
    _count += 1; // timeout_14_enable
    _count += 1; // timeout_15_enable
    _count += 1; // timeout_16_enable
    _count += 1; // timeout_17_enable
    _count += 1; // timeout_18_enable
    _count += 1; // timeout_19_enable
    _count += 1; // timeout_20_enable
    _count += 1; // timeout_21_enable
    _count += 1; // timeout_22_enable
    _count += 1; // timeout_23_enable
    _count += 1; // timeout_24_enable
    _count += 1; // timeout_25_enable
    _count += 1; // timeout_26_enable
    _count += 1; // timeout_27_enable
    _count += 1; // timeout_28_enable
    _count += 1; // timeout_29_enable
    _count += 1; // timeout_30_enable
    _count += 1; // timeout_31_enable
    return _count;
}

int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // timeout_0_interrupt
    _count += 1; // timeout_1_interrupt
    _count += 1; // timeout_2_interrupt
    _count += 1; // timeout_3_interrupt
    _count += 1; // timeout_4_interrupt
    _count += 1; // timeout_5_interrupt
    _count += 1; // timeout_6_interrupt
    _count += 1; // timeout_7_interrupt
    _count += 1; // timeout_8_interrupt
    _count += 1; // timeout_9_interrupt
    _count += 1; // timeout_10_interrupt
    _count += 1; // timeout_11_interrupt
    _count += 1; // timeout_12_interrupt
    _count += 1; // timeout_13_interrupt
    _count += 1; // timeout_14_interrupt
    _count += 1; // timeout_15_interrupt
    _count += 1; // timeout_16_interrupt
    _count += 1; // timeout_17_interrupt
    _count += 1; // timeout_18_interrupt
    _count += 1; // timeout_19_interrupt
    _count += 1; // timeout_20_interrupt
    _count += 1; // timeout_21_interrupt
    _count += 1; // timeout_22_interrupt
    _count += 1; // timeout_23_interrupt
    _count += 1; // timeout_24_interrupt
    _count += 1; // timeout_25_interrupt
    _count += 1; // timeout_26_interrupt
    _count += 1; // timeout_27_interrupt
    _count += 1; // timeout_28_interrupt
    _count += 1; // timeout_29_interrupt
    _count += 1; // timeout_30_interrupt
    _count += 1; // timeout_31_interrupt
    return _count;
}

int cap_pbchbm_csr_int_hbm_xoff_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable_enable
    _count += 1; // correctable_enable
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable_interrupt
    _count += 1; // correctable_interrupt
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_mtu_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::s_get_width() {
    int _count = 0;

    _count += 1; // rb_uncorrectable_enable
    _count += 1; // rb_correctable_enable
    _count += 1; // cdt_uncorrectable_enable
    _count += 1; // cdt_correctable_enable
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::s_get_width() {
    int _count = 0;

    _count += 1; // rb_uncorrectable_interrupt
    _count += 1; // rb_correctable_interrupt
    _count += 1; // cdt_uncorrectable_interrupt
    _count += 1; // cdt_correctable_interrupt
    return _count;
}

int cap_pbchbm_csr_int_ecc_hbm_rb_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::s_get_width(); // int_test_set
    _count += cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::s_get_width(); // int_enable_set
    _count += cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::s_get_width(); // int_enable_clear
    return _count;
}

int cap_pbchbm_csr_intreg_status_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_ecc_hbm_mtu_interrupt
    _count += 1; // int_ecc_hbm_rb_interrupt
    _count += 1; // int_ecc_hbm_wb_interrupt
    _count += 1; // int_ecc_hbm_ht_interrupt
    _count += 1; // int_hbm_xoff_interrupt
    _count += 1; // int_hbm_pbus_violation_in_interrupt
    _count += 1; // int_hbm_pbus_violation_out_interrupt
    _count += 1; // int_hbm_drop_interrupt
    _count += 1; // int_hbm_stop_interrupt
    _count += 1; // int_hbm_axi_err_rsp_interrupt
    _count += 1; // int_hbm_drop_emergency_interrupt
    _count += 1; // int_hbm_drop_write_ack_interrupt
    _count += 1; // int_hbm_drop_ctrl_interrupt
    _count += 1; // int_hbm_drop_threshold_interrupt
    _count += 1; // int_hbm_truncate_no_interrupt
    return _count;
}

int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::s_get_width() {
    int _count = 0;

    _count += 1; // int_ecc_hbm_mtu_enable
    _count += 1; // int_ecc_hbm_rb_enable
    _count += 1; // int_ecc_hbm_wb_enable
    _count += 1; // int_ecc_hbm_ht_enable
    _count += 1; // int_hbm_xoff_enable
    _count += 1; // int_hbm_pbus_violation_in_enable
    _count += 1; // int_hbm_pbus_violation_out_enable
    _count += 1; // int_hbm_drop_enable
    _count += 1; // int_hbm_stop_enable
    _count += 1; // int_hbm_axi_err_rsp_enable
    _count += 1; // int_hbm_drop_emergency_enable
    _count += 1; // int_hbm_drop_write_ack_enable
    _count += 1; // int_hbm_drop_ctrl_enable
    _count += 1; // int_hbm_drop_threshold_enable
    _count += 1; // int_hbm_truncate_no_enable
    return _count;
}

int cap_pbchbm_csr_intgrp_status_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_intreg_status_t::s_get_width(); // intreg
    _count += cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::s_get_width(); // int_enable_rw_reg
    _count += cap_pbchbm_csr_intreg_status_t::s_get_width(); // int_rw_reg
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::s_get_width() {
    int _count = 0;

    _count += 48; // value
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::s_get_width() {
    int _count = 0;

    _count += 96; // value
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::s_get_width() {
    int _count = 0;

    _count += 11; // value
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_wb_wm_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::s_get_width() {
    int _count = 0;

    _count += 2; // command
    _count += 10; // current_credit
    _count += 10; // quota
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_r2a_t::s_get_width() {
    int _count = 0;

    _count += (cap_pbchbm_csr_dhs_hbm_r2a_entry_t::s_get_width() * 3); // entry
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_mem_entry_t::s_get_width() {
    int _count = 0;

    _count += 768; // rsvd
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_mem_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_dhs_hbm_mem_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::s_get_width() {
    int _count = 0;

    _count += 7; // command
    _count += 16; // current_credit
    _count += 16; // quota
    return _count;
}

int cap_pbchbm_csr_dhs_hbm_cdt_t::s_get_width() {
    int _count = 0;

    _count += (cap_pbchbm_csr_dhs_hbm_cdt_entry_t::s_get_width() * 88); // entry
    return _count;
}

int cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::s_get_width() {
    int _count = 0;

    _count += 32; // write
    return _count;
}

int cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::s_get_width() {
    int _count = 0;

    _count += 32; // read
    return _count;
}

int cap_pbchbm_csr_cnt_hbm_axi_pyld_t::s_get_width() {
    int _count = 0;

    _count += 32; // read
    return _count;
}

int cap_pbchbm_csr_cnt_hbm_axi_rpl_t::s_get_width() {
    int _count = 0;

    _count += 32; // read
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::s_get_width() {
    int _count = 0;

    _count += 16; // counters
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::s_get_width() {
    int _count = 0;

    _count += 32; // counters
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff
    _count += 32; // xon
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::s_get_width() {
    int _count = 0;

    _count += 32; // enable
    _count += 32; // auto_xon
    _count += 32; // auto_clear
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::s_get_width() {
    int _count = 0;

    _count += 16; // write
    _count += 16; // gather
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_flush_t::s_get_width() {
    int _count = 0;

    _count += 16; // context
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_flush_t::s_get_width() {
    int _count = 0;

    _count += 32; // context
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::s_get_width() {
    int _count = 0;

    _count += 1; // valid
    _count += 4; // index
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::s_get_width() {
    int _count = 0;

    _count += 1; // valid
    _count += 5; // index
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_qdepth_t::s_get_width() {
    int _count = 0;

    _count += 10; // rsvd
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_parser_snap_t::s_get_width() {
    int _count = 0;

    _count += 32; // ctrl_oui
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_cut_thru_t::s_get_width() {
    int _count = 0;

    _count += 10; // enable
    return _count;
}

int cap_pbchbm_csr_sta_hbm_timestamp_t::s_get_width() {
    int _count = 0;

    _count += 48; // value
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::s_get_width() {
    int _count = 0;

    _count += 48; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::s_get_width() {
    int _count = 0;

    _count += 96; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_wb_depth_t::s_get_width() {
    int _count = 0;

    _count += 11; // value
    return _count;
}

int cap_pbchbm_csr_sat_hbm8_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm8_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm7_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm7_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm6_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm6_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm5_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm5_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm4_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm4_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm3_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm3_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm2_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm2_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm1_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm1_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_sat_hbm0_ctrl_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm0_truncate_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::s_get_width() {
    int _count = 0;

    _count += 16; // drop
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_r2a_t::s_get_width() {
    int _count = 0;

    _count += 32; // timer
    _count += 1; // enable_wrr
    _count += 3; // strict_priority
    _count += 3; // strict_priority_bypass_timer
    _count += 3; // selection
    _count += 1; // dhs_selection
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_axi_base_t::s_get_width() {
    int _count = 0;

    _count += 64; // addr
    return _count;
}

int cap_pbchbm_csr_sta_hbm_axi_t::s_get_width() {
    int _count = 0;

    _count += 2; // ctrl_rresp
    _count += 4; // ctrl_rid
    _count += 7; // pyld_rid
    _count += 2; // pyld_rresp
    _count += 7; // r2a_bid
    _count += 2; // r2a_bresp
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_15_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_14_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_13_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_12_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_11_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_10_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_9_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_8_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_7_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_6_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_5_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_4_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_3_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_2_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_1_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_tx_context_0_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_31_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_30_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_29_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_28_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_27_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_26_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_25_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_24_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_23_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_22_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_21_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_20_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_19_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_18_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_17_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_16_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_15_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_14_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_13_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_12_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_11_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_10_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_9_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_8_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_7_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_6_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_5_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_4_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_3_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_2_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_1_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_eth_context_0_t::s_get_width() {
    int _count = 0;

    _count += 23; // depth
    return _count;
}

int cap_pbchbm_csr_sta_hbm_t::s_get_width() {
    int _count = 0;

    _count += 3; // xoff_timeout_iq
    _count += 4; // xoff_timeout_port
    _count += 1; // tx_ctrl_init_head_done
    _count += 1; // tx_ctrl_init_tail_done
    _count += 1; // eth_ctrl_init_head_done
    _count += 1; // eth_ctrl_init_tail_done
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::s_get_width() {
    int _count = 0;

    _count += 1; // head_start
    _count += 1; // tail_start
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::s_get_width() {
    int _count = 0;

    _count += 432; // base
    _count += 368; // mem_sz
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_tx_payload_t::s_get_width() {
    int _count = 0;

    _count += 432; // base
    _count += 368; // mem_sz
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::s_get_width() {
    int _count = 0;

    _count += 1; // head_start
    _count += 1; // tail_start
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::s_get_width() {
    int _count = 0;

    _count += 864; // base
    _count += 736; // mem_sz
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_eth_payload_t::s_get_width() {
    int _count = 0;

    _count += 864; // base
    _count += 736; // mem_sz
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_threshold_t::s_get_width() {
    int _count = 0;

    _count += 640; // xoff
    _count += 640; // xon
    return _count;
}

int cap_pbchbm_csr_sta_bist_t::s_get_width() {
    int _count = 0;

    _count += 1; // ht_eth_tail_done_fail
    _count += 1; // ht_eth_tail_done_pass
    _count += 1; // ht_eth_head_done_fail
    _count += 1; // ht_eth_head_done_pass
    _count += 1; // ht_tx_tail_done_fail
    _count += 1; // ht_tx_tail_done_pass
    _count += 1; // ht_tx_head_done_fail
    _count += 1; // ht_tx_head_done_pass
    _count += 10; // hbm_write_fifo_done_fail
    _count += 10; // hbm_write_fifo_done_pass
    _count += 10; // hbm_read_fifo_done_fail
    _count += 10; // hbm_read_fifo_done_pass
    return _count;
}

int cap_pbchbm_csr_sta_ecc_hbm_ht_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 11; // syndrome
    _count += 5; // addr
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_ht_t::s_get_width() {
    int _count = 0;

    _count += 1; // eth_head_ecc_disable_cor
    _count += 1; // eth_head_ecc_disable_det
    _count += 1; // eth_head_dhs_eccbypass
    _count += 1; // eth_tail_ecc_disable_cor
    _count += 1; // eth_tail_ecc_disable_det
    _count += 1; // eth_tail_dhs_eccbypass
    _count += 1; // tx_head_dhs_eccbypass
    _count += 1; // tx_tail_dhs_eccbypass
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::s_get_width() {
    int _count = 0;

    _count += 4; // cache
    _count += 3; // prot
    _count += 4; // qos
    _count += 1; // lock
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::s_get_width() {
    int _count = 0;

    _count += 4; // cache
    _count += 3; // prot
    _count += 4; // qos
    _count += 1; // lock
    _count += 4; // rpl_cache
    _count += 3; // rpl_prot
    _count += 4; // rpl_qos
    _count += 1; // rpl_lock
    return _count;
}

int cap_pbchbm_csr_sta_hbm_wb_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_correctable
    _count += 1; // ecc_uncorrectable
    _count += 27; // ecc_syndrome
    _count += 10; // ecc_addr
    _count += 1; // bist_done_fail
    _count += 1; // bist_done_pass
    return _count;
}

int cap_pbchbm_csr_sta_hbm_rb_t::s_get_width() {
    int _count = 0;

    _count += 1; // init_done
    _count += 1; // cdt_ecc_correctable
    _count += 1; // cdt_ecc_uncorrectable
    _count += 1; // rb_ecc_correctable
    _count += 1; // rb_ecc_uncorrectable
    _count += 36; // rb_ecc_syndrome
    _count += 10; // rb_ecc_addr
    _count += 7; // cdt_ecc_syndrome
    _count += 7; // cdt_ecc_addr
    _count += 2; // bist_done_fail
    _count += 2; // bist_done_pass
    _count += 1; // hct_init_done
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_wb_drop_t::s_get_width() {
    int _count = 0;

    _count += 10; // threshold
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_wb_t::s_get_width() {
    int _count = 0;

    _count += 10; // xoff_threshold
    _count += 10; // xon_threshold
    _count += 3; // ack_fifo_xoff_threshold
    _count += 3; // ack_fifo_xon_threshold
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 1; // bist_run
    _count += 1; // addr_swizzle
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_xoff_t::s_get_width() {
    int _count = 0;

    _count += 27; // timeout
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_t::s_get_width() {
    int _count = 0;

    _count += 10; // dhs_mem_address
    _count += 4; // mtu_dhs_selection
    _count += 1; // debug_port_enable
    _count += 1; // debug_port_select
    _count += 1; // bist_run_tx_head
    _count += 1; // bist_run_tx_tail
    _count += 1; // bist_run_eth_head
    _count += 1; // bist_run_eth_tail
    _count += 1; // control_sw_reset
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_spare_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_rb_t::s_get_width() {
    int _count = 0;

    _count += 1; // mem_ecc_disable_cor
    _count += 1; // mem_ecc_disable_det
    _count += 1; // mem_dhs_eccbypass
    _count += 1; // enable_wrr
    _count += 1; // cdt_dhs_selection
    _count += 1; // hct_dhs_eccbypass
    _count += 1; // ecc_hct_disable_cor
    _count += 1; // ecc_hct_disable_det
    _count += 2; // bist_run
    _count += 1; // hct_init_start
    _count += 1; // addr_swizzle
    _count += 2; // max_arlen
    return _count;
}

int cap_pbchbm_csr_cfg_hbm_cdt_t::s_get_width() {
    int _count = 0;

    _count += 32; // cfg_hbm_cdt
    return _count;
}

int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 11; // syndrome
    _count += 12; // addr
    return _count;
}

int cap_pbchbm_csr_csr_intr_t::s_get_width() {
    int _count = 0;

    _count += 1; // dowstream
    _count += 1; // dowstream_enable
    return _count;
}

int cap_pbchbm_csr_t::s_get_width() {
    int _count = 0;

    _count += cap_pbchbm_csr_csr_intr_t::s_get_width(); // csr_intr
    _count += cap_pbchbm_csr_sta_ecc_hbm_mtu_t::s_get_width(); // sta_ecc_hbm_mtu
    _count += cap_pbchbm_csr_cfg_hbm_cdt_t::s_get_width(); // cfg_hbm_cdt
    _count += cap_pbchbm_csr_cfg_hbm_rb_t::s_get_width(); // cfg_hbm_rb
    _count += cap_pbchbm_csr_cfg_hbm_spare_t::s_get_width(); // cfg_hbm_spare
    _count += cap_pbchbm_csr_cfg_hbm_t::s_get_width(); // cfg_hbm
    _count += cap_pbchbm_csr_cfg_hbm_xoff_t::s_get_width(); // cfg_hbm_xoff
    _count += cap_pbchbm_csr_cfg_hbm_wb_t::s_get_width(); // cfg_hbm_wb
    _count += cap_pbchbm_csr_cfg_hbm_wb_drop_t::s_get_width(); // cfg_hbm_wb_drop
    _count += cap_pbchbm_csr_sta_hbm_rb_t::s_get_width(); // sta_hbm_rb
    _count += cap_pbchbm_csr_sta_hbm_wb_t::s_get_width(); // sta_hbm_wb
    _count += cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::s_get_width(); // cfg_hbm_axi_read_attr
    _count += cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::s_get_width(); // cfg_hbm_axi_write_attr
    _count += cap_pbchbm_csr_cfg_hbm_ht_t::s_get_width(); // cfg_hbm_ht
    _count += cap_pbchbm_csr_sta_ecc_hbm_ht_t::s_get_width(); // sta_ecc_hbm_ht
    _count += cap_pbchbm_csr_sta_bist_t::s_get_width(); // sta_bist
    _count += cap_pbchbm_csr_cfg_hbm_threshold_t::s_get_width(); // cfg_hbm_threshold
    _count += cap_pbchbm_csr_cfg_hbm_eth_payload_t::s_get_width(); // cfg_hbm_eth_payload
    _count += cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::s_get_width(); // cfg_hbm_eth_ctrl
    _count += cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::s_get_width(); // cfg_hbm_eth_ctrl_init
    _count += cap_pbchbm_csr_cfg_hbm_tx_payload_t::s_get_width(); // cfg_hbm_tx_payload
    _count += cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::s_get_width(); // cfg_hbm_tx_ctrl
    _count += cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::s_get_width(); // cfg_hbm_tx_ctrl_init
    _count += cap_pbchbm_csr_sta_hbm_t::s_get_width(); // sta_hbm
    _count += cap_pbchbm_csr_sta_hbm_eth_context_0_t::s_get_width(); // sta_hbm_eth_context_0
    _count += cap_pbchbm_csr_sta_hbm_eth_context_1_t::s_get_width(); // sta_hbm_eth_context_1
    _count += cap_pbchbm_csr_sta_hbm_eth_context_2_t::s_get_width(); // sta_hbm_eth_context_2
    _count += cap_pbchbm_csr_sta_hbm_eth_context_3_t::s_get_width(); // sta_hbm_eth_context_3
    _count += cap_pbchbm_csr_sta_hbm_eth_context_4_t::s_get_width(); // sta_hbm_eth_context_4
    _count += cap_pbchbm_csr_sta_hbm_eth_context_5_t::s_get_width(); // sta_hbm_eth_context_5
    _count += cap_pbchbm_csr_sta_hbm_eth_context_6_t::s_get_width(); // sta_hbm_eth_context_6
    _count += cap_pbchbm_csr_sta_hbm_eth_context_7_t::s_get_width(); // sta_hbm_eth_context_7
    _count += cap_pbchbm_csr_sta_hbm_eth_context_8_t::s_get_width(); // sta_hbm_eth_context_8
    _count += cap_pbchbm_csr_sta_hbm_eth_context_9_t::s_get_width(); // sta_hbm_eth_context_9
    _count += cap_pbchbm_csr_sta_hbm_eth_context_10_t::s_get_width(); // sta_hbm_eth_context_10
    _count += cap_pbchbm_csr_sta_hbm_eth_context_11_t::s_get_width(); // sta_hbm_eth_context_11
    _count += cap_pbchbm_csr_sta_hbm_eth_context_12_t::s_get_width(); // sta_hbm_eth_context_12
    _count += cap_pbchbm_csr_sta_hbm_eth_context_13_t::s_get_width(); // sta_hbm_eth_context_13
    _count += cap_pbchbm_csr_sta_hbm_eth_context_14_t::s_get_width(); // sta_hbm_eth_context_14
    _count += cap_pbchbm_csr_sta_hbm_eth_context_15_t::s_get_width(); // sta_hbm_eth_context_15
    _count += cap_pbchbm_csr_sta_hbm_eth_context_16_t::s_get_width(); // sta_hbm_eth_context_16
    _count += cap_pbchbm_csr_sta_hbm_eth_context_17_t::s_get_width(); // sta_hbm_eth_context_17
    _count += cap_pbchbm_csr_sta_hbm_eth_context_18_t::s_get_width(); // sta_hbm_eth_context_18
    _count += cap_pbchbm_csr_sta_hbm_eth_context_19_t::s_get_width(); // sta_hbm_eth_context_19
    _count += cap_pbchbm_csr_sta_hbm_eth_context_20_t::s_get_width(); // sta_hbm_eth_context_20
    _count += cap_pbchbm_csr_sta_hbm_eth_context_21_t::s_get_width(); // sta_hbm_eth_context_21
    _count += cap_pbchbm_csr_sta_hbm_eth_context_22_t::s_get_width(); // sta_hbm_eth_context_22
    _count += cap_pbchbm_csr_sta_hbm_eth_context_23_t::s_get_width(); // sta_hbm_eth_context_23
    _count += cap_pbchbm_csr_sta_hbm_eth_context_24_t::s_get_width(); // sta_hbm_eth_context_24
    _count += cap_pbchbm_csr_sta_hbm_eth_context_25_t::s_get_width(); // sta_hbm_eth_context_25
    _count += cap_pbchbm_csr_sta_hbm_eth_context_26_t::s_get_width(); // sta_hbm_eth_context_26
    _count += cap_pbchbm_csr_sta_hbm_eth_context_27_t::s_get_width(); // sta_hbm_eth_context_27
    _count += cap_pbchbm_csr_sta_hbm_eth_context_28_t::s_get_width(); // sta_hbm_eth_context_28
    _count += cap_pbchbm_csr_sta_hbm_eth_context_29_t::s_get_width(); // sta_hbm_eth_context_29
    _count += cap_pbchbm_csr_sta_hbm_eth_context_30_t::s_get_width(); // sta_hbm_eth_context_30
    _count += cap_pbchbm_csr_sta_hbm_eth_context_31_t::s_get_width(); // sta_hbm_eth_context_31
    _count += cap_pbchbm_csr_sta_hbm_tx_context_0_t::s_get_width(); // sta_hbm_tx_context_0
    _count += cap_pbchbm_csr_sta_hbm_tx_context_1_t::s_get_width(); // sta_hbm_tx_context_1
    _count += cap_pbchbm_csr_sta_hbm_tx_context_2_t::s_get_width(); // sta_hbm_tx_context_2
    _count += cap_pbchbm_csr_sta_hbm_tx_context_3_t::s_get_width(); // sta_hbm_tx_context_3
    _count += cap_pbchbm_csr_sta_hbm_tx_context_4_t::s_get_width(); // sta_hbm_tx_context_4
    _count += cap_pbchbm_csr_sta_hbm_tx_context_5_t::s_get_width(); // sta_hbm_tx_context_5
    _count += cap_pbchbm_csr_sta_hbm_tx_context_6_t::s_get_width(); // sta_hbm_tx_context_6
    _count += cap_pbchbm_csr_sta_hbm_tx_context_7_t::s_get_width(); // sta_hbm_tx_context_7
    _count += cap_pbchbm_csr_sta_hbm_tx_context_8_t::s_get_width(); // sta_hbm_tx_context_8
    _count += cap_pbchbm_csr_sta_hbm_tx_context_9_t::s_get_width(); // sta_hbm_tx_context_9
    _count += cap_pbchbm_csr_sta_hbm_tx_context_10_t::s_get_width(); // sta_hbm_tx_context_10
    _count += cap_pbchbm_csr_sta_hbm_tx_context_11_t::s_get_width(); // sta_hbm_tx_context_11
    _count += cap_pbchbm_csr_sta_hbm_tx_context_12_t::s_get_width(); // sta_hbm_tx_context_12
    _count += cap_pbchbm_csr_sta_hbm_tx_context_13_t::s_get_width(); // sta_hbm_tx_context_13
    _count += cap_pbchbm_csr_sta_hbm_tx_context_14_t::s_get_width(); // sta_hbm_tx_context_14
    _count += cap_pbchbm_csr_sta_hbm_tx_context_15_t::s_get_width(); // sta_hbm_tx_context_15
    _count += cap_pbchbm_csr_sta_hbm_axi_t::s_get_width(); // sta_hbm_axi
    _count += cap_pbchbm_csr_cfg_hbm_axi_base_t::s_get_width(); // cfg_hbm_axi_base
    _count += cap_pbchbm_csr_cfg_hbm_r2a_t::s_get_width(); // cfg_hbm_r2a
    _count += cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::s_get_width(); // cnt_hbm0_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::s_get_width(); // cnt_hbm0_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::s_get_width(); // cnt_hbm0_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm0_truncate_t::s_get_width(); // cnt_hbm0_truncate
    _count += cap_pbchbm_csr_sat_hbm0_ctrl_full_t::s_get_width(); // sat_hbm0_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::s_get_width(); // cnt_hbm1_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::s_get_width(); // cnt_hbm1_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::s_get_width(); // cnt_hbm1_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm1_truncate_t::s_get_width(); // cnt_hbm1_truncate
    _count += cap_pbchbm_csr_sat_hbm1_ctrl_full_t::s_get_width(); // sat_hbm1_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::s_get_width(); // cnt_hbm2_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::s_get_width(); // cnt_hbm2_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::s_get_width(); // cnt_hbm2_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm2_truncate_t::s_get_width(); // cnt_hbm2_truncate
    _count += cap_pbchbm_csr_sat_hbm2_ctrl_full_t::s_get_width(); // sat_hbm2_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::s_get_width(); // cnt_hbm3_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::s_get_width(); // cnt_hbm3_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::s_get_width(); // cnt_hbm3_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm3_truncate_t::s_get_width(); // cnt_hbm3_truncate
    _count += cap_pbchbm_csr_sat_hbm3_ctrl_full_t::s_get_width(); // sat_hbm3_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::s_get_width(); // cnt_hbm4_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::s_get_width(); // cnt_hbm4_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::s_get_width(); // cnt_hbm4_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm4_truncate_t::s_get_width(); // cnt_hbm4_truncate
    _count += cap_pbchbm_csr_sat_hbm4_ctrl_full_t::s_get_width(); // sat_hbm4_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::s_get_width(); // cnt_hbm5_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::s_get_width(); // cnt_hbm5_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::s_get_width(); // cnt_hbm5_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm5_truncate_t::s_get_width(); // cnt_hbm5_truncate
    _count += cap_pbchbm_csr_sat_hbm5_ctrl_full_t::s_get_width(); // sat_hbm5_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::s_get_width(); // cnt_hbm6_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::s_get_width(); // cnt_hbm6_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::s_get_width(); // cnt_hbm6_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm6_truncate_t::s_get_width(); // cnt_hbm6_truncate
    _count += cap_pbchbm_csr_sat_hbm6_ctrl_full_t::s_get_width(); // sat_hbm6_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::s_get_width(); // cnt_hbm7_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::s_get_width(); // cnt_hbm7_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::s_get_width(); // cnt_hbm7_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm7_truncate_t::s_get_width(); // cnt_hbm7_truncate
    _count += cap_pbchbm_csr_sat_hbm7_ctrl_full_t::s_get_width(); // sat_hbm7_ctrl_full
    _count += cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::s_get_width(); // cnt_hbm8_emergency_stop
    _count += cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::s_get_width(); // cnt_hbm8_write_ack_filling_up
    _count += cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::s_get_width(); // cnt_hbm8_write_ack_full
    _count += cap_pbchbm_csr_cnt_hbm8_truncate_t::s_get_width(); // cnt_hbm8_truncate
    _count += cap_pbchbm_csr_sat_hbm8_ctrl_full_t::s_get_width(); // sat_hbm8_ctrl_full
    _count += cap_pbchbm_csr_sta_hbm_wb_depth_t::s_get_width(); // sta_hbm_wb_depth
    _count += cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::s_get_width(); // sta_hbm_eth_pend_acks
    _count += cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::s_get_width(); // sta_hbm_tx_pend_acks
    _count += cap_pbchbm_csr_sta_hbm_timestamp_t::s_get_width(); // sta_hbm_timestamp
    _count += cap_pbchbm_csr_cfg_hbm_cut_thru_t::s_get_width(); // cfg_hbm_cut_thru
    _count += cap_pbchbm_csr_cfg_hbm_parser_snap_t::s_get_width(); // cfg_hbm_parser_snap
    _count += cap_pbchbm_csr_cfg_hbm_qdepth_t::s_get_width(); // cfg_hbm_qdepth
    _count += cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::s_get_width(); // cfg_hbm_eth_reset_context
    _count += cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::s_get_width(); // cfg_hbm_tx_reset_context
    _count += cap_pbchbm_csr_cfg_hbm_eth_flush_t::s_get_width(); // cfg_hbm_eth_flush
    _count += cap_pbchbm_csr_cfg_hbm_tx_flush_t::s_get_width(); // cfg_hbm_tx_flush
    _count += cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::s_get_width(); // cfg_hbm_wb_duty_cycle
    _count += cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::s_get_width(); // cfg_hbm_eth_xoff_timeout
    _count += cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::s_get_width(); // cfg_hbm_eth_xoff_force
    _count += cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::s_get_width(); // cfg_hbm_eth_clear_context
    _count += cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::s_get_width(); // cfg_hbm_tx_clear_context
    _count += cap_pbchbm_csr_cnt_hbm_axi_rpl_t::s_get_width(); // cnt_hbm_axi_rpl
    _count += cap_pbchbm_csr_cnt_hbm_axi_pyld_t::s_get_width(); // cnt_hbm_axi_pyld
    _count += cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::s_get_width(); // cnt_hbm_axi_ctrl
    _count += cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::s_get_width(); // cnt_hbm_axi_timestamp
    _count += cap_pbchbm_csr_dhs_hbm_cdt_t::s_get_width(); // dhs_hbm_cdt
    _count += cap_pbchbm_csr_dhs_hbm_mem_t::s_get_width(); // dhs_hbm_mem
    _count += cap_pbchbm_csr_dhs_hbm_r2a_t::s_get_width(); // dhs_hbm_r2a
    _count += cap_pbchbm_csr_dhs_hbm_wb_wm_t::s_get_width(); // dhs_hbm_wb_wm
    _count += cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::s_get_width(); // dhs_hbm_eth_pend_acks_wm
    _count += cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::s_get_width(); // dhs_hbm_tx_pend_acks_wm
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_0
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_1
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_2
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_3
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_4
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_5
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_6
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_7
    _count += cap_pbchbmeth_csr_t::s_get_width(); // hbm_port_8
    _count += cap_pbchbmtx_csr_t::s_get_width(); // hbm_port_9
    _count += cap_pbchbm_csr_intgrp_status_t::s_get_width(); // int_groups
    _count += cap_pbchbm_csr_int_ecc_hbm_mtu_t::s_get_width(); // int_ecc_hbm_mtu
    _count += cap_pbchbm_csr_int_ecc_hbm_rb_t::s_get_width(); // int_ecc_hbm_rb
    _count += cap_pbchbm_csr_int_ecc_hbm_mtu_t::s_get_width(); // int_ecc_hbm_wb
    _count += cap_pbchbm_csr_int_ecc_hbm_mtu_t::s_get_width(); // int_ecc_hbm_ht
    _count += cap_pbchbm_csr_int_hbm_xoff_t::s_get_width(); // int_hbm_xoff
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_in_t::s_get_width(); // int_hbm_pbus_violation_in
    _count += cap_pbchbm_csr_int_hbm_pbus_violation_out_t::s_get_width(); // int_hbm_pbus_violation_out
    _count += cap_pbchbm_csr_int_hbm_drop_t::s_get_width(); // int_hbm_drop
    _count += cap_pbchbm_csr_int_hbm_axi_err_rsp_t::s_get_width(); // int_hbm_axi_err_rsp
    _count += cap_pbchbm_csr_int_hbm_drop_emergency_t::s_get_width(); // int_hbm_drop_emergency
    _count += cap_pbchbm_csr_int_hbm_drop_write_ack_t::s_get_width(); // int_hbm_drop_write_ack
    _count += cap_pbchbm_csr_int_hbm_drop_ctrl_t::s_get_width(); // int_hbm_drop_ctrl
    _count += cap_pbchbm_csr_int_hbm_drop_threshold_t::s_get_width(); // int_hbm_drop_threshold
    _count += cap_pbchbm_csr_int_hbm_truncate_no_t::s_get_width(); // int_hbm_truncate_no
    _count += cap_pbchbm_csr_int_hbm_stop_t::s_get_width(); // int_hbm_stop
    return _count;
}

void cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__occupancy_9_enable = _val.convert_to< occupancy_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_stop_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__occupancy_9_interrupt = _val.convert_to< occupancy_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop_0_enable = _val.convert_to< drop_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_1_enable = _val.convert_to< drop_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_2_enable = _val.convert_to< drop_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_3_enable = _val.convert_to< drop_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_4_enable = _val.convert_to< drop_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_5_enable = _val.convert_to< drop_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_6_enable = _val.convert_to< drop_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_7_enable = _val.convert_to< drop_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_8_enable = _val.convert_to< drop_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop_0_interrupt = _val.convert_to< drop_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_1_interrupt = _val.convert_to< drop_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_2_interrupt = _val.convert_to< drop_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_3_interrupt = _val.convert_to< drop_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_4_interrupt = _val.convert_to< drop_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_5_interrupt = _val.convert_to< drop_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_6_interrupt = _val.convert_to< drop_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_7_interrupt = _val.convert_to< drop_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__drop_8_interrupt = _val.convert_to< drop_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_truncate_no_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__crossed_0_enable = _val.convert_to< crossed_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_1_enable = _val.convert_to< crossed_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_2_enable = _val.convert_to< crossed_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_3_enable = _val.convert_to< crossed_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_4_enable = _val.convert_to< crossed_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_5_enable = _val.convert_to< crossed_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_6_enable = _val.convert_to< crossed_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_7_enable = _val.convert_to< crossed_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_8_enable = _val.convert_to< crossed_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__crossed_0_interrupt = _val.convert_to< crossed_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_1_interrupt = _val.convert_to< crossed_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_2_interrupt = _val.convert_to< crossed_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_3_interrupt = _val.convert_to< crossed_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_4_interrupt = _val.convert_to< crossed_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_5_interrupt = _val.convert_to< crossed_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_6_interrupt = _val.convert_to< crossed_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_7_interrupt = _val.convert_to< crossed_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__crossed_8_interrupt = _val.convert_to< crossed_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_threshold_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__full_0_enable = _val.convert_to< full_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_1_enable = _val.convert_to< full_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_2_enable = _val.convert_to< full_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_3_enable = _val.convert_to< full_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_4_enable = _val.convert_to< full_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_5_enable = _val.convert_to< full_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_6_enable = _val.convert_to< full_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_7_enable = _val.convert_to< full_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_8_enable = _val.convert_to< full_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__full_0_interrupt = _val.convert_to< full_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_1_interrupt = _val.convert_to< full_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_2_interrupt = _val.convert_to< full_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_3_interrupt = _val.convert_to< full_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_4_interrupt = _val.convert_to< full_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_5_interrupt = _val.convert_to< full_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_6_interrupt = _val.convert_to< full_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_7_interrupt = _val.convert_to< full_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_8_interrupt = _val.convert_to< full_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__filling_up_0_enable = _val.convert_to< filling_up_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_1_enable = _val.convert_to< filling_up_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_2_enable = _val.convert_to< filling_up_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_3_enable = _val.convert_to< filling_up_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_4_enable = _val.convert_to< filling_up_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_5_enable = _val.convert_to< filling_up_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_6_enable = _val.convert_to< filling_up_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_7_enable = _val.convert_to< filling_up_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_8_enable = _val.convert_to< filling_up_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_0_enable = _val.convert_to< full_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_1_enable = _val.convert_to< full_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_2_enable = _val.convert_to< full_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_3_enable = _val.convert_to< full_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_4_enable = _val.convert_to< full_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_5_enable = _val.convert_to< full_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_6_enable = _val.convert_to< full_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_7_enable = _val.convert_to< full_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_8_enable = _val.convert_to< full_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__filling_up_0_interrupt = _val.convert_to< filling_up_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_1_interrupt = _val.convert_to< filling_up_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_2_interrupt = _val.convert_to< filling_up_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_3_interrupt = _val.convert_to< filling_up_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_4_interrupt = _val.convert_to< filling_up_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_5_interrupt = _val.convert_to< filling_up_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_6_interrupt = _val.convert_to< filling_up_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_7_interrupt = _val.convert_to< filling_up_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__filling_up_8_interrupt = _val.convert_to< filling_up_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_0_interrupt = _val.convert_to< full_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_1_interrupt = _val.convert_to< full_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_2_interrupt = _val.convert_to< full_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_3_interrupt = _val.convert_to< full_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_4_interrupt = _val.convert_to< full_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_5_interrupt = _val.convert_to< full_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_6_interrupt = _val.convert_to< full_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_7_interrupt = _val.convert_to< full_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__full_8_interrupt = _val.convert_to< full_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__stop_0_enable = _val.convert_to< stop_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_1_enable = _val.convert_to< stop_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_2_enable = _val.convert_to< stop_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_3_enable = _val.convert_to< stop_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_4_enable = _val.convert_to< stop_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_5_enable = _val.convert_to< stop_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_6_enable = _val.convert_to< stop_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_7_enable = _val.convert_to< stop_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_8_enable = _val.convert_to< stop_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__stop_0_interrupt = _val.convert_to< stop_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_1_interrupt = _val.convert_to< stop_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_2_interrupt = _val.convert_to< stop_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_3_interrupt = _val.convert_to< stop_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_4_interrupt = _val.convert_to< stop_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_5_interrupt = _val.convert_to< stop_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_6_interrupt = _val.convert_to< stop_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_7_interrupt = _val.convert_to< stop_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__stop_8_interrupt = _val.convert_to< stop_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_emergency_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ctrl_enable = _val.convert_to< ctrl_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pyld_enable = _val.convert_to< pyld_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__r2a_enable = _val.convert_to< r2a_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ctrl_interrupt = _val.convert_to< ctrl_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__pyld_interrupt = _val.convert_to< pyld_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__r2a_interrupt = _val.convert_to< r2a_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__occupancy_0_enable = _val.convert_to< occupancy_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_1_enable = _val.convert_to< occupancy_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_2_enable = _val.convert_to< occupancy_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_3_enable = _val.convert_to< occupancy_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_4_enable = _val.convert_to< occupancy_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_5_enable = _val.convert_to< occupancy_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_6_enable = _val.convert_to< occupancy_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_7_enable = _val.convert_to< occupancy_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_8_enable = _val.convert_to< occupancy_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__occupancy_0_interrupt = _val.convert_to< occupancy_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_1_interrupt = _val.convert_to< occupancy_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_2_interrupt = _val.convert_to< occupancy_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_3_interrupt = _val.convert_to< occupancy_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_4_interrupt = _val.convert_to< occupancy_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_5_interrupt = _val.convert_to< occupancy_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_6_interrupt = _val.convert_to< occupancy_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_7_interrupt = _val.convert_to< occupancy_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__occupancy_8_interrupt = _val.convert_to< occupancy_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_drop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop_sop_out_0_enable = _val.convert_to< sop_sop_out_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_1_enable = _val.convert_to< sop_sop_out_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_2_enable = _val.convert_to< sop_sop_out_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_3_enable = _val.convert_to< sop_sop_out_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_4_enable = _val.convert_to< sop_sop_out_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_5_enable = _val.convert_to< sop_sop_out_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_6_enable = _val.convert_to< sop_sop_out_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_7_enable = _val.convert_to< sop_sop_out_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_8_enable = _val.convert_to< sop_sop_out_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_9_enable = _val.convert_to< sop_sop_out_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_0_enable = _val.convert_to< eop_eop_out_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_1_enable = _val.convert_to< eop_eop_out_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_2_enable = _val.convert_to< eop_eop_out_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_3_enable = _val.convert_to< eop_eop_out_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_4_enable = _val.convert_to< eop_eop_out_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_5_enable = _val.convert_to< eop_eop_out_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_6_enable = _val.convert_to< eop_eop_out_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_7_enable = _val.convert_to< eop_eop_out_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_8_enable = _val.convert_to< eop_eop_out_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_9_enable = _val.convert_to< eop_eop_out_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop_sop_out_0_interrupt = _val.convert_to< sop_sop_out_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_1_interrupt = _val.convert_to< sop_sop_out_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_2_interrupt = _val.convert_to< sop_sop_out_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_3_interrupt = _val.convert_to< sop_sop_out_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_4_interrupt = _val.convert_to< sop_sop_out_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_5_interrupt = _val.convert_to< sop_sop_out_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_6_interrupt = _val.convert_to< sop_sop_out_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_7_interrupt = _val.convert_to< sop_sop_out_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_8_interrupt = _val.convert_to< sop_sop_out_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_out_9_interrupt = _val.convert_to< sop_sop_out_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_0_interrupt = _val.convert_to< eop_eop_out_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_1_interrupt = _val.convert_to< eop_eop_out_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_2_interrupt = _val.convert_to< eop_eop_out_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_3_interrupt = _val.convert_to< eop_eop_out_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_4_interrupt = _val.convert_to< eop_eop_out_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_5_interrupt = _val.convert_to< eop_eop_out_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_6_interrupt = _val.convert_to< eop_eop_out_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_7_interrupt = _val.convert_to< eop_eop_out_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_8_interrupt = _val.convert_to< eop_eop_out_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_out_9_interrupt = _val.convert_to< eop_eop_out_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop_sop_in_0_enable = _val.convert_to< sop_sop_in_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_1_enable = _val.convert_to< sop_sop_in_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_2_enable = _val.convert_to< sop_sop_in_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_3_enable = _val.convert_to< sop_sop_in_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_4_enable = _val.convert_to< sop_sop_in_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_5_enable = _val.convert_to< sop_sop_in_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_6_enable = _val.convert_to< sop_sop_in_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_7_enable = _val.convert_to< sop_sop_in_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_8_enable = _val.convert_to< sop_sop_in_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_9_enable = _val.convert_to< sop_sop_in_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_0_enable = _val.convert_to< eop_eop_in_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_1_enable = _val.convert_to< eop_eop_in_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_2_enable = _val.convert_to< eop_eop_in_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_3_enable = _val.convert_to< eop_eop_in_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_4_enable = _val.convert_to< eop_eop_in_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_5_enable = _val.convert_to< eop_eop_in_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_6_enable = _val.convert_to< eop_eop_in_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_7_enable = _val.convert_to< eop_eop_in_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_8_enable = _val.convert_to< eop_eop_in_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_9_enable = _val.convert_to< eop_eop_in_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__sop_sop_in_0_interrupt = _val.convert_to< sop_sop_in_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_1_interrupt = _val.convert_to< sop_sop_in_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_2_interrupt = _val.convert_to< sop_sop_in_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_3_interrupt = _val.convert_to< sop_sop_in_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_4_interrupt = _val.convert_to< sop_sop_in_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_5_interrupt = _val.convert_to< sop_sop_in_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_6_interrupt = _val.convert_to< sop_sop_in_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_7_interrupt = _val.convert_to< sop_sop_in_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_8_interrupt = _val.convert_to< sop_sop_in_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__sop_sop_in_9_interrupt = _val.convert_to< sop_sop_in_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_0_interrupt = _val.convert_to< eop_eop_in_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_1_interrupt = _val.convert_to< eop_eop_in_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_2_interrupt = _val.convert_to< eop_eop_in_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_3_interrupt = _val.convert_to< eop_eop_in_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_4_interrupt = _val.convert_to< eop_eop_in_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_5_interrupt = _val.convert_to< eop_eop_in_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_6_interrupt = _val.convert_to< eop_eop_in_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_7_interrupt = _val.convert_to< eop_eop_in_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_8_interrupt = _val.convert_to< eop_eop_in_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eop_eop_in_9_interrupt = _val.convert_to< eop_eop_in_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__timeout_0_enable = _val.convert_to< timeout_0_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_1_enable = _val.convert_to< timeout_1_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_2_enable = _val.convert_to< timeout_2_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_3_enable = _val.convert_to< timeout_3_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_4_enable = _val.convert_to< timeout_4_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_5_enable = _val.convert_to< timeout_5_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_6_enable = _val.convert_to< timeout_6_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_7_enable = _val.convert_to< timeout_7_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_8_enable = _val.convert_to< timeout_8_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_9_enable = _val.convert_to< timeout_9_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_10_enable = _val.convert_to< timeout_10_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_11_enable = _val.convert_to< timeout_11_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_12_enable = _val.convert_to< timeout_12_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_13_enable = _val.convert_to< timeout_13_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_14_enable = _val.convert_to< timeout_14_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_15_enable = _val.convert_to< timeout_15_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_16_enable = _val.convert_to< timeout_16_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_17_enable = _val.convert_to< timeout_17_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_18_enable = _val.convert_to< timeout_18_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_19_enable = _val.convert_to< timeout_19_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_20_enable = _val.convert_to< timeout_20_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_21_enable = _val.convert_to< timeout_21_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_22_enable = _val.convert_to< timeout_22_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_23_enable = _val.convert_to< timeout_23_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_24_enable = _val.convert_to< timeout_24_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_25_enable = _val.convert_to< timeout_25_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_26_enable = _val.convert_to< timeout_26_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_27_enable = _val.convert_to< timeout_27_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_28_enable = _val.convert_to< timeout_28_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_29_enable = _val.convert_to< timeout_29_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_30_enable = _val.convert_to< timeout_30_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_31_enable = _val.convert_to< timeout_31_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__timeout_0_interrupt = _val.convert_to< timeout_0_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_1_interrupt = _val.convert_to< timeout_1_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_2_interrupt = _val.convert_to< timeout_2_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_3_interrupt = _val.convert_to< timeout_3_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_4_interrupt = _val.convert_to< timeout_4_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_5_interrupt = _val.convert_to< timeout_5_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_6_interrupt = _val.convert_to< timeout_6_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_7_interrupt = _val.convert_to< timeout_7_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_8_interrupt = _val.convert_to< timeout_8_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_9_interrupt = _val.convert_to< timeout_9_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_10_interrupt = _val.convert_to< timeout_10_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_11_interrupt = _val.convert_to< timeout_11_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_12_interrupt = _val.convert_to< timeout_12_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_13_interrupt = _val.convert_to< timeout_13_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_14_interrupt = _val.convert_to< timeout_14_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_15_interrupt = _val.convert_to< timeout_15_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_16_interrupt = _val.convert_to< timeout_16_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_17_interrupt = _val.convert_to< timeout_17_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_18_interrupt = _val.convert_to< timeout_18_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_19_interrupt = _val.convert_to< timeout_19_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_20_interrupt = _val.convert_to< timeout_20_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_21_interrupt = _val.convert_to< timeout_21_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_22_interrupt = _val.convert_to< timeout_22_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_23_interrupt = _val.convert_to< timeout_23_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_24_interrupt = _val.convert_to< timeout_24_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_25_interrupt = _val.convert_to< timeout_25_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_26_interrupt = _val.convert_to< timeout_26_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_27_interrupt = _val.convert_to< timeout_27_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_28_interrupt = _val.convert_to< timeout_28_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_29_interrupt = _val.convert_to< timeout_29_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_30_interrupt = _val.convert_to< timeout_30_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__timeout_31_interrupt = _val.convert_to< timeout_31_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_hbm_xoff_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable_enable = _val.convert_to< uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable_enable = _val.convert_to< correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable_interrupt = _val.convert_to< uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable_interrupt = _val.convert_to< correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_ecc_hbm_mtu_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rb_uncorrectable_enable = _val.convert_to< rb_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rb_correctable_enable = _val.convert_to< rb_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_uncorrectable_enable = _val.convert_to< cdt_uncorrectable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_correctable_enable = _val.convert_to< cdt_correctable_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rb_uncorrectable_interrupt = _val.convert_to< rb_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rb_correctable_interrupt = _val.convert_to< rb_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_uncorrectable_interrupt = _val.convert_to< cdt_uncorrectable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_correctable_interrupt = _val.convert_to< cdt_correctable_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_ecc_hbm_rb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_test_set.all( _val);
    _val = _val >> int_test_set.get_width(); 
    int_enable_set.all( _val);
    _val = _val >> int_enable_set.get_width(); 
    int_enable_clear.all( _val);
    _val = _val >> int_enable_clear.get_width(); 
}

void cap_pbchbm_csr_intreg_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_ecc_hbm_mtu_interrupt = _val.convert_to< int_ecc_hbm_mtu_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_rb_interrupt = _val.convert_to< int_ecc_hbm_rb_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_wb_interrupt = _val.convert_to< int_ecc_hbm_wb_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_ht_interrupt = _val.convert_to< int_ecc_hbm_ht_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_xoff_interrupt = _val.convert_to< int_hbm_xoff_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_pbus_violation_in_interrupt = _val.convert_to< int_hbm_pbus_violation_in_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_pbus_violation_out_interrupt = _val.convert_to< int_hbm_pbus_violation_out_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_interrupt = _val.convert_to< int_hbm_drop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_stop_interrupt = _val.convert_to< int_hbm_stop_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_axi_err_rsp_interrupt = _val.convert_to< int_hbm_axi_err_rsp_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_emergency_interrupt = _val.convert_to< int_hbm_drop_emergency_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_write_ack_interrupt = _val.convert_to< int_hbm_drop_write_ack_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_ctrl_interrupt = _val.convert_to< int_hbm_drop_ctrl_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_threshold_interrupt = _val.convert_to< int_hbm_drop_threshold_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_truncate_no_interrupt = _val.convert_to< int_hbm_truncate_no_interrupt_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__int_ecc_hbm_mtu_enable = _val.convert_to< int_ecc_hbm_mtu_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_rb_enable = _val.convert_to< int_ecc_hbm_rb_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_wb_enable = _val.convert_to< int_ecc_hbm_wb_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_ecc_hbm_ht_enable = _val.convert_to< int_ecc_hbm_ht_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_xoff_enable = _val.convert_to< int_hbm_xoff_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_pbus_violation_in_enable = _val.convert_to< int_hbm_pbus_violation_in_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_pbus_violation_out_enable = _val.convert_to< int_hbm_pbus_violation_out_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_enable = _val.convert_to< int_hbm_drop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_stop_enable = _val.convert_to< int_hbm_stop_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_axi_err_rsp_enable = _val.convert_to< int_hbm_axi_err_rsp_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_emergency_enable = _val.convert_to< int_hbm_drop_emergency_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_write_ack_enable = _val.convert_to< int_hbm_drop_write_ack_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_ctrl_enable = _val.convert_to< int_hbm_drop_ctrl_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_drop_threshold_enable = _val.convert_to< int_hbm_drop_threshold_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__int_hbm_truncate_no_enable = _val.convert_to< int_hbm_truncate_no_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_intgrp_status_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    intreg.all( _val);
    _val = _val >> intreg.get_width(); 
    int_enable_rw_reg.all( _val);
    _val = _val >> int_enable_rw_reg.get_width(); 
    int_rw_reg.all( _val);
    _val = _val >> int_rw_reg.get_width(); 
}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 48;
    
}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 96;
    
}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 11;
    
}

void cap_pbchbm_csr_dhs_hbm_wb_wm_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__command = _val.convert_to< command_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__current_credit = _val.convert_to< current_credit_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__quota = _val.convert_to< quota_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pbchbm_csr_dhs_hbm_r2a_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 3 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 3; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pbchbm_csr_dhs_hbm_mem_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >()  ;
    _val = _val >> 768;
    
}

void cap_pbchbm_csr_dhs_hbm_mem_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    entry.all( _val);
    _val = _val >> entry.get_width(); 
}

void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__command = _val.convert_to< command_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__current_credit = _val.convert_to< current_credit_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__quota = _val.convert_to< quota_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_dhs_hbm_cdt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    #if 88 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 88; ii++) {
        entry[ii].all(_val);
        _val = _val >> entry[ii].get_width();
    }
    #endif
    
}

void cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__write = _val.convert_to< write_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__read = _val.convert_to< read_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cnt_hbm_axi_pyld_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__read = _val.convert_to< read_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cnt_hbm_axi_rpl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__read = _val.convert_to< read_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__counters = _val.convert_to< counters_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__counters = _val.convert_to< counters_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__xoff = _val.convert_to< xoff_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__xon = _val.convert_to< xon_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__enable = _val.convert_to< enable_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__auto_xon = _val.convert_to< auto_xon_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__auto_clear = _val.convert_to< auto_clear_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__write = _val.convert_to< write_cpp_int_t >()  ;
    _val = _val >> 16;
    
    int_var__gather = _val.convert_to< gather_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_flush_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__context = _val.convert_to< context_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_flush_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__context = _val.convert_to< context_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__index = _val.convert_to< index_cpp_int_t >()  ;
    _val = _val >> 4;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__valid = _val.convert_to< valid_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__index = _val.convert_to< index_cpp_int_t >()  ;
    _val = _val >> 5;
    
}

void cap_pbchbm_csr_cfg_hbm_qdepth_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pbchbm_csr_cfg_hbm_parser_snap_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ctrl_oui = _val.convert_to< ctrl_oui_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_cut_thru_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__enable = _val.convert_to< enable_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pbchbm_csr_sta_hbm_timestamp_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 48;
    
}

void cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 48;
    
}

void cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 96;
    
}

void cap_pbchbm_csr_sta_hbm_wb_depth_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__value = _val.convert_to< value_cpp_int_t >()  ;
    _val = _val >> 11;
    
}

void cap_pbchbm_csr_sat_hbm8_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm8_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm7_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm7_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm6_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm6_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm5_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm5_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm4_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm4_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm3_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm3_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm2_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm2_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm1_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm1_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_sat_hbm0_ctrl_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm0_truncate_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__drop = _val.convert_to< drop_cpp_int_t >()  ;
    _val = _val >> 16;
    
}

void cap_pbchbm_csr_cfg_hbm_r2a_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__timer = _val.convert_to< timer_cpp_int_t >()  ;
    _val = _val >> 32;
    
    int_var__enable_wrr = _val.convert_to< enable_wrr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__strict_priority = _val.convert_to< strict_priority_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__strict_priority_bypass_timer = _val.convert_to< strict_priority_bypass_timer_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__selection = _val.convert_to< selection_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__dhs_selection = _val.convert_to< dhs_selection_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_axi_base_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 64;
    
}

void cap_pbchbm_csr_sta_hbm_axi_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ctrl_rresp = _val.convert_to< ctrl_rresp_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__ctrl_rid = _val.convert_to< ctrl_rid_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__pyld_rid = _val.convert_to< pyld_rid_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__pyld_rresp = _val.convert_to< pyld_rresp_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__r2a_bid = _val.convert_to< r2a_bid_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__r2a_bresp = _val.convert_to< r2a_bresp_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_15_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_14_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_13_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_12_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_11_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_10_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_8_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_31_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_30_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_29_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_28_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_27_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_26_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_25_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_24_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_23_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_22_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_21_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_20_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_19_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_18_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_17_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_16_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_15_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_14_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_13_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_12_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_11_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_10_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_9_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_8_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_7_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_6_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_5_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_4_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_3_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_2_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_1_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_0_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__depth = _val.convert_to< depth_cpp_int_t >()  ;
    _val = _val >> 23;
    
}

void cap_pbchbm_csr_sta_hbm_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__xoff_timeout_iq = _val.convert_to< xoff_timeout_iq_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__xoff_timeout_port = _val.convert_to< xoff_timeout_port_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__tx_ctrl_init_head_done = _val.convert_to< tx_ctrl_init_head_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tx_ctrl_init_tail_done = _val.convert_to< tx_ctrl_init_tail_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_ctrl_init_head_done = _val.convert_to< eth_ctrl_init_head_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_ctrl_init_tail_done = _val.convert_to< eth_ctrl_init_tail_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__head_start = _val.convert_to< head_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tail_start = _val.convert_to< tail_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base = _val.convert_to< base_cpp_int_t >()  ;
    _val = _val >> 432;
    
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >()  ;
    _val = _val >> 368;
    
}

void cap_pbchbm_csr_cfg_hbm_tx_payload_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base = _val.convert_to< base_cpp_int_t >()  ;
    _val = _val >> 432;
    
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >()  ;
    _val = _val >> 368;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__head_start = _val.convert_to< head_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tail_start = _val.convert_to< tail_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base = _val.convert_to< base_cpp_int_t >()  ;
    _val = _val >> 864;
    
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >()  ;
    _val = _val >> 736;
    
}

void cap_pbchbm_csr_cfg_hbm_eth_payload_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__base = _val.convert_to< base_cpp_int_t >()  ;
    _val = _val >> 864;
    
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >()  ;
    _val = _val >> 736;
    
}

void cap_pbchbm_csr_cfg_hbm_threshold_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__xoff = _val.convert_to< xoff_cpp_int_t >()  ;
    _val = _val >> 640;
    
    int_var__xon = _val.convert_to< xon_cpp_int_t >()  ;
    _val = _val >> 640;
    
}

void cap_pbchbm_csr_sta_bist_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ht_eth_tail_done_fail = _val.convert_to< ht_eth_tail_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_eth_tail_done_pass = _val.convert_to< ht_eth_tail_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_eth_head_done_fail = _val.convert_to< ht_eth_head_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_eth_head_done_pass = _val.convert_to< ht_eth_head_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_tx_tail_done_fail = _val.convert_to< ht_tx_tail_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_tx_tail_done_pass = _val.convert_to< ht_tx_tail_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_tx_head_done_fail = _val.convert_to< ht_tx_head_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ht_tx_head_done_pass = _val.convert_to< ht_tx_head_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hbm_write_fifo_done_fail = _val.convert_to< hbm_write_fifo_done_fail_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__hbm_write_fifo_done_pass = _val.convert_to< hbm_write_fifo_done_pass_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__hbm_read_fifo_done_fail = _val.convert_to< hbm_read_fifo_done_fail_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__hbm_read_fifo_done_pass = _val.convert_to< hbm_read_fifo_done_pass_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pbchbm_csr_sta_ecc_hbm_ht_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 11;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 5;
    
}

void cap_pbchbm_csr_cfg_hbm_ht_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__eth_head_ecc_disable_cor = _val.convert_to< eth_head_ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_head_ecc_disable_det = _val.convert_to< eth_head_ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_head_dhs_eccbypass = _val.convert_to< eth_head_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_tail_ecc_disable_cor = _val.convert_to< eth_tail_ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_tail_ecc_disable_det = _val.convert_to< eth_tail_ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__eth_tail_dhs_eccbypass = _val.convert_to< eth_tail_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tx_head_dhs_eccbypass = _val.convert_to< tx_head_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__tx_tail_dhs_eccbypass = _val.convert_to< tx_tail_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cache = _val.convert_to< cache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__prot = _val.convert_to< prot_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__qos = _val.convert_to< qos_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__lock = _val.convert_to< lock_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cache = _val.convert_to< cache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__prot = _val.convert_to< prot_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__qos = _val.convert_to< qos_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__lock = _val.convert_to< lock_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rpl_cache = _val.convert_to< rpl_cache_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rpl_prot = _val.convert_to< rpl_prot_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__rpl_qos = _val.convert_to< rpl_qos_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__rpl_lock = _val.convert_to< rpl_lock_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_sta_hbm_wb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >()  ;
    _val = _val >> 27;
    
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_sta_hbm_rb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__init_done = _val.convert_to< init_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_ecc_correctable = _val.convert_to< cdt_ecc_correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_ecc_uncorrectable = _val.convert_to< cdt_ecc_uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rb_ecc_correctable = _val.convert_to< rb_ecc_correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rb_ecc_uncorrectable = _val.convert_to< rb_ecc_uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__rb_ecc_syndrome = _val.convert_to< rb_ecc_syndrome_cpp_int_t >()  ;
    _val = _val >> 36;
    
    int_var__rb_ecc_addr = _val.convert_to< rb_ecc_addr_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__cdt_ecc_syndrome = _val.convert_to< cdt_ecc_syndrome_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__cdt_ecc_addr = _val.convert_to< cdt_ecc_addr_cpp_int_t >()  ;
    _val = _val >> 7;
    
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__hct_init_done = _val.convert_to< hct_init_done_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_wb_drop_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__threshold = _val.convert_to< threshold_cpp_int_t >()  ;
    _val = _val >> 10;
    
}

void cap_pbchbm_csr_cfg_hbm_wb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__xoff_threshold = _val.convert_to< xoff_threshold_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__ack_fifo_xoff_threshold = _val.convert_to< ack_fifo_xoff_threshold_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__ack_fifo_xon_threshold = _val.convert_to< ack_fifo_xon_threshold_cpp_int_t >()  ;
    _val = _val >> 3;
    
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__addr_swizzle = _val.convert_to< addr_swizzle_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_xoff_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__timeout = _val.convert_to< timeout_cpp_int_t >()  ;
    _val = _val >> 27;
    
}

void cap_pbchbm_csr_cfg_hbm_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dhs_mem_address = _val.convert_to< dhs_mem_address_cpp_int_t >()  ;
    _val = _val >> 10;
    
    int_var__mtu_dhs_selection = _val.convert_to< mtu_dhs_selection_cpp_int_t >()  ;
    _val = _val >> 4;
    
    int_var__debug_port_enable = _val.convert_to< debug_port_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__debug_port_select = _val.convert_to< debug_port_select_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run_tx_head = _val.convert_to< bist_run_tx_head_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run_tx_tail = _val.convert_to< bist_run_tx_tail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run_eth_head = _val.convert_to< bist_run_eth_head_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run_eth_tail = _val.convert_to< bist_run_eth_tail_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__control_sw_reset = _val.convert_to< control_sw_reset_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_cfg_hbm_spare_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__data = _val.convert_to< data_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_cfg_hbm_rb_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__mem_ecc_disable_cor = _val.convert_to< mem_ecc_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__mem_ecc_disable_det = _val.convert_to< mem_ecc_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__mem_dhs_eccbypass = _val.convert_to< mem_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__enable_wrr = _val.convert_to< enable_wrr_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__cdt_dhs_selection = _val.convert_to< cdt_dhs_selection_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__hct_dhs_eccbypass = _val.convert_to< hct_dhs_eccbypass_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_hct_disable_cor = _val.convert_to< ecc_hct_disable_cor_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__ecc_hct_disable_det = _val.convert_to< ecc_hct_disable_det_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >()  ;
    _val = _val >> 2;
    
    int_var__hct_init_start = _val.convert_to< hct_init_start_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__addr_swizzle = _val.convert_to< addr_swizzle_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__max_arlen = _val.convert_to< max_arlen_cpp_int_t >()  ;
    _val = _val >> 2;
    
}

void cap_pbchbm_csr_cfg_hbm_cdt_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__cfg_hbm_cdt = _val.convert_to< cfg_hbm_cdt_cpp_int_t >()  ;
    _val = _val >> 32;
    
}

void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >()  ;
    _val = _val >> 11;
    
    int_var__addr = _val.convert_to< addr_cpp_int_t >()  ;
    _val = _val >> 12;
    
}

void cap_pbchbm_csr_csr_intr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >()  ;
    _val = _val >> 1;
    
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >()  ;
    _val = _val >> 1;
    
}

void cap_pbchbm_csr_t::all(const cpp_int & in_val) {
    cpp_int _val = in_val;

    csr_intr.all( _val);
    _val = _val >> csr_intr.get_width(); 
    sta_ecc_hbm_mtu.all( _val);
    _val = _val >> sta_ecc_hbm_mtu.get_width(); 
    cfg_hbm_cdt.all( _val);
    _val = _val >> cfg_hbm_cdt.get_width(); 
    cfg_hbm_rb.all( _val);
    _val = _val >> cfg_hbm_rb.get_width(); 
    cfg_hbm_spare.all( _val);
    _val = _val >> cfg_hbm_spare.get_width(); 
    cfg_hbm.all( _val);
    _val = _val >> cfg_hbm.get_width(); 
    cfg_hbm_xoff.all( _val);
    _val = _val >> cfg_hbm_xoff.get_width(); 
    cfg_hbm_wb.all( _val);
    _val = _val >> cfg_hbm_wb.get_width(); 
    cfg_hbm_wb_drop.all( _val);
    _val = _val >> cfg_hbm_wb_drop.get_width(); 
    sta_hbm_rb.all( _val);
    _val = _val >> sta_hbm_rb.get_width(); 
    sta_hbm_wb.all( _val);
    _val = _val >> sta_hbm_wb.get_width(); 
    cfg_hbm_axi_read_attr.all( _val);
    _val = _val >> cfg_hbm_axi_read_attr.get_width(); 
    cfg_hbm_axi_write_attr.all( _val);
    _val = _val >> cfg_hbm_axi_write_attr.get_width(); 
    cfg_hbm_ht.all( _val);
    _val = _val >> cfg_hbm_ht.get_width(); 
    sta_ecc_hbm_ht.all( _val);
    _val = _val >> sta_ecc_hbm_ht.get_width(); 
    sta_bist.all( _val);
    _val = _val >> sta_bist.get_width(); 
    cfg_hbm_threshold.all( _val);
    _val = _val >> cfg_hbm_threshold.get_width(); 
    cfg_hbm_eth_payload.all( _val);
    _val = _val >> cfg_hbm_eth_payload.get_width(); 
    cfg_hbm_eth_ctrl.all( _val);
    _val = _val >> cfg_hbm_eth_ctrl.get_width(); 
    cfg_hbm_eth_ctrl_init.all( _val);
    _val = _val >> cfg_hbm_eth_ctrl_init.get_width(); 
    cfg_hbm_tx_payload.all( _val);
    _val = _val >> cfg_hbm_tx_payload.get_width(); 
    cfg_hbm_tx_ctrl.all( _val);
    _val = _val >> cfg_hbm_tx_ctrl.get_width(); 
    cfg_hbm_tx_ctrl_init.all( _val);
    _val = _val >> cfg_hbm_tx_ctrl_init.get_width(); 
    sta_hbm.all( _val);
    _val = _val >> sta_hbm.get_width(); 
    sta_hbm_eth_context_0.all( _val);
    _val = _val >> sta_hbm_eth_context_0.get_width(); 
    sta_hbm_eth_context_1.all( _val);
    _val = _val >> sta_hbm_eth_context_1.get_width(); 
    sta_hbm_eth_context_2.all( _val);
    _val = _val >> sta_hbm_eth_context_2.get_width(); 
    sta_hbm_eth_context_3.all( _val);
    _val = _val >> sta_hbm_eth_context_3.get_width(); 
    sta_hbm_eth_context_4.all( _val);
    _val = _val >> sta_hbm_eth_context_4.get_width(); 
    sta_hbm_eth_context_5.all( _val);
    _val = _val >> sta_hbm_eth_context_5.get_width(); 
    sta_hbm_eth_context_6.all( _val);
    _val = _val >> sta_hbm_eth_context_6.get_width(); 
    sta_hbm_eth_context_7.all( _val);
    _val = _val >> sta_hbm_eth_context_7.get_width(); 
    sta_hbm_eth_context_8.all( _val);
    _val = _val >> sta_hbm_eth_context_8.get_width(); 
    sta_hbm_eth_context_9.all( _val);
    _val = _val >> sta_hbm_eth_context_9.get_width(); 
    sta_hbm_eth_context_10.all( _val);
    _val = _val >> sta_hbm_eth_context_10.get_width(); 
    sta_hbm_eth_context_11.all( _val);
    _val = _val >> sta_hbm_eth_context_11.get_width(); 
    sta_hbm_eth_context_12.all( _val);
    _val = _val >> sta_hbm_eth_context_12.get_width(); 
    sta_hbm_eth_context_13.all( _val);
    _val = _val >> sta_hbm_eth_context_13.get_width(); 
    sta_hbm_eth_context_14.all( _val);
    _val = _val >> sta_hbm_eth_context_14.get_width(); 
    sta_hbm_eth_context_15.all( _val);
    _val = _val >> sta_hbm_eth_context_15.get_width(); 
    sta_hbm_eth_context_16.all( _val);
    _val = _val >> sta_hbm_eth_context_16.get_width(); 
    sta_hbm_eth_context_17.all( _val);
    _val = _val >> sta_hbm_eth_context_17.get_width(); 
    sta_hbm_eth_context_18.all( _val);
    _val = _val >> sta_hbm_eth_context_18.get_width(); 
    sta_hbm_eth_context_19.all( _val);
    _val = _val >> sta_hbm_eth_context_19.get_width(); 
    sta_hbm_eth_context_20.all( _val);
    _val = _val >> sta_hbm_eth_context_20.get_width(); 
    sta_hbm_eth_context_21.all( _val);
    _val = _val >> sta_hbm_eth_context_21.get_width(); 
    sta_hbm_eth_context_22.all( _val);
    _val = _val >> sta_hbm_eth_context_22.get_width(); 
    sta_hbm_eth_context_23.all( _val);
    _val = _val >> sta_hbm_eth_context_23.get_width(); 
    sta_hbm_eth_context_24.all( _val);
    _val = _val >> sta_hbm_eth_context_24.get_width(); 
    sta_hbm_eth_context_25.all( _val);
    _val = _val >> sta_hbm_eth_context_25.get_width(); 
    sta_hbm_eth_context_26.all( _val);
    _val = _val >> sta_hbm_eth_context_26.get_width(); 
    sta_hbm_eth_context_27.all( _val);
    _val = _val >> sta_hbm_eth_context_27.get_width(); 
    sta_hbm_eth_context_28.all( _val);
    _val = _val >> sta_hbm_eth_context_28.get_width(); 
    sta_hbm_eth_context_29.all( _val);
    _val = _val >> sta_hbm_eth_context_29.get_width(); 
    sta_hbm_eth_context_30.all( _val);
    _val = _val >> sta_hbm_eth_context_30.get_width(); 
    sta_hbm_eth_context_31.all( _val);
    _val = _val >> sta_hbm_eth_context_31.get_width(); 
    sta_hbm_tx_context_0.all( _val);
    _val = _val >> sta_hbm_tx_context_0.get_width(); 
    sta_hbm_tx_context_1.all( _val);
    _val = _val >> sta_hbm_tx_context_1.get_width(); 
    sta_hbm_tx_context_2.all( _val);
    _val = _val >> sta_hbm_tx_context_2.get_width(); 
    sta_hbm_tx_context_3.all( _val);
    _val = _val >> sta_hbm_tx_context_3.get_width(); 
    sta_hbm_tx_context_4.all( _val);
    _val = _val >> sta_hbm_tx_context_4.get_width(); 
    sta_hbm_tx_context_5.all( _val);
    _val = _val >> sta_hbm_tx_context_5.get_width(); 
    sta_hbm_tx_context_6.all( _val);
    _val = _val >> sta_hbm_tx_context_6.get_width(); 
    sta_hbm_tx_context_7.all( _val);
    _val = _val >> sta_hbm_tx_context_7.get_width(); 
    sta_hbm_tx_context_8.all( _val);
    _val = _val >> sta_hbm_tx_context_8.get_width(); 
    sta_hbm_tx_context_9.all( _val);
    _val = _val >> sta_hbm_tx_context_9.get_width(); 
    sta_hbm_tx_context_10.all( _val);
    _val = _val >> sta_hbm_tx_context_10.get_width(); 
    sta_hbm_tx_context_11.all( _val);
    _val = _val >> sta_hbm_tx_context_11.get_width(); 
    sta_hbm_tx_context_12.all( _val);
    _val = _val >> sta_hbm_tx_context_12.get_width(); 
    sta_hbm_tx_context_13.all( _val);
    _val = _val >> sta_hbm_tx_context_13.get_width(); 
    sta_hbm_tx_context_14.all( _val);
    _val = _val >> sta_hbm_tx_context_14.get_width(); 
    sta_hbm_tx_context_15.all( _val);
    _val = _val >> sta_hbm_tx_context_15.get_width(); 
    sta_hbm_axi.all( _val);
    _val = _val >> sta_hbm_axi.get_width(); 
    cfg_hbm_axi_base.all( _val);
    _val = _val >> cfg_hbm_axi_base.get_width(); 
    cfg_hbm_r2a.all( _val);
    _val = _val >> cfg_hbm_r2a.get_width(); 
    cnt_hbm0_emergency_stop.all( _val);
    _val = _val >> cnt_hbm0_emergency_stop.get_width(); 
    cnt_hbm0_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm0_write_ack_filling_up.get_width(); 
    cnt_hbm0_write_ack_full.all( _val);
    _val = _val >> cnt_hbm0_write_ack_full.get_width(); 
    cnt_hbm0_truncate.all( _val);
    _val = _val >> cnt_hbm0_truncate.get_width(); 
    sat_hbm0_ctrl_full.all( _val);
    _val = _val >> sat_hbm0_ctrl_full.get_width(); 
    cnt_hbm1_emergency_stop.all( _val);
    _val = _val >> cnt_hbm1_emergency_stop.get_width(); 
    cnt_hbm1_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm1_write_ack_filling_up.get_width(); 
    cnt_hbm1_write_ack_full.all( _val);
    _val = _val >> cnt_hbm1_write_ack_full.get_width(); 
    cnt_hbm1_truncate.all( _val);
    _val = _val >> cnt_hbm1_truncate.get_width(); 
    sat_hbm1_ctrl_full.all( _val);
    _val = _val >> sat_hbm1_ctrl_full.get_width(); 
    cnt_hbm2_emergency_stop.all( _val);
    _val = _val >> cnt_hbm2_emergency_stop.get_width(); 
    cnt_hbm2_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm2_write_ack_filling_up.get_width(); 
    cnt_hbm2_write_ack_full.all( _val);
    _val = _val >> cnt_hbm2_write_ack_full.get_width(); 
    cnt_hbm2_truncate.all( _val);
    _val = _val >> cnt_hbm2_truncate.get_width(); 
    sat_hbm2_ctrl_full.all( _val);
    _val = _val >> sat_hbm2_ctrl_full.get_width(); 
    cnt_hbm3_emergency_stop.all( _val);
    _val = _val >> cnt_hbm3_emergency_stop.get_width(); 
    cnt_hbm3_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm3_write_ack_filling_up.get_width(); 
    cnt_hbm3_write_ack_full.all( _val);
    _val = _val >> cnt_hbm3_write_ack_full.get_width(); 
    cnt_hbm3_truncate.all( _val);
    _val = _val >> cnt_hbm3_truncate.get_width(); 
    sat_hbm3_ctrl_full.all( _val);
    _val = _val >> sat_hbm3_ctrl_full.get_width(); 
    cnt_hbm4_emergency_stop.all( _val);
    _val = _val >> cnt_hbm4_emergency_stop.get_width(); 
    cnt_hbm4_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm4_write_ack_filling_up.get_width(); 
    cnt_hbm4_write_ack_full.all( _val);
    _val = _val >> cnt_hbm4_write_ack_full.get_width(); 
    cnt_hbm4_truncate.all( _val);
    _val = _val >> cnt_hbm4_truncate.get_width(); 
    sat_hbm4_ctrl_full.all( _val);
    _val = _val >> sat_hbm4_ctrl_full.get_width(); 
    cnt_hbm5_emergency_stop.all( _val);
    _val = _val >> cnt_hbm5_emergency_stop.get_width(); 
    cnt_hbm5_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm5_write_ack_filling_up.get_width(); 
    cnt_hbm5_write_ack_full.all( _val);
    _val = _val >> cnt_hbm5_write_ack_full.get_width(); 
    cnt_hbm5_truncate.all( _val);
    _val = _val >> cnt_hbm5_truncate.get_width(); 
    sat_hbm5_ctrl_full.all( _val);
    _val = _val >> sat_hbm5_ctrl_full.get_width(); 
    cnt_hbm6_emergency_stop.all( _val);
    _val = _val >> cnt_hbm6_emergency_stop.get_width(); 
    cnt_hbm6_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm6_write_ack_filling_up.get_width(); 
    cnt_hbm6_write_ack_full.all( _val);
    _val = _val >> cnt_hbm6_write_ack_full.get_width(); 
    cnt_hbm6_truncate.all( _val);
    _val = _val >> cnt_hbm6_truncate.get_width(); 
    sat_hbm6_ctrl_full.all( _val);
    _val = _val >> sat_hbm6_ctrl_full.get_width(); 
    cnt_hbm7_emergency_stop.all( _val);
    _val = _val >> cnt_hbm7_emergency_stop.get_width(); 
    cnt_hbm7_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm7_write_ack_filling_up.get_width(); 
    cnt_hbm7_write_ack_full.all( _val);
    _val = _val >> cnt_hbm7_write_ack_full.get_width(); 
    cnt_hbm7_truncate.all( _val);
    _val = _val >> cnt_hbm7_truncate.get_width(); 
    sat_hbm7_ctrl_full.all( _val);
    _val = _val >> sat_hbm7_ctrl_full.get_width(); 
    cnt_hbm8_emergency_stop.all( _val);
    _val = _val >> cnt_hbm8_emergency_stop.get_width(); 
    cnt_hbm8_write_ack_filling_up.all( _val);
    _val = _val >> cnt_hbm8_write_ack_filling_up.get_width(); 
    cnt_hbm8_write_ack_full.all( _val);
    _val = _val >> cnt_hbm8_write_ack_full.get_width(); 
    cnt_hbm8_truncate.all( _val);
    _val = _val >> cnt_hbm8_truncate.get_width(); 
    sat_hbm8_ctrl_full.all( _val);
    _val = _val >> sat_hbm8_ctrl_full.get_width(); 
    sta_hbm_wb_depth.all( _val);
    _val = _val >> sta_hbm_wb_depth.get_width(); 
    sta_hbm_eth_pend_acks.all( _val);
    _val = _val >> sta_hbm_eth_pend_acks.get_width(); 
    sta_hbm_tx_pend_acks.all( _val);
    _val = _val >> sta_hbm_tx_pend_acks.get_width(); 
    sta_hbm_timestamp.all( _val);
    _val = _val >> sta_hbm_timestamp.get_width(); 
    cfg_hbm_cut_thru.all( _val);
    _val = _val >> cfg_hbm_cut_thru.get_width(); 
    cfg_hbm_parser_snap.all( _val);
    _val = _val >> cfg_hbm_parser_snap.get_width(); 
    cfg_hbm_qdepth.all( _val);
    _val = _val >> cfg_hbm_qdepth.get_width(); 
    cfg_hbm_eth_reset_context.all( _val);
    _val = _val >> cfg_hbm_eth_reset_context.get_width(); 
    cfg_hbm_tx_reset_context.all( _val);
    _val = _val >> cfg_hbm_tx_reset_context.get_width(); 
    cfg_hbm_eth_flush.all( _val);
    _val = _val >> cfg_hbm_eth_flush.get_width(); 
    cfg_hbm_tx_flush.all( _val);
    _val = _val >> cfg_hbm_tx_flush.get_width(); 
    cfg_hbm_wb_duty_cycle.all( _val);
    _val = _val >> cfg_hbm_wb_duty_cycle.get_width(); 
    cfg_hbm_eth_xoff_timeout.all( _val);
    _val = _val >> cfg_hbm_eth_xoff_timeout.get_width(); 
    cfg_hbm_eth_xoff_force.all( _val);
    _val = _val >> cfg_hbm_eth_xoff_force.get_width(); 
    cfg_hbm_eth_clear_context.all( _val);
    _val = _val >> cfg_hbm_eth_clear_context.get_width(); 
    cfg_hbm_tx_clear_context.all( _val);
    _val = _val >> cfg_hbm_tx_clear_context.get_width(); 
    cnt_hbm_axi_rpl.all( _val);
    _val = _val >> cnt_hbm_axi_rpl.get_width(); 
    cnt_hbm_axi_pyld.all( _val);
    _val = _val >> cnt_hbm_axi_pyld.get_width(); 
    cnt_hbm_axi_ctrl.all( _val);
    _val = _val >> cnt_hbm_axi_ctrl.get_width(); 
    cnt_hbm_axi_timestamp.all( _val);
    _val = _val >> cnt_hbm_axi_timestamp.get_width(); 
    dhs_hbm_cdt.all( _val);
    _val = _val >> dhs_hbm_cdt.get_width(); 
    dhs_hbm_mem.all( _val);
    _val = _val >> dhs_hbm_mem.get_width(); 
    dhs_hbm_r2a.all( _val);
    _val = _val >> dhs_hbm_r2a.get_width(); 
    dhs_hbm_wb_wm.all( _val);
    _val = _val >> dhs_hbm_wb_wm.get_width(); 
    dhs_hbm_eth_pend_acks_wm.all( _val);
    _val = _val >> dhs_hbm_eth_pend_acks_wm.get_width(); 
    dhs_hbm_tx_pend_acks_wm.all( _val);
    _val = _val >> dhs_hbm_tx_pend_acks_wm.get_width(); 
    hbm_port_0.all( _val);
    _val = _val >> hbm_port_0.get_width(); 
    hbm_port_1.all( _val);
    _val = _val >> hbm_port_1.get_width(); 
    hbm_port_2.all( _val);
    _val = _val >> hbm_port_2.get_width(); 
    hbm_port_3.all( _val);
    _val = _val >> hbm_port_3.get_width(); 
    hbm_port_4.all( _val);
    _val = _val >> hbm_port_4.get_width(); 
    hbm_port_5.all( _val);
    _val = _val >> hbm_port_5.get_width(); 
    hbm_port_6.all( _val);
    _val = _val >> hbm_port_6.get_width(); 
    hbm_port_7.all( _val);
    _val = _val >> hbm_port_7.get_width(); 
    hbm_port_8.all( _val);
    _val = _val >> hbm_port_8.get_width(); 
    hbm_port_9.all( _val);
    _val = _val >> hbm_port_9.get_width(); 
    int_groups.all( _val);
    _val = _val >> int_groups.get_width(); 
    int_ecc_hbm_mtu.all( _val);
    _val = _val >> int_ecc_hbm_mtu.get_width(); 
    int_ecc_hbm_rb.all( _val);
    _val = _val >> int_ecc_hbm_rb.get_width(); 
    int_ecc_hbm_wb.all( _val);
    _val = _val >> int_ecc_hbm_wb.get_width(); 
    int_ecc_hbm_ht.all( _val);
    _val = _val >> int_ecc_hbm_ht.get_width(); 
    int_hbm_xoff.all( _val);
    _val = _val >> int_hbm_xoff.get_width(); 
    int_hbm_pbus_violation_in.all( _val);
    _val = _val >> int_hbm_pbus_violation_in.get_width(); 
    int_hbm_pbus_violation_out.all( _val);
    _val = _val >> int_hbm_pbus_violation_out.get_width(); 
    int_hbm_drop.all( _val);
    _val = _val >> int_hbm_drop.get_width(); 
    int_hbm_axi_err_rsp.all( _val);
    _val = _val >> int_hbm_axi_err_rsp.get_width(); 
    int_hbm_drop_emergency.all( _val);
    _val = _val >> int_hbm_drop_emergency.get_width(); 
    int_hbm_drop_write_ack.all( _val);
    _val = _val >> int_hbm_drop_write_ack.get_width(); 
    int_hbm_drop_ctrl.all( _val);
    _val = _val >> int_hbm_drop_ctrl.get_width(); 
    int_hbm_drop_threshold.all( _val);
    _val = _val >> int_hbm_drop_threshold.get_width(); 
    int_hbm_truncate_no.all( _val);
    _val = _val >> int_hbm_truncate_no.get_width(); 
    int_hbm_stop.all( _val);
    _val = _val >> int_hbm_stop.get_width(); 
}

cpp_int cap_pbchbm_csr_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_hbm_stop.get_width(); ret_val = ret_val  | int_hbm_stop.all(); 
    ret_val = ret_val << int_hbm_truncate_no.get_width(); ret_val = ret_val  | int_hbm_truncate_no.all(); 
    ret_val = ret_val << int_hbm_drop_threshold.get_width(); ret_val = ret_val  | int_hbm_drop_threshold.all(); 
    ret_val = ret_val << int_hbm_drop_ctrl.get_width(); ret_val = ret_val  | int_hbm_drop_ctrl.all(); 
    ret_val = ret_val << int_hbm_drop_write_ack.get_width(); ret_val = ret_val  | int_hbm_drop_write_ack.all(); 
    ret_val = ret_val << int_hbm_drop_emergency.get_width(); ret_val = ret_val  | int_hbm_drop_emergency.all(); 
    ret_val = ret_val << int_hbm_axi_err_rsp.get_width(); ret_val = ret_val  | int_hbm_axi_err_rsp.all(); 
    ret_val = ret_val << int_hbm_drop.get_width(); ret_val = ret_val  | int_hbm_drop.all(); 
    ret_val = ret_val << int_hbm_pbus_violation_out.get_width(); ret_val = ret_val  | int_hbm_pbus_violation_out.all(); 
    ret_val = ret_val << int_hbm_pbus_violation_in.get_width(); ret_val = ret_val  | int_hbm_pbus_violation_in.all(); 
    ret_val = ret_val << int_hbm_xoff.get_width(); ret_val = ret_val  | int_hbm_xoff.all(); 
    ret_val = ret_val << int_ecc_hbm_ht.get_width(); ret_val = ret_val  | int_ecc_hbm_ht.all(); 
    ret_val = ret_val << int_ecc_hbm_wb.get_width(); ret_val = ret_val  | int_ecc_hbm_wb.all(); 
    ret_val = ret_val << int_ecc_hbm_rb.get_width(); ret_val = ret_val  | int_ecc_hbm_rb.all(); 
    ret_val = ret_val << int_ecc_hbm_mtu.get_width(); ret_val = ret_val  | int_ecc_hbm_mtu.all(); 
    ret_val = ret_val << int_groups.get_width(); ret_val = ret_val  | int_groups.all(); 
    ret_val = ret_val << hbm_port_9.get_width(); ret_val = ret_val  | hbm_port_9.all(); 
    ret_val = ret_val << hbm_port_8.get_width(); ret_val = ret_val  | hbm_port_8.all(); 
    ret_val = ret_val << hbm_port_7.get_width(); ret_val = ret_val  | hbm_port_7.all(); 
    ret_val = ret_val << hbm_port_6.get_width(); ret_val = ret_val  | hbm_port_6.all(); 
    ret_val = ret_val << hbm_port_5.get_width(); ret_val = ret_val  | hbm_port_5.all(); 
    ret_val = ret_val << hbm_port_4.get_width(); ret_val = ret_val  | hbm_port_4.all(); 
    ret_val = ret_val << hbm_port_3.get_width(); ret_val = ret_val  | hbm_port_3.all(); 
    ret_val = ret_val << hbm_port_2.get_width(); ret_val = ret_val  | hbm_port_2.all(); 
    ret_val = ret_val << hbm_port_1.get_width(); ret_val = ret_val  | hbm_port_1.all(); 
    ret_val = ret_val << hbm_port_0.get_width(); ret_val = ret_val  | hbm_port_0.all(); 
    ret_val = ret_val << dhs_hbm_tx_pend_acks_wm.get_width(); ret_val = ret_val  | dhs_hbm_tx_pend_acks_wm.all(); 
    ret_val = ret_val << dhs_hbm_eth_pend_acks_wm.get_width(); ret_val = ret_val  | dhs_hbm_eth_pend_acks_wm.all(); 
    ret_val = ret_val << dhs_hbm_wb_wm.get_width(); ret_val = ret_val  | dhs_hbm_wb_wm.all(); 
    ret_val = ret_val << dhs_hbm_r2a.get_width(); ret_val = ret_val  | dhs_hbm_r2a.all(); 
    ret_val = ret_val << dhs_hbm_mem.get_width(); ret_val = ret_val  | dhs_hbm_mem.all(); 
    ret_val = ret_val << dhs_hbm_cdt.get_width(); ret_val = ret_val  | dhs_hbm_cdt.all(); 
    ret_val = ret_val << cnt_hbm_axi_timestamp.get_width(); ret_val = ret_val  | cnt_hbm_axi_timestamp.all(); 
    ret_val = ret_val << cnt_hbm_axi_ctrl.get_width(); ret_val = ret_val  | cnt_hbm_axi_ctrl.all(); 
    ret_val = ret_val << cnt_hbm_axi_pyld.get_width(); ret_val = ret_val  | cnt_hbm_axi_pyld.all(); 
    ret_val = ret_val << cnt_hbm_axi_rpl.get_width(); ret_val = ret_val  | cnt_hbm_axi_rpl.all(); 
    ret_val = ret_val << cfg_hbm_tx_clear_context.get_width(); ret_val = ret_val  | cfg_hbm_tx_clear_context.all(); 
    ret_val = ret_val << cfg_hbm_eth_clear_context.get_width(); ret_val = ret_val  | cfg_hbm_eth_clear_context.all(); 
    ret_val = ret_val << cfg_hbm_eth_xoff_force.get_width(); ret_val = ret_val  | cfg_hbm_eth_xoff_force.all(); 
    ret_val = ret_val << cfg_hbm_eth_xoff_timeout.get_width(); ret_val = ret_val  | cfg_hbm_eth_xoff_timeout.all(); 
    ret_val = ret_val << cfg_hbm_wb_duty_cycle.get_width(); ret_val = ret_val  | cfg_hbm_wb_duty_cycle.all(); 
    ret_val = ret_val << cfg_hbm_tx_flush.get_width(); ret_val = ret_val  | cfg_hbm_tx_flush.all(); 
    ret_val = ret_val << cfg_hbm_eth_flush.get_width(); ret_val = ret_val  | cfg_hbm_eth_flush.all(); 
    ret_val = ret_val << cfg_hbm_tx_reset_context.get_width(); ret_val = ret_val  | cfg_hbm_tx_reset_context.all(); 
    ret_val = ret_val << cfg_hbm_eth_reset_context.get_width(); ret_val = ret_val  | cfg_hbm_eth_reset_context.all(); 
    ret_val = ret_val << cfg_hbm_qdepth.get_width(); ret_val = ret_val  | cfg_hbm_qdepth.all(); 
    ret_val = ret_val << cfg_hbm_parser_snap.get_width(); ret_val = ret_val  | cfg_hbm_parser_snap.all(); 
    ret_val = ret_val << cfg_hbm_cut_thru.get_width(); ret_val = ret_val  | cfg_hbm_cut_thru.all(); 
    ret_val = ret_val << sta_hbm_timestamp.get_width(); ret_val = ret_val  | sta_hbm_timestamp.all(); 
    ret_val = ret_val << sta_hbm_tx_pend_acks.get_width(); ret_val = ret_val  | sta_hbm_tx_pend_acks.all(); 
    ret_val = ret_val << sta_hbm_eth_pend_acks.get_width(); ret_val = ret_val  | sta_hbm_eth_pend_acks.all(); 
    ret_val = ret_val << sta_hbm_wb_depth.get_width(); ret_val = ret_val  | sta_hbm_wb_depth.all(); 
    ret_val = ret_val << sat_hbm8_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm8_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm8_truncate.get_width(); ret_val = ret_val  | cnt_hbm8_truncate.all(); 
    ret_val = ret_val << cnt_hbm8_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm8_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm8_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm8_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm8_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm8_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm7_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm7_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm7_truncate.get_width(); ret_val = ret_val  | cnt_hbm7_truncate.all(); 
    ret_val = ret_val << cnt_hbm7_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm7_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm7_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm7_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm7_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm7_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm6_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm6_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm6_truncate.get_width(); ret_val = ret_val  | cnt_hbm6_truncate.all(); 
    ret_val = ret_val << cnt_hbm6_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm6_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm6_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm6_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm6_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm6_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm5_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm5_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm5_truncate.get_width(); ret_val = ret_val  | cnt_hbm5_truncate.all(); 
    ret_val = ret_val << cnt_hbm5_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm5_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm5_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm5_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm5_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm5_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm4_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm4_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm4_truncate.get_width(); ret_val = ret_val  | cnt_hbm4_truncate.all(); 
    ret_val = ret_val << cnt_hbm4_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm4_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm4_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm4_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm4_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm4_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm3_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm3_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm3_truncate.get_width(); ret_val = ret_val  | cnt_hbm3_truncate.all(); 
    ret_val = ret_val << cnt_hbm3_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm3_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm3_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm3_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm3_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm3_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm2_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm2_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm2_truncate.get_width(); ret_val = ret_val  | cnt_hbm2_truncate.all(); 
    ret_val = ret_val << cnt_hbm2_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm2_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm2_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm2_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm2_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm2_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm1_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm1_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm1_truncate.get_width(); ret_val = ret_val  | cnt_hbm1_truncate.all(); 
    ret_val = ret_val << cnt_hbm1_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm1_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm1_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm1_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm1_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm1_emergency_stop.all(); 
    ret_val = ret_val << sat_hbm0_ctrl_full.get_width(); ret_val = ret_val  | sat_hbm0_ctrl_full.all(); 
    ret_val = ret_val << cnt_hbm0_truncate.get_width(); ret_val = ret_val  | cnt_hbm0_truncate.all(); 
    ret_val = ret_val << cnt_hbm0_write_ack_full.get_width(); ret_val = ret_val  | cnt_hbm0_write_ack_full.all(); 
    ret_val = ret_val << cnt_hbm0_write_ack_filling_up.get_width(); ret_val = ret_val  | cnt_hbm0_write_ack_filling_up.all(); 
    ret_val = ret_val << cnt_hbm0_emergency_stop.get_width(); ret_val = ret_val  | cnt_hbm0_emergency_stop.all(); 
    ret_val = ret_val << cfg_hbm_r2a.get_width(); ret_val = ret_val  | cfg_hbm_r2a.all(); 
    ret_val = ret_val << cfg_hbm_axi_base.get_width(); ret_val = ret_val  | cfg_hbm_axi_base.all(); 
    ret_val = ret_val << sta_hbm_axi.get_width(); ret_val = ret_val  | sta_hbm_axi.all(); 
    ret_val = ret_val << sta_hbm_tx_context_15.get_width(); ret_val = ret_val  | sta_hbm_tx_context_15.all(); 
    ret_val = ret_val << sta_hbm_tx_context_14.get_width(); ret_val = ret_val  | sta_hbm_tx_context_14.all(); 
    ret_val = ret_val << sta_hbm_tx_context_13.get_width(); ret_val = ret_val  | sta_hbm_tx_context_13.all(); 
    ret_val = ret_val << sta_hbm_tx_context_12.get_width(); ret_val = ret_val  | sta_hbm_tx_context_12.all(); 
    ret_val = ret_val << sta_hbm_tx_context_11.get_width(); ret_val = ret_val  | sta_hbm_tx_context_11.all(); 
    ret_val = ret_val << sta_hbm_tx_context_10.get_width(); ret_val = ret_val  | sta_hbm_tx_context_10.all(); 
    ret_val = ret_val << sta_hbm_tx_context_9.get_width(); ret_val = ret_val  | sta_hbm_tx_context_9.all(); 
    ret_val = ret_val << sta_hbm_tx_context_8.get_width(); ret_val = ret_val  | sta_hbm_tx_context_8.all(); 
    ret_val = ret_val << sta_hbm_tx_context_7.get_width(); ret_val = ret_val  | sta_hbm_tx_context_7.all(); 
    ret_val = ret_val << sta_hbm_tx_context_6.get_width(); ret_val = ret_val  | sta_hbm_tx_context_6.all(); 
    ret_val = ret_val << sta_hbm_tx_context_5.get_width(); ret_val = ret_val  | sta_hbm_tx_context_5.all(); 
    ret_val = ret_val << sta_hbm_tx_context_4.get_width(); ret_val = ret_val  | sta_hbm_tx_context_4.all(); 
    ret_val = ret_val << sta_hbm_tx_context_3.get_width(); ret_val = ret_val  | sta_hbm_tx_context_3.all(); 
    ret_val = ret_val << sta_hbm_tx_context_2.get_width(); ret_val = ret_val  | sta_hbm_tx_context_2.all(); 
    ret_val = ret_val << sta_hbm_tx_context_1.get_width(); ret_val = ret_val  | sta_hbm_tx_context_1.all(); 
    ret_val = ret_val << sta_hbm_tx_context_0.get_width(); ret_val = ret_val  | sta_hbm_tx_context_0.all(); 
    ret_val = ret_val << sta_hbm_eth_context_31.get_width(); ret_val = ret_val  | sta_hbm_eth_context_31.all(); 
    ret_val = ret_val << sta_hbm_eth_context_30.get_width(); ret_val = ret_val  | sta_hbm_eth_context_30.all(); 
    ret_val = ret_val << sta_hbm_eth_context_29.get_width(); ret_val = ret_val  | sta_hbm_eth_context_29.all(); 
    ret_val = ret_val << sta_hbm_eth_context_28.get_width(); ret_val = ret_val  | sta_hbm_eth_context_28.all(); 
    ret_val = ret_val << sta_hbm_eth_context_27.get_width(); ret_val = ret_val  | sta_hbm_eth_context_27.all(); 
    ret_val = ret_val << sta_hbm_eth_context_26.get_width(); ret_val = ret_val  | sta_hbm_eth_context_26.all(); 
    ret_val = ret_val << sta_hbm_eth_context_25.get_width(); ret_val = ret_val  | sta_hbm_eth_context_25.all(); 
    ret_val = ret_val << sta_hbm_eth_context_24.get_width(); ret_val = ret_val  | sta_hbm_eth_context_24.all(); 
    ret_val = ret_val << sta_hbm_eth_context_23.get_width(); ret_val = ret_val  | sta_hbm_eth_context_23.all(); 
    ret_val = ret_val << sta_hbm_eth_context_22.get_width(); ret_val = ret_val  | sta_hbm_eth_context_22.all(); 
    ret_val = ret_val << sta_hbm_eth_context_21.get_width(); ret_val = ret_val  | sta_hbm_eth_context_21.all(); 
    ret_val = ret_val << sta_hbm_eth_context_20.get_width(); ret_val = ret_val  | sta_hbm_eth_context_20.all(); 
    ret_val = ret_val << sta_hbm_eth_context_19.get_width(); ret_val = ret_val  | sta_hbm_eth_context_19.all(); 
    ret_val = ret_val << sta_hbm_eth_context_18.get_width(); ret_val = ret_val  | sta_hbm_eth_context_18.all(); 
    ret_val = ret_val << sta_hbm_eth_context_17.get_width(); ret_val = ret_val  | sta_hbm_eth_context_17.all(); 
    ret_val = ret_val << sta_hbm_eth_context_16.get_width(); ret_val = ret_val  | sta_hbm_eth_context_16.all(); 
    ret_val = ret_val << sta_hbm_eth_context_15.get_width(); ret_val = ret_val  | sta_hbm_eth_context_15.all(); 
    ret_val = ret_val << sta_hbm_eth_context_14.get_width(); ret_val = ret_val  | sta_hbm_eth_context_14.all(); 
    ret_val = ret_val << sta_hbm_eth_context_13.get_width(); ret_val = ret_val  | sta_hbm_eth_context_13.all(); 
    ret_val = ret_val << sta_hbm_eth_context_12.get_width(); ret_val = ret_val  | sta_hbm_eth_context_12.all(); 
    ret_val = ret_val << sta_hbm_eth_context_11.get_width(); ret_val = ret_val  | sta_hbm_eth_context_11.all(); 
    ret_val = ret_val << sta_hbm_eth_context_10.get_width(); ret_val = ret_val  | sta_hbm_eth_context_10.all(); 
    ret_val = ret_val << sta_hbm_eth_context_9.get_width(); ret_val = ret_val  | sta_hbm_eth_context_9.all(); 
    ret_val = ret_val << sta_hbm_eth_context_8.get_width(); ret_val = ret_val  | sta_hbm_eth_context_8.all(); 
    ret_val = ret_val << sta_hbm_eth_context_7.get_width(); ret_val = ret_val  | sta_hbm_eth_context_7.all(); 
    ret_val = ret_val << sta_hbm_eth_context_6.get_width(); ret_val = ret_val  | sta_hbm_eth_context_6.all(); 
    ret_val = ret_val << sta_hbm_eth_context_5.get_width(); ret_val = ret_val  | sta_hbm_eth_context_5.all(); 
    ret_val = ret_val << sta_hbm_eth_context_4.get_width(); ret_val = ret_val  | sta_hbm_eth_context_4.all(); 
    ret_val = ret_val << sta_hbm_eth_context_3.get_width(); ret_val = ret_val  | sta_hbm_eth_context_3.all(); 
    ret_val = ret_val << sta_hbm_eth_context_2.get_width(); ret_val = ret_val  | sta_hbm_eth_context_2.all(); 
    ret_val = ret_val << sta_hbm_eth_context_1.get_width(); ret_val = ret_val  | sta_hbm_eth_context_1.all(); 
    ret_val = ret_val << sta_hbm_eth_context_0.get_width(); ret_val = ret_val  | sta_hbm_eth_context_0.all(); 
    ret_val = ret_val << sta_hbm.get_width(); ret_val = ret_val  | sta_hbm.all(); 
    ret_val = ret_val << cfg_hbm_tx_ctrl_init.get_width(); ret_val = ret_val  | cfg_hbm_tx_ctrl_init.all(); 
    ret_val = ret_val << cfg_hbm_tx_ctrl.get_width(); ret_val = ret_val  | cfg_hbm_tx_ctrl.all(); 
    ret_val = ret_val << cfg_hbm_tx_payload.get_width(); ret_val = ret_val  | cfg_hbm_tx_payload.all(); 
    ret_val = ret_val << cfg_hbm_eth_ctrl_init.get_width(); ret_val = ret_val  | cfg_hbm_eth_ctrl_init.all(); 
    ret_val = ret_val << cfg_hbm_eth_ctrl.get_width(); ret_val = ret_val  | cfg_hbm_eth_ctrl.all(); 
    ret_val = ret_val << cfg_hbm_eth_payload.get_width(); ret_val = ret_val  | cfg_hbm_eth_payload.all(); 
    ret_val = ret_val << cfg_hbm_threshold.get_width(); ret_val = ret_val  | cfg_hbm_threshold.all(); 
    ret_val = ret_val << sta_bist.get_width(); ret_val = ret_val  | sta_bist.all(); 
    ret_val = ret_val << sta_ecc_hbm_ht.get_width(); ret_val = ret_val  | sta_ecc_hbm_ht.all(); 
    ret_val = ret_val << cfg_hbm_ht.get_width(); ret_val = ret_val  | cfg_hbm_ht.all(); 
    ret_val = ret_val << cfg_hbm_axi_write_attr.get_width(); ret_val = ret_val  | cfg_hbm_axi_write_attr.all(); 
    ret_val = ret_val << cfg_hbm_axi_read_attr.get_width(); ret_val = ret_val  | cfg_hbm_axi_read_attr.all(); 
    ret_val = ret_val << sta_hbm_wb.get_width(); ret_val = ret_val  | sta_hbm_wb.all(); 
    ret_val = ret_val << sta_hbm_rb.get_width(); ret_val = ret_val  | sta_hbm_rb.all(); 
    ret_val = ret_val << cfg_hbm_wb_drop.get_width(); ret_val = ret_val  | cfg_hbm_wb_drop.all(); 
    ret_val = ret_val << cfg_hbm_wb.get_width(); ret_val = ret_val  | cfg_hbm_wb.all(); 
    ret_val = ret_val << cfg_hbm_xoff.get_width(); ret_val = ret_val  | cfg_hbm_xoff.all(); 
    ret_val = ret_val << cfg_hbm.get_width(); ret_val = ret_val  | cfg_hbm.all(); 
    ret_val = ret_val << cfg_hbm_spare.get_width(); ret_val = ret_val  | cfg_hbm_spare.all(); 
    ret_val = ret_val << cfg_hbm_rb.get_width(); ret_val = ret_val  | cfg_hbm_rb.all(); 
    ret_val = ret_val << cfg_hbm_cdt.get_width(); ret_val = ret_val  | cfg_hbm_cdt.all(); 
    ret_val = ret_val << sta_ecc_hbm_mtu.get_width(); ret_val = ret_val  | sta_ecc_hbm_mtu.all(); 
    ret_val = ret_val << csr_intr.get_width(); ret_val = ret_val  | csr_intr.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_csr_intr_t::all() const {
    cpp_int ret_val;

    // dowstream_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream_enable; 
    
    // dowstream
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dowstream; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 12; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_cdt_t::all() const {
    cpp_int ret_val;

    // cfg_hbm_cdt
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__cfg_hbm_cdt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::all() const {
    cpp_int ret_val;

    // max_arlen
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__max_arlen; 
    
    // addr_swizzle
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addr_swizzle; 
    
    // hct_init_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hct_init_start; 
    
    // bist_run
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__bist_run; 
    
    // ecc_hct_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_hct_disable_det; 
    
    // ecc_hct_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_hct_disable_cor; 
    
    // hct_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hct_dhs_eccbypass; 
    
    // cdt_dhs_selection
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_dhs_selection; 
    
    // enable_wrr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__enable_wrr; 
    
    // mem_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__mem_dhs_eccbypass; 
    
    // mem_ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__mem_ecc_disable_det; 
    
    // mem_ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__mem_ecc_disable_cor; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_spare_t::all() const {
    cpp_int ret_val;

    // data
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__data; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::all() const {
    cpp_int ret_val;

    // control_sw_reset
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__control_sw_reset; 
    
    // bist_run_eth_tail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run_eth_tail; 
    
    // bist_run_eth_head
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run_eth_head; 
    
    // bist_run_tx_tail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run_tx_tail; 
    
    // bist_run_tx_head
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run_tx_head; 
    
    // debug_port_select
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__debug_port_select; 
    
    // debug_port_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__debug_port_enable; 
    
    // mtu_dhs_selection
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__mtu_dhs_selection; 
    
    // dhs_mem_address
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__dhs_mem_address; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_xoff_t::all() const {
    cpp_int ret_val;

    // timeout
    ret_val = ret_val << 27; ret_val = ret_val  | int_var__timeout; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::all() const {
    cpp_int ret_val;

    // addr_swizzle
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__addr_swizzle; 
    
    // bist_run
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_run; 
    
    // dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dhs_eccbypass; 
    
    // ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_cor; 
    
    // ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_disable_det; 
    
    // ack_fifo_xon_threshold
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__ack_fifo_xon_threshold; 
    
    // ack_fifo_xoff_threshold
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__ack_fifo_xoff_threshold; 
    
    // xon_threshold
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__xon_threshold; 
    
    // xoff_threshold
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__xoff_threshold; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_drop_t::all() const {
    cpp_int ret_val;

    // threshold
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__threshold; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::all() const {
    cpp_int ret_val;

    // hct_init_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__hct_init_done; 
    
    // bist_done_pass
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // cdt_ecc_addr
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__cdt_ecc_addr; 
    
    // cdt_ecc_syndrome
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__cdt_ecc_syndrome; 
    
    // rb_ecc_addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__rb_ecc_addr; 
    
    // rb_ecc_syndrome
    ret_val = ret_val << 36; ret_val = ret_val  | int_var__rb_ecc_syndrome; 
    
    // rb_ecc_uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_ecc_uncorrectable; 
    
    // rb_ecc_correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_ecc_correctable; 
    
    // cdt_ecc_uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_ecc_uncorrectable; 
    
    // cdt_ecc_correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_ecc_correctable; 
    
    // init_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__init_done; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::all() const {
    cpp_int ret_val;

    // bist_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_pass; 
    
    // bist_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__bist_done_fail; 
    
    // ecc_addr
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__ecc_addr; 
    
    // ecc_syndrome
    ret_val = ret_val << 27; ret_val = ret_val  | int_var__ecc_syndrome; 
    
    // ecc_uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_uncorrectable; 
    
    // ecc_correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ecc_correctable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::all() const {
    cpp_int ret_val;

    // rpl_lock
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rpl_lock; 
    
    // rpl_qos
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rpl_qos; 
    
    // rpl_prot
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__rpl_prot; 
    
    // rpl_cache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__rpl_cache; 
    
    // lock
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__lock; 
    
    // qos
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__qos; 
    
    // prot
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__prot; 
    
    // cache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__cache; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::all() const {
    cpp_int ret_val;

    // lock
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__lock; 
    
    // qos
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__qos; 
    
    // prot
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__prot; 
    
    // cache
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__cache; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::all() const {
    cpp_int ret_val;

    // tx_tail_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_tail_dhs_eccbypass; 
    
    // tx_head_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_head_dhs_eccbypass; 
    
    // eth_tail_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_tail_dhs_eccbypass; 
    
    // eth_tail_ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_tail_ecc_disable_det; 
    
    // eth_tail_ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_tail_ecc_disable_cor; 
    
    // eth_head_dhs_eccbypass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_head_dhs_eccbypass; 
    
    // eth_head_ecc_disable_det
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_head_ecc_disable_det; 
    
    // eth_head_ecc_disable_cor
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_head_ecc_disable_cor; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_ht_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__addr; 
    
    // syndrome
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__syndrome; 
    
    // correctable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable; 
    
    // uncorrectable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_bist_t::all() const {
    cpp_int ret_val;

    // hbm_read_fifo_done_pass
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__hbm_read_fifo_done_pass; 
    
    // hbm_read_fifo_done_fail
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__hbm_read_fifo_done_fail; 
    
    // hbm_write_fifo_done_pass
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__hbm_write_fifo_done_pass; 
    
    // hbm_write_fifo_done_fail
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__hbm_write_fifo_done_fail; 
    
    // ht_tx_head_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_tx_head_done_pass; 
    
    // ht_tx_head_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_tx_head_done_fail; 
    
    // ht_tx_tail_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_tx_tail_done_pass; 
    
    // ht_tx_tail_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_tx_tail_done_fail; 
    
    // ht_eth_head_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_eth_head_done_pass; 
    
    // ht_eth_head_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_eth_head_done_fail; 
    
    // ht_eth_tail_done_pass
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_eth_tail_done_pass; 
    
    // ht_eth_tail_done_fail
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ht_eth_tail_done_fail; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_threshold_t::all() const {
    cpp_int ret_val;

    // xon
    ret_val = ret_val << 640; ret_val = ret_val  | int_var__xon; 
    
    // xoff
    ret_val = ret_val << 640; ret_val = ret_val  | int_var__xoff; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_payload_t::all() const {
    cpp_int ret_val;

    // mem_sz
    ret_val = ret_val << 736; ret_val = ret_val  | int_var__mem_sz; 
    
    // base
    ret_val = ret_val << 864; ret_val = ret_val  | int_var__base; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::all() const {
    cpp_int ret_val;

    // mem_sz
    ret_val = ret_val << 736; ret_val = ret_val  | int_var__mem_sz; 
    
    // base
    ret_val = ret_val << 864; ret_val = ret_val  | int_var__base; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::all() const {
    cpp_int ret_val;

    // tail_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tail_start; 
    
    // head_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__head_start; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_payload_t::all() const {
    cpp_int ret_val;

    // mem_sz
    ret_val = ret_val << 368; ret_val = ret_val  | int_var__mem_sz; 
    
    // base
    ret_val = ret_val << 432; ret_val = ret_val  | int_var__base; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::all() const {
    cpp_int ret_val;

    // mem_sz
    ret_val = ret_val << 368; ret_val = ret_val  | int_var__mem_sz; 
    
    // base
    ret_val = ret_val << 432; ret_val = ret_val  | int_var__base; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::all() const {
    cpp_int ret_val;

    // tail_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tail_start; 
    
    // head_start
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__head_start; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_t::all() const {
    cpp_int ret_val;

    // eth_ctrl_init_tail_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_ctrl_init_tail_done; 
    
    // eth_ctrl_init_head_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eth_ctrl_init_head_done; 
    
    // tx_ctrl_init_tail_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_ctrl_init_tail_done; 
    
    // tx_ctrl_init_head_done
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__tx_ctrl_init_head_done; 
    
    // xoff_timeout_port
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__xoff_timeout_port; 
    
    // xoff_timeout_iq
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__xoff_timeout_iq; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_0_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_1_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_2_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_3_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_4_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_5_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_6_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_7_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_8_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_9_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_10_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_11_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_12_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_13_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_14_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_15_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_16_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_17_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_18_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_19_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_20_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_21_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_22_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_23_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_24_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_25_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_26_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_27_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_28_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_29_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_30_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_31_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_0_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_1_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_2_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_3_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_4_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_5_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_6_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_7_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_8_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_9_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_10_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_11_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_12_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_13_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_14_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_15_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 23; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::all() const {
    cpp_int ret_val;

    // r2a_bresp
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__r2a_bresp; 
    
    // r2a_bid
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__r2a_bid; 
    
    // pyld_rresp
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__pyld_rresp; 
    
    // pyld_rid
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__pyld_rid; 
    
    // ctrl_rid
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__ctrl_rid; 
    
    // ctrl_rresp
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__ctrl_rresp; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_base_t::all() const {
    cpp_int ret_val;

    // addr
    ret_val = ret_val << 64; ret_val = ret_val  | int_var__addr; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::all() const {
    cpp_int ret_val;

    // dhs_selection
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__dhs_selection; 
    
    // selection
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__selection; 
    
    // strict_priority_bypass_timer
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__strict_priority_bypass_timer; 
    
    // strict_priority
    ret_val = ret_val << 3; ret_val = ret_val  | int_var__strict_priority; 
    
    // enable_wrr
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__enable_wrr; 
    
    // timer
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__timer; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm0_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm0_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm1_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm1_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm2_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm2_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm3_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm3_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm4_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm4_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm5_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm5_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm6_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm6_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm7_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm7_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm8_truncate_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sat_hbm8_ctrl_full_t::all() const {
    cpp_int ret_val;

    // drop
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__drop; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_depth_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 96; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::all() const {
    cpp_int ret_val;

    // depth
    ret_val = ret_val << 48; ret_val = ret_val  | int_var__depth; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_sta_hbm_timestamp_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 48; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_cut_thru_t::all() const {
    cpp_int ret_val;

    // enable
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_parser_snap_t::all() const {
    cpp_int ret_val;

    // ctrl_oui
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__ctrl_oui; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_qdepth_t::all() const {
    cpp_int ret_val;

    // rsvd
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__rsvd; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::all() const {
    cpp_int ret_val;

    // index
    ret_val = ret_val << 5; ret_val = ret_val  | int_var__index; 
    
    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::all() const {
    cpp_int ret_val;

    // index
    ret_val = ret_val << 4; ret_val = ret_val  | int_var__index; 
    
    // valid
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__valid; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_flush_t::all() const {
    cpp_int ret_val;

    // context
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__context; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_flush_t::all() const {
    cpp_int ret_val;

    // context
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__context; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::all() const {
    cpp_int ret_val;

    // gather
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__gather; 
    
    // write
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__write; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::all() const {
    cpp_int ret_val;

    // auto_clear
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__auto_clear; 
    
    // auto_xon
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__auto_xon; 
    
    // enable
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::all() const {
    cpp_int ret_val;

    // xon
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__xon; 
    
    // xoff
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__xoff; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::all() const {
    cpp_int ret_val;

    // counters
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__counters; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::all() const {
    cpp_int ret_val;

    // counters
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__counters; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_rpl_t::all() const {
    cpp_int ret_val;

    // read
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__read; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_pyld_t::all() const {
    cpp_int ret_val;

    // read
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__read; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::all() const {
    cpp_int ret_val;

    // read
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__read; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::all() const {
    cpp_int ret_val;

    // write
    ret_val = ret_val << 32; ret_val = ret_val  | int_var__write; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_cdt_t::all() const {
    cpp_int ret_val;

    #if 88 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 88-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::all() const {
    cpp_int ret_val;

    // quota
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__quota; 
    
    // current_credit
    ret_val = ret_val << 16; ret_val = ret_val  | int_var__current_credit; 
    
    // command
    ret_val = ret_val << 7; ret_val = ret_val  | int_var__command; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_mem_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_mem_entry_t::all() const {
    cpp_int ret_val;

    // rsvd
    ret_val = ret_val << 768; ret_val = ret_val  | int_var__rsvd; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_r2a_t::all() const {
    cpp_int ret_val;

    #if 3 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("all function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 3-1; ii >= 0; ii--) {
         ret_val = ret_val << entry[ii].get_width(); ret_val = ret_val  | entry[ii].all(); 
    }
    #endif
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::all() const {
    cpp_int ret_val;

    // quota
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__quota; 
    
    // current_credit
    ret_val = ret_val << 10; ret_val = ret_val  | int_var__current_credit; 
    
    // command
    ret_val = ret_val << 2; ret_val = ret_val  | int_var__command; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_wb_wm_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 11; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 96; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << entry.get_width(); ret_val = ret_val  | entry.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::all() const {
    cpp_int ret_val;

    // value
    ret_val = ret_val << 48; ret_val = ret_val  | int_var__value; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_intgrp_status_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_rw_reg.get_width(); ret_val = ret_val  | int_rw_reg.all(); 
    ret_val = ret_val << int_enable_rw_reg.get_width(); ret_val = ret_val  | int_enable_rw_reg.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_intreg_status_t::all() const {
    cpp_int ret_val;

    // int_hbm_truncate_no_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_truncate_no_interrupt; 
    
    // int_hbm_drop_threshold_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_threshold_interrupt; 
    
    // int_hbm_drop_ctrl_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_ctrl_interrupt; 
    
    // int_hbm_drop_write_ack_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_write_ack_interrupt; 
    
    // int_hbm_drop_emergency_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_emergency_interrupt; 
    
    // int_hbm_axi_err_rsp_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_axi_err_rsp_interrupt; 
    
    // int_hbm_stop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_stop_interrupt; 
    
    // int_hbm_drop_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_interrupt; 
    
    // int_hbm_pbus_violation_out_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_pbus_violation_out_interrupt; 
    
    // int_hbm_pbus_violation_in_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_pbus_violation_in_interrupt; 
    
    // int_hbm_xoff_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_xoff_interrupt; 
    
    // int_ecc_hbm_ht_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_ht_interrupt; 
    
    // int_ecc_hbm_wb_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_wb_interrupt; 
    
    // int_ecc_hbm_rb_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_rb_interrupt; 
    
    // int_ecc_hbm_mtu_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_mtu_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::all() const {
    cpp_int ret_val;

    // int_hbm_truncate_no_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_truncate_no_enable; 
    
    // int_hbm_drop_threshold_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_threshold_enable; 
    
    // int_hbm_drop_ctrl_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_ctrl_enable; 
    
    // int_hbm_drop_write_ack_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_write_ack_enable; 
    
    // int_hbm_drop_emergency_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_emergency_enable; 
    
    // int_hbm_axi_err_rsp_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_axi_err_rsp_enable; 
    
    // int_hbm_stop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_stop_enable; 
    
    // int_hbm_drop_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_drop_enable; 
    
    // int_hbm_pbus_violation_out_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_pbus_violation_out_enable; 
    
    // int_hbm_pbus_violation_in_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_pbus_violation_in_enable; 
    
    // int_hbm_xoff_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_hbm_xoff_enable; 
    
    // int_ecc_hbm_ht_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_ht_enable; 
    
    // int_ecc_hbm_wb_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_wb_enable; 
    
    // int_ecc_hbm_rb_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_rb_enable; 
    
    // int_ecc_hbm_mtu_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__int_ecc_hbm_mtu_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_mtu_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::all() const {
    cpp_int ret_val;

    // correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable_interrupt; 
    
    // uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__correctable_enable; 
    
    // uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__uncorrectable_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::all() const {
    cpp_int ret_val;

    // cdt_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_correctable_interrupt; 
    
    // cdt_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_uncorrectable_interrupt; 
    
    // rb_correctable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_correctable_interrupt; 
    
    // rb_uncorrectable_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_uncorrectable_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // cdt_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_correctable_enable; 
    
    // cdt_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__cdt_uncorrectable_enable; 
    
    // rb_correctable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_correctable_enable; 
    
    // rb_uncorrectable_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__rb_uncorrectable_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::all() const {
    cpp_int ret_val;

    // timeout_31_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_31_interrupt; 
    
    // timeout_30_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_30_interrupt; 
    
    // timeout_29_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_29_interrupt; 
    
    // timeout_28_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_28_interrupt; 
    
    // timeout_27_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_27_interrupt; 
    
    // timeout_26_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_26_interrupt; 
    
    // timeout_25_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_25_interrupt; 
    
    // timeout_24_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_24_interrupt; 
    
    // timeout_23_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_23_interrupt; 
    
    // timeout_22_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_22_interrupt; 
    
    // timeout_21_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_21_interrupt; 
    
    // timeout_20_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_20_interrupt; 
    
    // timeout_19_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_19_interrupt; 
    
    // timeout_18_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_18_interrupt; 
    
    // timeout_17_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_17_interrupt; 
    
    // timeout_16_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_16_interrupt; 
    
    // timeout_15_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_15_interrupt; 
    
    // timeout_14_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_14_interrupt; 
    
    // timeout_13_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_13_interrupt; 
    
    // timeout_12_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_12_interrupt; 
    
    // timeout_11_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_11_interrupt; 
    
    // timeout_10_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_10_interrupt; 
    
    // timeout_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_9_interrupt; 
    
    // timeout_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_8_interrupt; 
    
    // timeout_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_7_interrupt; 
    
    // timeout_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_6_interrupt; 
    
    // timeout_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_5_interrupt; 
    
    // timeout_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_4_interrupt; 
    
    // timeout_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_3_interrupt; 
    
    // timeout_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_2_interrupt; 
    
    // timeout_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_1_interrupt; 
    
    // timeout_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // timeout_31_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_31_enable; 
    
    // timeout_30_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_30_enable; 
    
    // timeout_29_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_29_enable; 
    
    // timeout_28_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_28_enable; 
    
    // timeout_27_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_27_enable; 
    
    // timeout_26_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_26_enable; 
    
    // timeout_25_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_25_enable; 
    
    // timeout_24_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_24_enable; 
    
    // timeout_23_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_23_enable; 
    
    // timeout_22_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_22_enable; 
    
    // timeout_21_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_21_enable; 
    
    // timeout_20_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_20_enable; 
    
    // timeout_19_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_19_enable; 
    
    // timeout_18_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_18_enable; 
    
    // timeout_17_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_17_enable; 
    
    // timeout_16_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_16_enable; 
    
    // timeout_15_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_15_enable; 
    
    // timeout_14_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_14_enable; 
    
    // timeout_13_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_13_enable; 
    
    // timeout_12_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_12_enable; 
    
    // timeout_11_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_11_enable; 
    
    // timeout_10_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_10_enable; 
    
    // timeout_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_9_enable; 
    
    // timeout_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_8_enable; 
    
    // timeout_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_7_enable; 
    
    // timeout_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_6_enable; 
    
    // timeout_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_5_enable; 
    
    // timeout_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_4_enable; 
    
    // timeout_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_3_enable; 
    
    // timeout_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_2_enable; 
    
    // timeout_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_1_enable; 
    
    // timeout_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__timeout_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::all() const {
    cpp_int ret_val;

    // eop_eop_in_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_9_interrupt; 
    
    // eop_eop_in_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_8_interrupt; 
    
    // eop_eop_in_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_7_interrupt; 
    
    // eop_eop_in_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_6_interrupt; 
    
    // eop_eop_in_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_5_interrupt; 
    
    // eop_eop_in_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_4_interrupt; 
    
    // eop_eop_in_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_3_interrupt; 
    
    // eop_eop_in_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_2_interrupt; 
    
    // eop_eop_in_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_1_interrupt; 
    
    // eop_eop_in_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_0_interrupt; 
    
    // sop_sop_in_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_9_interrupt; 
    
    // sop_sop_in_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_8_interrupt; 
    
    // sop_sop_in_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_7_interrupt; 
    
    // sop_sop_in_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_6_interrupt; 
    
    // sop_sop_in_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_5_interrupt; 
    
    // sop_sop_in_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_4_interrupt; 
    
    // sop_sop_in_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_3_interrupt; 
    
    // sop_sop_in_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_2_interrupt; 
    
    // sop_sop_in_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_1_interrupt; 
    
    // sop_sop_in_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // eop_eop_in_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_9_enable; 
    
    // eop_eop_in_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_8_enable; 
    
    // eop_eop_in_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_7_enable; 
    
    // eop_eop_in_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_6_enable; 
    
    // eop_eop_in_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_5_enable; 
    
    // eop_eop_in_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_4_enable; 
    
    // eop_eop_in_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_3_enable; 
    
    // eop_eop_in_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_2_enable; 
    
    // eop_eop_in_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_1_enable; 
    
    // eop_eop_in_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_in_0_enable; 
    
    // sop_sop_in_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_9_enable; 
    
    // sop_sop_in_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_8_enable; 
    
    // sop_sop_in_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_7_enable; 
    
    // sop_sop_in_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_6_enable; 
    
    // sop_sop_in_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_5_enable; 
    
    // sop_sop_in_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_4_enable; 
    
    // sop_sop_in_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_3_enable; 
    
    // sop_sop_in_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_2_enable; 
    
    // sop_sop_in_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_1_enable; 
    
    // sop_sop_in_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_in_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::all() const {
    cpp_int ret_val;

    // eop_eop_out_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_9_interrupt; 
    
    // eop_eop_out_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_8_interrupt; 
    
    // eop_eop_out_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_7_interrupt; 
    
    // eop_eop_out_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_6_interrupt; 
    
    // eop_eop_out_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_5_interrupt; 
    
    // eop_eop_out_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_4_interrupt; 
    
    // eop_eop_out_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_3_interrupt; 
    
    // eop_eop_out_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_2_interrupt; 
    
    // eop_eop_out_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_1_interrupt; 
    
    // eop_eop_out_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_0_interrupt; 
    
    // sop_sop_out_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_9_interrupt; 
    
    // sop_sop_out_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_8_interrupt; 
    
    // sop_sop_out_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_7_interrupt; 
    
    // sop_sop_out_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_6_interrupt; 
    
    // sop_sop_out_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_5_interrupt; 
    
    // sop_sop_out_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_4_interrupt; 
    
    // sop_sop_out_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_3_interrupt; 
    
    // sop_sop_out_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_2_interrupt; 
    
    // sop_sop_out_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_1_interrupt; 
    
    // sop_sop_out_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // eop_eop_out_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_9_enable; 
    
    // eop_eop_out_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_8_enable; 
    
    // eop_eop_out_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_7_enable; 
    
    // eop_eop_out_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_6_enable; 
    
    // eop_eop_out_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_5_enable; 
    
    // eop_eop_out_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_4_enable; 
    
    // eop_eop_out_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_3_enable; 
    
    // eop_eop_out_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_2_enable; 
    
    // eop_eop_out_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_1_enable; 
    
    // eop_eop_out_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__eop_eop_out_0_enable; 
    
    // sop_sop_out_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_9_enable; 
    
    // sop_sop_out_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_8_enable; 
    
    // sop_sop_out_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_7_enable; 
    
    // sop_sop_out_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_6_enable; 
    
    // sop_sop_out_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_5_enable; 
    
    // sop_sop_out_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_4_enable; 
    
    // sop_sop_out_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_3_enable; 
    
    // sop_sop_out_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_2_enable; 
    
    // sop_sop_out_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_1_enable; 
    
    // sop_sop_out_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__sop_sop_out_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::all() const {
    cpp_int ret_val;

    // occupancy_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_8_interrupt; 
    
    // occupancy_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_7_interrupt; 
    
    // occupancy_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_6_interrupt; 
    
    // occupancy_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_5_interrupt; 
    
    // occupancy_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_4_interrupt; 
    
    // occupancy_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_3_interrupt; 
    
    // occupancy_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_2_interrupt; 
    
    // occupancy_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_1_interrupt; 
    
    // occupancy_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // occupancy_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_8_enable; 
    
    // occupancy_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_7_enable; 
    
    // occupancy_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_6_enable; 
    
    // occupancy_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_5_enable; 
    
    // occupancy_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_4_enable; 
    
    // occupancy_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_3_enable; 
    
    // occupancy_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_2_enable; 
    
    // occupancy_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_1_enable; 
    
    // occupancy_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::all() const {
    cpp_int ret_val;

    // r2a_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__r2a_interrupt; 
    
    // pyld_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pyld_interrupt; 
    
    // ctrl_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ctrl_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // r2a_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__r2a_enable; 
    
    // pyld_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__pyld_enable; 
    
    // ctrl_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__ctrl_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::all() const {
    cpp_int ret_val;

    // stop_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_8_interrupt; 
    
    // stop_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_7_interrupt; 
    
    // stop_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_6_interrupt; 
    
    // stop_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_5_interrupt; 
    
    // stop_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_4_interrupt; 
    
    // stop_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_3_interrupt; 
    
    // stop_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_2_interrupt; 
    
    // stop_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_1_interrupt; 
    
    // stop_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // stop_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_8_enable; 
    
    // stop_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_7_enable; 
    
    // stop_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_6_enable; 
    
    // stop_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_5_enable; 
    
    // stop_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_4_enable; 
    
    // stop_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_3_enable; 
    
    // stop_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_2_enable; 
    
    // stop_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_1_enable; 
    
    // stop_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__stop_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::all() const {
    cpp_int ret_val;

    // full_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_8_interrupt; 
    
    // full_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_7_interrupt; 
    
    // full_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_6_interrupt; 
    
    // full_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_5_interrupt; 
    
    // full_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_4_interrupt; 
    
    // full_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_3_interrupt; 
    
    // full_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_2_interrupt; 
    
    // full_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_1_interrupt; 
    
    // full_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_0_interrupt; 
    
    // filling_up_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_8_interrupt; 
    
    // filling_up_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_7_interrupt; 
    
    // filling_up_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_6_interrupt; 
    
    // filling_up_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_5_interrupt; 
    
    // filling_up_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_4_interrupt; 
    
    // filling_up_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_3_interrupt; 
    
    // filling_up_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_2_interrupt; 
    
    // filling_up_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_1_interrupt; 
    
    // filling_up_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // full_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_8_enable; 
    
    // full_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_7_enable; 
    
    // full_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_6_enable; 
    
    // full_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_5_enable; 
    
    // full_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_4_enable; 
    
    // full_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_3_enable; 
    
    // full_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_2_enable; 
    
    // full_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_1_enable; 
    
    // full_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_0_enable; 
    
    // filling_up_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_8_enable; 
    
    // filling_up_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_7_enable; 
    
    // filling_up_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_6_enable; 
    
    // filling_up_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_5_enable; 
    
    // filling_up_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_4_enable; 
    
    // filling_up_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_3_enable; 
    
    // filling_up_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_2_enable; 
    
    // filling_up_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_1_enable; 
    
    // filling_up_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__filling_up_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::all() const {
    cpp_int ret_val;

    // full_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_8_interrupt; 
    
    // full_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_7_interrupt; 
    
    // full_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_6_interrupt; 
    
    // full_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_5_interrupt; 
    
    // full_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_4_interrupt; 
    
    // full_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_3_interrupt; 
    
    // full_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_2_interrupt; 
    
    // full_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_1_interrupt; 
    
    // full_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // full_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_8_enable; 
    
    // full_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_7_enable; 
    
    // full_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_6_enable; 
    
    // full_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_5_enable; 
    
    // full_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_4_enable; 
    
    // full_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_3_enable; 
    
    // full_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_2_enable; 
    
    // full_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_1_enable; 
    
    // full_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__full_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::all() const {
    cpp_int ret_val;

    // crossed_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_8_interrupt; 
    
    // crossed_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_7_interrupt; 
    
    // crossed_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_6_interrupt; 
    
    // crossed_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_5_interrupt; 
    
    // crossed_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_4_interrupt; 
    
    // crossed_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_3_interrupt; 
    
    // crossed_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_2_interrupt; 
    
    // crossed_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_1_interrupt; 
    
    // crossed_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // crossed_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_8_enable; 
    
    // crossed_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_7_enable; 
    
    // crossed_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_6_enable; 
    
    // crossed_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_5_enable; 
    
    // crossed_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_4_enable; 
    
    // crossed_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_3_enable; 
    
    // crossed_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_2_enable; 
    
    // crossed_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_1_enable; 
    
    // crossed_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__crossed_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::all() const {
    cpp_int ret_val;

    // drop_8_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_8_interrupt; 
    
    // drop_7_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_7_interrupt; 
    
    // drop_6_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_6_interrupt; 
    
    // drop_5_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_5_interrupt; 
    
    // drop_4_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_4_interrupt; 
    
    // drop_3_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_3_interrupt; 
    
    // drop_2_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_2_interrupt; 
    
    // drop_1_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_1_interrupt; 
    
    // drop_0_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_0_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // drop_8_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_8_enable; 
    
    // drop_7_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_7_enable; 
    
    // drop_6_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_6_enable; 
    
    // drop_5_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_5_enable; 
    
    // drop_4_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_4_enable; 
    
    // drop_3_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_3_enable; 
    
    // drop_2_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_2_enable; 
    
    // drop_1_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_1_enable; 
    
    // drop_0_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__drop_0_enable; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_stop_t::all() const {
    cpp_int ret_val;

    ret_val = ret_val << int_enable_clear.get_width(); ret_val = ret_val  | int_enable_clear.all(); 
    ret_val = ret_val << int_enable_set.get_width(); ret_val = ret_val  | int_enable_set.all(); 
    ret_val = ret_val << int_test_set.get_width(); ret_val = ret_val  | int_test_set.all(); 
    ret_val = ret_val << intreg.get_width(); ret_val = ret_val  | intreg.all(); 
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_stop_int_test_set_t::all() const {
    cpp_int ret_val;

    // occupancy_9_interrupt
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_9_interrupt; 
    
    return ret_val;
}

cpp_int cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::all() const {
    cpp_int ret_val;

    // occupancy_9_enable
    ret_val = ret_val << 1; ret_val = ret_val  | int_var__occupancy_9_enable; 
    
    return ret_val;
}

void cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::clear() {

    int_var__occupancy_9_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_stop_int_test_set_t::clear() {

    int_var__occupancy_9_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_stop_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::clear() {

    int_var__drop_0_enable = 0; 
    
    int_var__drop_1_enable = 0; 
    
    int_var__drop_2_enable = 0; 
    
    int_var__drop_3_enable = 0; 
    
    int_var__drop_4_enable = 0; 
    
    int_var__drop_5_enable = 0; 
    
    int_var__drop_6_enable = 0; 
    
    int_var__drop_7_enable = 0; 
    
    int_var__drop_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::clear() {

    int_var__drop_0_interrupt = 0; 
    
    int_var__drop_1_interrupt = 0; 
    
    int_var__drop_2_interrupt = 0; 
    
    int_var__drop_3_interrupt = 0; 
    
    int_var__drop_4_interrupt = 0; 
    
    int_var__drop_5_interrupt = 0; 
    
    int_var__drop_6_interrupt = 0; 
    
    int_var__drop_7_interrupt = 0; 
    
    int_var__drop_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_truncate_no_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::clear() {

    int_var__crossed_0_enable = 0; 
    
    int_var__crossed_1_enable = 0; 
    
    int_var__crossed_2_enable = 0; 
    
    int_var__crossed_3_enable = 0; 
    
    int_var__crossed_4_enable = 0; 
    
    int_var__crossed_5_enable = 0; 
    
    int_var__crossed_6_enable = 0; 
    
    int_var__crossed_7_enable = 0; 
    
    int_var__crossed_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::clear() {

    int_var__crossed_0_interrupt = 0; 
    
    int_var__crossed_1_interrupt = 0; 
    
    int_var__crossed_2_interrupt = 0; 
    
    int_var__crossed_3_interrupt = 0; 
    
    int_var__crossed_4_interrupt = 0; 
    
    int_var__crossed_5_interrupt = 0; 
    
    int_var__crossed_6_interrupt = 0; 
    
    int_var__crossed_7_interrupt = 0; 
    
    int_var__crossed_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_threshold_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::clear() {

    int_var__full_0_enable = 0; 
    
    int_var__full_1_enable = 0; 
    
    int_var__full_2_enable = 0; 
    
    int_var__full_3_enable = 0; 
    
    int_var__full_4_enable = 0; 
    
    int_var__full_5_enable = 0; 
    
    int_var__full_6_enable = 0; 
    
    int_var__full_7_enable = 0; 
    
    int_var__full_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::clear() {

    int_var__full_0_interrupt = 0; 
    
    int_var__full_1_interrupt = 0; 
    
    int_var__full_2_interrupt = 0; 
    
    int_var__full_3_interrupt = 0; 
    
    int_var__full_4_interrupt = 0; 
    
    int_var__full_5_interrupt = 0; 
    
    int_var__full_6_interrupt = 0; 
    
    int_var__full_7_interrupt = 0; 
    
    int_var__full_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::clear() {

    int_var__filling_up_0_enable = 0; 
    
    int_var__filling_up_1_enable = 0; 
    
    int_var__filling_up_2_enable = 0; 
    
    int_var__filling_up_3_enable = 0; 
    
    int_var__filling_up_4_enable = 0; 
    
    int_var__filling_up_5_enable = 0; 
    
    int_var__filling_up_6_enable = 0; 
    
    int_var__filling_up_7_enable = 0; 
    
    int_var__filling_up_8_enable = 0; 
    
    int_var__full_0_enable = 0; 
    
    int_var__full_1_enable = 0; 
    
    int_var__full_2_enable = 0; 
    
    int_var__full_3_enable = 0; 
    
    int_var__full_4_enable = 0; 
    
    int_var__full_5_enable = 0; 
    
    int_var__full_6_enable = 0; 
    
    int_var__full_7_enable = 0; 
    
    int_var__full_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::clear() {

    int_var__filling_up_0_interrupt = 0; 
    
    int_var__filling_up_1_interrupt = 0; 
    
    int_var__filling_up_2_interrupt = 0; 
    
    int_var__filling_up_3_interrupt = 0; 
    
    int_var__filling_up_4_interrupt = 0; 
    
    int_var__filling_up_5_interrupt = 0; 
    
    int_var__filling_up_6_interrupt = 0; 
    
    int_var__filling_up_7_interrupt = 0; 
    
    int_var__filling_up_8_interrupt = 0; 
    
    int_var__full_0_interrupt = 0; 
    
    int_var__full_1_interrupt = 0; 
    
    int_var__full_2_interrupt = 0; 
    
    int_var__full_3_interrupt = 0; 
    
    int_var__full_4_interrupt = 0; 
    
    int_var__full_5_interrupt = 0; 
    
    int_var__full_6_interrupt = 0; 
    
    int_var__full_7_interrupt = 0; 
    
    int_var__full_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::clear() {

    int_var__stop_0_enable = 0; 
    
    int_var__stop_1_enable = 0; 
    
    int_var__stop_2_enable = 0; 
    
    int_var__stop_3_enable = 0; 
    
    int_var__stop_4_enable = 0; 
    
    int_var__stop_5_enable = 0; 
    
    int_var__stop_6_enable = 0; 
    
    int_var__stop_7_enable = 0; 
    
    int_var__stop_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::clear() {

    int_var__stop_0_interrupt = 0; 
    
    int_var__stop_1_interrupt = 0; 
    
    int_var__stop_2_interrupt = 0; 
    
    int_var__stop_3_interrupt = 0; 
    
    int_var__stop_4_interrupt = 0; 
    
    int_var__stop_5_interrupt = 0; 
    
    int_var__stop_6_interrupt = 0; 
    
    int_var__stop_7_interrupt = 0; 
    
    int_var__stop_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_emergency_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::clear() {

    int_var__ctrl_enable = 0; 
    
    int_var__pyld_enable = 0; 
    
    int_var__r2a_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::clear() {

    int_var__ctrl_interrupt = 0; 
    
    int_var__pyld_interrupt = 0; 
    
    int_var__r2a_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::clear() {

    int_var__occupancy_0_enable = 0; 
    
    int_var__occupancy_1_enable = 0; 
    
    int_var__occupancy_2_enable = 0; 
    
    int_var__occupancy_3_enable = 0; 
    
    int_var__occupancy_4_enable = 0; 
    
    int_var__occupancy_5_enable = 0; 
    
    int_var__occupancy_6_enable = 0; 
    
    int_var__occupancy_7_enable = 0; 
    
    int_var__occupancy_8_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::clear() {

    int_var__occupancy_0_interrupt = 0; 
    
    int_var__occupancy_1_interrupt = 0; 
    
    int_var__occupancy_2_interrupt = 0; 
    
    int_var__occupancy_3_interrupt = 0; 
    
    int_var__occupancy_4_interrupt = 0; 
    
    int_var__occupancy_5_interrupt = 0; 
    
    int_var__occupancy_6_interrupt = 0; 
    
    int_var__occupancy_7_interrupt = 0; 
    
    int_var__occupancy_8_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_drop_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::clear() {

    int_var__sop_sop_out_0_enable = 0; 
    
    int_var__sop_sop_out_1_enable = 0; 
    
    int_var__sop_sop_out_2_enable = 0; 
    
    int_var__sop_sop_out_3_enable = 0; 
    
    int_var__sop_sop_out_4_enable = 0; 
    
    int_var__sop_sop_out_5_enable = 0; 
    
    int_var__sop_sop_out_6_enable = 0; 
    
    int_var__sop_sop_out_7_enable = 0; 
    
    int_var__sop_sop_out_8_enable = 0; 
    
    int_var__sop_sop_out_9_enable = 0; 
    
    int_var__eop_eop_out_0_enable = 0; 
    
    int_var__eop_eop_out_1_enable = 0; 
    
    int_var__eop_eop_out_2_enable = 0; 
    
    int_var__eop_eop_out_3_enable = 0; 
    
    int_var__eop_eop_out_4_enable = 0; 
    
    int_var__eop_eop_out_5_enable = 0; 
    
    int_var__eop_eop_out_6_enable = 0; 
    
    int_var__eop_eop_out_7_enable = 0; 
    
    int_var__eop_eop_out_8_enable = 0; 
    
    int_var__eop_eop_out_9_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::clear() {

    int_var__sop_sop_out_0_interrupt = 0; 
    
    int_var__sop_sop_out_1_interrupt = 0; 
    
    int_var__sop_sop_out_2_interrupt = 0; 
    
    int_var__sop_sop_out_3_interrupt = 0; 
    
    int_var__sop_sop_out_4_interrupt = 0; 
    
    int_var__sop_sop_out_5_interrupt = 0; 
    
    int_var__sop_sop_out_6_interrupt = 0; 
    
    int_var__sop_sop_out_7_interrupt = 0; 
    
    int_var__sop_sop_out_8_interrupt = 0; 
    
    int_var__sop_sop_out_9_interrupt = 0; 
    
    int_var__eop_eop_out_0_interrupt = 0; 
    
    int_var__eop_eop_out_1_interrupt = 0; 
    
    int_var__eop_eop_out_2_interrupt = 0; 
    
    int_var__eop_eop_out_3_interrupt = 0; 
    
    int_var__eop_eop_out_4_interrupt = 0; 
    
    int_var__eop_eop_out_5_interrupt = 0; 
    
    int_var__eop_eop_out_6_interrupt = 0; 
    
    int_var__eop_eop_out_7_interrupt = 0; 
    
    int_var__eop_eop_out_8_interrupt = 0; 
    
    int_var__eop_eop_out_9_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::clear() {

    int_var__sop_sop_in_0_enable = 0; 
    
    int_var__sop_sop_in_1_enable = 0; 
    
    int_var__sop_sop_in_2_enable = 0; 
    
    int_var__sop_sop_in_3_enable = 0; 
    
    int_var__sop_sop_in_4_enable = 0; 
    
    int_var__sop_sop_in_5_enable = 0; 
    
    int_var__sop_sop_in_6_enable = 0; 
    
    int_var__sop_sop_in_7_enable = 0; 
    
    int_var__sop_sop_in_8_enable = 0; 
    
    int_var__sop_sop_in_9_enable = 0; 
    
    int_var__eop_eop_in_0_enable = 0; 
    
    int_var__eop_eop_in_1_enable = 0; 
    
    int_var__eop_eop_in_2_enable = 0; 
    
    int_var__eop_eop_in_3_enable = 0; 
    
    int_var__eop_eop_in_4_enable = 0; 
    
    int_var__eop_eop_in_5_enable = 0; 
    
    int_var__eop_eop_in_6_enable = 0; 
    
    int_var__eop_eop_in_7_enable = 0; 
    
    int_var__eop_eop_in_8_enable = 0; 
    
    int_var__eop_eop_in_9_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::clear() {

    int_var__sop_sop_in_0_interrupt = 0; 
    
    int_var__sop_sop_in_1_interrupt = 0; 
    
    int_var__sop_sop_in_2_interrupt = 0; 
    
    int_var__sop_sop_in_3_interrupt = 0; 
    
    int_var__sop_sop_in_4_interrupt = 0; 
    
    int_var__sop_sop_in_5_interrupt = 0; 
    
    int_var__sop_sop_in_6_interrupt = 0; 
    
    int_var__sop_sop_in_7_interrupt = 0; 
    
    int_var__sop_sop_in_8_interrupt = 0; 
    
    int_var__sop_sop_in_9_interrupt = 0; 
    
    int_var__eop_eop_in_0_interrupt = 0; 
    
    int_var__eop_eop_in_1_interrupt = 0; 
    
    int_var__eop_eop_in_2_interrupt = 0; 
    
    int_var__eop_eop_in_3_interrupt = 0; 
    
    int_var__eop_eop_in_4_interrupt = 0; 
    
    int_var__eop_eop_in_5_interrupt = 0; 
    
    int_var__eop_eop_in_6_interrupt = 0; 
    
    int_var__eop_eop_in_7_interrupt = 0; 
    
    int_var__eop_eop_in_8_interrupt = 0; 
    
    int_var__eop_eop_in_9_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::clear() {

    int_var__timeout_0_enable = 0; 
    
    int_var__timeout_1_enable = 0; 
    
    int_var__timeout_2_enable = 0; 
    
    int_var__timeout_3_enable = 0; 
    
    int_var__timeout_4_enable = 0; 
    
    int_var__timeout_5_enable = 0; 
    
    int_var__timeout_6_enable = 0; 
    
    int_var__timeout_7_enable = 0; 
    
    int_var__timeout_8_enable = 0; 
    
    int_var__timeout_9_enable = 0; 
    
    int_var__timeout_10_enable = 0; 
    
    int_var__timeout_11_enable = 0; 
    
    int_var__timeout_12_enable = 0; 
    
    int_var__timeout_13_enable = 0; 
    
    int_var__timeout_14_enable = 0; 
    
    int_var__timeout_15_enable = 0; 
    
    int_var__timeout_16_enable = 0; 
    
    int_var__timeout_17_enable = 0; 
    
    int_var__timeout_18_enable = 0; 
    
    int_var__timeout_19_enable = 0; 
    
    int_var__timeout_20_enable = 0; 
    
    int_var__timeout_21_enable = 0; 
    
    int_var__timeout_22_enable = 0; 
    
    int_var__timeout_23_enable = 0; 
    
    int_var__timeout_24_enable = 0; 
    
    int_var__timeout_25_enable = 0; 
    
    int_var__timeout_26_enable = 0; 
    
    int_var__timeout_27_enable = 0; 
    
    int_var__timeout_28_enable = 0; 
    
    int_var__timeout_29_enable = 0; 
    
    int_var__timeout_30_enable = 0; 
    
    int_var__timeout_31_enable = 0; 
    
}

void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::clear() {

    int_var__timeout_0_interrupt = 0; 
    
    int_var__timeout_1_interrupt = 0; 
    
    int_var__timeout_2_interrupt = 0; 
    
    int_var__timeout_3_interrupt = 0; 
    
    int_var__timeout_4_interrupt = 0; 
    
    int_var__timeout_5_interrupt = 0; 
    
    int_var__timeout_6_interrupt = 0; 
    
    int_var__timeout_7_interrupt = 0; 
    
    int_var__timeout_8_interrupt = 0; 
    
    int_var__timeout_9_interrupt = 0; 
    
    int_var__timeout_10_interrupt = 0; 
    
    int_var__timeout_11_interrupt = 0; 
    
    int_var__timeout_12_interrupt = 0; 
    
    int_var__timeout_13_interrupt = 0; 
    
    int_var__timeout_14_interrupt = 0; 
    
    int_var__timeout_15_interrupt = 0; 
    
    int_var__timeout_16_interrupt = 0; 
    
    int_var__timeout_17_interrupt = 0; 
    
    int_var__timeout_18_interrupt = 0; 
    
    int_var__timeout_19_interrupt = 0; 
    
    int_var__timeout_20_interrupt = 0; 
    
    int_var__timeout_21_interrupt = 0; 
    
    int_var__timeout_22_interrupt = 0; 
    
    int_var__timeout_23_interrupt = 0; 
    
    int_var__timeout_24_interrupt = 0; 
    
    int_var__timeout_25_interrupt = 0; 
    
    int_var__timeout_26_interrupt = 0; 
    
    int_var__timeout_27_interrupt = 0; 
    
    int_var__timeout_28_interrupt = 0; 
    
    int_var__timeout_29_interrupt = 0; 
    
    int_var__timeout_30_interrupt = 0; 
    
    int_var__timeout_31_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_hbm_xoff_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::clear() {

    int_var__uncorrectable_enable = 0; 
    
    int_var__correctable_enable = 0; 
    
}

void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::clear() {

    int_var__uncorrectable_interrupt = 0; 
    
    int_var__correctable_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_ecc_hbm_mtu_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::clear() {

    int_var__rb_uncorrectable_enable = 0; 
    
    int_var__rb_correctable_enable = 0; 
    
    int_var__cdt_uncorrectable_enable = 0; 
    
    int_var__cdt_correctable_enable = 0; 
    
}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::clear() {

    int_var__rb_uncorrectable_interrupt = 0; 
    
    int_var__rb_correctable_interrupt = 0; 
    
    int_var__cdt_uncorrectable_interrupt = 0; 
    
    int_var__cdt_correctable_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_ecc_hbm_rb_t::clear() {

    intreg.clear();
    int_test_set.clear();
    int_enable_set.clear();
    int_enable_clear.clear();
}

void cap_pbchbm_csr_intreg_status_t::clear() {

    int_var__int_ecc_hbm_mtu_interrupt = 0; 
    
    int_var__int_ecc_hbm_rb_interrupt = 0; 
    
    int_var__int_ecc_hbm_wb_interrupt = 0; 
    
    int_var__int_ecc_hbm_ht_interrupt = 0; 
    
    int_var__int_hbm_xoff_interrupt = 0; 
    
    int_var__int_hbm_pbus_violation_in_interrupt = 0; 
    
    int_var__int_hbm_pbus_violation_out_interrupt = 0; 
    
    int_var__int_hbm_drop_interrupt = 0; 
    
    int_var__int_hbm_stop_interrupt = 0; 
    
    int_var__int_hbm_axi_err_rsp_interrupt = 0; 
    
    int_var__int_hbm_drop_emergency_interrupt = 0; 
    
    int_var__int_hbm_drop_write_ack_interrupt = 0; 
    
    int_var__int_hbm_drop_ctrl_interrupt = 0; 
    
    int_var__int_hbm_drop_threshold_interrupt = 0; 
    
    int_var__int_hbm_truncate_no_interrupt = 0; 
    
}

void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::clear() {

    int_var__int_ecc_hbm_mtu_enable = 0; 
    
    int_var__int_ecc_hbm_rb_enable = 0; 
    
    int_var__int_ecc_hbm_wb_enable = 0; 
    
    int_var__int_ecc_hbm_ht_enable = 0; 
    
    int_var__int_hbm_xoff_enable = 0; 
    
    int_var__int_hbm_pbus_violation_in_enable = 0; 
    
    int_var__int_hbm_pbus_violation_out_enable = 0; 
    
    int_var__int_hbm_drop_enable = 0; 
    
    int_var__int_hbm_stop_enable = 0; 
    
    int_var__int_hbm_axi_err_rsp_enable = 0; 
    
    int_var__int_hbm_drop_emergency_enable = 0; 
    
    int_var__int_hbm_drop_write_ack_enable = 0; 
    
    int_var__int_hbm_drop_ctrl_enable = 0; 
    
    int_var__int_hbm_drop_threshold_enable = 0; 
    
    int_var__int_hbm_truncate_no_enable = 0; 
    
}

void cap_pbchbm_csr_intgrp_status_t::clear() {

    intreg.clear();
    int_enable_rw_reg.clear();
    int_rw_reg.clear();
}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::clear() {

    int_var__value = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::clear() {

    entry.clear();
}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::clear() {

    int_var__value = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::clear() {

    entry.clear();
}

void cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::clear() {

    int_var__value = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_wb_wm_t::clear() {

    entry.clear();
}

void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::clear() {

    int_var__command = 0; 
    
    int_var__current_credit = 0; 
    
    int_var__quota = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_r2a_t::clear() {

    #if 3 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 3; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pbchbm_csr_dhs_hbm_mem_entry_t::clear() {

    int_var__rsvd = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_mem_t::clear() {

    entry.clear();
}

void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::clear() {

    int_var__command = 0; 
    
    int_var__current_credit = 0; 
    
    int_var__quota = 0; 
    
}

void cap_pbchbm_csr_dhs_hbm_cdt_t::clear() {

    #if 88 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    PLOG_ERR("clear function for large_array not implemented" << endl);
    #else
    // entry
    for(int ii = 0; ii < 88; ii++) {
        entry[ii].clear();
    }
    #endif
    
}

void cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::clear() {

    int_var__write = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::clear() {

    int_var__read = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm_axi_pyld_t::clear() {

    int_var__read = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm_axi_rpl_t::clear() {

    int_var__read = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::clear() {

    int_var__counters = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::clear() {

    int_var__counters = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::clear() {

    int_var__xoff = 0; 
    
    int_var__xon = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::clear() {

    int_var__enable = 0; 
    
    int_var__auto_xon = 0; 
    
    int_var__auto_clear = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::clear() {

    int_var__write = 0; 
    
    int_var__gather = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_flush_t::clear() {

    int_var__context = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_flush_t::clear() {

    int_var__context = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::clear() {

    int_var__valid = 0; 
    
    int_var__index = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::clear() {

    int_var__valid = 0; 
    
    int_var__index = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_qdepth_t::clear() {

    int_var__rsvd = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_parser_snap_t::clear() {

    int_var__ctrl_oui = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_cut_thru_t::clear() {

    int_var__enable = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_timestamp_t::clear() {

    int_var__value = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_wb_depth_t::clear() {

    int_var__value = 0; 
    
}

void cap_pbchbm_csr_sat_hbm8_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm8_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm7_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm7_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm6_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm6_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm5_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm5_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm4_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm4_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm3_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm3_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm2_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm2_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm1_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm1_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_sat_hbm0_ctrl_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm0_truncate_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::clear() {

    int_var__drop = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_r2a_t::clear() {

    int_var__timer = 0; 
    
    int_var__enable_wrr = 0; 
    
    int_var__strict_priority = 0; 
    
    int_var__strict_priority_bypass_timer = 0; 
    
    int_var__selection = 0; 
    
    int_var__dhs_selection = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_axi_base_t::clear() {

    int_var__addr = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_axi_t::clear() {

    int_var__ctrl_rresp = 0; 
    
    int_var__ctrl_rid = 0; 
    
    int_var__pyld_rid = 0; 
    
    int_var__pyld_rresp = 0; 
    
    int_var__r2a_bid = 0; 
    
    int_var__r2a_bresp = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_15_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_14_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_13_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_12_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_11_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_10_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_9_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_8_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_7_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_6_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_5_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_4_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_3_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_2_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_1_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_tx_context_0_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_31_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_30_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_29_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_28_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_27_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_26_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_25_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_24_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_23_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_22_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_21_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_20_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_19_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_18_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_17_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_16_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_15_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_14_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_13_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_12_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_11_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_10_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_9_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_8_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_7_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_6_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_5_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_4_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_3_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_2_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_1_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_eth_context_0_t::clear() {

    int_var__depth = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_t::clear() {

    int_var__xoff_timeout_iq = 0; 
    
    int_var__xoff_timeout_port = 0; 
    
    int_var__tx_ctrl_init_head_done = 0; 
    
    int_var__tx_ctrl_init_tail_done = 0; 
    
    int_var__eth_ctrl_init_head_done = 0; 
    
    int_var__eth_ctrl_init_tail_done = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::clear() {

    int_var__head_start = 0; 
    
    int_var__tail_start = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::clear() {

    int_var__base = 0; 
    
    int_var__mem_sz = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_tx_payload_t::clear() {

    int_var__base = 0; 
    
    int_var__mem_sz = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::clear() {

    int_var__head_start = 0; 
    
    int_var__tail_start = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::clear() {

    int_var__base = 0; 
    
    int_var__mem_sz = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_eth_payload_t::clear() {

    int_var__base = 0; 
    
    int_var__mem_sz = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_threshold_t::clear() {

    int_var__xoff = 0; 
    
    int_var__xon = 0; 
    
}

void cap_pbchbm_csr_sta_bist_t::clear() {

    int_var__ht_eth_tail_done_fail = 0; 
    
    int_var__ht_eth_tail_done_pass = 0; 
    
    int_var__ht_eth_head_done_fail = 0; 
    
    int_var__ht_eth_head_done_pass = 0; 
    
    int_var__ht_tx_tail_done_fail = 0; 
    
    int_var__ht_tx_tail_done_pass = 0; 
    
    int_var__ht_tx_head_done_fail = 0; 
    
    int_var__ht_tx_head_done_pass = 0; 
    
    int_var__hbm_write_fifo_done_fail = 0; 
    
    int_var__hbm_write_fifo_done_pass = 0; 
    
    int_var__hbm_read_fifo_done_fail = 0; 
    
    int_var__hbm_read_fifo_done_pass = 0; 
    
}

void cap_pbchbm_csr_sta_ecc_hbm_ht_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_ht_t::clear() {

    int_var__eth_head_ecc_disable_cor = 0; 
    
    int_var__eth_head_ecc_disable_det = 0; 
    
    int_var__eth_head_dhs_eccbypass = 0; 
    
    int_var__eth_tail_ecc_disable_cor = 0; 
    
    int_var__eth_tail_ecc_disable_det = 0; 
    
    int_var__eth_tail_dhs_eccbypass = 0; 
    
    int_var__tx_head_dhs_eccbypass = 0; 
    
    int_var__tx_tail_dhs_eccbypass = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::clear() {

    int_var__cache = 0; 
    
    int_var__prot = 0; 
    
    int_var__qos = 0; 
    
    int_var__lock = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::clear() {

    int_var__cache = 0; 
    
    int_var__prot = 0; 
    
    int_var__qos = 0; 
    
    int_var__lock = 0; 
    
    int_var__rpl_cache = 0; 
    
    int_var__rpl_prot = 0; 
    
    int_var__rpl_qos = 0; 
    
    int_var__rpl_lock = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_wb_t::clear() {

    int_var__ecc_correctable = 0; 
    
    int_var__ecc_uncorrectable = 0; 
    
    int_var__ecc_syndrome = 0; 
    
    int_var__ecc_addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
}

void cap_pbchbm_csr_sta_hbm_rb_t::clear() {

    int_var__init_done = 0; 
    
    int_var__cdt_ecc_correctable = 0; 
    
    int_var__cdt_ecc_uncorrectable = 0; 
    
    int_var__rb_ecc_correctable = 0; 
    
    int_var__rb_ecc_uncorrectable = 0; 
    
    int_var__rb_ecc_syndrome = 0; 
    
    int_var__rb_ecc_addr = 0; 
    
    int_var__cdt_ecc_syndrome = 0; 
    
    int_var__cdt_ecc_addr = 0; 
    
    int_var__bist_done_fail = 0; 
    
    int_var__bist_done_pass = 0; 
    
    int_var__hct_init_done = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_wb_drop_t::clear() {

    int_var__threshold = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_wb_t::clear() {

    int_var__xoff_threshold = 0; 
    
    int_var__xon_threshold = 0; 
    
    int_var__ack_fifo_xoff_threshold = 0; 
    
    int_var__ack_fifo_xon_threshold = 0; 
    
    int_var__ecc_disable_det = 0; 
    
    int_var__ecc_disable_cor = 0; 
    
    int_var__dhs_eccbypass = 0; 
    
    int_var__bist_run = 0; 
    
    int_var__addr_swizzle = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_xoff_t::clear() {

    int_var__timeout = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_t::clear() {

    int_var__dhs_mem_address = 0; 
    
    int_var__mtu_dhs_selection = 0; 
    
    int_var__debug_port_enable = 0; 
    
    int_var__debug_port_select = 0; 
    
    int_var__bist_run_tx_head = 0; 
    
    int_var__bist_run_tx_tail = 0; 
    
    int_var__bist_run_eth_head = 0; 
    
    int_var__bist_run_eth_tail = 0; 
    
    int_var__control_sw_reset = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_spare_t::clear() {

    int_var__data = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_rb_t::clear() {

    int_var__mem_ecc_disable_cor = 0; 
    
    int_var__mem_ecc_disable_det = 0; 
    
    int_var__mem_dhs_eccbypass = 0; 
    
    int_var__enable_wrr = 0; 
    
    int_var__cdt_dhs_selection = 0; 
    
    int_var__hct_dhs_eccbypass = 0; 
    
    int_var__ecc_hct_disable_cor = 0; 
    
    int_var__ecc_hct_disable_det = 0; 
    
    int_var__bist_run = 0; 
    
    int_var__hct_init_start = 0; 
    
    int_var__addr_swizzle = 0; 
    
    int_var__max_arlen = 0; 
    
}

void cap_pbchbm_csr_cfg_hbm_cdt_t::clear() {

    int_var__cfg_hbm_cdt = 0; 
    
}

void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::clear() {

    int_var__uncorrectable = 0; 
    
    int_var__correctable = 0; 
    
    int_var__syndrome = 0; 
    
    int_var__addr = 0; 
    
}

void cap_pbchbm_csr_csr_intr_t::clear() {

    int_var__dowstream = 0; 
    
    int_var__dowstream_enable = 0; 
    
}

void cap_pbchbm_csr_t::clear() {

    csr_intr.clear();
    sta_ecc_hbm_mtu.clear();
    cfg_hbm_cdt.clear();
    cfg_hbm_rb.clear();
    cfg_hbm_spare.clear();
    cfg_hbm.clear();
    cfg_hbm_xoff.clear();
    cfg_hbm_wb.clear();
    cfg_hbm_wb_drop.clear();
    sta_hbm_rb.clear();
    sta_hbm_wb.clear();
    cfg_hbm_axi_read_attr.clear();
    cfg_hbm_axi_write_attr.clear();
    cfg_hbm_ht.clear();
    sta_ecc_hbm_ht.clear();
    sta_bist.clear();
    cfg_hbm_threshold.clear();
    cfg_hbm_eth_payload.clear();
    cfg_hbm_eth_ctrl.clear();
    cfg_hbm_eth_ctrl_init.clear();
    cfg_hbm_tx_payload.clear();
    cfg_hbm_tx_ctrl.clear();
    cfg_hbm_tx_ctrl_init.clear();
    sta_hbm.clear();
    sta_hbm_eth_context_0.clear();
    sta_hbm_eth_context_1.clear();
    sta_hbm_eth_context_2.clear();
    sta_hbm_eth_context_3.clear();
    sta_hbm_eth_context_4.clear();
    sta_hbm_eth_context_5.clear();
    sta_hbm_eth_context_6.clear();
    sta_hbm_eth_context_7.clear();
    sta_hbm_eth_context_8.clear();
    sta_hbm_eth_context_9.clear();
    sta_hbm_eth_context_10.clear();
    sta_hbm_eth_context_11.clear();
    sta_hbm_eth_context_12.clear();
    sta_hbm_eth_context_13.clear();
    sta_hbm_eth_context_14.clear();
    sta_hbm_eth_context_15.clear();
    sta_hbm_eth_context_16.clear();
    sta_hbm_eth_context_17.clear();
    sta_hbm_eth_context_18.clear();
    sta_hbm_eth_context_19.clear();
    sta_hbm_eth_context_20.clear();
    sta_hbm_eth_context_21.clear();
    sta_hbm_eth_context_22.clear();
    sta_hbm_eth_context_23.clear();
    sta_hbm_eth_context_24.clear();
    sta_hbm_eth_context_25.clear();
    sta_hbm_eth_context_26.clear();
    sta_hbm_eth_context_27.clear();
    sta_hbm_eth_context_28.clear();
    sta_hbm_eth_context_29.clear();
    sta_hbm_eth_context_30.clear();
    sta_hbm_eth_context_31.clear();
    sta_hbm_tx_context_0.clear();
    sta_hbm_tx_context_1.clear();
    sta_hbm_tx_context_2.clear();
    sta_hbm_tx_context_3.clear();
    sta_hbm_tx_context_4.clear();
    sta_hbm_tx_context_5.clear();
    sta_hbm_tx_context_6.clear();
    sta_hbm_tx_context_7.clear();
    sta_hbm_tx_context_8.clear();
    sta_hbm_tx_context_9.clear();
    sta_hbm_tx_context_10.clear();
    sta_hbm_tx_context_11.clear();
    sta_hbm_tx_context_12.clear();
    sta_hbm_tx_context_13.clear();
    sta_hbm_tx_context_14.clear();
    sta_hbm_tx_context_15.clear();
    sta_hbm_axi.clear();
    cfg_hbm_axi_base.clear();
    cfg_hbm_r2a.clear();
    cnt_hbm0_emergency_stop.clear();
    cnt_hbm0_write_ack_filling_up.clear();
    cnt_hbm0_write_ack_full.clear();
    cnt_hbm0_truncate.clear();
    sat_hbm0_ctrl_full.clear();
    cnt_hbm1_emergency_stop.clear();
    cnt_hbm1_write_ack_filling_up.clear();
    cnt_hbm1_write_ack_full.clear();
    cnt_hbm1_truncate.clear();
    sat_hbm1_ctrl_full.clear();
    cnt_hbm2_emergency_stop.clear();
    cnt_hbm2_write_ack_filling_up.clear();
    cnt_hbm2_write_ack_full.clear();
    cnt_hbm2_truncate.clear();
    sat_hbm2_ctrl_full.clear();
    cnt_hbm3_emergency_stop.clear();
    cnt_hbm3_write_ack_filling_up.clear();
    cnt_hbm3_write_ack_full.clear();
    cnt_hbm3_truncate.clear();
    sat_hbm3_ctrl_full.clear();
    cnt_hbm4_emergency_stop.clear();
    cnt_hbm4_write_ack_filling_up.clear();
    cnt_hbm4_write_ack_full.clear();
    cnt_hbm4_truncate.clear();
    sat_hbm4_ctrl_full.clear();
    cnt_hbm5_emergency_stop.clear();
    cnt_hbm5_write_ack_filling_up.clear();
    cnt_hbm5_write_ack_full.clear();
    cnt_hbm5_truncate.clear();
    sat_hbm5_ctrl_full.clear();
    cnt_hbm6_emergency_stop.clear();
    cnt_hbm6_write_ack_filling_up.clear();
    cnt_hbm6_write_ack_full.clear();
    cnt_hbm6_truncate.clear();
    sat_hbm6_ctrl_full.clear();
    cnt_hbm7_emergency_stop.clear();
    cnt_hbm7_write_ack_filling_up.clear();
    cnt_hbm7_write_ack_full.clear();
    cnt_hbm7_truncate.clear();
    sat_hbm7_ctrl_full.clear();
    cnt_hbm8_emergency_stop.clear();
    cnt_hbm8_write_ack_filling_up.clear();
    cnt_hbm8_write_ack_full.clear();
    cnt_hbm8_truncate.clear();
    sat_hbm8_ctrl_full.clear();
    sta_hbm_wb_depth.clear();
    sta_hbm_eth_pend_acks.clear();
    sta_hbm_tx_pend_acks.clear();
    sta_hbm_timestamp.clear();
    cfg_hbm_cut_thru.clear();
    cfg_hbm_parser_snap.clear();
    cfg_hbm_qdepth.clear();
    cfg_hbm_eth_reset_context.clear();
    cfg_hbm_tx_reset_context.clear();
    cfg_hbm_eth_flush.clear();
    cfg_hbm_tx_flush.clear();
    cfg_hbm_wb_duty_cycle.clear();
    cfg_hbm_eth_xoff_timeout.clear();
    cfg_hbm_eth_xoff_force.clear();
    cfg_hbm_eth_clear_context.clear();
    cfg_hbm_tx_clear_context.clear();
    cnt_hbm_axi_rpl.clear();
    cnt_hbm_axi_pyld.clear();
    cnt_hbm_axi_ctrl.clear();
    cnt_hbm_axi_timestamp.clear();
    dhs_hbm_cdt.clear();
    dhs_hbm_mem.clear();
    dhs_hbm_r2a.clear();
    dhs_hbm_wb_wm.clear();
    dhs_hbm_eth_pend_acks_wm.clear();
    dhs_hbm_tx_pend_acks_wm.clear();
    hbm_port_0.clear();
    hbm_port_1.clear();
    hbm_port_2.clear();
    hbm_port_3.clear();
    hbm_port_4.clear();
    hbm_port_5.clear();
    hbm_port_6.clear();
    hbm_port_7.clear();
    hbm_port_8.clear();
    hbm_port_9.clear();
    int_groups.clear();
    int_ecc_hbm_mtu.clear();
    int_ecc_hbm_rb.clear();
    int_ecc_hbm_wb.clear();
    int_ecc_hbm_ht.clear();
    int_hbm_xoff.clear();
    int_hbm_pbus_violation_in.clear();
    int_hbm_pbus_violation_out.clear();
    int_hbm_drop.clear();
    int_hbm_axi_err_rsp.clear();
    int_hbm_drop_emergency.clear();
    int_hbm_drop_write_ack.clear();
    int_hbm_drop_ctrl.clear();
    int_hbm_drop_threshold.clear();
    int_hbm_truncate_no.clear();
    int_hbm_stop.clear();
}

void cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_stop_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_stop_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_truncate_no_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_threshold_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_ctrl_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_write_ack_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_emergency_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_axi_err_rsp_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_drop_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_pbus_violation_out_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_pbus_violation_in_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_hbm_xoff_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::init() {

}

void cap_pbchbm_csr_int_ecc_hbm_mtu_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::init() {

}

void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::init() {

}

void cap_pbchbm_csr_int_ecc_hbm_rb_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_test_set.set_attributes(this,"int_test_set", 0x4 );
    int_enable_set.set_attributes(this,"int_enable_set", 0x8 );
    int_enable_clear.set_attributes(this,"int_enable_clear", 0xc );
}

void cap_pbchbm_csr_intreg_status_t::init() {

}

void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::init() {

}

void cap_pbchbm_csr_intgrp_status_t::init() {

    intreg.set_attributes(this,"intreg", 0x0 );
    int_enable_rw_reg.set_attributes(this,"int_enable_rw_reg", 0x4 );
    int_rw_reg.set_attributes(this,"int_rw_reg", 0x8 );
}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_wb_wm_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_r2a_t::init() {

    #if 3 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 3; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pbchbm_csr_dhs_hbm_mem_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_mem_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::init() {

}

void cap_pbchbm_csr_dhs_hbm_cdt_t::init() {

    #if 88 > CAP_CSR_LARGE_ARRAY_THRESHOLD
    entry.set_attributes(this, "entry", 0x0);
    #else
    for(int ii = 0; ii < 88; ii++) {
        if(ii != 0) entry[ii].set_field_init_done(true, true);
        entry[ii].set_attributes(this,"entry["+to_string(ii)+"]",  0x0 + (entry[ii].get_byte_size()*ii));
    }
    #endif
    
}

void cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::init() {

}

void cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::init() {

}

void cap_pbchbm_csr_cnt_hbm_axi_pyld_t::init() {

}

void cap_pbchbm_csr_cnt_hbm_axi_rpl_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_flush_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_flush_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_qdepth_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_parser_snap_t::init() {

    set_reset_val(cpp_int("0x3000000"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_cut_thru_t::init() {

    set_reset_val(cpp_int("0x3ff"));
    all(get_reset_val());
}

void cap_pbchbm_csr_sta_hbm_timestamp_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::init() {

}

void cap_pbchbm_csr_sta_hbm_wb_depth_t::init() {

}

void cap_pbchbm_csr_sat_hbm8_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm8_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm7_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm7_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm6_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm6_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm5_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm5_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm4_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm4_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm3_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm3_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm2_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm2_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm1_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm1_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::init() {

}

void cap_pbchbm_csr_sat_hbm0_ctrl_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm0_truncate_t::init() {

}

void cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::init() {

}

void cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::init() {

}

void cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_r2a_t::init() {

    set_reset_val(cpp_int("0x3ff00000000"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_axi_base_t::init() {

}

void cap_pbchbm_csr_sta_hbm_axi_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_15_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_14_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_13_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_12_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_11_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_10_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_9_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_8_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_7_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_6_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_5_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_4_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_3_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_2_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_1_t::init() {

}

void cap_pbchbm_csr_sta_hbm_tx_context_0_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_31_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_30_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_29_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_28_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_27_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_26_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_25_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_24_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_23_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_22_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_21_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_20_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_19_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_18_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_17_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_16_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_15_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_14_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_13_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_12_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_11_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_10_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_9_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_8_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_7_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_6_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_5_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_4_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_3_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_2_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_1_t::init() {

}

void cap_pbchbm_csr_sta_hbm_eth_context_0_t::init() {

}

void cap_pbchbm_csr_sta_hbm_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_tx_payload_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_eth_payload_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_threshold_t::init() {

}

void cap_pbchbm_csr_sta_bist_t::init() {

}

void cap_pbchbm_csr_sta_ecc_hbm_ht_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_ht_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::init() {

    set_reset_val(cpp_int("0x20"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::init() {

    set_reset_val(cpp_int("0x20020"));
    all(get_reset_val());
}

void cap_pbchbm_csr_sta_hbm_wb_t::init() {

}

void cap_pbchbm_csr_sta_hbm_rb_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_wb_drop_t::init() {

    set_reset_val(cpp_int("0x3e0"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_wb_t::init() {

    set_reset_val(cpp_int("0x940200"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_xoff_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_spare_t::init() {

}

void cap_pbchbm_csr_cfg_hbm_rb_t::init() {

    set_reset_val(cpp_int("0x3018"));
    all(get_reset_val());
}

void cap_pbchbm_csr_cfg_hbm_cdt_t::init() {

}

void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::init() {

}

void cap_pbchbm_csr_csr_intr_t::init() {

}

void cap_pbchbm_csr_t::init() {

    csr_intr.set_attributes(this,"csr_intr", 0x0 );
    sta_ecc_hbm_mtu.set_attributes(this,"sta_ecc_hbm_mtu", 0x1610 );
    cfg_hbm_cdt.set_attributes(this,"cfg_hbm_cdt", 0x1614 );
    cfg_hbm_rb.set_attributes(this,"cfg_hbm_rb", 0x1618 );
    cfg_hbm_spare.set_attributes(this,"cfg_hbm_spare", 0x161c );
    cfg_hbm.set_attributes(this,"cfg_hbm", 0x1620 );
    cfg_hbm_xoff.set_attributes(this,"cfg_hbm_xoff", 0x1624 );
    cfg_hbm_wb.set_attributes(this,"cfg_hbm_wb", 0x1628 );
    cfg_hbm_wb_drop.set_attributes(this,"cfg_hbm_wb_drop", 0x162c );
    sta_hbm_rb.set_attributes(this,"sta_hbm_rb", 0x1630 );
    sta_hbm_wb.set_attributes(this,"sta_hbm_wb", 0x1c10 );
    cfg_hbm_axi_read_attr.set_attributes(this,"cfg_hbm_axi_read_attr", 0x1d00 );
    cfg_hbm_axi_write_attr.set_attributes(this,"cfg_hbm_axi_write_attr", 0x1d04 );
    cfg_hbm_ht.set_attributes(this,"cfg_hbm_ht", 0x1d08 );
    sta_ecc_hbm_ht.set_attributes(this,"sta_ecc_hbm_ht", 0x1d0c );
    sta_bist.set_attributes(this,"sta_bist", 0x1d10 );
    cfg_hbm_threshold.set_attributes(this,"cfg_hbm_threshold", 0x1e00 );
    cfg_hbm_eth_payload.set_attributes(this,"cfg_hbm_eth_payload", 0x1f00 );
    cfg_hbm_eth_ctrl.set_attributes(this,"cfg_hbm_eth_ctrl", 0x2000 );
    cfg_hbm_eth_ctrl_init.set_attributes(this,"cfg_hbm_eth_ctrl_init", 0x2100 );
    cfg_hbm_tx_payload.set_attributes(this,"cfg_hbm_tx_payload", 0x2180 );
    cfg_hbm_tx_ctrl.set_attributes(this,"cfg_hbm_tx_ctrl", 0x2200 );
    cfg_hbm_tx_ctrl_init.set_attributes(this,"cfg_hbm_tx_ctrl_init", 0x2280 );
    sta_hbm.set_attributes(this,"sta_hbm", 0x2284 );
    sta_hbm_eth_context_0.set_attributes(this,"sta_hbm_eth_context_0", 0x2288 );
    sta_hbm_eth_context_1.set_attributes(this,"sta_hbm_eth_context_1", 0x228c );
    sta_hbm_eth_context_2.set_attributes(this,"sta_hbm_eth_context_2", 0x2290 );
    sta_hbm_eth_context_3.set_attributes(this,"sta_hbm_eth_context_3", 0x2294 );
    sta_hbm_eth_context_4.set_attributes(this,"sta_hbm_eth_context_4", 0x2298 );
    sta_hbm_eth_context_5.set_attributes(this,"sta_hbm_eth_context_5", 0x229c );
    sta_hbm_eth_context_6.set_attributes(this,"sta_hbm_eth_context_6", 0x22a0 );
    sta_hbm_eth_context_7.set_attributes(this,"sta_hbm_eth_context_7", 0x22a4 );
    sta_hbm_eth_context_8.set_attributes(this,"sta_hbm_eth_context_8", 0x22a8 );
    sta_hbm_eth_context_9.set_attributes(this,"sta_hbm_eth_context_9", 0x22ac );
    sta_hbm_eth_context_10.set_attributes(this,"sta_hbm_eth_context_10", 0x22b0 );
    sta_hbm_eth_context_11.set_attributes(this,"sta_hbm_eth_context_11", 0x22b4 );
    sta_hbm_eth_context_12.set_attributes(this,"sta_hbm_eth_context_12", 0x22b8 );
    sta_hbm_eth_context_13.set_attributes(this,"sta_hbm_eth_context_13", 0x22bc );
    sta_hbm_eth_context_14.set_attributes(this,"sta_hbm_eth_context_14", 0x22c0 );
    sta_hbm_eth_context_15.set_attributes(this,"sta_hbm_eth_context_15", 0x22c4 );
    sta_hbm_eth_context_16.set_attributes(this,"sta_hbm_eth_context_16", 0x22c8 );
    sta_hbm_eth_context_17.set_attributes(this,"sta_hbm_eth_context_17", 0x22cc );
    sta_hbm_eth_context_18.set_attributes(this,"sta_hbm_eth_context_18", 0x22d0 );
    sta_hbm_eth_context_19.set_attributes(this,"sta_hbm_eth_context_19", 0x22d4 );
    sta_hbm_eth_context_20.set_attributes(this,"sta_hbm_eth_context_20", 0x22d8 );
    sta_hbm_eth_context_21.set_attributes(this,"sta_hbm_eth_context_21", 0x22dc );
    sta_hbm_eth_context_22.set_attributes(this,"sta_hbm_eth_context_22", 0x22e0 );
    sta_hbm_eth_context_23.set_attributes(this,"sta_hbm_eth_context_23", 0x22e4 );
    sta_hbm_eth_context_24.set_attributes(this,"sta_hbm_eth_context_24", 0x22e8 );
    sta_hbm_eth_context_25.set_attributes(this,"sta_hbm_eth_context_25", 0x22ec );
    sta_hbm_eth_context_26.set_attributes(this,"sta_hbm_eth_context_26", 0x22f0 );
    sta_hbm_eth_context_27.set_attributes(this,"sta_hbm_eth_context_27", 0x22f4 );
    sta_hbm_eth_context_28.set_attributes(this,"sta_hbm_eth_context_28", 0x22f8 );
    sta_hbm_eth_context_29.set_attributes(this,"sta_hbm_eth_context_29", 0x22fc );
    sta_hbm_eth_context_30.set_attributes(this,"sta_hbm_eth_context_30", 0x2300 );
    sta_hbm_eth_context_31.set_attributes(this,"sta_hbm_eth_context_31", 0x2304 );
    sta_hbm_tx_context_0.set_attributes(this,"sta_hbm_tx_context_0", 0x2308 );
    sta_hbm_tx_context_1.set_attributes(this,"sta_hbm_tx_context_1", 0x230c );
    sta_hbm_tx_context_2.set_attributes(this,"sta_hbm_tx_context_2", 0x2310 );
    sta_hbm_tx_context_3.set_attributes(this,"sta_hbm_tx_context_3", 0x2314 );
    sta_hbm_tx_context_4.set_attributes(this,"sta_hbm_tx_context_4", 0x2318 );
    sta_hbm_tx_context_5.set_attributes(this,"sta_hbm_tx_context_5", 0x231c );
    sta_hbm_tx_context_6.set_attributes(this,"sta_hbm_tx_context_6", 0x2320 );
    sta_hbm_tx_context_7.set_attributes(this,"sta_hbm_tx_context_7", 0x2324 );
    sta_hbm_tx_context_8.set_attributes(this,"sta_hbm_tx_context_8", 0x2328 );
    sta_hbm_tx_context_9.set_attributes(this,"sta_hbm_tx_context_9", 0x232c );
    sta_hbm_tx_context_10.set_attributes(this,"sta_hbm_tx_context_10", 0x2330 );
    sta_hbm_tx_context_11.set_attributes(this,"sta_hbm_tx_context_11", 0x2334 );
    sta_hbm_tx_context_12.set_attributes(this,"sta_hbm_tx_context_12", 0x2338 );
    sta_hbm_tx_context_13.set_attributes(this,"sta_hbm_tx_context_13", 0x233c );
    sta_hbm_tx_context_14.set_attributes(this,"sta_hbm_tx_context_14", 0x2340 );
    sta_hbm_tx_context_15.set_attributes(this,"sta_hbm_tx_context_15", 0x2344 );
    sta_hbm_axi.set_attributes(this,"sta_hbm_axi", 0x23b0 );
    cfg_hbm_axi_base.set_attributes(this,"cfg_hbm_axi_base", 0x23b8 );
    cfg_hbm_r2a.set_attributes(this,"cfg_hbm_r2a", 0x23c0 );
    cnt_hbm0_emergency_stop.set_attributes(this,"cnt_hbm0_emergency_stop", 0x23e0 );
    cnt_hbm0_write_ack_filling_up.set_attributes(this,"cnt_hbm0_write_ack_filling_up", 0x23e4 );
    cnt_hbm0_write_ack_full.set_attributes(this,"cnt_hbm0_write_ack_full", 0x23e8 );
    cnt_hbm0_truncate.set_attributes(this,"cnt_hbm0_truncate", 0x23ec );
    sat_hbm0_ctrl_full.set_attributes(this,"sat_hbm0_ctrl_full", 0x23f0 );
    cnt_hbm1_emergency_stop.set_attributes(this,"cnt_hbm1_emergency_stop", 0x23f4 );
    cnt_hbm1_write_ack_filling_up.set_attributes(this,"cnt_hbm1_write_ack_filling_up", 0x23f8 );
    cnt_hbm1_write_ack_full.set_attributes(this,"cnt_hbm1_write_ack_full", 0x23fc );
    cnt_hbm1_truncate.set_attributes(this,"cnt_hbm1_truncate", 0x2400 );
    sat_hbm1_ctrl_full.set_attributes(this,"sat_hbm1_ctrl_full", 0x2404 );
    cnt_hbm2_emergency_stop.set_attributes(this,"cnt_hbm2_emergency_stop", 0x2408 );
    cnt_hbm2_write_ack_filling_up.set_attributes(this,"cnt_hbm2_write_ack_filling_up", 0x240c );
    cnt_hbm2_write_ack_full.set_attributes(this,"cnt_hbm2_write_ack_full", 0x2410 );
    cnt_hbm2_truncate.set_attributes(this,"cnt_hbm2_truncate", 0x2414 );
    sat_hbm2_ctrl_full.set_attributes(this,"sat_hbm2_ctrl_full", 0x2418 );
    cnt_hbm3_emergency_stop.set_attributes(this,"cnt_hbm3_emergency_stop", 0x241c );
    cnt_hbm3_write_ack_filling_up.set_attributes(this,"cnt_hbm3_write_ack_filling_up", 0x2420 );
    cnt_hbm3_write_ack_full.set_attributes(this,"cnt_hbm3_write_ack_full", 0x2424 );
    cnt_hbm3_truncate.set_attributes(this,"cnt_hbm3_truncate", 0x2428 );
    sat_hbm3_ctrl_full.set_attributes(this,"sat_hbm3_ctrl_full", 0x242c );
    cnt_hbm4_emergency_stop.set_attributes(this,"cnt_hbm4_emergency_stop", 0x2430 );
    cnt_hbm4_write_ack_filling_up.set_attributes(this,"cnt_hbm4_write_ack_filling_up", 0x2434 );
    cnt_hbm4_write_ack_full.set_attributes(this,"cnt_hbm4_write_ack_full", 0x2438 );
    cnt_hbm4_truncate.set_attributes(this,"cnt_hbm4_truncate", 0x243c );
    sat_hbm4_ctrl_full.set_attributes(this,"sat_hbm4_ctrl_full", 0x2440 );
    cnt_hbm5_emergency_stop.set_attributes(this,"cnt_hbm5_emergency_stop", 0x2444 );
    cnt_hbm5_write_ack_filling_up.set_attributes(this,"cnt_hbm5_write_ack_filling_up", 0x2448 );
    cnt_hbm5_write_ack_full.set_attributes(this,"cnt_hbm5_write_ack_full", 0x244c );
    cnt_hbm5_truncate.set_attributes(this,"cnt_hbm5_truncate", 0x2450 );
    sat_hbm5_ctrl_full.set_attributes(this,"sat_hbm5_ctrl_full", 0x2454 );
    cnt_hbm6_emergency_stop.set_attributes(this,"cnt_hbm6_emergency_stop", 0x2458 );
    cnt_hbm6_write_ack_filling_up.set_attributes(this,"cnt_hbm6_write_ack_filling_up", 0x245c );
    cnt_hbm6_write_ack_full.set_attributes(this,"cnt_hbm6_write_ack_full", 0x2460 );
    cnt_hbm6_truncate.set_attributes(this,"cnt_hbm6_truncate", 0x2464 );
    sat_hbm6_ctrl_full.set_attributes(this,"sat_hbm6_ctrl_full", 0x2468 );
    cnt_hbm7_emergency_stop.set_attributes(this,"cnt_hbm7_emergency_stop", 0x246c );
    cnt_hbm7_write_ack_filling_up.set_attributes(this,"cnt_hbm7_write_ack_filling_up", 0x2470 );
    cnt_hbm7_write_ack_full.set_attributes(this,"cnt_hbm7_write_ack_full", 0x2474 );
    cnt_hbm7_truncate.set_attributes(this,"cnt_hbm7_truncate", 0x2478 );
    sat_hbm7_ctrl_full.set_attributes(this,"sat_hbm7_ctrl_full", 0x247c );
    cnt_hbm8_emergency_stop.set_attributes(this,"cnt_hbm8_emergency_stop", 0x2480 );
    cnt_hbm8_write_ack_filling_up.set_attributes(this,"cnt_hbm8_write_ack_filling_up", 0x2484 );
    cnt_hbm8_write_ack_full.set_attributes(this,"cnt_hbm8_write_ack_full", 0x2488 );
    cnt_hbm8_truncate.set_attributes(this,"cnt_hbm8_truncate", 0x248c );
    sat_hbm8_ctrl_full.set_attributes(this,"sat_hbm8_ctrl_full", 0x2490 );
    sta_hbm_wb_depth.set_attributes(this,"sta_hbm_wb_depth", 0x24e4 );
    sta_hbm_eth_pend_acks.set_attributes(this,"sta_hbm_eth_pend_acks", 0x24f0 );
    sta_hbm_tx_pend_acks.set_attributes(this,"sta_hbm_tx_pend_acks", 0x2500 );
    sta_hbm_timestamp.set_attributes(this,"sta_hbm_timestamp", 0x2528 );
    cfg_hbm_cut_thru.set_attributes(this,"cfg_hbm_cut_thru", 0x2540 );
    cfg_hbm_parser_snap.set_attributes(this,"cfg_hbm_parser_snap", 0x2544 );
    cfg_hbm_qdepth.set_attributes(this,"cfg_hbm_qdepth", 0x2560 );
    cfg_hbm_eth_reset_context.set_attributes(this,"cfg_hbm_eth_reset_context", 0x2564 );
    cfg_hbm_tx_reset_context.set_attributes(this,"cfg_hbm_tx_reset_context", 0x2568 );
    cfg_hbm_eth_flush.set_attributes(this,"cfg_hbm_eth_flush", 0x256c );
    cfg_hbm_tx_flush.set_attributes(this,"cfg_hbm_tx_flush", 0x2570 );
    cfg_hbm_wb_duty_cycle.set_attributes(this,"cfg_hbm_wb_duty_cycle", 0x2574 );
    cfg_hbm_eth_xoff_timeout.set_attributes(this,"cfg_hbm_eth_xoff_timeout", 0x2580 );
    cfg_hbm_eth_xoff_force.set_attributes(this,"cfg_hbm_eth_xoff_force", 0x2590 );
    cfg_hbm_eth_clear_context.set_attributes(this,"cfg_hbm_eth_clear_context", 0x2598 );
    cfg_hbm_tx_clear_context.set_attributes(this,"cfg_hbm_tx_clear_context", 0x259c );
    cnt_hbm_axi_rpl.set_attributes(this,"cnt_hbm_axi_rpl", 0x25a0 );
    cnt_hbm_axi_pyld.set_attributes(this,"cnt_hbm_axi_pyld", 0x25a4 );
    cnt_hbm_axi_ctrl.set_attributes(this,"cnt_hbm_axi_ctrl", 0x25a8 );
    cnt_hbm_axi_timestamp.set_attributes(this,"cnt_hbm_axi_timestamp", 0x25ac );
    dhs_hbm_cdt.set_attributes(this,"dhs_hbm_cdt", 0x1800 );
    dhs_hbm_mem.set_attributes(this,"dhs_hbm_mem", 0x1c80 );
    dhs_hbm_r2a.set_attributes(this,"dhs_hbm_r2a", 0x23d0 );
    dhs_hbm_wb_wm.set_attributes(this,"dhs_hbm_wb_wm", 0x24e0 );
    dhs_hbm_eth_pend_acks_wm.set_attributes(this,"dhs_hbm_eth_pend_acks_wm", 0x2510 );
    dhs_hbm_tx_pend_acks_wm.set_attributes(this,"dhs_hbm_tx_pend_acks_wm", 0x2520 );
    hbm_port_0.set_attributes(this,"hbm_port_0", 0x200 );
    hbm_port_1.set_attributes(this,"hbm_port_1", 0x400 );
    hbm_port_2.set_attributes(this,"hbm_port_2", 0x600 );
    hbm_port_3.set_attributes(this,"hbm_port_3", 0x800 );
    hbm_port_4.set_attributes(this,"hbm_port_4", 0xa00 );
    hbm_port_5.set_attributes(this,"hbm_port_5", 0xc00 );
    hbm_port_6.set_attributes(this,"hbm_port_6", 0xe00 );
    hbm_port_7.set_attributes(this,"hbm_port_7", 0x1000 );
    hbm_port_8.set_attributes(this,"hbm_port_8", 0x1200 );
    hbm_port_9.set_attributes(this,"hbm_port_9", 0x1400 );
    int_groups.set_attributes(this,"int_groups", 0x10 );
    int_ecc_hbm_mtu.set_attributes(this,"int_ecc_hbm_mtu", 0x1600 );
    int_ecc_hbm_rb.set_attributes(this,"int_ecc_hbm_rb", 0x1640 );
    int_ecc_hbm_wb.set_attributes(this,"int_ecc_hbm_wb", 0x1c00 );
    int_ecc_hbm_ht.set_attributes(this,"int_ecc_hbm_ht", 0x2350 );
    int_hbm_xoff.set_attributes(this,"int_hbm_xoff", 0x2360 );
    int_hbm_pbus_violation_in.set_attributes(this,"int_hbm_pbus_violation_in", 0x2370 );
    int_hbm_pbus_violation_out.set_attributes(this,"int_hbm_pbus_violation_out", 0x2380 );
    int_hbm_drop.set_attributes(this,"int_hbm_drop", 0x2390 );
    int_hbm_axi_err_rsp.set_attributes(this,"int_hbm_axi_err_rsp", 0x23a0 );
    int_hbm_drop_emergency.set_attributes(this,"int_hbm_drop_emergency", 0x24a0 );
    int_hbm_drop_write_ack.set_attributes(this,"int_hbm_drop_write_ack", 0x24b0 );
    int_hbm_drop_ctrl.set_attributes(this,"int_hbm_drop_ctrl", 0x24c0 );
    int_hbm_drop_threshold.set_attributes(this,"int_hbm_drop_threshold", 0x24d0 );
    int_hbm_truncate_no.set_attributes(this,"int_hbm_truncate_no", 0x2530 );
    int_hbm_stop.set_attributes(this,"int_hbm_stop", 0x2550 );
}

void cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::occupancy_9_enable(const cpp_int & _val) { 
    // occupancy_9_enable
    int_var__occupancy_9_enable = _val.convert_to< occupancy_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::occupancy_9_enable() const {
    return int_var__occupancy_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_stop_int_test_set_t::occupancy_9_interrupt(const cpp_int & _val) { 
    // occupancy_9_interrupt
    int_var__occupancy_9_interrupt = _val.convert_to< occupancy_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_stop_int_test_set_t::occupancy_9_interrupt() const {
    return int_var__occupancy_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_0_enable(const cpp_int & _val) { 
    // drop_0_enable
    int_var__drop_0_enable = _val.convert_to< drop_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_0_enable() const {
    return int_var__drop_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_1_enable(const cpp_int & _val) { 
    // drop_1_enable
    int_var__drop_1_enable = _val.convert_to< drop_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_1_enable() const {
    return int_var__drop_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_2_enable(const cpp_int & _val) { 
    // drop_2_enable
    int_var__drop_2_enable = _val.convert_to< drop_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_2_enable() const {
    return int_var__drop_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_3_enable(const cpp_int & _val) { 
    // drop_3_enable
    int_var__drop_3_enable = _val.convert_to< drop_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_3_enable() const {
    return int_var__drop_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_4_enable(const cpp_int & _val) { 
    // drop_4_enable
    int_var__drop_4_enable = _val.convert_to< drop_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_4_enable() const {
    return int_var__drop_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_5_enable(const cpp_int & _val) { 
    // drop_5_enable
    int_var__drop_5_enable = _val.convert_to< drop_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_5_enable() const {
    return int_var__drop_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_6_enable(const cpp_int & _val) { 
    // drop_6_enable
    int_var__drop_6_enable = _val.convert_to< drop_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_6_enable() const {
    return int_var__drop_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_7_enable(const cpp_int & _val) { 
    // drop_7_enable
    int_var__drop_7_enable = _val.convert_to< drop_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_7_enable() const {
    return int_var__drop_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_8_enable(const cpp_int & _val) { 
    // drop_8_enable
    int_var__drop_8_enable = _val.convert_to< drop_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::drop_8_enable() const {
    return int_var__drop_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_0_interrupt(const cpp_int & _val) { 
    // drop_0_interrupt
    int_var__drop_0_interrupt = _val.convert_to< drop_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_0_interrupt() const {
    return int_var__drop_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_1_interrupt(const cpp_int & _val) { 
    // drop_1_interrupt
    int_var__drop_1_interrupt = _val.convert_to< drop_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_1_interrupt() const {
    return int_var__drop_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_2_interrupt(const cpp_int & _val) { 
    // drop_2_interrupt
    int_var__drop_2_interrupt = _val.convert_to< drop_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_2_interrupt() const {
    return int_var__drop_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_3_interrupt(const cpp_int & _val) { 
    // drop_3_interrupt
    int_var__drop_3_interrupt = _val.convert_to< drop_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_3_interrupt() const {
    return int_var__drop_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_4_interrupt(const cpp_int & _val) { 
    // drop_4_interrupt
    int_var__drop_4_interrupt = _val.convert_to< drop_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_4_interrupt() const {
    return int_var__drop_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_5_interrupt(const cpp_int & _val) { 
    // drop_5_interrupt
    int_var__drop_5_interrupt = _val.convert_to< drop_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_5_interrupt() const {
    return int_var__drop_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_6_interrupt(const cpp_int & _val) { 
    // drop_6_interrupt
    int_var__drop_6_interrupt = _val.convert_to< drop_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_6_interrupt() const {
    return int_var__drop_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_7_interrupt(const cpp_int & _val) { 
    // drop_7_interrupt
    int_var__drop_7_interrupt = _val.convert_to< drop_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_7_interrupt() const {
    return int_var__drop_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_8_interrupt(const cpp_int & _val) { 
    // drop_8_interrupt
    int_var__drop_8_interrupt = _val.convert_to< drop_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::drop_8_interrupt() const {
    return int_var__drop_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_0_enable(const cpp_int & _val) { 
    // crossed_0_enable
    int_var__crossed_0_enable = _val.convert_to< crossed_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_0_enable() const {
    return int_var__crossed_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_1_enable(const cpp_int & _val) { 
    // crossed_1_enable
    int_var__crossed_1_enable = _val.convert_to< crossed_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_1_enable() const {
    return int_var__crossed_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_2_enable(const cpp_int & _val) { 
    // crossed_2_enable
    int_var__crossed_2_enable = _val.convert_to< crossed_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_2_enable() const {
    return int_var__crossed_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_3_enable(const cpp_int & _val) { 
    // crossed_3_enable
    int_var__crossed_3_enable = _val.convert_to< crossed_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_3_enable() const {
    return int_var__crossed_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_4_enable(const cpp_int & _val) { 
    // crossed_4_enable
    int_var__crossed_4_enable = _val.convert_to< crossed_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_4_enable() const {
    return int_var__crossed_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_5_enable(const cpp_int & _val) { 
    // crossed_5_enable
    int_var__crossed_5_enable = _val.convert_to< crossed_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_5_enable() const {
    return int_var__crossed_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_6_enable(const cpp_int & _val) { 
    // crossed_6_enable
    int_var__crossed_6_enable = _val.convert_to< crossed_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_6_enable() const {
    return int_var__crossed_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_7_enable(const cpp_int & _val) { 
    // crossed_7_enable
    int_var__crossed_7_enable = _val.convert_to< crossed_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_7_enable() const {
    return int_var__crossed_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_8_enable(const cpp_int & _val) { 
    // crossed_8_enable
    int_var__crossed_8_enable = _val.convert_to< crossed_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::crossed_8_enable() const {
    return int_var__crossed_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_0_interrupt(const cpp_int & _val) { 
    // crossed_0_interrupt
    int_var__crossed_0_interrupt = _val.convert_to< crossed_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_0_interrupt() const {
    return int_var__crossed_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_1_interrupt(const cpp_int & _val) { 
    // crossed_1_interrupt
    int_var__crossed_1_interrupt = _val.convert_to< crossed_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_1_interrupt() const {
    return int_var__crossed_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_2_interrupt(const cpp_int & _val) { 
    // crossed_2_interrupt
    int_var__crossed_2_interrupt = _val.convert_to< crossed_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_2_interrupt() const {
    return int_var__crossed_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_3_interrupt(const cpp_int & _val) { 
    // crossed_3_interrupt
    int_var__crossed_3_interrupt = _val.convert_to< crossed_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_3_interrupt() const {
    return int_var__crossed_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_4_interrupt(const cpp_int & _val) { 
    // crossed_4_interrupt
    int_var__crossed_4_interrupt = _val.convert_to< crossed_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_4_interrupt() const {
    return int_var__crossed_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_5_interrupt(const cpp_int & _val) { 
    // crossed_5_interrupt
    int_var__crossed_5_interrupt = _val.convert_to< crossed_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_5_interrupt() const {
    return int_var__crossed_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_6_interrupt(const cpp_int & _val) { 
    // crossed_6_interrupt
    int_var__crossed_6_interrupt = _val.convert_to< crossed_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_6_interrupt() const {
    return int_var__crossed_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_7_interrupt(const cpp_int & _val) { 
    // crossed_7_interrupt
    int_var__crossed_7_interrupt = _val.convert_to< crossed_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_7_interrupt() const {
    return int_var__crossed_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_8_interrupt(const cpp_int & _val) { 
    // crossed_8_interrupt
    int_var__crossed_8_interrupt = _val.convert_to< crossed_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::crossed_8_interrupt() const {
    return int_var__crossed_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_0_enable(const cpp_int & _val) { 
    // full_0_enable
    int_var__full_0_enable = _val.convert_to< full_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_0_enable() const {
    return int_var__full_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_1_enable(const cpp_int & _val) { 
    // full_1_enable
    int_var__full_1_enable = _val.convert_to< full_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_1_enable() const {
    return int_var__full_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_2_enable(const cpp_int & _val) { 
    // full_2_enable
    int_var__full_2_enable = _val.convert_to< full_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_2_enable() const {
    return int_var__full_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_3_enable(const cpp_int & _val) { 
    // full_3_enable
    int_var__full_3_enable = _val.convert_to< full_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_3_enable() const {
    return int_var__full_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_4_enable(const cpp_int & _val) { 
    // full_4_enable
    int_var__full_4_enable = _val.convert_to< full_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_4_enable() const {
    return int_var__full_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_5_enable(const cpp_int & _val) { 
    // full_5_enable
    int_var__full_5_enable = _val.convert_to< full_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_5_enable() const {
    return int_var__full_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_6_enable(const cpp_int & _val) { 
    // full_6_enable
    int_var__full_6_enable = _val.convert_to< full_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_6_enable() const {
    return int_var__full_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_7_enable(const cpp_int & _val) { 
    // full_7_enable
    int_var__full_7_enable = _val.convert_to< full_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_7_enable() const {
    return int_var__full_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_8_enable(const cpp_int & _val) { 
    // full_8_enable
    int_var__full_8_enable = _val.convert_to< full_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::full_8_enable() const {
    return int_var__full_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_0_interrupt(const cpp_int & _val) { 
    // full_0_interrupt
    int_var__full_0_interrupt = _val.convert_to< full_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_0_interrupt() const {
    return int_var__full_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_1_interrupt(const cpp_int & _val) { 
    // full_1_interrupt
    int_var__full_1_interrupt = _val.convert_to< full_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_1_interrupt() const {
    return int_var__full_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_2_interrupt(const cpp_int & _val) { 
    // full_2_interrupt
    int_var__full_2_interrupt = _val.convert_to< full_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_2_interrupt() const {
    return int_var__full_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_3_interrupt(const cpp_int & _val) { 
    // full_3_interrupt
    int_var__full_3_interrupt = _val.convert_to< full_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_3_interrupt() const {
    return int_var__full_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_4_interrupt(const cpp_int & _val) { 
    // full_4_interrupt
    int_var__full_4_interrupt = _val.convert_to< full_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_4_interrupt() const {
    return int_var__full_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_5_interrupt(const cpp_int & _val) { 
    // full_5_interrupt
    int_var__full_5_interrupt = _val.convert_to< full_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_5_interrupt() const {
    return int_var__full_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_6_interrupt(const cpp_int & _val) { 
    // full_6_interrupt
    int_var__full_6_interrupt = _val.convert_to< full_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_6_interrupt() const {
    return int_var__full_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_7_interrupt(const cpp_int & _val) { 
    // full_7_interrupt
    int_var__full_7_interrupt = _val.convert_to< full_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_7_interrupt() const {
    return int_var__full_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_8_interrupt(const cpp_int & _val) { 
    // full_8_interrupt
    int_var__full_8_interrupt = _val.convert_to< full_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::full_8_interrupt() const {
    return int_var__full_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_0_enable(const cpp_int & _val) { 
    // filling_up_0_enable
    int_var__filling_up_0_enable = _val.convert_to< filling_up_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_0_enable() const {
    return int_var__filling_up_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_1_enable(const cpp_int & _val) { 
    // filling_up_1_enable
    int_var__filling_up_1_enable = _val.convert_to< filling_up_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_1_enable() const {
    return int_var__filling_up_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_2_enable(const cpp_int & _val) { 
    // filling_up_2_enable
    int_var__filling_up_2_enable = _val.convert_to< filling_up_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_2_enable() const {
    return int_var__filling_up_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_3_enable(const cpp_int & _val) { 
    // filling_up_3_enable
    int_var__filling_up_3_enable = _val.convert_to< filling_up_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_3_enable() const {
    return int_var__filling_up_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_4_enable(const cpp_int & _val) { 
    // filling_up_4_enable
    int_var__filling_up_4_enable = _val.convert_to< filling_up_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_4_enable() const {
    return int_var__filling_up_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_5_enable(const cpp_int & _val) { 
    // filling_up_5_enable
    int_var__filling_up_5_enable = _val.convert_to< filling_up_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_5_enable() const {
    return int_var__filling_up_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_6_enable(const cpp_int & _val) { 
    // filling_up_6_enable
    int_var__filling_up_6_enable = _val.convert_to< filling_up_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_6_enable() const {
    return int_var__filling_up_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_7_enable(const cpp_int & _val) { 
    // filling_up_7_enable
    int_var__filling_up_7_enable = _val.convert_to< filling_up_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_7_enable() const {
    return int_var__filling_up_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_8_enable(const cpp_int & _val) { 
    // filling_up_8_enable
    int_var__filling_up_8_enable = _val.convert_to< filling_up_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::filling_up_8_enable() const {
    return int_var__filling_up_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_0_enable(const cpp_int & _val) { 
    // full_0_enable
    int_var__full_0_enable = _val.convert_to< full_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_0_enable() const {
    return int_var__full_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_1_enable(const cpp_int & _val) { 
    // full_1_enable
    int_var__full_1_enable = _val.convert_to< full_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_1_enable() const {
    return int_var__full_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_2_enable(const cpp_int & _val) { 
    // full_2_enable
    int_var__full_2_enable = _val.convert_to< full_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_2_enable() const {
    return int_var__full_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_3_enable(const cpp_int & _val) { 
    // full_3_enable
    int_var__full_3_enable = _val.convert_to< full_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_3_enable() const {
    return int_var__full_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_4_enable(const cpp_int & _val) { 
    // full_4_enable
    int_var__full_4_enable = _val.convert_to< full_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_4_enable() const {
    return int_var__full_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_5_enable(const cpp_int & _val) { 
    // full_5_enable
    int_var__full_5_enable = _val.convert_to< full_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_5_enable() const {
    return int_var__full_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_6_enable(const cpp_int & _val) { 
    // full_6_enable
    int_var__full_6_enable = _val.convert_to< full_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_6_enable() const {
    return int_var__full_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_7_enable(const cpp_int & _val) { 
    // full_7_enable
    int_var__full_7_enable = _val.convert_to< full_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_7_enable() const {
    return int_var__full_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_8_enable(const cpp_int & _val) { 
    // full_8_enable
    int_var__full_8_enable = _val.convert_to< full_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::full_8_enable() const {
    return int_var__full_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_0_interrupt(const cpp_int & _val) { 
    // filling_up_0_interrupt
    int_var__filling_up_0_interrupt = _val.convert_to< filling_up_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_0_interrupt() const {
    return int_var__filling_up_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_1_interrupt(const cpp_int & _val) { 
    // filling_up_1_interrupt
    int_var__filling_up_1_interrupt = _val.convert_to< filling_up_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_1_interrupt() const {
    return int_var__filling_up_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_2_interrupt(const cpp_int & _val) { 
    // filling_up_2_interrupt
    int_var__filling_up_2_interrupt = _val.convert_to< filling_up_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_2_interrupt() const {
    return int_var__filling_up_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_3_interrupt(const cpp_int & _val) { 
    // filling_up_3_interrupt
    int_var__filling_up_3_interrupt = _val.convert_to< filling_up_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_3_interrupt() const {
    return int_var__filling_up_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_4_interrupt(const cpp_int & _val) { 
    // filling_up_4_interrupt
    int_var__filling_up_4_interrupt = _val.convert_to< filling_up_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_4_interrupt() const {
    return int_var__filling_up_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_5_interrupt(const cpp_int & _val) { 
    // filling_up_5_interrupt
    int_var__filling_up_5_interrupt = _val.convert_to< filling_up_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_5_interrupt() const {
    return int_var__filling_up_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_6_interrupt(const cpp_int & _val) { 
    // filling_up_6_interrupt
    int_var__filling_up_6_interrupt = _val.convert_to< filling_up_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_6_interrupt() const {
    return int_var__filling_up_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_7_interrupt(const cpp_int & _val) { 
    // filling_up_7_interrupt
    int_var__filling_up_7_interrupt = _val.convert_to< filling_up_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_7_interrupt() const {
    return int_var__filling_up_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_8_interrupt(const cpp_int & _val) { 
    // filling_up_8_interrupt
    int_var__filling_up_8_interrupt = _val.convert_to< filling_up_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::filling_up_8_interrupt() const {
    return int_var__filling_up_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_0_interrupt(const cpp_int & _val) { 
    // full_0_interrupt
    int_var__full_0_interrupt = _val.convert_to< full_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_0_interrupt() const {
    return int_var__full_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_1_interrupt(const cpp_int & _val) { 
    // full_1_interrupt
    int_var__full_1_interrupt = _val.convert_to< full_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_1_interrupt() const {
    return int_var__full_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_2_interrupt(const cpp_int & _val) { 
    // full_2_interrupt
    int_var__full_2_interrupt = _val.convert_to< full_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_2_interrupt() const {
    return int_var__full_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_3_interrupt(const cpp_int & _val) { 
    // full_3_interrupt
    int_var__full_3_interrupt = _val.convert_to< full_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_3_interrupt() const {
    return int_var__full_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_4_interrupt(const cpp_int & _val) { 
    // full_4_interrupt
    int_var__full_4_interrupt = _val.convert_to< full_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_4_interrupt() const {
    return int_var__full_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_5_interrupt(const cpp_int & _val) { 
    // full_5_interrupt
    int_var__full_5_interrupt = _val.convert_to< full_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_5_interrupt() const {
    return int_var__full_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_6_interrupt(const cpp_int & _val) { 
    // full_6_interrupt
    int_var__full_6_interrupt = _val.convert_to< full_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_6_interrupt() const {
    return int_var__full_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_7_interrupt(const cpp_int & _val) { 
    // full_7_interrupt
    int_var__full_7_interrupt = _val.convert_to< full_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_7_interrupt() const {
    return int_var__full_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_8_interrupt(const cpp_int & _val) { 
    // full_8_interrupt
    int_var__full_8_interrupt = _val.convert_to< full_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::full_8_interrupt() const {
    return int_var__full_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_0_enable(const cpp_int & _val) { 
    // stop_0_enable
    int_var__stop_0_enable = _val.convert_to< stop_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_0_enable() const {
    return int_var__stop_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_1_enable(const cpp_int & _val) { 
    // stop_1_enable
    int_var__stop_1_enable = _val.convert_to< stop_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_1_enable() const {
    return int_var__stop_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_2_enable(const cpp_int & _val) { 
    // stop_2_enable
    int_var__stop_2_enable = _val.convert_to< stop_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_2_enable() const {
    return int_var__stop_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_3_enable(const cpp_int & _val) { 
    // stop_3_enable
    int_var__stop_3_enable = _val.convert_to< stop_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_3_enable() const {
    return int_var__stop_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_4_enable(const cpp_int & _val) { 
    // stop_4_enable
    int_var__stop_4_enable = _val.convert_to< stop_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_4_enable() const {
    return int_var__stop_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_5_enable(const cpp_int & _val) { 
    // stop_5_enable
    int_var__stop_5_enable = _val.convert_to< stop_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_5_enable() const {
    return int_var__stop_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_6_enable(const cpp_int & _val) { 
    // stop_6_enable
    int_var__stop_6_enable = _val.convert_to< stop_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_6_enable() const {
    return int_var__stop_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_7_enable(const cpp_int & _val) { 
    // stop_7_enable
    int_var__stop_7_enable = _val.convert_to< stop_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_7_enable() const {
    return int_var__stop_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_8_enable(const cpp_int & _val) { 
    // stop_8_enable
    int_var__stop_8_enable = _val.convert_to< stop_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::stop_8_enable() const {
    return int_var__stop_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_0_interrupt(const cpp_int & _val) { 
    // stop_0_interrupt
    int_var__stop_0_interrupt = _val.convert_to< stop_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_0_interrupt() const {
    return int_var__stop_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_1_interrupt(const cpp_int & _val) { 
    // stop_1_interrupt
    int_var__stop_1_interrupt = _val.convert_to< stop_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_1_interrupt() const {
    return int_var__stop_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_2_interrupt(const cpp_int & _val) { 
    // stop_2_interrupt
    int_var__stop_2_interrupt = _val.convert_to< stop_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_2_interrupt() const {
    return int_var__stop_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_3_interrupt(const cpp_int & _val) { 
    // stop_3_interrupt
    int_var__stop_3_interrupt = _val.convert_to< stop_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_3_interrupt() const {
    return int_var__stop_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_4_interrupt(const cpp_int & _val) { 
    // stop_4_interrupt
    int_var__stop_4_interrupt = _val.convert_to< stop_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_4_interrupt() const {
    return int_var__stop_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_5_interrupt(const cpp_int & _val) { 
    // stop_5_interrupt
    int_var__stop_5_interrupt = _val.convert_to< stop_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_5_interrupt() const {
    return int_var__stop_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_6_interrupt(const cpp_int & _val) { 
    // stop_6_interrupt
    int_var__stop_6_interrupt = _val.convert_to< stop_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_6_interrupt() const {
    return int_var__stop_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_7_interrupt(const cpp_int & _val) { 
    // stop_7_interrupt
    int_var__stop_7_interrupt = _val.convert_to< stop_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_7_interrupt() const {
    return int_var__stop_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_8_interrupt(const cpp_int & _val) { 
    // stop_8_interrupt
    int_var__stop_8_interrupt = _val.convert_to< stop_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::stop_8_interrupt() const {
    return int_var__stop_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::ctrl_enable(const cpp_int & _val) { 
    // ctrl_enable
    int_var__ctrl_enable = _val.convert_to< ctrl_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::ctrl_enable() const {
    return int_var__ctrl_enable;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::pyld_enable(const cpp_int & _val) { 
    // pyld_enable
    int_var__pyld_enable = _val.convert_to< pyld_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::pyld_enable() const {
    return int_var__pyld_enable;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::r2a_enable(const cpp_int & _val) { 
    // r2a_enable
    int_var__r2a_enable = _val.convert_to< r2a_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::r2a_enable() const {
    return int_var__r2a_enable;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::ctrl_interrupt(const cpp_int & _val) { 
    // ctrl_interrupt
    int_var__ctrl_interrupt = _val.convert_to< ctrl_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::ctrl_interrupt() const {
    return int_var__ctrl_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::pyld_interrupt(const cpp_int & _val) { 
    // pyld_interrupt
    int_var__pyld_interrupt = _val.convert_to< pyld_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::pyld_interrupt() const {
    return int_var__pyld_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::r2a_interrupt(const cpp_int & _val) { 
    // r2a_interrupt
    int_var__r2a_interrupt = _val.convert_to< r2a_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::r2a_interrupt() const {
    return int_var__r2a_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_0_enable(const cpp_int & _val) { 
    // occupancy_0_enable
    int_var__occupancy_0_enable = _val.convert_to< occupancy_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_0_enable() const {
    return int_var__occupancy_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_1_enable(const cpp_int & _val) { 
    // occupancy_1_enable
    int_var__occupancy_1_enable = _val.convert_to< occupancy_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_1_enable() const {
    return int_var__occupancy_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_2_enable(const cpp_int & _val) { 
    // occupancy_2_enable
    int_var__occupancy_2_enable = _val.convert_to< occupancy_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_2_enable() const {
    return int_var__occupancy_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_3_enable(const cpp_int & _val) { 
    // occupancy_3_enable
    int_var__occupancy_3_enable = _val.convert_to< occupancy_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_3_enable() const {
    return int_var__occupancy_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_4_enable(const cpp_int & _val) { 
    // occupancy_4_enable
    int_var__occupancy_4_enable = _val.convert_to< occupancy_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_4_enable() const {
    return int_var__occupancy_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_5_enable(const cpp_int & _val) { 
    // occupancy_5_enable
    int_var__occupancy_5_enable = _val.convert_to< occupancy_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_5_enable() const {
    return int_var__occupancy_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_6_enable(const cpp_int & _val) { 
    // occupancy_6_enable
    int_var__occupancy_6_enable = _val.convert_to< occupancy_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_6_enable() const {
    return int_var__occupancy_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_7_enable(const cpp_int & _val) { 
    // occupancy_7_enable
    int_var__occupancy_7_enable = _val.convert_to< occupancy_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_7_enable() const {
    return int_var__occupancy_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_8_enable(const cpp_int & _val) { 
    // occupancy_8_enable
    int_var__occupancy_8_enable = _val.convert_to< occupancy_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::occupancy_8_enable() const {
    return int_var__occupancy_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_0_interrupt(const cpp_int & _val) { 
    // occupancy_0_interrupt
    int_var__occupancy_0_interrupt = _val.convert_to< occupancy_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_0_interrupt() const {
    return int_var__occupancy_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_1_interrupt(const cpp_int & _val) { 
    // occupancy_1_interrupt
    int_var__occupancy_1_interrupt = _val.convert_to< occupancy_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_1_interrupt() const {
    return int_var__occupancy_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_2_interrupt(const cpp_int & _val) { 
    // occupancy_2_interrupt
    int_var__occupancy_2_interrupt = _val.convert_to< occupancy_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_2_interrupt() const {
    return int_var__occupancy_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_3_interrupt(const cpp_int & _val) { 
    // occupancy_3_interrupt
    int_var__occupancy_3_interrupt = _val.convert_to< occupancy_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_3_interrupt() const {
    return int_var__occupancy_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_4_interrupt(const cpp_int & _val) { 
    // occupancy_4_interrupt
    int_var__occupancy_4_interrupt = _val.convert_to< occupancy_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_4_interrupt() const {
    return int_var__occupancy_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_5_interrupt(const cpp_int & _val) { 
    // occupancy_5_interrupt
    int_var__occupancy_5_interrupt = _val.convert_to< occupancy_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_5_interrupt() const {
    return int_var__occupancy_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_6_interrupt(const cpp_int & _val) { 
    // occupancy_6_interrupt
    int_var__occupancy_6_interrupt = _val.convert_to< occupancy_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_6_interrupt() const {
    return int_var__occupancy_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_7_interrupt(const cpp_int & _val) { 
    // occupancy_7_interrupt
    int_var__occupancy_7_interrupt = _val.convert_to< occupancy_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_7_interrupt() const {
    return int_var__occupancy_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_8_interrupt(const cpp_int & _val) { 
    // occupancy_8_interrupt
    int_var__occupancy_8_interrupt = _val.convert_to< occupancy_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_drop_int_test_set_t::occupancy_8_interrupt() const {
    return int_var__occupancy_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_0_enable(const cpp_int & _val) { 
    // sop_sop_out_0_enable
    int_var__sop_sop_out_0_enable = _val.convert_to< sop_sop_out_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_0_enable() const {
    return int_var__sop_sop_out_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_1_enable(const cpp_int & _val) { 
    // sop_sop_out_1_enable
    int_var__sop_sop_out_1_enable = _val.convert_to< sop_sop_out_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_1_enable() const {
    return int_var__sop_sop_out_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_2_enable(const cpp_int & _val) { 
    // sop_sop_out_2_enable
    int_var__sop_sop_out_2_enable = _val.convert_to< sop_sop_out_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_2_enable() const {
    return int_var__sop_sop_out_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_3_enable(const cpp_int & _val) { 
    // sop_sop_out_3_enable
    int_var__sop_sop_out_3_enable = _val.convert_to< sop_sop_out_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_3_enable() const {
    return int_var__sop_sop_out_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_4_enable(const cpp_int & _val) { 
    // sop_sop_out_4_enable
    int_var__sop_sop_out_4_enable = _val.convert_to< sop_sop_out_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_4_enable() const {
    return int_var__sop_sop_out_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_5_enable(const cpp_int & _val) { 
    // sop_sop_out_5_enable
    int_var__sop_sop_out_5_enable = _val.convert_to< sop_sop_out_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_5_enable() const {
    return int_var__sop_sop_out_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_6_enable(const cpp_int & _val) { 
    // sop_sop_out_6_enable
    int_var__sop_sop_out_6_enable = _val.convert_to< sop_sop_out_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_6_enable() const {
    return int_var__sop_sop_out_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_7_enable(const cpp_int & _val) { 
    // sop_sop_out_7_enable
    int_var__sop_sop_out_7_enable = _val.convert_to< sop_sop_out_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_7_enable() const {
    return int_var__sop_sop_out_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_8_enable(const cpp_int & _val) { 
    // sop_sop_out_8_enable
    int_var__sop_sop_out_8_enable = _val.convert_to< sop_sop_out_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_8_enable() const {
    return int_var__sop_sop_out_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_9_enable(const cpp_int & _val) { 
    // sop_sop_out_9_enable
    int_var__sop_sop_out_9_enable = _val.convert_to< sop_sop_out_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::sop_sop_out_9_enable() const {
    return int_var__sop_sop_out_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_0_enable(const cpp_int & _val) { 
    // eop_eop_out_0_enable
    int_var__eop_eop_out_0_enable = _val.convert_to< eop_eop_out_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_0_enable() const {
    return int_var__eop_eop_out_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_1_enable(const cpp_int & _val) { 
    // eop_eop_out_1_enable
    int_var__eop_eop_out_1_enable = _val.convert_to< eop_eop_out_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_1_enable() const {
    return int_var__eop_eop_out_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_2_enable(const cpp_int & _val) { 
    // eop_eop_out_2_enable
    int_var__eop_eop_out_2_enable = _val.convert_to< eop_eop_out_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_2_enable() const {
    return int_var__eop_eop_out_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_3_enable(const cpp_int & _val) { 
    // eop_eop_out_3_enable
    int_var__eop_eop_out_3_enable = _val.convert_to< eop_eop_out_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_3_enable() const {
    return int_var__eop_eop_out_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_4_enable(const cpp_int & _val) { 
    // eop_eop_out_4_enable
    int_var__eop_eop_out_4_enable = _val.convert_to< eop_eop_out_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_4_enable() const {
    return int_var__eop_eop_out_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_5_enable(const cpp_int & _val) { 
    // eop_eop_out_5_enable
    int_var__eop_eop_out_5_enable = _val.convert_to< eop_eop_out_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_5_enable() const {
    return int_var__eop_eop_out_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_6_enable(const cpp_int & _val) { 
    // eop_eop_out_6_enable
    int_var__eop_eop_out_6_enable = _val.convert_to< eop_eop_out_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_6_enable() const {
    return int_var__eop_eop_out_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_7_enable(const cpp_int & _val) { 
    // eop_eop_out_7_enable
    int_var__eop_eop_out_7_enable = _val.convert_to< eop_eop_out_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_7_enable() const {
    return int_var__eop_eop_out_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_8_enable(const cpp_int & _val) { 
    // eop_eop_out_8_enable
    int_var__eop_eop_out_8_enable = _val.convert_to< eop_eop_out_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_8_enable() const {
    return int_var__eop_eop_out_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_9_enable(const cpp_int & _val) { 
    // eop_eop_out_9_enable
    int_var__eop_eop_out_9_enable = _val.convert_to< eop_eop_out_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::eop_eop_out_9_enable() const {
    return int_var__eop_eop_out_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_0_interrupt(const cpp_int & _val) { 
    // sop_sop_out_0_interrupt
    int_var__sop_sop_out_0_interrupt = _val.convert_to< sop_sop_out_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_0_interrupt() const {
    return int_var__sop_sop_out_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_1_interrupt(const cpp_int & _val) { 
    // sop_sop_out_1_interrupt
    int_var__sop_sop_out_1_interrupt = _val.convert_to< sop_sop_out_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_1_interrupt() const {
    return int_var__sop_sop_out_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_2_interrupt(const cpp_int & _val) { 
    // sop_sop_out_2_interrupt
    int_var__sop_sop_out_2_interrupt = _val.convert_to< sop_sop_out_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_2_interrupt() const {
    return int_var__sop_sop_out_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_3_interrupt(const cpp_int & _val) { 
    // sop_sop_out_3_interrupt
    int_var__sop_sop_out_3_interrupt = _val.convert_to< sop_sop_out_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_3_interrupt() const {
    return int_var__sop_sop_out_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_4_interrupt(const cpp_int & _val) { 
    // sop_sop_out_4_interrupt
    int_var__sop_sop_out_4_interrupt = _val.convert_to< sop_sop_out_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_4_interrupt() const {
    return int_var__sop_sop_out_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_5_interrupt(const cpp_int & _val) { 
    // sop_sop_out_5_interrupt
    int_var__sop_sop_out_5_interrupt = _val.convert_to< sop_sop_out_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_5_interrupt() const {
    return int_var__sop_sop_out_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_6_interrupt(const cpp_int & _val) { 
    // sop_sop_out_6_interrupt
    int_var__sop_sop_out_6_interrupt = _val.convert_to< sop_sop_out_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_6_interrupt() const {
    return int_var__sop_sop_out_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_7_interrupt(const cpp_int & _val) { 
    // sop_sop_out_7_interrupt
    int_var__sop_sop_out_7_interrupt = _val.convert_to< sop_sop_out_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_7_interrupt() const {
    return int_var__sop_sop_out_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_8_interrupt(const cpp_int & _val) { 
    // sop_sop_out_8_interrupt
    int_var__sop_sop_out_8_interrupt = _val.convert_to< sop_sop_out_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_8_interrupt() const {
    return int_var__sop_sop_out_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_9_interrupt(const cpp_int & _val) { 
    // sop_sop_out_9_interrupt
    int_var__sop_sop_out_9_interrupt = _val.convert_to< sop_sop_out_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::sop_sop_out_9_interrupt() const {
    return int_var__sop_sop_out_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_0_interrupt(const cpp_int & _val) { 
    // eop_eop_out_0_interrupt
    int_var__eop_eop_out_0_interrupt = _val.convert_to< eop_eop_out_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_0_interrupt() const {
    return int_var__eop_eop_out_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_1_interrupt(const cpp_int & _val) { 
    // eop_eop_out_1_interrupt
    int_var__eop_eop_out_1_interrupt = _val.convert_to< eop_eop_out_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_1_interrupt() const {
    return int_var__eop_eop_out_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_2_interrupt(const cpp_int & _val) { 
    // eop_eop_out_2_interrupt
    int_var__eop_eop_out_2_interrupt = _val.convert_to< eop_eop_out_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_2_interrupt() const {
    return int_var__eop_eop_out_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_3_interrupt(const cpp_int & _val) { 
    // eop_eop_out_3_interrupt
    int_var__eop_eop_out_3_interrupt = _val.convert_to< eop_eop_out_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_3_interrupt() const {
    return int_var__eop_eop_out_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_4_interrupt(const cpp_int & _val) { 
    // eop_eop_out_4_interrupt
    int_var__eop_eop_out_4_interrupt = _val.convert_to< eop_eop_out_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_4_interrupt() const {
    return int_var__eop_eop_out_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_5_interrupt(const cpp_int & _val) { 
    // eop_eop_out_5_interrupt
    int_var__eop_eop_out_5_interrupt = _val.convert_to< eop_eop_out_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_5_interrupt() const {
    return int_var__eop_eop_out_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_6_interrupt(const cpp_int & _val) { 
    // eop_eop_out_6_interrupt
    int_var__eop_eop_out_6_interrupt = _val.convert_to< eop_eop_out_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_6_interrupt() const {
    return int_var__eop_eop_out_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_7_interrupt(const cpp_int & _val) { 
    // eop_eop_out_7_interrupt
    int_var__eop_eop_out_7_interrupt = _val.convert_to< eop_eop_out_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_7_interrupt() const {
    return int_var__eop_eop_out_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_8_interrupt(const cpp_int & _val) { 
    // eop_eop_out_8_interrupt
    int_var__eop_eop_out_8_interrupt = _val.convert_to< eop_eop_out_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_8_interrupt() const {
    return int_var__eop_eop_out_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_9_interrupt(const cpp_int & _val) { 
    // eop_eop_out_9_interrupt
    int_var__eop_eop_out_9_interrupt = _val.convert_to< eop_eop_out_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::eop_eop_out_9_interrupt() const {
    return int_var__eop_eop_out_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_0_enable(const cpp_int & _val) { 
    // sop_sop_in_0_enable
    int_var__sop_sop_in_0_enable = _val.convert_to< sop_sop_in_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_0_enable() const {
    return int_var__sop_sop_in_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_1_enable(const cpp_int & _val) { 
    // sop_sop_in_1_enable
    int_var__sop_sop_in_1_enable = _val.convert_to< sop_sop_in_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_1_enable() const {
    return int_var__sop_sop_in_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_2_enable(const cpp_int & _val) { 
    // sop_sop_in_2_enable
    int_var__sop_sop_in_2_enable = _val.convert_to< sop_sop_in_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_2_enable() const {
    return int_var__sop_sop_in_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_3_enable(const cpp_int & _val) { 
    // sop_sop_in_3_enable
    int_var__sop_sop_in_3_enable = _val.convert_to< sop_sop_in_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_3_enable() const {
    return int_var__sop_sop_in_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_4_enable(const cpp_int & _val) { 
    // sop_sop_in_4_enable
    int_var__sop_sop_in_4_enable = _val.convert_to< sop_sop_in_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_4_enable() const {
    return int_var__sop_sop_in_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_5_enable(const cpp_int & _val) { 
    // sop_sop_in_5_enable
    int_var__sop_sop_in_5_enable = _val.convert_to< sop_sop_in_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_5_enable() const {
    return int_var__sop_sop_in_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_6_enable(const cpp_int & _val) { 
    // sop_sop_in_6_enable
    int_var__sop_sop_in_6_enable = _val.convert_to< sop_sop_in_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_6_enable() const {
    return int_var__sop_sop_in_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_7_enable(const cpp_int & _val) { 
    // sop_sop_in_7_enable
    int_var__sop_sop_in_7_enable = _val.convert_to< sop_sop_in_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_7_enable() const {
    return int_var__sop_sop_in_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_8_enable(const cpp_int & _val) { 
    // sop_sop_in_8_enable
    int_var__sop_sop_in_8_enable = _val.convert_to< sop_sop_in_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_8_enable() const {
    return int_var__sop_sop_in_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_9_enable(const cpp_int & _val) { 
    // sop_sop_in_9_enable
    int_var__sop_sop_in_9_enable = _val.convert_to< sop_sop_in_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::sop_sop_in_9_enable() const {
    return int_var__sop_sop_in_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_0_enable(const cpp_int & _val) { 
    // eop_eop_in_0_enable
    int_var__eop_eop_in_0_enable = _val.convert_to< eop_eop_in_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_0_enable() const {
    return int_var__eop_eop_in_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_1_enable(const cpp_int & _val) { 
    // eop_eop_in_1_enable
    int_var__eop_eop_in_1_enable = _val.convert_to< eop_eop_in_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_1_enable() const {
    return int_var__eop_eop_in_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_2_enable(const cpp_int & _val) { 
    // eop_eop_in_2_enable
    int_var__eop_eop_in_2_enable = _val.convert_to< eop_eop_in_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_2_enable() const {
    return int_var__eop_eop_in_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_3_enable(const cpp_int & _val) { 
    // eop_eop_in_3_enable
    int_var__eop_eop_in_3_enable = _val.convert_to< eop_eop_in_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_3_enable() const {
    return int_var__eop_eop_in_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_4_enable(const cpp_int & _val) { 
    // eop_eop_in_4_enable
    int_var__eop_eop_in_4_enable = _val.convert_to< eop_eop_in_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_4_enable() const {
    return int_var__eop_eop_in_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_5_enable(const cpp_int & _val) { 
    // eop_eop_in_5_enable
    int_var__eop_eop_in_5_enable = _val.convert_to< eop_eop_in_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_5_enable() const {
    return int_var__eop_eop_in_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_6_enable(const cpp_int & _val) { 
    // eop_eop_in_6_enable
    int_var__eop_eop_in_6_enable = _val.convert_to< eop_eop_in_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_6_enable() const {
    return int_var__eop_eop_in_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_7_enable(const cpp_int & _val) { 
    // eop_eop_in_7_enable
    int_var__eop_eop_in_7_enable = _val.convert_to< eop_eop_in_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_7_enable() const {
    return int_var__eop_eop_in_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_8_enable(const cpp_int & _val) { 
    // eop_eop_in_8_enable
    int_var__eop_eop_in_8_enable = _val.convert_to< eop_eop_in_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_8_enable() const {
    return int_var__eop_eop_in_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_9_enable(const cpp_int & _val) { 
    // eop_eop_in_9_enable
    int_var__eop_eop_in_9_enable = _val.convert_to< eop_eop_in_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::eop_eop_in_9_enable() const {
    return int_var__eop_eop_in_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_0_interrupt(const cpp_int & _val) { 
    // sop_sop_in_0_interrupt
    int_var__sop_sop_in_0_interrupt = _val.convert_to< sop_sop_in_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_0_interrupt() const {
    return int_var__sop_sop_in_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_1_interrupt(const cpp_int & _val) { 
    // sop_sop_in_1_interrupt
    int_var__sop_sop_in_1_interrupt = _val.convert_to< sop_sop_in_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_1_interrupt() const {
    return int_var__sop_sop_in_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_2_interrupt(const cpp_int & _val) { 
    // sop_sop_in_2_interrupt
    int_var__sop_sop_in_2_interrupt = _val.convert_to< sop_sop_in_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_2_interrupt() const {
    return int_var__sop_sop_in_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_3_interrupt(const cpp_int & _val) { 
    // sop_sop_in_3_interrupt
    int_var__sop_sop_in_3_interrupt = _val.convert_to< sop_sop_in_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_3_interrupt() const {
    return int_var__sop_sop_in_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_4_interrupt(const cpp_int & _val) { 
    // sop_sop_in_4_interrupt
    int_var__sop_sop_in_4_interrupt = _val.convert_to< sop_sop_in_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_4_interrupt() const {
    return int_var__sop_sop_in_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_5_interrupt(const cpp_int & _val) { 
    // sop_sop_in_5_interrupt
    int_var__sop_sop_in_5_interrupt = _val.convert_to< sop_sop_in_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_5_interrupt() const {
    return int_var__sop_sop_in_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_6_interrupt(const cpp_int & _val) { 
    // sop_sop_in_6_interrupt
    int_var__sop_sop_in_6_interrupt = _val.convert_to< sop_sop_in_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_6_interrupt() const {
    return int_var__sop_sop_in_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_7_interrupt(const cpp_int & _val) { 
    // sop_sop_in_7_interrupt
    int_var__sop_sop_in_7_interrupt = _val.convert_to< sop_sop_in_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_7_interrupt() const {
    return int_var__sop_sop_in_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_8_interrupt(const cpp_int & _val) { 
    // sop_sop_in_8_interrupt
    int_var__sop_sop_in_8_interrupt = _val.convert_to< sop_sop_in_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_8_interrupt() const {
    return int_var__sop_sop_in_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_9_interrupt(const cpp_int & _val) { 
    // sop_sop_in_9_interrupt
    int_var__sop_sop_in_9_interrupt = _val.convert_to< sop_sop_in_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::sop_sop_in_9_interrupt() const {
    return int_var__sop_sop_in_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_0_interrupt(const cpp_int & _val) { 
    // eop_eop_in_0_interrupt
    int_var__eop_eop_in_0_interrupt = _val.convert_to< eop_eop_in_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_0_interrupt() const {
    return int_var__eop_eop_in_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_1_interrupt(const cpp_int & _val) { 
    // eop_eop_in_1_interrupt
    int_var__eop_eop_in_1_interrupt = _val.convert_to< eop_eop_in_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_1_interrupt() const {
    return int_var__eop_eop_in_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_2_interrupt(const cpp_int & _val) { 
    // eop_eop_in_2_interrupt
    int_var__eop_eop_in_2_interrupt = _val.convert_to< eop_eop_in_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_2_interrupt() const {
    return int_var__eop_eop_in_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_3_interrupt(const cpp_int & _val) { 
    // eop_eop_in_3_interrupt
    int_var__eop_eop_in_3_interrupt = _val.convert_to< eop_eop_in_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_3_interrupt() const {
    return int_var__eop_eop_in_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_4_interrupt(const cpp_int & _val) { 
    // eop_eop_in_4_interrupt
    int_var__eop_eop_in_4_interrupt = _val.convert_to< eop_eop_in_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_4_interrupt() const {
    return int_var__eop_eop_in_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_5_interrupt(const cpp_int & _val) { 
    // eop_eop_in_5_interrupt
    int_var__eop_eop_in_5_interrupt = _val.convert_to< eop_eop_in_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_5_interrupt() const {
    return int_var__eop_eop_in_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_6_interrupt(const cpp_int & _val) { 
    // eop_eop_in_6_interrupt
    int_var__eop_eop_in_6_interrupt = _val.convert_to< eop_eop_in_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_6_interrupt() const {
    return int_var__eop_eop_in_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_7_interrupt(const cpp_int & _val) { 
    // eop_eop_in_7_interrupt
    int_var__eop_eop_in_7_interrupt = _val.convert_to< eop_eop_in_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_7_interrupt() const {
    return int_var__eop_eop_in_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_8_interrupt(const cpp_int & _val) { 
    // eop_eop_in_8_interrupt
    int_var__eop_eop_in_8_interrupt = _val.convert_to< eop_eop_in_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_8_interrupt() const {
    return int_var__eop_eop_in_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_9_interrupt(const cpp_int & _val) { 
    // eop_eop_in_9_interrupt
    int_var__eop_eop_in_9_interrupt = _val.convert_to< eop_eop_in_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::eop_eop_in_9_interrupt() const {
    return int_var__eop_eop_in_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_0_enable(const cpp_int & _val) { 
    // timeout_0_enable
    int_var__timeout_0_enable = _val.convert_to< timeout_0_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_0_enable() const {
    return int_var__timeout_0_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_1_enable(const cpp_int & _val) { 
    // timeout_1_enable
    int_var__timeout_1_enable = _val.convert_to< timeout_1_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_1_enable() const {
    return int_var__timeout_1_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_2_enable(const cpp_int & _val) { 
    // timeout_2_enable
    int_var__timeout_2_enable = _val.convert_to< timeout_2_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_2_enable() const {
    return int_var__timeout_2_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_3_enable(const cpp_int & _val) { 
    // timeout_3_enable
    int_var__timeout_3_enable = _val.convert_to< timeout_3_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_3_enable() const {
    return int_var__timeout_3_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_4_enable(const cpp_int & _val) { 
    // timeout_4_enable
    int_var__timeout_4_enable = _val.convert_to< timeout_4_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_4_enable() const {
    return int_var__timeout_4_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_5_enable(const cpp_int & _val) { 
    // timeout_5_enable
    int_var__timeout_5_enable = _val.convert_to< timeout_5_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_5_enable() const {
    return int_var__timeout_5_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_6_enable(const cpp_int & _val) { 
    // timeout_6_enable
    int_var__timeout_6_enable = _val.convert_to< timeout_6_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_6_enable() const {
    return int_var__timeout_6_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_7_enable(const cpp_int & _val) { 
    // timeout_7_enable
    int_var__timeout_7_enable = _val.convert_to< timeout_7_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_7_enable() const {
    return int_var__timeout_7_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_8_enable(const cpp_int & _val) { 
    // timeout_8_enable
    int_var__timeout_8_enable = _val.convert_to< timeout_8_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_8_enable() const {
    return int_var__timeout_8_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_9_enable(const cpp_int & _val) { 
    // timeout_9_enable
    int_var__timeout_9_enable = _val.convert_to< timeout_9_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_9_enable() const {
    return int_var__timeout_9_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_10_enable(const cpp_int & _val) { 
    // timeout_10_enable
    int_var__timeout_10_enable = _val.convert_to< timeout_10_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_10_enable() const {
    return int_var__timeout_10_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_11_enable(const cpp_int & _val) { 
    // timeout_11_enable
    int_var__timeout_11_enable = _val.convert_to< timeout_11_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_11_enable() const {
    return int_var__timeout_11_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_12_enable(const cpp_int & _val) { 
    // timeout_12_enable
    int_var__timeout_12_enable = _val.convert_to< timeout_12_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_12_enable() const {
    return int_var__timeout_12_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_13_enable(const cpp_int & _val) { 
    // timeout_13_enable
    int_var__timeout_13_enable = _val.convert_to< timeout_13_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_13_enable() const {
    return int_var__timeout_13_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_14_enable(const cpp_int & _val) { 
    // timeout_14_enable
    int_var__timeout_14_enable = _val.convert_to< timeout_14_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_14_enable() const {
    return int_var__timeout_14_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_15_enable(const cpp_int & _val) { 
    // timeout_15_enable
    int_var__timeout_15_enable = _val.convert_to< timeout_15_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_15_enable() const {
    return int_var__timeout_15_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_16_enable(const cpp_int & _val) { 
    // timeout_16_enable
    int_var__timeout_16_enable = _val.convert_to< timeout_16_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_16_enable() const {
    return int_var__timeout_16_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_17_enable(const cpp_int & _val) { 
    // timeout_17_enable
    int_var__timeout_17_enable = _val.convert_to< timeout_17_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_17_enable() const {
    return int_var__timeout_17_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_18_enable(const cpp_int & _val) { 
    // timeout_18_enable
    int_var__timeout_18_enable = _val.convert_to< timeout_18_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_18_enable() const {
    return int_var__timeout_18_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_19_enable(const cpp_int & _val) { 
    // timeout_19_enable
    int_var__timeout_19_enable = _val.convert_to< timeout_19_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_19_enable() const {
    return int_var__timeout_19_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_20_enable(const cpp_int & _val) { 
    // timeout_20_enable
    int_var__timeout_20_enable = _val.convert_to< timeout_20_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_20_enable() const {
    return int_var__timeout_20_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_21_enable(const cpp_int & _val) { 
    // timeout_21_enable
    int_var__timeout_21_enable = _val.convert_to< timeout_21_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_21_enable() const {
    return int_var__timeout_21_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_22_enable(const cpp_int & _val) { 
    // timeout_22_enable
    int_var__timeout_22_enable = _val.convert_to< timeout_22_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_22_enable() const {
    return int_var__timeout_22_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_23_enable(const cpp_int & _val) { 
    // timeout_23_enable
    int_var__timeout_23_enable = _val.convert_to< timeout_23_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_23_enable() const {
    return int_var__timeout_23_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_24_enable(const cpp_int & _val) { 
    // timeout_24_enable
    int_var__timeout_24_enable = _val.convert_to< timeout_24_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_24_enable() const {
    return int_var__timeout_24_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_25_enable(const cpp_int & _val) { 
    // timeout_25_enable
    int_var__timeout_25_enable = _val.convert_to< timeout_25_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_25_enable() const {
    return int_var__timeout_25_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_26_enable(const cpp_int & _val) { 
    // timeout_26_enable
    int_var__timeout_26_enable = _val.convert_to< timeout_26_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_26_enable() const {
    return int_var__timeout_26_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_27_enable(const cpp_int & _val) { 
    // timeout_27_enable
    int_var__timeout_27_enable = _val.convert_to< timeout_27_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_27_enable() const {
    return int_var__timeout_27_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_28_enable(const cpp_int & _val) { 
    // timeout_28_enable
    int_var__timeout_28_enable = _val.convert_to< timeout_28_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_28_enable() const {
    return int_var__timeout_28_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_29_enable(const cpp_int & _val) { 
    // timeout_29_enable
    int_var__timeout_29_enable = _val.convert_to< timeout_29_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_29_enable() const {
    return int_var__timeout_29_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_30_enable(const cpp_int & _val) { 
    // timeout_30_enable
    int_var__timeout_30_enable = _val.convert_to< timeout_30_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_30_enable() const {
    return int_var__timeout_30_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_31_enable(const cpp_int & _val) { 
    // timeout_31_enable
    int_var__timeout_31_enable = _val.convert_to< timeout_31_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::timeout_31_enable() const {
    return int_var__timeout_31_enable;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_0_interrupt(const cpp_int & _val) { 
    // timeout_0_interrupt
    int_var__timeout_0_interrupt = _val.convert_to< timeout_0_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_0_interrupt() const {
    return int_var__timeout_0_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_1_interrupt(const cpp_int & _val) { 
    // timeout_1_interrupt
    int_var__timeout_1_interrupt = _val.convert_to< timeout_1_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_1_interrupt() const {
    return int_var__timeout_1_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_2_interrupt(const cpp_int & _val) { 
    // timeout_2_interrupt
    int_var__timeout_2_interrupt = _val.convert_to< timeout_2_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_2_interrupt() const {
    return int_var__timeout_2_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_3_interrupt(const cpp_int & _val) { 
    // timeout_3_interrupt
    int_var__timeout_3_interrupt = _val.convert_to< timeout_3_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_3_interrupt() const {
    return int_var__timeout_3_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_4_interrupt(const cpp_int & _val) { 
    // timeout_4_interrupt
    int_var__timeout_4_interrupt = _val.convert_to< timeout_4_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_4_interrupt() const {
    return int_var__timeout_4_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_5_interrupt(const cpp_int & _val) { 
    // timeout_5_interrupt
    int_var__timeout_5_interrupt = _val.convert_to< timeout_5_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_5_interrupt() const {
    return int_var__timeout_5_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_6_interrupt(const cpp_int & _val) { 
    // timeout_6_interrupt
    int_var__timeout_6_interrupt = _val.convert_to< timeout_6_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_6_interrupt() const {
    return int_var__timeout_6_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_7_interrupt(const cpp_int & _val) { 
    // timeout_7_interrupt
    int_var__timeout_7_interrupt = _val.convert_to< timeout_7_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_7_interrupt() const {
    return int_var__timeout_7_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_8_interrupt(const cpp_int & _val) { 
    // timeout_8_interrupt
    int_var__timeout_8_interrupt = _val.convert_to< timeout_8_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_8_interrupt() const {
    return int_var__timeout_8_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_9_interrupt(const cpp_int & _val) { 
    // timeout_9_interrupt
    int_var__timeout_9_interrupt = _val.convert_to< timeout_9_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_9_interrupt() const {
    return int_var__timeout_9_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_10_interrupt(const cpp_int & _val) { 
    // timeout_10_interrupt
    int_var__timeout_10_interrupt = _val.convert_to< timeout_10_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_10_interrupt() const {
    return int_var__timeout_10_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_11_interrupt(const cpp_int & _val) { 
    // timeout_11_interrupt
    int_var__timeout_11_interrupt = _val.convert_to< timeout_11_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_11_interrupt() const {
    return int_var__timeout_11_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_12_interrupt(const cpp_int & _val) { 
    // timeout_12_interrupt
    int_var__timeout_12_interrupt = _val.convert_to< timeout_12_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_12_interrupt() const {
    return int_var__timeout_12_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_13_interrupt(const cpp_int & _val) { 
    // timeout_13_interrupt
    int_var__timeout_13_interrupt = _val.convert_to< timeout_13_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_13_interrupt() const {
    return int_var__timeout_13_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_14_interrupt(const cpp_int & _val) { 
    // timeout_14_interrupt
    int_var__timeout_14_interrupt = _val.convert_to< timeout_14_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_14_interrupt() const {
    return int_var__timeout_14_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_15_interrupt(const cpp_int & _val) { 
    // timeout_15_interrupt
    int_var__timeout_15_interrupt = _val.convert_to< timeout_15_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_15_interrupt() const {
    return int_var__timeout_15_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_16_interrupt(const cpp_int & _val) { 
    // timeout_16_interrupt
    int_var__timeout_16_interrupt = _val.convert_to< timeout_16_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_16_interrupt() const {
    return int_var__timeout_16_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_17_interrupt(const cpp_int & _val) { 
    // timeout_17_interrupt
    int_var__timeout_17_interrupt = _val.convert_to< timeout_17_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_17_interrupt() const {
    return int_var__timeout_17_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_18_interrupt(const cpp_int & _val) { 
    // timeout_18_interrupt
    int_var__timeout_18_interrupt = _val.convert_to< timeout_18_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_18_interrupt() const {
    return int_var__timeout_18_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_19_interrupt(const cpp_int & _val) { 
    // timeout_19_interrupt
    int_var__timeout_19_interrupt = _val.convert_to< timeout_19_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_19_interrupt() const {
    return int_var__timeout_19_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_20_interrupt(const cpp_int & _val) { 
    // timeout_20_interrupt
    int_var__timeout_20_interrupt = _val.convert_to< timeout_20_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_20_interrupt() const {
    return int_var__timeout_20_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_21_interrupt(const cpp_int & _val) { 
    // timeout_21_interrupt
    int_var__timeout_21_interrupt = _val.convert_to< timeout_21_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_21_interrupt() const {
    return int_var__timeout_21_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_22_interrupt(const cpp_int & _val) { 
    // timeout_22_interrupt
    int_var__timeout_22_interrupt = _val.convert_to< timeout_22_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_22_interrupt() const {
    return int_var__timeout_22_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_23_interrupt(const cpp_int & _val) { 
    // timeout_23_interrupt
    int_var__timeout_23_interrupt = _val.convert_to< timeout_23_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_23_interrupt() const {
    return int_var__timeout_23_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_24_interrupt(const cpp_int & _val) { 
    // timeout_24_interrupt
    int_var__timeout_24_interrupt = _val.convert_to< timeout_24_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_24_interrupt() const {
    return int_var__timeout_24_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_25_interrupt(const cpp_int & _val) { 
    // timeout_25_interrupt
    int_var__timeout_25_interrupt = _val.convert_to< timeout_25_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_25_interrupt() const {
    return int_var__timeout_25_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_26_interrupt(const cpp_int & _val) { 
    // timeout_26_interrupt
    int_var__timeout_26_interrupt = _val.convert_to< timeout_26_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_26_interrupt() const {
    return int_var__timeout_26_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_27_interrupt(const cpp_int & _val) { 
    // timeout_27_interrupt
    int_var__timeout_27_interrupt = _val.convert_to< timeout_27_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_27_interrupt() const {
    return int_var__timeout_27_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_28_interrupt(const cpp_int & _val) { 
    // timeout_28_interrupt
    int_var__timeout_28_interrupt = _val.convert_to< timeout_28_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_28_interrupt() const {
    return int_var__timeout_28_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_29_interrupt(const cpp_int & _val) { 
    // timeout_29_interrupt
    int_var__timeout_29_interrupt = _val.convert_to< timeout_29_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_29_interrupt() const {
    return int_var__timeout_29_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_30_interrupt(const cpp_int & _val) { 
    // timeout_30_interrupt
    int_var__timeout_30_interrupt = _val.convert_to< timeout_30_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_30_interrupt() const {
    return int_var__timeout_30_interrupt;
}
    
void cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_31_interrupt(const cpp_int & _val) { 
    // timeout_31_interrupt
    int_var__timeout_31_interrupt = _val.convert_to< timeout_31_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::timeout_31_interrupt() const {
    return int_var__timeout_31_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::uncorrectable_enable(const cpp_int & _val) { 
    // uncorrectable_enable
    int_var__uncorrectable_enable = _val.convert_to< uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::uncorrectable_enable() const {
    return int_var__uncorrectable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::correctable_enable(const cpp_int & _val) { 
    // correctable_enable
    int_var__correctable_enable = _val.convert_to< correctable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::correctable_enable() const {
    return int_var__correctable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::uncorrectable_interrupt(const cpp_int & _val) { 
    // uncorrectable_interrupt
    int_var__uncorrectable_interrupt = _val.convert_to< uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::uncorrectable_interrupt() const {
    return int_var__uncorrectable_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::correctable_interrupt(const cpp_int & _val) { 
    // correctable_interrupt
    int_var__correctable_interrupt = _val.convert_to< correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::correctable_interrupt() const {
    return int_var__correctable_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::rb_uncorrectable_enable(const cpp_int & _val) { 
    // rb_uncorrectable_enable
    int_var__rb_uncorrectable_enable = _val.convert_to< rb_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::rb_uncorrectable_enable() const {
    return int_var__rb_uncorrectable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::rb_correctable_enable(const cpp_int & _val) { 
    // rb_correctable_enable
    int_var__rb_correctable_enable = _val.convert_to< rb_correctable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::rb_correctable_enable() const {
    return int_var__rb_correctable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::cdt_uncorrectable_enable(const cpp_int & _val) { 
    // cdt_uncorrectable_enable
    int_var__cdt_uncorrectable_enable = _val.convert_to< cdt_uncorrectable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::cdt_uncorrectable_enable() const {
    return int_var__cdt_uncorrectable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::cdt_correctable_enable(const cpp_int & _val) { 
    // cdt_correctable_enable
    int_var__cdt_correctable_enable = _val.convert_to< cdt_correctable_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::cdt_correctable_enable() const {
    return int_var__cdt_correctable_enable;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::rb_uncorrectable_interrupt(const cpp_int & _val) { 
    // rb_uncorrectable_interrupt
    int_var__rb_uncorrectable_interrupt = _val.convert_to< rb_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::rb_uncorrectable_interrupt() const {
    return int_var__rb_uncorrectable_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::rb_correctable_interrupt(const cpp_int & _val) { 
    // rb_correctable_interrupt
    int_var__rb_correctable_interrupt = _val.convert_to< rb_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::rb_correctable_interrupt() const {
    return int_var__rb_correctable_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::cdt_uncorrectable_interrupt(const cpp_int & _val) { 
    // cdt_uncorrectable_interrupt
    int_var__cdt_uncorrectable_interrupt = _val.convert_to< cdt_uncorrectable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::cdt_uncorrectable_interrupt() const {
    return int_var__cdt_uncorrectable_interrupt;
}
    
void cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::cdt_correctable_interrupt(const cpp_int & _val) { 
    // cdt_correctable_interrupt
    int_var__cdt_correctable_interrupt = _val.convert_to< cdt_correctable_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::cdt_correctable_interrupt() const {
    return int_var__cdt_correctable_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_mtu_interrupt(const cpp_int & _val) { 
    // int_ecc_hbm_mtu_interrupt
    int_var__int_ecc_hbm_mtu_interrupt = _val.convert_to< int_ecc_hbm_mtu_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_mtu_interrupt() const {
    return int_var__int_ecc_hbm_mtu_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_rb_interrupt(const cpp_int & _val) { 
    // int_ecc_hbm_rb_interrupt
    int_var__int_ecc_hbm_rb_interrupt = _val.convert_to< int_ecc_hbm_rb_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_rb_interrupt() const {
    return int_var__int_ecc_hbm_rb_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_wb_interrupt(const cpp_int & _val) { 
    // int_ecc_hbm_wb_interrupt
    int_var__int_ecc_hbm_wb_interrupt = _val.convert_to< int_ecc_hbm_wb_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_wb_interrupt() const {
    return int_var__int_ecc_hbm_wb_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_ht_interrupt(const cpp_int & _val) { 
    // int_ecc_hbm_ht_interrupt
    int_var__int_ecc_hbm_ht_interrupt = _val.convert_to< int_ecc_hbm_ht_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_ecc_hbm_ht_interrupt() const {
    return int_var__int_ecc_hbm_ht_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_xoff_interrupt(const cpp_int & _val) { 
    // int_hbm_xoff_interrupt
    int_var__int_hbm_xoff_interrupt = _val.convert_to< int_hbm_xoff_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_xoff_interrupt() const {
    return int_var__int_hbm_xoff_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_pbus_violation_in_interrupt(const cpp_int & _val) { 
    // int_hbm_pbus_violation_in_interrupt
    int_var__int_hbm_pbus_violation_in_interrupt = _val.convert_to< int_hbm_pbus_violation_in_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_pbus_violation_in_interrupt() const {
    return int_var__int_hbm_pbus_violation_in_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_pbus_violation_out_interrupt(const cpp_int & _val) { 
    // int_hbm_pbus_violation_out_interrupt
    int_var__int_hbm_pbus_violation_out_interrupt = _val.convert_to< int_hbm_pbus_violation_out_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_pbus_violation_out_interrupt() const {
    return int_var__int_hbm_pbus_violation_out_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_drop_interrupt(const cpp_int & _val) { 
    // int_hbm_drop_interrupt
    int_var__int_hbm_drop_interrupt = _val.convert_to< int_hbm_drop_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_drop_interrupt() const {
    return int_var__int_hbm_drop_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_stop_interrupt(const cpp_int & _val) { 
    // int_hbm_stop_interrupt
    int_var__int_hbm_stop_interrupt = _val.convert_to< int_hbm_stop_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_stop_interrupt() const {
    return int_var__int_hbm_stop_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_axi_err_rsp_interrupt(const cpp_int & _val) { 
    // int_hbm_axi_err_rsp_interrupt
    int_var__int_hbm_axi_err_rsp_interrupt = _val.convert_to< int_hbm_axi_err_rsp_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_axi_err_rsp_interrupt() const {
    return int_var__int_hbm_axi_err_rsp_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_drop_emergency_interrupt(const cpp_int & _val) { 
    // int_hbm_drop_emergency_interrupt
    int_var__int_hbm_drop_emergency_interrupt = _val.convert_to< int_hbm_drop_emergency_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_drop_emergency_interrupt() const {
    return int_var__int_hbm_drop_emergency_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_drop_write_ack_interrupt(const cpp_int & _val) { 
    // int_hbm_drop_write_ack_interrupt
    int_var__int_hbm_drop_write_ack_interrupt = _val.convert_to< int_hbm_drop_write_ack_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_drop_write_ack_interrupt() const {
    return int_var__int_hbm_drop_write_ack_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_drop_ctrl_interrupt(const cpp_int & _val) { 
    // int_hbm_drop_ctrl_interrupt
    int_var__int_hbm_drop_ctrl_interrupt = _val.convert_to< int_hbm_drop_ctrl_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_drop_ctrl_interrupt() const {
    return int_var__int_hbm_drop_ctrl_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_drop_threshold_interrupt(const cpp_int & _val) { 
    // int_hbm_drop_threshold_interrupt
    int_var__int_hbm_drop_threshold_interrupt = _val.convert_to< int_hbm_drop_threshold_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_drop_threshold_interrupt() const {
    return int_var__int_hbm_drop_threshold_interrupt;
}
    
void cap_pbchbm_csr_intreg_status_t::int_hbm_truncate_no_interrupt(const cpp_int & _val) { 
    // int_hbm_truncate_no_interrupt
    int_var__int_hbm_truncate_no_interrupt = _val.convert_to< int_hbm_truncate_no_interrupt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_intreg_status_t::int_hbm_truncate_no_interrupt() const {
    return int_var__int_hbm_truncate_no_interrupt;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_mtu_enable(const cpp_int & _val) { 
    // int_ecc_hbm_mtu_enable
    int_var__int_ecc_hbm_mtu_enable = _val.convert_to< int_ecc_hbm_mtu_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_mtu_enable() const {
    return int_var__int_ecc_hbm_mtu_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_rb_enable(const cpp_int & _val) { 
    // int_ecc_hbm_rb_enable
    int_var__int_ecc_hbm_rb_enable = _val.convert_to< int_ecc_hbm_rb_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_rb_enable() const {
    return int_var__int_ecc_hbm_rb_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_wb_enable(const cpp_int & _val) { 
    // int_ecc_hbm_wb_enable
    int_var__int_ecc_hbm_wb_enable = _val.convert_to< int_ecc_hbm_wb_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_wb_enable() const {
    return int_var__int_ecc_hbm_wb_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_ht_enable(const cpp_int & _val) { 
    // int_ecc_hbm_ht_enable
    int_var__int_ecc_hbm_ht_enable = _val.convert_to< int_ecc_hbm_ht_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_ecc_hbm_ht_enable() const {
    return int_var__int_ecc_hbm_ht_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_xoff_enable(const cpp_int & _val) { 
    // int_hbm_xoff_enable
    int_var__int_hbm_xoff_enable = _val.convert_to< int_hbm_xoff_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_xoff_enable() const {
    return int_var__int_hbm_xoff_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_pbus_violation_in_enable(const cpp_int & _val) { 
    // int_hbm_pbus_violation_in_enable
    int_var__int_hbm_pbus_violation_in_enable = _val.convert_to< int_hbm_pbus_violation_in_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_pbus_violation_in_enable() const {
    return int_var__int_hbm_pbus_violation_in_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_pbus_violation_out_enable(const cpp_int & _val) { 
    // int_hbm_pbus_violation_out_enable
    int_var__int_hbm_pbus_violation_out_enable = _val.convert_to< int_hbm_pbus_violation_out_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_pbus_violation_out_enable() const {
    return int_var__int_hbm_pbus_violation_out_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_enable(const cpp_int & _val) { 
    // int_hbm_drop_enable
    int_var__int_hbm_drop_enable = _val.convert_to< int_hbm_drop_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_enable() const {
    return int_var__int_hbm_drop_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_stop_enable(const cpp_int & _val) { 
    // int_hbm_stop_enable
    int_var__int_hbm_stop_enable = _val.convert_to< int_hbm_stop_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_stop_enable() const {
    return int_var__int_hbm_stop_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_axi_err_rsp_enable(const cpp_int & _val) { 
    // int_hbm_axi_err_rsp_enable
    int_var__int_hbm_axi_err_rsp_enable = _val.convert_to< int_hbm_axi_err_rsp_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_axi_err_rsp_enable() const {
    return int_var__int_hbm_axi_err_rsp_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_emergency_enable(const cpp_int & _val) { 
    // int_hbm_drop_emergency_enable
    int_var__int_hbm_drop_emergency_enable = _val.convert_to< int_hbm_drop_emergency_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_emergency_enable() const {
    return int_var__int_hbm_drop_emergency_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_write_ack_enable(const cpp_int & _val) { 
    // int_hbm_drop_write_ack_enable
    int_var__int_hbm_drop_write_ack_enable = _val.convert_to< int_hbm_drop_write_ack_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_write_ack_enable() const {
    return int_var__int_hbm_drop_write_ack_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_ctrl_enable(const cpp_int & _val) { 
    // int_hbm_drop_ctrl_enable
    int_var__int_hbm_drop_ctrl_enable = _val.convert_to< int_hbm_drop_ctrl_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_ctrl_enable() const {
    return int_var__int_hbm_drop_ctrl_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_threshold_enable(const cpp_int & _val) { 
    // int_hbm_drop_threshold_enable
    int_var__int_hbm_drop_threshold_enable = _val.convert_to< int_hbm_drop_threshold_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_drop_threshold_enable() const {
    return int_var__int_hbm_drop_threshold_enable;
}
    
void cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_truncate_no_enable(const cpp_int & _val) { 
    // int_hbm_truncate_no_enable
    int_var__int_hbm_truncate_no_enable = _val.convert_to< int_hbm_truncate_no_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::int_hbm_truncate_no_enable() const {
    return int_var__int_hbm_truncate_no_enable;
}
    
void cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::value() const {
    return int_var__value;
}
    
void cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::value() const {
    return int_var__value;
}
    
void cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::value() const {
    return int_var__value;
}
    
void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::command(const cpp_int & _val) { 
    // command
    int_var__command = _val.convert_to< command_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::command() const {
    return int_var__command;
}
    
void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::current_credit(const cpp_int & _val) { 
    // current_credit
    int_var__current_credit = _val.convert_to< current_credit_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::current_credit() const {
    return int_var__current_credit;
}
    
void cap_pbchbm_csr_dhs_hbm_r2a_entry_t::quota(const cpp_int & _val) { 
    // quota
    int_var__quota = _val.convert_to< quota_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_r2a_entry_t::quota() const {
    return int_var__quota;
}
    
void cap_pbchbm_csr_dhs_hbm_mem_entry_t::rsvd(const cpp_int & _val) { 
    // rsvd
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_mem_entry_t::rsvd() const {
    return int_var__rsvd;
}
    
void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::command(const cpp_int & _val) { 
    // command
    int_var__command = _val.convert_to< command_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::command() const {
    return int_var__command;
}
    
void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::current_credit(const cpp_int & _val) { 
    // current_credit
    int_var__current_credit = _val.convert_to< current_credit_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::current_credit() const {
    return int_var__current_credit;
}
    
void cap_pbchbm_csr_dhs_hbm_cdt_entry_t::quota(const cpp_int & _val) { 
    // quota
    int_var__quota = _val.convert_to< quota_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_dhs_hbm_cdt_entry_t::quota() const {
    return int_var__quota;
}
    
void cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::write(const cpp_int & _val) { 
    // write
    int_var__write = _val.convert_to< write_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::write() const {
    return int_var__write;
}
    
void cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::read(const cpp_int & _val) { 
    // read
    int_var__read = _val.convert_to< read_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::read() const {
    return int_var__read;
}
    
void cap_pbchbm_csr_cnt_hbm_axi_pyld_t::read(const cpp_int & _val) { 
    // read
    int_var__read = _val.convert_to< read_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_pyld_t::read() const {
    return int_var__read;
}
    
void cap_pbchbm_csr_cnt_hbm_axi_rpl_t::read(const cpp_int & _val) { 
    // read
    int_var__read = _val.convert_to< read_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm_axi_rpl_t::read() const {
    return int_var__read;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::counters(const cpp_int & _val) { 
    // counters
    int_var__counters = _val.convert_to< counters_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::counters() const {
    return int_var__counters;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::counters(const cpp_int & _val) { 
    // counters
    int_var__counters = _val.convert_to< counters_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::counters() const {
    return int_var__counters;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::xoff(const cpp_int & _val) { 
    // xoff
    int_var__xoff = _val.convert_to< xoff_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::xoff() const {
    return int_var__xoff;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::xon(const cpp_int & _val) { 
    // xon
    int_var__xon = _val.convert_to< xon_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::xon() const {
    return int_var__xon;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::enable() const {
    return int_var__enable;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::auto_xon(const cpp_int & _val) { 
    // auto_xon
    int_var__auto_xon = _val.convert_to< auto_xon_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::auto_xon() const {
    return int_var__auto_xon;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::auto_clear(const cpp_int & _val) { 
    // auto_clear
    int_var__auto_clear = _val.convert_to< auto_clear_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::auto_clear() const {
    return int_var__auto_clear;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::write(const cpp_int & _val) { 
    // write
    int_var__write = _val.convert_to< write_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::write() const {
    return int_var__write;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::gather(const cpp_int & _val) { 
    // gather
    int_var__gather = _val.convert_to< gather_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::gather() const {
    return int_var__gather;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_flush_t::context(const cpp_int & _val) { 
    // context
    int_var__context = _val.convert_to< context_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_flush_t::context() const {
    return int_var__context;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_flush_t::context(const cpp_int & _val) { 
    // context
    int_var__context = _val.convert_to< context_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_flush_t::context() const {
    return int_var__context;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::valid() const {
    return int_var__valid;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::index(const cpp_int & _val) { 
    // index
    int_var__index = _val.convert_to< index_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::index() const {
    return int_var__index;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::valid(const cpp_int & _val) { 
    // valid
    int_var__valid = _val.convert_to< valid_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::valid() const {
    return int_var__valid;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::index(const cpp_int & _val) { 
    // index
    int_var__index = _val.convert_to< index_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::index() const {
    return int_var__index;
}
    
void cap_pbchbm_csr_cfg_hbm_qdepth_t::rsvd(const cpp_int & _val) { 
    // rsvd
    int_var__rsvd = _val.convert_to< rsvd_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_qdepth_t::rsvd() const {
    return int_var__rsvd;
}
    
void cap_pbchbm_csr_cfg_hbm_parser_snap_t::ctrl_oui(const cpp_int & _val) { 
    // ctrl_oui
    int_var__ctrl_oui = _val.convert_to< ctrl_oui_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_parser_snap_t::ctrl_oui() const {
    return int_var__ctrl_oui;
}
    
void cap_pbchbm_csr_cfg_hbm_cut_thru_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_cut_thru_t::enable() const {
    return int_var__enable;
}
    
void cap_pbchbm_csr_sta_hbm_timestamp_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_timestamp_t::value() const {
    return int_var__value;
}
    
void cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_wb_depth_t::value(const cpp_int & _val) { 
    // value
    int_var__value = _val.convert_to< value_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_depth_t::value() const {
    return int_var__value;
}
    
void cap_pbchbm_csr_sat_hbm8_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm8_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm8_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm8_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm7_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm7_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm7_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm7_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm6_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm6_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm6_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm6_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm5_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm5_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm5_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm5_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm4_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm4_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm4_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm4_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm3_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm3_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm3_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm3_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm2_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm2_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm2_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm2_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm1_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm1_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm1_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm1_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_sat_hbm0_ctrl_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sat_hbm0_ctrl_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm0_truncate_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm0_truncate_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::drop(const cpp_int & _val) { 
    // drop
    int_var__drop = _val.convert_to< drop_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::drop() const {
    return int_var__drop;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::timer(const cpp_int & _val) { 
    // timer
    int_var__timer = _val.convert_to< timer_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::timer() const {
    return int_var__timer;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::enable_wrr(const cpp_int & _val) { 
    // enable_wrr
    int_var__enable_wrr = _val.convert_to< enable_wrr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::enable_wrr() const {
    return int_var__enable_wrr;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::strict_priority(const cpp_int & _val) { 
    // strict_priority
    int_var__strict_priority = _val.convert_to< strict_priority_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::strict_priority() const {
    return int_var__strict_priority;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::strict_priority_bypass_timer(const cpp_int & _val) { 
    // strict_priority_bypass_timer
    int_var__strict_priority_bypass_timer = _val.convert_to< strict_priority_bypass_timer_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::strict_priority_bypass_timer() const {
    return int_var__strict_priority_bypass_timer;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::selection(const cpp_int & _val) { 
    // selection
    int_var__selection = _val.convert_to< selection_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::selection() const {
    return int_var__selection;
}
    
void cap_pbchbm_csr_cfg_hbm_r2a_t::dhs_selection(const cpp_int & _val) { 
    // dhs_selection
    int_var__dhs_selection = _val.convert_to< dhs_selection_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_r2a_t::dhs_selection() const {
    return int_var__dhs_selection;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_base_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_base_t::addr() const {
    return int_var__addr;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::ctrl_rresp(const cpp_int & _val) { 
    // ctrl_rresp
    int_var__ctrl_rresp = _val.convert_to< ctrl_rresp_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::ctrl_rresp() const {
    return int_var__ctrl_rresp;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::ctrl_rid(const cpp_int & _val) { 
    // ctrl_rid
    int_var__ctrl_rid = _val.convert_to< ctrl_rid_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::ctrl_rid() const {
    return int_var__ctrl_rid;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::pyld_rid(const cpp_int & _val) { 
    // pyld_rid
    int_var__pyld_rid = _val.convert_to< pyld_rid_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::pyld_rid() const {
    return int_var__pyld_rid;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::pyld_rresp(const cpp_int & _val) { 
    // pyld_rresp
    int_var__pyld_rresp = _val.convert_to< pyld_rresp_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::pyld_rresp() const {
    return int_var__pyld_rresp;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::r2a_bid(const cpp_int & _val) { 
    // r2a_bid
    int_var__r2a_bid = _val.convert_to< r2a_bid_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::r2a_bid() const {
    return int_var__r2a_bid;
}
    
void cap_pbchbm_csr_sta_hbm_axi_t::r2a_bresp(const cpp_int & _val) { 
    // r2a_bresp
    int_var__r2a_bresp = _val.convert_to< r2a_bresp_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_axi_t::r2a_bresp() const {
    return int_var__r2a_bresp;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_15_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_15_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_14_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_14_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_13_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_13_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_12_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_12_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_11_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_11_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_10_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_10_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_9_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_9_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_8_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_8_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_7_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_7_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_6_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_6_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_5_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_5_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_4_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_4_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_3_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_3_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_2_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_2_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_1_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_1_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_tx_context_0_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_tx_context_0_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_31_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_31_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_30_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_30_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_29_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_29_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_28_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_28_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_27_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_27_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_26_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_26_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_25_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_25_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_24_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_24_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_23_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_23_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_22_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_22_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_21_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_21_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_20_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_20_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_19_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_19_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_18_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_18_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_17_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_17_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_16_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_16_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_15_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_15_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_14_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_14_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_13_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_13_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_12_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_12_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_11_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_11_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_10_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_10_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_9_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_9_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_8_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_8_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_7_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_7_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_6_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_6_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_5_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_5_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_4_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_4_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_3_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_3_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_2_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_2_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_1_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_1_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_eth_context_0_t::depth(const cpp_int & _val) { 
    // depth
    int_var__depth = _val.convert_to< depth_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_eth_context_0_t::depth() const {
    return int_var__depth;
}
    
void cap_pbchbm_csr_sta_hbm_t::xoff_timeout_iq(const cpp_int & _val) { 
    // xoff_timeout_iq
    int_var__xoff_timeout_iq = _val.convert_to< xoff_timeout_iq_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::xoff_timeout_iq() const {
    return int_var__xoff_timeout_iq;
}
    
void cap_pbchbm_csr_sta_hbm_t::xoff_timeout_port(const cpp_int & _val) { 
    // xoff_timeout_port
    int_var__xoff_timeout_port = _val.convert_to< xoff_timeout_port_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::xoff_timeout_port() const {
    return int_var__xoff_timeout_port;
}
    
void cap_pbchbm_csr_sta_hbm_t::tx_ctrl_init_head_done(const cpp_int & _val) { 
    // tx_ctrl_init_head_done
    int_var__tx_ctrl_init_head_done = _val.convert_to< tx_ctrl_init_head_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::tx_ctrl_init_head_done() const {
    return int_var__tx_ctrl_init_head_done;
}
    
void cap_pbchbm_csr_sta_hbm_t::tx_ctrl_init_tail_done(const cpp_int & _val) { 
    // tx_ctrl_init_tail_done
    int_var__tx_ctrl_init_tail_done = _val.convert_to< tx_ctrl_init_tail_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::tx_ctrl_init_tail_done() const {
    return int_var__tx_ctrl_init_tail_done;
}
    
void cap_pbchbm_csr_sta_hbm_t::eth_ctrl_init_head_done(const cpp_int & _val) { 
    // eth_ctrl_init_head_done
    int_var__eth_ctrl_init_head_done = _val.convert_to< eth_ctrl_init_head_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::eth_ctrl_init_head_done() const {
    return int_var__eth_ctrl_init_head_done;
}
    
void cap_pbchbm_csr_sta_hbm_t::eth_ctrl_init_tail_done(const cpp_int & _val) { 
    // eth_ctrl_init_tail_done
    int_var__eth_ctrl_init_tail_done = _val.convert_to< eth_ctrl_init_tail_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_t::eth_ctrl_init_tail_done() const {
    return int_var__eth_ctrl_init_tail_done;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::head_start(const cpp_int & _val) { 
    // head_start
    int_var__head_start = _val.convert_to< head_start_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::head_start() const {
    return int_var__head_start;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::tail_start(const cpp_int & _val) { 
    // tail_start
    int_var__tail_start = _val.convert_to< tail_start_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::tail_start() const {
    return int_var__tail_start;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::base() const {
    return int_var__base;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::mem_sz(const cpp_int & _val) { 
    // mem_sz
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::mem_sz() const {
    return int_var__mem_sz;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_payload_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_payload_t::base() const {
    return int_var__base;
}
    
void cap_pbchbm_csr_cfg_hbm_tx_payload_t::mem_sz(const cpp_int & _val) { 
    // mem_sz
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_tx_payload_t::mem_sz() const {
    return int_var__mem_sz;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::head_start(const cpp_int & _val) { 
    // head_start
    int_var__head_start = _val.convert_to< head_start_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::head_start() const {
    return int_var__head_start;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::tail_start(const cpp_int & _val) { 
    // tail_start
    int_var__tail_start = _val.convert_to< tail_start_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::tail_start() const {
    return int_var__tail_start;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::base() const {
    return int_var__base;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::mem_sz(const cpp_int & _val) { 
    // mem_sz
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::mem_sz() const {
    return int_var__mem_sz;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_payload_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_payload_t::base() const {
    return int_var__base;
}
    
void cap_pbchbm_csr_cfg_hbm_eth_payload_t::mem_sz(const cpp_int & _val) { 
    // mem_sz
    int_var__mem_sz = _val.convert_to< mem_sz_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_eth_payload_t::mem_sz() const {
    return int_var__mem_sz;
}
    
void cap_pbchbm_csr_cfg_hbm_threshold_t::xoff(const cpp_int & _val) { 
    // xoff
    int_var__xoff = _val.convert_to< xoff_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_threshold_t::xoff() const {
    return int_var__xoff;
}
    
void cap_pbchbm_csr_cfg_hbm_threshold_t::xon(const cpp_int & _val) { 
    // xon
    int_var__xon = _val.convert_to< xon_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_threshold_t::xon() const {
    return int_var__xon;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_eth_tail_done_fail(const cpp_int & _val) { 
    // ht_eth_tail_done_fail
    int_var__ht_eth_tail_done_fail = _val.convert_to< ht_eth_tail_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_eth_tail_done_fail() const {
    return int_var__ht_eth_tail_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_eth_tail_done_pass(const cpp_int & _val) { 
    // ht_eth_tail_done_pass
    int_var__ht_eth_tail_done_pass = _val.convert_to< ht_eth_tail_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_eth_tail_done_pass() const {
    return int_var__ht_eth_tail_done_pass;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_eth_head_done_fail(const cpp_int & _val) { 
    // ht_eth_head_done_fail
    int_var__ht_eth_head_done_fail = _val.convert_to< ht_eth_head_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_eth_head_done_fail() const {
    return int_var__ht_eth_head_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_eth_head_done_pass(const cpp_int & _val) { 
    // ht_eth_head_done_pass
    int_var__ht_eth_head_done_pass = _val.convert_to< ht_eth_head_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_eth_head_done_pass() const {
    return int_var__ht_eth_head_done_pass;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_tx_tail_done_fail(const cpp_int & _val) { 
    // ht_tx_tail_done_fail
    int_var__ht_tx_tail_done_fail = _val.convert_to< ht_tx_tail_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_tx_tail_done_fail() const {
    return int_var__ht_tx_tail_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_tx_tail_done_pass(const cpp_int & _val) { 
    // ht_tx_tail_done_pass
    int_var__ht_tx_tail_done_pass = _val.convert_to< ht_tx_tail_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_tx_tail_done_pass() const {
    return int_var__ht_tx_tail_done_pass;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_tx_head_done_fail(const cpp_int & _val) { 
    // ht_tx_head_done_fail
    int_var__ht_tx_head_done_fail = _val.convert_to< ht_tx_head_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_tx_head_done_fail() const {
    return int_var__ht_tx_head_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::ht_tx_head_done_pass(const cpp_int & _val) { 
    // ht_tx_head_done_pass
    int_var__ht_tx_head_done_pass = _val.convert_to< ht_tx_head_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::ht_tx_head_done_pass() const {
    return int_var__ht_tx_head_done_pass;
}
    
void cap_pbchbm_csr_sta_bist_t::hbm_write_fifo_done_fail(const cpp_int & _val) { 
    // hbm_write_fifo_done_fail
    int_var__hbm_write_fifo_done_fail = _val.convert_to< hbm_write_fifo_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::hbm_write_fifo_done_fail() const {
    return int_var__hbm_write_fifo_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::hbm_write_fifo_done_pass(const cpp_int & _val) { 
    // hbm_write_fifo_done_pass
    int_var__hbm_write_fifo_done_pass = _val.convert_to< hbm_write_fifo_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::hbm_write_fifo_done_pass() const {
    return int_var__hbm_write_fifo_done_pass;
}
    
void cap_pbchbm_csr_sta_bist_t::hbm_read_fifo_done_fail(const cpp_int & _val) { 
    // hbm_read_fifo_done_fail
    int_var__hbm_read_fifo_done_fail = _val.convert_to< hbm_read_fifo_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::hbm_read_fifo_done_fail() const {
    return int_var__hbm_read_fifo_done_fail;
}
    
void cap_pbchbm_csr_sta_bist_t::hbm_read_fifo_done_pass(const cpp_int & _val) { 
    // hbm_read_fifo_done_pass
    int_var__hbm_read_fifo_done_pass = _val.convert_to< hbm_read_fifo_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_bist_t::hbm_read_fifo_done_pass() const {
    return int_var__hbm_read_fifo_done_pass;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_ht_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_ht_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_ht_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_ht_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_ht_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_ht_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_ht_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_ht_t::addr() const {
    return int_var__addr;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_ecc_disable_cor(const cpp_int & _val) { 
    // eth_head_ecc_disable_cor
    int_var__eth_head_ecc_disable_cor = _val.convert_to< eth_head_ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_ecc_disable_cor() const {
    return int_var__eth_head_ecc_disable_cor;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_ecc_disable_det(const cpp_int & _val) { 
    // eth_head_ecc_disable_det
    int_var__eth_head_ecc_disable_det = _val.convert_to< eth_head_ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_ecc_disable_det() const {
    return int_var__eth_head_ecc_disable_det;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_dhs_eccbypass(const cpp_int & _val) { 
    // eth_head_dhs_eccbypass
    int_var__eth_head_dhs_eccbypass = _val.convert_to< eth_head_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_head_dhs_eccbypass() const {
    return int_var__eth_head_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_ecc_disable_cor(const cpp_int & _val) { 
    // eth_tail_ecc_disable_cor
    int_var__eth_tail_ecc_disable_cor = _val.convert_to< eth_tail_ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_ecc_disable_cor() const {
    return int_var__eth_tail_ecc_disable_cor;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_ecc_disable_det(const cpp_int & _val) { 
    // eth_tail_ecc_disable_det
    int_var__eth_tail_ecc_disable_det = _val.convert_to< eth_tail_ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_ecc_disable_det() const {
    return int_var__eth_tail_ecc_disable_det;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_dhs_eccbypass(const cpp_int & _val) { 
    // eth_tail_dhs_eccbypass
    int_var__eth_tail_dhs_eccbypass = _val.convert_to< eth_tail_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::eth_tail_dhs_eccbypass() const {
    return int_var__eth_tail_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::tx_head_dhs_eccbypass(const cpp_int & _val) { 
    // tx_head_dhs_eccbypass
    int_var__tx_head_dhs_eccbypass = _val.convert_to< tx_head_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::tx_head_dhs_eccbypass() const {
    return int_var__tx_head_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_ht_t::tx_tail_dhs_eccbypass(const cpp_int & _val) { 
    // tx_tail_dhs_eccbypass
    int_var__tx_tail_dhs_eccbypass = _val.convert_to< tx_tail_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_ht_t::tx_tail_dhs_eccbypass() const {
    return int_var__tx_tail_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::cache(const cpp_int & _val) { 
    // cache
    int_var__cache = _val.convert_to< cache_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::cache() const {
    return int_var__cache;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::prot(const cpp_int & _val) { 
    // prot
    int_var__prot = _val.convert_to< prot_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::prot() const {
    return int_var__prot;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::qos(const cpp_int & _val) { 
    // qos
    int_var__qos = _val.convert_to< qos_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::qos() const {
    return int_var__qos;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::lock(const cpp_int & _val) { 
    // lock
    int_var__lock = _val.convert_to< lock_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::lock() const {
    return int_var__lock;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::cache(const cpp_int & _val) { 
    // cache
    int_var__cache = _val.convert_to< cache_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::cache() const {
    return int_var__cache;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::prot(const cpp_int & _val) { 
    // prot
    int_var__prot = _val.convert_to< prot_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::prot() const {
    return int_var__prot;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::qos(const cpp_int & _val) { 
    // qos
    int_var__qos = _val.convert_to< qos_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::qos() const {
    return int_var__qos;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::lock(const cpp_int & _val) { 
    // lock
    int_var__lock = _val.convert_to< lock_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::lock() const {
    return int_var__lock;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_cache(const cpp_int & _val) { 
    // rpl_cache
    int_var__rpl_cache = _val.convert_to< rpl_cache_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_cache() const {
    return int_var__rpl_cache;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_prot(const cpp_int & _val) { 
    // rpl_prot
    int_var__rpl_prot = _val.convert_to< rpl_prot_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_prot() const {
    return int_var__rpl_prot;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_qos(const cpp_int & _val) { 
    // rpl_qos
    int_var__rpl_qos = _val.convert_to< rpl_qos_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_qos() const {
    return int_var__rpl_qos;
}
    
void cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_lock(const cpp_int & _val) { 
    // rpl_lock
    int_var__rpl_lock = _val.convert_to< rpl_lock_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::rpl_lock() const {
    return int_var__rpl_lock;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::ecc_correctable(const cpp_int & _val) { 
    // ecc_correctable
    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::ecc_correctable() const {
    return int_var__ecc_correctable;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::ecc_uncorrectable(const cpp_int & _val) { 
    // ecc_uncorrectable
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::ecc_uncorrectable() const {
    return int_var__ecc_uncorrectable;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::ecc_syndrome(const cpp_int & _val) { 
    // ecc_syndrome
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::ecc_syndrome() const {
    return int_var__ecc_syndrome;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::ecc_addr(const cpp_int & _val) { 
    // ecc_addr
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::ecc_addr() const {
    return int_var__ecc_addr;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_pbchbm_csr_sta_hbm_wb_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_wb_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::init_done(const cpp_int & _val) { 
    // init_done
    int_var__init_done = _val.convert_to< init_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::init_done() const {
    return int_var__init_done;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_correctable(const cpp_int & _val) { 
    // cdt_ecc_correctable
    int_var__cdt_ecc_correctable = _val.convert_to< cdt_ecc_correctable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_correctable() const {
    return int_var__cdt_ecc_correctable;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_uncorrectable(const cpp_int & _val) { 
    // cdt_ecc_uncorrectable
    int_var__cdt_ecc_uncorrectable = _val.convert_to< cdt_ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_uncorrectable() const {
    return int_var__cdt_ecc_uncorrectable;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_correctable(const cpp_int & _val) { 
    // rb_ecc_correctable
    int_var__rb_ecc_correctable = _val.convert_to< rb_ecc_correctable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_correctable() const {
    return int_var__rb_ecc_correctable;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_uncorrectable(const cpp_int & _val) { 
    // rb_ecc_uncorrectable
    int_var__rb_ecc_uncorrectable = _val.convert_to< rb_ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_uncorrectable() const {
    return int_var__rb_ecc_uncorrectable;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_syndrome(const cpp_int & _val) { 
    // rb_ecc_syndrome
    int_var__rb_ecc_syndrome = _val.convert_to< rb_ecc_syndrome_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_syndrome() const {
    return int_var__rb_ecc_syndrome;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_addr(const cpp_int & _val) { 
    // rb_ecc_addr
    int_var__rb_ecc_addr = _val.convert_to< rb_ecc_addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::rb_ecc_addr() const {
    return int_var__rb_ecc_addr;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_syndrome(const cpp_int & _val) { 
    // cdt_ecc_syndrome
    int_var__cdt_ecc_syndrome = _val.convert_to< cdt_ecc_syndrome_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_syndrome() const {
    return int_var__cdt_ecc_syndrome;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_addr(const cpp_int & _val) { 
    // cdt_ecc_addr
    int_var__cdt_ecc_addr = _val.convert_to< cdt_ecc_addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::cdt_ecc_addr() const {
    return int_var__cdt_ecc_addr;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::bist_done_fail(const cpp_int & _val) { 
    // bist_done_fail
    int_var__bist_done_fail = _val.convert_to< bist_done_fail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::bist_done_fail() const {
    return int_var__bist_done_fail;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::bist_done_pass(const cpp_int & _val) { 
    // bist_done_pass
    int_var__bist_done_pass = _val.convert_to< bist_done_pass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::bist_done_pass() const {
    return int_var__bist_done_pass;
}
    
void cap_pbchbm_csr_sta_hbm_rb_t::hct_init_done(const cpp_int & _val) { 
    // hct_init_done
    int_var__hct_init_done = _val.convert_to< hct_init_done_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_hbm_rb_t::hct_init_done() const {
    return int_var__hct_init_done;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_drop_t::threshold(const cpp_int & _val) { 
    // threshold
    int_var__threshold = _val.convert_to< threshold_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_drop_t::threshold() const {
    return int_var__threshold;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::xoff_threshold(const cpp_int & _val) { 
    // xoff_threshold
    int_var__xoff_threshold = _val.convert_to< xoff_threshold_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::xoff_threshold() const {
    return int_var__xoff_threshold;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::xon_threshold() const {
    return int_var__xon_threshold;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::ack_fifo_xoff_threshold(const cpp_int & _val) { 
    // ack_fifo_xoff_threshold
    int_var__ack_fifo_xoff_threshold = _val.convert_to< ack_fifo_xoff_threshold_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::ack_fifo_xoff_threshold() const {
    return int_var__ack_fifo_xoff_threshold;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::ack_fifo_xon_threshold(const cpp_int & _val) { 
    // ack_fifo_xon_threshold
    int_var__ack_fifo_xon_threshold = _val.convert_to< ack_fifo_xon_threshold_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::ack_fifo_xon_threshold() const {
    return int_var__ack_fifo_xon_threshold;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::ecc_disable_det() const {
    return int_var__ecc_disable_det;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_pbchbm_csr_cfg_hbm_wb_t::addr_swizzle(const cpp_int & _val) { 
    // addr_swizzle
    int_var__addr_swizzle = _val.convert_to< addr_swizzle_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_wb_t::addr_swizzle() const {
    return int_var__addr_swizzle;
}
    
void cap_pbchbm_csr_cfg_hbm_xoff_t::timeout(const cpp_int & _val) { 
    // timeout
    int_var__timeout = _val.convert_to< timeout_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_xoff_t::timeout() const {
    return int_var__timeout;
}
    
void cap_pbchbm_csr_cfg_hbm_t::dhs_mem_address(const cpp_int & _val) { 
    // dhs_mem_address
    int_var__dhs_mem_address = _val.convert_to< dhs_mem_address_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::dhs_mem_address() const {
    return int_var__dhs_mem_address;
}
    
void cap_pbchbm_csr_cfg_hbm_t::mtu_dhs_selection(const cpp_int & _val) { 
    // mtu_dhs_selection
    int_var__mtu_dhs_selection = _val.convert_to< mtu_dhs_selection_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::mtu_dhs_selection() const {
    return int_var__mtu_dhs_selection;
}
    
void cap_pbchbm_csr_cfg_hbm_t::debug_port_enable(const cpp_int & _val) { 
    // debug_port_enable
    int_var__debug_port_enable = _val.convert_to< debug_port_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::debug_port_enable() const {
    return int_var__debug_port_enable;
}
    
void cap_pbchbm_csr_cfg_hbm_t::debug_port_select(const cpp_int & _val) { 
    // debug_port_select
    int_var__debug_port_select = _val.convert_to< debug_port_select_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::debug_port_select() const {
    return int_var__debug_port_select;
}
    
void cap_pbchbm_csr_cfg_hbm_t::bist_run_tx_head(const cpp_int & _val) { 
    // bist_run_tx_head
    int_var__bist_run_tx_head = _val.convert_to< bist_run_tx_head_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::bist_run_tx_head() const {
    return int_var__bist_run_tx_head;
}
    
void cap_pbchbm_csr_cfg_hbm_t::bist_run_tx_tail(const cpp_int & _val) { 
    // bist_run_tx_tail
    int_var__bist_run_tx_tail = _val.convert_to< bist_run_tx_tail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::bist_run_tx_tail() const {
    return int_var__bist_run_tx_tail;
}
    
void cap_pbchbm_csr_cfg_hbm_t::bist_run_eth_head(const cpp_int & _val) { 
    // bist_run_eth_head
    int_var__bist_run_eth_head = _val.convert_to< bist_run_eth_head_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::bist_run_eth_head() const {
    return int_var__bist_run_eth_head;
}
    
void cap_pbchbm_csr_cfg_hbm_t::bist_run_eth_tail(const cpp_int & _val) { 
    // bist_run_eth_tail
    int_var__bist_run_eth_tail = _val.convert_to< bist_run_eth_tail_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::bist_run_eth_tail() const {
    return int_var__bist_run_eth_tail;
}
    
void cap_pbchbm_csr_cfg_hbm_t::control_sw_reset(const cpp_int & _val) { 
    // control_sw_reset
    int_var__control_sw_reset = _val.convert_to< control_sw_reset_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_t::control_sw_reset() const {
    return int_var__control_sw_reset;
}
    
void cap_pbchbm_csr_cfg_hbm_spare_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_spare_t::data() const {
    return int_var__data;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::mem_ecc_disable_cor(const cpp_int & _val) { 
    // mem_ecc_disable_cor
    int_var__mem_ecc_disable_cor = _val.convert_to< mem_ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::mem_ecc_disable_cor() const {
    return int_var__mem_ecc_disable_cor;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::mem_ecc_disable_det(const cpp_int & _val) { 
    // mem_ecc_disable_det
    int_var__mem_ecc_disable_det = _val.convert_to< mem_ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::mem_ecc_disable_det() const {
    return int_var__mem_ecc_disable_det;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::mem_dhs_eccbypass(const cpp_int & _val) { 
    // mem_dhs_eccbypass
    int_var__mem_dhs_eccbypass = _val.convert_to< mem_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::mem_dhs_eccbypass() const {
    return int_var__mem_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::enable_wrr(const cpp_int & _val) { 
    // enable_wrr
    int_var__enable_wrr = _val.convert_to< enable_wrr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::enable_wrr() const {
    return int_var__enable_wrr;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::cdt_dhs_selection(const cpp_int & _val) { 
    // cdt_dhs_selection
    int_var__cdt_dhs_selection = _val.convert_to< cdt_dhs_selection_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::cdt_dhs_selection() const {
    return int_var__cdt_dhs_selection;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::hct_dhs_eccbypass(const cpp_int & _val) { 
    // hct_dhs_eccbypass
    int_var__hct_dhs_eccbypass = _val.convert_to< hct_dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::hct_dhs_eccbypass() const {
    return int_var__hct_dhs_eccbypass;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::ecc_hct_disable_cor(const cpp_int & _val) { 
    // ecc_hct_disable_cor
    int_var__ecc_hct_disable_cor = _val.convert_to< ecc_hct_disable_cor_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::ecc_hct_disable_cor() const {
    return int_var__ecc_hct_disable_cor;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::ecc_hct_disable_det(const cpp_int & _val) { 
    // ecc_hct_disable_det
    int_var__ecc_hct_disable_det = _val.convert_to< ecc_hct_disable_det_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::ecc_hct_disable_det() const {
    return int_var__ecc_hct_disable_det;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::bist_run(const cpp_int & _val) { 
    // bist_run
    int_var__bist_run = _val.convert_to< bist_run_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::bist_run() const {
    return int_var__bist_run;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::hct_init_start(const cpp_int & _val) { 
    // hct_init_start
    int_var__hct_init_start = _val.convert_to< hct_init_start_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::hct_init_start() const {
    return int_var__hct_init_start;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::addr_swizzle(const cpp_int & _val) { 
    // addr_swizzle
    int_var__addr_swizzle = _val.convert_to< addr_swizzle_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::addr_swizzle() const {
    return int_var__addr_swizzle;
}
    
void cap_pbchbm_csr_cfg_hbm_rb_t::max_arlen(const cpp_int & _val) { 
    // max_arlen
    int_var__max_arlen = _val.convert_to< max_arlen_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_rb_t::max_arlen() const {
    return int_var__max_arlen;
}
    
void cap_pbchbm_csr_cfg_hbm_cdt_t::cfg_hbm_cdt(const cpp_int & _val) { 
    // cfg_hbm_cdt
    int_var__cfg_hbm_cdt = _val.convert_to< cfg_hbm_cdt_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_cfg_hbm_cdt_t::cfg_hbm_cdt() const {
    return int_var__cfg_hbm_cdt;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::uncorrectable() const {
    return int_var__uncorrectable;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::correctable() const {
    return int_var__correctable;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::syndrome() const {
    return int_var__syndrome;
}
    
void cap_pbchbm_csr_sta_ecc_hbm_mtu_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_sta_ecc_hbm_mtu_t::addr() const {
    return int_var__addr;
}
    
void cap_pbchbm_csr_csr_intr_t::dowstream(const cpp_int & _val) { 
    // dowstream
    int_var__dowstream = _val.convert_to< dowstream_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_csr_intr_t::dowstream() const {
    return int_var__dowstream;
}
    
void cap_pbchbm_csr_csr_intr_t::dowstream_enable(const cpp_int & _val) { 
    // dowstream_enable
    int_var__dowstream_enable = _val.convert_to< dowstream_enable_cpp_int_t >();
}

cpp_int cap_pbchbm_csr_csr_intr_t::dowstream_enable() const {
    return int_var__dowstream_enable;
}
    
#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_9_enable")) { field_val = occupancy_9_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_9_interrupt")) { field_val = occupancy_9_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop_0_enable")) { field_val = drop_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_1_enable")) { field_val = drop_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_2_enable")) { field_val = drop_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_3_enable")) { field_val = drop_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_4_enable")) { field_val = drop_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_5_enable")) { field_val = drop_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_6_enable")) { field_val = drop_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_7_enable")) { field_val = drop_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_8_enable")) { field_val = drop_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop_0_interrupt")) { field_val = drop_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_1_interrupt")) { field_val = drop_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_2_interrupt")) { field_val = drop_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_3_interrupt")) { field_val = drop_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_4_interrupt")) { field_val = drop_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_5_interrupt")) { field_val = drop_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_6_interrupt")) { field_val = drop_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_7_interrupt")) { field_val = drop_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_8_interrupt")) { field_val = drop_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "crossed_0_enable")) { field_val = crossed_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_1_enable")) { field_val = crossed_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_2_enable")) { field_val = crossed_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_3_enable")) { field_val = crossed_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_4_enable")) { field_val = crossed_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_5_enable")) { field_val = crossed_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_6_enable")) { field_val = crossed_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_7_enable")) { field_val = crossed_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_8_enable")) { field_val = crossed_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "crossed_0_interrupt")) { field_val = crossed_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_1_interrupt")) { field_val = crossed_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_2_interrupt")) { field_val = crossed_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_3_interrupt")) { field_val = crossed_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_4_interrupt")) { field_val = crossed_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_5_interrupt")) { field_val = crossed_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_6_interrupt")) { field_val = crossed_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_7_interrupt")) { field_val = crossed_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_8_interrupt")) { field_val = crossed_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "full_0_enable")) { field_val = full_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_enable")) { field_val = full_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_enable")) { field_val = full_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_enable")) { field_val = full_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_enable")) { field_val = full_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_enable")) { field_val = full_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_enable")) { field_val = full_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_enable")) { field_val = full_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_enable")) { field_val = full_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "full_0_interrupt")) { field_val = full_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_interrupt")) { field_val = full_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_interrupt")) { field_val = full_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_interrupt")) { field_val = full_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_interrupt")) { field_val = full_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_interrupt")) { field_val = full_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_interrupt")) { field_val = full_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_interrupt")) { field_val = full_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_interrupt")) { field_val = full_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "filling_up_0_enable")) { field_val = filling_up_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_1_enable")) { field_val = filling_up_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_2_enable")) { field_val = filling_up_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_3_enable")) { field_val = filling_up_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_4_enable")) { field_val = filling_up_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_5_enable")) { field_val = filling_up_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_6_enable")) { field_val = filling_up_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_7_enable")) { field_val = filling_up_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_8_enable")) { field_val = filling_up_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_0_enable")) { field_val = full_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_enable")) { field_val = full_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_enable")) { field_val = full_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_enable")) { field_val = full_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_enable")) { field_val = full_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_enable")) { field_val = full_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_enable")) { field_val = full_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_enable")) { field_val = full_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_enable")) { field_val = full_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "filling_up_0_interrupt")) { field_val = filling_up_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_1_interrupt")) { field_val = filling_up_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_2_interrupt")) { field_val = filling_up_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_3_interrupt")) { field_val = filling_up_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_4_interrupt")) { field_val = filling_up_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_5_interrupt")) { field_val = filling_up_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_6_interrupt")) { field_val = filling_up_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_7_interrupt")) { field_val = filling_up_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_8_interrupt")) { field_val = filling_up_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_0_interrupt")) { field_val = full_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_interrupt")) { field_val = full_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_interrupt")) { field_val = full_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_interrupt")) { field_val = full_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_interrupt")) { field_val = full_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_interrupt")) { field_val = full_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_interrupt")) { field_val = full_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_interrupt")) { field_val = full_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_interrupt")) { field_val = full_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stop_0_enable")) { field_val = stop_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_1_enable")) { field_val = stop_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_2_enable")) { field_val = stop_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_3_enable")) { field_val = stop_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_4_enable")) { field_val = stop_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_5_enable")) { field_val = stop_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_6_enable")) { field_val = stop_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_7_enable")) { field_val = stop_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_8_enable")) { field_val = stop_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stop_0_interrupt")) { field_val = stop_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_1_interrupt")) { field_val = stop_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_2_interrupt")) { field_val = stop_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_3_interrupt")) { field_val = stop_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_4_interrupt")) { field_val = stop_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_5_interrupt")) { field_val = stop_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_6_interrupt")) { field_val = stop_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_7_interrupt")) { field_val = stop_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_8_interrupt")) { field_val = stop_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_enable")) { field_val = ctrl_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_enable")) { field_val = pyld_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_enable")) { field_val = r2a_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_interrupt")) { field_val = ctrl_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_interrupt")) { field_val = pyld_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_interrupt")) { field_val = r2a_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_0_enable")) { field_val = occupancy_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_1_enable")) { field_val = occupancy_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_2_enable")) { field_val = occupancy_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_3_enable")) { field_val = occupancy_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_4_enable")) { field_val = occupancy_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_5_enable")) { field_val = occupancy_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_6_enable")) { field_val = occupancy_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_7_enable")) { field_val = occupancy_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_8_enable")) { field_val = occupancy_8_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_0_interrupt")) { field_val = occupancy_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_1_interrupt")) { field_val = occupancy_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_2_interrupt")) { field_val = occupancy_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_3_interrupt")) { field_val = occupancy_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_4_interrupt")) { field_val = occupancy_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_5_interrupt")) { field_val = occupancy_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_6_interrupt")) { field_val = occupancy_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_7_interrupt")) { field_val = occupancy_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_8_interrupt")) { field_val = occupancy_8_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_out_0_enable")) { field_val = sop_sop_out_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_1_enable")) { field_val = sop_sop_out_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_2_enable")) { field_val = sop_sop_out_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_3_enable")) { field_val = sop_sop_out_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_4_enable")) { field_val = sop_sop_out_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_5_enable")) { field_val = sop_sop_out_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_6_enable")) { field_val = sop_sop_out_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_7_enable")) { field_val = sop_sop_out_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_8_enable")) { field_val = sop_sop_out_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_9_enable")) { field_val = sop_sop_out_9_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_0_enable")) { field_val = eop_eop_out_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_1_enable")) { field_val = eop_eop_out_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_2_enable")) { field_val = eop_eop_out_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_3_enable")) { field_val = eop_eop_out_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_4_enable")) { field_val = eop_eop_out_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_5_enable")) { field_val = eop_eop_out_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_6_enable")) { field_val = eop_eop_out_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_7_enable")) { field_val = eop_eop_out_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_8_enable")) { field_val = eop_eop_out_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_9_enable")) { field_val = eop_eop_out_9_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_out_0_interrupt")) { field_val = sop_sop_out_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_1_interrupt")) { field_val = sop_sop_out_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_2_interrupt")) { field_val = sop_sop_out_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_3_interrupt")) { field_val = sop_sop_out_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_4_interrupt")) { field_val = sop_sop_out_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_5_interrupt")) { field_val = sop_sop_out_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_6_interrupt")) { field_val = sop_sop_out_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_7_interrupt")) { field_val = sop_sop_out_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_8_interrupt")) { field_val = sop_sop_out_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_9_interrupt")) { field_val = sop_sop_out_9_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_0_interrupt")) { field_val = eop_eop_out_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_1_interrupt")) { field_val = eop_eop_out_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_2_interrupt")) { field_val = eop_eop_out_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_3_interrupt")) { field_val = eop_eop_out_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_4_interrupt")) { field_val = eop_eop_out_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_5_interrupt")) { field_val = eop_eop_out_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_6_interrupt")) { field_val = eop_eop_out_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_7_interrupt")) { field_val = eop_eop_out_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_8_interrupt")) { field_val = eop_eop_out_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_9_interrupt")) { field_val = eop_eop_out_9_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_in_0_enable")) { field_val = sop_sop_in_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_1_enable")) { field_val = sop_sop_in_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_2_enable")) { field_val = sop_sop_in_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_3_enable")) { field_val = sop_sop_in_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_4_enable")) { field_val = sop_sop_in_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_5_enable")) { field_val = sop_sop_in_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_6_enable")) { field_val = sop_sop_in_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_7_enable")) { field_val = sop_sop_in_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_8_enable")) { field_val = sop_sop_in_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_9_enable")) { field_val = sop_sop_in_9_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_0_enable")) { field_val = eop_eop_in_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_1_enable")) { field_val = eop_eop_in_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_2_enable")) { field_val = eop_eop_in_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_3_enable")) { field_val = eop_eop_in_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_4_enable")) { field_val = eop_eop_in_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_5_enable")) { field_val = eop_eop_in_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_6_enable")) { field_val = eop_eop_in_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_7_enable")) { field_val = eop_eop_in_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_8_enable")) { field_val = eop_eop_in_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_9_enable")) { field_val = eop_eop_in_9_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_in_0_interrupt")) { field_val = sop_sop_in_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_1_interrupt")) { field_val = sop_sop_in_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_2_interrupt")) { field_val = sop_sop_in_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_3_interrupt")) { field_val = sop_sop_in_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_4_interrupt")) { field_val = sop_sop_in_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_5_interrupt")) { field_val = sop_sop_in_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_6_interrupt")) { field_val = sop_sop_in_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_7_interrupt")) { field_val = sop_sop_in_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_8_interrupt")) { field_val = sop_sop_in_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_9_interrupt")) { field_val = sop_sop_in_9_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_0_interrupt")) { field_val = eop_eop_in_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_1_interrupt")) { field_val = eop_eop_in_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_2_interrupt")) { field_val = eop_eop_in_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_3_interrupt")) { field_val = eop_eop_in_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_4_interrupt")) { field_val = eop_eop_in_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_5_interrupt")) { field_val = eop_eop_in_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_6_interrupt")) { field_val = eop_eop_in_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_7_interrupt")) { field_val = eop_eop_in_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_8_interrupt")) { field_val = eop_eop_in_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_9_interrupt")) { field_val = eop_eop_in_9_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout_0_enable")) { field_val = timeout_0_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_1_enable")) { field_val = timeout_1_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_2_enable")) { field_val = timeout_2_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_3_enable")) { field_val = timeout_3_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_4_enable")) { field_val = timeout_4_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_5_enable")) { field_val = timeout_5_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_6_enable")) { field_val = timeout_6_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_7_enable")) { field_val = timeout_7_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_8_enable")) { field_val = timeout_8_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_9_enable")) { field_val = timeout_9_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_10_enable")) { field_val = timeout_10_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_11_enable")) { field_val = timeout_11_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_12_enable")) { field_val = timeout_12_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_13_enable")) { field_val = timeout_13_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_14_enable")) { field_val = timeout_14_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_15_enable")) { field_val = timeout_15_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_16_enable")) { field_val = timeout_16_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_17_enable")) { field_val = timeout_17_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_18_enable")) { field_val = timeout_18_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_19_enable")) { field_val = timeout_19_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_20_enable")) { field_val = timeout_20_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_21_enable")) { field_val = timeout_21_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_22_enable")) { field_val = timeout_22_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_23_enable")) { field_val = timeout_23_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_24_enable")) { field_val = timeout_24_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_25_enable")) { field_val = timeout_25_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_26_enable")) { field_val = timeout_26_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_27_enable")) { field_val = timeout_27_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_28_enable")) { field_val = timeout_28_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_29_enable")) { field_val = timeout_29_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_30_enable")) { field_val = timeout_30_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_31_enable")) { field_val = timeout_31_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout_0_interrupt")) { field_val = timeout_0_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_1_interrupt")) { field_val = timeout_1_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_2_interrupt")) { field_val = timeout_2_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_3_interrupt")) { field_val = timeout_3_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_4_interrupt")) { field_val = timeout_4_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_5_interrupt")) { field_val = timeout_5_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_6_interrupt")) { field_val = timeout_6_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_7_interrupt")) { field_val = timeout_7_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_8_interrupt")) { field_val = timeout_8_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_9_interrupt")) { field_val = timeout_9_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_10_interrupt")) { field_val = timeout_10_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_11_interrupt")) { field_val = timeout_11_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_12_interrupt")) { field_val = timeout_12_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_13_interrupt")) { field_val = timeout_13_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_14_interrupt")) { field_val = timeout_14_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_15_interrupt")) { field_val = timeout_15_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_16_interrupt")) { field_val = timeout_16_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_17_interrupt")) { field_val = timeout_17_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_18_interrupt")) { field_val = timeout_18_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_19_interrupt")) { field_val = timeout_19_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_20_interrupt")) { field_val = timeout_20_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_21_interrupt")) { field_val = timeout_21_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_22_interrupt")) { field_val = timeout_22_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_23_interrupt")) { field_val = timeout_23_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_24_interrupt")) { field_val = timeout_24_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_25_interrupt")) { field_val = timeout_25_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_26_interrupt")) { field_val = timeout_26_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_27_interrupt")) { field_val = timeout_27_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_28_interrupt")) { field_val = timeout_28_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_29_interrupt")) { field_val = timeout_29_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_30_interrupt")) { field_val = timeout_30_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_31_interrupt")) { field_val = timeout_31_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable_enable")) { field_val = uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable_enable")) { field_val = correctable_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable_interrupt")) { field_val = uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable_interrupt")) { field_val = correctable_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_mtu_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rb_uncorrectable_enable")) { field_val = rb_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_correctable_enable")) { field_val = rb_correctable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_uncorrectable_enable")) { field_val = cdt_uncorrectable_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_correctable_enable")) { field_val = cdt_correctable_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rb_uncorrectable_interrupt")) { field_val = rb_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_correctable_interrupt")) { field_val = rb_correctable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_uncorrectable_interrupt")) { field_val = cdt_uncorrectable_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_correctable_interrupt")) { field_val = cdt_correctable_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_intreg_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_ecc_hbm_mtu_interrupt")) { field_val = int_ecc_hbm_mtu_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_rb_interrupt")) { field_val = int_ecc_hbm_rb_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_wb_interrupt")) { field_val = int_ecc_hbm_wb_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_ht_interrupt")) { field_val = int_ecc_hbm_ht_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_xoff_interrupt")) { field_val = int_hbm_xoff_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_in_interrupt")) { field_val = int_hbm_pbus_violation_in_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_out_interrupt")) { field_val = int_hbm_pbus_violation_out_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_interrupt")) { field_val = int_hbm_drop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_stop_interrupt")) { field_val = int_hbm_stop_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_axi_err_rsp_interrupt")) { field_val = int_hbm_axi_err_rsp_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_emergency_interrupt")) { field_val = int_hbm_drop_emergency_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_write_ack_interrupt")) { field_val = int_hbm_drop_write_ack_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_ctrl_interrupt")) { field_val = int_hbm_drop_ctrl_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_threshold_interrupt")) { field_val = int_hbm_drop_threshold_interrupt(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_truncate_no_interrupt")) { field_val = int_hbm_truncate_no_interrupt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_ecc_hbm_mtu_enable")) { field_val = int_ecc_hbm_mtu_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_rb_enable")) { field_val = int_ecc_hbm_rb_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_wb_enable")) { field_val = int_ecc_hbm_wb_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_ht_enable")) { field_val = int_ecc_hbm_ht_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_xoff_enable")) { field_val = int_hbm_xoff_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_in_enable")) { field_val = int_hbm_pbus_violation_in_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_out_enable")) { field_val = int_hbm_pbus_violation_out_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_enable")) { field_val = int_hbm_drop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_stop_enable")) { field_val = int_hbm_stop_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_axi_err_rsp_enable")) { field_val = int_hbm_axi_err_rsp_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_emergency_enable")) { field_val = int_hbm_drop_emergency_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_write_ack_enable")) { field_val = int_hbm_drop_write_ack_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_ctrl_enable")) { field_val = int_hbm_drop_ctrl_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_threshold_enable")) { field_val = int_hbm_drop_threshold_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_truncate_no_enable")) { field_val = int_hbm_truncate_no_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_intgrp_status_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = intreg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_wb_wm_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_r2a_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "command")) { field_val = command(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_credit")) { field_val = current_credit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "quota")) { field_val = quota(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_r2a_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_mem_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rsvd")) { field_val = rsvd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_mem_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = entry.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_cdt_entry_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "command")) { field_val = command(); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_credit")) { field_val = current_credit(); field_found=1; }
    if(!field_found && !strcmp(field_name, "quota")) { field_val = quota(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_cdt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "write")) { field_val = write(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { field_val = read(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_pyld_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { field_val = read(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_rpl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { field_val = read(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "counters")) { field_val = counters(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "counters")) { field_val = counters(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff")) { field_val = xoff(); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon")) { field_val = xon(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { field_val = enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "auto_xon")) { field_val = auto_xon(); field_found=1; }
    if(!field_found && !strcmp(field_name, "auto_clear")) { field_val = auto_clear(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "write")) { field_val = write(); field_found=1; }
    if(!field_found && !strcmp(field_name, "gather")) { field_val = gather(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_flush_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "context")) { field_val = context(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_flush_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "context")) { field_val = context(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "index")) { field_val = index(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { field_val = valid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "index")) { field_val = index(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_qdepth_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rsvd")) { field_val = rsvd(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_parser_snap_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_oui")) { field_val = ctrl_oui(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_cut_thru_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { field_val = enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_timestamp_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_wb_depth_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { field_val = value(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm8_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm7_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm6_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm5_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm4_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm3_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm2_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm1_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm0_ctrl_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_truncate_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { field_val = drop(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_r2a_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timer")) { field_val = timer(); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable_wrr")) { field_val = enable_wrr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "strict_priority")) { field_val = strict_priority(); field_found=1; }
    if(!field_found && !strcmp(field_name, "strict_priority_bypass_timer")) { field_val = strict_priority_bypass_timer(); field_found=1; }
    if(!field_found && !strcmp(field_name, "selection")) { field_val = selection(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_selection")) { field_val = dhs_selection(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_base_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_axi_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_rresp")) { field_val = ctrl_rresp(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ctrl_rid")) { field_val = ctrl_rid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_rid")) { field_val = pyld_rid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_rresp")) { field_val = pyld_rresp(); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_bid")) { field_val = r2a_bid(); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_bresp")) { field_val = r2a_bresp(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_15_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_14_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_13_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_12_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_11_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_10_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_8_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_31_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_30_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_29_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_28_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_27_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_26_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_25_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_24_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_23_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_22_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_21_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_20_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_19_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_18_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_17_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_16_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_15_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_14_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_13_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_12_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_11_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_10_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_9_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_8_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_7_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_6_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_5_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_4_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_3_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_2_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_1_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_0_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { field_val = depth(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff_timeout_iq")) { field_val = xoff_timeout_iq(); field_found=1; }
    if(!field_found && !strcmp(field_name, "xoff_timeout_port")) { field_val = xoff_timeout_port(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_ctrl_init_head_done")) { field_val = tx_ctrl_init_head_done(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_ctrl_init_tail_done")) { field_val = tx_ctrl_init_tail_done(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_ctrl_init_head_done")) { field_val = eth_ctrl_init_head_done(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_ctrl_init_tail_done")) { field_val = eth_ctrl_init_tail_done(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "head_start")) { field_val = head_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tail_start")) { field_val = tail_start(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { field_val = base(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { field_val = mem_sz(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_payload_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { field_val = base(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { field_val = mem_sz(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "head_start")) { field_val = head_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tail_start")) { field_val = tail_start(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { field_val = base(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { field_val = mem_sz(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_payload_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { field_val = base(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { field_val = mem_sz(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_threshold_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff")) { field_val = xoff(); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon")) { field_val = xon(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_bist_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ht_eth_tail_done_fail")) { field_val = ht_eth_tail_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_tail_done_pass")) { field_val = ht_eth_tail_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_head_done_fail")) { field_val = ht_eth_head_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_head_done_pass")) { field_val = ht_eth_head_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_tail_done_fail")) { field_val = ht_tx_tail_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_tail_done_pass")) { field_val = ht_tx_tail_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_head_done_fail")) { field_val = ht_tx_head_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_head_done_pass")) { field_val = ht_tx_head_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_write_fifo_done_fail")) { field_val = hbm_write_fifo_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_write_fifo_done_pass")) { field_val = hbm_write_fifo_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_read_fifo_done_fail")) { field_val = hbm_read_fifo_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_read_fifo_done_pass")) { field_val = hbm_read_fifo_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_ecc_hbm_ht_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_ht_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "eth_head_ecc_disable_cor")) { field_val = eth_head_ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_head_ecc_disable_det")) { field_val = eth_head_ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_head_dhs_eccbypass")) { field_val = eth_head_dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_ecc_disable_cor")) { field_val = eth_tail_ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_ecc_disable_det")) { field_val = eth_tail_ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_dhs_eccbypass")) { field_val = eth_tail_dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_head_dhs_eccbypass")) { field_val = tx_head_dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_tail_dhs_eccbypass")) { field_val = tx_tail_dhs_eccbypass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cache")) { field_val = cache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { field_val = prot(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { field_val = qos(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { field_val = lock(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cache")) { field_val = cache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { field_val = prot(); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { field_val = qos(); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { field_val = lock(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_cache")) { field_val = rpl_cache(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_prot")) { field_val = rpl_prot(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_qos")) { field_val = rpl_qos(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_lock")) { field_val = rpl_lock(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_wb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_correctable")) { field_val = ecc_correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_uncorrectable")) { field_val = ecc_uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_syndrome")) { field_val = ecc_syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_addr")) { field_val = ecc_addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_rb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "init_done")) { field_val = init_done(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_correctable")) { field_val = cdt_ecc_correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_uncorrectable")) { field_val = cdt_ecc_uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_correctable")) { field_val = rb_ecc_correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_uncorrectable")) { field_val = rb_ecc_uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_syndrome")) { field_val = rb_ecc_syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_addr")) { field_val = rb_ecc_addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_syndrome")) { field_val = cdt_ecc_syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_addr")) { field_val = cdt_ecc_addr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { field_val = bist_done_fail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { field_val = bist_done_pass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_init_done")) { field_val = hct_init_done(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_drop_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "threshold")) { field_val = threshold(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff_threshold")) { field_val = xoff_threshold(); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon_threshold")) { field_val = xon_threshold(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ack_fifo_xoff_threshold")) { field_val = ack_fifo_xoff_threshold(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ack_fifo_xon_threshold")) { field_val = ack_fifo_xon_threshold(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { field_val = ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { field_val = ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_eccbypass")) { field_val = dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr_swizzle")) { field_val = addr_swizzle(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_xoff_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout")) { field_val = timeout(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dhs_mem_address")) { field_val = dhs_mem_address(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mtu_dhs_selection")) { field_val = mtu_dhs_selection(); field_found=1; }
    if(!field_found && !strcmp(field_name, "debug_port_enable")) { field_val = debug_port_enable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "debug_port_select")) { field_val = debug_port_select(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_tx_head")) { field_val = bist_run_tx_head(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_tx_tail")) { field_val = bist_run_tx_tail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_eth_head")) { field_val = bist_run_eth_head(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_eth_tail")) { field_val = bist_run_eth_tail(); field_found=1; }
    if(!field_found && !strcmp(field_name, "control_sw_reset")) { field_val = control_sw_reset(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_spare_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { field_val = data(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_rb_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "mem_ecc_disable_cor")) { field_val = mem_ecc_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_ecc_disable_det")) { field_val = mem_ecc_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_dhs_eccbypass")) { field_val = mem_dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable_wrr")) { field_val = enable_wrr(); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_dhs_selection")) { field_val = cdt_dhs_selection(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_dhs_eccbypass")) { field_val = hct_dhs_eccbypass(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_hct_disable_cor")) { field_val = ecc_hct_disable_cor(); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_hct_disable_det")) { field_val = ecc_hct_disable_det(); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { field_val = bist_run(); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_init_start")) { field_val = hct_init_start(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr_swizzle")) { field_val = addr_swizzle(); field_found=1; }
    if(!field_found && !strcmp(field_name, "max_arlen")) { field_val = max_arlen(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_cdt_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cfg_hbm_cdt")) { field_val = cfg_hbm_cdt(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_ecc_hbm_mtu_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { field_val = uncorrectable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { field_val = correctable(); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { field_val = syndrome(); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { field_val = addr(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_csr_intr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { field_val = dowstream(); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { field_val = dowstream_enable(); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_t::get_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { field_val = all(); field_found = 1; }

    if(!field_found) { field_found = csr_intr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_ecc_hbm_mtu.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_cdt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_rb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_spare.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_xoff.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb_drop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_rb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_wb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_read_attr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_write_attr.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_ht.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_ecc_hbm_ht.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bist.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_threshold.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_payload.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_ctrl_init.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_payload.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_ctrl_init.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_10.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_11.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_12.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_13.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_14.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_15.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_16.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_17.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_18.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_19.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_20.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_21.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_22.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_23.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_24.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_25.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_26.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_27.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_28.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_29.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_30.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_31.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_10.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_11.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_12.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_13.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_14.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_15.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_axi.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_base.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_r2a.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm0_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm1_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm2_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm3_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm4_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm5_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm6_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm7_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_emergency_stop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_write_ack_filling_up.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_write_ack_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_truncate.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm8_ctrl_full.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_wb_depth.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_pend_acks.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_pend_acks.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_timestamp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_cut_thru.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_parser_snap.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_qdepth.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_reset_context.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_reset_context.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_flush.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_flush.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb_duty_cycle.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_xoff_timeout.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_xoff_force.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_clear_context.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_clear_context.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_rpl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_pyld.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_timestamp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_cdt.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_mem.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_r2a.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_wb_wm.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_eth_pend_acks_wm.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_tx_pend_acks_wm.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_0.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_1.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_2.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_3.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_4.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_5.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_6.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_7.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_8.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_9.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_mtu.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_rb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_wb.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_ht.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_xoff.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_pbus_violation_in.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_pbus_violation_out.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_axi_err_rsp.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_emergency.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_write_ack.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_ctrl.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_threshold.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_truncate_no.get_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_stop.get_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_9_enable")) { occupancy_9_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_9_interrupt")) { occupancy_9_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop_0_enable")) { drop_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_1_enable")) { drop_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_2_enable")) { drop_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_3_enable")) { drop_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_4_enable")) { drop_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_5_enable")) { drop_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_6_enable")) { drop_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_7_enable")) { drop_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_8_enable")) { drop_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop_0_interrupt")) { drop_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_1_interrupt")) { drop_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_2_interrupt")) { drop_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_3_interrupt")) { drop_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_4_interrupt")) { drop_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_5_interrupt")) { drop_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_6_interrupt")) { drop_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_7_interrupt")) { drop_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "drop_8_interrupt")) { drop_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_truncate_no_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "crossed_0_enable")) { crossed_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_1_enable")) { crossed_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_2_enable")) { crossed_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_3_enable")) { crossed_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_4_enable")) { crossed_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_5_enable")) { crossed_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_6_enable")) { crossed_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_7_enable")) { crossed_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_8_enable")) { crossed_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "crossed_0_interrupt")) { crossed_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_1_interrupt")) { crossed_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_2_interrupt")) { crossed_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_3_interrupt")) { crossed_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_4_interrupt")) { crossed_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_5_interrupt")) { crossed_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_6_interrupt")) { crossed_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_7_interrupt")) { crossed_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "crossed_8_interrupt")) { crossed_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_threshold_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "full_0_enable")) { full_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_enable")) { full_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_enable")) { full_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_enable")) { full_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_enable")) { full_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_enable")) { full_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_enable")) { full_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_enable")) { full_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_enable")) { full_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "full_0_interrupt")) { full_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_interrupt")) { full_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_interrupt")) { full_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_interrupt")) { full_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_interrupt")) { full_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_interrupt")) { full_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_interrupt")) { full_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_interrupt")) { full_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_interrupt")) { full_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "filling_up_0_enable")) { filling_up_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_1_enable")) { filling_up_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_2_enable")) { filling_up_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_3_enable")) { filling_up_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_4_enable")) { filling_up_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_5_enable")) { filling_up_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_6_enable")) { filling_up_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_7_enable")) { filling_up_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_8_enable")) { filling_up_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_0_enable")) { full_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_enable")) { full_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_enable")) { full_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_enable")) { full_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_enable")) { full_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_enable")) { full_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_enable")) { full_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_enable")) { full_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_enable")) { full_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "filling_up_0_interrupt")) { filling_up_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_1_interrupt")) { filling_up_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_2_interrupt")) { filling_up_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_3_interrupt")) { filling_up_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_4_interrupt")) { filling_up_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_5_interrupt")) { filling_up_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_6_interrupt")) { filling_up_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_7_interrupt")) { filling_up_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "filling_up_8_interrupt")) { filling_up_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_0_interrupt")) { full_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_1_interrupt")) { full_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_2_interrupt")) { full_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_3_interrupt")) { full_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_4_interrupt")) { full_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_5_interrupt")) { full_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_6_interrupt")) { full_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_7_interrupt")) { full_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "full_8_interrupt")) { full_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_write_ack_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stop_0_enable")) { stop_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_1_enable")) { stop_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_2_enable")) { stop_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_3_enable")) { stop_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_4_enable")) { stop_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_5_enable")) { stop_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_6_enable")) { stop_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_7_enable")) { stop_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_8_enable")) { stop_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "stop_0_interrupt")) { stop_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_1_interrupt")) { stop_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_2_interrupt")) { stop_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_3_interrupt")) { stop_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_4_interrupt")) { stop_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_5_interrupt")) { stop_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_6_interrupt")) { stop_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_7_interrupt")) { stop_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "stop_8_interrupt")) { stop_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_emergency_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_enable")) { ctrl_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_enable")) { pyld_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_enable")) { r2a_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_interrupt")) { ctrl_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_interrupt")) { pyld_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_interrupt")) { r2a_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_axi_err_rsp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_0_enable")) { occupancy_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_1_enable")) { occupancy_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_2_enable")) { occupancy_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_3_enable")) { occupancy_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_4_enable")) { occupancy_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_5_enable")) { occupancy_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_6_enable")) { occupancy_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_7_enable")) { occupancy_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_8_enable")) { occupancy_8_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "occupancy_0_interrupt")) { occupancy_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_1_interrupt")) { occupancy_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_2_interrupt")) { occupancy_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_3_interrupt")) { occupancy_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_4_interrupt")) { occupancy_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_5_interrupt")) { occupancy_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_6_interrupt")) { occupancy_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_7_interrupt")) { occupancy_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "occupancy_8_interrupt")) { occupancy_8_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_drop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_out_0_enable")) { sop_sop_out_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_1_enable")) { sop_sop_out_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_2_enable")) { sop_sop_out_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_3_enable")) { sop_sop_out_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_4_enable")) { sop_sop_out_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_5_enable")) { sop_sop_out_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_6_enable")) { sop_sop_out_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_7_enable")) { sop_sop_out_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_8_enable")) { sop_sop_out_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_9_enable")) { sop_sop_out_9_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_0_enable")) { eop_eop_out_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_1_enable")) { eop_eop_out_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_2_enable")) { eop_eop_out_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_3_enable")) { eop_eop_out_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_4_enable")) { eop_eop_out_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_5_enable")) { eop_eop_out_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_6_enable")) { eop_eop_out_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_7_enable")) { eop_eop_out_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_8_enable")) { eop_eop_out_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_9_enable")) { eop_eop_out_9_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_out_0_interrupt")) { sop_sop_out_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_1_interrupt")) { sop_sop_out_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_2_interrupt")) { sop_sop_out_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_3_interrupt")) { sop_sop_out_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_4_interrupt")) { sop_sop_out_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_5_interrupt")) { sop_sop_out_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_6_interrupt")) { sop_sop_out_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_7_interrupt")) { sop_sop_out_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_8_interrupt")) { sop_sop_out_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_out_9_interrupt")) { sop_sop_out_9_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_0_interrupt")) { eop_eop_out_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_1_interrupt")) { eop_eop_out_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_2_interrupt")) { eop_eop_out_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_3_interrupt")) { eop_eop_out_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_4_interrupt")) { eop_eop_out_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_5_interrupt")) { eop_eop_out_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_6_interrupt")) { eop_eop_out_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_7_interrupt")) { eop_eop_out_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_8_interrupt")) { eop_eop_out_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_out_9_interrupt")) { eop_eop_out_9_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_out_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_in_0_enable")) { sop_sop_in_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_1_enable")) { sop_sop_in_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_2_enable")) { sop_sop_in_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_3_enable")) { sop_sop_in_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_4_enable")) { sop_sop_in_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_5_enable")) { sop_sop_in_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_6_enable")) { sop_sop_in_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_7_enable")) { sop_sop_in_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_8_enable")) { sop_sop_in_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_9_enable")) { sop_sop_in_9_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_0_enable")) { eop_eop_in_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_1_enable")) { eop_eop_in_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_2_enable")) { eop_eop_in_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_3_enable")) { eop_eop_in_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_4_enable")) { eop_eop_in_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_5_enable")) { eop_eop_in_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_6_enable")) { eop_eop_in_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_7_enable")) { eop_eop_in_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_8_enable")) { eop_eop_in_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_9_enable")) { eop_eop_in_9_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "sop_sop_in_0_interrupt")) { sop_sop_in_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_1_interrupt")) { sop_sop_in_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_2_interrupt")) { sop_sop_in_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_3_interrupt")) { sop_sop_in_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_4_interrupt")) { sop_sop_in_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_5_interrupt")) { sop_sop_in_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_6_interrupt")) { sop_sop_in_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_7_interrupt")) { sop_sop_in_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_8_interrupt")) { sop_sop_in_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "sop_sop_in_9_interrupt")) { sop_sop_in_9_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_0_interrupt")) { eop_eop_in_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_1_interrupt")) { eop_eop_in_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_2_interrupt")) { eop_eop_in_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_3_interrupt")) { eop_eop_in_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_4_interrupt")) { eop_eop_in_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_5_interrupt")) { eop_eop_in_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_6_interrupt")) { eop_eop_in_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_7_interrupt")) { eop_eop_in_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_8_interrupt")) { eop_eop_in_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eop_eop_in_9_interrupt")) { eop_eop_in_9_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_pbus_violation_in_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout_0_enable")) { timeout_0_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_1_enable")) { timeout_1_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_2_enable")) { timeout_2_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_3_enable")) { timeout_3_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_4_enable")) { timeout_4_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_5_enable")) { timeout_5_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_6_enable")) { timeout_6_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_7_enable")) { timeout_7_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_8_enable")) { timeout_8_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_9_enable")) { timeout_9_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_10_enable")) { timeout_10_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_11_enable")) { timeout_11_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_12_enable")) { timeout_12_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_13_enable")) { timeout_13_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_14_enable")) { timeout_14_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_15_enable")) { timeout_15_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_16_enable")) { timeout_16_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_17_enable")) { timeout_17_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_18_enable")) { timeout_18_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_19_enable")) { timeout_19_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_20_enable")) { timeout_20_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_21_enable")) { timeout_21_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_22_enable")) { timeout_22_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_23_enable")) { timeout_23_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_24_enable")) { timeout_24_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_25_enable")) { timeout_25_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_26_enable")) { timeout_26_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_27_enable")) { timeout_27_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_28_enable")) { timeout_28_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_29_enable")) { timeout_29_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_30_enable")) { timeout_30_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_31_enable")) { timeout_31_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout_0_interrupt")) { timeout_0_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_1_interrupt")) { timeout_1_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_2_interrupt")) { timeout_2_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_3_interrupt")) { timeout_3_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_4_interrupt")) { timeout_4_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_5_interrupt")) { timeout_5_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_6_interrupt")) { timeout_6_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_7_interrupt")) { timeout_7_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_8_interrupt")) { timeout_8_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_9_interrupt")) { timeout_9_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_10_interrupt")) { timeout_10_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_11_interrupt")) { timeout_11_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_12_interrupt")) { timeout_12_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_13_interrupt")) { timeout_13_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_14_interrupt")) { timeout_14_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_15_interrupt")) { timeout_15_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_16_interrupt")) { timeout_16_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_17_interrupt")) { timeout_17_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_18_interrupt")) { timeout_18_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_19_interrupt")) { timeout_19_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_20_interrupt")) { timeout_20_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_21_interrupt")) { timeout_21_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_22_interrupt")) { timeout_22_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_23_interrupt")) { timeout_23_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_24_interrupt")) { timeout_24_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_25_interrupt")) { timeout_25_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_26_interrupt")) { timeout_26_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_27_interrupt")) { timeout_27_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_28_interrupt")) { timeout_28_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_29_interrupt")) { timeout_29_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_30_interrupt")) { timeout_30_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "timeout_31_interrupt")) { timeout_31_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_hbm_xoff_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable_enable")) { uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable_enable")) { correctable_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable_interrupt")) { uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable_interrupt")) { correctable_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_mtu_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rb_uncorrectable_enable")) { rb_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_correctable_enable")) { rb_correctable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_uncorrectable_enable")) { cdt_uncorrectable_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_correctable_enable")) { cdt_correctable_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rb_uncorrectable_interrupt")) { rb_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_correctable_interrupt")) { rb_correctable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_uncorrectable_interrupt")) { cdt_uncorrectable_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_correctable_interrupt")) { cdt_correctable_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_ecc_hbm_rb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_test_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_set.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_clear.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_intreg_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_ecc_hbm_mtu_interrupt")) { int_ecc_hbm_mtu_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_rb_interrupt")) { int_ecc_hbm_rb_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_wb_interrupt")) { int_ecc_hbm_wb_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_ht_interrupt")) { int_ecc_hbm_ht_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_xoff_interrupt")) { int_hbm_xoff_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_in_interrupt")) { int_hbm_pbus_violation_in_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_out_interrupt")) { int_hbm_pbus_violation_out_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_interrupt")) { int_hbm_drop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_stop_interrupt")) { int_hbm_stop_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_axi_err_rsp_interrupt")) { int_hbm_axi_err_rsp_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_emergency_interrupt")) { int_hbm_drop_emergency_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_write_ack_interrupt")) { int_hbm_drop_write_ack_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_ctrl_interrupt")) { int_hbm_drop_ctrl_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_threshold_interrupt")) { int_hbm_drop_threshold_interrupt(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_truncate_no_interrupt")) { int_hbm_truncate_no_interrupt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "int_ecc_hbm_mtu_enable")) { int_ecc_hbm_mtu_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_rb_enable")) { int_ecc_hbm_rb_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_wb_enable")) { int_ecc_hbm_wb_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_ecc_hbm_ht_enable")) { int_ecc_hbm_ht_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_xoff_enable")) { int_hbm_xoff_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_in_enable")) { int_hbm_pbus_violation_in_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_pbus_violation_out_enable")) { int_hbm_pbus_violation_out_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_enable")) { int_hbm_drop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_stop_enable")) { int_hbm_stop_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_axi_err_rsp_enable")) { int_hbm_axi_err_rsp_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_emergency_enable")) { int_hbm_drop_emergency_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_write_ack_enable")) { int_hbm_drop_write_ack_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_ctrl_enable")) { int_hbm_drop_ctrl_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_drop_threshold_enable")) { int_hbm_drop_threshold_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "int_hbm_truncate_no_enable")) { int_hbm_truncate_no_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_intgrp_status_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = intreg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_enable_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_rw_reg.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_wb_wm_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_r2a_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "command")) { command(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_credit")) { current_credit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "quota")) { quota(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_r2a_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_mem_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rsvd")) { rsvd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_mem_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = entry.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_cdt_entry_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "command")) { command(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "current_credit")) { current_credit(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "quota")) { quota(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_dhs_hbm_cdt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "write")) { write(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { read(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_pyld_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { read(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm_axi_rpl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "read")) { read(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "counters")) { counters(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "counters")) { counters(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff")) { xoff(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon")) { xon(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "auto_xon")) { auto_xon(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "auto_clear")) { auto_clear(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "write")) { write(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "gather")) { gather(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_flush_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "context")) { context(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_flush_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "context")) { context(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "index")) { index(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "valid")) { valid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "index")) { index(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_qdepth_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "rsvd")) { rsvd(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_parser_snap_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_oui")) { ctrl_oui(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_cut_thru_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "enable")) { enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_timestamp_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_wb_depth_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "value")) { value(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm8_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm7_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm6_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm5_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm4_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm3_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm2_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm1_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sat_hbm0_ctrl_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_truncate_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "drop")) { drop(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_r2a_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timer")) { timer(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable_wrr")) { enable_wrr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "strict_priority")) { strict_priority(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "strict_priority_bypass_timer")) { strict_priority_bypass_timer(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "selection")) { selection(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_selection")) { dhs_selection(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_base_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_axi_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ctrl_rresp")) { ctrl_rresp(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ctrl_rid")) { ctrl_rid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_rid")) { pyld_rid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "pyld_rresp")) { pyld_rresp(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_bid")) { r2a_bid(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "r2a_bresp")) { r2a_bresp(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_15_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_14_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_13_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_12_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_11_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_10_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_8_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_tx_context_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_31_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_30_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_29_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_28_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_27_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_26_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_25_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_24_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_23_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_22_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_21_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_20_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_19_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_18_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_17_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_16_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_15_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_14_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_13_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_12_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_11_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_10_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_9_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_8_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_7_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_6_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_5_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_4_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_3_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_2_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_1_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_eth_context_0_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "depth")) { depth(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff_timeout_iq")) { xoff_timeout_iq(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "xoff_timeout_port")) { xoff_timeout_port(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_ctrl_init_head_done")) { tx_ctrl_init_head_done(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_ctrl_init_tail_done")) { tx_ctrl_init_tail_done(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_ctrl_init_head_done")) { eth_ctrl_init_head_done(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_ctrl_init_tail_done")) { eth_ctrl_init_tail_done(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "head_start")) { head_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tail_start")) { tail_start(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { base(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { mem_sz(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_tx_payload_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { base(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { mem_sz(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "head_start")) { head_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tail_start")) { tail_start(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { base(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { mem_sz(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_eth_payload_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "base")) { base(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_sz")) { mem_sz(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_threshold_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff")) { xoff(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon")) { xon(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_bist_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ht_eth_tail_done_fail")) { ht_eth_tail_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_tail_done_pass")) { ht_eth_tail_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_head_done_fail")) { ht_eth_head_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_eth_head_done_pass")) { ht_eth_head_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_tail_done_fail")) { ht_tx_tail_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_tail_done_pass")) { ht_tx_tail_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_head_done_fail")) { ht_tx_head_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ht_tx_head_done_pass")) { ht_tx_head_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_write_fifo_done_fail")) { hbm_write_fifo_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_write_fifo_done_pass")) { hbm_write_fifo_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_read_fifo_done_fail")) { hbm_read_fifo_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hbm_read_fifo_done_pass")) { hbm_read_fifo_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_ecc_hbm_ht_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_ht_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "eth_head_ecc_disable_cor")) { eth_head_ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_head_ecc_disable_det")) { eth_head_ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_head_dhs_eccbypass")) { eth_head_dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_ecc_disable_cor")) { eth_tail_ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_ecc_disable_det")) { eth_tail_ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "eth_tail_dhs_eccbypass")) { eth_tail_dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_head_dhs_eccbypass")) { tx_head_dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "tx_tail_dhs_eccbypass")) { tx_tail_dhs_eccbypass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cache")) { cache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { prot(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { qos(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { lock(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cache")) { cache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "prot")) { prot(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "qos")) { qos(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "lock")) { lock(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_cache")) { rpl_cache(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_prot")) { rpl_prot(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_qos")) { rpl_qos(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rpl_lock")) { rpl_lock(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_wb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "ecc_correctable")) { ecc_correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_uncorrectable")) { ecc_uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_syndrome")) { ecc_syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_addr")) { ecc_addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_hbm_rb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "init_done")) { init_done(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_correctable")) { cdt_ecc_correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_uncorrectable")) { cdt_ecc_uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_correctable")) { rb_ecc_correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_uncorrectable")) { rb_ecc_uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_syndrome")) { rb_ecc_syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "rb_ecc_addr")) { rb_ecc_addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_syndrome")) { cdt_ecc_syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_ecc_addr")) { cdt_ecc_addr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_fail")) { bist_done_fail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_done_pass")) { bist_done_pass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_init_done")) { hct_init_done(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_drop_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "threshold")) { threshold(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_wb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "xoff_threshold")) { xoff_threshold(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "xon_threshold")) { xon_threshold(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ack_fifo_xoff_threshold")) { ack_fifo_xoff_threshold(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ack_fifo_xon_threshold")) { ack_fifo_xon_threshold(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_det")) { ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_disable_cor")) { ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dhs_eccbypass")) { dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr_swizzle")) { addr_swizzle(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_xoff_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "timeout")) { timeout(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dhs_mem_address")) { dhs_mem_address(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mtu_dhs_selection")) { mtu_dhs_selection(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "debug_port_enable")) { debug_port_enable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "debug_port_select")) { debug_port_select(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_tx_head")) { bist_run_tx_head(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_tx_tail")) { bist_run_tx_tail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_eth_head")) { bist_run_eth_head(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run_eth_tail")) { bist_run_eth_tail(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "control_sw_reset")) { control_sw_reset(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_spare_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "data")) { data(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_rb_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "mem_ecc_disable_cor")) { mem_ecc_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_ecc_disable_det")) { mem_ecc_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "mem_dhs_eccbypass")) { mem_dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "enable_wrr")) { enable_wrr(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "cdt_dhs_selection")) { cdt_dhs_selection(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_dhs_eccbypass")) { hct_dhs_eccbypass(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_hct_disable_cor")) { ecc_hct_disable_cor(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "ecc_hct_disable_det")) { ecc_hct_disable_det(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "bist_run")) { bist_run(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "hct_init_start")) { hct_init_start(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr_swizzle")) { addr_swizzle(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "max_arlen")) { max_arlen(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_cfg_hbm_cdt_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "cfg_hbm_cdt")) { cfg_hbm_cdt(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_sta_ecc_hbm_mtu_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "uncorrectable")) { uncorrectable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "correctable")) { correctable(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "syndrome")) { syndrome(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "addr")) { addr(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_csr_intr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found && !strcmp(field_name, "dowstream")) { dowstream(field_val); field_found=1; }
    if(!field_found && !strcmp(field_name, "dowstream_enable")) { dowstream_enable(field_val); field_found=1; }
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
bool cap_pbchbm_csr_t::set_field_val(const char * field_name, cpp_int & field_val, int level) { 
    bool field_found = false;
    if(level==0) return field_found;
    if(!strcmp(field_name, "all")) { all(field_val); field_found = 1; }

    if(!field_found) { field_found = csr_intr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_ecc_hbm_mtu.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_cdt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_rb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_spare.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_xoff.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb_drop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_rb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_wb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_read_attr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_write_attr.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_ht.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_ecc_hbm_ht.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_bist.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_threshold.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_payload.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_ctrl_init.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_payload.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_ctrl_init.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_10.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_11.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_12.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_13.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_14.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_15.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_16.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_17.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_18.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_19.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_20.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_21.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_22.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_23.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_24.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_25.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_26.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_27.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_28.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_29.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_30.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_context_31.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_10.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_11.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_12.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_13.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_14.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_context_15.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_axi.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_axi_base.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_r2a.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm0_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm0_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm1_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm1_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm2_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm2_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm3_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm3_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm4_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm4_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm5_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm5_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm6_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm6_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm7_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm7_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_emergency_stop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_write_ack_filling_up.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_write_ack_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm8_truncate.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sat_hbm8_ctrl_full.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_wb_depth.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_eth_pend_acks.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_tx_pend_acks.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = sta_hbm_timestamp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_cut_thru.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_parser_snap.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_qdepth.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_reset_context.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_reset_context.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_flush.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_flush.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_wb_duty_cycle.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_xoff_timeout.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_xoff_force.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_eth_clear_context.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cfg_hbm_tx_clear_context.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_rpl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_pyld.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = cnt_hbm_axi_timestamp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_cdt.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_mem.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_r2a.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_wb_wm.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_eth_pend_acks_wm.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = dhs_hbm_tx_pend_acks_wm.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_0.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_1.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_2.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_3.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_4.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_5.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_6.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_7.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_8.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = hbm_port_9.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_groups.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_mtu.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_rb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_wb.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_ecc_hbm_ht.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_xoff.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_pbus_violation_in.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_pbus_violation_out.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_axi_err_rsp.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_emergency.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_write_ack.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_ctrl.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_drop_threshold.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_truncate_no.set_field_val(field_name, field_val, level-1); }
    
    if(!field_found) { field_found = int_hbm_stop.set_field_val(field_name, field_val, level-1); }
    
    return field_found;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_stop_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("occupancy_9_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_stop_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("occupancy_9_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_truncate_no_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop_0_enable");
    ret_vec.push_back("drop_1_enable");
    ret_vec.push_back("drop_2_enable");
    ret_vec.push_back("drop_3_enable");
    ret_vec.push_back("drop_4_enable");
    ret_vec.push_back("drop_5_enable");
    ret_vec.push_back("drop_6_enable");
    ret_vec.push_back("drop_7_enable");
    ret_vec.push_back("drop_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_truncate_no_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop_0_interrupt");
    ret_vec.push_back("drop_1_interrupt");
    ret_vec.push_back("drop_2_interrupt");
    ret_vec.push_back("drop_3_interrupt");
    ret_vec.push_back("drop_4_interrupt");
    ret_vec.push_back("drop_5_interrupt");
    ret_vec.push_back("drop_6_interrupt");
    ret_vec.push_back("drop_7_interrupt");
    ret_vec.push_back("drop_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_truncate_no_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_threshold_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("crossed_0_enable");
    ret_vec.push_back("crossed_1_enable");
    ret_vec.push_back("crossed_2_enable");
    ret_vec.push_back("crossed_3_enable");
    ret_vec.push_back("crossed_4_enable");
    ret_vec.push_back("crossed_5_enable");
    ret_vec.push_back("crossed_6_enable");
    ret_vec.push_back("crossed_7_enable");
    ret_vec.push_back("crossed_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_threshold_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("crossed_0_interrupt");
    ret_vec.push_back("crossed_1_interrupt");
    ret_vec.push_back("crossed_2_interrupt");
    ret_vec.push_back("crossed_3_interrupt");
    ret_vec.push_back("crossed_4_interrupt");
    ret_vec.push_back("crossed_5_interrupt");
    ret_vec.push_back("crossed_6_interrupt");
    ret_vec.push_back("crossed_7_interrupt");
    ret_vec.push_back("crossed_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_threshold_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_ctrl_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("full_0_enable");
    ret_vec.push_back("full_1_enable");
    ret_vec.push_back("full_2_enable");
    ret_vec.push_back("full_3_enable");
    ret_vec.push_back("full_4_enable");
    ret_vec.push_back("full_5_enable");
    ret_vec.push_back("full_6_enable");
    ret_vec.push_back("full_7_enable");
    ret_vec.push_back("full_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_ctrl_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("full_0_interrupt");
    ret_vec.push_back("full_1_interrupt");
    ret_vec.push_back("full_2_interrupt");
    ret_vec.push_back("full_3_interrupt");
    ret_vec.push_back("full_4_interrupt");
    ret_vec.push_back("full_5_interrupt");
    ret_vec.push_back("full_6_interrupt");
    ret_vec.push_back("full_7_interrupt");
    ret_vec.push_back("full_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_write_ack_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("filling_up_0_enable");
    ret_vec.push_back("filling_up_1_enable");
    ret_vec.push_back("filling_up_2_enable");
    ret_vec.push_back("filling_up_3_enable");
    ret_vec.push_back("filling_up_4_enable");
    ret_vec.push_back("filling_up_5_enable");
    ret_vec.push_back("filling_up_6_enable");
    ret_vec.push_back("filling_up_7_enable");
    ret_vec.push_back("filling_up_8_enable");
    ret_vec.push_back("full_0_enable");
    ret_vec.push_back("full_1_enable");
    ret_vec.push_back("full_2_enable");
    ret_vec.push_back("full_3_enable");
    ret_vec.push_back("full_4_enable");
    ret_vec.push_back("full_5_enable");
    ret_vec.push_back("full_6_enable");
    ret_vec.push_back("full_7_enable");
    ret_vec.push_back("full_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_write_ack_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("filling_up_0_interrupt");
    ret_vec.push_back("filling_up_1_interrupt");
    ret_vec.push_back("filling_up_2_interrupt");
    ret_vec.push_back("filling_up_3_interrupt");
    ret_vec.push_back("filling_up_4_interrupt");
    ret_vec.push_back("filling_up_5_interrupt");
    ret_vec.push_back("filling_up_6_interrupt");
    ret_vec.push_back("filling_up_7_interrupt");
    ret_vec.push_back("filling_up_8_interrupt");
    ret_vec.push_back("full_0_interrupt");
    ret_vec.push_back("full_1_interrupt");
    ret_vec.push_back("full_2_interrupt");
    ret_vec.push_back("full_3_interrupt");
    ret_vec.push_back("full_4_interrupt");
    ret_vec.push_back("full_5_interrupt");
    ret_vec.push_back("full_6_interrupt");
    ret_vec.push_back("full_7_interrupt");
    ret_vec.push_back("full_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_write_ack_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_emergency_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("stop_0_enable");
    ret_vec.push_back("stop_1_enable");
    ret_vec.push_back("stop_2_enable");
    ret_vec.push_back("stop_3_enable");
    ret_vec.push_back("stop_4_enable");
    ret_vec.push_back("stop_5_enable");
    ret_vec.push_back("stop_6_enable");
    ret_vec.push_back("stop_7_enable");
    ret_vec.push_back("stop_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_emergency_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("stop_0_interrupt");
    ret_vec.push_back("stop_1_interrupt");
    ret_vec.push_back("stop_2_interrupt");
    ret_vec.push_back("stop_3_interrupt");
    ret_vec.push_back("stop_4_interrupt");
    ret_vec.push_back("stop_5_interrupt");
    ret_vec.push_back("stop_6_interrupt");
    ret_vec.push_back("stop_7_interrupt");
    ret_vec.push_back("stop_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_emergency_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_axi_err_rsp_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ctrl_enable");
    ret_vec.push_back("pyld_enable");
    ret_vec.push_back("r2a_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_axi_err_rsp_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ctrl_interrupt");
    ret_vec.push_back("pyld_interrupt");
    ret_vec.push_back("r2a_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_axi_err_rsp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("occupancy_0_enable");
    ret_vec.push_back("occupancy_1_enable");
    ret_vec.push_back("occupancy_2_enable");
    ret_vec.push_back("occupancy_3_enable");
    ret_vec.push_back("occupancy_4_enable");
    ret_vec.push_back("occupancy_5_enable");
    ret_vec.push_back("occupancy_6_enable");
    ret_vec.push_back("occupancy_7_enable");
    ret_vec.push_back("occupancy_8_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("occupancy_0_interrupt");
    ret_vec.push_back("occupancy_1_interrupt");
    ret_vec.push_back("occupancy_2_interrupt");
    ret_vec.push_back("occupancy_3_interrupt");
    ret_vec.push_back("occupancy_4_interrupt");
    ret_vec.push_back("occupancy_5_interrupt");
    ret_vec.push_back("occupancy_6_interrupt");
    ret_vec.push_back("occupancy_7_interrupt");
    ret_vec.push_back("occupancy_8_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_drop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_out_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop_sop_out_0_enable");
    ret_vec.push_back("sop_sop_out_1_enable");
    ret_vec.push_back("sop_sop_out_2_enable");
    ret_vec.push_back("sop_sop_out_3_enable");
    ret_vec.push_back("sop_sop_out_4_enable");
    ret_vec.push_back("sop_sop_out_5_enable");
    ret_vec.push_back("sop_sop_out_6_enable");
    ret_vec.push_back("sop_sop_out_7_enable");
    ret_vec.push_back("sop_sop_out_8_enable");
    ret_vec.push_back("sop_sop_out_9_enable");
    ret_vec.push_back("eop_eop_out_0_enable");
    ret_vec.push_back("eop_eop_out_1_enable");
    ret_vec.push_back("eop_eop_out_2_enable");
    ret_vec.push_back("eop_eop_out_3_enable");
    ret_vec.push_back("eop_eop_out_4_enable");
    ret_vec.push_back("eop_eop_out_5_enable");
    ret_vec.push_back("eop_eop_out_6_enable");
    ret_vec.push_back("eop_eop_out_7_enable");
    ret_vec.push_back("eop_eop_out_8_enable");
    ret_vec.push_back("eop_eop_out_9_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_out_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop_sop_out_0_interrupt");
    ret_vec.push_back("sop_sop_out_1_interrupt");
    ret_vec.push_back("sop_sop_out_2_interrupt");
    ret_vec.push_back("sop_sop_out_3_interrupt");
    ret_vec.push_back("sop_sop_out_4_interrupt");
    ret_vec.push_back("sop_sop_out_5_interrupt");
    ret_vec.push_back("sop_sop_out_6_interrupt");
    ret_vec.push_back("sop_sop_out_7_interrupt");
    ret_vec.push_back("sop_sop_out_8_interrupt");
    ret_vec.push_back("sop_sop_out_9_interrupt");
    ret_vec.push_back("eop_eop_out_0_interrupt");
    ret_vec.push_back("eop_eop_out_1_interrupt");
    ret_vec.push_back("eop_eop_out_2_interrupt");
    ret_vec.push_back("eop_eop_out_3_interrupt");
    ret_vec.push_back("eop_eop_out_4_interrupt");
    ret_vec.push_back("eop_eop_out_5_interrupt");
    ret_vec.push_back("eop_eop_out_6_interrupt");
    ret_vec.push_back("eop_eop_out_7_interrupt");
    ret_vec.push_back("eop_eop_out_8_interrupt");
    ret_vec.push_back("eop_eop_out_9_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_out_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_in_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop_sop_in_0_enable");
    ret_vec.push_back("sop_sop_in_1_enable");
    ret_vec.push_back("sop_sop_in_2_enable");
    ret_vec.push_back("sop_sop_in_3_enable");
    ret_vec.push_back("sop_sop_in_4_enable");
    ret_vec.push_back("sop_sop_in_5_enable");
    ret_vec.push_back("sop_sop_in_6_enable");
    ret_vec.push_back("sop_sop_in_7_enable");
    ret_vec.push_back("sop_sop_in_8_enable");
    ret_vec.push_back("sop_sop_in_9_enable");
    ret_vec.push_back("eop_eop_in_0_enable");
    ret_vec.push_back("eop_eop_in_1_enable");
    ret_vec.push_back("eop_eop_in_2_enable");
    ret_vec.push_back("eop_eop_in_3_enable");
    ret_vec.push_back("eop_eop_in_4_enable");
    ret_vec.push_back("eop_eop_in_5_enable");
    ret_vec.push_back("eop_eop_in_6_enable");
    ret_vec.push_back("eop_eop_in_7_enable");
    ret_vec.push_back("eop_eop_in_8_enable");
    ret_vec.push_back("eop_eop_in_9_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_in_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("sop_sop_in_0_interrupt");
    ret_vec.push_back("sop_sop_in_1_interrupt");
    ret_vec.push_back("sop_sop_in_2_interrupt");
    ret_vec.push_back("sop_sop_in_3_interrupt");
    ret_vec.push_back("sop_sop_in_4_interrupt");
    ret_vec.push_back("sop_sop_in_5_interrupt");
    ret_vec.push_back("sop_sop_in_6_interrupt");
    ret_vec.push_back("sop_sop_in_7_interrupt");
    ret_vec.push_back("sop_sop_in_8_interrupt");
    ret_vec.push_back("sop_sop_in_9_interrupt");
    ret_vec.push_back("eop_eop_in_0_interrupt");
    ret_vec.push_back("eop_eop_in_1_interrupt");
    ret_vec.push_back("eop_eop_in_2_interrupt");
    ret_vec.push_back("eop_eop_in_3_interrupt");
    ret_vec.push_back("eop_eop_in_4_interrupt");
    ret_vec.push_back("eop_eop_in_5_interrupt");
    ret_vec.push_back("eop_eop_in_6_interrupt");
    ret_vec.push_back("eop_eop_in_7_interrupt");
    ret_vec.push_back("eop_eop_in_8_interrupt");
    ret_vec.push_back("eop_eop_in_9_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_pbus_violation_in_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_xoff_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("timeout_0_enable");
    ret_vec.push_back("timeout_1_enable");
    ret_vec.push_back("timeout_2_enable");
    ret_vec.push_back("timeout_3_enable");
    ret_vec.push_back("timeout_4_enable");
    ret_vec.push_back("timeout_5_enable");
    ret_vec.push_back("timeout_6_enable");
    ret_vec.push_back("timeout_7_enable");
    ret_vec.push_back("timeout_8_enable");
    ret_vec.push_back("timeout_9_enable");
    ret_vec.push_back("timeout_10_enable");
    ret_vec.push_back("timeout_11_enable");
    ret_vec.push_back("timeout_12_enable");
    ret_vec.push_back("timeout_13_enable");
    ret_vec.push_back("timeout_14_enable");
    ret_vec.push_back("timeout_15_enable");
    ret_vec.push_back("timeout_16_enable");
    ret_vec.push_back("timeout_17_enable");
    ret_vec.push_back("timeout_18_enable");
    ret_vec.push_back("timeout_19_enable");
    ret_vec.push_back("timeout_20_enable");
    ret_vec.push_back("timeout_21_enable");
    ret_vec.push_back("timeout_22_enable");
    ret_vec.push_back("timeout_23_enable");
    ret_vec.push_back("timeout_24_enable");
    ret_vec.push_back("timeout_25_enable");
    ret_vec.push_back("timeout_26_enable");
    ret_vec.push_back("timeout_27_enable");
    ret_vec.push_back("timeout_28_enable");
    ret_vec.push_back("timeout_29_enable");
    ret_vec.push_back("timeout_30_enable");
    ret_vec.push_back("timeout_31_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_xoff_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("timeout_0_interrupt");
    ret_vec.push_back("timeout_1_interrupt");
    ret_vec.push_back("timeout_2_interrupt");
    ret_vec.push_back("timeout_3_interrupt");
    ret_vec.push_back("timeout_4_interrupt");
    ret_vec.push_back("timeout_5_interrupt");
    ret_vec.push_back("timeout_6_interrupt");
    ret_vec.push_back("timeout_7_interrupt");
    ret_vec.push_back("timeout_8_interrupt");
    ret_vec.push_back("timeout_9_interrupt");
    ret_vec.push_back("timeout_10_interrupt");
    ret_vec.push_back("timeout_11_interrupt");
    ret_vec.push_back("timeout_12_interrupt");
    ret_vec.push_back("timeout_13_interrupt");
    ret_vec.push_back("timeout_14_interrupt");
    ret_vec.push_back("timeout_15_interrupt");
    ret_vec.push_back("timeout_16_interrupt");
    ret_vec.push_back("timeout_17_interrupt");
    ret_vec.push_back("timeout_18_interrupt");
    ret_vec.push_back("timeout_19_interrupt");
    ret_vec.push_back("timeout_20_interrupt");
    ret_vec.push_back("timeout_21_interrupt");
    ret_vec.push_back("timeout_22_interrupt");
    ret_vec.push_back("timeout_23_interrupt");
    ret_vec.push_back("timeout_24_interrupt");
    ret_vec.push_back("timeout_25_interrupt");
    ret_vec.push_back("timeout_26_interrupt");
    ret_vec.push_back("timeout_27_interrupt");
    ret_vec.push_back("timeout_28_interrupt");
    ret_vec.push_back("timeout_29_interrupt");
    ret_vec.push_back("timeout_30_interrupt");
    ret_vec.push_back("timeout_31_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_hbm_xoff_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_ht_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable_enable");
    ret_vec.push_back("correctable_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_mtu_intreg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable_interrupt");
    ret_vec.push_back("correctable_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_mtu_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_rb_int_enable_clear_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rb_uncorrectable_enable");
    ret_vec.push_back("rb_correctable_enable");
    ret_vec.push_back("cdt_uncorrectable_enable");
    ret_vec.push_back("cdt_correctable_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_rb_int_test_set_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rb_uncorrectable_interrupt");
    ret_vec.push_back("rb_correctable_interrupt");
    ret_vec.push_back("cdt_uncorrectable_interrupt");
    ret_vec.push_back("cdt_correctable_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_ecc_hbm_rb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_test_set.get_fields(level-1)) {
            ret_vec.push_back("int_test_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_set.get_fields(level-1)) {
            ret_vec.push_back("int_enable_set." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_clear.get_fields(level-1)) {
            ret_vec.push_back("int_enable_clear." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_intreg_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_ecc_hbm_mtu_interrupt");
    ret_vec.push_back("int_ecc_hbm_rb_interrupt");
    ret_vec.push_back("int_ecc_hbm_wb_interrupt");
    ret_vec.push_back("int_ecc_hbm_ht_interrupt");
    ret_vec.push_back("int_hbm_xoff_interrupt");
    ret_vec.push_back("int_hbm_pbus_violation_in_interrupt");
    ret_vec.push_back("int_hbm_pbus_violation_out_interrupt");
    ret_vec.push_back("int_hbm_drop_interrupt");
    ret_vec.push_back("int_hbm_stop_interrupt");
    ret_vec.push_back("int_hbm_axi_err_rsp_interrupt");
    ret_vec.push_back("int_hbm_drop_emergency_interrupt");
    ret_vec.push_back("int_hbm_drop_write_ack_interrupt");
    ret_vec.push_back("int_hbm_drop_ctrl_interrupt");
    ret_vec.push_back("int_hbm_drop_threshold_interrupt");
    ret_vec.push_back("int_hbm_truncate_no_interrupt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_int_groups_int_enable_rw_reg_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("int_ecc_hbm_mtu_enable");
    ret_vec.push_back("int_ecc_hbm_rb_enable");
    ret_vec.push_back("int_ecc_hbm_wb_enable");
    ret_vec.push_back("int_ecc_hbm_ht_enable");
    ret_vec.push_back("int_hbm_xoff_enable");
    ret_vec.push_back("int_hbm_pbus_violation_in_enable");
    ret_vec.push_back("int_hbm_pbus_violation_out_enable");
    ret_vec.push_back("int_hbm_drop_enable");
    ret_vec.push_back("int_hbm_stop_enable");
    ret_vec.push_back("int_hbm_axi_err_rsp_enable");
    ret_vec.push_back("int_hbm_drop_emergency_enable");
    ret_vec.push_back("int_hbm_drop_write_ack_enable");
    ret_vec.push_back("int_hbm_drop_ctrl_enable");
    ret_vec.push_back("int_hbm_drop_threshold_enable");
    ret_vec.push_back("int_hbm_truncate_no_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_intgrp_status_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : intreg.get_fields(level-1)) {
            ret_vec.push_back("intreg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_enable_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_enable_rw_reg." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_rw_reg.get_fields(level-1)) {
            ret_vec.push_back("int_rw_reg." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_tx_pend_acks_wm_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_eth_pend_acks_wm_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_wb_wm_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_wb_wm_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_r2a_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("command");
    ret_vec.push_back("current_credit");
    ret_vec.push_back("quota");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_r2a_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_mem_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rsvd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_mem_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : entry.get_fields(level-1)) {
            ret_vec.push_back("entry." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_cdt_entry_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("command");
    ret_vec.push_back("current_credit");
    ret_vec.push_back("quota");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_dhs_hbm_cdt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm_axi_timestamp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("write");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm_axi_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("read");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm_axi_pyld_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("read");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm_axi_rpl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("read");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_clear_context_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("counters");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_clear_context_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("counters");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_xoff_force_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("xoff");
    ret_vec.push_back("xon");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_xoff_timeout_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("enable");
    ret_vec.push_back("auto_xon");
    ret_vec.push_back("auto_clear");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_wb_duty_cycle_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("write");
    ret_vec.push_back("gather");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_flush_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("context");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_flush_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("context");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_reset_context_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("valid");
    ret_vec.push_back("index");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_reset_context_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("valid");
    ret_vec.push_back("index");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_qdepth_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("rsvd");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_parser_snap_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ctrl_oui");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_cut_thru_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_timestamp_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_pend_acks_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_pend_acks_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_wb_depth_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("value");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm8_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm8_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm8_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm8_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm8_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm7_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm7_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm7_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm7_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm7_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm6_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm6_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm6_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm6_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm6_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm5_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm5_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm5_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm5_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm5_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm4_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm4_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm4_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm4_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm4_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm3_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm3_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm3_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm3_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm3_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm2_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm2_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm2_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm2_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm2_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm1_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm1_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm1_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm1_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm1_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sat_hbm0_ctrl_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm0_truncate_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm0_write_ack_full_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm0_write_ack_filling_up_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cnt_hbm0_emergency_stop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("drop");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_r2a_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("timer");
    ret_vec.push_back("enable_wrr");
    ret_vec.push_back("strict_priority");
    ret_vec.push_back("strict_priority_bypass_timer");
    ret_vec.push_back("selection");
    ret_vec.push_back("dhs_selection");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_axi_base_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_axi_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ctrl_rresp");
    ret_vec.push_back("ctrl_rid");
    ret_vec.push_back("pyld_rid");
    ret_vec.push_back("pyld_rresp");
    ret_vec.push_back("r2a_bid");
    ret_vec.push_back("r2a_bresp");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_15_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_14_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_13_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_12_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_11_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_10_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_8_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_tx_context_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_31_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_30_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_29_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_28_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_27_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_26_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_25_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_24_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_23_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_22_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_21_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_20_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_19_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_18_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_17_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_16_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_15_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_14_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_13_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_12_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_11_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_10_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_9_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_8_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_7_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_6_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_5_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_4_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_3_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_2_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_1_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_eth_context_0_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("depth");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("xoff_timeout_iq");
    ret_vec.push_back("xoff_timeout_port");
    ret_vec.push_back("tx_ctrl_init_head_done");
    ret_vec.push_back("tx_ctrl_init_tail_done");
    ret_vec.push_back("eth_ctrl_init_head_done");
    ret_vec.push_back("eth_ctrl_init_tail_done");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_ctrl_init_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("head_start");
    ret_vec.push_back("tail_start");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base");
    ret_vec.push_back("mem_sz");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_tx_payload_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base");
    ret_vec.push_back("mem_sz");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_ctrl_init_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("head_start");
    ret_vec.push_back("tail_start");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_ctrl_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base");
    ret_vec.push_back("mem_sz");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_eth_payload_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("base");
    ret_vec.push_back("mem_sz");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_threshold_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("xoff");
    ret_vec.push_back("xon");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_bist_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ht_eth_tail_done_fail");
    ret_vec.push_back("ht_eth_tail_done_pass");
    ret_vec.push_back("ht_eth_head_done_fail");
    ret_vec.push_back("ht_eth_head_done_pass");
    ret_vec.push_back("ht_tx_tail_done_fail");
    ret_vec.push_back("ht_tx_tail_done_pass");
    ret_vec.push_back("ht_tx_head_done_fail");
    ret_vec.push_back("ht_tx_head_done_pass");
    ret_vec.push_back("hbm_write_fifo_done_fail");
    ret_vec.push_back("hbm_write_fifo_done_pass");
    ret_vec.push_back("hbm_read_fifo_done_fail");
    ret_vec.push_back("hbm_read_fifo_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_ecc_hbm_ht_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_ht_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("eth_head_ecc_disable_cor");
    ret_vec.push_back("eth_head_ecc_disable_det");
    ret_vec.push_back("eth_head_dhs_eccbypass");
    ret_vec.push_back("eth_tail_ecc_disable_cor");
    ret_vec.push_back("eth_tail_ecc_disable_det");
    ret_vec.push_back("eth_tail_dhs_eccbypass");
    ret_vec.push_back("tx_head_dhs_eccbypass");
    ret_vec.push_back("tx_tail_dhs_eccbypass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_axi_write_attr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cache");
    ret_vec.push_back("prot");
    ret_vec.push_back("qos");
    ret_vec.push_back("lock");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_axi_read_attr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cache");
    ret_vec.push_back("prot");
    ret_vec.push_back("qos");
    ret_vec.push_back("lock");
    ret_vec.push_back("rpl_cache");
    ret_vec.push_back("rpl_prot");
    ret_vec.push_back("rpl_qos");
    ret_vec.push_back("rpl_lock");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_wb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("ecc_correctable");
    ret_vec.push_back("ecc_uncorrectable");
    ret_vec.push_back("ecc_syndrome");
    ret_vec.push_back("ecc_addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_hbm_rb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("init_done");
    ret_vec.push_back("cdt_ecc_correctable");
    ret_vec.push_back("cdt_ecc_uncorrectable");
    ret_vec.push_back("rb_ecc_correctable");
    ret_vec.push_back("rb_ecc_uncorrectable");
    ret_vec.push_back("rb_ecc_syndrome");
    ret_vec.push_back("rb_ecc_addr");
    ret_vec.push_back("cdt_ecc_syndrome");
    ret_vec.push_back("cdt_ecc_addr");
    ret_vec.push_back("bist_done_fail");
    ret_vec.push_back("bist_done_pass");
    ret_vec.push_back("hct_init_done");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_wb_drop_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("threshold");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_wb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("xoff_threshold");
    ret_vec.push_back("xon_threshold");
    ret_vec.push_back("ack_fifo_xoff_threshold");
    ret_vec.push_back("ack_fifo_xon_threshold");
    ret_vec.push_back("ecc_disable_det");
    ret_vec.push_back("ecc_disable_cor");
    ret_vec.push_back("dhs_eccbypass");
    ret_vec.push_back("bist_run");
    ret_vec.push_back("addr_swizzle");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_xoff_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("timeout");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dhs_mem_address");
    ret_vec.push_back("mtu_dhs_selection");
    ret_vec.push_back("debug_port_enable");
    ret_vec.push_back("debug_port_select");
    ret_vec.push_back("bist_run_tx_head");
    ret_vec.push_back("bist_run_tx_tail");
    ret_vec.push_back("bist_run_eth_head");
    ret_vec.push_back("bist_run_eth_tail");
    ret_vec.push_back("control_sw_reset");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_spare_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("data");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_rb_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("mem_ecc_disable_cor");
    ret_vec.push_back("mem_ecc_disable_det");
    ret_vec.push_back("mem_dhs_eccbypass");
    ret_vec.push_back("enable_wrr");
    ret_vec.push_back("cdt_dhs_selection");
    ret_vec.push_back("hct_dhs_eccbypass");
    ret_vec.push_back("ecc_hct_disable_cor");
    ret_vec.push_back("ecc_hct_disable_det");
    ret_vec.push_back("bist_run");
    ret_vec.push_back("hct_init_start");
    ret_vec.push_back("addr_swizzle");
    ret_vec.push_back("max_arlen");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_cfg_hbm_cdt_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("cfg_hbm_cdt");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_sta_ecc_hbm_mtu_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("uncorrectable");
    ret_vec.push_back("correctable");
    ret_vec.push_back("syndrome");
    ret_vec.push_back("addr");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_csr_intr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    ret_vec.push_back("dowstream");
    ret_vec.push_back("dowstream_enable");
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL

#ifndef EXCLUDE_PER_FIELD_CNTRL
std::vector<string> cap_pbchbm_csr_t::get_fields(int level) const { 
    std::vector<string> ret_vec;
    if(level == 0) return ret_vec;
    ret_vec.push_back("all");

    {
        for(auto tmp_vec : csr_intr.get_fields(level-1)) {
            ret_vec.push_back("csr_intr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_ecc_hbm_mtu.get_fields(level-1)) {
            ret_vec.push_back("sta_ecc_hbm_mtu." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_cdt.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_cdt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_rb.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_rb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_spare.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_spare." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_xoff.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_xoff." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_wb.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_wb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_wb_drop.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_wb_drop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_rb.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_rb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_wb.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_wb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_axi_read_attr.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_axi_read_attr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_axi_write_attr.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_axi_write_attr." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_ht.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_ht." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_ecc_hbm_ht.get_fields(level-1)) {
            ret_vec.push_back("sta_ecc_hbm_ht." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_bist.get_fields(level-1)) {
            ret_vec.push_back("sta_bist." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_threshold.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_threshold." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_payload.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_payload." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_ctrl.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_ctrl_init.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_ctrl_init." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_payload.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_payload." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_ctrl.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_ctrl_init.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_ctrl_init." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_0.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_1.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_2.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_3.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_4.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_5.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_6.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_7.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_8.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_9.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_10.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_10." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_11.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_11." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_12.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_12." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_13.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_13." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_14.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_14." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_15.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_15." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_16.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_16." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_17.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_17." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_18.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_18." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_19.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_19." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_20.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_20." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_21.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_21." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_22.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_22." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_23.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_23." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_24.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_24." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_25.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_25." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_26.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_26." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_27.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_27." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_28.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_28." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_29.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_29." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_30.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_30." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_context_31.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_context_31." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_0.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_1.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_2.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_3.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_4.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_5.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_6.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_7.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_8.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_9.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_10.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_10." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_11.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_11." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_12.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_12." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_13.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_13." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_14.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_14." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_context_15.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_context_15." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_axi.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_axi." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_axi_base.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_axi_base." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_r2a.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_r2a." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm0_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm0_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm0_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm0_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm0_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm0_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm0_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm0_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm0_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm0_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm1_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm1_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm1_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm1_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm1_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm1_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm1_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm1_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm1_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm1_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm2_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm2_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm2_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm2_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm2_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm2_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm2_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm2_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm2_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm2_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm3_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm3_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm3_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm3_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm3_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm3_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm3_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm3_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm3_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm3_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm4_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm4_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm4_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm4_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm4_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm4_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm4_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm4_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm4_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm4_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm5_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm5_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm5_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm5_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm5_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm5_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm5_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm5_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm5_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm5_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm6_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm6_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm6_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm6_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm6_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm6_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm6_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm6_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm6_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm6_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm7_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm7_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm7_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm7_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm7_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm7_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm7_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm7_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm7_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm7_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm8_emergency_stop.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm8_emergency_stop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm8_write_ack_filling_up.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm8_write_ack_filling_up." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm8_write_ack_full.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm8_write_ack_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm8_truncate.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm8_truncate." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sat_hbm8_ctrl_full.get_fields(level-1)) {
            ret_vec.push_back("sat_hbm8_ctrl_full." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_wb_depth.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_wb_depth." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_eth_pend_acks.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_eth_pend_acks." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_tx_pend_acks.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_tx_pend_acks." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : sta_hbm_timestamp.get_fields(level-1)) {
            ret_vec.push_back("sta_hbm_timestamp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_cut_thru.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_cut_thru." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_parser_snap.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_parser_snap." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_qdepth.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_qdepth." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_reset_context.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_reset_context." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_reset_context.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_reset_context." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_flush.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_flush." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_flush.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_flush." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_wb_duty_cycle.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_wb_duty_cycle." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_xoff_timeout.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_xoff_timeout." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_xoff_force.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_xoff_force." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_eth_clear_context.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_eth_clear_context." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cfg_hbm_tx_clear_context.get_fields(level-1)) {
            ret_vec.push_back("cfg_hbm_tx_clear_context." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm_axi_rpl.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm_axi_rpl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm_axi_pyld.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm_axi_pyld." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm_axi_ctrl.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm_axi_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : cnt_hbm_axi_timestamp.get_fields(level-1)) {
            ret_vec.push_back("cnt_hbm_axi_timestamp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_cdt.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_cdt." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_mem.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_mem." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_r2a.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_r2a." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_wb_wm.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_wb_wm." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_eth_pend_acks_wm.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_eth_pend_acks_wm." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : dhs_hbm_tx_pend_acks_wm.get_fields(level-1)) {
            ret_vec.push_back("dhs_hbm_tx_pend_acks_wm." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_0.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_0." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_1.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_1." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_2.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_2." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_3.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_3." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_4.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_4." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_5.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_5." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_6.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_6." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_7.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_7." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_8.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_8." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : hbm_port_9.get_fields(level-1)) {
            ret_vec.push_back("hbm_port_9." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_groups.get_fields(level-1)) {
            ret_vec.push_back("int_groups." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_ecc_hbm_mtu.get_fields(level-1)) {
            ret_vec.push_back("int_ecc_hbm_mtu." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_ecc_hbm_rb.get_fields(level-1)) {
            ret_vec.push_back("int_ecc_hbm_rb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_ecc_hbm_wb.get_fields(level-1)) {
            ret_vec.push_back("int_ecc_hbm_wb." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_ecc_hbm_ht.get_fields(level-1)) {
            ret_vec.push_back("int_ecc_hbm_ht." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_xoff.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_xoff." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_pbus_violation_in.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_pbus_violation_in." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_pbus_violation_out.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_pbus_violation_out." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_drop.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_drop." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_axi_err_rsp.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_axi_err_rsp." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_drop_emergency.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_drop_emergency." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_drop_write_ack.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_drop_write_ack." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_drop_ctrl.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_drop_ctrl." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_drop_threshold.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_drop_threshold." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_truncate_no.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_truncate_no." + tmp_vec);
        }
    }
    {
        for(auto tmp_vec : int_hbm_stop.get_fields(level-1)) {
            ret_vec.push_back("int_hbm_stop." + tmp_vec);
        }
    }
    return ret_vec;
}
#endif //EXCLUDE_PER_FIELD_CNTRL
