package(default_visibility = ["//visibility:public"])

load("@org_pubref_rules_protobuf//cpp:rules.bzl", "cc_proto_library")
load("//nic/delphi/compiler:delphi.bzl", "delphi_compile")

# compile the proto file
delphi_compile(
    name = "example_gen",
    srcs = [ 'example.proto' ],
)

# compile the service and reactor
cc_library(
    name = "example_lib",
    srcs = [
        "example.cc",
        "example.hpp",
    ],
    hdrs = [
        "example.hpp",
    ],
    deps = [
        "//nic/delphi/sdk",
        ":example_gen",
    ],
)

# Compile the example binary
cc_binary(
    name = "example",
    srcs = [
        "example_main.cc"
    ],
    deps = [
        ":example_lib",
        "//nic/delphi/sdk",
    ],
    linkopts = [
#        "-lprotobuf",
        "-lev",
        "-L/usr/local/lib",
    ],
)

# run the tests
cc_test(
    name = "example_test",
    srcs = [
        "example_test.cc",
    ],
    linkopts = [
        "-lpthread",
        "-lev",
        "-L/usr/local/lib",
    ],
    deps = [
        "//:gtest",
        ":example_lib",
        "//nic/delphi/sdk",
    ],
    timeout="short",
)

# Following is generated by delphi.bzl
# genrule(
#     name = 'example_delphi_gen',
#     srcs = [ 'example.proto' ],
#     outs = [
#         'example.pb.cc',
#         'example.pb.h',
#         'example.delphi.cc',
#         'example.delphi.hpp',
#     ],
#     local = 1,
#     tools = ["//nic/delphi/compiler:delphi_compiler"],
#     cmd = "/usr/bin/python $(location //nic/delphi/compiler:delphi_compiler) -outdir $(GENDIR)/ -workspace ./ -input $< ",
#
# )
#
# cc_library(
#     name = "example_gen",
#     srcs = [
#     ":example.pb.cc",
#     ':example.pb.h',
#     ":example.delphi.cc",
#     ':example.delphi.hpp',
#     ],
#     deps = [
#         "//nic/delphi/sdk",
#     ],
# )
