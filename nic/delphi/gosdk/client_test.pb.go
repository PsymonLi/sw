// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_test.proto

/*
Package gosdk is a generated protocol buffer package.

It is generated from these files:
	client_test.proto

It has these top-level messages:
	IntfIndex_
	TestInterfaceSpec_
*/
package gosdk

import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Interface id
type IntfIndex_ struct {
	Ifidx uint32 `protobuf:"varint,1,opt,name=Ifidx" json:"Ifidx,omitempty"`
}

func (m *IntfIndex_) Reset()                    { *m = IntfIndex_{} }
func (m *IntfIndex_) String() string            { return proto.CompactTextString(m) }
func (*IntfIndex_) ProtoMessage()               {}
func (*IntfIndex_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IntfIndex_) GetIfidx() uint32 {
	if m != nil {
		return m.Ifidx
	}
	return 0
}

// spec part of the object
type TestInterfaceSpec_ struct {
	Meta       *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key        *IntfIndex_        `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	MacAddress string             `protobuf:"bytes,3,opt,name=MacAddress" json:"MacAddress,omitempty"`
}

func (m *TestInterfaceSpec_) Reset()                    { *m = TestInterfaceSpec_{} }
func (m *TestInterfaceSpec_) String() string            { return proto.CompactTextString(m) }
func (*TestInterfaceSpec_) ProtoMessage()               {}
func (*TestInterfaceSpec_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestInterfaceSpec_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TestInterfaceSpec_) GetKey() *IntfIndex_ {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TestInterfaceSpec_) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type delphiWrapper interface {
	bubbleSave()
}

type IntfIndex struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	ifidx     uint32
}

func (o *IntfIndex) GetIfidx() uint32 {
	return o.ifidx
}

func (o *IntfIndex) SetIfidx(val uint32) {
	o.ifidx = val
	o.bubbleSave()
}

func (o *IntfIndex) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *IntfIndex) save() {
}

func NewIntfIndex(sdkClient clientApi.Client) *IntfIndex {
	w := &IntfIndex{}
	w.sdkClient = sdkClient
	return w
}

func childNewIntfIndex(parent delphiWrapper, sdkClient clientApi.Client) *IntfIndex {
	w := NewIntfIndex(sdkClient)
	w.parent = parent
	return w
}

func childNewIntfIndexWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *IntfIndex) *IntfIndex {
	w := childNewIntfIndex(parent, sdkClient)
	w.ifidx = value.ifidx
	return w
}

func (o *IntfIndex) GetProtoMsg() *IntfIndex_ {
	return &IntfIndex_{
		Ifidx: o.ifidx,
	}
}

func (o *IntfIndex) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func newIntfIndexFromMessage(msg *IntfIndex_) *IntfIndex {
	return &IntfIndex{
		ifidx: msg.Ifidx,
	}
}

type TestInterfaceSpec struct {
	sdkClient  clientApi.Client
	parent     delphiWrapper
	meta       *delphi.ObjectMeta
	key        *IntfIndex
	macAddress string
}

func (o *TestInterfaceSpec) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *TestInterfaceSpec) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *TestInterfaceSpec) GetKey() *IntfIndex {
	return o.key
}

func (o *TestInterfaceSpec) GetMacAddress() string {
	return o.macAddress
}

func (o *TestInterfaceSpec) SetMacAddress(val string) {
	o.macAddress = val
	o.bubbleSave()
}

func (o *TestInterfaceSpec) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *TestInterfaceSpec) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *TestInterfaceSpec) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewTestInterfaceSpec(sdkClient clientApi.Client) *TestInterfaceSpec {
	w := &TestInterfaceSpec{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "TestInterfaceSpec",
	}
	w.key = childNewIntfIndex(w, sdkClient)
	return w
}

func NewTestInterfaceSpecWithKey(sdkClient clientApi.Client, key *IntfIndex) *TestInterfaceSpec {
	w := NewTestInterfaceSpec(sdkClient)
	w.key = childNewIntfIndexWithValue(w, sdkClient, key)
	return w
}

func GetTestInterfaceSpec(sdkClient clientApi.Client, key *IntfIndex) *TestInterfaceSpec {
	lookupKey := key.GetProtoMsg().String()
	b := sdkClient.GetObject("TestInterfaceSpec", lookupKey)
	if b == nil {
		return nil
	}
	o, ok := b.(*TestInterfaceSpec)
	if !ok {
		panic("Couldn't cast to TestInterfaceSpec")
	}
	return o
}

func childNewTestInterfaceSpec(parent delphiWrapper, sdkClient clientApi.Client) *TestInterfaceSpec {
	w := NewTestInterfaceSpec(sdkClient)
	w.parent = parent
	return w
}

func childNewTestInterfaceSpecWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *TestInterfaceSpec) *TestInterfaceSpec {
	w := childNewTestInterfaceSpec(parent, sdkClient)
	w.key = childNewIntfIndexWithValue(w, sdkClient, value.key)
	w.macAddress = value.macAddress
	return w
}

func (o *TestInterfaceSpec) GetProtoMsg() *TestInterfaceSpec_ {
	return &TestInterfaceSpec_{
		Meta:       o.meta,
		Key:        o.key.GetProtoMsg(),
		MacAddress: o.macAddress,
	}
}

func (o *TestInterfaceSpec) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *TestInterfaceSpec) GetKeyString() string {
	return obj.key.GetProtoMsg().String()
}

func (obj *TestInterfaceSpec) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(TestInterfaceSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnTestInterfaceSpecCreate(obj)
			} else {
				rctr.OnTestInterfaceSpecUpdate(obj)
			}
		} else {
			rctr.OnTestInterfaceSpecDelete(obj)
		}
	}
}

type TestInterfaceSpecReactor interface {
	OnTestInterfaceSpecCreate(obj *TestInterfaceSpec)
	OnTestInterfaceSpecUpdate(obj *TestInterfaceSpec)
	OnTestInterfaceSpecDelete(obj *TestInterfaceSpec)
}

func (obj *TestInterfaceSpec) GetPath() string {
	return "TestInterfaceSpec" + "|" + obj.GetKeyString()
}

func newTestInterfaceSpecFromMessage(msg *TestInterfaceSpec_) *TestInterfaceSpec {
	return &TestInterfaceSpec{
		meta:       msg.Meta,
		key:        newIntfIndexFromMessage(msg.Key),
		macAddress: msg.MacAddress,
	}
}

func testInterfaceSpecFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg TestInterfaceSpec_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newTestInterfaceSpecFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func TestInterfaceSpecMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("TestInterfaceSpec", mode)
}

func TestInterfaceSpecMountKey(client clientApi.Client, key *IntfIndex, mode delphi.MountMode) {
	keyString := key.GetProtoMsg().String()
	client.MountKindKey("TestInterfaceSpec", keyString, mode)
}

func TestInterfaceSpecWatch(client clientApi.Client, reactor TestInterfaceSpecReactor) {
	client.WatchKind("TestInterfaceSpec", reactor)
}

type TestInterfaceSpecIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *TestInterfaceSpecIterator) Next() *TestInterfaceSpec {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*TestInterfaceSpec)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func TestInterfaceSpecList(client clientApi.Client) *TestInterfaceSpecIterator {
	return &TestInterfaceSpecIterator{
		objects: client.List("TestInterfaceSpec"),
		cur:     0,
	}
}

func init() {
	proto.RegisterType((*IntfIndex_)(nil), "gosdk.IntfIndex_")
	proto.RegisterType((*TestInterfaceSpec_)(nil), "gosdk.TestInterfaceSpec_")
	clientApi.RegisterFactory("TestInterfaceSpec", testInterfaceSpecFactory)
}

func init() { proto.RegisterFile("client_test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x89, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d,
	0xcf, 0x2f, 0x4e, 0xc9, 0x96, 0xe2, 0x49, 0x49, 0xcd, 0x29, 0xc8, 0xc8, 0x84, 0x08, 0x2a, 0x29,
	0x71, 0x71, 0x79, 0xe6, 0x95, 0xa4, 0x79, 0xe6, 0xa5, 0xa4, 0x56, 0xc4, 0x0b, 0x89, 0x70, 0xb1,
	0x7a, 0xa6, 0x65, 0xa6, 0x54, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0x41, 0x38, 0x4a, 0xed,
	0x8c, 0x5c, 0x42, 0x21, 0xa9, 0xc5, 0x25, 0x9e, 0x79, 0x25, 0xa9, 0x45, 0x69, 0x89, 0xc9, 0xa9,
	0xc1, 0x05, 0xa9, 0xc9, 0xf1, 0x42, 0x6a, 0x5c, 0x2c, 0xbe, 0xa9, 0x25, 0x89, 0x60, 0xb5, 0xdc,
	0x46, 0x42, 0x7a, 0x50, 0x73, 0xfd, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0x40, 0x32, 0x41, 0x60, 0x79,
	0x21, 0x65, 0x2e, 0x66, 0xef, 0xd4, 0x4a, 0x09, 0x26, 0xb0, 0x32, 0x41, 0x3d, 0xb0, 0x2b, 0xf4,
	0x10, 0x96, 0x06, 0x81, 0x64, 0x85, 0xe4, 0xb8, 0xb8, 0x7c, 0x13, 0x93, 0x1d, 0x53, 0x52, 0x8a,
	0x52, 0x8b, 0x8b, 0x25, 0x98, 0x15, 0x18, 0x35, 0x38, 0x83, 0x90, 0x44, 0xac, 0x58, 0x1a, 0xa6,
	0x2b, 0x31, 0x26, 0xb1, 0x81, 0x1d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x70, 0xca, 0xab,
	0xf2, 0xde, 0x00, 0x00, 0x00,
}
