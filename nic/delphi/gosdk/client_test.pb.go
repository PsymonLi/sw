// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	interface.proto

It has these top-level messages:
	IntfIndex_
	InterfaceSpec_
*/
package gosdk

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	delphi "github.com/pensando/sw/nic/delphi/proto/delphi"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Interface id
type IntfIndex_ struct {
	Ifidx uint32 `protobuf:"varint,1,opt,name=Ifidx" json:"Ifidx,omitempty"`
}

func (m *IntfIndex_) Reset()                    { *m = IntfIndex_{} }
func (m *IntfIndex_) String() string            { return proto.CompactTextString(m) }
func (*IntfIndex_) ProtoMessage()               {}
func (*IntfIndex_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IntfIndex_) GetIfidx() uint32 {
	if m != nil {
		return m.Ifidx
	}
	return 0
}

// spec part of the object
type InterfaceSpec_ struct {
	Meta       *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key        *IntfIndex_        `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	MacAddress string             `protobuf:"bytes,3,opt,name=MacAddress" json:"MacAddress,omitempty"`
}

func (m *InterfaceSpec_) Reset()                    { *m = InterfaceSpec_{} }
func (m *InterfaceSpec_) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec_) ProtoMessage()               {}
func (*InterfaceSpec_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InterfaceSpec_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec_) GetKey() *IntfIndex_ {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *InterfaceSpec_) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

type delphiWrapper interface {
	bubbleSave()
}

type IntfIndex struct {
	sdkClient Client
	parent    delphiWrapper
	ifidx     uint32
}

func (o *IntfIndex) GetIfidx() uint32 {
	return o.ifidx
}

func (o *IntfIndex) SetIfidx(val uint32) {
	o.ifidx = val
	o.bubbleSave()
}

func (o *IntfIndex) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *IntfIndex) save() {
	panic("Not a delphi object!!")
}

func childNewIntfIndex(parent delphiWrapper, sdkClient Client) *IntfIndex {
	w := NewIntfIndex(sdkClient)
	w.parent = parent
	return w
}

func NewIntfIndex(sdkClient Client) *IntfIndex {
	w := &IntfIndex{}
	w.sdkClient = sdkClient
	return w
}

func (o *IntfIndex) GetProtoMsg() *IntfIndex_ {
	return &IntfIndex_{
		Ifidx: o.ifidx,
	}
}

func (o *IntfIndex) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func newIntfIndexFromMessage(msg *IntfIndex_) *IntfIndex {
	return &IntfIndex{
		ifidx: msg.Ifidx,
	}
}

type InterfaceSpec struct {
	sdkClient  Client
	parent     delphiWrapper
	meta       *delphi.ObjectMeta
	key        *IntfIndex
	macAddress string
}

func (o *InterfaceSpec) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *InterfaceSpec) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *InterfaceSpec) GetKey() *IntfIndex {
	return o.key
}

func (o *InterfaceSpec) GetMacAddress() string {
	return o.macAddress
}

func (o *InterfaceSpec) SetMacAddress(val string) {
	o.macAddress = val
	o.bubbleSave()
}

func (o *InterfaceSpec) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *InterfaceSpec) save() {
	o.sdkClient.SetObject(o)
}

func (o *InterfaceSpec) Delete() {
	o.sdkClient.DeleteObject(o)
}

func childNewInterfaceSpec(parent delphiWrapper, sdkClient Client) *InterfaceSpec {
	w := NewInterfaceSpec(sdkClient)
	w.parent = parent
	return w
}

func NewInterfaceSpec(sdkClient Client) *InterfaceSpec {
	w := &InterfaceSpec{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "InterfaceSpec",
	}
	w.key = childNewIntfIndex(w, sdkClient)
	return w
}

func (o *InterfaceSpec) GetProtoMsg() *InterfaceSpec_ {
	return &InterfaceSpec_{
		Meta:       o.meta,
		Key:        o.key.GetProtoMsg(),
		MacAddress: o.macAddress,
	}
}

func (o *InterfaceSpec) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *InterfaceSpec) GetKeyString() string {
	return obj.key.GetProtoMsg().String()
}

func (obj *InterfaceSpec) TriggerEvent(oldObj BaseObject, op delphi.ObjectOperation, rl []BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(InterfaceSpecReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnInterfaceSpecCreate(obj)
			} else {
				rctr.OnInterfaceSpecUpdate(obj)
			}
		} else {
			rctr.OnInterfaceSpecDelete(obj)
		}
	}
}

type InterfaceSpecReactor interface {
	OnInterfaceSpecCreate(obj *InterfaceSpec)
	OnInterfaceSpecUpdate(obj *InterfaceSpec)
	OnInterfaceSpecDelete(obj *InterfaceSpec)
}

func (obj *InterfaceSpec) GetPath() string {
	return "InterfaceSpec" + "|" + obj.GetKeyString()
}

func newInterfaceSpecFromMessage(msg *InterfaceSpec_) *InterfaceSpec {
	return &InterfaceSpec{
		meta:       msg.Meta,
		key:        newIntfIndexFromMessage(msg.Key),
		macAddress: msg.MacAddress,
	}
}

func interfaceSpecFactory(sdkClient Client, data []byte) (BaseObject, error) {
	var msg InterfaceSpec_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newInterfaceSpecFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func InterfaceSpecMount(client Client, mode delphi.MountMode) {
	client.MountKind("InterfaceSpec", mode)
}

func InterfaceSpecWatch(client Client, reactor InterfaceSpecReactor) {
	client.WatchKind("InterfaceSpec", reactor)
}

func init() {
	proto.RegisterType((*IntfIndex_)(nil), "example.IntfIndex_")
	proto.RegisterType((*InterfaceSpec_)(nil), "example.InterfaceSpec_")
	RegisterFactory("InterfaceSpec", interfaceSpecFactory)
}

func init() { proto.RegisterFile("interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x2b, 0x49,
	0x2d, 0x4a, 0x4b, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xad, 0x48,
	0xcc, 0x2d, 0xc8, 0x49, 0x95, 0x52, 0xc9, 0xcb, 0x4c, 0xd6, 0x4f, 0x49, 0xcd, 0x29, 0xc8, 0xc8,
	0xd4, 0x07, 0x4b, 0xc1, 0x38, 0x10, 0x0a, 0xa2, 0x5c, 0x49, 0x89, 0x8b, 0xcb, 0x33, 0xaf, 0x24,
	0xcd, 0x33, 0x2f, 0x25, 0xb5, 0x22, 0x5e, 0x48, 0x84, 0x8b, 0xd5, 0x33, 0x2d, 0x33, 0xa5, 0x42,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x37, 0x08, 0xc2, 0x51, 0x6a, 0x65, 0xe4, 0xe2, 0xf3, 0x84, 0x59,
	0x13, 0x5c, 0x90, 0x9a, 0x1c, 0x2f, 0xa4, 0xc6, 0xc5, 0xe2, 0x9b, 0x5a, 0x92, 0x08, 0x56, 0xc7,
	0x6d, 0x24, 0xa4, 0x07, 0x35, 0xd3, 0x3f, 0x29, 0x2b, 0x35, 0xb9, 0x04, 0x24, 0x13, 0x04, 0x96,
	0x17, 0x52, 0xe5, 0x62, 0xf6, 0x4e, 0xad, 0x94, 0x60, 0x02, 0x2b, 0x13, 0xd6, 0x83, 0xba, 0x4d,
	0x0f, 0x61, 0x65, 0x10, 0x48, 0x5e, 0x48, 0x8e, 0x8b, 0xcb, 0x37, 0x31, 0xd9, 0x31, 0x25, 0xa5,
	0x28, 0xb5, 0xb8, 0x58, 0x82, 0x59, 0x81, 0x51, 0x83, 0x33, 0x08, 0x49, 0xc4, 0x8a, 0xa5, 0x61,
	0xba, 0x12, 0x63, 0x12, 0x1b, 0xd8, 0xc9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xd7,
	0x32, 0x9d, 0xf4, 0x00, 0x00, 0x00,
}
