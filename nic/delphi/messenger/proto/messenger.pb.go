// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messenger.proto

/*
Package delphi_messenger is a generated protocol buffer package.

It is generated from these files:
	messenger.proto

It has these top-level messages:
	ObjectData
	MountData
	MountReqMsg
	MountRespMsg
	Message
	TestKey
	TestObject
*/
package delphi_messenger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message types
type MessageType int32

const (
	MessageType_Invalid    MessageType = 0
	MessageType_Notify     MessageType = 1
	MessageType_ChangeReq  MessageType = 2
	MessageType_StatusResp MessageType = 3
	MessageType_GetReq     MessageType = 4
	MessageType_GetResp    MessageType = 5
	MessageType_ListReq    MessageType = 6
	MessageType_ListResp   MessageType = 7
	MessageType_MountReq   MessageType = 8
	MessageType_MountResp  MessageType = 9
)

var MessageType_name = map[int32]string{
	0: "Invalid",
	1: "Notify",
	2: "ChangeReq",
	3: "StatusResp",
	4: "GetReq",
	5: "GetResp",
	6: "ListReq",
	7: "ListResp",
	8: "MountReq",
	9: "MountResp",
}
var MessageType_value = map[string]int32{
	"Invalid":    0,
	"Notify":     1,
	"ChangeReq":  2,
	"StatusResp": 3,
	"GetReq":     4,
	"GetResp":    5,
	"ListReq":    6,
	"ListResp":   7,
	"MountReq":   8,
	"MountResp":  9,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// message container for one object
type ObjectData struct {
	Meta *delphi.ObjectMeta     `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Op   delphi.ObjectOperation `protobuf:"varint,2,opt,name=Op,enum=delphi.ObjectOperation" json:"Op,omitempty"`
	Data []byte                 `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ObjectData) Reset()                    { *m = ObjectData{} }
func (m *ObjectData) String() string            { return proto.CompactTextString(m) }
func (*ObjectData) ProtoMessage()               {}
func (*ObjectData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectData) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ObjectData) GetOp() delphi.ObjectOperation {
	if m != nil {
		return m.Op
	}
	return delphi.ObjectOperation_InvalidOp
}

func (m *ObjectData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// mount data
type MountData struct {
	Kind string           `protobuf:"bytes,1,opt,name=Kind" json:"Kind,omitempty"`
	Key  string           `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Mode delphi.MountMode `protobuf:"varint,3,opt,name=Mode,enum=delphi.MountMode" json:"Mode,omitempty"`
}

func (m *MountData) Reset()                    { *m = MountData{} }
func (m *MountData) String() string            { return proto.CompactTextString(m) }
func (*MountData) ProtoMessage()               {}
func (*MountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MountData) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *MountData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MountData) GetMode() delphi.MountMode {
	if m != nil {
		return m.Mode
	}
	return delphi.MountMode_InvalidMode
}

// mount request
type MountReqMsg struct {
	ServiceName string       `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	ServiceID   uint32       `protobuf:"varint,2,opt,name=ServiceID" json:"ServiceID,omitempty"`
	Mounts      []*MountData `protobuf:"bytes,3,rep,name=Mounts" json:"Mounts,omitempty"`
}

func (m *MountReqMsg) Reset()                    { *m = MountReqMsg{} }
func (m *MountReqMsg) String() string            { return proto.CompactTextString(m) }
func (*MountReqMsg) ProtoMessage()               {}
func (*MountReqMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MountReqMsg) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MountReqMsg) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *MountReqMsg) GetMounts() []*MountData {
	if m != nil {
		return m.Mounts
	}
	return nil
}

// mount response
type MountRespMsg struct {
	ServiceName string        `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	ServiceID   uint32        `protobuf:"varint,2,opt,name=ServiceID" json:"ServiceID,omitempty"`
	Objects     []*ObjectData `protobuf:"bytes,6,rep,name=Objects" json:"Objects,omitempty"`
}

func (m *MountRespMsg) Reset()                    { *m = MountRespMsg{} }
func (m *MountRespMsg) String() string            { return proto.CompactTextString(m) }
func (*MountRespMsg) ProtoMessage()               {}
func (*MountRespMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MountRespMsg) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *MountRespMsg) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *MountRespMsg) GetObjects() []*ObjectData {
	if m != nil {
		return m.Objects
	}
	return nil
}

// all messages exchanged by delphi components are in this format
type Message struct {
	Type       MessageType   `protobuf:"varint,1,opt,name=Type,enum=delphi.messenger.MessageType" json:"Type,omitempty"`
	MessageId  uint64        `protobuf:"varint,2,opt,name=MessageId" json:"MessageId,omitempty"`
	ResponseTo uint64        `protobuf:"varint,3,opt,name=ResponseTo" json:"ResponseTo,omitempty"`
	Status     string        `protobuf:"bytes,4,opt,name=Status" json:"Status,omitempty"`
	Objects    []*ObjectData `protobuf:"bytes,6,rep,name=Objects" json:"Objects,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_Invalid
}

func (m *Message) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Message) GetResponseTo() uint64 {
	if m != nil {
		return m.ResponseTo
	}
	return 0
}

func (m *Message) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Message) GetObjects() []*ObjectData {
	if m != nil {
		return m.Objects
	}
	return nil
}

type TestKey struct {
	Idx uint32 `protobuf:"varint,1,opt,name=Idx" json:"Idx,omitempty"`
}

func (m *TestKey) Reset()                    { *m = TestKey{} }
func (m *TestKey) String() string            { return proto.CompactTextString(m) }
func (*TestKey) ProtoMessage()               {}
func (*TestKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TestKey) GetIdx() uint32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

type TestObject struct {
	Meta      *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key       *TestKey           `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	TestData1 string             `protobuf:"bytes,3,opt,name=TestData1" json:"TestData1,omitempty"`
	TestData2 string             `protobuf:"bytes,4,opt,name=TestData2" json:"TestData2,omitempty"`
	TestData3 string             `protobuf:"bytes,5,opt,name=TestData3" json:"TestData3,omitempty"`
	TestData4 string             `protobuf:"bytes,6,opt,name=TestData4" json:"TestData4,omitempty"`
	TestData5 string             `protobuf:"bytes,7,opt,name=TestData5" json:"TestData5,omitempty"`
}

func (m *TestObject) Reset()                    { *m = TestObject{} }
func (m *TestObject) String() string            { return proto.CompactTextString(m) }
func (*TestObject) ProtoMessage()               {}
func (*TestObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TestObject) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TestObject) GetKey() *TestKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TestObject) GetTestData1() string {
	if m != nil {
		return m.TestData1
	}
	return ""
}

func (m *TestObject) GetTestData2() string {
	if m != nil {
		return m.TestData2
	}
	return ""
}

func (m *TestObject) GetTestData3() string {
	if m != nil {
		return m.TestData3
	}
	return ""
}

func (m *TestObject) GetTestData4() string {
	if m != nil {
		return m.TestData4
	}
	return ""
}

func (m *TestObject) GetTestData5() string {
	if m != nil {
		return m.TestData5
	}
	return ""
}

func init() {
	proto.RegisterType((*ObjectData)(nil), "delphi.messenger.ObjectData")
	proto.RegisterType((*MountData)(nil), "delphi.messenger.MountData")
	proto.RegisterType((*MountReqMsg)(nil), "delphi.messenger.MountReqMsg")
	proto.RegisterType((*MountRespMsg)(nil), "delphi.messenger.MountRespMsg")
	proto.RegisterType((*Message)(nil), "delphi.messenger.Message")
	proto.RegisterType((*TestKey)(nil), "delphi.messenger.TestKey")
	proto.RegisterType((*TestObject)(nil), "delphi.messenger.TestObject")
	proto.RegisterEnum("delphi.messenger.MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("messenger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x89, 0x6b, 0xd7, 0x93, 0x1f, 0xcc, 0x1c, 0xc0, 0xd0, 0x82, 0x2a, 0x4b, 0xfc, 0x08,
	0x24, 0x4b, 0x75, 0x5a, 0x5e, 0x80, 0x4a, 0x28, 0x2a, 0x69, 0xa4, 0x6d, 0x0e, 0x5c, 0xdd, 0x7a,
	0x49, 0x8d, 0x5a, 0xdb, 0xcd, 0xba, 0x15, 0xb9, 0x72, 0xe0, 0x11, 0x78, 0x28, 0x5e, 0x88, 0x2b,
	0x3b, 0xe3, 0x4d, 0xec, 0x50, 0x0e, 0x08, 0x71, 0xdb, 0xf9, 0xbe, 0x4f, 0x33, 0xf3, 0xcd, 0x8c,
	0x0d, 0xf7, 0xaf, 0xa4, 0x52, 0x32, 0x9f, 0xcb, 0x45, 0x54, 0x2e, 0x8a, 0xaa, 0x40, 0x3f, 0x95,
	0x97, 0xe5, 0x45, 0x16, 0xad, 0xf1, 0x27, 0x7d, 0x83, 0x30, 0x1f, 0x5e, 0x03, 0x4c, 0xcf, 0x3e,
	0xcb, 0xf3, 0xea, 0x28, 0xa9, 0x12, 0x7c, 0x01, 0xf6, 0x44, 0x56, 0x49, 0x60, 0xed, 0x59, 0xaf,
	0x7a, 0x31, 0x46, 0x46, 0x5a, 0x2b, 0x88, 0x11, 0xcc, 0xe3, 0x4b, 0xe8, 0x4c, 0xcb, 0xa0, 0xa3,
	0x55, 0xc3, 0xf8, 0xd1, 0xa6, 0x6a, 0x5a, 0xca, 0x45, 0x52, 0x65, 0x45, 0x2e, 0xb4, 0x04, 0x11,
	0x6c, 0x4a, 0x1c, 0x74, 0xb5, 0xb4, 0x2f, 0xf8, 0x1d, 0x7e, 0x04, 0x6f, 0x52, 0xdc, 0xe4, 0x75,
	0x45, 0x2d, 0x38, 0xce, 0xf2, 0x94, 0x2b, 0x7a, 0x82, 0xdf, 0xe8, 0x43, 0xf7, 0x58, 0x2e, 0x39,
	0xbd, 0x27, 0xe8, 0x89, 0xcf, 0x75, 0x5f, 0x45, 0x2a, 0x39, 0xcd, 0x30, 0x7e, 0xb0, 0xaa, 0xc8,
	0x69, 0x88, 0x10, 0x4c, 0x87, 0x5f, 0x2d, 0xe8, 0x31, 0x26, 0xe4, 0xf5, 0x44, 0xcd, 0x71, 0x0f,
	0x7a, 0xa7, 0x72, 0x71, 0x9b, 0x9d, 0xcb, 0x93, 0xe4, 0x4a, 0x9a, 0x1a, 0x6d, 0x08, 0x77, 0xc1,
	0x33, 0xe1, 0xf8, 0x88, 0x0b, 0x0e, 0x44, 0x03, 0xe0, 0x08, 0x1c, 0x4e, 0xa7, 0x74, 0xe1, 0xae,
	0x1e, 0xc8, 0x4e, 0xf4, 0xfb, 0x34, 0xa3, 0xb5, 0x13, 0x61, 0xa4, 0xe1, 0x37, 0x0b, 0xfa, 0xa6,
	0x09, 0x55, 0xfe, 0x8f, 0x2e, 0xde, 0x82, 0x5b, 0x8f, 0x56, 0x05, 0x0e, 0xb7, 0xb1, 0x7b, 0xb7,
	0x8d, 0x66, 0x87, 0x62, 0x25, 0x0e, 0x7f, 0x58, 0xe0, 0x4e, 0xb4, 0x22, 0x99, 0x4b, 0xdc, 0x07,
	0x7b, 0xb6, 0x2c, 0xeb, 0xe2, 0xc3, 0xf8, 0xe9, 0x1f, 0x7c, 0xd4, 0x42, 0x12, 0x09, 0x96, 0x52,
	0x53, 0x06, 0x1c, 0xa7, 0xdc, 0x94, 0x2d, 0x1a, 0x00, 0x9f, 0x01, 0x90, 0xbf, 0x22, 0x57, 0x72,
	0x56, 0xf0, 0x5e, 0x6c, 0xd1, 0x42, 0xf0, 0x21, 0x38, 0xa7, 0x55, 0x52, 0xdd, 0xa8, 0xc0, 0x66,
	0xbf, 0x26, 0xfa, 0x67, 0x33, 0x3b, 0xe0, 0xce, 0xa4, 0xaa, 0xe8, 0x18, 0xf4, 0x79, 0x8c, 0xd3,
	0x2f, 0x6c, 0x65, 0x20, 0xe8, 0x19, 0xfe, 0xb4, 0x00, 0x88, 0xad, 0xc5, 0x7f, 0x7d, 0xc5, 0x6f,
	0x9a, 0x3b, 0xeb, 0xc5, 0x8f, 0xef, 0xf6, 0x61, 0x0a, 0xd6, 0x27, 0xa8, 0xc7, 0x41, 0x31, 0x75,
	0xb5, 0xcf, 0x7e, 0x3d, 0xd1, 0x00, 0x6d, 0x36, 0x36, 0x8e, 0x1b, 0xa0, 0xcd, 0x8e, 0x82, 0xad,
	0x4d, 0x76, 0xd4, 0x66, 0x0f, 0xf4, 0x50, 0x36, 0xd8, 0x83, 0x36, 0x7b, 0x18, 0xb8, 0x9b, 0xec,
	0xe1, 0xeb, 0xef, 0x74, 0xf1, 0xcd, 0xea, 0xb0, 0x07, 0xee, 0x38, 0xbf, 0x4d, 0x2e, 0xb3, 0xd4,
	0xbf, 0x87, 0x00, 0xce, 0x49, 0x51, 0x65, 0x9f, 0x96, 0xbe, 0x85, 0x03, 0xf0, 0xde, 0x5d, 0x24,
	0xda, 0x96, 0xfe, 0x34, 0xfc, 0x0e, 0x0e, 0x01, 0xea, 0x85, 0xd0, 0xca, 0xfc, 0x2e, 0x49, 0xdf,
	0x4b, 0xfa, 0x6c, 0x7c, 0x9b, 0x72, 0xf0, 0x5b, 0x13, 0x5b, 0x14, 0x7c, 0xc8, 0x14, 0x33, 0x0e,
	0xf6, 0x61, 0xbb, 0x0e, 0x34, 0xe5, 0x52, 0xb4, 0xfa, 0xd8, 0xfc, 0x6d, 0x2a, 0xb0, 0xbe, 0x7a,
	0xdf, 0x3b, 0x73, 0xf8, 0xf7, 0x32, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x43, 0x5a, 0x86, 0xc8,
	0x91, 0x04, 0x00, 0x00,
}
