// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

/*
Package delphi_client is a generated protocol buffer package.

It is generated from these files:
	client.proto

It has these top-level messages:
	DelphiClientStatus_
*/
package delphi_client

import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DelphiClientStatus_ struct {
	Meta      *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key       string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	ServiceId int32              `protobuf:"varint,3,opt,name=ServiceId" json:"ServiceId,omitempty"`
	Pid       int32              `protobuf:"varint,4,opt,name=Pid" json:"Pid,omitempty"`
	LastSeen  uint64             `protobuf:"varint,5,opt,name=LastSeen" json:"LastSeen,omitempty"`
}

func (m *DelphiClientStatus_) Reset()                    { *m = DelphiClientStatus_{} }
func (m *DelphiClientStatus_) String() string            { return proto.CompactTextString(m) }
func (*DelphiClientStatus_) ProtoMessage()               {}
func (*DelphiClientStatus_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DelphiClientStatus_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DelphiClientStatus_) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DelphiClientStatus_) GetServiceId() int32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *DelphiClientStatus_) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DelphiClientStatus_) GetLastSeen() uint64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

type delphiWrapper interface {
	bubbleSave()
}

type DelphiClientStatus struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	meta      *delphi.ObjectMeta
	key       string
	serviceId int32
	pid       int32
	lastSeen  uint64
}

func (o *DelphiClientStatus) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *DelphiClientStatus) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *DelphiClientStatus) GetKey() string {
	return o.key
}

func (o *DelphiClientStatus) SetKey(val string) {
	o.key = val
	o.bubbleSave()
}

func (o *DelphiClientStatus) GetServiceId() int32 {
	return o.serviceId
}

func (o *DelphiClientStatus) SetServiceId(val int32) {
	o.serviceId = val
	o.bubbleSave()
}

func (o *DelphiClientStatus) GetPid() int32 {
	return o.pid
}

func (o *DelphiClientStatus) SetPid(val int32) {
	o.pid = val
	o.bubbleSave()
}

func (o *DelphiClientStatus) GetLastSeen() uint64 {
	return o.lastSeen
}

func (o *DelphiClientStatus) SetLastSeen(val uint64) {
	o.lastSeen = val
	o.bubbleSave()
}

func (o *DelphiClientStatus) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *DelphiClientStatus) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *DelphiClientStatus) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewDelphiClientStatus(sdkClient clientApi.Client) *DelphiClientStatus {
	w := &DelphiClientStatus{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "DelphiClientStatus",
	}
	return w
}

func NewDelphiClientStatusWithKey(sdkClient clientApi.Client, key string) *DelphiClientStatus {
	w := NewDelphiClientStatus(sdkClient)
	w.SetKey(key)
	return w
}

func GetDelphiClientStatus(sdkClient clientApi.Client, key string) *DelphiClientStatus {
	lookupKey := fmt.Sprintf("%v", key)
	b := sdkClient.GetObject("DelphiClientStatus", lookupKey)
	if b == nil {
		return nil
	}
	o, ok := b.(*DelphiClientStatus)
	if !ok {
		panic("Couldn't cast to DelphiClientStatus")
	}
	return o
}

func childNewDelphiClientStatus(parent delphiWrapper, sdkClient clientApi.Client) *DelphiClientStatus {
	w := NewDelphiClientStatus(sdkClient)
	w.parent = parent
	return w
}

func childNewDelphiClientStatusWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *DelphiClientStatus) *DelphiClientStatus {
	w := childNewDelphiClientStatus(parent, sdkClient)
	w.key = value.key
	w.serviceId = value.serviceId
	w.pid = value.pid
	w.lastSeen = value.lastSeen
	return w
}

func (o *DelphiClientStatus) GetProtoMsg() *DelphiClientStatus_ {
	return &DelphiClientStatus_{
		Meta:      o.meta,
		Key:       o.key,
		ServiceId: o.serviceId,
		Pid:       o.pid,
		LastSeen:  o.lastSeen,
	}
}

func (o *DelphiClientStatus) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *DelphiClientStatus) GetKeyString() string {
	return fmt.Sprintf("%v", (obj.key))
}

func (obj *DelphiClientStatus) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(DelphiClientStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnDelphiClientStatusCreate(obj)
			} else {
				rctr.OnDelphiClientStatusUpdate(obj)
			}
		} else {
			rctr.OnDelphiClientStatusDelete(obj)
		}
	}
}

type DelphiClientStatusReactor interface {
	OnDelphiClientStatusCreate(obj *DelphiClientStatus)
	OnDelphiClientStatusUpdate(obj *DelphiClientStatus)
	OnDelphiClientStatusDelete(obj *DelphiClientStatus)
}

func (obj *DelphiClientStatus) GetPath() string {
	return "DelphiClientStatus" + "|" + obj.GetKeyString()
}

func newDelphiClientStatusFromMessage(msg *DelphiClientStatus_) *DelphiClientStatus {
	return &DelphiClientStatus{
		meta:      msg.Meta,
		key:       msg.Key,
		serviceId: msg.ServiceId,
		pid:       msg.Pid,
		lastSeen:  msg.LastSeen,
	}
}

func delphiClientStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg DelphiClientStatus_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newDelphiClientStatusFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func DelphiClientStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("DelphiClientStatus", mode)
}

func DelphiClientStatusMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	keyString := fmt.Sprintf("%v", key)
	client.MountKindKey("DelphiClientStatus", keyString, mode)
}

func DelphiClientStatusWatch(client clientApi.Client, reactor DelphiClientStatusReactor) {
	client.WatchKind("DelphiClientStatus", reactor)
}

type DelphiClientStatusIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *DelphiClientStatusIterator) Next() *DelphiClientStatus {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*DelphiClientStatus)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func DelphiClientStatusList(client clientApi.Client) *DelphiClientStatusIterator {
	return &DelphiClientStatusIterator{
		objects: client.List("DelphiClientStatus"),
		cur:     0,
	}
}

func init() {
	proto.RegisterType((*DelphiClientStatus_)(nil), "delphi_client.DelphiClientStatus_")
	clientApi.RegisterFactory("DelphiClientStatus", delphiClientStatusFactory)
}

func init() { proto.RegisterFile("client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x49, 0xcd, 0x29, 0xc8, 0xc8,
	0x8c, 0x87, 0x08, 0x4a, 0xa9, 0xe4, 0x65, 0x26, 0xeb, 0x43, 0x84, 0xf4, 0xc1, 0x0a, 0x60, 0x1c,
	0x08, 0x05, 0xd1, 0xa4, 0xb4, 0x90, 0x91, 0x4b, 0xd8, 0x05, 0x2c, 0xe0, 0x0c, 0xd6, 0x16, 0x5c,
	0x92, 0x58, 0x52, 0x5a, 0x1c, 0x2f, 0xa4, 0xc6, 0xc5, 0xe2, 0x9b, 0x5a, 0x92, 0x28, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa4, 0x07, 0xd5, 0xe4, 0x9f, 0x94, 0x95, 0x9a, 0x5c, 0x02, 0x92,
	0x09, 0x02, 0xcb, 0x0b, 0x09, 0x70, 0x31, 0x7b, 0xa7, 0x56, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0x98, 0x42, 0x32, 0x5c, 0x9c, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x9e, 0x29,
	0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x08, 0x01, 0x90, 0xfa, 0x80, 0xcc, 0x14, 0x09, 0x16,
	0xb0, 0x38, 0x88, 0x29, 0x24, 0xc5, 0xc5, 0xe1, 0x93, 0x58, 0x5c, 0x12, 0x9c, 0x9a, 0x9a, 0x27,
	0xc1, 0xaa, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe7, 0x5b, 0xb1, 0x34, 0x4c, 0x57, 0x62, 0x4c, 0x62,
	0x03, 0x3b, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xed, 0x7a, 0x4c, 0xef, 0x00, 0x00,
	0x00,
}
