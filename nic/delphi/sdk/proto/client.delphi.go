// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/pensando/sw/nic/delphi/sdk/proto/client.proto

/*
Package delphi_client is a generated protocol buffer package.

It is generated from these files:
	github.com/pensando/sw/nic/delphi/sdk/proto/client.proto

It has these top-level messages:
	DelphiClientStatus
*/
package delphi_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DelphiClientStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key         string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	ServiceId   int32              `protobuf:"varint,3,opt,name=ServiceId" json:"ServiceId,omitempty"`
	Pid         int32              `protobuf:"varint,4,opt,name=Pid" json:"Pid,omitempty"`
	LastSeen    uint64             `protobuf:"varint,5,opt,name=LastSeen" json:"LastSeen,omitempty"`
	IsOK        bool               `protobuf:"varint,6,opt,name=IsOK" json:"IsOK,omitempty"`
	ErrorString string             `protobuf:"bytes,7,opt,name=ErrorString" json:"ErrorString,omitempty"`
}

func (m *DelphiClientStatus) GetDelphiMessage() proto.Message {
	return m
}

func (m *DelphiClientStatus) GetDelphiMeta() *delphi.ObjectMeta {
	return m.Meta
}

func (m *DelphiClientStatus) SetDelphiMeta(meta *delphi.ObjectMeta) {
	m.Meta = meta
}

func (m *DelphiClientStatus) GetDelphiKey() string {
	return fmt.Sprintf("%v", m.Key)
}

func (m *DelphiClientStatus) GetDelphiKind() string {
	return "DelphiClientStatus"
}

func (m *DelphiClientStatus) GetDelphiPath() string {
	return fmt.Sprintf("%s|%s", m.GetDelphiKind(), m.GetDelphiKey())
}

func (m *DelphiClientStatus) DelphiClone() clientApi.BaseObject {
	obj, _ := proto.Clone(m).(*DelphiClientStatus)
	return obj
}

func DelphiClientStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("DelphiClientStatus", mode)
}

func DelphiClientStatusMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	client.MountKindKey("DelphiClientStatus", fmt.Sprintf("%v", key), mode)
}

func GetDelphiClientStatus(client clientApi.Client, key string) *DelphiClientStatus {
	o := client.GetObject("DelphiClientStatus", fmt.Sprintf("%v", key))
	if o == nil {
		return nil
	}
	obj, ok := o.(*DelphiClientStatus)
	if ok != true {
		panic("Cast failed")
	}
	return obj
}

func (m *DelphiClientStatus) IsPersistent() bool {
	return false
}
func DelphiClientStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg DelphiClientStatus
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	return &msg, nil
}

func DelphiClientStatusWatch(client clientApi.Client, reactor DelphiClientStatusReactor) {
	client.WatchKind("DelphiClientStatus", reactor)
}
func DelphiClientStatusList(client clientApi.Client) []*DelphiClientStatus {
	bobjs := client.List("DelphiClientStatus")
	objs := make([]*DelphiClientStatus, 0)
	for _, bobj := range bobjs {
		obj, _ := bobj.(*DelphiClientStatus)
		objs = append(objs, obj)
	}
	return objs
}
func (m *DelphiClientStatus) TriggerEvent(sdkClient clientApi.Client, old clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(DelphiClientStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if old == nil {
				rctr.OnDelphiClientStatusCreate(m)
			} else {
				oldObj, ok := old.(*DelphiClientStatus)
				if ok == false {
					panic("Not an DelphiClientStatus object")
				}
				rctr.OnDelphiClientStatusUpdate(oldObj, m)
			}
		} else {
			rctr.OnDelphiClientStatusDelete(m)
		}
	}
}

type DelphiClientStatusReactor interface {
	OnDelphiClientStatusCreate(obj *DelphiClientStatus)
	OnDelphiClientStatusUpdate(old *DelphiClientStatus, obj *DelphiClientStatus)
	OnDelphiClientStatusDelete(obj *DelphiClientStatus)
}

func (m *DelphiClientStatus) Reset()                    { *m = DelphiClientStatus{} }
func (m *DelphiClientStatus) String() string            { return proto.CompactTextString(m) }
func (*DelphiClientStatus) ProtoMessage()               {}
func (*DelphiClientStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DelphiClientStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DelphiClientStatus) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DelphiClientStatus) GetServiceId() int32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *DelphiClientStatus) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DelphiClientStatus) GetLastSeen() uint64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *DelphiClientStatus) GetIsOK() bool {
	if m != nil {
		return m.IsOK
	}
	return false
}

func (m *DelphiClientStatus) GetErrorString() string {
	if m != nil {
		return m.ErrorString
	}
	return ""
}

func init() {
	clientApi.RegisterFactory("DelphiClientStatus", DelphiClientStatusFactory)
	proto.RegisterType((*DelphiClientStatus)(nil), "delphi_client.DelphiClientStatus")
}

func init() {
	proto.RegisterFile("github.com/pensando/sw/nic/delphi/sdk/proto/client.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x89, 0x4d, 0x6b, 0x9b, 0x2a, 0xc8, 0x9c, 0x42, 0xf1, 0x10, 0x7a, 0x90, 0x9c, 0x1a,
	0xd0, 0x8b, 0x78, 0x55, 0x0f, 0xa5, 0x4a, 0x25, 0xfb, 0x00, 0xb2, 0x9b, 0x0c, 0x6d, 0xb4, 0x26,
	0x4b, 0x92, 0x2a, 0xde, 0x7c, 0x0b, 0xdf, 0xcc, 0xe7, 0x91, 0xcd, 0x8a, 0x7a, 0xfb, 0xff, 0xef,
	0x9b, 0x61, 0x18, 0x76, 0xb9, 0x71, 0x79, 0xbb, 0x6f, 0x16, 0x26, 0xbc, 0xa8, 0x16, 0x7d, 0xaa,
	0xbd, 0x0d, 0x2a, 0xbd, 0x29, 0xef, 0x8c, 0xb2, 0xb8, 0x6b, 0xb7, 0x4e, 0x25, 0xfb, 0xac, 0xda,
	0x18, 0x72, 0x50, 0x66, 0xe7, 0xd0, 0xe7, 0x45, 0x29, 0x70, 0xdc, 0xeb, 0xc7, 0x1e, 0xce, 0x8e,
	0xfa, 0xda, 0xcb, 0xf9, 0x17, 0x61, 0x70, 0x53, 0xc0, 0x75, 0xd1, 0x55, 0xae, 0xf3, 0x3e, 0xc1,
	0x19, 0xa3, 0xf7, 0x98, 0x6b, 0x4e, 0x04, 0x91, 0xd3, 0x73, 0x58, 0xfc, 0xec, 0xac, 0x9b, 0x27,
	0x34, 0xb9, 0x33, 0xba, 0x78, 0x38, 0x61, 0x83, 0x15, 0xbe, 0xf3, 0x03, 0x41, 0xe4, 0x44, 0x77,
	0x11, 0x4e, 0xd9, 0xa4, 0xc2, 0xf8, 0xea, 0x0c, 0x2e, 0x2d, 0x1f, 0x08, 0x22, 0x87, 0xfa, 0x0f,
	0x74, 0xf3, 0x0f, 0xce, 0x72, 0x5a, 0x78, 0x17, 0x61, 0xc6, 0xc6, 0x77, 0x75, 0xca, 0x15, 0xa2,
	0xe7, 0x43, 0x41, 0x24, 0xd5, 0xbf, 0x1d, 0x80, 0xd1, 0x65, 0x5a, 0xaf, 0xf8, 0x48, 0x10, 0x39,
	0xd6, 0x25, 0x83, 0x60, 0xd3, 0xdb, 0x18, 0x43, 0xac, 0x72, 0x74, 0x7e, 0xc3, 0x0f, 0xcb, 0xe5,
	0xff, 0xe8, 0x8a, 0x7e, 0x7c, 0xce, 0x49, 0x33, 0x2a, 0xff, 0x5d, 0x7c, 0x07, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x72, 0xa8, 0xb0, 0x38, 0x01, 0x00, 0x00,
}
