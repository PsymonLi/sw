// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

package goproto

import (
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/delphi/gosdk/gometrics"
	"github.com/pensando/sw/venice/utils/tsdb/metrics"
)

type Ppppportc4intcmacMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	LinkDn2Up metrics.Counter

	LinkUp2Dn metrics.Counter

	SecBusRst metrics.Counter

	RstUp2Dn metrics.Counter

	RstDn2Up metrics.Counter

	PortgateOpen2Close metrics.Counter

	LtssmStChanged metrics.Counter

	SecBusnumChanged metrics.Counter

	RcPme metrics.Counter

	RcAerr metrics.Counter

	RcSerr metrics.Counter

	RcHpe metrics.Counter

	RcEqReq metrics.Counter

	RcDpc metrics.Counter

	PmTurnoff metrics.Counter

	TxbfrOverflow metrics.Counter

	RxtlpErr metrics.Counter

	TlFlrReq metrics.Counter

	RcLegacyIntpinChanged metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc4intcmacMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc4intcmacMetrics) Size() int {
	sz := 0

	sz += mtr.LinkDn2Up.Size()

	sz += mtr.LinkUp2Dn.Size()

	sz += mtr.SecBusRst.Size()

	sz += mtr.RstUp2Dn.Size()

	sz += mtr.RstDn2Up.Size()

	sz += mtr.PortgateOpen2Close.Size()

	sz += mtr.LtssmStChanged.Size()

	sz += mtr.SecBusnumChanged.Size()

	sz += mtr.RcPme.Size()

	sz += mtr.RcAerr.Size()

	sz += mtr.RcSerr.Size()

	sz += mtr.RcHpe.Size()

	sz += mtr.RcEqReq.Size()

	sz += mtr.RcDpc.Size()

	sz += mtr.PmTurnoff.Size()

	sz += mtr.TxbfrOverflow.Size()

	sz += mtr.RxtlpErr.Size()

	sz += mtr.TlFlrReq.Size()

	sz += mtr.RcLegacyIntpinChanged.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc4intcmacMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.LinkDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkDn2Up.Size()

	mtr.LinkUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkUp2Dn.Size()

	mtr.SecBusRst = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusRst.Size()

	mtr.RstUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.RstUp2Dn.Size()

	mtr.RstDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.RstDn2Up.Size()

	mtr.PortgateOpen2Close = mtr.metrics.GetCounter(offset)
	offset += mtr.PortgateOpen2Close.Size()

	mtr.LtssmStChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.LtssmStChanged.Size()

	mtr.SecBusnumChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusnumChanged.Size()

	mtr.RcPme = mtr.metrics.GetCounter(offset)
	offset += mtr.RcPme.Size()

	mtr.RcAerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcAerr.Size()

	mtr.RcSerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcSerr.Size()

	mtr.RcHpe = mtr.metrics.GetCounter(offset)
	offset += mtr.RcHpe.Size()

	mtr.RcEqReq = mtr.metrics.GetCounter(offset)
	offset += mtr.RcEqReq.Size()

	mtr.RcDpc = mtr.metrics.GetCounter(offset)
	offset += mtr.RcDpc.Size()

	mtr.PmTurnoff = mtr.metrics.GetCounter(offset)
	offset += mtr.PmTurnoff.Size()

	mtr.TxbfrOverflow = mtr.metrics.GetCounter(offset)
	offset += mtr.TxbfrOverflow.Size()

	mtr.RxtlpErr = mtr.metrics.GetCounter(offset)
	offset += mtr.RxtlpErr.Size()

	mtr.TlFlrReq = mtr.metrics.GetCounter(offset)
	offset += mtr.TlFlrReq.Size()

	mtr.RcLegacyIntpinChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.RcLegacyIntpinChanged.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc4intcmacMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "LinkDn2Up" {
		return offset
	}
	offset += mtr.LinkDn2Up.Size()

	if fldName == "LinkUp2Dn" {
		return offset
	}
	offset += mtr.LinkUp2Dn.Size()

	if fldName == "SecBusRst" {
		return offset
	}
	offset += mtr.SecBusRst.Size()

	if fldName == "RstUp2Dn" {
		return offset
	}
	offset += mtr.RstUp2Dn.Size()

	if fldName == "RstDn2Up" {
		return offset
	}
	offset += mtr.RstDn2Up.Size()

	if fldName == "PortgateOpen2Close" {
		return offset
	}
	offset += mtr.PortgateOpen2Close.Size()

	if fldName == "LtssmStChanged" {
		return offset
	}
	offset += mtr.LtssmStChanged.Size()

	if fldName == "SecBusnumChanged" {
		return offset
	}
	offset += mtr.SecBusnumChanged.Size()

	if fldName == "RcPme" {
		return offset
	}
	offset += mtr.RcPme.Size()

	if fldName == "RcAerr" {
		return offset
	}
	offset += mtr.RcAerr.Size()

	if fldName == "RcSerr" {
		return offset
	}
	offset += mtr.RcSerr.Size()

	if fldName == "RcHpe" {
		return offset
	}
	offset += mtr.RcHpe.Size()

	if fldName == "RcEqReq" {
		return offset
	}
	offset += mtr.RcEqReq.Size()

	if fldName == "RcDpc" {
		return offset
	}
	offset += mtr.RcDpc.Size()

	if fldName == "PmTurnoff" {
		return offset
	}
	offset += mtr.PmTurnoff.Size()

	if fldName == "TxbfrOverflow" {
		return offset
	}
	offset += mtr.TxbfrOverflow.Size()

	if fldName == "RxtlpErr" {
		return offset
	}
	offset += mtr.RxtlpErr.Size()

	if fldName == "TlFlrReq" {
		return offset
	}
	offset += mtr.TlFlrReq.Size()

	if fldName == "RcLegacyIntpinChanged" {
		return offset
	}
	offset += mtr.RcLegacyIntpinChanged.Size()

	return offset
}

// SetLinkDn2Up sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetLinkDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkDn2Up"))
	return nil
}

// SetLinkUp2Dn sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetLinkUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkUp2Dn"))
	return nil
}

// SetSecBusRst sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetSecBusRst(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusRst"))
	return nil
}

// SetRstUp2Dn sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRstUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstUp2Dn"))
	return nil
}

// SetRstDn2Up sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRstDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstDn2Up"))
	return nil
}

// SetPortgateOpen2Close sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetPortgateOpen2Close(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortgateOpen2Close"))
	return nil
}

// SetLtssmStChanged sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetLtssmStChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LtssmStChanged"))
	return nil
}

// SetSecBusnumChanged sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetSecBusnumChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusnumChanged"))
	return nil
}

// SetRcPme sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcPme(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcPme"))
	return nil
}

// SetRcAerr sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcAerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcAerr"))
	return nil
}

// SetRcSerr sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcSerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcSerr"))
	return nil
}

// SetRcHpe sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcHpe(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcHpe"))
	return nil
}

// SetRcEqReq sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcEqReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcEqReq"))
	return nil
}

// SetRcDpc sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcDpc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcDpc"))
	return nil
}

// SetPmTurnoff sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetPmTurnoff(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PmTurnoff"))
	return nil
}

// SetTxbfrOverflow sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetTxbfrOverflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TxbfrOverflow"))
	return nil
}

// SetRxtlpErr sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRxtlpErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxtlpErr"))
	return nil
}

// SetTlFlrReq sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetTlFlrReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TlFlrReq"))
	return nil
}

// SetRcLegacyIntpinChanged sets cunter in shared memory
func (mtr *Ppppportc4intcmacMetrics) SetRcLegacyIntpinChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcLegacyIntpinChanged"))
	return nil
}

// Ppppportc4intcmacMetricsIterator is the iterator object
type Ppppportc4intcmacMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc4intcmacMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc4intcmacMetricsIterator) Next() *Ppppportc4intcmacMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc4intcmacMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc4intcmacMetricsIterator) Find(key uint64) (*Ppppportc4intcmacMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc4intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc4intcmacMetricsIterator) Create(key uint64) (*Ppppportc4intcmacMetrics, error) {
	tmtr := &Ppppportc4intcmacMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc4intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc4intcmacMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc4intcmacMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc4intcmacMetricsIterator returns an iterator
func NewPpppportc4intcmacMetricsIterator() (*Ppppportc4intcmacMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc4intcmacMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc4intcmacMetricsIterator{iter: iter}, nil
}

type Ppppportc4intceccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Rxbuf_0Uncorrectable metrics.Counter

	Rxbuf_1Uncorrectable metrics.Counter

	Rxbuf_2Uncorrectable metrics.Counter

	Rxbuf_3Uncorrectable metrics.Counter

	Rxbuf_0Correctable metrics.Counter

	Rxbuf_1Correctable metrics.Counter

	Rxbuf_2Correctable metrics.Counter

	Rxbuf_3Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc4intceccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc4intceccMetrics) Size() int {
	sz := 0

	sz += mtr.Rxbuf_0Uncorrectable.Size()

	sz += mtr.Rxbuf_1Uncorrectable.Size()

	sz += mtr.Rxbuf_2Uncorrectable.Size()

	sz += mtr.Rxbuf_3Uncorrectable.Size()

	sz += mtr.Rxbuf_0Correctable.Size()

	sz += mtr.Rxbuf_1Correctable.Size()

	sz += mtr.Rxbuf_2Correctable.Size()

	sz += mtr.Rxbuf_3Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc4intceccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Rxbuf_0Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	mtr.Rxbuf_1Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	mtr.Rxbuf_2Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	mtr.Rxbuf_3Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	mtr.Rxbuf_0Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Correctable.Size()

	mtr.Rxbuf_1Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Correctable.Size()

	mtr.Rxbuf_2Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Correctable.Size()

	mtr.Rxbuf_3Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc4intceccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Rxbuf_0Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	if fldName == "Rxbuf_1Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	if fldName == "Rxbuf_2Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	if fldName == "Rxbuf_3Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	if fldName == "Rxbuf_0Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_0Correctable.Size()

	if fldName == "Rxbuf_1Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_1Correctable.Size()

	if fldName == "Rxbuf_2Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_2Correctable.Size()

	if fldName == "Rxbuf_3Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_3Correctable.Size()

	return offset
}

// SetRxbuf_0Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_0Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Uncorrectable"))
	return nil
}

// SetRxbuf_1Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_1Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Uncorrectable"))
	return nil
}

// SetRxbuf_2Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_2Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Uncorrectable"))
	return nil
}

// SetRxbuf_3Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_3Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Uncorrectable"))
	return nil
}

// SetRxbuf_0Correctable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_0Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Correctable"))
	return nil
}

// SetRxbuf_1Correctable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_1Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Correctable"))
	return nil
}

// SetRxbuf_2Correctable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_2Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Correctable"))
	return nil
}

// SetRxbuf_3Correctable sets cunter in shared memory
func (mtr *Ppppportc4intceccMetrics) SetRxbuf_3Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Correctable"))
	return nil
}

// Ppppportc4intceccMetricsIterator is the iterator object
type Ppppportc4intceccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc4intceccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc4intceccMetricsIterator) Next() *Ppppportc4intceccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc4intceccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc4intceccMetricsIterator) Find(key uint64) (*Ppppportc4intceccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc4intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc4intceccMetricsIterator) Create(key uint64) (*Ppppportc4intceccMetrics, error) {
	tmtr := &Ppppportc4intceccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc4intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc4intceccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc4intceccMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc4intceccMetricsIterator returns an iterator
func NewPpppportc4intceccMetricsIterator() (*Ppppportc4intceccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc4intceccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc4intceccMetricsIterator{iter: iter}, nil
}

type Ppppportc5intcmacMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	LinkDn2Up metrics.Counter

	LinkUp2Dn metrics.Counter

	SecBusRst metrics.Counter

	RstUp2Dn metrics.Counter

	RstDn2Up metrics.Counter

	PortgateOpen2Close metrics.Counter

	LtssmStChanged metrics.Counter

	SecBusnumChanged metrics.Counter

	RcPme metrics.Counter

	RcAerr metrics.Counter

	RcSerr metrics.Counter

	RcHpe metrics.Counter

	RcEqReq metrics.Counter

	RcDpc metrics.Counter

	PmTurnoff metrics.Counter

	TxbfrOverflow metrics.Counter

	RxtlpErr metrics.Counter

	TlFlrReq metrics.Counter

	RcLegacyIntpinChanged metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc5intcmacMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc5intcmacMetrics) Size() int {
	sz := 0

	sz += mtr.LinkDn2Up.Size()

	sz += mtr.LinkUp2Dn.Size()

	sz += mtr.SecBusRst.Size()

	sz += mtr.RstUp2Dn.Size()

	sz += mtr.RstDn2Up.Size()

	sz += mtr.PortgateOpen2Close.Size()

	sz += mtr.LtssmStChanged.Size()

	sz += mtr.SecBusnumChanged.Size()

	sz += mtr.RcPme.Size()

	sz += mtr.RcAerr.Size()

	sz += mtr.RcSerr.Size()

	sz += mtr.RcHpe.Size()

	sz += mtr.RcEqReq.Size()

	sz += mtr.RcDpc.Size()

	sz += mtr.PmTurnoff.Size()

	sz += mtr.TxbfrOverflow.Size()

	sz += mtr.RxtlpErr.Size()

	sz += mtr.TlFlrReq.Size()

	sz += mtr.RcLegacyIntpinChanged.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc5intcmacMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.LinkDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkDn2Up.Size()

	mtr.LinkUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkUp2Dn.Size()

	mtr.SecBusRst = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusRst.Size()

	mtr.RstUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.RstUp2Dn.Size()

	mtr.RstDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.RstDn2Up.Size()

	mtr.PortgateOpen2Close = mtr.metrics.GetCounter(offset)
	offset += mtr.PortgateOpen2Close.Size()

	mtr.LtssmStChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.LtssmStChanged.Size()

	mtr.SecBusnumChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusnumChanged.Size()

	mtr.RcPme = mtr.metrics.GetCounter(offset)
	offset += mtr.RcPme.Size()

	mtr.RcAerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcAerr.Size()

	mtr.RcSerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcSerr.Size()

	mtr.RcHpe = mtr.metrics.GetCounter(offset)
	offset += mtr.RcHpe.Size()

	mtr.RcEqReq = mtr.metrics.GetCounter(offset)
	offset += mtr.RcEqReq.Size()

	mtr.RcDpc = mtr.metrics.GetCounter(offset)
	offset += mtr.RcDpc.Size()

	mtr.PmTurnoff = mtr.metrics.GetCounter(offset)
	offset += mtr.PmTurnoff.Size()

	mtr.TxbfrOverflow = mtr.metrics.GetCounter(offset)
	offset += mtr.TxbfrOverflow.Size()

	mtr.RxtlpErr = mtr.metrics.GetCounter(offset)
	offset += mtr.RxtlpErr.Size()

	mtr.TlFlrReq = mtr.metrics.GetCounter(offset)
	offset += mtr.TlFlrReq.Size()

	mtr.RcLegacyIntpinChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.RcLegacyIntpinChanged.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc5intcmacMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "LinkDn2Up" {
		return offset
	}
	offset += mtr.LinkDn2Up.Size()

	if fldName == "LinkUp2Dn" {
		return offset
	}
	offset += mtr.LinkUp2Dn.Size()

	if fldName == "SecBusRst" {
		return offset
	}
	offset += mtr.SecBusRst.Size()

	if fldName == "RstUp2Dn" {
		return offset
	}
	offset += mtr.RstUp2Dn.Size()

	if fldName == "RstDn2Up" {
		return offset
	}
	offset += mtr.RstDn2Up.Size()

	if fldName == "PortgateOpen2Close" {
		return offset
	}
	offset += mtr.PortgateOpen2Close.Size()

	if fldName == "LtssmStChanged" {
		return offset
	}
	offset += mtr.LtssmStChanged.Size()

	if fldName == "SecBusnumChanged" {
		return offset
	}
	offset += mtr.SecBusnumChanged.Size()

	if fldName == "RcPme" {
		return offset
	}
	offset += mtr.RcPme.Size()

	if fldName == "RcAerr" {
		return offset
	}
	offset += mtr.RcAerr.Size()

	if fldName == "RcSerr" {
		return offset
	}
	offset += mtr.RcSerr.Size()

	if fldName == "RcHpe" {
		return offset
	}
	offset += mtr.RcHpe.Size()

	if fldName == "RcEqReq" {
		return offset
	}
	offset += mtr.RcEqReq.Size()

	if fldName == "RcDpc" {
		return offset
	}
	offset += mtr.RcDpc.Size()

	if fldName == "PmTurnoff" {
		return offset
	}
	offset += mtr.PmTurnoff.Size()

	if fldName == "TxbfrOverflow" {
		return offset
	}
	offset += mtr.TxbfrOverflow.Size()

	if fldName == "RxtlpErr" {
		return offset
	}
	offset += mtr.RxtlpErr.Size()

	if fldName == "TlFlrReq" {
		return offset
	}
	offset += mtr.TlFlrReq.Size()

	if fldName == "RcLegacyIntpinChanged" {
		return offset
	}
	offset += mtr.RcLegacyIntpinChanged.Size()

	return offset
}

// SetLinkDn2Up sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetLinkDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkDn2Up"))
	return nil
}

// SetLinkUp2Dn sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetLinkUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkUp2Dn"))
	return nil
}

// SetSecBusRst sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetSecBusRst(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusRst"))
	return nil
}

// SetRstUp2Dn sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRstUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstUp2Dn"))
	return nil
}

// SetRstDn2Up sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRstDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstDn2Up"))
	return nil
}

// SetPortgateOpen2Close sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetPortgateOpen2Close(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortgateOpen2Close"))
	return nil
}

// SetLtssmStChanged sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetLtssmStChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LtssmStChanged"))
	return nil
}

// SetSecBusnumChanged sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetSecBusnumChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusnumChanged"))
	return nil
}

// SetRcPme sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcPme(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcPme"))
	return nil
}

// SetRcAerr sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcAerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcAerr"))
	return nil
}

// SetRcSerr sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcSerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcSerr"))
	return nil
}

// SetRcHpe sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcHpe(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcHpe"))
	return nil
}

// SetRcEqReq sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcEqReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcEqReq"))
	return nil
}

// SetRcDpc sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcDpc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcDpc"))
	return nil
}

// SetPmTurnoff sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetPmTurnoff(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PmTurnoff"))
	return nil
}

// SetTxbfrOverflow sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetTxbfrOverflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TxbfrOverflow"))
	return nil
}

// SetRxtlpErr sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRxtlpErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxtlpErr"))
	return nil
}

// SetTlFlrReq sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetTlFlrReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TlFlrReq"))
	return nil
}

// SetRcLegacyIntpinChanged sets cunter in shared memory
func (mtr *Ppppportc5intcmacMetrics) SetRcLegacyIntpinChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcLegacyIntpinChanged"))
	return nil
}

// Ppppportc5intcmacMetricsIterator is the iterator object
type Ppppportc5intcmacMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc5intcmacMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc5intcmacMetricsIterator) Next() *Ppppportc5intcmacMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc5intcmacMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc5intcmacMetricsIterator) Find(key uint64) (*Ppppportc5intcmacMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc5intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc5intcmacMetricsIterator) Create(key uint64) (*Ppppportc5intcmacMetrics, error) {
	tmtr := &Ppppportc5intcmacMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc5intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc5intcmacMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc5intcmacMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc5intcmacMetricsIterator returns an iterator
func NewPpppportc5intcmacMetricsIterator() (*Ppppportc5intcmacMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc5intcmacMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc5intcmacMetricsIterator{iter: iter}, nil
}

type Ppppportc5intceccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Rxbuf_0Uncorrectable metrics.Counter

	Rxbuf_1Uncorrectable metrics.Counter

	Rxbuf_2Uncorrectable metrics.Counter

	Rxbuf_3Uncorrectable metrics.Counter

	Rxbuf_0Correctable metrics.Counter

	Rxbuf_1Correctable metrics.Counter

	Rxbuf_2Correctable metrics.Counter

	Rxbuf_3Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc5intceccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc5intceccMetrics) Size() int {
	sz := 0

	sz += mtr.Rxbuf_0Uncorrectable.Size()

	sz += mtr.Rxbuf_1Uncorrectable.Size()

	sz += mtr.Rxbuf_2Uncorrectable.Size()

	sz += mtr.Rxbuf_3Uncorrectable.Size()

	sz += mtr.Rxbuf_0Correctable.Size()

	sz += mtr.Rxbuf_1Correctable.Size()

	sz += mtr.Rxbuf_2Correctable.Size()

	sz += mtr.Rxbuf_3Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc5intceccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Rxbuf_0Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	mtr.Rxbuf_1Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	mtr.Rxbuf_2Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	mtr.Rxbuf_3Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	mtr.Rxbuf_0Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Correctable.Size()

	mtr.Rxbuf_1Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Correctable.Size()

	mtr.Rxbuf_2Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Correctable.Size()

	mtr.Rxbuf_3Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc5intceccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Rxbuf_0Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	if fldName == "Rxbuf_1Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	if fldName == "Rxbuf_2Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	if fldName == "Rxbuf_3Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	if fldName == "Rxbuf_0Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_0Correctable.Size()

	if fldName == "Rxbuf_1Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_1Correctable.Size()

	if fldName == "Rxbuf_2Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_2Correctable.Size()

	if fldName == "Rxbuf_3Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_3Correctable.Size()

	return offset
}

// SetRxbuf_0Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_0Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Uncorrectable"))
	return nil
}

// SetRxbuf_1Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_1Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Uncorrectable"))
	return nil
}

// SetRxbuf_2Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_2Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Uncorrectable"))
	return nil
}

// SetRxbuf_3Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_3Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Uncorrectable"))
	return nil
}

// SetRxbuf_0Correctable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_0Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Correctable"))
	return nil
}

// SetRxbuf_1Correctable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_1Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Correctable"))
	return nil
}

// SetRxbuf_2Correctable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_2Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Correctable"))
	return nil
}

// SetRxbuf_3Correctable sets cunter in shared memory
func (mtr *Ppppportc5intceccMetrics) SetRxbuf_3Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Correctable"))
	return nil
}

// Ppppportc5intceccMetricsIterator is the iterator object
type Ppppportc5intceccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc5intceccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc5intceccMetricsIterator) Next() *Ppppportc5intceccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc5intceccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc5intceccMetricsIterator) Find(key uint64) (*Ppppportc5intceccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc5intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc5intceccMetricsIterator) Create(key uint64) (*Ppppportc5intceccMetrics, error) {
	tmtr := &Ppppportc5intceccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc5intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc5intceccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc5intceccMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc5intceccMetricsIterator returns an iterator
func NewPpppportc5intceccMetricsIterator() (*Ppppportc5intceccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc5intceccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc5intceccMetricsIterator{iter: iter}, nil
}

type Ppppportc6intcmacMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	LinkDn2Up metrics.Counter

	LinkUp2Dn metrics.Counter

	SecBusRst metrics.Counter

	RstUp2Dn metrics.Counter

	RstDn2Up metrics.Counter

	PortgateOpen2Close metrics.Counter

	LtssmStChanged metrics.Counter

	SecBusnumChanged metrics.Counter

	RcPme metrics.Counter

	RcAerr metrics.Counter

	RcSerr metrics.Counter

	RcHpe metrics.Counter

	RcEqReq metrics.Counter

	RcDpc metrics.Counter

	PmTurnoff metrics.Counter

	TxbfrOverflow metrics.Counter

	RxtlpErr metrics.Counter

	TlFlrReq metrics.Counter

	RcLegacyIntpinChanged metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc6intcmacMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc6intcmacMetrics) Size() int {
	sz := 0

	sz += mtr.LinkDn2Up.Size()

	sz += mtr.LinkUp2Dn.Size()

	sz += mtr.SecBusRst.Size()

	sz += mtr.RstUp2Dn.Size()

	sz += mtr.RstDn2Up.Size()

	sz += mtr.PortgateOpen2Close.Size()

	sz += mtr.LtssmStChanged.Size()

	sz += mtr.SecBusnumChanged.Size()

	sz += mtr.RcPme.Size()

	sz += mtr.RcAerr.Size()

	sz += mtr.RcSerr.Size()

	sz += mtr.RcHpe.Size()

	sz += mtr.RcEqReq.Size()

	sz += mtr.RcDpc.Size()

	sz += mtr.PmTurnoff.Size()

	sz += mtr.TxbfrOverflow.Size()

	sz += mtr.RxtlpErr.Size()

	sz += mtr.TlFlrReq.Size()

	sz += mtr.RcLegacyIntpinChanged.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc6intcmacMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.LinkDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkDn2Up.Size()

	mtr.LinkUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkUp2Dn.Size()

	mtr.SecBusRst = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusRst.Size()

	mtr.RstUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.RstUp2Dn.Size()

	mtr.RstDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.RstDn2Up.Size()

	mtr.PortgateOpen2Close = mtr.metrics.GetCounter(offset)
	offset += mtr.PortgateOpen2Close.Size()

	mtr.LtssmStChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.LtssmStChanged.Size()

	mtr.SecBusnumChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusnumChanged.Size()

	mtr.RcPme = mtr.metrics.GetCounter(offset)
	offset += mtr.RcPme.Size()

	mtr.RcAerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcAerr.Size()

	mtr.RcSerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcSerr.Size()

	mtr.RcHpe = mtr.metrics.GetCounter(offset)
	offset += mtr.RcHpe.Size()

	mtr.RcEqReq = mtr.metrics.GetCounter(offset)
	offset += mtr.RcEqReq.Size()

	mtr.RcDpc = mtr.metrics.GetCounter(offset)
	offset += mtr.RcDpc.Size()

	mtr.PmTurnoff = mtr.metrics.GetCounter(offset)
	offset += mtr.PmTurnoff.Size()

	mtr.TxbfrOverflow = mtr.metrics.GetCounter(offset)
	offset += mtr.TxbfrOverflow.Size()

	mtr.RxtlpErr = mtr.metrics.GetCounter(offset)
	offset += mtr.RxtlpErr.Size()

	mtr.TlFlrReq = mtr.metrics.GetCounter(offset)
	offset += mtr.TlFlrReq.Size()

	mtr.RcLegacyIntpinChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.RcLegacyIntpinChanged.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc6intcmacMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "LinkDn2Up" {
		return offset
	}
	offset += mtr.LinkDn2Up.Size()

	if fldName == "LinkUp2Dn" {
		return offset
	}
	offset += mtr.LinkUp2Dn.Size()

	if fldName == "SecBusRst" {
		return offset
	}
	offset += mtr.SecBusRst.Size()

	if fldName == "RstUp2Dn" {
		return offset
	}
	offset += mtr.RstUp2Dn.Size()

	if fldName == "RstDn2Up" {
		return offset
	}
	offset += mtr.RstDn2Up.Size()

	if fldName == "PortgateOpen2Close" {
		return offset
	}
	offset += mtr.PortgateOpen2Close.Size()

	if fldName == "LtssmStChanged" {
		return offset
	}
	offset += mtr.LtssmStChanged.Size()

	if fldName == "SecBusnumChanged" {
		return offset
	}
	offset += mtr.SecBusnumChanged.Size()

	if fldName == "RcPme" {
		return offset
	}
	offset += mtr.RcPme.Size()

	if fldName == "RcAerr" {
		return offset
	}
	offset += mtr.RcAerr.Size()

	if fldName == "RcSerr" {
		return offset
	}
	offset += mtr.RcSerr.Size()

	if fldName == "RcHpe" {
		return offset
	}
	offset += mtr.RcHpe.Size()

	if fldName == "RcEqReq" {
		return offset
	}
	offset += mtr.RcEqReq.Size()

	if fldName == "RcDpc" {
		return offset
	}
	offset += mtr.RcDpc.Size()

	if fldName == "PmTurnoff" {
		return offset
	}
	offset += mtr.PmTurnoff.Size()

	if fldName == "TxbfrOverflow" {
		return offset
	}
	offset += mtr.TxbfrOverflow.Size()

	if fldName == "RxtlpErr" {
		return offset
	}
	offset += mtr.RxtlpErr.Size()

	if fldName == "TlFlrReq" {
		return offset
	}
	offset += mtr.TlFlrReq.Size()

	if fldName == "RcLegacyIntpinChanged" {
		return offset
	}
	offset += mtr.RcLegacyIntpinChanged.Size()

	return offset
}

// SetLinkDn2Up sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetLinkDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkDn2Up"))
	return nil
}

// SetLinkUp2Dn sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetLinkUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkUp2Dn"))
	return nil
}

// SetSecBusRst sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetSecBusRst(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusRst"))
	return nil
}

// SetRstUp2Dn sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRstUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstUp2Dn"))
	return nil
}

// SetRstDn2Up sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRstDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstDn2Up"))
	return nil
}

// SetPortgateOpen2Close sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetPortgateOpen2Close(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortgateOpen2Close"))
	return nil
}

// SetLtssmStChanged sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetLtssmStChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LtssmStChanged"))
	return nil
}

// SetSecBusnumChanged sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetSecBusnumChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusnumChanged"))
	return nil
}

// SetRcPme sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcPme(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcPme"))
	return nil
}

// SetRcAerr sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcAerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcAerr"))
	return nil
}

// SetRcSerr sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcSerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcSerr"))
	return nil
}

// SetRcHpe sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcHpe(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcHpe"))
	return nil
}

// SetRcEqReq sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcEqReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcEqReq"))
	return nil
}

// SetRcDpc sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcDpc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcDpc"))
	return nil
}

// SetPmTurnoff sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetPmTurnoff(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PmTurnoff"))
	return nil
}

// SetTxbfrOverflow sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetTxbfrOverflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TxbfrOverflow"))
	return nil
}

// SetRxtlpErr sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRxtlpErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxtlpErr"))
	return nil
}

// SetTlFlrReq sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetTlFlrReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TlFlrReq"))
	return nil
}

// SetRcLegacyIntpinChanged sets cunter in shared memory
func (mtr *Ppppportc6intcmacMetrics) SetRcLegacyIntpinChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcLegacyIntpinChanged"))
	return nil
}

// Ppppportc6intcmacMetricsIterator is the iterator object
type Ppppportc6intcmacMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc6intcmacMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc6intcmacMetricsIterator) Next() *Ppppportc6intcmacMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc6intcmacMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc6intcmacMetricsIterator) Find(key uint64) (*Ppppportc6intcmacMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc6intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc6intcmacMetricsIterator) Create(key uint64) (*Ppppportc6intcmacMetrics, error) {
	tmtr := &Ppppportc6intcmacMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc6intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc6intcmacMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc6intcmacMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc6intcmacMetricsIterator returns an iterator
func NewPpppportc6intcmacMetricsIterator() (*Ppppportc6intcmacMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc6intcmacMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc6intcmacMetricsIterator{iter: iter}, nil
}

type Ppppportc6intceccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Rxbuf_0Uncorrectable metrics.Counter

	Rxbuf_1Uncorrectable metrics.Counter

	Rxbuf_2Uncorrectable metrics.Counter

	Rxbuf_3Uncorrectable metrics.Counter

	Rxbuf_0Correctable metrics.Counter

	Rxbuf_1Correctable metrics.Counter

	Rxbuf_2Correctable metrics.Counter

	Rxbuf_3Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc6intceccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc6intceccMetrics) Size() int {
	sz := 0

	sz += mtr.Rxbuf_0Uncorrectable.Size()

	sz += mtr.Rxbuf_1Uncorrectable.Size()

	sz += mtr.Rxbuf_2Uncorrectable.Size()

	sz += mtr.Rxbuf_3Uncorrectable.Size()

	sz += mtr.Rxbuf_0Correctable.Size()

	sz += mtr.Rxbuf_1Correctable.Size()

	sz += mtr.Rxbuf_2Correctable.Size()

	sz += mtr.Rxbuf_3Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc6intceccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Rxbuf_0Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	mtr.Rxbuf_1Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	mtr.Rxbuf_2Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	mtr.Rxbuf_3Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	mtr.Rxbuf_0Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Correctable.Size()

	mtr.Rxbuf_1Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Correctable.Size()

	mtr.Rxbuf_2Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Correctable.Size()

	mtr.Rxbuf_3Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc6intceccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Rxbuf_0Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	if fldName == "Rxbuf_1Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	if fldName == "Rxbuf_2Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	if fldName == "Rxbuf_3Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	if fldName == "Rxbuf_0Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_0Correctable.Size()

	if fldName == "Rxbuf_1Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_1Correctable.Size()

	if fldName == "Rxbuf_2Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_2Correctable.Size()

	if fldName == "Rxbuf_3Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_3Correctable.Size()

	return offset
}

// SetRxbuf_0Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_0Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Uncorrectable"))
	return nil
}

// SetRxbuf_1Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_1Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Uncorrectable"))
	return nil
}

// SetRxbuf_2Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_2Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Uncorrectable"))
	return nil
}

// SetRxbuf_3Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_3Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Uncorrectable"))
	return nil
}

// SetRxbuf_0Correctable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_0Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Correctable"))
	return nil
}

// SetRxbuf_1Correctable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_1Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Correctable"))
	return nil
}

// SetRxbuf_2Correctable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_2Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Correctable"))
	return nil
}

// SetRxbuf_3Correctable sets cunter in shared memory
func (mtr *Ppppportc6intceccMetrics) SetRxbuf_3Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Correctable"))
	return nil
}

// Ppppportc6intceccMetricsIterator is the iterator object
type Ppppportc6intceccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc6intceccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc6intceccMetricsIterator) Next() *Ppppportc6intceccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc6intceccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc6intceccMetricsIterator) Find(key uint64) (*Ppppportc6intceccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc6intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc6intceccMetricsIterator) Create(key uint64) (*Ppppportc6intceccMetrics, error) {
	tmtr := &Ppppportc6intceccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc6intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc6intceccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc6intceccMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc6intceccMetricsIterator returns an iterator
func NewPpppportc6intceccMetricsIterator() (*Ppppportc6intceccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc6intceccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc6intceccMetricsIterator{iter: iter}, nil
}

type Ppppportc7intcmacMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	LinkDn2Up metrics.Counter

	LinkUp2Dn metrics.Counter

	SecBusRst metrics.Counter

	RstUp2Dn metrics.Counter

	RstDn2Up metrics.Counter

	PortgateOpen2Close metrics.Counter

	LtssmStChanged metrics.Counter

	SecBusnumChanged metrics.Counter

	RcPme metrics.Counter

	RcAerr metrics.Counter

	RcSerr metrics.Counter

	RcHpe metrics.Counter

	RcEqReq metrics.Counter

	RcDpc metrics.Counter

	PmTurnoff metrics.Counter

	TxbfrOverflow metrics.Counter

	RxtlpErr metrics.Counter

	TlFlrReq metrics.Counter

	RcLegacyIntpinChanged metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc7intcmacMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc7intcmacMetrics) Size() int {
	sz := 0

	sz += mtr.LinkDn2Up.Size()

	sz += mtr.LinkUp2Dn.Size()

	sz += mtr.SecBusRst.Size()

	sz += mtr.RstUp2Dn.Size()

	sz += mtr.RstDn2Up.Size()

	sz += mtr.PortgateOpen2Close.Size()

	sz += mtr.LtssmStChanged.Size()

	sz += mtr.SecBusnumChanged.Size()

	sz += mtr.RcPme.Size()

	sz += mtr.RcAerr.Size()

	sz += mtr.RcSerr.Size()

	sz += mtr.RcHpe.Size()

	sz += mtr.RcEqReq.Size()

	sz += mtr.RcDpc.Size()

	sz += mtr.PmTurnoff.Size()

	sz += mtr.TxbfrOverflow.Size()

	sz += mtr.RxtlpErr.Size()

	sz += mtr.TlFlrReq.Size()

	sz += mtr.RcLegacyIntpinChanged.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc7intcmacMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.LinkDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkDn2Up.Size()

	mtr.LinkUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.LinkUp2Dn.Size()

	mtr.SecBusRst = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusRst.Size()

	mtr.RstUp2Dn = mtr.metrics.GetCounter(offset)
	offset += mtr.RstUp2Dn.Size()

	mtr.RstDn2Up = mtr.metrics.GetCounter(offset)
	offset += mtr.RstDn2Up.Size()

	mtr.PortgateOpen2Close = mtr.metrics.GetCounter(offset)
	offset += mtr.PortgateOpen2Close.Size()

	mtr.LtssmStChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.LtssmStChanged.Size()

	mtr.SecBusnumChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.SecBusnumChanged.Size()

	mtr.RcPme = mtr.metrics.GetCounter(offset)
	offset += mtr.RcPme.Size()

	mtr.RcAerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcAerr.Size()

	mtr.RcSerr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcSerr.Size()

	mtr.RcHpe = mtr.metrics.GetCounter(offset)
	offset += mtr.RcHpe.Size()

	mtr.RcEqReq = mtr.metrics.GetCounter(offset)
	offset += mtr.RcEqReq.Size()

	mtr.RcDpc = mtr.metrics.GetCounter(offset)
	offset += mtr.RcDpc.Size()

	mtr.PmTurnoff = mtr.metrics.GetCounter(offset)
	offset += mtr.PmTurnoff.Size()

	mtr.TxbfrOverflow = mtr.metrics.GetCounter(offset)
	offset += mtr.TxbfrOverflow.Size()

	mtr.RxtlpErr = mtr.metrics.GetCounter(offset)
	offset += mtr.RxtlpErr.Size()

	mtr.TlFlrReq = mtr.metrics.GetCounter(offset)
	offset += mtr.TlFlrReq.Size()

	mtr.RcLegacyIntpinChanged = mtr.metrics.GetCounter(offset)
	offset += mtr.RcLegacyIntpinChanged.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc7intcmacMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "LinkDn2Up" {
		return offset
	}
	offset += mtr.LinkDn2Up.Size()

	if fldName == "LinkUp2Dn" {
		return offset
	}
	offset += mtr.LinkUp2Dn.Size()

	if fldName == "SecBusRst" {
		return offset
	}
	offset += mtr.SecBusRst.Size()

	if fldName == "RstUp2Dn" {
		return offset
	}
	offset += mtr.RstUp2Dn.Size()

	if fldName == "RstDn2Up" {
		return offset
	}
	offset += mtr.RstDn2Up.Size()

	if fldName == "PortgateOpen2Close" {
		return offset
	}
	offset += mtr.PortgateOpen2Close.Size()

	if fldName == "LtssmStChanged" {
		return offset
	}
	offset += mtr.LtssmStChanged.Size()

	if fldName == "SecBusnumChanged" {
		return offset
	}
	offset += mtr.SecBusnumChanged.Size()

	if fldName == "RcPme" {
		return offset
	}
	offset += mtr.RcPme.Size()

	if fldName == "RcAerr" {
		return offset
	}
	offset += mtr.RcAerr.Size()

	if fldName == "RcSerr" {
		return offset
	}
	offset += mtr.RcSerr.Size()

	if fldName == "RcHpe" {
		return offset
	}
	offset += mtr.RcHpe.Size()

	if fldName == "RcEqReq" {
		return offset
	}
	offset += mtr.RcEqReq.Size()

	if fldName == "RcDpc" {
		return offset
	}
	offset += mtr.RcDpc.Size()

	if fldName == "PmTurnoff" {
		return offset
	}
	offset += mtr.PmTurnoff.Size()

	if fldName == "TxbfrOverflow" {
		return offset
	}
	offset += mtr.TxbfrOverflow.Size()

	if fldName == "RxtlpErr" {
		return offset
	}
	offset += mtr.RxtlpErr.Size()

	if fldName == "TlFlrReq" {
		return offset
	}
	offset += mtr.TlFlrReq.Size()

	if fldName == "RcLegacyIntpinChanged" {
		return offset
	}
	offset += mtr.RcLegacyIntpinChanged.Size()

	return offset
}

// SetLinkDn2Up sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetLinkDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkDn2Up"))
	return nil
}

// SetLinkUp2Dn sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetLinkUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LinkUp2Dn"))
	return nil
}

// SetSecBusRst sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetSecBusRst(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusRst"))
	return nil
}

// SetRstUp2Dn sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRstUp2Dn(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstUp2Dn"))
	return nil
}

// SetRstDn2Up sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRstDn2Up(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RstDn2Up"))
	return nil
}

// SetPortgateOpen2Close sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetPortgateOpen2Close(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortgateOpen2Close"))
	return nil
}

// SetLtssmStChanged sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetLtssmStChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LtssmStChanged"))
	return nil
}

// SetSecBusnumChanged sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetSecBusnumChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SecBusnumChanged"))
	return nil
}

// SetRcPme sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcPme(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcPme"))
	return nil
}

// SetRcAerr sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcAerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcAerr"))
	return nil
}

// SetRcSerr sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcSerr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcSerr"))
	return nil
}

// SetRcHpe sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcHpe(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcHpe"))
	return nil
}

// SetRcEqReq sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcEqReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcEqReq"))
	return nil
}

// SetRcDpc sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcDpc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcDpc"))
	return nil
}

// SetPmTurnoff sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetPmTurnoff(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PmTurnoff"))
	return nil
}

// SetTxbfrOverflow sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetTxbfrOverflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TxbfrOverflow"))
	return nil
}

// SetRxtlpErr sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRxtlpErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxtlpErr"))
	return nil
}

// SetTlFlrReq sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetTlFlrReq(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TlFlrReq"))
	return nil
}

// SetRcLegacyIntpinChanged sets cunter in shared memory
func (mtr *Ppppportc7intcmacMetrics) SetRcLegacyIntpinChanged(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcLegacyIntpinChanged"))
	return nil
}

// Ppppportc7intcmacMetricsIterator is the iterator object
type Ppppportc7intcmacMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc7intcmacMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc7intcmacMetricsIterator) Next() *Ppppportc7intcmacMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc7intcmacMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc7intcmacMetricsIterator) Find(key uint64) (*Ppppportc7intcmacMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc7intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc7intcmacMetricsIterator) Create(key uint64) (*Ppppportc7intcmacMetrics, error) {
	tmtr := &Ppppportc7intcmacMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc7intcmacMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc7intcmacMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc7intcmacMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc7intcmacMetricsIterator returns an iterator
func NewPpppportc7intcmacMetricsIterator() (*Ppppportc7intcmacMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc7intcmacMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc7intcmacMetricsIterator{iter: iter}, nil
}

type Ppppportc7intceccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Rxbuf_0Uncorrectable metrics.Counter

	Rxbuf_1Uncorrectable metrics.Counter

	Rxbuf_2Uncorrectable metrics.Counter

	Rxbuf_3Uncorrectable metrics.Counter

	Rxbuf_0Correctable metrics.Counter

	Rxbuf_1Correctable metrics.Counter

	Rxbuf_2Correctable metrics.Counter

	Rxbuf_3Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ppppportc7intceccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ppppportc7intceccMetrics) Size() int {
	sz := 0

	sz += mtr.Rxbuf_0Uncorrectable.Size()

	sz += mtr.Rxbuf_1Uncorrectable.Size()

	sz += mtr.Rxbuf_2Uncorrectable.Size()

	sz += mtr.Rxbuf_3Uncorrectable.Size()

	sz += mtr.Rxbuf_0Correctable.Size()

	sz += mtr.Rxbuf_1Correctable.Size()

	sz += mtr.Rxbuf_2Correctable.Size()

	sz += mtr.Rxbuf_3Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ppppportc7intceccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Rxbuf_0Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	mtr.Rxbuf_1Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	mtr.Rxbuf_2Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	mtr.Rxbuf_3Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	mtr.Rxbuf_0Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_0Correctable.Size()

	mtr.Rxbuf_1Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_1Correctable.Size()

	mtr.Rxbuf_2Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_2Correctable.Size()

	mtr.Rxbuf_3Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Rxbuf_3Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ppppportc7intceccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Rxbuf_0Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_0Uncorrectable.Size()

	if fldName == "Rxbuf_1Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_1Uncorrectable.Size()

	if fldName == "Rxbuf_2Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_2Uncorrectable.Size()

	if fldName == "Rxbuf_3Uncorrectable" {
		return offset
	}
	offset += mtr.Rxbuf_3Uncorrectable.Size()

	if fldName == "Rxbuf_0Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_0Correctable.Size()

	if fldName == "Rxbuf_1Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_1Correctable.Size()

	if fldName == "Rxbuf_2Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_2Correctable.Size()

	if fldName == "Rxbuf_3Correctable" {
		return offset
	}
	offset += mtr.Rxbuf_3Correctable.Size()

	return offset
}

// SetRxbuf_0Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_0Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Uncorrectable"))
	return nil
}

// SetRxbuf_1Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_1Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Uncorrectable"))
	return nil
}

// SetRxbuf_2Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_2Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Uncorrectable"))
	return nil
}

// SetRxbuf_3Uncorrectable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_3Uncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Uncorrectable"))
	return nil
}

// SetRxbuf_0Correctable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_0Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_0Correctable"))
	return nil
}

// SetRxbuf_1Correctable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_1Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_1Correctable"))
	return nil
}

// SetRxbuf_2Correctable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_2Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_2Correctable"))
	return nil
}

// SetRxbuf_3Correctable sets cunter in shared memory
func (mtr *Ppppportc7intceccMetrics) SetRxbuf_3Correctable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Rxbuf_3Correctable"))
	return nil
}

// Ppppportc7intceccMetricsIterator is the iterator object
type Ppppportc7intceccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ppppportc7intceccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ppppportc7intceccMetricsIterator) Next() *Ppppportc7intceccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ppppportc7intceccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ppppportc7intceccMetricsIterator) Find(key uint64) (*Ppppportc7intceccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ppppportc7intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ppppportc7intceccMetricsIterator) Create(key uint64) (*Ppppportc7intceccMetrics, error) {
	tmtr := &Ppppportc7intceccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ppppportc7intceccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ppppportc7intceccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ppppportc7intceccMetricsIterator) Free() {
	it.iter.Free()
}

// NewPpppportc7intceccMetricsIterator returns an iterator
func NewPpppportc7intceccMetricsIterator() (*Ppppportc7intceccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ppppportc7intceccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ppppportc7intceccMetricsIterator{iter: iter}, nil
}

type Ptptintreg1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	SlavePtd metrics.Counter

	SlavePsp metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ptptintreg1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ptptintreg1Metrics) Size() int {
	sz := 0

	sz += mtr.SlavePtd.Size()

	sz += mtr.SlavePsp.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ptptintreg1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.SlavePtd = mtr.metrics.GetCounter(offset)
	offset += mtr.SlavePtd.Size()

	mtr.SlavePsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SlavePsp.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ptptintreg1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "SlavePtd" {
		return offset
	}
	offset += mtr.SlavePtd.Size()

	if fldName == "SlavePsp" {
		return offset
	}
	offset += mtr.SlavePsp.Size()

	return offset
}

// SetSlavePtd sets cunter in shared memory
func (mtr *Ptptintreg1Metrics) SetSlavePtd(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SlavePtd"))
	return nil
}

// SetSlavePsp sets cunter in shared memory
func (mtr *Ptptintreg1Metrics) SetSlavePsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SlavePsp"))
	return nil
}

// Ptptintreg1MetricsIterator is the iterator object
type Ptptintreg1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ptptintreg1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ptptintreg1MetricsIterator) Next() *Ptptintreg1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ptptintreg1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ptptintreg1MetricsIterator) Find(key uint64) (*Ptptintreg1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ptptintreg1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ptptintreg1MetricsIterator) Create(key uint64) (*Ptptintreg1Metrics, error) {
	tmtr := &Ptptintreg1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ptptintreg1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ptptintreg1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ptptintreg1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptintreg1MetricsIterator returns an iterator
func NewPtptintreg1MetricsIterator() (*Ptptintreg1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ptptintreg1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ptptintreg1MetricsIterator{iter: iter}, nil
}

type PtptpspintinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	PrPktFfAlmostFull metrics.Counter

	PtdNpvPhvFull metrics.Counter

	PhvSrdyCollapsed metrics.Counter

	PrResubPktBeforePhv metrics.Counter

	PbPbusFsm0NoData metrics.Counter

	PbPbusFsm1NoData metrics.Counter

	PbPbusFsm2NoData metrics.Counter

	PbPbusFsm3NoData metrics.Counter

	PbPbusFsm4NoData metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptpspintinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptpspintinfoMetrics) Size() int {
	sz := 0

	sz += mtr.PrPktFfAlmostFull.Size()

	sz += mtr.PtdNpvPhvFull.Size()

	sz += mtr.PhvSrdyCollapsed.Size()

	sz += mtr.PrResubPktBeforePhv.Size()

	sz += mtr.PbPbusFsm0NoData.Size()

	sz += mtr.PbPbusFsm1NoData.Size()

	sz += mtr.PbPbusFsm2NoData.Size()

	sz += mtr.PbPbusFsm3NoData.Size()

	sz += mtr.PbPbusFsm4NoData.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptpspintinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.PrPktFfAlmostFull = mtr.metrics.GetCounter(offset)
	offset += mtr.PrPktFfAlmostFull.Size()

	mtr.PtdNpvPhvFull = mtr.metrics.GetCounter(offset)
	offset += mtr.PtdNpvPhvFull.Size()

	mtr.PhvSrdyCollapsed = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvSrdyCollapsed.Size()

	mtr.PrResubPktBeforePhv = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubPktBeforePhv.Size()

	mtr.PbPbusFsm0NoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm0NoData.Size()

	mtr.PbPbusFsm1NoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm1NoData.Size()

	mtr.PbPbusFsm2NoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm2NoData.Size()

	mtr.PbPbusFsm3NoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm3NoData.Size()

	mtr.PbPbusFsm4NoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm4NoData.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptpspintinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "PrPktFfAlmostFull" {
		return offset
	}
	offset += mtr.PrPktFfAlmostFull.Size()

	if fldName == "PtdNpvPhvFull" {
		return offset
	}
	offset += mtr.PtdNpvPhvFull.Size()

	if fldName == "PhvSrdyCollapsed" {
		return offset
	}
	offset += mtr.PhvSrdyCollapsed.Size()

	if fldName == "PrResubPktBeforePhv" {
		return offset
	}
	offset += mtr.PrResubPktBeforePhv.Size()

	if fldName == "PbPbusFsm0NoData" {
		return offset
	}
	offset += mtr.PbPbusFsm0NoData.Size()

	if fldName == "PbPbusFsm1NoData" {
		return offset
	}
	offset += mtr.PbPbusFsm1NoData.Size()

	if fldName == "PbPbusFsm2NoData" {
		return offset
	}
	offset += mtr.PbPbusFsm2NoData.Size()

	if fldName == "PbPbusFsm3NoData" {
		return offset
	}
	offset += mtr.PbPbusFsm3NoData.Size()

	if fldName == "PbPbusFsm4NoData" {
		return offset
	}
	offset += mtr.PbPbusFsm4NoData.Size()

	return offset
}

// SetPrPktFfAlmostFull sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPrPktFfAlmostFull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrPktFfAlmostFull"))
	return nil
}

// SetPtdNpvPhvFull sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPtdNpvPhvFull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PtdNpvPhvFull"))
	return nil
}

// SetPhvSrdyCollapsed sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPhvSrdyCollapsed(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvSrdyCollapsed"))
	return nil
}

// SetPrResubPktBeforePhv sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPrResubPktBeforePhv(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubPktBeforePhv"))
	return nil
}

// SetPbPbusFsm0NoData sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPbPbusFsm0NoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm0NoData"))
	return nil
}

// SetPbPbusFsm1NoData sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPbPbusFsm1NoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm1NoData"))
	return nil
}

// SetPbPbusFsm2NoData sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPbPbusFsm2NoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm2NoData"))
	return nil
}

// SetPbPbusFsm3NoData sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPbPbusFsm3NoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm3NoData"))
	return nil
}

// SetPbPbusFsm4NoData sets cunter in shared memory
func (mtr *PtptpspintinfoMetrics) SetPbPbusFsm4NoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm4NoData"))
	return nil
}

// PtptpspintinfoMetricsIterator is the iterator object
type PtptpspintinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptpspintinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptpspintinfoMetricsIterator) Next() *PtptpspintinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptpspintinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptpspintinfoMetricsIterator) Find(key uint64) (*PtptpspintinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptpspintinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptpspintinfoMetricsIterator) Create(key uint64) (*PtptpspintinfoMetrics, error) {
	tmtr := &PtptpspintinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptpspintinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptpspintinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptpspintinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptpspintinfoMetricsIterator returns an iterator
func NewPtptpspintinfoMetricsIterator() (*PtptpspintinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptpspintinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptpspintinfoMetricsIterator{iter: iter}, nil
}

type PtptpspinterrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	PbPbusErr metrics.Counter

	PrPbusErr metrics.Counter

	PrResubPbusErr metrics.Counter

	PspCsrReadAccessErr metrics.Counter

	PspCsrWriteAccessErr metrics.Counter

	PspPhvLargerThanTwelveFlitsErr metrics.Counter

	PspPhvSopOffsetErr metrics.Counter

	PspPhvEopOffsetErr metrics.Counter

	MaxRecirCountErr metrics.Counter

	PbPbusDummyErr metrics.Counter

	PbPbusNopktErr metrics.Counter

	PbPbusMinErr metrics.Counter

	LbPhvAlmostFullTimeoutErr metrics.Counter

	LbPktAlmostFullTimeoutErr metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptpspinterrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptpspinterrMetrics) Size() int {
	sz := 0

	sz += mtr.PbPbusErr.Size()

	sz += mtr.PrPbusErr.Size()

	sz += mtr.PrResubPbusErr.Size()

	sz += mtr.PspCsrReadAccessErr.Size()

	sz += mtr.PspCsrWriteAccessErr.Size()

	sz += mtr.PspPhvLargerThanTwelveFlitsErr.Size()

	sz += mtr.PspPhvSopOffsetErr.Size()

	sz += mtr.PspPhvEopOffsetErr.Size()

	sz += mtr.MaxRecirCountErr.Size()

	sz += mtr.PbPbusDummyErr.Size()

	sz += mtr.PbPbusNopktErr.Size()

	sz += mtr.PbPbusMinErr.Size()

	sz += mtr.LbPhvAlmostFullTimeoutErr.Size()

	sz += mtr.LbPktAlmostFullTimeoutErr.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptpspinterrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.PbPbusErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusErr.Size()

	mtr.PrPbusErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrPbusErr.Size()

	mtr.PrResubPbusErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubPbusErr.Size()

	mtr.PspCsrReadAccessErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PspCsrReadAccessErr.Size()

	mtr.PspCsrWriteAccessErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PspCsrWriteAccessErr.Size()

	mtr.PspPhvLargerThanTwelveFlitsErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PspPhvLargerThanTwelveFlitsErr.Size()

	mtr.PspPhvSopOffsetErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PspPhvSopOffsetErr.Size()

	mtr.PspPhvEopOffsetErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PspPhvEopOffsetErr.Size()

	mtr.MaxRecirCountErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxRecirCountErr.Size()

	mtr.PbPbusDummyErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusDummyErr.Size()

	mtr.PbPbusNopktErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusNopktErr.Size()

	mtr.PbPbusMinErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusMinErr.Size()

	mtr.LbPhvAlmostFullTimeoutErr = mtr.metrics.GetCounter(offset)
	offset += mtr.LbPhvAlmostFullTimeoutErr.Size()

	mtr.LbPktAlmostFullTimeoutErr = mtr.metrics.GetCounter(offset)
	offset += mtr.LbPktAlmostFullTimeoutErr.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptpspinterrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "PbPbusErr" {
		return offset
	}
	offset += mtr.PbPbusErr.Size()

	if fldName == "PrPbusErr" {
		return offset
	}
	offset += mtr.PrPbusErr.Size()

	if fldName == "PrResubPbusErr" {
		return offset
	}
	offset += mtr.PrResubPbusErr.Size()

	if fldName == "PspCsrReadAccessErr" {
		return offset
	}
	offset += mtr.PspCsrReadAccessErr.Size()

	if fldName == "PspCsrWriteAccessErr" {
		return offset
	}
	offset += mtr.PspCsrWriteAccessErr.Size()

	if fldName == "PspPhvLargerThanTwelveFlitsErr" {
		return offset
	}
	offset += mtr.PspPhvLargerThanTwelveFlitsErr.Size()

	if fldName == "PspPhvSopOffsetErr" {
		return offset
	}
	offset += mtr.PspPhvSopOffsetErr.Size()

	if fldName == "PspPhvEopOffsetErr" {
		return offset
	}
	offset += mtr.PspPhvEopOffsetErr.Size()

	if fldName == "MaxRecirCountErr" {
		return offset
	}
	offset += mtr.MaxRecirCountErr.Size()

	if fldName == "PbPbusDummyErr" {
		return offset
	}
	offset += mtr.PbPbusDummyErr.Size()

	if fldName == "PbPbusNopktErr" {
		return offset
	}
	offset += mtr.PbPbusNopktErr.Size()

	if fldName == "PbPbusMinErr" {
		return offset
	}
	offset += mtr.PbPbusMinErr.Size()

	if fldName == "LbPhvAlmostFullTimeoutErr" {
		return offset
	}
	offset += mtr.LbPhvAlmostFullTimeoutErr.Size()

	if fldName == "LbPktAlmostFullTimeoutErr" {
		return offset
	}
	offset += mtr.LbPktAlmostFullTimeoutErr.Size()

	return offset
}

// SetPbPbusErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPbPbusErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusErr"))
	return nil
}

// SetPrPbusErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPrPbusErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrPbusErr"))
	return nil
}

// SetPrResubPbusErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPrResubPbusErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubPbusErr"))
	return nil
}

// SetPspCsrReadAccessErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPspCsrReadAccessErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PspCsrReadAccessErr"))
	return nil
}

// SetPspCsrWriteAccessErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPspCsrWriteAccessErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PspCsrWriteAccessErr"))
	return nil
}

// SetPspPhvLargerThanTwelveFlitsErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPspPhvLargerThanTwelveFlitsErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PspPhvLargerThanTwelveFlitsErr"))
	return nil
}

// SetPspPhvSopOffsetErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPspPhvSopOffsetErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PspPhvSopOffsetErr"))
	return nil
}

// SetPspPhvEopOffsetErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPspPhvEopOffsetErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PspPhvEopOffsetErr"))
	return nil
}

// SetMaxRecirCountErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetMaxRecirCountErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxRecirCountErr"))
	return nil
}

// SetPbPbusDummyErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPbPbusDummyErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusDummyErr"))
	return nil
}

// SetPbPbusNopktErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPbPbusNopktErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusNopktErr"))
	return nil
}

// SetPbPbusMinErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetPbPbusMinErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusMinErr"))
	return nil
}

// SetLbPhvAlmostFullTimeoutErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetLbPhvAlmostFullTimeoutErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LbPhvAlmostFullTimeoutErr"))
	return nil
}

// SetLbPktAlmostFullTimeoutErr sets cunter in shared memory
func (mtr *PtptpspinterrMetrics) SetLbPktAlmostFullTimeoutErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LbPktAlmostFullTimeoutErr"))
	return nil
}

// PtptpspinterrMetricsIterator is the iterator object
type PtptpspinterrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptpspinterrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptpspinterrMetricsIterator) Next() *PtptpspinterrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptpspinterrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptpspinterrMetricsIterator) Find(key uint64) (*PtptpspinterrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptpspinterrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptpspinterrMetricsIterator) Create(key uint64) (*PtptpspinterrMetrics, error) {
	tmtr := &PtptpspinterrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptpspinterrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptpspinterrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptpspinterrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptpspinterrMetricsIterator returns an iterator
func NewPtptpspinterrMetricsIterator() (*PtptpspinterrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptpspinterrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptpspinterrMetricsIterator{iter: iter}, nil
}

type PtptpspintfatalMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	PbPbusSopErr metrics.Counter

	PbPbusEopErr metrics.Counter

	MaSopErr metrics.Counter

	MaEopErr metrics.Counter

	PrPbusSopErr metrics.Counter

	PrPbusEopErr metrics.Counter

	PrResubPbusSopErr metrics.Counter

	PrResubPbusEopErr metrics.Counter

	PrResubSopErr metrics.Counter

	PrResubEopErr metrics.Counter

	PbPbusFsm0NoDataErr metrics.Counter

	PbPbusFsm1NoDataErr metrics.Counter

	PbPbusFsm2NoDataErr metrics.Counter

	PbPbusFsm3NoDataErr metrics.Counter

	PbPbusFsm4NoDataErr metrics.Counter

	PbPbusFsm5PktTooSmallErr metrics.Counter

	LifIndTableRspErr metrics.Counter

	FlitCntOflowErr metrics.Counter

	LbPhvSopErr metrics.Counter

	DcPhvSopErr metrics.Counter

	LbPktSopErr metrics.Counter

	DcPktSopErr metrics.Counter

	SwPhvJabberErr metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptpspintfatalMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptpspintfatalMetrics) Size() int {
	sz := 0

	sz += mtr.PbPbusSopErr.Size()

	sz += mtr.PbPbusEopErr.Size()

	sz += mtr.MaSopErr.Size()

	sz += mtr.MaEopErr.Size()

	sz += mtr.PrPbusSopErr.Size()

	sz += mtr.PrPbusEopErr.Size()

	sz += mtr.PrResubPbusSopErr.Size()

	sz += mtr.PrResubPbusEopErr.Size()

	sz += mtr.PrResubSopErr.Size()

	sz += mtr.PrResubEopErr.Size()

	sz += mtr.PbPbusFsm0NoDataErr.Size()

	sz += mtr.PbPbusFsm1NoDataErr.Size()

	sz += mtr.PbPbusFsm2NoDataErr.Size()

	sz += mtr.PbPbusFsm3NoDataErr.Size()

	sz += mtr.PbPbusFsm4NoDataErr.Size()

	sz += mtr.PbPbusFsm5PktTooSmallErr.Size()

	sz += mtr.LifIndTableRspErr.Size()

	sz += mtr.FlitCntOflowErr.Size()

	sz += mtr.LbPhvSopErr.Size()

	sz += mtr.DcPhvSopErr.Size()

	sz += mtr.LbPktSopErr.Size()

	sz += mtr.DcPktSopErr.Size()

	sz += mtr.SwPhvJabberErr.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptpspintfatalMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.PbPbusSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusSopErr.Size()

	mtr.PbPbusEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusEopErr.Size()

	mtr.MaSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaSopErr.Size()

	mtr.MaEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaEopErr.Size()

	mtr.PrPbusSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrPbusSopErr.Size()

	mtr.PrPbusEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrPbusEopErr.Size()

	mtr.PrResubPbusSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubPbusSopErr.Size()

	mtr.PrResubPbusEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubPbusEopErr.Size()

	mtr.PrResubSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubSopErr.Size()

	mtr.PrResubEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PrResubEopErr.Size()

	mtr.PbPbusFsm0NoDataErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm0NoDataErr.Size()

	mtr.PbPbusFsm1NoDataErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm1NoDataErr.Size()

	mtr.PbPbusFsm2NoDataErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm2NoDataErr.Size()

	mtr.PbPbusFsm3NoDataErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm3NoDataErr.Size()

	mtr.PbPbusFsm4NoDataErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm4NoDataErr.Size()

	mtr.PbPbusFsm5PktTooSmallErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbPbusFsm5PktTooSmallErr.Size()

	mtr.LifIndTableRspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.LifIndTableRspErr.Size()

	mtr.FlitCntOflowErr = mtr.metrics.GetCounter(offset)
	offset += mtr.FlitCntOflowErr.Size()

	mtr.LbPhvSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.LbPhvSopErr.Size()

	mtr.DcPhvSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.DcPhvSopErr.Size()

	mtr.LbPktSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.LbPktSopErr.Size()

	mtr.DcPktSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.DcPktSopErr.Size()

	mtr.SwPhvJabberErr = mtr.metrics.GetCounter(offset)
	offset += mtr.SwPhvJabberErr.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptpspintfatalMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "PbPbusSopErr" {
		return offset
	}
	offset += mtr.PbPbusSopErr.Size()

	if fldName == "PbPbusEopErr" {
		return offset
	}
	offset += mtr.PbPbusEopErr.Size()

	if fldName == "MaSopErr" {
		return offset
	}
	offset += mtr.MaSopErr.Size()

	if fldName == "MaEopErr" {
		return offset
	}
	offset += mtr.MaEopErr.Size()

	if fldName == "PrPbusSopErr" {
		return offset
	}
	offset += mtr.PrPbusSopErr.Size()

	if fldName == "PrPbusEopErr" {
		return offset
	}
	offset += mtr.PrPbusEopErr.Size()

	if fldName == "PrResubPbusSopErr" {
		return offset
	}
	offset += mtr.PrResubPbusSopErr.Size()

	if fldName == "PrResubPbusEopErr" {
		return offset
	}
	offset += mtr.PrResubPbusEopErr.Size()

	if fldName == "PrResubSopErr" {
		return offset
	}
	offset += mtr.PrResubSopErr.Size()

	if fldName == "PrResubEopErr" {
		return offset
	}
	offset += mtr.PrResubEopErr.Size()

	if fldName == "PbPbusFsm0NoDataErr" {
		return offset
	}
	offset += mtr.PbPbusFsm0NoDataErr.Size()

	if fldName == "PbPbusFsm1NoDataErr" {
		return offset
	}
	offset += mtr.PbPbusFsm1NoDataErr.Size()

	if fldName == "PbPbusFsm2NoDataErr" {
		return offset
	}
	offset += mtr.PbPbusFsm2NoDataErr.Size()

	if fldName == "PbPbusFsm3NoDataErr" {
		return offset
	}
	offset += mtr.PbPbusFsm3NoDataErr.Size()

	if fldName == "PbPbusFsm4NoDataErr" {
		return offset
	}
	offset += mtr.PbPbusFsm4NoDataErr.Size()

	if fldName == "PbPbusFsm5PktTooSmallErr" {
		return offset
	}
	offset += mtr.PbPbusFsm5PktTooSmallErr.Size()

	if fldName == "LifIndTableRspErr" {
		return offset
	}
	offset += mtr.LifIndTableRspErr.Size()

	if fldName == "FlitCntOflowErr" {
		return offset
	}
	offset += mtr.FlitCntOflowErr.Size()

	if fldName == "LbPhvSopErr" {
		return offset
	}
	offset += mtr.LbPhvSopErr.Size()

	if fldName == "DcPhvSopErr" {
		return offset
	}
	offset += mtr.DcPhvSopErr.Size()

	if fldName == "LbPktSopErr" {
		return offset
	}
	offset += mtr.LbPktSopErr.Size()

	if fldName == "DcPktSopErr" {
		return offset
	}
	offset += mtr.DcPktSopErr.Size()

	if fldName == "SwPhvJabberErr" {
		return offset
	}
	offset += mtr.SwPhvJabberErr.Size()

	return offset
}

// SetPbPbusSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusSopErr"))
	return nil
}

// SetPbPbusEopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusEopErr"))
	return nil
}

// SetMaSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetMaSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaSopErr"))
	return nil
}

// SetMaEopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetMaEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaEopErr"))
	return nil
}

// SetPrPbusSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrPbusSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrPbusSopErr"))
	return nil
}

// SetPrPbusEopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrPbusEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrPbusEopErr"))
	return nil
}

// SetPrResubPbusSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrResubPbusSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubPbusSopErr"))
	return nil
}

// SetPrResubPbusEopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrResubPbusEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubPbusEopErr"))
	return nil
}

// SetPrResubSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrResubSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubSopErr"))
	return nil
}

// SetPrResubEopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPrResubEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PrResubEopErr"))
	return nil
}

// SetPbPbusFsm0NoDataErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm0NoDataErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm0NoDataErr"))
	return nil
}

// SetPbPbusFsm1NoDataErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm1NoDataErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm1NoDataErr"))
	return nil
}

// SetPbPbusFsm2NoDataErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm2NoDataErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm2NoDataErr"))
	return nil
}

// SetPbPbusFsm3NoDataErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm3NoDataErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm3NoDataErr"))
	return nil
}

// SetPbPbusFsm4NoDataErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm4NoDataErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm4NoDataErr"))
	return nil
}

// SetPbPbusFsm5PktTooSmallErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetPbPbusFsm5PktTooSmallErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbPbusFsm5PktTooSmallErr"))
	return nil
}

// SetLifIndTableRspErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetLifIndTableRspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LifIndTableRspErr"))
	return nil
}

// SetFlitCntOflowErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetFlitCntOflowErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FlitCntOflowErr"))
	return nil
}

// SetLbPhvSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetLbPhvSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LbPhvSopErr"))
	return nil
}

// SetDcPhvSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetDcPhvSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("DcPhvSopErr"))
	return nil
}

// SetLbPktSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetLbPktSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LbPktSopErr"))
	return nil
}

// SetDcPktSopErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetDcPktSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("DcPktSopErr"))
	return nil
}

// SetSwPhvJabberErr sets cunter in shared memory
func (mtr *PtptpspintfatalMetrics) SetSwPhvJabberErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SwPhvJabberErr"))
	return nil
}

// PtptpspintfatalMetricsIterator is the iterator object
type PtptpspintfatalMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptpspintfatalMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptpspintfatalMetricsIterator) Next() *PtptpspintfatalMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptpspintfatalMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptpspintfatalMetricsIterator) Find(key uint64) (*PtptpspintfatalMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptpspintfatalMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptpspintfatalMetricsIterator) Create(key uint64) (*PtptpspintfatalMetrics, error) {
	tmtr := &PtptpspintfatalMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptpspintfatalMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptpspintfatalMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptpspintfatalMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptpspintfatalMetricsIterator returns an iterator
func NewPtptpspintfatalMetricsIterator() (*PtptpspintfatalMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptpspintfatalMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptpspintfatalMetricsIterator{iter: iter}, nil
}

type PtptpspintlifqstatemapMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	EccUncorrectable metrics.Counter

	EccCorrectable metrics.Counter

	QidInvalid metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptpspintlifqstatemapMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptpspintlifqstatemapMetrics) Size() int {
	sz := 0

	sz += mtr.EccUncorrectable.Size()

	sz += mtr.EccCorrectable.Size()

	sz += mtr.QidInvalid.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptpspintlifqstatemapMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.EccUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.EccUncorrectable.Size()

	mtr.EccCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.EccCorrectable.Size()

	mtr.QidInvalid = mtr.metrics.GetCounter(offset)
	offset += mtr.QidInvalid.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptpspintlifqstatemapMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "EccUncorrectable" {
		return offset
	}
	offset += mtr.EccUncorrectable.Size()

	if fldName == "EccCorrectable" {
		return offset
	}
	offset += mtr.EccCorrectable.Size()

	if fldName == "QidInvalid" {
		return offset
	}
	offset += mtr.QidInvalid.Size()

	return offset
}

// SetEccUncorrectable sets cunter in shared memory
func (mtr *PtptpspintlifqstatemapMetrics) SetEccUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EccUncorrectable"))
	return nil
}

// SetEccCorrectable sets cunter in shared memory
func (mtr *PtptpspintlifqstatemapMetrics) SetEccCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EccCorrectable"))
	return nil
}

// SetQidInvalid sets cunter in shared memory
func (mtr *PtptpspintlifqstatemapMetrics) SetQidInvalid(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("QidInvalid"))
	return nil
}

// PtptpspintlifqstatemapMetricsIterator is the iterator object
type PtptpspintlifqstatemapMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptpspintlifqstatemapMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptpspintlifqstatemapMetricsIterator) Next() *PtptpspintlifqstatemapMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptpspintlifqstatemapMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptpspintlifqstatemapMetricsIterator) Find(key uint64) (*PtptpspintlifqstatemapMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptpspintlifqstatemapMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptpspintlifqstatemapMetricsIterator) Create(key uint64) (*PtptpspintlifqstatemapMetrics, error) {
	tmtr := &PtptpspintlifqstatemapMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptpspintlifqstatemapMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptpspintlifqstatemapMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptpspintlifqstatemapMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptpspintlifqstatemapMetricsIterator returns an iterator
func NewPtptpspintlifqstatemapMetricsIterator() (*PtptpspintlifqstatemapMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptpspintlifqstatemapMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptpspintlifqstatemapMetricsIterator{iter: iter}, nil
}

type PtptpspintswphvmemMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	EccUncorrectable metrics.Counter

	EccCorrectable metrics.Counter

	PhvInvalidSram metrics.Counter

	PhvInvalidData metrics.Counter

	PhvDone0 metrics.Counter

	PhvDone1 metrics.Counter

	PhvDone2 metrics.Counter

	PhvDone3 metrics.Counter

	PhvDone4 metrics.Counter

	PhvDone5 metrics.Counter

	PhvDone6 metrics.Counter

	PhvDone7 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptpspintswphvmemMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptpspintswphvmemMetrics) Size() int {
	sz := 0

	sz += mtr.EccUncorrectable.Size()

	sz += mtr.EccCorrectable.Size()

	sz += mtr.PhvInvalidSram.Size()

	sz += mtr.PhvInvalidData.Size()

	sz += mtr.PhvDone0.Size()

	sz += mtr.PhvDone1.Size()

	sz += mtr.PhvDone2.Size()

	sz += mtr.PhvDone3.Size()

	sz += mtr.PhvDone4.Size()

	sz += mtr.PhvDone5.Size()

	sz += mtr.PhvDone6.Size()

	sz += mtr.PhvDone7.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptpspintswphvmemMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.EccUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.EccUncorrectable.Size()

	mtr.EccCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.EccCorrectable.Size()

	mtr.PhvInvalidSram = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvInvalidSram.Size()

	mtr.PhvInvalidData = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvInvalidData.Size()

	mtr.PhvDone0 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone0.Size()

	mtr.PhvDone1 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone1.Size()

	mtr.PhvDone2 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone2.Size()

	mtr.PhvDone3 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone3.Size()

	mtr.PhvDone4 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone4.Size()

	mtr.PhvDone5 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone5.Size()

	mtr.PhvDone6 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone6.Size()

	mtr.PhvDone7 = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvDone7.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptpspintswphvmemMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "EccUncorrectable" {
		return offset
	}
	offset += mtr.EccUncorrectable.Size()

	if fldName == "EccCorrectable" {
		return offset
	}
	offset += mtr.EccCorrectable.Size()

	if fldName == "PhvInvalidSram" {
		return offset
	}
	offset += mtr.PhvInvalidSram.Size()

	if fldName == "PhvInvalidData" {
		return offset
	}
	offset += mtr.PhvInvalidData.Size()

	if fldName == "PhvDone0" {
		return offset
	}
	offset += mtr.PhvDone0.Size()

	if fldName == "PhvDone1" {
		return offset
	}
	offset += mtr.PhvDone1.Size()

	if fldName == "PhvDone2" {
		return offset
	}
	offset += mtr.PhvDone2.Size()

	if fldName == "PhvDone3" {
		return offset
	}
	offset += mtr.PhvDone3.Size()

	if fldName == "PhvDone4" {
		return offset
	}
	offset += mtr.PhvDone4.Size()

	if fldName == "PhvDone5" {
		return offset
	}
	offset += mtr.PhvDone5.Size()

	if fldName == "PhvDone6" {
		return offset
	}
	offset += mtr.PhvDone6.Size()

	if fldName == "PhvDone7" {
		return offset
	}
	offset += mtr.PhvDone7.Size()

	return offset
}

// SetEccUncorrectable sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetEccUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EccUncorrectable"))
	return nil
}

// SetEccCorrectable sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetEccCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EccCorrectable"))
	return nil
}

// SetPhvInvalidSram sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvInvalidSram(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvInvalidSram"))
	return nil
}

// SetPhvInvalidData sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvInvalidData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvInvalidData"))
	return nil
}

// SetPhvDone0 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone0"))
	return nil
}

// SetPhvDone1 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone1"))
	return nil
}

// SetPhvDone2 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone2"))
	return nil
}

// SetPhvDone3 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone3"))
	return nil
}

// SetPhvDone4 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone4"))
	return nil
}

// SetPhvDone5 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone5"))
	return nil
}

// SetPhvDone6 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone6"))
	return nil
}

// SetPhvDone7 sets cunter in shared memory
func (mtr *PtptpspintswphvmemMetrics) SetPhvDone7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvDone7"))
	return nil
}

// PtptpspintswphvmemMetricsIterator is the iterator object
type PtptpspintswphvmemMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptpspintswphvmemMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptpspintswphvmemMetricsIterator) Next() *PtptpspintswphvmemMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptpspintswphvmemMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptpspintswphvmemMetricsIterator) Find(key uint64) (*PtptpspintswphvmemMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptpspintswphvmemMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptpspintswphvmemMetricsIterator) Create(key uint64) (*PtptpspintswphvmemMetrics, error) {
	tmtr := &PtptpspintswphvmemMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptpspintswphvmemMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptpspintswphvmemMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptpspintswphvmemMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptpspintswphvmemMetricsIterator returns an iterator
func NewPtptpspintswphvmemMetricsIterator() (*PtptpspintswphvmemMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptpspintswphvmemMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptpspintswphvmemMetricsIterator{iter: iter}, nil
}

type PtptptdinteccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	RdataMemUncorrectable metrics.Counter

	RdataMemCorrectable metrics.Counter

	LatMemUncorrectable metrics.Counter

	LatMemCorrectable metrics.Counter

	WdataMemUncorrectable metrics.Counter

	WdataMemCorrectable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptptdinteccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptptdinteccMetrics) Size() int {
	sz := 0

	sz += mtr.RdataMemUncorrectable.Size()

	sz += mtr.RdataMemCorrectable.Size()

	sz += mtr.LatMemUncorrectable.Size()

	sz += mtr.LatMemCorrectable.Size()

	sz += mtr.WdataMemUncorrectable.Size()

	sz += mtr.WdataMemCorrectable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptptdinteccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.RdataMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RdataMemUncorrectable.Size()

	mtr.RdataMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RdataMemCorrectable.Size()

	mtr.LatMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.LatMemUncorrectable.Size()

	mtr.LatMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.LatMemCorrectable.Size()

	mtr.WdataMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.WdataMemUncorrectable.Size()

	mtr.WdataMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.WdataMemCorrectable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptptdinteccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "RdataMemUncorrectable" {
		return offset
	}
	offset += mtr.RdataMemUncorrectable.Size()

	if fldName == "RdataMemCorrectable" {
		return offset
	}
	offset += mtr.RdataMemCorrectable.Size()

	if fldName == "LatMemUncorrectable" {
		return offset
	}
	offset += mtr.LatMemUncorrectable.Size()

	if fldName == "LatMemCorrectable" {
		return offset
	}
	offset += mtr.LatMemCorrectable.Size()

	if fldName == "WdataMemUncorrectable" {
		return offset
	}
	offset += mtr.WdataMemUncorrectable.Size()

	if fldName == "WdataMemCorrectable" {
		return offset
	}
	offset += mtr.WdataMemCorrectable.Size()

	return offset
}

// SetRdataMemUncorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetRdataMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdataMemUncorrectable"))
	return nil
}

// SetRdataMemCorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetRdataMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdataMemCorrectable"))
	return nil
}

// SetLatMemUncorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetLatMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LatMemUncorrectable"))
	return nil
}

// SetLatMemCorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetLatMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LatMemCorrectable"))
	return nil
}

// SetWdataMemUncorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetWdataMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WdataMemUncorrectable"))
	return nil
}

// SetWdataMemCorrectable sets cunter in shared memory
func (mtr *PtptptdinteccMetrics) SetWdataMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WdataMemCorrectable"))
	return nil
}

// PtptptdinteccMetricsIterator is the iterator object
type PtptptdinteccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptptdinteccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptptdinteccMetricsIterator) Next() *PtptptdinteccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptptdinteccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptptdinteccMetricsIterator) Find(key uint64) (*PtptptdinteccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptptdinteccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptptdinteccMetricsIterator) Create(key uint64) (*PtptptdinteccMetrics, error) {
	tmtr := &PtptptdinteccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptptdinteccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptptdinteccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptptdinteccMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptptdinteccMetricsIterator returns an iterator
func NewPtptptdinteccMetricsIterator() (*PtptptdinteccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptptdinteccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptptdinteccMetricsIterator{iter: iter}, nil
}

type PtptptdintfifoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	LatFfOvflow metrics.Counter

	WdataFfOvflow metrics.Counter

	RcvStgFfOvflow metrics.Counter

	CmdflitFfOvflow metrics.Counter

	CmdFfOvflow metrics.Counter

	PktFfOvflow metrics.Counter

	WrMemFfOvflow metrics.Counter

	DfenceFfOvflow metrics.Counter

	FfenceFfOvflow metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptptdintfifoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptptdintfifoMetrics) Size() int {
	sz := 0

	sz += mtr.LatFfOvflow.Size()

	sz += mtr.WdataFfOvflow.Size()

	sz += mtr.RcvStgFfOvflow.Size()

	sz += mtr.CmdflitFfOvflow.Size()

	sz += mtr.CmdFfOvflow.Size()

	sz += mtr.PktFfOvflow.Size()

	sz += mtr.WrMemFfOvflow.Size()

	sz += mtr.DfenceFfOvflow.Size()

	sz += mtr.FfenceFfOvflow.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptptdintfifoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.LatFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.LatFfOvflow.Size()

	mtr.WdataFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.WdataFfOvflow.Size()

	mtr.RcvStgFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvStgFfOvflow.Size()

	mtr.CmdflitFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.CmdflitFfOvflow.Size()

	mtr.CmdFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.CmdFfOvflow.Size()

	mtr.PktFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.PktFfOvflow.Size()

	mtr.WrMemFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.WrMemFfOvflow.Size()

	mtr.DfenceFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.DfenceFfOvflow.Size()

	mtr.FfenceFfOvflow = mtr.metrics.GetCounter(offset)
	offset += mtr.FfenceFfOvflow.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptptdintfifoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "LatFfOvflow" {
		return offset
	}
	offset += mtr.LatFfOvflow.Size()

	if fldName == "WdataFfOvflow" {
		return offset
	}
	offset += mtr.WdataFfOvflow.Size()

	if fldName == "RcvStgFfOvflow" {
		return offset
	}
	offset += mtr.RcvStgFfOvflow.Size()

	if fldName == "CmdflitFfOvflow" {
		return offset
	}
	offset += mtr.CmdflitFfOvflow.Size()

	if fldName == "CmdFfOvflow" {
		return offset
	}
	offset += mtr.CmdFfOvflow.Size()

	if fldName == "PktFfOvflow" {
		return offset
	}
	offset += mtr.PktFfOvflow.Size()

	if fldName == "WrMemFfOvflow" {
		return offset
	}
	offset += mtr.WrMemFfOvflow.Size()

	if fldName == "DfenceFfOvflow" {
		return offset
	}
	offset += mtr.DfenceFfOvflow.Size()

	if fldName == "FfenceFfOvflow" {
		return offset
	}
	offset += mtr.FfenceFfOvflow.Size()

	return offset
}

// SetLatFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetLatFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LatFfOvflow"))
	return nil
}

// SetWdataFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetWdataFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WdataFfOvflow"))
	return nil
}

// SetRcvStgFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetRcvStgFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvStgFfOvflow"))
	return nil
}

// SetCmdflitFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetCmdflitFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CmdflitFfOvflow"))
	return nil
}

// SetCmdFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetCmdFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CmdFfOvflow"))
	return nil
}

// SetPktFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetPktFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PktFfOvflow"))
	return nil
}

// SetWrMemFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetWrMemFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrMemFfOvflow"))
	return nil
}

// SetDfenceFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetDfenceFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("DfenceFfOvflow"))
	return nil
}

// SetFfenceFfOvflow sets cunter in shared memory
func (mtr *PtptptdintfifoMetrics) SetFfenceFfOvflow(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FfenceFfOvflow"))
	return nil
}

// PtptptdintfifoMetricsIterator is the iterator object
type PtptptdintfifoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptptdintfifoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptptdintfifoMetricsIterator) Next() *PtptptdintfifoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptptdintfifoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptptdintfifoMetricsIterator) Find(key uint64) (*PtptptdintfifoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptptdintfifoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptptdintfifoMetricsIterator) Create(key uint64) (*PtptptdintfifoMetrics, error) {
	tmtr := &PtptptdintfifoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptptdintfifoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptptdintfifoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptptdintfifoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptptdintfifoMetricsIterator returns an iterator
func NewPtptptdintfifoMetricsIterator() (*PtptptdintfifoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptptdintfifoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptptdintfifoMetricsIterator{iter: iter}, nil
}

type Ptptptdintgrp1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	RcvPhvDmaPtr metrics.Counter

	RcvPhvAddr metrics.Counter

	RcvExceed_16Byte metrics.Counter

	RcvPhvNotSop metrics.Counter

	RcvPktOrderFfFull metrics.Counter

	RcvPendPhvMoreThan_2 metrics.Counter

	RcvPendPhvLess metrics.Counter

	RcvCmdNopEop metrics.Counter

	RcvCmdOutNotSop metrics.Counter

	RcvPkt2MemSeen metrics.Counter

	RcvSkipSeen metrics.Counter

	RcvPhvEopNoCmdEop metrics.Counter

	RcvM2MDstNotSeen metrics.Counter

	RcvM2MSrcNotSeen metrics.Counter

	RdreqInvalidCmdSeen metrics.Counter

	RdreqMem2MemPsizeZero metrics.Counter

	RdreqM2MPhv2MemExceed_16Byte metrics.Counter

	RdreqPhv2MemFenceExceed_16Byte metrics.Counter

	RdreqMem2PktPsizeZero metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ptptptdintgrp1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ptptptdintgrp1Metrics) Size() int {
	sz := 0

	sz += mtr.RcvPhvDmaPtr.Size()

	sz += mtr.RcvPhvAddr.Size()

	sz += mtr.RcvExceed_16Byte.Size()

	sz += mtr.RcvPhvNotSop.Size()

	sz += mtr.RcvPktOrderFfFull.Size()

	sz += mtr.RcvPendPhvMoreThan_2.Size()

	sz += mtr.RcvPendPhvLess.Size()

	sz += mtr.RcvCmdNopEop.Size()

	sz += mtr.RcvCmdOutNotSop.Size()

	sz += mtr.RcvPkt2MemSeen.Size()

	sz += mtr.RcvSkipSeen.Size()

	sz += mtr.RcvPhvEopNoCmdEop.Size()

	sz += mtr.RcvM2MDstNotSeen.Size()

	sz += mtr.RcvM2MSrcNotSeen.Size()

	sz += mtr.RdreqInvalidCmdSeen.Size()

	sz += mtr.RdreqMem2MemPsizeZero.Size()

	sz += mtr.RdreqM2MPhv2MemExceed_16Byte.Size()

	sz += mtr.RdreqPhv2MemFenceExceed_16Byte.Size()

	sz += mtr.RdreqMem2PktPsizeZero.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ptptptdintgrp1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.RcvPhvDmaPtr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPhvDmaPtr.Size()

	mtr.RcvPhvAddr = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPhvAddr.Size()

	mtr.RcvExceed_16Byte = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvExceed_16Byte.Size()

	mtr.RcvPhvNotSop = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPhvNotSop.Size()

	mtr.RcvPktOrderFfFull = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPktOrderFfFull.Size()

	mtr.RcvPendPhvMoreThan_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPendPhvMoreThan_2.Size()

	mtr.RcvPendPhvLess = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPendPhvLess.Size()

	mtr.RcvCmdNopEop = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvCmdNopEop.Size()

	mtr.RcvCmdOutNotSop = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvCmdOutNotSop.Size()

	mtr.RcvPkt2MemSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPkt2MemSeen.Size()

	mtr.RcvSkipSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvSkipSeen.Size()

	mtr.RcvPhvEopNoCmdEop = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvPhvEopNoCmdEop.Size()

	mtr.RcvM2MDstNotSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvM2MDstNotSeen.Size()

	mtr.RcvM2MSrcNotSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.RcvM2MSrcNotSeen.Size()

	mtr.RdreqInvalidCmdSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.RdreqInvalidCmdSeen.Size()

	mtr.RdreqMem2MemPsizeZero = mtr.metrics.GetCounter(offset)
	offset += mtr.RdreqMem2MemPsizeZero.Size()

	mtr.RdreqM2MPhv2MemExceed_16Byte = mtr.metrics.GetCounter(offset)
	offset += mtr.RdreqM2MPhv2MemExceed_16Byte.Size()

	mtr.RdreqPhv2MemFenceExceed_16Byte = mtr.metrics.GetCounter(offset)
	offset += mtr.RdreqPhv2MemFenceExceed_16Byte.Size()

	mtr.RdreqMem2PktPsizeZero = mtr.metrics.GetCounter(offset)
	offset += mtr.RdreqMem2PktPsizeZero.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ptptptdintgrp1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "RcvPhvDmaPtr" {
		return offset
	}
	offset += mtr.RcvPhvDmaPtr.Size()

	if fldName == "RcvPhvAddr" {
		return offset
	}
	offset += mtr.RcvPhvAddr.Size()

	if fldName == "RcvExceed_16Byte" {
		return offset
	}
	offset += mtr.RcvExceed_16Byte.Size()

	if fldName == "RcvPhvNotSop" {
		return offset
	}
	offset += mtr.RcvPhvNotSop.Size()

	if fldName == "RcvPktOrderFfFull" {
		return offset
	}
	offset += mtr.RcvPktOrderFfFull.Size()

	if fldName == "RcvPendPhvMoreThan_2" {
		return offset
	}
	offset += mtr.RcvPendPhvMoreThan_2.Size()

	if fldName == "RcvPendPhvLess" {
		return offset
	}
	offset += mtr.RcvPendPhvLess.Size()

	if fldName == "RcvCmdNopEop" {
		return offset
	}
	offset += mtr.RcvCmdNopEop.Size()

	if fldName == "RcvCmdOutNotSop" {
		return offset
	}
	offset += mtr.RcvCmdOutNotSop.Size()

	if fldName == "RcvPkt2MemSeen" {
		return offset
	}
	offset += mtr.RcvPkt2MemSeen.Size()

	if fldName == "RcvSkipSeen" {
		return offset
	}
	offset += mtr.RcvSkipSeen.Size()

	if fldName == "RcvPhvEopNoCmdEop" {
		return offset
	}
	offset += mtr.RcvPhvEopNoCmdEop.Size()

	if fldName == "RcvM2MDstNotSeen" {
		return offset
	}
	offset += mtr.RcvM2MDstNotSeen.Size()

	if fldName == "RcvM2MSrcNotSeen" {
		return offset
	}
	offset += mtr.RcvM2MSrcNotSeen.Size()

	if fldName == "RdreqInvalidCmdSeen" {
		return offset
	}
	offset += mtr.RdreqInvalidCmdSeen.Size()

	if fldName == "RdreqMem2MemPsizeZero" {
		return offset
	}
	offset += mtr.RdreqMem2MemPsizeZero.Size()

	if fldName == "RdreqM2MPhv2MemExceed_16Byte" {
		return offset
	}
	offset += mtr.RdreqM2MPhv2MemExceed_16Byte.Size()

	if fldName == "RdreqPhv2MemFenceExceed_16Byte" {
		return offset
	}
	offset += mtr.RdreqPhv2MemFenceExceed_16Byte.Size()

	if fldName == "RdreqMem2PktPsizeZero" {
		return offset
	}
	offset += mtr.RdreqMem2PktPsizeZero.Size()

	return offset
}

// SetRcvPhvDmaPtr sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPhvDmaPtr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPhvDmaPtr"))
	return nil
}

// SetRcvPhvAddr sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPhvAddr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPhvAddr"))
	return nil
}

// SetRcvExceed_16Byte sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvExceed_16Byte(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvExceed_16Byte"))
	return nil
}

// SetRcvPhvNotSop sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPhvNotSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPhvNotSop"))
	return nil
}

// SetRcvPktOrderFfFull sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPktOrderFfFull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPktOrderFfFull"))
	return nil
}

// SetRcvPendPhvMoreThan_2 sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPendPhvMoreThan_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPendPhvMoreThan_2"))
	return nil
}

// SetRcvPendPhvLess sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPendPhvLess(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPendPhvLess"))
	return nil
}

// SetRcvCmdNopEop sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvCmdNopEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvCmdNopEop"))
	return nil
}

// SetRcvCmdOutNotSop sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvCmdOutNotSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvCmdOutNotSop"))
	return nil
}

// SetRcvPkt2MemSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPkt2MemSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPkt2MemSeen"))
	return nil
}

// SetRcvSkipSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvSkipSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvSkipSeen"))
	return nil
}

// SetRcvPhvEopNoCmdEop sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvPhvEopNoCmdEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvPhvEopNoCmdEop"))
	return nil
}

// SetRcvM2MDstNotSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvM2MDstNotSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvM2MDstNotSeen"))
	return nil
}

// SetRcvM2MSrcNotSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRcvM2MSrcNotSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RcvM2MSrcNotSeen"))
	return nil
}

// SetRdreqInvalidCmdSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRdreqInvalidCmdSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdreqInvalidCmdSeen"))
	return nil
}

// SetRdreqMem2MemPsizeZero sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRdreqMem2MemPsizeZero(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdreqMem2MemPsizeZero"))
	return nil
}

// SetRdreqM2MPhv2MemExceed_16Byte sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRdreqM2MPhv2MemExceed_16Byte(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdreqM2MPhv2MemExceed_16Byte"))
	return nil
}

// SetRdreqPhv2MemFenceExceed_16Byte sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRdreqPhv2MemFenceExceed_16Byte(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdreqPhv2MemFenceExceed_16Byte"))
	return nil
}

// SetRdreqMem2PktPsizeZero sets cunter in shared memory
func (mtr *Ptptptdintgrp1Metrics) SetRdreqMem2PktPsizeZero(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdreqMem2PktPsizeZero"))
	return nil
}

// Ptptptdintgrp1MetricsIterator is the iterator object
type Ptptptdintgrp1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ptptptdintgrp1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ptptptdintgrp1MetricsIterator) Next() *Ptptptdintgrp1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ptptptdintgrp1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ptptptdintgrp1MetricsIterator) Find(key uint64) (*Ptptptdintgrp1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ptptptdintgrp1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ptptptdintgrp1MetricsIterator) Create(key uint64) (*Ptptptdintgrp1Metrics, error) {
	tmtr := &Ptptptdintgrp1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ptptptdintgrp1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ptptptdintgrp1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ptptptdintgrp1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptptdintgrp1MetricsIterator returns an iterator
func NewPtptptdintgrp1MetricsIterator() (*Ptptptdintgrp1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ptptptdintgrp1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ptptptdintgrp1MetricsIterator{iter: iter}, nil
}

type Ptptptdintgrp2Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	WrInvalidCmd metrics.Counter

	WrPendSz metrics.Counter

	WrAxiRdResp metrics.Counter

	PktErrEopForced metrics.Counter

	PktNoEopErrSeen metrics.Counter

	PktCmdEopNoData metrics.Counter

	RdrspAxi metrics.Counter

	WrrspAxi metrics.Counter

	SpuriousRdResp metrics.Counter

	SpuriousWrResp metrics.Counter

	WrreqInfoFirstMissing metrics.Counter

	WrreqNumBytesZero metrics.Counter

	WrreqNumBytesMoreThan_64 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Ptptptdintgrp2Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Ptptptdintgrp2Metrics) Size() int {
	sz := 0

	sz += mtr.WrInvalidCmd.Size()

	sz += mtr.WrPendSz.Size()

	sz += mtr.WrAxiRdResp.Size()

	sz += mtr.PktErrEopForced.Size()

	sz += mtr.PktNoEopErrSeen.Size()

	sz += mtr.PktCmdEopNoData.Size()

	sz += mtr.RdrspAxi.Size()

	sz += mtr.WrrspAxi.Size()

	sz += mtr.SpuriousRdResp.Size()

	sz += mtr.SpuriousWrResp.Size()

	sz += mtr.WrreqInfoFirstMissing.Size()

	sz += mtr.WrreqNumBytesZero.Size()

	sz += mtr.WrreqNumBytesMoreThan_64.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Ptptptdintgrp2Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.WrInvalidCmd = mtr.metrics.GetCounter(offset)
	offset += mtr.WrInvalidCmd.Size()

	mtr.WrPendSz = mtr.metrics.GetCounter(offset)
	offset += mtr.WrPendSz.Size()

	mtr.WrAxiRdResp = mtr.metrics.GetCounter(offset)
	offset += mtr.WrAxiRdResp.Size()

	mtr.PktErrEopForced = mtr.metrics.GetCounter(offset)
	offset += mtr.PktErrEopForced.Size()

	mtr.PktNoEopErrSeen = mtr.metrics.GetCounter(offset)
	offset += mtr.PktNoEopErrSeen.Size()

	mtr.PktCmdEopNoData = mtr.metrics.GetCounter(offset)
	offset += mtr.PktCmdEopNoData.Size()

	mtr.RdrspAxi = mtr.metrics.GetCounter(offset)
	offset += mtr.RdrspAxi.Size()

	mtr.WrrspAxi = mtr.metrics.GetCounter(offset)
	offset += mtr.WrrspAxi.Size()

	mtr.SpuriousRdResp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousRdResp.Size()

	mtr.SpuriousWrResp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousWrResp.Size()

	mtr.WrreqInfoFirstMissing = mtr.metrics.GetCounter(offset)
	offset += mtr.WrreqInfoFirstMissing.Size()

	mtr.WrreqNumBytesZero = mtr.metrics.GetCounter(offset)
	offset += mtr.WrreqNumBytesZero.Size()

	mtr.WrreqNumBytesMoreThan_64 = mtr.metrics.GetCounter(offset)
	offset += mtr.WrreqNumBytesMoreThan_64.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Ptptptdintgrp2Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "WrInvalidCmd" {
		return offset
	}
	offset += mtr.WrInvalidCmd.Size()

	if fldName == "WrPendSz" {
		return offset
	}
	offset += mtr.WrPendSz.Size()

	if fldName == "WrAxiRdResp" {
		return offset
	}
	offset += mtr.WrAxiRdResp.Size()

	if fldName == "PktErrEopForced" {
		return offset
	}
	offset += mtr.PktErrEopForced.Size()

	if fldName == "PktNoEopErrSeen" {
		return offset
	}
	offset += mtr.PktNoEopErrSeen.Size()

	if fldName == "PktCmdEopNoData" {
		return offset
	}
	offset += mtr.PktCmdEopNoData.Size()

	if fldName == "RdrspAxi" {
		return offset
	}
	offset += mtr.RdrspAxi.Size()

	if fldName == "WrrspAxi" {
		return offset
	}
	offset += mtr.WrrspAxi.Size()

	if fldName == "SpuriousRdResp" {
		return offset
	}
	offset += mtr.SpuriousRdResp.Size()

	if fldName == "SpuriousWrResp" {
		return offset
	}
	offset += mtr.SpuriousWrResp.Size()

	if fldName == "WrreqInfoFirstMissing" {
		return offset
	}
	offset += mtr.WrreqInfoFirstMissing.Size()

	if fldName == "WrreqNumBytesZero" {
		return offset
	}
	offset += mtr.WrreqNumBytesZero.Size()

	if fldName == "WrreqNumBytesMoreThan_64" {
		return offset
	}
	offset += mtr.WrreqNumBytesMoreThan_64.Size()

	return offset
}

// SetWrInvalidCmd sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrInvalidCmd(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrInvalidCmd"))
	return nil
}

// SetWrPendSz sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrPendSz(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrPendSz"))
	return nil
}

// SetWrAxiRdResp sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrAxiRdResp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrAxiRdResp"))
	return nil
}

// SetPktErrEopForced sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetPktErrEopForced(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PktErrEopForced"))
	return nil
}

// SetPktNoEopErrSeen sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetPktNoEopErrSeen(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PktNoEopErrSeen"))
	return nil
}

// SetPktCmdEopNoData sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetPktCmdEopNoData(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PktCmdEopNoData"))
	return nil
}

// SetRdrspAxi sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetRdrspAxi(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RdrspAxi"))
	return nil
}

// SetWrrspAxi sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrrspAxi(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrrspAxi"))
	return nil
}

// SetSpuriousRdResp sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetSpuriousRdResp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousRdResp"))
	return nil
}

// SetSpuriousWrResp sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetSpuriousWrResp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousWrResp"))
	return nil
}

// SetWrreqInfoFirstMissing sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrreqInfoFirstMissing(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrreqInfoFirstMissing"))
	return nil
}

// SetWrreqNumBytesZero sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrreqNumBytesZero(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrreqNumBytesZero"))
	return nil
}

// SetWrreqNumBytesMoreThan_64 sets cunter in shared memory
func (mtr *Ptptptdintgrp2Metrics) SetWrreqNumBytesMoreThan_64(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WrreqNumBytesMoreThan_64"))
	return nil
}

// Ptptptdintgrp2MetricsIterator is the iterator object
type Ptptptdintgrp2MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Ptptptdintgrp2MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Ptptptdintgrp2MetricsIterator) Next() *Ptptptdintgrp2Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Ptptptdintgrp2Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Ptptptdintgrp2MetricsIterator) Find(key uint64) (*Ptptptdintgrp2Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Ptptptdintgrp2Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Ptptptdintgrp2MetricsIterator) Create(key uint64) (*Ptptptdintgrp2Metrics, error) {
	tmtr := &Ptptptdintgrp2Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Ptptptdintgrp2Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Ptptptdintgrp2MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Ptptptdintgrp2MetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptptdintgrp2MetricsIterator returns an iterator
func NewPtptptdintgrp2MetricsIterator() (*Ptptptdintgrp2MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Ptptptdintgrp2Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Ptptptdintgrp2MetricsIterator{iter: iter}, nil
}

type PtptptdintintfMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	PbErr metrics.Counter

	PbSopErr metrics.Counter

	PbEopErr metrics.Counter

	NpvResubErr metrics.Counter

	NpvResubSopErr metrics.Counter

	NpvResubEopErr metrics.Counter

	MaErr metrics.Counter

	MaSopErr metrics.Counter

	MaEopErr metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PtptptdintintfMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PtptptdintintfMetrics) Size() int {
	sz := 0

	sz += mtr.PbErr.Size()

	sz += mtr.PbSopErr.Size()

	sz += mtr.PbEopErr.Size()

	sz += mtr.NpvResubErr.Size()

	sz += mtr.NpvResubSopErr.Size()

	sz += mtr.NpvResubEopErr.Size()

	sz += mtr.MaErr.Size()

	sz += mtr.MaSopErr.Size()

	sz += mtr.MaEopErr.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PtptptdintintfMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.PbErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbErr.Size()

	mtr.PbSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbSopErr.Size()

	mtr.PbEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.PbEopErr.Size()

	mtr.NpvResubErr = mtr.metrics.GetCounter(offset)
	offset += mtr.NpvResubErr.Size()

	mtr.NpvResubSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.NpvResubSopErr.Size()

	mtr.NpvResubEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.NpvResubEopErr.Size()

	mtr.MaErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaErr.Size()

	mtr.MaSopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaSopErr.Size()

	mtr.MaEopErr = mtr.metrics.GetCounter(offset)
	offset += mtr.MaEopErr.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PtptptdintintfMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "PbErr" {
		return offset
	}
	offset += mtr.PbErr.Size()

	if fldName == "PbSopErr" {
		return offset
	}
	offset += mtr.PbSopErr.Size()

	if fldName == "PbEopErr" {
		return offset
	}
	offset += mtr.PbEopErr.Size()

	if fldName == "NpvResubErr" {
		return offset
	}
	offset += mtr.NpvResubErr.Size()

	if fldName == "NpvResubSopErr" {
		return offset
	}
	offset += mtr.NpvResubSopErr.Size()

	if fldName == "NpvResubEopErr" {
		return offset
	}
	offset += mtr.NpvResubEopErr.Size()

	if fldName == "MaErr" {
		return offset
	}
	offset += mtr.MaErr.Size()

	if fldName == "MaSopErr" {
		return offset
	}
	offset += mtr.MaSopErr.Size()

	if fldName == "MaEopErr" {
		return offset
	}
	offset += mtr.MaEopErr.Size()

	return offset
}

// SetPbErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetPbErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbErr"))
	return nil
}

// SetPbSopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetPbSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbSopErr"))
	return nil
}

// SetPbEopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetPbEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PbEopErr"))
	return nil
}

// SetNpvResubErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetNpvResubErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("NpvResubErr"))
	return nil
}

// SetNpvResubSopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetNpvResubSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("NpvResubSopErr"))
	return nil
}

// SetNpvResubEopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetNpvResubEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("NpvResubEopErr"))
	return nil
}

// SetMaErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetMaErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaErr"))
	return nil
}

// SetMaSopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetMaSopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaSopErr"))
	return nil
}

// SetMaEopErr sets cunter in shared memory
func (mtr *PtptptdintintfMetrics) SetMaEopErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaEopErr"))
	return nil
}

// PtptptdintintfMetricsIterator is the iterator object
type PtptptdintintfMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PtptptdintintfMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PtptptdintintfMetricsIterator) Next() *PtptptdintintfMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PtptptdintintfMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PtptptdintintfMetricsIterator) Find(key uint64) (*PtptptdintintfMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PtptptdintintfMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PtptptdintintfMetricsIterator) Create(key uint64) (*PtptptdintintfMetrics, error) {
	tmtr := &PtptptdintintfMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PtptptdintintfMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PtptptdintintfMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PtptptdintintfMetricsIterator) Free() {
	it.iter.Free()
}

// NewPtptptdintintfMetricsIterator returns an iterator
func NewPtptptdintintfMetricsIterator() (*PtptptdintintfMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PtptptdintintfMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PtptptdintintfMetricsIterator{iter: iter}, nil
}

type Pcrte0interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte0interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte0interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte0interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte0interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte0interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte0interrMetricsIterator is the iterator object
type Pcrte0interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte0interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte0interrMetricsIterator) Next() *Pcrte0interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte0interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte0interrMetricsIterator) Find(key uint64) (*Pcrte0interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte0interrMetricsIterator) Create(key uint64) (*Pcrte0interrMetrics, error) {
	tmtr := &Pcrte0interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte0interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte0interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte0interrMetricsIterator returns an iterator
func NewPcrte0interrMetricsIterator() (*Pcrte0interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte0interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte0interrMetricsIterator{iter: iter}, nil
}

type Pcrte0intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte0intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte0intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte0intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte0intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte0intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte0intinfoMetricsIterator is the iterator object
type Pcrte0intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte0intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte0intinfoMetricsIterator) Next() *Pcrte0intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte0intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte0intinfoMetricsIterator) Find(key uint64) (*Pcrte0intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte0intinfoMetricsIterator) Create(key uint64) (*Pcrte0intinfoMetrics, error) {
	tmtr := &Pcrte0intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte0intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte0intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte0intinfoMetricsIterator returns an iterator
func NewPcrte0intinfoMetricsIterator() (*Pcrte0intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte0intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte0intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte1interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte1interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte1interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte1interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte1interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte1interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte1interrMetricsIterator is the iterator object
type Pcrte1interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte1interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte1interrMetricsIterator) Next() *Pcrte1interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte1interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte1interrMetricsIterator) Find(key uint64) (*Pcrte1interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte1interrMetricsIterator) Create(key uint64) (*Pcrte1interrMetrics, error) {
	tmtr := &Pcrte1interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte1interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte1interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte1interrMetricsIterator returns an iterator
func NewPcrte1interrMetricsIterator() (*Pcrte1interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte1interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte1interrMetricsIterator{iter: iter}, nil
}

type Pcrte1intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte1intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte1intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte1intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte1intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte1intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte1intinfoMetricsIterator is the iterator object
type Pcrte1intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte1intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte1intinfoMetricsIterator) Next() *Pcrte1intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte1intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte1intinfoMetricsIterator) Find(key uint64) (*Pcrte1intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte1intinfoMetricsIterator) Create(key uint64) (*Pcrte1intinfoMetrics, error) {
	tmtr := &Pcrte1intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte1intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte1intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte1intinfoMetricsIterator returns an iterator
func NewPcrte1intinfoMetricsIterator() (*Pcrte1intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte1intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte1intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte2interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte2interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte2interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte2interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte2interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte2interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte2interrMetricsIterator is the iterator object
type Pcrte2interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte2interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte2interrMetricsIterator) Next() *Pcrte2interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte2interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte2interrMetricsIterator) Find(key uint64) (*Pcrte2interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte2interrMetricsIterator) Create(key uint64) (*Pcrte2interrMetrics, error) {
	tmtr := &Pcrte2interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte2interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte2interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte2interrMetricsIterator returns an iterator
func NewPcrte2interrMetricsIterator() (*Pcrte2interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte2interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte2interrMetricsIterator{iter: iter}, nil
}

type Pcrte2intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte2intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte2intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte2intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte2intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte2intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte2intinfoMetricsIterator is the iterator object
type Pcrte2intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte2intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte2intinfoMetricsIterator) Next() *Pcrte2intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte2intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte2intinfoMetricsIterator) Find(key uint64) (*Pcrte2intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte2intinfoMetricsIterator) Create(key uint64) (*Pcrte2intinfoMetrics, error) {
	tmtr := &Pcrte2intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte2intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte2intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte2intinfoMetricsIterator returns an iterator
func NewPcrte2intinfoMetricsIterator() (*Pcrte2intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte2intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte2intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte3interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte3interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte3interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte3interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte3interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte3interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte3interrMetricsIterator is the iterator object
type Pcrte3interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte3interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte3interrMetricsIterator) Next() *Pcrte3interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte3interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte3interrMetricsIterator) Find(key uint64) (*Pcrte3interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte3interrMetricsIterator) Create(key uint64) (*Pcrte3interrMetrics, error) {
	tmtr := &Pcrte3interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte3interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte3interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte3interrMetricsIterator returns an iterator
func NewPcrte3interrMetricsIterator() (*Pcrte3interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte3interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte3interrMetricsIterator{iter: iter}, nil
}

type Pcrte3intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte3intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte3intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte3intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte3intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte3intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte3intinfoMetricsIterator is the iterator object
type Pcrte3intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte3intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte3intinfoMetricsIterator) Next() *Pcrte3intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte3intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte3intinfoMetricsIterator) Find(key uint64) (*Pcrte3intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte3intinfoMetricsIterator) Create(key uint64) (*Pcrte3intinfoMetrics, error) {
	tmtr := &Pcrte3intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte3intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte3intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte3intinfoMetricsIterator returns an iterator
func NewPcrte3intinfoMetricsIterator() (*Pcrte3intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte3intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte3intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte4interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte4interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte4interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte4interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte4interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte4interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte4interrMetricsIterator is the iterator object
type Pcrte4interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte4interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte4interrMetricsIterator) Next() *Pcrte4interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte4interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte4interrMetricsIterator) Find(key uint64) (*Pcrte4interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte4interrMetricsIterator) Create(key uint64) (*Pcrte4interrMetrics, error) {
	tmtr := &Pcrte4interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte4interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte4interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte4interrMetricsIterator returns an iterator
func NewPcrte4interrMetricsIterator() (*Pcrte4interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte4interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte4interrMetricsIterator{iter: iter}, nil
}

type Pcrte4intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte4intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte4intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte4intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte4intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte4intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte4intinfoMetricsIterator is the iterator object
type Pcrte4intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte4intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte4intinfoMetricsIterator) Next() *Pcrte4intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte4intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte4intinfoMetricsIterator) Find(key uint64) (*Pcrte4intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte4intinfoMetricsIterator) Create(key uint64) (*Pcrte4intinfoMetrics, error) {
	tmtr := &Pcrte4intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte4intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte4intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte4intinfoMetricsIterator returns an iterator
func NewPcrte4intinfoMetricsIterator() (*Pcrte4intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte4intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte4intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte5interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte5interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte5interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte5interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte5interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte5interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte5interrMetricsIterator is the iterator object
type Pcrte5interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte5interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte5interrMetricsIterator) Next() *Pcrte5interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte5interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte5interrMetricsIterator) Find(key uint64) (*Pcrte5interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte5interrMetricsIterator) Create(key uint64) (*Pcrte5interrMetrics, error) {
	tmtr := &Pcrte5interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte5interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte5interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte5interrMetricsIterator returns an iterator
func NewPcrte5interrMetricsIterator() (*Pcrte5interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte5interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte5interrMetricsIterator{iter: iter}, nil
}

type Pcrte5intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte5intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte5intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte5intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte5intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte5intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte5intinfoMetricsIterator is the iterator object
type Pcrte5intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte5intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte5intinfoMetricsIterator) Next() *Pcrte5intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte5intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte5intinfoMetricsIterator) Find(key uint64) (*Pcrte5intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte5intinfoMetricsIterator) Create(key uint64) (*Pcrte5intinfoMetrics, error) {
	tmtr := &Pcrte5intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte5intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte5intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte5intinfoMetricsIterator returns an iterator
func NewPcrte5intinfoMetricsIterator() (*Pcrte5intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte5intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte5intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte6interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte6interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte6interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte6interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte6interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte6interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte6interrMetricsIterator is the iterator object
type Pcrte6interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte6interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte6interrMetricsIterator) Next() *Pcrte6interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte6interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte6interrMetricsIterator) Find(key uint64) (*Pcrte6interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte6interrMetricsIterator) Create(key uint64) (*Pcrte6interrMetrics, error) {
	tmtr := &Pcrte6interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte6interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte6interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte6interrMetricsIterator returns an iterator
func NewPcrte6interrMetricsIterator() (*Pcrte6interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte6interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte6interrMetricsIterator{iter: iter}, nil
}

type Pcrte6intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte6intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte6intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte6intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte6intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte6intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte6intinfoMetricsIterator is the iterator object
type Pcrte6intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte6intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte6intinfoMetricsIterator) Next() *Pcrte6intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte6intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte6intinfoMetricsIterator) Find(key uint64) (*Pcrte6intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte6intinfoMetricsIterator) Create(key uint64) (*Pcrte6intinfoMetrics, error) {
	tmtr := &Pcrte6intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte6intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte6intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte6intinfoMetricsIterator returns an iterator
func NewPcrte6intinfoMetricsIterator() (*Pcrte6intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte6intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte6intinfoMetricsIterator{iter: iter}, nil
}

type Pcrte7interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte7interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte7interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte7interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte7interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pcrte7interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pcrte7interrMetricsIterator is the iterator object
type Pcrte7interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte7interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte7interrMetricsIterator) Next() *Pcrte7interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte7interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte7interrMetricsIterator) Find(key uint64) (*Pcrte7interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte7interrMetricsIterator) Create(key uint64) (*Pcrte7interrMetrics, error) {
	tmtr := &Pcrte7interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte7interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte7interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte7interrMetricsIterator returns an iterator
func NewPcrte7interrMetricsIterator() (*Pcrte7interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte7interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte7interrMetricsIterator{iter: iter}, nil
}

type Pcrte7intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrte7intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrte7intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrte7intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrte7intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pcrte7intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pcrte7intinfoMetricsIterator is the iterator object
type Pcrte7intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrte7intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrte7intinfoMetricsIterator) Next() *Pcrte7intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrte7intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrte7intinfoMetricsIterator) Find(key uint64) (*Pcrte7intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrte7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrte7intinfoMetricsIterator) Create(key uint64) (*Pcrte7intinfoMetrics, error) {
	tmtr := &Pcrte7intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrte7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrte7intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrte7intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrte7intinfoMetricsIterator returns an iterator
func NewPcrte7intinfoMetricsIterator() (*Pcrte7intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrte7intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrte7intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu0interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu0interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu0interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu0interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu0interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu0interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu0interrMetricsIterator is the iterator object
type Pcrmpu0interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu0interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu0interrMetricsIterator) Next() *Pcrmpu0interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu0interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu0interrMetricsIterator) Find(key uint64) (*Pcrmpu0interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu0interrMetricsIterator) Create(key uint64) (*Pcrmpu0interrMetrics, error) {
	tmtr := &Pcrmpu0interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu0interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu0interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu0interrMetricsIterator returns an iterator
func NewPcrmpu0interrMetricsIterator() (*Pcrmpu0interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu0interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu0interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu0intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu0intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu0intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu0intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu0intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu0intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu0intinfoMetricsIterator is the iterator object
type Pcrmpu0intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu0intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu0intinfoMetricsIterator) Next() *Pcrmpu0intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu0intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu0intinfoMetricsIterator) Find(key uint64) (*Pcrmpu0intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu0intinfoMetricsIterator) Create(key uint64) (*Pcrmpu0intinfoMetrics, error) {
	tmtr := &Pcrmpu0intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu0intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu0intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu0intinfoMetricsIterator returns an iterator
func NewPcrmpu0intinfoMetricsIterator() (*Pcrmpu0intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu0intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu0intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu1interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu1interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu1interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu1interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu1interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu1interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu1interrMetricsIterator is the iterator object
type Pcrmpu1interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu1interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu1interrMetricsIterator) Next() *Pcrmpu1interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu1interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu1interrMetricsIterator) Find(key uint64) (*Pcrmpu1interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu1interrMetricsIterator) Create(key uint64) (*Pcrmpu1interrMetrics, error) {
	tmtr := &Pcrmpu1interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu1interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu1interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu1interrMetricsIterator returns an iterator
func NewPcrmpu1interrMetricsIterator() (*Pcrmpu1interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu1interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu1interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu1intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu1intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu1intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu1intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu1intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu1intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu1intinfoMetricsIterator is the iterator object
type Pcrmpu1intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu1intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu1intinfoMetricsIterator) Next() *Pcrmpu1intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu1intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu1intinfoMetricsIterator) Find(key uint64) (*Pcrmpu1intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu1intinfoMetricsIterator) Create(key uint64) (*Pcrmpu1intinfoMetrics, error) {
	tmtr := &Pcrmpu1intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu1intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu1intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu1intinfoMetricsIterator returns an iterator
func NewPcrmpu1intinfoMetricsIterator() (*Pcrmpu1intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu1intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu1intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu2interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu2interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu2interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu2interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu2interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu2interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu2interrMetricsIterator is the iterator object
type Pcrmpu2interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu2interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu2interrMetricsIterator) Next() *Pcrmpu2interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu2interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu2interrMetricsIterator) Find(key uint64) (*Pcrmpu2interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu2interrMetricsIterator) Create(key uint64) (*Pcrmpu2interrMetrics, error) {
	tmtr := &Pcrmpu2interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu2interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu2interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu2interrMetricsIterator returns an iterator
func NewPcrmpu2interrMetricsIterator() (*Pcrmpu2interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu2interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu2interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu2intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu2intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu2intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu2intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu2intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu2intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu2intinfoMetricsIterator is the iterator object
type Pcrmpu2intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu2intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu2intinfoMetricsIterator) Next() *Pcrmpu2intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu2intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu2intinfoMetricsIterator) Find(key uint64) (*Pcrmpu2intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu2intinfoMetricsIterator) Create(key uint64) (*Pcrmpu2intinfoMetrics, error) {
	tmtr := &Pcrmpu2intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu2intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu2intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu2intinfoMetricsIterator returns an iterator
func NewPcrmpu2intinfoMetricsIterator() (*Pcrmpu2intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu2intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu2intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu3interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu3interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu3interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu3interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu3interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu3interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu3interrMetricsIterator is the iterator object
type Pcrmpu3interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu3interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu3interrMetricsIterator) Next() *Pcrmpu3interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu3interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu3interrMetricsIterator) Find(key uint64) (*Pcrmpu3interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu3interrMetricsIterator) Create(key uint64) (*Pcrmpu3interrMetrics, error) {
	tmtr := &Pcrmpu3interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu3interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu3interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu3interrMetricsIterator returns an iterator
func NewPcrmpu3interrMetricsIterator() (*Pcrmpu3interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu3interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu3interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu3intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu3intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu3intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu3intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu3intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu3intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu3intinfoMetricsIterator is the iterator object
type Pcrmpu3intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu3intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu3intinfoMetricsIterator) Next() *Pcrmpu3intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu3intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu3intinfoMetricsIterator) Find(key uint64) (*Pcrmpu3intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu3intinfoMetricsIterator) Create(key uint64) (*Pcrmpu3intinfoMetrics, error) {
	tmtr := &Pcrmpu3intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu3intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu3intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu3intinfoMetricsIterator returns an iterator
func NewPcrmpu3intinfoMetricsIterator() (*Pcrmpu3intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu3intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu3intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu4interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu4interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu4interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu4interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu4interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu4interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu4interrMetricsIterator is the iterator object
type Pcrmpu4interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu4interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu4interrMetricsIterator) Next() *Pcrmpu4interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu4interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu4interrMetricsIterator) Find(key uint64) (*Pcrmpu4interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu4interrMetricsIterator) Create(key uint64) (*Pcrmpu4interrMetrics, error) {
	tmtr := &Pcrmpu4interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu4interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu4interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu4interrMetricsIterator returns an iterator
func NewPcrmpu4interrMetricsIterator() (*Pcrmpu4interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu4interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu4interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu4intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu4intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu4intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu4intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu4intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu4intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu4intinfoMetricsIterator is the iterator object
type Pcrmpu4intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu4intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu4intinfoMetricsIterator) Next() *Pcrmpu4intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu4intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu4intinfoMetricsIterator) Find(key uint64) (*Pcrmpu4intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu4intinfoMetricsIterator) Create(key uint64) (*Pcrmpu4intinfoMetrics, error) {
	tmtr := &Pcrmpu4intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu4intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu4intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu4intinfoMetricsIterator returns an iterator
func NewPcrmpu4intinfoMetricsIterator() (*Pcrmpu4intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu4intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu4intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu5interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu5interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu5interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu5interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu5interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu5interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu5interrMetricsIterator is the iterator object
type Pcrmpu5interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu5interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu5interrMetricsIterator) Next() *Pcrmpu5interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu5interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu5interrMetricsIterator) Find(key uint64) (*Pcrmpu5interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu5interrMetricsIterator) Create(key uint64) (*Pcrmpu5interrMetrics, error) {
	tmtr := &Pcrmpu5interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu5interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu5interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu5interrMetricsIterator returns an iterator
func NewPcrmpu5interrMetricsIterator() (*Pcrmpu5interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu5interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu5interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu5intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu5intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu5intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu5intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu5intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu5intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu5intinfoMetricsIterator is the iterator object
type Pcrmpu5intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu5intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu5intinfoMetricsIterator) Next() *Pcrmpu5intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu5intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu5intinfoMetricsIterator) Find(key uint64) (*Pcrmpu5intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu5intinfoMetricsIterator) Create(key uint64) (*Pcrmpu5intinfoMetrics, error) {
	tmtr := &Pcrmpu5intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu5intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu5intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu5intinfoMetricsIterator returns an iterator
func NewPcrmpu5intinfoMetricsIterator() (*Pcrmpu5intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu5intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu5intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu6interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu6interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu6interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu6interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu6interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu6interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu6interrMetricsIterator is the iterator object
type Pcrmpu6interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu6interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu6interrMetricsIterator) Next() *Pcrmpu6interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu6interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu6interrMetricsIterator) Find(key uint64) (*Pcrmpu6interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu6interrMetricsIterator) Create(key uint64) (*Pcrmpu6interrMetrics, error) {
	tmtr := &Pcrmpu6interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu6interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu6interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu6interrMetricsIterator returns an iterator
func NewPcrmpu6interrMetricsIterator() (*Pcrmpu6interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu6interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu6interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu6intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu6intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu6intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu6intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu6intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu6intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu6intinfoMetricsIterator is the iterator object
type Pcrmpu6intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu6intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu6intinfoMetricsIterator) Next() *Pcrmpu6intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu6intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu6intinfoMetricsIterator) Find(key uint64) (*Pcrmpu6intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu6intinfoMetricsIterator) Create(key uint64) (*Pcrmpu6intinfoMetrics, error) {
	tmtr := &Pcrmpu6intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu6intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu6intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu6intinfoMetricsIterator returns an iterator
func NewPcrmpu6intinfoMetricsIterator() (*Pcrmpu6intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu6intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu6intinfoMetricsIterator{iter: iter}, nil
}

type Pcrmpu7interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu7interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu7interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu7interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu7interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pcrmpu7interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pcrmpu7interrMetricsIterator is the iterator object
type Pcrmpu7interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu7interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu7interrMetricsIterator) Next() *Pcrmpu7interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu7interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu7interrMetricsIterator) Find(key uint64) (*Pcrmpu7interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu7interrMetricsIterator) Create(key uint64) (*Pcrmpu7interrMetrics, error) {
	tmtr := &Pcrmpu7interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu7interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu7interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu7interrMetricsIterator returns an iterator
func NewPcrmpu7interrMetricsIterator() (*Pcrmpu7interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu7interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu7interrMetricsIterator{iter: iter}, nil
}

type Pcrmpu7intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pcrmpu7intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pcrmpu7intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pcrmpu7intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pcrmpu7intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pcrmpu7intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pcrmpu7intinfoMetricsIterator is the iterator object
type Pcrmpu7intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pcrmpu7intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pcrmpu7intinfoMetricsIterator) Next() *Pcrmpu7intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pcrmpu7intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pcrmpu7intinfoMetricsIterator) Find(key uint64) (*Pcrmpu7intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pcrmpu7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pcrmpu7intinfoMetricsIterator) Create(key uint64) (*Pcrmpu7intinfoMetrics, error) {
	tmtr := &Pcrmpu7intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pcrmpu7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pcrmpu7intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pcrmpu7intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPcrmpu7intinfoMetricsIterator returns an iterator
func NewPcrmpu7intinfoMetricsIterator() (*Pcrmpu7intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pcrmpu7intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pcrmpu7intinfoMetricsIterator{iter: iter}, nil
}

type TxstxsintschMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	SchWidEmpty metrics.Counter

	SchRidEmpty metrics.Counter

	SchWrTxfifoOvf metrics.Counter

	SchRdTxfifoOvf metrics.Counter

	SchStateFifoOvf metrics.Counter

	SchDrbCntQidFifo metrics.Counter

	SchHbmBypOvf metrics.Counter

	SchHbmBypWtagWrap metrics.Counter

	SchRlidOvfl metrics.Counter

	SchRlidUnfl metrics.Counter

	SchNullLif metrics.Counter

	SchLifSgMismatch metrics.Counter

	SchAclrHbmLnRollovr metrics.Counter

	SchTxdmaMsgEfull metrics.Counter

	SchHbmReEfull metrics.Counter

	SchHbmWeEfull metrics.Counter

	SchHbmBypPendingEfull metrics.Counter

	SchHbmRdPendingEfull metrics.Counter

	SchHbmWrPendingEfull metrics.Counter

	SchBrespErr metrics.Counter

	SchBidErr metrics.Counter

	SchRrespErr metrics.Counter

	SchRidErr metrics.Counter

	SchDrbCntOvfl metrics.Counter

	SchDrbCntUnfl metrics.Counter

	SchTxdmaMsgOvfl metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *TxstxsintschMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *TxstxsintschMetrics) Size() int {
	sz := 0

	sz += mtr.SchWidEmpty.Size()

	sz += mtr.SchRidEmpty.Size()

	sz += mtr.SchWrTxfifoOvf.Size()

	sz += mtr.SchRdTxfifoOvf.Size()

	sz += mtr.SchStateFifoOvf.Size()

	sz += mtr.SchDrbCntQidFifo.Size()

	sz += mtr.SchHbmBypOvf.Size()

	sz += mtr.SchHbmBypWtagWrap.Size()

	sz += mtr.SchRlidOvfl.Size()

	sz += mtr.SchRlidUnfl.Size()

	sz += mtr.SchNullLif.Size()

	sz += mtr.SchLifSgMismatch.Size()

	sz += mtr.SchAclrHbmLnRollovr.Size()

	sz += mtr.SchTxdmaMsgEfull.Size()

	sz += mtr.SchHbmReEfull.Size()

	sz += mtr.SchHbmWeEfull.Size()

	sz += mtr.SchHbmBypPendingEfull.Size()

	sz += mtr.SchHbmRdPendingEfull.Size()

	sz += mtr.SchHbmWrPendingEfull.Size()

	sz += mtr.SchBrespErr.Size()

	sz += mtr.SchBidErr.Size()

	sz += mtr.SchRrespErr.Size()

	sz += mtr.SchRidErr.Size()

	sz += mtr.SchDrbCntOvfl.Size()

	sz += mtr.SchDrbCntUnfl.Size()

	sz += mtr.SchTxdmaMsgOvfl.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *TxstxsintschMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.SchWidEmpty = mtr.metrics.GetCounter(offset)
	offset += mtr.SchWidEmpty.Size()

	mtr.SchRidEmpty = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRidEmpty.Size()

	mtr.SchWrTxfifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.SchWrTxfifoOvf.Size()

	mtr.SchRdTxfifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRdTxfifoOvf.Size()

	mtr.SchStateFifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.SchStateFifoOvf.Size()

	mtr.SchDrbCntQidFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.SchDrbCntQidFifo.Size()

	mtr.SchHbmBypOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmBypOvf.Size()

	mtr.SchHbmBypWtagWrap = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmBypWtagWrap.Size()

	mtr.SchRlidOvfl = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRlidOvfl.Size()

	mtr.SchRlidUnfl = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRlidUnfl.Size()

	mtr.SchNullLif = mtr.metrics.GetCounter(offset)
	offset += mtr.SchNullLif.Size()

	mtr.SchLifSgMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.SchLifSgMismatch.Size()

	mtr.SchAclrHbmLnRollovr = mtr.metrics.GetCounter(offset)
	offset += mtr.SchAclrHbmLnRollovr.Size()

	mtr.SchTxdmaMsgEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchTxdmaMsgEfull.Size()

	mtr.SchHbmReEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmReEfull.Size()

	mtr.SchHbmWeEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmWeEfull.Size()

	mtr.SchHbmBypPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmBypPendingEfull.Size()

	mtr.SchHbmRdPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmRdPendingEfull.Size()

	mtr.SchHbmWrPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.SchHbmWrPendingEfull.Size()

	mtr.SchBrespErr = mtr.metrics.GetCounter(offset)
	offset += mtr.SchBrespErr.Size()

	mtr.SchBidErr = mtr.metrics.GetCounter(offset)
	offset += mtr.SchBidErr.Size()

	mtr.SchRrespErr = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRrespErr.Size()

	mtr.SchRidErr = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRidErr.Size()

	mtr.SchDrbCntOvfl = mtr.metrics.GetCounter(offset)
	offset += mtr.SchDrbCntOvfl.Size()

	mtr.SchDrbCntUnfl = mtr.metrics.GetCounter(offset)
	offset += mtr.SchDrbCntUnfl.Size()

	mtr.SchTxdmaMsgOvfl = mtr.metrics.GetCounter(offset)
	offset += mtr.SchTxdmaMsgOvfl.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *TxstxsintschMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "SchWidEmpty" {
		return offset
	}
	offset += mtr.SchWidEmpty.Size()

	if fldName == "SchRidEmpty" {
		return offset
	}
	offset += mtr.SchRidEmpty.Size()

	if fldName == "SchWrTxfifoOvf" {
		return offset
	}
	offset += mtr.SchWrTxfifoOvf.Size()

	if fldName == "SchRdTxfifoOvf" {
		return offset
	}
	offset += mtr.SchRdTxfifoOvf.Size()

	if fldName == "SchStateFifoOvf" {
		return offset
	}
	offset += mtr.SchStateFifoOvf.Size()

	if fldName == "SchDrbCntQidFifo" {
		return offset
	}
	offset += mtr.SchDrbCntQidFifo.Size()

	if fldName == "SchHbmBypOvf" {
		return offset
	}
	offset += mtr.SchHbmBypOvf.Size()

	if fldName == "SchHbmBypWtagWrap" {
		return offset
	}
	offset += mtr.SchHbmBypWtagWrap.Size()

	if fldName == "SchRlidOvfl" {
		return offset
	}
	offset += mtr.SchRlidOvfl.Size()

	if fldName == "SchRlidUnfl" {
		return offset
	}
	offset += mtr.SchRlidUnfl.Size()

	if fldName == "SchNullLif" {
		return offset
	}
	offset += mtr.SchNullLif.Size()

	if fldName == "SchLifSgMismatch" {
		return offset
	}
	offset += mtr.SchLifSgMismatch.Size()

	if fldName == "SchAclrHbmLnRollovr" {
		return offset
	}
	offset += mtr.SchAclrHbmLnRollovr.Size()

	if fldName == "SchTxdmaMsgEfull" {
		return offset
	}
	offset += mtr.SchTxdmaMsgEfull.Size()

	if fldName == "SchHbmReEfull" {
		return offset
	}
	offset += mtr.SchHbmReEfull.Size()

	if fldName == "SchHbmWeEfull" {
		return offset
	}
	offset += mtr.SchHbmWeEfull.Size()

	if fldName == "SchHbmBypPendingEfull" {
		return offset
	}
	offset += mtr.SchHbmBypPendingEfull.Size()

	if fldName == "SchHbmRdPendingEfull" {
		return offset
	}
	offset += mtr.SchHbmRdPendingEfull.Size()

	if fldName == "SchHbmWrPendingEfull" {
		return offset
	}
	offset += mtr.SchHbmWrPendingEfull.Size()

	if fldName == "SchBrespErr" {
		return offset
	}
	offset += mtr.SchBrespErr.Size()

	if fldName == "SchBidErr" {
		return offset
	}
	offset += mtr.SchBidErr.Size()

	if fldName == "SchRrespErr" {
		return offset
	}
	offset += mtr.SchRrespErr.Size()

	if fldName == "SchRidErr" {
		return offset
	}
	offset += mtr.SchRidErr.Size()

	if fldName == "SchDrbCntOvfl" {
		return offset
	}
	offset += mtr.SchDrbCntOvfl.Size()

	if fldName == "SchDrbCntUnfl" {
		return offset
	}
	offset += mtr.SchDrbCntUnfl.Size()

	if fldName == "SchTxdmaMsgOvfl" {
		return offset
	}
	offset += mtr.SchTxdmaMsgOvfl.Size()

	return offset
}

// SetSchWidEmpty sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchWidEmpty(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchWidEmpty"))
	return nil
}

// SetSchRidEmpty sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRidEmpty(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRidEmpty"))
	return nil
}

// SetSchWrTxfifoOvf sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchWrTxfifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchWrTxfifoOvf"))
	return nil
}

// SetSchRdTxfifoOvf sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRdTxfifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRdTxfifoOvf"))
	return nil
}

// SetSchStateFifoOvf sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchStateFifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchStateFifoOvf"))
	return nil
}

// SetSchDrbCntQidFifo sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchDrbCntQidFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchDrbCntQidFifo"))
	return nil
}

// SetSchHbmBypOvf sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmBypOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmBypOvf"))
	return nil
}

// SetSchHbmBypWtagWrap sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmBypWtagWrap(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmBypWtagWrap"))
	return nil
}

// SetSchRlidOvfl sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRlidOvfl(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRlidOvfl"))
	return nil
}

// SetSchRlidUnfl sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRlidUnfl(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRlidUnfl"))
	return nil
}

// SetSchNullLif sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchNullLif(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchNullLif"))
	return nil
}

// SetSchLifSgMismatch sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchLifSgMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchLifSgMismatch"))
	return nil
}

// SetSchAclrHbmLnRollovr sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchAclrHbmLnRollovr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchAclrHbmLnRollovr"))
	return nil
}

// SetSchTxdmaMsgEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchTxdmaMsgEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchTxdmaMsgEfull"))
	return nil
}

// SetSchHbmReEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmReEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmReEfull"))
	return nil
}

// SetSchHbmWeEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmWeEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmWeEfull"))
	return nil
}

// SetSchHbmBypPendingEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmBypPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmBypPendingEfull"))
	return nil
}

// SetSchHbmRdPendingEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmRdPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmRdPendingEfull"))
	return nil
}

// SetSchHbmWrPendingEfull sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchHbmWrPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchHbmWrPendingEfull"))
	return nil
}

// SetSchBrespErr sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchBrespErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchBrespErr"))
	return nil
}

// SetSchBidErr sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchBidErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchBidErr"))
	return nil
}

// SetSchRrespErr sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRrespErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRrespErr"))
	return nil
}

// SetSchRidErr sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchRidErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRidErr"))
	return nil
}

// SetSchDrbCntOvfl sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchDrbCntOvfl(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchDrbCntOvfl"))
	return nil
}

// SetSchDrbCntUnfl sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchDrbCntUnfl(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchDrbCntUnfl"))
	return nil
}

// SetSchTxdmaMsgOvfl sets cunter in shared memory
func (mtr *TxstxsintschMetrics) SetSchTxdmaMsgOvfl(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchTxdmaMsgOvfl"))
	return nil
}

// TxstxsintschMetricsIterator is the iterator object
type TxstxsintschMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *TxstxsintschMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *TxstxsintschMetricsIterator) Next() *TxstxsintschMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &TxstxsintschMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *TxstxsintschMetricsIterator) Find(key uint64) (*TxstxsintschMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &TxstxsintschMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *TxstxsintschMetricsIterator) Create(key uint64) (*TxstxsintschMetrics, error) {
	tmtr := &TxstxsintschMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &TxstxsintschMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *TxstxsintschMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *TxstxsintschMetricsIterator) Free() {
	it.iter.Free()
}

// NewTxstxsintschMetricsIterator returns an iterator
func NewTxstxsintschMetricsIterator() (*TxstxsintschMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("TxstxsintschMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &TxstxsintschMetricsIterator{iter: iter}, nil
}

type TxstxsinttmrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TmrWidEmpty metrics.Counter

	TmrRidEmpty metrics.Counter

	TmrWrTxfifoOvf metrics.Counter

	TmrRdTxfifoOvf metrics.Counter

	TmrStateFifoOvf metrics.Counter

	TmrHbmBypOvf metrics.Counter

	TmrHbmBypWtagWrap metrics.Counter

	FtmrCtimeWrap metrics.Counter

	StmrCtimeWrap metrics.Counter

	StmrPushOutOfWheel metrics.Counter

	FtmrPushOutOfWheel metrics.Counter

	FtmrKeyNotPush metrics.Counter

	FtmrKeyNotFound metrics.Counter

	StmrKeyNotPush metrics.Counter

	StmrKeyNotFound metrics.Counter

	StmrStall metrics.Counter

	FtmrStall metrics.Counter

	FtmrFifoOvf metrics.Counter

	StmrFifoOvf metrics.Counter

	FtmrFifoEfull metrics.Counter

	StmrFifoEfull metrics.Counter

	TmrRejctDrbOvf metrics.Counter

	TmrRejctDrbEfull metrics.Counter

	TmrHbmReEfull metrics.Counter

	TmrHbmWeEfull metrics.Counter

	TmrHbmBypPendingEfull metrics.Counter

	TmrHbmRdPendingEfull metrics.Counter

	TmrHbmWrPendingEfull metrics.Counter

	TmrBrespErr metrics.Counter

	TmrBidErr metrics.Counter

	TmrRrespErr metrics.Counter

	TmrRidErr metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *TxstxsinttmrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *TxstxsinttmrMetrics) Size() int {
	sz := 0

	sz += mtr.TmrWidEmpty.Size()

	sz += mtr.TmrRidEmpty.Size()

	sz += mtr.TmrWrTxfifoOvf.Size()

	sz += mtr.TmrRdTxfifoOvf.Size()

	sz += mtr.TmrStateFifoOvf.Size()

	sz += mtr.TmrHbmBypOvf.Size()

	sz += mtr.TmrHbmBypWtagWrap.Size()

	sz += mtr.FtmrCtimeWrap.Size()

	sz += mtr.StmrCtimeWrap.Size()

	sz += mtr.StmrPushOutOfWheel.Size()

	sz += mtr.FtmrPushOutOfWheel.Size()

	sz += mtr.FtmrKeyNotPush.Size()

	sz += mtr.FtmrKeyNotFound.Size()

	sz += mtr.StmrKeyNotPush.Size()

	sz += mtr.StmrKeyNotFound.Size()

	sz += mtr.StmrStall.Size()

	sz += mtr.FtmrStall.Size()

	sz += mtr.FtmrFifoOvf.Size()

	sz += mtr.StmrFifoOvf.Size()

	sz += mtr.FtmrFifoEfull.Size()

	sz += mtr.StmrFifoEfull.Size()

	sz += mtr.TmrRejctDrbOvf.Size()

	sz += mtr.TmrRejctDrbEfull.Size()

	sz += mtr.TmrHbmReEfull.Size()

	sz += mtr.TmrHbmWeEfull.Size()

	sz += mtr.TmrHbmBypPendingEfull.Size()

	sz += mtr.TmrHbmRdPendingEfull.Size()

	sz += mtr.TmrHbmWrPendingEfull.Size()

	sz += mtr.TmrBrespErr.Size()

	sz += mtr.TmrBidErr.Size()

	sz += mtr.TmrRrespErr.Size()

	sz += mtr.TmrRidErr.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *TxstxsinttmrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TmrWidEmpty = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrWidEmpty.Size()

	mtr.TmrRidEmpty = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRidEmpty.Size()

	mtr.TmrWrTxfifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrWrTxfifoOvf.Size()

	mtr.TmrRdTxfifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRdTxfifoOvf.Size()

	mtr.TmrStateFifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrStateFifoOvf.Size()

	mtr.TmrHbmBypOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmBypOvf.Size()

	mtr.TmrHbmBypWtagWrap = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmBypWtagWrap.Size()

	mtr.FtmrCtimeWrap = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrCtimeWrap.Size()

	mtr.StmrCtimeWrap = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrCtimeWrap.Size()

	mtr.StmrPushOutOfWheel = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrPushOutOfWheel.Size()

	mtr.FtmrPushOutOfWheel = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrPushOutOfWheel.Size()

	mtr.FtmrKeyNotPush = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrKeyNotPush.Size()

	mtr.FtmrKeyNotFound = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrKeyNotFound.Size()

	mtr.StmrKeyNotPush = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrKeyNotPush.Size()

	mtr.StmrKeyNotFound = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrKeyNotFound.Size()

	mtr.StmrStall = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrStall.Size()

	mtr.FtmrStall = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrStall.Size()

	mtr.FtmrFifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrFifoOvf.Size()

	mtr.StmrFifoOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrFifoOvf.Size()

	mtr.FtmrFifoEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.FtmrFifoEfull.Size()

	mtr.StmrFifoEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.StmrFifoEfull.Size()

	mtr.TmrRejctDrbOvf = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRejctDrbOvf.Size()

	mtr.TmrRejctDrbEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRejctDrbEfull.Size()

	mtr.TmrHbmReEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmReEfull.Size()

	mtr.TmrHbmWeEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmWeEfull.Size()

	mtr.TmrHbmBypPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmBypPendingEfull.Size()

	mtr.TmrHbmRdPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmRdPendingEfull.Size()

	mtr.TmrHbmWrPendingEfull = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrHbmWrPendingEfull.Size()

	mtr.TmrBrespErr = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrBrespErr.Size()

	mtr.TmrBidErr = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrBidErr.Size()

	mtr.TmrRrespErr = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRrespErr.Size()

	mtr.TmrRidErr = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrRidErr.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *TxstxsinttmrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TmrWidEmpty" {
		return offset
	}
	offset += mtr.TmrWidEmpty.Size()

	if fldName == "TmrRidEmpty" {
		return offset
	}
	offset += mtr.TmrRidEmpty.Size()

	if fldName == "TmrWrTxfifoOvf" {
		return offset
	}
	offset += mtr.TmrWrTxfifoOvf.Size()

	if fldName == "TmrRdTxfifoOvf" {
		return offset
	}
	offset += mtr.TmrRdTxfifoOvf.Size()

	if fldName == "TmrStateFifoOvf" {
		return offset
	}
	offset += mtr.TmrStateFifoOvf.Size()

	if fldName == "TmrHbmBypOvf" {
		return offset
	}
	offset += mtr.TmrHbmBypOvf.Size()

	if fldName == "TmrHbmBypWtagWrap" {
		return offset
	}
	offset += mtr.TmrHbmBypWtagWrap.Size()

	if fldName == "FtmrCtimeWrap" {
		return offset
	}
	offset += mtr.FtmrCtimeWrap.Size()

	if fldName == "StmrCtimeWrap" {
		return offset
	}
	offset += mtr.StmrCtimeWrap.Size()

	if fldName == "StmrPushOutOfWheel" {
		return offset
	}
	offset += mtr.StmrPushOutOfWheel.Size()

	if fldName == "FtmrPushOutOfWheel" {
		return offset
	}
	offset += mtr.FtmrPushOutOfWheel.Size()

	if fldName == "FtmrKeyNotPush" {
		return offset
	}
	offset += mtr.FtmrKeyNotPush.Size()

	if fldName == "FtmrKeyNotFound" {
		return offset
	}
	offset += mtr.FtmrKeyNotFound.Size()

	if fldName == "StmrKeyNotPush" {
		return offset
	}
	offset += mtr.StmrKeyNotPush.Size()

	if fldName == "StmrKeyNotFound" {
		return offset
	}
	offset += mtr.StmrKeyNotFound.Size()

	if fldName == "StmrStall" {
		return offset
	}
	offset += mtr.StmrStall.Size()

	if fldName == "FtmrStall" {
		return offset
	}
	offset += mtr.FtmrStall.Size()

	if fldName == "FtmrFifoOvf" {
		return offset
	}
	offset += mtr.FtmrFifoOvf.Size()

	if fldName == "StmrFifoOvf" {
		return offset
	}
	offset += mtr.StmrFifoOvf.Size()

	if fldName == "FtmrFifoEfull" {
		return offset
	}
	offset += mtr.FtmrFifoEfull.Size()

	if fldName == "StmrFifoEfull" {
		return offset
	}
	offset += mtr.StmrFifoEfull.Size()

	if fldName == "TmrRejctDrbOvf" {
		return offset
	}
	offset += mtr.TmrRejctDrbOvf.Size()

	if fldName == "TmrRejctDrbEfull" {
		return offset
	}
	offset += mtr.TmrRejctDrbEfull.Size()

	if fldName == "TmrHbmReEfull" {
		return offset
	}
	offset += mtr.TmrHbmReEfull.Size()

	if fldName == "TmrHbmWeEfull" {
		return offset
	}
	offset += mtr.TmrHbmWeEfull.Size()

	if fldName == "TmrHbmBypPendingEfull" {
		return offset
	}
	offset += mtr.TmrHbmBypPendingEfull.Size()

	if fldName == "TmrHbmRdPendingEfull" {
		return offset
	}
	offset += mtr.TmrHbmRdPendingEfull.Size()

	if fldName == "TmrHbmWrPendingEfull" {
		return offset
	}
	offset += mtr.TmrHbmWrPendingEfull.Size()

	if fldName == "TmrBrespErr" {
		return offset
	}
	offset += mtr.TmrBrespErr.Size()

	if fldName == "TmrBidErr" {
		return offset
	}
	offset += mtr.TmrBidErr.Size()

	if fldName == "TmrRrespErr" {
		return offset
	}
	offset += mtr.TmrRrespErr.Size()

	if fldName == "TmrRidErr" {
		return offset
	}
	offset += mtr.TmrRidErr.Size()

	return offset
}

// SetTmrWidEmpty sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrWidEmpty(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrWidEmpty"))
	return nil
}

// SetTmrRidEmpty sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRidEmpty(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRidEmpty"))
	return nil
}

// SetTmrWrTxfifoOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrWrTxfifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrWrTxfifoOvf"))
	return nil
}

// SetTmrRdTxfifoOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRdTxfifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRdTxfifoOvf"))
	return nil
}

// SetTmrStateFifoOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrStateFifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrStateFifoOvf"))
	return nil
}

// SetTmrHbmBypOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmBypOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmBypOvf"))
	return nil
}

// SetTmrHbmBypWtagWrap sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmBypWtagWrap(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmBypWtagWrap"))
	return nil
}

// SetFtmrCtimeWrap sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrCtimeWrap(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrCtimeWrap"))
	return nil
}

// SetStmrCtimeWrap sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrCtimeWrap(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrCtimeWrap"))
	return nil
}

// SetStmrPushOutOfWheel sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrPushOutOfWheel(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrPushOutOfWheel"))
	return nil
}

// SetFtmrPushOutOfWheel sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrPushOutOfWheel(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrPushOutOfWheel"))
	return nil
}

// SetFtmrKeyNotPush sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrKeyNotPush(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrKeyNotPush"))
	return nil
}

// SetFtmrKeyNotFound sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrKeyNotFound(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrKeyNotFound"))
	return nil
}

// SetStmrKeyNotPush sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrKeyNotPush(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrKeyNotPush"))
	return nil
}

// SetStmrKeyNotFound sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrKeyNotFound(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrKeyNotFound"))
	return nil
}

// SetStmrStall sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrStall(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrStall"))
	return nil
}

// SetFtmrStall sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrStall(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrStall"))
	return nil
}

// SetFtmrFifoOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrFifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrFifoOvf"))
	return nil
}

// SetStmrFifoOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrFifoOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrFifoOvf"))
	return nil
}

// SetFtmrFifoEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetFtmrFifoEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("FtmrFifoEfull"))
	return nil
}

// SetStmrFifoEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetStmrFifoEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("StmrFifoEfull"))
	return nil
}

// SetTmrRejctDrbOvf sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRejctDrbOvf(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRejctDrbOvf"))
	return nil
}

// SetTmrRejctDrbEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRejctDrbEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRejctDrbEfull"))
	return nil
}

// SetTmrHbmReEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmReEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmReEfull"))
	return nil
}

// SetTmrHbmWeEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmWeEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmWeEfull"))
	return nil
}

// SetTmrHbmBypPendingEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmBypPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmBypPendingEfull"))
	return nil
}

// SetTmrHbmRdPendingEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmRdPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmRdPendingEfull"))
	return nil
}

// SetTmrHbmWrPendingEfull sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrHbmWrPendingEfull(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrHbmWrPendingEfull"))
	return nil
}

// SetTmrBrespErr sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrBrespErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrBrespErr"))
	return nil
}

// SetTmrBidErr sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrBidErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrBidErr"))
	return nil
}

// SetTmrRrespErr sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRrespErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRrespErr"))
	return nil
}

// SetTmrRidErr sets cunter in shared memory
func (mtr *TxstxsinttmrMetrics) SetTmrRidErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrRidErr"))
	return nil
}

// TxstxsinttmrMetricsIterator is the iterator object
type TxstxsinttmrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *TxstxsinttmrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *TxstxsinttmrMetricsIterator) Next() *TxstxsinttmrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &TxstxsinttmrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *TxstxsinttmrMetricsIterator) Find(key uint64) (*TxstxsinttmrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &TxstxsinttmrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *TxstxsinttmrMetricsIterator) Create(key uint64) (*TxstxsinttmrMetrics, error) {
	tmtr := &TxstxsinttmrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &TxstxsinttmrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *TxstxsinttmrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *TxstxsinttmrMetricsIterator) Free() {
	it.iter.Free()
}

// NewTxstxsinttmrMetricsIterator returns an iterator
func NewTxstxsinttmrMetricsIterator() (*TxstxsinttmrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("TxstxsinttmrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &TxstxsinttmrMetricsIterator{iter: iter}, nil
}

type TxstxsintsramseccMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TmrCntUncorrectable metrics.Counter

	TmrCntCorrectable metrics.Counter

	SchLifMapUncorrectable metrics.Counter

	SchLifMapCorrectable metrics.Counter

	SchRlidMapUncorrectable metrics.Counter

	SchRlidMapCorrectable metrics.Counter

	SchGrpUncorrectable metrics.Counter

	SchGrpCorrectable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *TxstxsintsramseccMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *TxstxsintsramseccMetrics) Size() int {
	sz := 0

	sz += mtr.TmrCntUncorrectable.Size()

	sz += mtr.TmrCntCorrectable.Size()

	sz += mtr.SchLifMapUncorrectable.Size()

	sz += mtr.SchLifMapCorrectable.Size()

	sz += mtr.SchRlidMapUncorrectable.Size()

	sz += mtr.SchRlidMapCorrectable.Size()

	sz += mtr.SchGrpUncorrectable.Size()

	sz += mtr.SchGrpCorrectable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *TxstxsintsramseccMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TmrCntUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrCntUncorrectable.Size()

	mtr.TmrCntCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.TmrCntCorrectable.Size()

	mtr.SchLifMapUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchLifMapUncorrectable.Size()

	mtr.SchLifMapCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchLifMapCorrectable.Size()

	mtr.SchRlidMapUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRlidMapUncorrectable.Size()

	mtr.SchRlidMapCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchRlidMapCorrectable.Size()

	mtr.SchGrpUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchGrpUncorrectable.Size()

	mtr.SchGrpCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SchGrpCorrectable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *TxstxsintsramseccMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TmrCntUncorrectable" {
		return offset
	}
	offset += mtr.TmrCntUncorrectable.Size()

	if fldName == "TmrCntCorrectable" {
		return offset
	}
	offset += mtr.TmrCntCorrectable.Size()

	if fldName == "SchLifMapUncorrectable" {
		return offset
	}
	offset += mtr.SchLifMapUncorrectable.Size()

	if fldName == "SchLifMapCorrectable" {
		return offset
	}
	offset += mtr.SchLifMapCorrectable.Size()

	if fldName == "SchRlidMapUncorrectable" {
		return offset
	}
	offset += mtr.SchRlidMapUncorrectable.Size()

	if fldName == "SchRlidMapCorrectable" {
		return offset
	}
	offset += mtr.SchRlidMapCorrectable.Size()

	if fldName == "SchGrpUncorrectable" {
		return offset
	}
	offset += mtr.SchGrpUncorrectable.Size()

	if fldName == "SchGrpCorrectable" {
		return offset
	}
	offset += mtr.SchGrpCorrectable.Size()

	return offset
}

// SetTmrCntUncorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetTmrCntUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrCntUncorrectable"))
	return nil
}

// SetTmrCntCorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetTmrCntCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TmrCntCorrectable"))
	return nil
}

// SetSchLifMapUncorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchLifMapUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchLifMapUncorrectable"))
	return nil
}

// SetSchLifMapCorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchLifMapCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchLifMapCorrectable"))
	return nil
}

// SetSchRlidMapUncorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchRlidMapUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRlidMapUncorrectable"))
	return nil
}

// SetSchRlidMapCorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchRlidMapCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchRlidMapCorrectable"))
	return nil
}

// SetSchGrpUncorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchGrpUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchGrpUncorrectable"))
	return nil
}

// SetSchGrpCorrectable sets cunter in shared memory
func (mtr *TxstxsintsramseccMetrics) SetSchGrpCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SchGrpCorrectable"))
	return nil
}

// TxstxsintsramseccMetricsIterator is the iterator object
type TxstxsintsramseccMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *TxstxsintsramseccMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *TxstxsintsramseccMetricsIterator) Next() *TxstxsintsramseccMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &TxstxsintsramseccMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *TxstxsintsramseccMetricsIterator) Find(key uint64) (*TxstxsintsramseccMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &TxstxsintsramseccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *TxstxsintsramseccMetricsIterator) Create(key uint64) (*TxstxsintsramseccMetrics, error) {
	tmtr := &TxstxsintsramseccMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &TxstxsintsramseccMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *TxstxsintsramseccMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *TxstxsintsramseccMetricsIterator) Free() {
	it.iter.Free()
}

// NewTxstxsintsramseccMetricsIterator returns an iterator
func NewTxstxsintsramseccMetricsIterator() (*TxstxsintsramseccMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("TxstxsintsramseccMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &TxstxsintsramseccMetricsIterator{iter: iter}, nil
}

type Pctte0interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte0interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte0interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte0interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte0interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte0interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte0interrMetricsIterator is the iterator object
type Pctte0interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte0interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte0interrMetricsIterator) Next() *Pctte0interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte0interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte0interrMetricsIterator) Find(key uint64) (*Pctte0interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte0interrMetricsIterator) Create(key uint64) (*Pctte0interrMetrics, error) {
	tmtr := &Pctte0interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte0interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte0interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte0interrMetricsIterator returns an iterator
func NewPctte0interrMetricsIterator() (*Pctte0interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte0interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte0interrMetricsIterator{iter: iter}, nil
}

type Pctte0intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte0intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte0intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte0intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte0intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte0intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte0intinfoMetricsIterator is the iterator object
type Pctte0intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte0intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte0intinfoMetricsIterator) Next() *Pctte0intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte0intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte0intinfoMetricsIterator) Find(key uint64) (*Pctte0intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte0intinfoMetricsIterator) Create(key uint64) (*Pctte0intinfoMetrics, error) {
	tmtr := &Pctte0intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte0intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte0intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte0intinfoMetricsIterator returns an iterator
func NewPctte0intinfoMetricsIterator() (*Pctte0intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte0intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte0intinfoMetricsIterator{iter: iter}, nil
}

type Pctte1interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte1interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte1interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte1interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte1interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte1interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte1interrMetricsIterator is the iterator object
type Pctte1interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte1interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte1interrMetricsIterator) Next() *Pctte1interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte1interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte1interrMetricsIterator) Find(key uint64) (*Pctte1interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte1interrMetricsIterator) Create(key uint64) (*Pctte1interrMetrics, error) {
	tmtr := &Pctte1interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte1interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte1interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte1interrMetricsIterator returns an iterator
func NewPctte1interrMetricsIterator() (*Pctte1interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte1interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte1interrMetricsIterator{iter: iter}, nil
}

type Pctte1intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte1intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte1intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte1intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte1intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte1intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte1intinfoMetricsIterator is the iterator object
type Pctte1intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte1intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte1intinfoMetricsIterator) Next() *Pctte1intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte1intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte1intinfoMetricsIterator) Find(key uint64) (*Pctte1intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte1intinfoMetricsIterator) Create(key uint64) (*Pctte1intinfoMetrics, error) {
	tmtr := &Pctte1intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte1intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte1intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte1intinfoMetricsIterator returns an iterator
func NewPctte1intinfoMetricsIterator() (*Pctte1intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte1intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte1intinfoMetricsIterator{iter: iter}, nil
}

type Pctte2interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte2interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte2interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte2interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte2interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte2interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte2interrMetricsIterator is the iterator object
type Pctte2interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte2interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte2interrMetricsIterator) Next() *Pctte2interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte2interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte2interrMetricsIterator) Find(key uint64) (*Pctte2interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte2interrMetricsIterator) Create(key uint64) (*Pctte2interrMetrics, error) {
	tmtr := &Pctte2interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte2interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte2interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte2interrMetricsIterator returns an iterator
func NewPctte2interrMetricsIterator() (*Pctte2interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte2interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte2interrMetricsIterator{iter: iter}, nil
}

type Pctte2intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte2intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte2intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte2intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte2intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte2intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte2intinfoMetricsIterator is the iterator object
type Pctte2intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte2intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte2intinfoMetricsIterator) Next() *Pctte2intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte2intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte2intinfoMetricsIterator) Find(key uint64) (*Pctte2intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte2intinfoMetricsIterator) Create(key uint64) (*Pctte2intinfoMetrics, error) {
	tmtr := &Pctte2intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte2intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte2intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte2intinfoMetricsIterator returns an iterator
func NewPctte2intinfoMetricsIterator() (*Pctte2intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte2intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte2intinfoMetricsIterator{iter: iter}, nil
}

type Pctte3interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte3interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte3interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte3interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte3interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte3interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte3interrMetricsIterator is the iterator object
type Pctte3interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte3interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte3interrMetricsIterator) Next() *Pctte3interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte3interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte3interrMetricsIterator) Find(key uint64) (*Pctte3interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte3interrMetricsIterator) Create(key uint64) (*Pctte3interrMetrics, error) {
	tmtr := &Pctte3interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte3interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte3interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte3interrMetricsIterator returns an iterator
func NewPctte3interrMetricsIterator() (*Pctte3interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte3interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte3interrMetricsIterator{iter: iter}, nil
}

type Pctte3intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte3intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte3intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte3intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte3intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte3intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte3intinfoMetricsIterator is the iterator object
type Pctte3intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte3intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte3intinfoMetricsIterator) Next() *Pctte3intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte3intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte3intinfoMetricsIterator) Find(key uint64) (*Pctte3intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte3intinfoMetricsIterator) Create(key uint64) (*Pctte3intinfoMetrics, error) {
	tmtr := &Pctte3intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte3intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte3intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte3intinfoMetricsIterator returns an iterator
func NewPctte3intinfoMetricsIterator() (*Pctte3intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte3intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte3intinfoMetricsIterator{iter: iter}, nil
}

type Pctte4interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte4interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte4interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte4interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte4interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte4interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte4interrMetricsIterator is the iterator object
type Pctte4interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte4interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte4interrMetricsIterator) Next() *Pctte4interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte4interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte4interrMetricsIterator) Find(key uint64) (*Pctte4interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte4interrMetricsIterator) Create(key uint64) (*Pctte4interrMetrics, error) {
	tmtr := &Pctte4interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte4interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte4interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte4interrMetricsIterator returns an iterator
func NewPctte4interrMetricsIterator() (*Pctte4interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte4interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte4interrMetricsIterator{iter: iter}, nil
}

type Pctte4intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte4intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte4intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte4intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte4intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte4intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte4intinfoMetricsIterator is the iterator object
type Pctte4intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte4intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte4intinfoMetricsIterator) Next() *Pctte4intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte4intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte4intinfoMetricsIterator) Find(key uint64) (*Pctte4intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte4intinfoMetricsIterator) Create(key uint64) (*Pctte4intinfoMetrics, error) {
	tmtr := &Pctte4intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte4intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte4intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte4intinfoMetricsIterator returns an iterator
func NewPctte4intinfoMetricsIterator() (*Pctte4intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte4intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte4intinfoMetricsIterator{iter: iter}, nil
}

type Pctte5interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte5interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte5interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte5interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte5interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte5interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte5interrMetricsIterator is the iterator object
type Pctte5interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte5interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte5interrMetricsIterator) Next() *Pctte5interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte5interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte5interrMetricsIterator) Find(key uint64) (*Pctte5interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte5interrMetricsIterator) Create(key uint64) (*Pctte5interrMetrics, error) {
	tmtr := &Pctte5interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte5interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte5interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte5interrMetricsIterator returns an iterator
func NewPctte5interrMetricsIterator() (*Pctte5interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte5interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte5interrMetricsIterator{iter: iter}, nil
}

type Pctte5intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte5intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte5intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte5intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte5intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte5intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte5intinfoMetricsIterator is the iterator object
type Pctte5intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte5intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte5intinfoMetricsIterator) Next() *Pctte5intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte5intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte5intinfoMetricsIterator) Find(key uint64) (*Pctte5intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte5intinfoMetricsIterator) Create(key uint64) (*Pctte5intinfoMetrics, error) {
	tmtr := &Pctte5intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte5intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte5intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte5intinfoMetricsIterator returns an iterator
func NewPctte5intinfoMetricsIterator() (*Pctte5intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte5intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte5intinfoMetricsIterator{iter: iter}, nil
}

type Pctte6interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte6interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte6interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte6interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte6interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte6interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte6interrMetricsIterator is the iterator object
type Pctte6interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte6interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte6interrMetricsIterator) Next() *Pctte6interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte6interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte6interrMetricsIterator) Find(key uint64) (*Pctte6interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte6interrMetricsIterator) Create(key uint64) (*Pctte6interrMetrics, error) {
	tmtr := &Pctte6interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte6interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte6interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte6interrMetricsIterator returns an iterator
func NewPctte6interrMetricsIterator() (*Pctte6interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte6interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte6interrMetricsIterator{iter: iter}, nil
}

type Pctte6intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte6intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte6intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte6intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte6intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte6intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte6intinfoMetricsIterator is the iterator object
type Pctte6intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte6intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte6intinfoMetricsIterator) Next() *Pctte6intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte6intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte6intinfoMetricsIterator) Find(key uint64) (*Pctte6intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte6intinfoMetricsIterator) Create(key uint64) (*Pctte6intinfoMetrics, error) {
	tmtr := &Pctte6intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte6intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte6intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte6intinfoMetricsIterator returns an iterator
func NewPctte6intinfoMetricsIterator() (*Pctte6intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte6intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte6intinfoMetricsIterator{iter: iter}, nil
}

type Pctte7interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MissSop metrics.Counter

	MissEop metrics.Counter

	PhvMaxSize metrics.Counter

	SpuriousAxiRsp metrics.Counter

	SpuriousTcamRsp metrics.Counter

	Te2MpuTimeout metrics.Counter

	AxiRdrspErr metrics.Counter

	AxiBadRead metrics.Counter

	TcamReqIdxFifo metrics.Counter

	TcamRspIdxFifo metrics.Counter

	MpuReqIdxFifo metrics.Counter

	AxiReqIdxFifo metrics.Counter

	ProcTblVldWoProc metrics.Counter

	PendWoWb metrics.Counter

	Pend1WoPend0 metrics.Counter

	BothPendDown metrics.Counter

	PendWoProcDown metrics.Counter

	BothPendWentUp metrics.Counter

	LoadedButNoProc metrics.Counter

	LoadedButNoProcTblVld metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte7interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte7interrMetrics) Size() int {
	sz := 0

	sz += mtr.MissSop.Size()

	sz += mtr.MissEop.Size()

	sz += mtr.PhvMaxSize.Size()

	sz += mtr.SpuriousAxiRsp.Size()

	sz += mtr.SpuriousTcamRsp.Size()

	sz += mtr.Te2MpuTimeout.Size()

	sz += mtr.AxiRdrspErr.Size()

	sz += mtr.AxiBadRead.Size()

	sz += mtr.TcamReqIdxFifo.Size()

	sz += mtr.TcamRspIdxFifo.Size()

	sz += mtr.MpuReqIdxFifo.Size()

	sz += mtr.AxiReqIdxFifo.Size()

	sz += mtr.ProcTblVldWoProc.Size()

	sz += mtr.PendWoWb.Size()

	sz += mtr.Pend1WoPend0.Size()

	sz += mtr.BothPendDown.Size()

	sz += mtr.PendWoProcDown.Size()

	sz += mtr.BothPendWentUp.Size()

	sz += mtr.LoadedButNoProc.Size()

	sz += mtr.LoadedButNoProcTblVld.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte7interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MissSop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissSop.Size()

	mtr.MissEop = mtr.metrics.GetCounter(offset)
	offset += mtr.MissEop.Size()

	mtr.PhvMaxSize = mtr.metrics.GetCounter(offset)
	offset += mtr.PhvMaxSize.Size()

	mtr.SpuriousAxiRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousAxiRsp.Size()

	mtr.SpuriousTcamRsp = mtr.metrics.GetCounter(offset)
	offset += mtr.SpuriousTcamRsp.Size()

	mtr.Te2MpuTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.Te2MpuTimeout.Size()

	mtr.AxiRdrspErr = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiRdrspErr.Size()

	mtr.AxiBadRead = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiBadRead.Size()

	mtr.TcamReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamReqIdxFifo.Size()

	mtr.TcamRspIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.TcamRspIdxFifo.Size()

	mtr.MpuReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuReqIdxFifo.Size()

	mtr.AxiReqIdxFifo = mtr.metrics.GetCounter(offset)
	offset += mtr.AxiReqIdxFifo.Size()

	mtr.ProcTblVldWoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.ProcTblVldWoProc.Size()

	mtr.PendWoWb = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoWb.Size()

	mtr.Pend1WoPend0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Pend1WoPend0.Size()

	mtr.BothPendDown = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendDown.Size()

	mtr.PendWoProcDown = mtr.metrics.GetCounter(offset)
	offset += mtr.PendWoProcDown.Size()

	mtr.BothPendWentUp = mtr.metrics.GetCounter(offset)
	offset += mtr.BothPendWentUp.Size()

	mtr.LoadedButNoProc = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProc.Size()

	mtr.LoadedButNoProcTblVld = mtr.metrics.GetCounter(offset)
	offset += mtr.LoadedButNoProcTblVld.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte7interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MissSop" {
		return offset
	}
	offset += mtr.MissSop.Size()

	if fldName == "MissEop" {
		return offset
	}
	offset += mtr.MissEop.Size()

	if fldName == "PhvMaxSize" {
		return offset
	}
	offset += mtr.PhvMaxSize.Size()

	if fldName == "SpuriousAxiRsp" {
		return offset
	}
	offset += mtr.SpuriousAxiRsp.Size()

	if fldName == "SpuriousTcamRsp" {
		return offset
	}
	offset += mtr.SpuriousTcamRsp.Size()

	if fldName == "Te2MpuTimeout" {
		return offset
	}
	offset += mtr.Te2MpuTimeout.Size()

	if fldName == "AxiRdrspErr" {
		return offset
	}
	offset += mtr.AxiRdrspErr.Size()

	if fldName == "AxiBadRead" {
		return offset
	}
	offset += mtr.AxiBadRead.Size()

	if fldName == "TcamReqIdxFifo" {
		return offset
	}
	offset += mtr.TcamReqIdxFifo.Size()

	if fldName == "TcamRspIdxFifo" {
		return offset
	}
	offset += mtr.TcamRspIdxFifo.Size()

	if fldName == "MpuReqIdxFifo" {
		return offset
	}
	offset += mtr.MpuReqIdxFifo.Size()

	if fldName == "AxiReqIdxFifo" {
		return offset
	}
	offset += mtr.AxiReqIdxFifo.Size()

	if fldName == "ProcTblVldWoProc" {
		return offset
	}
	offset += mtr.ProcTblVldWoProc.Size()

	if fldName == "PendWoWb" {
		return offset
	}
	offset += mtr.PendWoWb.Size()

	if fldName == "Pend1WoPend0" {
		return offset
	}
	offset += mtr.Pend1WoPend0.Size()

	if fldName == "BothPendDown" {
		return offset
	}
	offset += mtr.BothPendDown.Size()

	if fldName == "PendWoProcDown" {
		return offset
	}
	offset += mtr.PendWoProcDown.Size()

	if fldName == "BothPendWentUp" {
		return offset
	}
	offset += mtr.BothPendWentUp.Size()

	if fldName == "LoadedButNoProc" {
		return offset
	}
	offset += mtr.LoadedButNoProc.Size()

	if fldName == "LoadedButNoProcTblVld" {
		return offset
	}
	offset += mtr.LoadedButNoProcTblVld.Size()

	return offset
}

// SetMissSop sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetMissSop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissSop"))
	return nil
}

// SetMissEop sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetMissEop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MissEop"))
	return nil
}

// SetPhvMaxSize sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetPhvMaxSize(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PhvMaxSize"))
	return nil
}

// SetSpuriousAxiRsp sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetSpuriousAxiRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousAxiRsp"))
	return nil
}

// SetSpuriousTcamRsp sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetSpuriousTcamRsp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SpuriousTcamRsp"))
	return nil
}

// SetTe2MpuTimeout sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetTe2MpuTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Te2MpuTimeout"))
	return nil
}

// SetAxiRdrspErr sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetAxiRdrspErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiRdrspErr"))
	return nil
}

// SetAxiBadRead sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetAxiBadRead(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiBadRead"))
	return nil
}

// SetTcamReqIdxFifo sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetTcamReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamReqIdxFifo"))
	return nil
}

// SetTcamRspIdxFifo sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetTcamRspIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TcamRspIdxFifo"))
	return nil
}

// SetMpuReqIdxFifo sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetMpuReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuReqIdxFifo"))
	return nil
}

// SetAxiReqIdxFifo sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetAxiReqIdxFifo(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("AxiReqIdxFifo"))
	return nil
}

// SetProcTblVldWoProc sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetProcTblVldWoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProcTblVldWoProc"))
	return nil
}

// SetPendWoWb sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetPendWoWb(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoWb"))
	return nil
}

// SetPend1WoPend0 sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetPend1WoPend0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Pend1WoPend0"))
	return nil
}

// SetBothPendDown sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetBothPendDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendDown"))
	return nil
}

// SetPendWoProcDown sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetPendWoProcDown(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PendWoProcDown"))
	return nil
}

// SetBothPendWentUp sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetBothPendWentUp(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("BothPendWentUp"))
	return nil
}

// SetLoadedButNoProc sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetLoadedButNoProc(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProc"))
	return nil
}

// SetLoadedButNoProcTblVld sets cunter in shared memory
func (mtr *Pctte7interrMetrics) SetLoadedButNoProcTblVld(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("LoadedButNoProcTblVld"))
	return nil
}

// Pctte7interrMetricsIterator is the iterator object
type Pctte7interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte7interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte7interrMetricsIterator) Next() *Pctte7interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte7interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte7interrMetricsIterator) Find(key uint64) (*Pctte7interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte7interrMetricsIterator) Create(key uint64) (*Pctte7interrMetrics, error) {
	tmtr := &Pctte7interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte7interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte7interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte7interrMetricsIterator returns an iterator
func NewPctte7interrMetricsIterator() (*Pctte7interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte7interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte7interrMetricsIterator{iter: iter}, nil
}

type Pctte7intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ProfileCamHit0 metrics.Counter

	ProfileCamHit1 metrics.Counter

	ProfileCamHit2 metrics.Counter

	ProfileCamHit3 metrics.Counter

	ProfileCamHit4 metrics.Counter

	ProfileCamHit5 metrics.Counter

	ProfileCamHit6 metrics.Counter

	ProfileCamHit7 metrics.Counter

	ProfileCamHit8 metrics.Counter

	ProfileCamHit9 metrics.Counter

	ProfileCamHit10 metrics.Counter

	ProfileCamHit11 metrics.Counter

	ProfileCamHit12 metrics.Counter

	ProfileCamHit13 metrics.Counter

	ProfileCamHit14 metrics.Counter

	ProfileCamHit15 metrics.Counter

	ProfileCamMiss metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctte7intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctte7intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.ProfileCamHit0.Size()

	sz += mtr.ProfileCamHit1.Size()

	sz += mtr.ProfileCamHit2.Size()

	sz += mtr.ProfileCamHit3.Size()

	sz += mtr.ProfileCamHit4.Size()

	sz += mtr.ProfileCamHit5.Size()

	sz += mtr.ProfileCamHit6.Size()

	sz += mtr.ProfileCamHit7.Size()

	sz += mtr.ProfileCamHit8.Size()

	sz += mtr.ProfileCamHit9.Size()

	sz += mtr.ProfileCamHit10.Size()

	sz += mtr.ProfileCamHit11.Size()

	sz += mtr.ProfileCamHit12.Size()

	sz += mtr.ProfileCamHit13.Size()

	sz += mtr.ProfileCamHit14.Size()

	sz += mtr.ProfileCamHit15.Size()

	sz += mtr.ProfileCamMiss.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctte7intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ProfileCamHit0 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit0.Size()

	mtr.ProfileCamHit1 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit1.Size()

	mtr.ProfileCamHit2 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit2.Size()

	mtr.ProfileCamHit3 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit3.Size()

	mtr.ProfileCamHit4 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit4.Size()

	mtr.ProfileCamHit5 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit5.Size()

	mtr.ProfileCamHit6 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit6.Size()

	mtr.ProfileCamHit7 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit7.Size()

	mtr.ProfileCamHit8 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit8.Size()

	mtr.ProfileCamHit9 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit9.Size()

	mtr.ProfileCamHit10 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit10.Size()

	mtr.ProfileCamHit11 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit11.Size()

	mtr.ProfileCamHit12 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit12.Size()

	mtr.ProfileCamHit13 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit13.Size()

	mtr.ProfileCamHit14 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit14.Size()

	mtr.ProfileCamHit15 = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamHit15.Size()

	mtr.ProfileCamMiss = mtr.metrics.GetCounter(offset)
	offset += mtr.ProfileCamMiss.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctte7intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ProfileCamHit0" {
		return offset
	}
	offset += mtr.ProfileCamHit0.Size()

	if fldName == "ProfileCamHit1" {
		return offset
	}
	offset += mtr.ProfileCamHit1.Size()

	if fldName == "ProfileCamHit2" {
		return offset
	}
	offset += mtr.ProfileCamHit2.Size()

	if fldName == "ProfileCamHit3" {
		return offset
	}
	offset += mtr.ProfileCamHit3.Size()

	if fldName == "ProfileCamHit4" {
		return offset
	}
	offset += mtr.ProfileCamHit4.Size()

	if fldName == "ProfileCamHit5" {
		return offset
	}
	offset += mtr.ProfileCamHit5.Size()

	if fldName == "ProfileCamHit6" {
		return offset
	}
	offset += mtr.ProfileCamHit6.Size()

	if fldName == "ProfileCamHit7" {
		return offset
	}
	offset += mtr.ProfileCamHit7.Size()

	if fldName == "ProfileCamHit8" {
		return offset
	}
	offset += mtr.ProfileCamHit8.Size()

	if fldName == "ProfileCamHit9" {
		return offset
	}
	offset += mtr.ProfileCamHit9.Size()

	if fldName == "ProfileCamHit10" {
		return offset
	}
	offset += mtr.ProfileCamHit10.Size()

	if fldName == "ProfileCamHit11" {
		return offset
	}
	offset += mtr.ProfileCamHit11.Size()

	if fldName == "ProfileCamHit12" {
		return offset
	}
	offset += mtr.ProfileCamHit12.Size()

	if fldName == "ProfileCamHit13" {
		return offset
	}
	offset += mtr.ProfileCamHit13.Size()

	if fldName == "ProfileCamHit14" {
		return offset
	}
	offset += mtr.ProfileCamHit14.Size()

	if fldName == "ProfileCamHit15" {
		return offset
	}
	offset += mtr.ProfileCamHit15.Size()

	if fldName == "ProfileCamMiss" {
		return offset
	}
	offset += mtr.ProfileCamMiss.Size()

	return offset
}

// SetProfileCamHit0 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit0"))
	return nil
}

// SetProfileCamHit1 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit1"))
	return nil
}

// SetProfileCamHit2 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit2"))
	return nil
}

// SetProfileCamHit3 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit3"))
	return nil
}

// SetProfileCamHit4 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit4"))
	return nil
}

// SetProfileCamHit5 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit5"))
	return nil
}

// SetProfileCamHit6 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit6"))
	return nil
}

// SetProfileCamHit7 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit7"))
	return nil
}

// SetProfileCamHit8 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit8"))
	return nil
}

// SetProfileCamHit9 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit9"))
	return nil
}

// SetProfileCamHit10 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit10"))
	return nil
}

// SetProfileCamHit11 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit11"))
	return nil
}

// SetProfileCamHit12 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit12(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit12"))
	return nil
}

// SetProfileCamHit13 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit13(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit13"))
	return nil
}

// SetProfileCamHit14 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit14(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit14"))
	return nil
}

// SetProfileCamHit15 sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamHit15(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamHit15"))
	return nil
}

// SetProfileCamMiss sets cunter in shared memory
func (mtr *Pctte7intinfoMetrics) SetProfileCamMiss(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ProfileCamMiss"))
	return nil
}

// Pctte7intinfoMetricsIterator is the iterator object
type Pctte7intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctte7intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctte7intinfoMetricsIterator) Next() *Pctte7intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctte7intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctte7intinfoMetricsIterator) Find(key uint64) (*Pctte7intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctte7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctte7intinfoMetricsIterator) Create(key uint64) (*Pctte7intinfoMetrics, error) {
	tmtr := &Pctte7intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctte7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctte7intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctte7intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctte7intinfoMetricsIterator returns an iterator
func NewPctte7intinfoMetricsIterator() (*Pctte7intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctte7intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctte7intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu0interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu0interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu0interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu0interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu0interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu0interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu0interrMetricsIterator is the iterator object
type Pctmpu0interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu0interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu0interrMetricsIterator) Next() *Pctmpu0interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu0interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu0interrMetricsIterator) Find(key uint64) (*Pctmpu0interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu0interrMetricsIterator) Create(key uint64) (*Pctmpu0interrMetrics, error) {
	tmtr := &Pctmpu0interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu0interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu0interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu0interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu0interrMetricsIterator returns an iterator
func NewPctmpu0interrMetricsIterator() (*Pctmpu0interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu0interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu0interrMetricsIterator{iter: iter}, nil
}

type Pctmpu0intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu0intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu0intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu0intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu0intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu0intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu0intinfoMetricsIterator is the iterator object
type Pctmpu0intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu0intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu0intinfoMetricsIterator) Next() *Pctmpu0intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu0intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu0intinfoMetricsIterator) Find(key uint64) (*Pctmpu0intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu0intinfoMetricsIterator) Create(key uint64) (*Pctmpu0intinfoMetrics, error) {
	tmtr := &Pctmpu0intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu0intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu0intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu0intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu0intinfoMetricsIterator returns an iterator
func NewPctmpu0intinfoMetricsIterator() (*Pctmpu0intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu0intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu0intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu1interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu1interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu1interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu1interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu1interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu1interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu1interrMetricsIterator is the iterator object
type Pctmpu1interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu1interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu1interrMetricsIterator) Next() *Pctmpu1interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu1interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu1interrMetricsIterator) Find(key uint64) (*Pctmpu1interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu1interrMetricsIterator) Create(key uint64) (*Pctmpu1interrMetrics, error) {
	tmtr := &Pctmpu1interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu1interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu1interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu1interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu1interrMetricsIterator returns an iterator
func NewPctmpu1interrMetricsIterator() (*Pctmpu1interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu1interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu1interrMetricsIterator{iter: iter}, nil
}

type Pctmpu1intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu1intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu1intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu1intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu1intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu1intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu1intinfoMetricsIterator is the iterator object
type Pctmpu1intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu1intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu1intinfoMetricsIterator) Next() *Pctmpu1intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu1intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu1intinfoMetricsIterator) Find(key uint64) (*Pctmpu1intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu1intinfoMetricsIterator) Create(key uint64) (*Pctmpu1intinfoMetrics, error) {
	tmtr := &Pctmpu1intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu1intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu1intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu1intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu1intinfoMetricsIterator returns an iterator
func NewPctmpu1intinfoMetricsIterator() (*Pctmpu1intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu1intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu1intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu2interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu2interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu2interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu2interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu2interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu2interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu2interrMetricsIterator is the iterator object
type Pctmpu2interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu2interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu2interrMetricsIterator) Next() *Pctmpu2interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu2interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu2interrMetricsIterator) Find(key uint64) (*Pctmpu2interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu2interrMetricsIterator) Create(key uint64) (*Pctmpu2interrMetrics, error) {
	tmtr := &Pctmpu2interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu2interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu2interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu2interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu2interrMetricsIterator returns an iterator
func NewPctmpu2interrMetricsIterator() (*Pctmpu2interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu2interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu2interrMetricsIterator{iter: iter}, nil
}

type Pctmpu2intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu2intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu2intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu2intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu2intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu2intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu2intinfoMetricsIterator is the iterator object
type Pctmpu2intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu2intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu2intinfoMetricsIterator) Next() *Pctmpu2intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu2intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu2intinfoMetricsIterator) Find(key uint64) (*Pctmpu2intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu2intinfoMetricsIterator) Create(key uint64) (*Pctmpu2intinfoMetrics, error) {
	tmtr := &Pctmpu2intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu2intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu2intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu2intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu2intinfoMetricsIterator returns an iterator
func NewPctmpu2intinfoMetricsIterator() (*Pctmpu2intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu2intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu2intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu3interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu3interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu3interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu3interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu3interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu3interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu3interrMetricsIterator is the iterator object
type Pctmpu3interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu3interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu3interrMetricsIterator) Next() *Pctmpu3interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu3interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu3interrMetricsIterator) Find(key uint64) (*Pctmpu3interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu3interrMetricsIterator) Create(key uint64) (*Pctmpu3interrMetrics, error) {
	tmtr := &Pctmpu3interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu3interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu3interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu3interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu3interrMetricsIterator returns an iterator
func NewPctmpu3interrMetricsIterator() (*Pctmpu3interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu3interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu3interrMetricsIterator{iter: iter}, nil
}

type Pctmpu3intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu3intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu3intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu3intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu3intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu3intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu3intinfoMetricsIterator is the iterator object
type Pctmpu3intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu3intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu3intinfoMetricsIterator) Next() *Pctmpu3intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu3intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu3intinfoMetricsIterator) Find(key uint64) (*Pctmpu3intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu3intinfoMetricsIterator) Create(key uint64) (*Pctmpu3intinfoMetrics, error) {
	tmtr := &Pctmpu3intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu3intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu3intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu3intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu3intinfoMetricsIterator returns an iterator
func NewPctmpu3intinfoMetricsIterator() (*Pctmpu3intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu3intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu3intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu4interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu4interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu4interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu4interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu4interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu4interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu4interrMetricsIterator is the iterator object
type Pctmpu4interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu4interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu4interrMetricsIterator) Next() *Pctmpu4interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu4interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu4interrMetricsIterator) Find(key uint64) (*Pctmpu4interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu4interrMetricsIterator) Create(key uint64) (*Pctmpu4interrMetrics, error) {
	tmtr := &Pctmpu4interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu4interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu4interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu4interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu4interrMetricsIterator returns an iterator
func NewPctmpu4interrMetricsIterator() (*Pctmpu4interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu4interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu4interrMetricsIterator{iter: iter}, nil
}

type Pctmpu4intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu4intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu4intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu4intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu4intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu4intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu4intinfoMetricsIterator is the iterator object
type Pctmpu4intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu4intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu4intinfoMetricsIterator) Next() *Pctmpu4intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu4intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu4intinfoMetricsIterator) Find(key uint64) (*Pctmpu4intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu4intinfoMetricsIterator) Create(key uint64) (*Pctmpu4intinfoMetrics, error) {
	tmtr := &Pctmpu4intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu4intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu4intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu4intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu4intinfoMetricsIterator returns an iterator
func NewPctmpu4intinfoMetricsIterator() (*Pctmpu4intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu4intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu4intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu5interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu5interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu5interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu5interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu5interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu5interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu5interrMetricsIterator is the iterator object
type Pctmpu5interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu5interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu5interrMetricsIterator) Next() *Pctmpu5interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu5interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu5interrMetricsIterator) Find(key uint64) (*Pctmpu5interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu5interrMetricsIterator) Create(key uint64) (*Pctmpu5interrMetrics, error) {
	tmtr := &Pctmpu5interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu5interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu5interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu5interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu5interrMetricsIterator returns an iterator
func NewPctmpu5interrMetricsIterator() (*Pctmpu5interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu5interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu5interrMetricsIterator{iter: iter}, nil
}

type Pctmpu5intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu5intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu5intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu5intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu5intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu5intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu5intinfoMetricsIterator is the iterator object
type Pctmpu5intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu5intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu5intinfoMetricsIterator) Next() *Pctmpu5intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu5intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu5intinfoMetricsIterator) Find(key uint64) (*Pctmpu5intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu5intinfoMetricsIterator) Create(key uint64) (*Pctmpu5intinfoMetrics, error) {
	tmtr := &Pctmpu5intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu5intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu5intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu5intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu5intinfoMetricsIterator returns an iterator
func NewPctmpu5intinfoMetricsIterator() (*Pctmpu5intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu5intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu5intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu6interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu6interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu6interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu6interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu6interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu6interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu6interrMetricsIterator is the iterator object
type Pctmpu6interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu6interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu6interrMetricsIterator) Next() *Pctmpu6interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu6interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu6interrMetricsIterator) Find(key uint64) (*Pctmpu6interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu6interrMetricsIterator) Create(key uint64) (*Pctmpu6interrMetrics, error) {
	tmtr := &Pctmpu6interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu6interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu6interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu6interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu6interrMetricsIterator returns an iterator
func NewPctmpu6interrMetricsIterator() (*Pctmpu6interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu6interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu6interrMetricsIterator{iter: iter}, nil
}

type Pctmpu6intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu6intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu6intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu6intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu6intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu6intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu6intinfoMetricsIterator is the iterator object
type Pctmpu6intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu6intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu6intinfoMetricsIterator) Next() *Pctmpu6intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu6intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu6intinfoMetricsIterator) Find(key uint64) (*Pctmpu6intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu6intinfoMetricsIterator) Create(key uint64) (*Pctmpu6intinfoMetrics, error) {
	tmtr := &Pctmpu6intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu6intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu6intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu6intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu6intinfoMetricsIterator returns an iterator
func NewPctmpu6intinfoMetricsIterator() (*Pctmpu6intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu6intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu6intinfoMetricsIterator{iter: iter}, nil
}

type Pctmpu7interrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	ResultsMismatch metrics.Counter

	SdpMemUncorrectable metrics.Counter

	SdpMemCorrectable metrics.Counter

	IllegalOp_0 metrics.Counter

	IllegalOp_1 metrics.Counter

	IllegalOp_2 metrics.Counter

	IllegalOp_3 metrics.Counter

	MaxInst_0 metrics.Counter

	MaxInst_1 metrics.Counter

	MaxInst_2 metrics.Counter

	MaxInst_3 metrics.Counter

	Phvwr_0 metrics.Counter

	Phvwr_1 metrics.Counter

	Phvwr_2 metrics.Counter

	Phvwr_3 metrics.Counter

	WriteErr_0 metrics.Counter

	WriteErr_1 metrics.Counter

	WriteErr_2 metrics.Counter

	WriteErr_3 metrics.Counter

	CacheAxi_0 metrics.Counter

	CacheAxi_1 metrics.Counter

	CacheAxi_2 metrics.Counter

	CacheAxi_3 metrics.Counter

	CacheParity_0 metrics.Counter

	CacheParity_1 metrics.Counter

	CacheParity_2 metrics.Counter

	CacheParity_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu7interrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu7interrMetrics) Size() int {
	sz := 0

	sz += mtr.ResultsMismatch.Size()

	sz += mtr.SdpMemUncorrectable.Size()

	sz += mtr.SdpMemCorrectable.Size()

	sz += mtr.IllegalOp_0.Size()

	sz += mtr.IllegalOp_1.Size()

	sz += mtr.IllegalOp_2.Size()

	sz += mtr.IllegalOp_3.Size()

	sz += mtr.MaxInst_0.Size()

	sz += mtr.MaxInst_1.Size()

	sz += mtr.MaxInst_2.Size()

	sz += mtr.MaxInst_3.Size()

	sz += mtr.Phvwr_0.Size()

	sz += mtr.Phvwr_1.Size()

	sz += mtr.Phvwr_2.Size()

	sz += mtr.Phvwr_3.Size()

	sz += mtr.WriteErr_0.Size()

	sz += mtr.WriteErr_1.Size()

	sz += mtr.WriteErr_2.Size()

	sz += mtr.WriteErr_3.Size()

	sz += mtr.CacheAxi_0.Size()

	sz += mtr.CacheAxi_1.Size()

	sz += mtr.CacheAxi_2.Size()

	sz += mtr.CacheAxi_3.Size()

	sz += mtr.CacheParity_0.Size()

	sz += mtr.CacheParity_1.Size()

	sz += mtr.CacheParity_2.Size()

	sz += mtr.CacheParity_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu7interrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.ResultsMismatch = mtr.metrics.GetCounter(offset)
	offset += mtr.ResultsMismatch.Size()

	mtr.SdpMemUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemUncorrectable.Size()

	mtr.SdpMemCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.SdpMemCorrectable.Size()

	mtr.IllegalOp_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_0.Size()

	mtr.IllegalOp_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_1.Size()

	mtr.IllegalOp_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_2.Size()

	mtr.IllegalOp_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.IllegalOp_3.Size()

	mtr.MaxInst_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_0.Size()

	mtr.MaxInst_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_1.Size()

	mtr.MaxInst_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_2.Size()

	mtr.MaxInst_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MaxInst_3.Size()

	mtr.Phvwr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_0.Size()

	mtr.Phvwr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_1.Size()

	mtr.Phvwr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_2.Size()

	mtr.Phvwr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.Phvwr_3.Size()

	mtr.WriteErr_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_0.Size()

	mtr.WriteErr_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_1.Size()

	mtr.WriteErr_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_2.Size()

	mtr.WriteErr_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.WriteErr_3.Size()

	mtr.CacheAxi_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_0.Size()

	mtr.CacheAxi_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_1.Size()

	mtr.CacheAxi_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_2.Size()

	mtr.CacheAxi_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheAxi_3.Size()

	mtr.CacheParity_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_0.Size()

	mtr.CacheParity_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_1.Size()

	mtr.CacheParity_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_2.Size()

	mtr.CacheParity_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.CacheParity_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu7interrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "ResultsMismatch" {
		return offset
	}
	offset += mtr.ResultsMismatch.Size()

	if fldName == "SdpMemUncorrectable" {
		return offset
	}
	offset += mtr.SdpMemUncorrectable.Size()

	if fldName == "SdpMemCorrectable" {
		return offset
	}
	offset += mtr.SdpMemCorrectable.Size()

	if fldName == "IllegalOp_0" {
		return offset
	}
	offset += mtr.IllegalOp_0.Size()

	if fldName == "IllegalOp_1" {
		return offset
	}
	offset += mtr.IllegalOp_1.Size()

	if fldName == "IllegalOp_2" {
		return offset
	}
	offset += mtr.IllegalOp_2.Size()

	if fldName == "IllegalOp_3" {
		return offset
	}
	offset += mtr.IllegalOp_3.Size()

	if fldName == "MaxInst_0" {
		return offset
	}
	offset += mtr.MaxInst_0.Size()

	if fldName == "MaxInst_1" {
		return offset
	}
	offset += mtr.MaxInst_1.Size()

	if fldName == "MaxInst_2" {
		return offset
	}
	offset += mtr.MaxInst_2.Size()

	if fldName == "MaxInst_3" {
		return offset
	}
	offset += mtr.MaxInst_3.Size()

	if fldName == "Phvwr_0" {
		return offset
	}
	offset += mtr.Phvwr_0.Size()

	if fldName == "Phvwr_1" {
		return offset
	}
	offset += mtr.Phvwr_1.Size()

	if fldName == "Phvwr_2" {
		return offset
	}
	offset += mtr.Phvwr_2.Size()

	if fldName == "Phvwr_3" {
		return offset
	}
	offset += mtr.Phvwr_3.Size()

	if fldName == "WriteErr_0" {
		return offset
	}
	offset += mtr.WriteErr_0.Size()

	if fldName == "WriteErr_1" {
		return offset
	}
	offset += mtr.WriteErr_1.Size()

	if fldName == "WriteErr_2" {
		return offset
	}
	offset += mtr.WriteErr_2.Size()

	if fldName == "WriteErr_3" {
		return offset
	}
	offset += mtr.WriteErr_3.Size()

	if fldName == "CacheAxi_0" {
		return offset
	}
	offset += mtr.CacheAxi_0.Size()

	if fldName == "CacheAxi_1" {
		return offset
	}
	offset += mtr.CacheAxi_1.Size()

	if fldName == "CacheAxi_2" {
		return offset
	}
	offset += mtr.CacheAxi_2.Size()

	if fldName == "CacheAxi_3" {
		return offset
	}
	offset += mtr.CacheAxi_3.Size()

	if fldName == "CacheParity_0" {
		return offset
	}
	offset += mtr.CacheParity_0.Size()

	if fldName == "CacheParity_1" {
		return offset
	}
	offset += mtr.CacheParity_1.Size()

	if fldName == "CacheParity_2" {
		return offset
	}
	offset += mtr.CacheParity_2.Size()

	if fldName == "CacheParity_3" {
		return offset
	}
	offset += mtr.CacheParity_3.Size()

	return offset
}

// SetResultsMismatch sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetResultsMismatch(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ResultsMismatch"))
	return nil
}

// SetSdpMemUncorrectable sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetSdpMemUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemUncorrectable"))
	return nil
}

// SetSdpMemCorrectable sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetSdpMemCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SdpMemCorrectable"))
	return nil
}

// SetIllegalOp_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetIllegalOp_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_0"))
	return nil
}

// SetIllegalOp_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetIllegalOp_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_1"))
	return nil
}

// SetIllegalOp_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetIllegalOp_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_2"))
	return nil
}

// SetIllegalOp_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetIllegalOp_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IllegalOp_3"))
	return nil
}

// SetMaxInst_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetMaxInst_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_0"))
	return nil
}

// SetMaxInst_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetMaxInst_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_1"))
	return nil
}

// SetMaxInst_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetMaxInst_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_2"))
	return nil
}

// SetMaxInst_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetMaxInst_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MaxInst_3"))
	return nil
}

// SetPhvwr_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetPhvwr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_0"))
	return nil
}

// SetPhvwr_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetPhvwr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_1"))
	return nil
}

// SetPhvwr_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetPhvwr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_2"))
	return nil
}

// SetPhvwr_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetPhvwr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Phvwr_3"))
	return nil
}

// SetWriteErr_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetWriteErr_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_0"))
	return nil
}

// SetWriteErr_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetWriteErr_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_1"))
	return nil
}

// SetWriteErr_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetWriteErr_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_2"))
	return nil
}

// SetWriteErr_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetWriteErr_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("WriteErr_3"))
	return nil
}

// SetCacheAxi_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheAxi_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_0"))
	return nil
}

// SetCacheAxi_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheAxi_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_1"))
	return nil
}

// SetCacheAxi_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheAxi_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_2"))
	return nil
}

// SetCacheAxi_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheAxi_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheAxi_3"))
	return nil
}

// SetCacheParity_0 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheParity_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_0"))
	return nil
}

// SetCacheParity_1 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheParity_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_1"))
	return nil
}

// SetCacheParity_2 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheParity_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_2"))
	return nil
}

// SetCacheParity_3 sets cunter in shared memory
func (mtr *Pctmpu7interrMetrics) SetCacheParity_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CacheParity_3"))
	return nil
}

// Pctmpu7interrMetricsIterator is the iterator object
type Pctmpu7interrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu7interrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu7interrMetricsIterator) Next() *Pctmpu7interrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu7interrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu7interrMetricsIterator) Find(key uint64) (*Pctmpu7interrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu7interrMetricsIterator) Create(key uint64) (*Pctmpu7interrMetrics, error) {
	tmtr := &Pctmpu7interrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu7interrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu7interrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu7interrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu7interrMetricsIterator returns an iterator
func NewPctmpu7interrMetricsIterator() (*Pctmpu7interrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu7interrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu7interrMetricsIterator{iter: iter}, nil
}

type Pctmpu7intinfoMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	TraceFull_0 metrics.Counter

	TraceFull_1 metrics.Counter

	TraceFull_2 metrics.Counter

	TraceFull_3 metrics.Counter

	MpuStop_0 metrics.Counter

	MpuStop_1 metrics.Counter

	MpuStop_2 metrics.Counter

	MpuStop_3 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pctmpu7intinfoMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pctmpu7intinfoMetrics) Size() int {
	sz := 0

	sz += mtr.TraceFull_0.Size()

	sz += mtr.TraceFull_1.Size()

	sz += mtr.TraceFull_2.Size()

	sz += mtr.TraceFull_3.Size()

	sz += mtr.MpuStop_0.Size()

	sz += mtr.MpuStop_1.Size()

	sz += mtr.MpuStop_2.Size()

	sz += mtr.MpuStop_3.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pctmpu7intinfoMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.TraceFull_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_0.Size()

	mtr.TraceFull_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_1.Size()

	mtr.TraceFull_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_2.Size()

	mtr.TraceFull_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.TraceFull_3.Size()

	mtr.MpuStop_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_0.Size()

	mtr.MpuStop_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_1.Size()

	mtr.MpuStop_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_2.Size()

	mtr.MpuStop_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.MpuStop_3.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pctmpu7intinfoMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "TraceFull_0" {
		return offset
	}
	offset += mtr.TraceFull_0.Size()

	if fldName == "TraceFull_1" {
		return offset
	}
	offset += mtr.TraceFull_1.Size()

	if fldName == "TraceFull_2" {
		return offset
	}
	offset += mtr.TraceFull_2.Size()

	if fldName == "TraceFull_3" {
		return offset
	}
	offset += mtr.TraceFull_3.Size()

	if fldName == "MpuStop_0" {
		return offset
	}
	offset += mtr.MpuStop_0.Size()

	if fldName == "MpuStop_1" {
		return offset
	}
	offset += mtr.MpuStop_1.Size()

	if fldName == "MpuStop_2" {
		return offset
	}
	offset += mtr.MpuStop_2.Size()

	if fldName == "MpuStop_3" {
		return offset
	}
	offset += mtr.MpuStop_3.Size()

	return offset
}

// SetTraceFull_0 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetTraceFull_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_0"))
	return nil
}

// SetTraceFull_1 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetTraceFull_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_1"))
	return nil
}

// SetTraceFull_2 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetTraceFull_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_2"))
	return nil
}

// SetTraceFull_3 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetTraceFull_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TraceFull_3"))
	return nil
}

// SetMpuStop_0 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetMpuStop_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_0"))
	return nil
}

// SetMpuStop_1 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetMpuStop_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_1"))
	return nil
}

// SetMpuStop_2 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetMpuStop_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_2"))
	return nil
}

// SetMpuStop_3 sets cunter in shared memory
func (mtr *Pctmpu7intinfoMetrics) SetMpuStop_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MpuStop_3"))
	return nil
}

// Pctmpu7intinfoMetricsIterator is the iterator object
type Pctmpu7intinfoMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pctmpu7intinfoMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pctmpu7intinfoMetricsIterator) Next() *Pctmpu7intinfoMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pctmpu7intinfoMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pctmpu7intinfoMetricsIterator) Find(key uint64) (*Pctmpu7intinfoMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pctmpu7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pctmpu7intinfoMetricsIterator) Create(key uint64) (*Pctmpu7intinfoMetrics, error) {
	tmtr := &Pctmpu7intinfoMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pctmpu7intinfoMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pctmpu7intinfoMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pctmpu7intinfoMetricsIterator) Free() {
	it.iter.Free()
}

// NewPctmpu7intinfoMetricsIterator returns an iterator
func NewPctmpu7intinfoMetricsIterator() (*Pctmpu7intinfoMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pctmpu7intinfoMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pctmpu7intinfoMetricsIterator{iter: iter}, nil
}

type Pbpbcinteccfc0Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccfc0Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccfc0Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccfc0Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccfc0Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccfc0Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccfc0Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccfc0MetricsIterator is the iterator object
type Pbpbcinteccfc0MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccfc0MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccfc0MetricsIterator) Next() *Pbpbcinteccfc0Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccfc0Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccfc0MetricsIterator) Find(key uint64) (*Pbpbcinteccfc0Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccfc0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccfc0MetricsIterator) Create(key uint64) (*Pbpbcinteccfc0Metrics, error) {
	tmtr := &Pbpbcinteccfc0Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccfc0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccfc0MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccfc0MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccfc0MetricsIterator returns an iterator
func NewPbpbcinteccfc0MetricsIterator() (*Pbpbcinteccfc0MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccfc0Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccfc0MetricsIterator{iter: iter}, nil
}

type Pbpbcinteccll0Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccll0Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccll0Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccll0Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccll0Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccll0Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccll0Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccll0MetricsIterator is the iterator object
type Pbpbcinteccll0MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccll0MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccll0MetricsIterator) Next() *Pbpbcinteccll0Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccll0Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccll0MetricsIterator) Find(key uint64) (*Pbpbcinteccll0Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccll0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccll0MetricsIterator) Create(key uint64) (*Pbpbcinteccll0Metrics, error) {
	tmtr := &Pbpbcinteccll0Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccll0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccll0MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccll0MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccll0MetricsIterator returns an iterator
func NewPbpbcinteccll0MetricsIterator() (*Pbpbcinteccll0MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccll0Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccll0MetricsIterator{iter: iter}, nil
}

type Pbpbcinteccdesc0Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccdesc0Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccdesc0Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccdesc0Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccdesc0Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccdesc0Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccdesc0Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccdesc0MetricsIterator is the iterator object
type Pbpbcinteccdesc0MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccdesc0MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccdesc0MetricsIterator) Next() *Pbpbcinteccdesc0Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccdesc0Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccdesc0MetricsIterator) Find(key uint64) (*Pbpbcinteccdesc0Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccdesc0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccdesc0MetricsIterator) Create(key uint64) (*Pbpbcinteccdesc0Metrics, error) {
	tmtr := &Pbpbcinteccdesc0Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccdesc0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccdesc0MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccdesc0MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccdesc0MetricsIterator returns an iterator
func NewPbpbcinteccdesc0MetricsIterator() (*Pbpbcinteccdesc0MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccdesc0Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccdesc0MetricsIterator{iter: iter}, nil
}

type Pbpbcinteccfc1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccfc1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccfc1Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccfc1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccfc1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccfc1Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccfc1Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccfc1MetricsIterator is the iterator object
type Pbpbcinteccfc1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccfc1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccfc1MetricsIterator) Next() *Pbpbcinteccfc1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccfc1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccfc1MetricsIterator) Find(key uint64) (*Pbpbcinteccfc1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccfc1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccfc1MetricsIterator) Create(key uint64) (*Pbpbcinteccfc1Metrics, error) {
	tmtr := &Pbpbcinteccfc1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccfc1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccfc1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccfc1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccfc1MetricsIterator returns an iterator
func NewPbpbcinteccfc1MetricsIterator() (*Pbpbcinteccfc1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccfc1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccfc1MetricsIterator{iter: iter}, nil
}

type Pbpbcinteccll1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccll1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccll1Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccll1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccll1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccll1Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccll1Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccll1MetricsIterator is the iterator object
type Pbpbcinteccll1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccll1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccll1MetricsIterator) Next() *Pbpbcinteccll1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccll1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccll1MetricsIterator) Find(key uint64) (*Pbpbcinteccll1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccll1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccll1MetricsIterator) Create(key uint64) (*Pbpbcinteccll1Metrics, error) {
	tmtr := &Pbpbcinteccll1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccll1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccll1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccll1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccll1MetricsIterator returns an iterator
func NewPbpbcinteccll1MetricsIterator() (*Pbpbcinteccll1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccll1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccll1MetricsIterator{iter: iter}, nil
}

type Pbpbcinteccdesc1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcinteccdesc1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcinteccdesc1Metrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcinteccdesc1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcinteccdesc1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccdesc1Metrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *Pbpbcinteccdesc1Metrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// Pbpbcinteccdesc1MetricsIterator is the iterator object
type Pbpbcinteccdesc1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcinteccdesc1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcinteccdesc1MetricsIterator) Next() *Pbpbcinteccdesc1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcinteccdesc1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcinteccdesc1MetricsIterator) Find(key uint64) (*Pbpbcinteccdesc1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcinteccdesc1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcinteccdesc1MetricsIterator) Create(key uint64) (*Pbpbcinteccdesc1Metrics, error) {
	tmtr := &Pbpbcinteccdesc1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcinteccdesc1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcinteccdesc1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcinteccdesc1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccdesc1MetricsIterator returns an iterator
func NewPbpbcinteccdesc1MetricsIterator() (*Pbpbcinteccdesc1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcinteccdesc1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcinteccdesc1MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite0Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite0Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite0Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite0Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite0Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite0Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite0MetricsIterator is the iterator object
type Pbpbcintwrite0MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite0MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite0MetricsIterator) Next() *Pbpbcintwrite0Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite0Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite0MetricsIterator) Find(key uint64) (*Pbpbcintwrite0Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite0MetricsIterator) Create(key uint64) (*Pbpbcintwrite0Metrics, error) {
	tmtr := &Pbpbcintwrite0Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite0Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite0MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite0MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite0MetricsIterator returns an iterator
func NewPbpbcintwrite0MetricsIterator() (*Pbpbcintwrite0MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite0Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite0MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite1Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite1Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite1Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite1Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite1Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite1Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite1MetricsIterator is the iterator object
type Pbpbcintwrite1MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite1MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite1MetricsIterator) Next() *Pbpbcintwrite1Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite1Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite1MetricsIterator) Find(key uint64) (*Pbpbcintwrite1Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite1MetricsIterator) Create(key uint64) (*Pbpbcintwrite1Metrics, error) {
	tmtr := &Pbpbcintwrite1Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite1Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite1MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite1MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite1MetricsIterator returns an iterator
func NewPbpbcintwrite1MetricsIterator() (*Pbpbcintwrite1MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite1Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite1MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite2Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite2Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite2Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite2Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite2Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite2Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite2MetricsIterator is the iterator object
type Pbpbcintwrite2MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite2MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite2MetricsIterator) Next() *Pbpbcintwrite2Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite2Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite2MetricsIterator) Find(key uint64) (*Pbpbcintwrite2Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite2Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite2MetricsIterator) Create(key uint64) (*Pbpbcintwrite2Metrics, error) {
	tmtr := &Pbpbcintwrite2Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite2Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite2MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite2MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite2MetricsIterator returns an iterator
func NewPbpbcintwrite2MetricsIterator() (*Pbpbcintwrite2MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite2Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite2MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite3Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite3Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite3Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite3Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite3Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite3Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite3MetricsIterator is the iterator object
type Pbpbcintwrite3MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite3MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite3MetricsIterator) Next() *Pbpbcintwrite3Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite3Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite3MetricsIterator) Find(key uint64) (*Pbpbcintwrite3Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite3Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite3MetricsIterator) Create(key uint64) (*Pbpbcintwrite3Metrics, error) {
	tmtr := &Pbpbcintwrite3Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite3Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite3MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite3MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite3MetricsIterator returns an iterator
func NewPbpbcintwrite3MetricsIterator() (*Pbpbcintwrite3MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite3Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite3MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite4Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite4Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite4Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite4Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite4Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite4Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite4MetricsIterator is the iterator object
type Pbpbcintwrite4MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite4MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite4MetricsIterator) Next() *Pbpbcintwrite4Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite4Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite4MetricsIterator) Find(key uint64) (*Pbpbcintwrite4Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite4Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite4MetricsIterator) Create(key uint64) (*Pbpbcintwrite4Metrics, error) {
	tmtr := &Pbpbcintwrite4Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite4Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite4MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite4MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite4MetricsIterator returns an iterator
func NewPbpbcintwrite4MetricsIterator() (*Pbpbcintwrite4MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite4Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite4MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite5Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite5Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite5Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite5Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite5Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite5Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite5MetricsIterator is the iterator object
type Pbpbcintwrite5MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite5MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite5MetricsIterator) Next() *Pbpbcintwrite5Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite5Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite5MetricsIterator) Find(key uint64) (*Pbpbcintwrite5Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite5Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite5MetricsIterator) Create(key uint64) (*Pbpbcintwrite5Metrics, error) {
	tmtr := &Pbpbcintwrite5Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite5Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite5MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite5MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite5MetricsIterator returns an iterator
func NewPbpbcintwrite5MetricsIterator() (*Pbpbcintwrite5MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite5Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite5MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite6Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite6Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite6Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite6Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite6Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite6Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite6MetricsIterator is the iterator object
type Pbpbcintwrite6MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite6MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite6MetricsIterator) Next() *Pbpbcintwrite6Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite6Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite6MetricsIterator) Find(key uint64) (*Pbpbcintwrite6Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite6Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite6MetricsIterator) Create(key uint64) (*Pbpbcintwrite6Metrics, error) {
	tmtr := &Pbpbcintwrite6Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite6Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite6MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite6MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite6MetricsIterator returns an iterator
func NewPbpbcintwrite6MetricsIterator() (*Pbpbcintwrite6MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite6Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite6MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite7Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite7Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite7Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite7Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite7Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite7Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite7MetricsIterator is the iterator object
type Pbpbcintwrite7MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite7MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite7MetricsIterator) Next() *Pbpbcintwrite7Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite7Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite7MetricsIterator) Find(key uint64) (*Pbpbcintwrite7Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite7Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite7MetricsIterator) Create(key uint64) (*Pbpbcintwrite7Metrics, error) {
	tmtr := &Pbpbcintwrite7Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite7Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite7MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite7MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite7MetricsIterator returns an iterator
func NewPbpbcintwrite7MetricsIterator() (*Pbpbcintwrite7MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite7Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite7MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite8Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite8Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite8Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite8Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite8Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite8Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite8MetricsIterator is the iterator object
type Pbpbcintwrite8MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite8MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite8MetricsIterator) Next() *Pbpbcintwrite8Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite8Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite8MetricsIterator) Find(key uint64) (*Pbpbcintwrite8Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite8Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite8MetricsIterator) Create(key uint64) (*Pbpbcintwrite8Metrics, error) {
	tmtr := &Pbpbcintwrite8Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite8Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite8MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite8MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite8MetricsIterator returns an iterator
func NewPbpbcintwrite8MetricsIterator() (*Pbpbcintwrite8MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite8Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite8MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite9Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite9Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite9Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite9Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite9Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite9Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite9MetricsIterator is the iterator object
type Pbpbcintwrite9MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite9MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite9MetricsIterator) Next() *Pbpbcintwrite9Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite9Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite9MetricsIterator) Find(key uint64) (*Pbpbcintwrite9Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite9Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite9MetricsIterator) Create(key uint64) (*Pbpbcintwrite9Metrics, error) {
	tmtr := &Pbpbcintwrite9Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite9Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite9MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite9MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite9MetricsIterator returns an iterator
func NewPbpbcintwrite9MetricsIterator() (*Pbpbcintwrite9MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite9Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite9MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite10Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite10Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite10Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite10Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite10Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite10Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite10MetricsIterator is the iterator object
type Pbpbcintwrite10MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite10MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite10MetricsIterator) Next() *Pbpbcintwrite10Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite10Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite10MetricsIterator) Find(key uint64) (*Pbpbcintwrite10Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite10Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite10MetricsIterator) Create(key uint64) (*Pbpbcintwrite10Metrics, error) {
	tmtr := &Pbpbcintwrite10Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite10Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite10MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite10MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite10MetricsIterator returns an iterator
func NewPbpbcintwrite10MetricsIterator() (*Pbpbcintwrite10MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite10Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite10MetricsIterator{iter: iter}, nil
}

type Pbpbcintwrite11Metrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	OutOfCells metrics.Counter

	OutOfCredit metrics.Counter

	PortDisabled metrics.Counter

	Truncation metrics.Counter

	IntrinsicDrop metrics.Counter

	OutOfCells1 metrics.Counter

	EnqErr metrics.Counter

	TailDropCpu metrics.Counter

	TailDropSpan metrics.Counter

	MinSizeViol metrics.Counter

	PortRange metrics.Counter

	CreditGrowthError metrics.Counter

	OqRange metrics.Counter

	XoffTimeout metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *Pbpbcintwrite11Metrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *Pbpbcintwrite11Metrics) Size() int {
	sz := 0

	sz += mtr.OutOfCells.Size()

	sz += mtr.OutOfCredit.Size()

	sz += mtr.PortDisabled.Size()

	sz += mtr.Truncation.Size()

	sz += mtr.IntrinsicDrop.Size()

	sz += mtr.OutOfCells1.Size()

	sz += mtr.EnqErr.Size()

	sz += mtr.TailDropCpu.Size()

	sz += mtr.TailDropSpan.Size()

	sz += mtr.MinSizeViol.Size()

	sz += mtr.PortRange.Size()

	sz += mtr.CreditGrowthError.Size()

	sz += mtr.OqRange.Size()

	sz += mtr.XoffTimeout.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *Pbpbcintwrite11Metrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.OutOfCells = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells.Size()

	mtr.OutOfCredit = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCredit.Size()

	mtr.PortDisabled = mtr.metrics.GetCounter(offset)
	offset += mtr.PortDisabled.Size()

	mtr.Truncation = mtr.metrics.GetCounter(offset)
	offset += mtr.Truncation.Size()

	mtr.IntrinsicDrop = mtr.metrics.GetCounter(offset)
	offset += mtr.IntrinsicDrop.Size()

	mtr.OutOfCells1 = mtr.metrics.GetCounter(offset)
	offset += mtr.OutOfCells1.Size()

	mtr.EnqErr = mtr.metrics.GetCounter(offset)
	offset += mtr.EnqErr.Size()

	mtr.TailDropCpu = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropCpu.Size()

	mtr.TailDropSpan = mtr.metrics.GetCounter(offset)
	offset += mtr.TailDropSpan.Size()

	mtr.MinSizeViol = mtr.metrics.GetCounter(offset)
	offset += mtr.MinSizeViol.Size()

	mtr.PortRange = mtr.metrics.GetCounter(offset)
	offset += mtr.PortRange.Size()

	mtr.CreditGrowthError = mtr.metrics.GetCounter(offset)
	offset += mtr.CreditGrowthError.Size()

	mtr.OqRange = mtr.metrics.GetCounter(offset)
	offset += mtr.OqRange.Size()

	mtr.XoffTimeout = mtr.metrics.GetCounter(offset)
	offset += mtr.XoffTimeout.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *Pbpbcintwrite11Metrics) getOffset(fldName string) int {
	var offset int

	if fldName == "OutOfCells" {
		return offset
	}
	offset += mtr.OutOfCells.Size()

	if fldName == "OutOfCredit" {
		return offset
	}
	offset += mtr.OutOfCredit.Size()

	if fldName == "PortDisabled" {
		return offset
	}
	offset += mtr.PortDisabled.Size()

	if fldName == "Truncation" {
		return offset
	}
	offset += mtr.Truncation.Size()

	if fldName == "IntrinsicDrop" {
		return offset
	}
	offset += mtr.IntrinsicDrop.Size()

	if fldName == "OutOfCells1" {
		return offset
	}
	offset += mtr.OutOfCells1.Size()

	if fldName == "EnqErr" {
		return offset
	}
	offset += mtr.EnqErr.Size()

	if fldName == "TailDropCpu" {
		return offset
	}
	offset += mtr.TailDropCpu.Size()

	if fldName == "TailDropSpan" {
		return offset
	}
	offset += mtr.TailDropSpan.Size()

	if fldName == "MinSizeViol" {
		return offset
	}
	offset += mtr.MinSizeViol.Size()

	if fldName == "PortRange" {
		return offset
	}
	offset += mtr.PortRange.Size()

	if fldName == "CreditGrowthError" {
		return offset
	}
	offset += mtr.CreditGrowthError.Size()

	if fldName == "OqRange" {
		return offset
	}
	offset += mtr.OqRange.Size()

	if fldName == "XoffTimeout" {
		return offset
	}
	offset += mtr.XoffTimeout.Size()

	return offset
}

// SetOutOfCells sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetOutOfCells(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells"))
	return nil
}

// SetOutOfCredit sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetOutOfCredit(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCredit"))
	return nil
}

// SetPortDisabled sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetPortDisabled(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortDisabled"))
	return nil
}

// SetTruncation sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetTruncation(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Truncation"))
	return nil
}

// SetIntrinsicDrop sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetIntrinsicDrop(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("IntrinsicDrop"))
	return nil
}

// SetOutOfCells1 sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetOutOfCells1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OutOfCells1"))
	return nil
}

// SetEnqErr sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetEnqErr(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EnqErr"))
	return nil
}

// SetTailDropCpu sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetTailDropCpu(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropCpu"))
	return nil
}

// SetTailDropSpan sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetTailDropSpan(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("TailDropSpan"))
	return nil
}

// SetMinSizeViol sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetMinSizeViol(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MinSizeViol"))
	return nil
}

// SetPortRange sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetPortRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PortRange"))
	return nil
}

// SetCreditGrowthError sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetCreditGrowthError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CreditGrowthError"))
	return nil
}

// SetOqRange sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetOqRange(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("OqRange"))
	return nil
}

// SetXoffTimeout sets cunter in shared memory
func (mtr *Pbpbcintwrite11Metrics) SetXoffTimeout(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("XoffTimeout"))
	return nil
}

// Pbpbcintwrite11MetricsIterator is the iterator object
type Pbpbcintwrite11MetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *Pbpbcintwrite11MetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *Pbpbcintwrite11MetricsIterator) Next() *Pbpbcintwrite11Metrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &Pbpbcintwrite11Metrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *Pbpbcintwrite11MetricsIterator) Find(key uint64) (*Pbpbcintwrite11Metrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &Pbpbcintwrite11Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *Pbpbcintwrite11MetricsIterator) Create(key uint64) (*Pbpbcintwrite11Metrics, error) {
	tmtr := &Pbpbcintwrite11Metrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &Pbpbcintwrite11Metrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *Pbpbcintwrite11MetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *Pbpbcintwrite11MetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintwrite11MetricsIterator returns an iterator
func NewPbpbcintwrite11MetricsIterator() (*Pbpbcintwrite11MetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("Pbpbcintwrite11Metrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &Pbpbcintwrite11MetricsIterator{iter: iter}, nil
}

type PbpbcinteccrcMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccrcMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccrcMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccrcMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccrcMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccrcMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccrcMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccrcMetricsIterator is the iterator object
type PbpbcinteccrcMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccrcMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccrcMetricsIterator) Next() *PbpbcinteccrcMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccrcMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccrcMetricsIterator) Find(key uint64) (*PbpbcinteccrcMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccrcMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccrcMetricsIterator) Create(key uint64) (*PbpbcinteccrcMetrics, error) {
	tmtr := &PbpbcinteccrcMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccrcMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccrcMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccrcMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccrcMetricsIterator returns an iterator
func NewPbpbcinteccrcMetricsIterator() (*PbpbcinteccrcMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccrcMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccrcMetricsIterator{iter: iter}, nil
}

type PbpbcinteccpackMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccpackMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccpackMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccpackMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccpackMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccpackMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccpackMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccpackMetricsIterator is the iterator object
type PbpbcinteccpackMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccpackMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccpackMetricsIterator) Next() *PbpbcinteccpackMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccpackMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccpackMetricsIterator) Find(key uint64) (*PbpbcinteccpackMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccpackMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccpackMetricsIterator) Create(key uint64) (*PbpbcinteccpackMetrics, error) {
	tmtr := &PbpbcinteccpackMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccpackMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccpackMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccpackMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccpackMetricsIterator returns an iterator
func NewPbpbcinteccpackMetricsIterator() (*PbpbcinteccpackMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccpackMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccpackMetricsIterator{iter: iter}, nil
}

type PbpbcinteccrwrMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccrwrMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccrwrMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccrwrMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccrwrMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccrwrMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccrwrMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccrwrMetricsIterator is the iterator object
type PbpbcinteccrwrMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccrwrMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccrwrMetricsIterator) Next() *PbpbcinteccrwrMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccrwrMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccrwrMetricsIterator) Find(key uint64) (*PbpbcinteccrwrMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccrwrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccrwrMetricsIterator) Create(key uint64) (*PbpbcinteccrwrMetrics, error) {
	tmtr := &PbpbcinteccrwrMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccrwrMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccrwrMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccrwrMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccrwrMetricsIterator returns an iterator
func NewPbpbcinteccrwrMetricsIterator() (*PbpbcinteccrwrMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccrwrMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccrwrMetricsIterator{iter: iter}, nil
}

type PbpbcinteccschedMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccschedMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccschedMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccschedMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccschedMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccschedMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccschedMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccschedMetricsIterator is the iterator object
type PbpbcinteccschedMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccschedMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccschedMetricsIterator) Next() *PbpbcinteccschedMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccschedMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccschedMetricsIterator) Find(key uint64) (*PbpbcinteccschedMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccschedMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccschedMetricsIterator) Create(key uint64) (*PbpbcinteccschedMetrics, error) {
	tmtr := &PbpbcinteccschedMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccschedMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccschedMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccschedMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccschedMetricsIterator returns an iterator
func NewPbpbcinteccschedMetricsIterator() (*PbpbcinteccschedMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccschedMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccschedMetricsIterator{iter: iter}, nil
}

type PbpbcinteccsidebandMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	PckUncorrectable metrics.Counter

	PckCorrectable metrics.Counter

	RwrUncorrectable metrics.Counter

	RwrCorrectable metrics.Counter

	RxdUncorrectable metrics.Counter

	RxdCorrectable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccsidebandMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccsidebandMetrics) Size() int {
	sz := 0

	sz += mtr.PckUncorrectable.Size()

	sz += mtr.PckCorrectable.Size()

	sz += mtr.RwrUncorrectable.Size()

	sz += mtr.RwrCorrectable.Size()

	sz += mtr.RxdUncorrectable.Size()

	sz += mtr.RxdCorrectable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccsidebandMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.PckUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.PckUncorrectable.Size()

	mtr.PckCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.PckCorrectable.Size()

	mtr.RwrUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RwrUncorrectable.Size()

	mtr.RwrCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RwrCorrectable.Size()

	mtr.RxdUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RxdUncorrectable.Size()

	mtr.RxdCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RxdCorrectable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccsidebandMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "PckUncorrectable" {
		return offset
	}
	offset += mtr.PckUncorrectable.Size()

	if fldName == "PckCorrectable" {
		return offset
	}
	offset += mtr.PckCorrectable.Size()

	if fldName == "RwrUncorrectable" {
		return offset
	}
	offset += mtr.RwrUncorrectable.Size()

	if fldName == "RwrCorrectable" {
		return offset
	}
	offset += mtr.RwrCorrectable.Size()

	if fldName == "RxdUncorrectable" {
		return offset
	}
	offset += mtr.RxdUncorrectable.Size()

	if fldName == "RxdCorrectable" {
		return offset
	}
	offset += mtr.RxdCorrectable.Size()

	return offset
}

// SetPckUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetPckUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PckUncorrectable"))
	return nil
}

// SetPckCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetPckCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("PckCorrectable"))
	return nil
}

// SetRwrUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetRwrUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RwrUncorrectable"))
	return nil
}

// SetRwrCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetRwrCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RwrCorrectable"))
	return nil
}

// SetRxdUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetRxdUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxdUncorrectable"))
	return nil
}

// SetRxdCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccsidebandMetrics) SetRxdCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RxdCorrectable"))
	return nil
}

// PbpbcinteccsidebandMetricsIterator is the iterator object
type PbpbcinteccsidebandMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccsidebandMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccsidebandMetricsIterator) Next() *PbpbcinteccsidebandMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccsidebandMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccsidebandMetricsIterator) Find(key uint64) (*PbpbcinteccsidebandMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccsidebandMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccsidebandMetricsIterator) Create(key uint64) (*PbpbcinteccsidebandMetrics, error) {
	tmtr := &PbpbcinteccsidebandMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccsidebandMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccsidebandMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccsidebandMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccsidebandMetricsIterator returns an iterator
func NewPbpbcinteccsidebandMetricsIterator() (*PbpbcinteccsidebandMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccsidebandMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccsidebandMetricsIterator{iter: iter}, nil
}

type PbpbcinteccncMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccncMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccncMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccncMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccncMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccncMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccncMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccncMetricsIterator is the iterator object
type PbpbcinteccncMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccncMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccncMetricsIterator) Next() *PbpbcinteccncMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccncMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccncMetricsIterator) Find(key uint64) (*PbpbcinteccncMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccncMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccncMetricsIterator) Create(key uint64) (*PbpbcinteccncMetrics, error) {
	tmtr := &PbpbcinteccncMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccncMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccncMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccncMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccncMetricsIterator returns an iterator
func NewPbpbcinteccncMetricsIterator() (*PbpbcinteccncMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccncMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccncMetricsIterator{iter: iter}, nil
}

type PbpbcinteccucMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccucMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccucMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccucMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccucMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccucMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccucMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccucMetricsIterator is the iterator object
type PbpbcinteccucMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccucMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccucMetricsIterator) Next() *PbpbcinteccucMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccucMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccucMetricsIterator) Find(key uint64) (*PbpbcinteccucMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccucMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccucMetricsIterator) Create(key uint64) (*PbpbcinteccucMetrics, error) {
	tmtr := &PbpbcinteccucMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccucMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccucMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccucMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccucMetricsIterator returns an iterator
func NewPbpbcinteccucMetricsIterator() (*PbpbcinteccucMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccucMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccucMetricsIterator{iter: iter}, nil
}

type PbpbcinteccportmoninMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccportmoninMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccportmoninMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccportmoninMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccportmoninMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccportmoninMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccportmoninMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccportmoninMetricsIterator is the iterator object
type PbpbcinteccportmoninMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccportmoninMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccportmoninMetricsIterator) Next() *PbpbcinteccportmoninMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccportmoninMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccportmoninMetricsIterator) Find(key uint64) (*PbpbcinteccportmoninMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccportmoninMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccportmoninMetricsIterator) Create(key uint64) (*PbpbcinteccportmoninMetrics, error) {
	tmtr := &PbpbcinteccportmoninMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccportmoninMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccportmoninMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccportmoninMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccportmoninMetricsIterator returns an iterator
func NewPbpbcinteccportmoninMetricsIterator() (*PbpbcinteccportmoninMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccportmoninMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccportmoninMetricsIterator{iter: iter}, nil
}

type PbpbcinteccportmonoutMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcinteccportmonoutMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcinteccportmonoutMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcinteccportmonoutMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcinteccportmonoutMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbcinteccportmonoutMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbcinteccportmonoutMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbcinteccportmonoutMetricsIterator is the iterator object
type PbpbcinteccportmonoutMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcinteccportmonoutMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcinteccportmonoutMetricsIterator) Next() *PbpbcinteccportmonoutMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcinteccportmonoutMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcinteccportmonoutMetricsIterator) Find(key uint64) (*PbpbcinteccportmonoutMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcinteccportmonoutMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcinteccportmonoutMetricsIterator) Create(key uint64) (*PbpbcinteccportmonoutMetrics, error) {
	tmtr := &PbpbcinteccportmonoutMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcinteccportmonoutMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcinteccportmonoutMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcinteccportmonoutMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcinteccportmonoutMetricsIterator returns an iterator
func NewPbpbcinteccportmonoutMetricsIterator() (*PbpbcinteccportmonoutMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcinteccportmonoutMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcinteccportmonoutMetricsIterator{iter: iter}, nil
}

type PbpbcintrplMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	MemoryError metrics.Counter

	ZeroLastError metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcintrplMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcintrplMetrics) Size() int {
	sz := 0

	sz += mtr.MemoryError.Size()

	sz += mtr.ZeroLastError.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcintrplMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.MemoryError = mtr.metrics.GetCounter(offset)
	offset += mtr.MemoryError.Size()

	mtr.ZeroLastError = mtr.metrics.GetCounter(offset)
	offset += mtr.ZeroLastError.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcintrplMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "MemoryError" {
		return offset
	}
	offset += mtr.MemoryError.Size()

	if fldName == "ZeroLastError" {
		return offset
	}
	offset += mtr.ZeroLastError.Size()

	return offset
}

// SetMemoryError sets cunter in shared memory
func (mtr *PbpbcintrplMetrics) SetMemoryError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("MemoryError"))
	return nil
}

// SetZeroLastError sets cunter in shared memory
func (mtr *PbpbcintrplMetrics) SetZeroLastError(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("ZeroLastError"))
	return nil
}

// PbpbcintrplMetricsIterator is the iterator object
type PbpbcintrplMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcintrplMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcintrplMetricsIterator) Next() *PbpbcintrplMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcintrplMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcintrplMetricsIterator) Find(key uint64) (*PbpbcintrplMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcintrplMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcintrplMetricsIterator) Create(key uint64) (*PbpbcintrplMetrics, error) {
	tmtr := &PbpbcintrplMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcintrplMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcintrplMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcintrplMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintrplMetricsIterator returns an iterator
func NewPbpbcintrplMetricsIterator() (*PbpbcintrplMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcintrplMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcintrplMetricsIterator{iter: iter}, nil
}

type PbpbcintcreditunderflowMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Port_10 metrics.Counter

	Port_11 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcintcreditunderflowMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcintcreditunderflowMetrics) Size() int {
	sz := 0

	sz += mtr.Port_10.Size()

	sz += mtr.Port_11.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcintcreditunderflowMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Port_10 = mtr.metrics.GetCounter(offset)
	offset += mtr.Port_10.Size()

	mtr.Port_11 = mtr.metrics.GetCounter(offset)
	offset += mtr.Port_11.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcintcreditunderflowMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Port_10" {
		return offset
	}
	offset += mtr.Port_10.Size()

	if fldName == "Port_11" {
		return offset
	}
	offset += mtr.Port_11.Size()

	return offset
}

// SetPort_10 sets cunter in shared memory
func (mtr *PbpbcintcreditunderflowMetrics) SetPort_10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Port_10"))
	return nil
}

// SetPort_11 sets cunter in shared memory
func (mtr *PbpbcintcreditunderflowMetrics) SetPort_11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Port_11"))
	return nil
}

// PbpbcintcreditunderflowMetricsIterator is the iterator object
type PbpbcintcreditunderflowMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcintcreditunderflowMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcintcreditunderflowMetricsIterator) Next() *PbpbcintcreditunderflowMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcintcreditunderflowMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcintcreditunderflowMetricsIterator) Find(key uint64) (*PbpbcintcreditunderflowMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcintcreditunderflowMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcintcreditunderflowMetricsIterator) Create(key uint64) (*PbpbcintcreditunderflowMetrics, error) {
	tmtr := &PbpbcintcreditunderflowMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcintcreditunderflowMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcintcreditunderflowMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcintcreditunderflowMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintcreditunderflowMetricsIterator returns an iterator
func NewPbpbcintcreditunderflowMetricsIterator() (*PbpbcintcreditunderflowMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcintcreditunderflowMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcintcreditunderflowMetricsIterator{iter: iter}, nil
}

type PbpbcintpbusviolationinMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	SopSopIn_0 metrics.Counter

	SopSopIn_1 metrics.Counter

	SopSopIn_2 metrics.Counter

	SopSopIn_3 metrics.Counter

	SopSopIn_4 metrics.Counter

	SopSopIn_5 metrics.Counter

	SopSopIn_6 metrics.Counter

	SopSopIn_7 metrics.Counter

	SopSopIn_8 metrics.Counter

	SopSopIn_9 metrics.Counter

	SopSopIn_10 metrics.Counter

	SopSopIn_11 metrics.Counter

	EopEopIn_0 metrics.Counter

	EopEopIn_1 metrics.Counter

	EopEopIn_2 metrics.Counter

	EopEopIn_3 metrics.Counter

	EopEopIn_4 metrics.Counter

	EopEopIn_5 metrics.Counter

	EopEopIn_6 metrics.Counter

	EopEopIn_7 metrics.Counter

	EopEopIn_8 metrics.Counter

	EopEopIn_9 metrics.Counter

	EopEopIn_10 metrics.Counter

	EopEopIn_11 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcintpbusviolationinMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcintpbusviolationinMetrics) Size() int {
	sz := 0

	sz += mtr.SopSopIn_0.Size()

	sz += mtr.SopSopIn_1.Size()

	sz += mtr.SopSopIn_2.Size()

	sz += mtr.SopSopIn_3.Size()

	sz += mtr.SopSopIn_4.Size()

	sz += mtr.SopSopIn_5.Size()

	sz += mtr.SopSopIn_6.Size()

	sz += mtr.SopSopIn_7.Size()

	sz += mtr.SopSopIn_8.Size()

	sz += mtr.SopSopIn_9.Size()

	sz += mtr.SopSopIn_10.Size()

	sz += mtr.SopSopIn_11.Size()

	sz += mtr.EopEopIn_0.Size()

	sz += mtr.EopEopIn_1.Size()

	sz += mtr.EopEopIn_2.Size()

	sz += mtr.EopEopIn_3.Size()

	sz += mtr.EopEopIn_4.Size()

	sz += mtr.EopEopIn_5.Size()

	sz += mtr.EopEopIn_6.Size()

	sz += mtr.EopEopIn_7.Size()

	sz += mtr.EopEopIn_8.Size()

	sz += mtr.EopEopIn_9.Size()

	sz += mtr.EopEopIn_10.Size()

	sz += mtr.EopEopIn_11.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcintpbusviolationinMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.SopSopIn_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_0.Size()

	mtr.SopSopIn_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_1.Size()

	mtr.SopSopIn_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_2.Size()

	mtr.SopSopIn_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_3.Size()

	mtr.SopSopIn_4 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_4.Size()

	mtr.SopSopIn_5 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_5.Size()

	mtr.SopSopIn_6 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_6.Size()

	mtr.SopSopIn_7 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_7.Size()

	mtr.SopSopIn_8 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_8.Size()

	mtr.SopSopIn_9 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_9.Size()

	mtr.SopSopIn_10 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_10.Size()

	mtr.SopSopIn_11 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopIn_11.Size()

	mtr.EopEopIn_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_0.Size()

	mtr.EopEopIn_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_1.Size()

	mtr.EopEopIn_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_2.Size()

	mtr.EopEopIn_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_3.Size()

	mtr.EopEopIn_4 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_4.Size()

	mtr.EopEopIn_5 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_5.Size()

	mtr.EopEopIn_6 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_6.Size()

	mtr.EopEopIn_7 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_7.Size()

	mtr.EopEopIn_8 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_8.Size()

	mtr.EopEopIn_9 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_9.Size()

	mtr.EopEopIn_10 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_10.Size()

	mtr.EopEopIn_11 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopIn_11.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "SopSopIn_0" {
		return offset
	}
	offset += mtr.SopSopIn_0.Size()

	if fldName == "SopSopIn_1" {
		return offset
	}
	offset += mtr.SopSopIn_1.Size()

	if fldName == "SopSopIn_2" {
		return offset
	}
	offset += mtr.SopSopIn_2.Size()

	if fldName == "SopSopIn_3" {
		return offset
	}
	offset += mtr.SopSopIn_3.Size()

	if fldName == "SopSopIn_4" {
		return offset
	}
	offset += mtr.SopSopIn_4.Size()

	if fldName == "SopSopIn_5" {
		return offset
	}
	offset += mtr.SopSopIn_5.Size()

	if fldName == "SopSopIn_6" {
		return offset
	}
	offset += mtr.SopSopIn_6.Size()

	if fldName == "SopSopIn_7" {
		return offset
	}
	offset += mtr.SopSopIn_7.Size()

	if fldName == "SopSopIn_8" {
		return offset
	}
	offset += mtr.SopSopIn_8.Size()

	if fldName == "SopSopIn_9" {
		return offset
	}
	offset += mtr.SopSopIn_9.Size()

	if fldName == "SopSopIn_10" {
		return offset
	}
	offset += mtr.SopSopIn_10.Size()

	if fldName == "SopSopIn_11" {
		return offset
	}
	offset += mtr.SopSopIn_11.Size()

	if fldName == "EopEopIn_0" {
		return offset
	}
	offset += mtr.EopEopIn_0.Size()

	if fldName == "EopEopIn_1" {
		return offset
	}
	offset += mtr.EopEopIn_1.Size()

	if fldName == "EopEopIn_2" {
		return offset
	}
	offset += mtr.EopEopIn_2.Size()

	if fldName == "EopEopIn_3" {
		return offset
	}
	offset += mtr.EopEopIn_3.Size()

	if fldName == "EopEopIn_4" {
		return offset
	}
	offset += mtr.EopEopIn_4.Size()

	if fldName == "EopEopIn_5" {
		return offset
	}
	offset += mtr.EopEopIn_5.Size()

	if fldName == "EopEopIn_6" {
		return offset
	}
	offset += mtr.EopEopIn_6.Size()

	if fldName == "EopEopIn_7" {
		return offset
	}
	offset += mtr.EopEopIn_7.Size()

	if fldName == "EopEopIn_8" {
		return offset
	}
	offset += mtr.EopEopIn_8.Size()

	if fldName == "EopEopIn_9" {
		return offset
	}
	offset += mtr.EopEopIn_9.Size()

	if fldName == "EopEopIn_10" {
		return offset
	}
	offset += mtr.EopEopIn_10.Size()

	if fldName == "EopEopIn_11" {
		return offset
	}
	offset += mtr.EopEopIn_11.Size()

	return offset
}

// SetSopSopIn_0 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_0"))
	return nil
}

// SetSopSopIn_1 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_1"))
	return nil
}

// SetSopSopIn_2 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_2"))
	return nil
}

// SetSopSopIn_3 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_3"))
	return nil
}

// SetSopSopIn_4 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_4"))
	return nil
}

// SetSopSopIn_5 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_5"))
	return nil
}

// SetSopSopIn_6 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_6"))
	return nil
}

// SetSopSopIn_7 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_7"))
	return nil
}

// SetSopSopIn_8 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_8"))
	return nil
}

// SetSopSopIn_9 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_9"))
	return nil
}

// SetSopSopIn_10 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_10"))
	return nil
}

// SetSopSopIn_11 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetSopSopIn_11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopIn_11"))
	return nil
}

// SetEopEopIn_0 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_0"))
	return nil
}

// SetEopEopIn_1 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_1"))
	return nil
}

// SetEopEopIn_2 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_2"))
	return nil
}

// SetEopEopIn_3 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_3"))
	return nil
}

// SetEopEopIn_4 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_4"))
	return nil
}

// SetEopEopIn_5 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_5"))
	return nil
}

// SetEopEopIn_6 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_6"))
	return nil
}

// SetEopEopIn_7 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_7"))
	return nil
}

// SetEopEopIn_8 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_8"))
	return nil
}

// SetEopEopIn_9 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_9"))
	return nil
}

// SetEopEopIn_10 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_10"))
	return nil
}

// SetEopEopIn_11 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationinMetrics) SetEopEopIn_11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopIn_11"))
	return nil
}

// PbpbcintpbusviolationinMetricsIterator is the iterator object
type PbpbcintpbusviolationinMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcintpbusviolationinMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcintpbusviolationinMetricsIterator) Next() *PbpbcintpbusviolationinMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcintpbusviolationinMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcintpbusviolationinMetricsIterator) Find(key uint64) (*PbpbcintpbusviolationinMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcintpbusviolationinMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcintpbusviolationinMetricsIterator) Create(key uint64) (*PbpbcintpbusviolationinMetrics, error) {
	tmtr := &PbpbcintpbusviolationinMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcintpbusviolationinMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcintpbusviolationinMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcintpbusviolationinMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintpbusviolationinMetricsIterator returns an iterator
func NewPbpbcintpbusviolationinMetricsIterator() (*PbpbcintpbusviolationinMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcintpbusviolationinMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcintpbusviolationinMetricsIterator{iter: iter}, nil
}

type PbpbcintpbusviolationoutMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	SopSopOut_0 metrics.Counter

	SopSopOut_1 metrics.Counter

	SopSopOut_2 metrics.Counter

	SopSopOut_3 metrics.Counter

	SopSopOut_4 metrics.Counter

	SopSopOut_5 metrics.Counter

	SopSopOut_6 metrics.Counter

	SopSopOut_7 metrics.Counter

	SopSopOut_8 metrics.Counter

	SopSopOut_9 metrics.Counter

	SopSopOut_10 metrics.Counter

	SopSopOut_11 metrics.Counter

	EopEopOut_0 metrics.Counter

	EopEopOut_1 metrics.Counter

	EopEopOut_2 metrics.Counter

	EopEopOut_3 metrics.Counter

	EopEopOut_4 metrics.Counter

	EopEopOut_5 metrics.Counter

	EopEopOut_6 metrics.Counter

	EopEopOut_7 metrics.Counter

	EopEopOut_8 metrics.Counter

	EopEopOut_9 metrics.Counter

	EopEopOut_10 metrics.Counter

	EopEopOut_11 metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbcintpbusviolationoutMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbcintpbusviolationoutMetrics) Size() int {
	sz := 0

	sz += mtr.SopSopOut_0.Size()

	sz += mtr.SopSopOut_1.Size()

	sz += mtr.SopSopOut_2.Size()

	sz += mtr.SopSopOut_3.Size()

	sz += mtr.SopSopOut_4.Size()

	sz += mtr.SopSopOut_5.Size()

	sz += mtr.SopSopOut_6.Size()

	sz += mtr.SopSopOut_7.Size()

	sz += mtr.SopSopOut_8.Size()

	sz += mtr.SopSopOut_9.Size()

	sz += mtr.SopSopOut_10.Size()

	sz += mtr.SopSopOut_11.Size()

	sz += mtr.EopEopOut_0.Size()

	sz += mtr.EopEopOut_1.Size()

	sz += mtr.EopEopOut_2.Size()

	sz += mtr.EopEopOut_3.Size()

	sz += mtr.EopEopOut_4.Size()

	sz += mtr.EopEopOut_5.Size()

	sz += mtr.EopEopOut_6.Size()

	sz += mtr.EopEopOut_7.Size()

	sz += mtr.EopEopOut_8.Size()

	sz += mtr.EopEopOut_9.Size()

	sz += mtr.EopEopOut_10.Size()

	sz += mtr.EopEopOut_11.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.SopSopOut_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_0.Size()

	mtr.SopSopOut_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_1.Size()

	mtr.SopSopOut_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_2.Size()

	mtr.SopSopOut_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_3.Size()

	mtr.SopSopOut_4 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_4.Size()

	mtr.SopSopOut_5 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_5.Size()

	mtr.SopSopOut_6 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_6.Size()

	mtr.SopSopOut_7 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_7.Size()

	mtr.SopSopOut_8 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_8.Size()

	mtr.SopSopOut_9 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_9.Size()

	mtr.SopSopOut_10 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_10.Size()

	mtr.SopSopOut_11 = mtr.metrics.GetCounter(offset)
	offset += mtr.SopSopOut_11.Size()

	mtr.EopEopOut_0 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_0.Size()

	mtr.EopEopOut_1 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_1.Size()

	mtr.EopEopOut_2 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_2.Size()

	mtr.EopEopOut_3 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_3.Size()

	mtr.EopEopOut_4 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_4.Size()

	mtr.EopEopOut_5 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_5.Size()

	mtr.EopEopOut_6 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_6.Size()

	mtr.EopEopOut_7 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_7.Size()

	mtr.EopEopOut_8 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_8.Size()

	mtr.EopEopOut_9 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_9.Size()

	mtr.EopEopOut_10 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_10.Size()

	mtr.EopEopOut_11 = mtr.metrics.GetCounter(offset)
	offset += mtr.EopEopOut_11.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "SopSopOut_0" {
		return offset
	}
	offset += mtr.SopSopOut_0.Size()

	if fldName == "SopSopOut_1" {
		return offset
	}
	offset += mtr.SopSopOut_1.Size()

	if fldName == "SopSopOut_2" {
		return offset
	}
	offset += mtr.SopSopOut_2.Size()

	if fldName == "SopSopOut_3" {
		return offset
	}
	offset += mtr.SopSopOut_3.Size()

	if fldName == "SopSopOut_4" {
		return offset
	}
	offset += mtr.SopSopOut_4.Size()

	if fldName == "SopSopOut_5" {
		return offset
	}
	offset += mtr.SopSopOut_5.Size()

	if fldName == "SopSopOut_6" {
		return offset
	}
	offset += mtr.SopSopOut_6.Size()

	if fldName == "SopSopOut_7" {
		return offset
	}
	offset += mtr.SopSopOut_7.Size()

	if fldName == "SopSopOut_8" {
		return offset
	}
	offset += mtr.SopSopOut_8.Size()

	if fldName == "SopSopOut_9" {
		return offset
	}
	offset += mtr.SopSopOut_9.Size()

	if fldName == "SopSopOut_10" {
		return offset
	}
	offset += mtr.SopSopOut_10.Size()

	if fldName == "SopSopOut_11" {
		return offset
	}
	offset += mtr.SopSopOut_11.Size()

	if fldName == "EopEopOut_0" {
		return offset
	}
	offset += mtr.EopEopOut_0.Size()

	if fldName == "EopEopOut_1" {
		return offset
	}
	offset += mtr.EopEopOut_1.Size()

	if fldName == "EopEopOut_2" {
		return offset
	}
	offset += mtr.EopEopOut_2.Size()

	if fldName == "EopEopOut_3" {
		return offset
	}
	offset += mtr.EopEopOut_3.Size()

	if fldName == "EopEopOut_4" {
		return offset
	}
	offset += mtr.EopEopOut_4.Size()

	if fldName == "EopEopOut_5" {
		return offset
	}
	offset += mtr.EopEopOut_5.Size()

	if fldName == "EopEopOut_6" {
		return offset
	}
	offset += mtr.EopEopOut_6.Size()

	if fldName == "EopEopOut_7" {
		return offset
	}
	offset += mtr.EopEopOut_7.Size()

	if fldName == "EopEopOut_8" {
		return offset
	}
	offset += mtr.EopEopOut_8.Size()

	if fldName == "EopEopOut_9" {
		return offset
	}
	offset += mtr.EopEopOut_9.Size()

	if fldName == "EopEopOut_10" {
		return offset
	}
	offset += mtr.EopEopOut_10.Size()

	if fldName == "EopEopOut_11" {
		return offset
	}
	offset += mtr.EopEopOut_11.Size()

	return offset
}

// SetSopSopOut_0 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_0"))
	return nil
}

// SetSopSopOut_1 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_1"))
	return nil
}

// SetSopSopOut_2 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_2"))
	return nil
}

// SetSopSopOut_3 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_3"))
	return nil
}

// SetSopSopOut_4 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_4"))
	return nil
}

// SetSopSopOut_5 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_5"))
	return nil
}

// SetSopSopOut_6 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_6"))
	return nil
}

// SetSopSopOut_7 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_7"))
	return nil
}

// SetSopSopOut_8 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_8"))
	return nil
}

// SetSopSopOut_9 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_9"))
	return nil
}

// SetSopSopOut_10 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_10"))
	return nil
}

// SetSopSopOut_11 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetSopSopOut_11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("SopSopOut_11"))
	return nil
}

// SetEopEopOut_0 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_0(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_0"))
	return nil
}

// SetEopEopOut_1 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_1(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_1"))
	return nil
}

// SetEopEopOut_2 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_2(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_2"))
	return nil
}

// SetEopEopOut_3 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_3(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_3"))
	return nil
}

// SetEopEopOut_4 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_4(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_4"))
	return nil
}

// SetEopEopOut_5 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_5(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_5"))
	return nil
}

// SetEopEopOut_6 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_6(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_6"))
	return nil
}

// SetEopEopOut_7 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_7(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_7"))
	return nil
}

// SetEopEopOut_8 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_8(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_8"))
	return nil
}

// SetEopEopOut_9 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_9(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_9"))
	return nil
}

// SetEopEopOut_10 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_10(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_10"))
	return nil
}

// SetEopEopOut_11 sets cunter in shared memory
func (mtr *PbpbcintpbusviolationoutMetrics) SetEopEopOut_11(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("EopEopOut_11"))
	return nil
}

// PbpbcintpbusviolationoutMetricsIterator is the iterator object
type PbpbcintpbusviolationoutMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbcintpbusviolationoutMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbcintpbusviolationoutMetricsIterator) Next() *PbpbcintpbusviolationoutMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbcintpbusviolationoutMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbcintpbusviolationoutMetricsIterator) Find(key uint64) (*PbpbcintpbusviolationoutMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbcintpbusviolationoutMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbcintpbusviolationoutMetricsIterator) Create(key uint64) (*PbpbcintpbusviolationoutMetrics, error) {
	tmtr := &PbpbcintpbusviolationoutMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbcintpbusviolationoutMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbcintpbusviolationoutMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbcintpbusviolationoutMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbcintpbusviolationoutMetricsIterator returns an iterator
func NewPbpbcintpbusviolationoutMetricsIterator() (*PbpbcintpbusviolationoutMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbcintpbusviolationoutMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbcintpbusviolationoutMetricsIterator{iter: iter}, nil
}

type PbpbchbmintecchbmmtuMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbchbmintecchbmmtuMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbchbmintecchbmmtuMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbchbmintecchbmmtuMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbchbmintecchbmmtuMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmmtuMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmmtuMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbchbmintecchbmmtuMetricsIterator is the iterator object
type PbpbchbmintecchbmmtuMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbchbmintecchbmmtuMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbchbmintecchbmmtuMetricsIterator) Next() *PbpbchbmintecchbmmtuMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbchbmintecchbmmtuMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbchbmintecchbmmtuMetricsIterator) Find(key uint64) (*PbpbchbmintecchbmmtuMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbchbmintecchbmmtuMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbchbmintecchbmmtuMetricsIterator) Create(key uint64) (*PbpbchbmintecchbmmtuMetrics, error) {
	tmtr := &PbpbchbmintecchbmmtuMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbchbmintecchbmmtuMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbchbmintecchbmmtuMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbchbmintecchbmmtuMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbchbmintecchbmmtuMetricsIterator returns an iterator
func NewPbpbchbmintecchbmmtuMetricsIterator() (*PbpbchbmintecchbmmtuMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbchbmintecchbmmtuMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbchbmintecchbmmtuMetricsIterator{iter: iter}, nil
}

type PbpbchbmintecchbmrbMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	RbUncorrectable metrics.Counter

	RbCorrectable metrics.Counter

	CdtUncorrectable metrics.Counter

	CdtCorrectable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbchbmintecchbmrbMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbchbmintecchbmrbMetrics) Size() int {
	sz := 0

	sz += mtr.RbUncorrectable.Size()

	sz += mtr.RbCorrectable.Size()

	sz += mtr.CdtUncorrectable.Size()

	sz += mtr.CdtCorrectable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.RbUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RbUncorrectable.Size()

	mtr.RbCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.RbCorrectable.Size()

	mtr.CdtUncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.CdtUncorrectable.Size()

	mtr.CdtCorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.CdtCorrectable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "RbUncorrectable" {
		return offset
	}
	offset += mtr.RbUncorrectable.Size()

	if fldName == "RbCorrectable" {
		return offset
	}
	offset += mtr.RbCorrectable.Size()

	if fldName == "CdtUncorrectable" {
		return offset
	}
	offset += mtr.CdtUncorrectable.Size()

	if fldName == "CdtCorrectable" {
		return offset
	}
	offset += mtr.CdtCorrectable.Size()

	return offset
}

// SetRbUncorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) SetRbUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RbUncorrectable"))
	return nil
}

// SetRbCorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) SetRbCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("RbCorrectable"))
	return nil
}

// SetCdtUncorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) SetCdtUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CdtUncorrectable"))
	return nil
}

// SetCdtCorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmrbMetrics) SetCdtCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("CdtCorrectable"))
	return nil
}

// PbpbchbmintecchbmrbMetricsIterator is the iterator object
type PbpbchbmintecchbmrbMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbchbmintecchbmrbMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbchbmintecchbmrbMetricsIterator) Next() *PbpbchbmintecchbmrbMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbchbmintecchbmrbMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbchbmintecchbmrbMetricsIterator) Find(key uint64) (*PbpbchbmintecchbmrbMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbchbmintecchbmrbMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbchbmintecchbmrbMetricsIterator) Create(key uint64) (*PbpbchbmintecchbmrbMetrics, error) {
	tmtr := &PbpbchbmintecchbmrbMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbchbmintecchbmrbMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbchbmintecchbmrbMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbchbmintecchbmrbMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbchbmintecchbmrbMetricsIterator returns an iterator
func NewPbpbchbmintecchbmrbMetricsIterator() (*PbpbchbmintecchbmrbMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbchbmintecchbmrbMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbchbmintecchbmrbMetricsIterator{iter: iter}, nil
}

type PbpbchbmintecchbmwbMetrics struct {
	ObjectMeta api.ObjectMeta

	key uint64

	Uncorrectable metrics.Counter

	Correctable metrics.Counter

	// private state
	metrics gometrics.Metrics
}

func (mtr *PbpbchbmintecchbmwbMetrics) GetKey() uint64 {
	return mtr.key
}

// Size returns the size of the metrics object
func (mtr *PbpbchbmintecchbmwbMetrics) Size() int {
	sz := 0

	sz += mtr.Uncorrectable.Size()

	sz += mtr.Correctable.Size()

	return sz
}

// Unmarshal unmarshal the raw counters from shared memory
func (mtr *PbpbchbmintecchbmwbMetrics) Unmarshal() error {
	var offset int

	gometrics.DecodeScalarKey(&mtr.key, mtr.metrics.GetKey())

	mtr.Uncorrectable = mtr.metrics.GetCounter(offset)
	offset += mtr.Uncorrectable.Size()

	mtr.Correctable = mtr.metrics.GetCounter(offset)
	offset += mtr.Correctable.Size()

	return nil
}

// getOffset returns the offset for raw counters in shared memory
func (mtr *PbpbchbmintecchbmwbMetrics) getOffset(fldName string) int {
	var offset int

	if fldName == "Uncorrectable" {
		return offset
	}
	offset += mtr.Uncorrectable.Size()

	if fldName == "Correctable" {
		return offset
	}
	offset += mtr.Correctable.Size()

	return offset
}

// SetUncorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmwbMetrics) SetUncorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Uncorrectable"))
	return nil
}

// SetCorrectable sets cunter in shared memory
func (mtr *PbpbchbmintecchbmwbMetrics) SetCorrectable(val metrics.Counter) error {
	mtr.metrics.SetCounter(val, mtr.getOffset("Correctable"))
	return nil
}

// PbpbchbmintecchbmwbMetricsIterator is the iterator object
type PbpbchbmintecchbmwbMetricsIterator struct {
	iter gometrics.MetricsIterator
}

// HasNext returns true if there are more objects
func (it *PbpbchbmintecchbmwbMetricsIterator) HasNext() bool {
	return it.iter.HasNext()
}

// Next returns the next metrics
func (it *PbpbchbmintecchbmwbMetricsIterator) Next() *PbpbchbmintecchbmwbMetrics {
	mtr := it.iter.Next()
	if mtr == nil {
		return nil
	}

	tmtr := &PbpbchbmintecchbmwbMetrics{metrics: mtr}
	tmtr.Unmarshal()
	return tmtr
}

// Find finds the metrics object by key

func (it *PbpbchbmintecchbmwbMetricsIterator) Find(key uint64) (*PbpbchbmintecchbmwbMetrics, error) {

	mtr, err := it.iter.Find(gometrics.EncodeScalarKey(key))

	if err != nil {
		return nil, err
	}
	tmtr := &PbpbchbmintecchbmwbMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Create creates the object in shared memory

func (it *PbpbchbmintecchbmwbMetricsIterator) Create(key uint64) (*PbpbchbmintecchbmwbMetrics, error) {
	tmtr := &PbpbchbmintecchbmwbMetrics{}

	mtr := it.iter.Create(gometrics.EncodeScalarKey(key), tmtr.Size())

	tmtr = &PbpbchbmintecchbmwbMetrics{metrics: mtr, key: key}
	tmtr.Unmarshal()
	return tmtr, nil
}

// Delete deletes the object from shared memory

func (it *PbpbchbmintecchbmwbMetricsIterator) Delete(key uint64) error {

	return it.iter.Delete(gometrics.EncodeScalarKey(key))

}

// Free frees the iterator memory
func (it *PbpbchbmintecchbmwbMetricsIterator) Free() {
	it.iter.Free()
}

// NewPbpbchbmintecchbmwbMetricsIterator returns an iterator
func NewPbpbchbmintecchbmwbMetricsIterator() (*PbpbchbmintecchbmwbMetricsIterator, error) {
	iter, err := gometrics.NewMetricsIterator("PbpbchbmintecchbmwbMetrics")
	if err != nil {
		return nil, err
	}
	// little hack to skip creating iterators on osx
	if iter == nil {
		return nil, nil
	}

	return &PbpbchbmintecchbmwbMetricsIterator{iter: iter}, nil
}
