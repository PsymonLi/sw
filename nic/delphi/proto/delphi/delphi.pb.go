// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: delphi.proto

/*
	Package delphi is a generated protocol buffer package.

	It is generated from these files:
		delphi.proto

	It has these top-level messages:
		ObjectMeta
		ReferList
		Counter
		Gauge
		Histogram
*/
package delphi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// set/delete operations
type ObjectOperation int32

const (
	ObjectOperation_InvalidOp ObjectOperation = 0
	ObjectOperation_SetOp     ObjectOperation = 1
	ObjectOperation_DeleteOp  ObjectOperation = 2
)

var ObjectOperation_name = map[int32]string{
	0: "InvalidOp",
	1: "SetOp",
	2: "DeleteOp",
}
var ObjectOperation_value = map[string]int32{
	"InvalidOp": 0,
	"SetOp":     1,
	"DeleteOp":  2,
}

func (x ObjectOperation) String() string {
	return proto.EnumName(ObjectOperation_name, int32(x))
}
func (ObjectOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{0} }

// mount modes
type MountMode int32

const (
	MountMode_InvalidMode   MountMode = 0
	MountMode_ReadMode      MountMode = 1
	MountMode_ReadWriteMode MountMode = 2
)

var MountMode_name = map[int32]string{
	0: "InvalidMode",
	1: "ReadMode",
	2: "ReadWriteMode",
}
var MountMode_value = map[string]int32{
	"InvalidMode":   0,
	"ReadMode":      1,
	"ReadWriteMode": 2,
}

func (x MountMode) String() string {
	return proto.EnumName(MountMode_name, int32(x))
}
func (MountMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{1} }

// metadata present in all objects
type ObjectMeta struct {
	Kind   string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Handle uint64 `protobuf:"varint,4,opt,name=Handle,proto3" json:"Handle,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{0} }

func (m *ObjectMeta) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ObjectMeta) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ObjectMeta) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ObjectMeta) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// ReferList is a list of object handles to be used for storing object references
type ReferList struct {
	Handles []uint64 `protobuf:"varint,1,rep,packed,name=Handles" json:"Handles,omitempty"`
}

func (m *ReferList) Reset()                    { *m = ReferList{} }
func (m *ReferList) String() string            { return proto.CompactTextString(m) }
func (*ReferList) ProtoMessage()               {}
func (*ReferList) Descriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{1} }

func (m *ReferList) GetHandles() []uint64 {
	if m != nil {
		return m.Handles
	}
	return nil
}

// Metrics types
type Counter struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Counter) Reset()                    { *m = Counter{} }
func (m *Counter) String() string            { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()               {}
func (*Counter) Descriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{2} }

func (m *Counter) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Gauge struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Gauge) Reset()                    { *m = Gauge{} }
func (m *Gauge) String() string            { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()               {}
func (*Gauge) Descriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{3} }

func (m *Gauge) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Histogram struct {
	Ranges []uint64 `protobuf:"varint,1,rep,packed,name=ranges" json:"ranges,omitempty"`
	Counts []uint64 `protobuf:"varint,2,rep,packed,name=counts" json:"counts,omitempty"`
}

func (m *Histogram) Reset()                    { *m = Histogram{} }
func (m *Histogram) String() string            { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()               {}
func (*Histogram) Descriptor() ([]byte, []int) { return fileDescriptorDelphi, []int{4} }

func (m *Histogram) GetRanges() []uint64 {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *Histogram) GetCounts() []uint64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

var E_UpdateEvent = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         70000,
	Name:          "delphi.update_event",
	Tag:           "varint,70000,opt,name=update_event,json=updateEvent",
	Filename:      "delphi.proto",
}

var E_Singleton = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         70001,
	Name:          "delphi.singleton",
	Tag:           "varint,70001,opt,name=singleton",
	Filename:      "delphi.proto",
}

var E_MetricsTableSize = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         70002,
	Name:          "delphi.metrics_table_size",
	Tag:           "varint,70002,opt,name=metrics_table_size,json=metricsTableSize",
	Filename:      "delphi.proto",
}

var E_Event = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         70000,
	Name:          "delphi.event",
	Tag:           "varint,70000,opt,name=event",
	Filename:      "delphi.proto",
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "delphi.ObjectMeta")
	proto.RegisterType((*ReferList)(nil), "delphi.ReferList")
	proto.RegisterType((*Counter)(nil), "delphi.Counter")
	proto.RegisterType((*Gauge)(nil), "delphi.Gauge")
	proto.RegisterType((*Histogram)(nil), "delphi.Histogram")
	proto.RegisterEnum("delphi.ObjectOperation", ObjectOperation_name, ObjectOperation_value)
	proto.RegisterEnum("delphi.MountMode", MountMode_name, MountMode_value)
	proto.RegisterExtension(E_UpdateEvent)
	proto.RegisterExtension(E_Singleton)
	proto.RegisterExtension(E_MetricsTableSize)
	proto.RegisterExtension(E_Event)
}
func (m *ObjectMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Handle != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *ReferList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handles) > 0 {
		dAtA2 := make([]byte, len(m.Handles)*10)
		var j1 int
		for _, num := range m.Handles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *Counter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Counter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Gauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gauge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *Histogram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Histogram) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		dAtA4 := make([]byte, len(m.Ranges)*10)
		var j3 int
		for _, num := range m.Ranges {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Counts) > 0 {
		dAtA6 := make([]byte, len(m.Counts)*10)
		var j5 int
		for _, num := range m.Counts {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDelphi(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func encodeVarintDelphi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObjectMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovDelphi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovDelphi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDelphi(uint64(l))
	}
	if m.Handle != 0 {
		n += 1 + sovDelphi(uint64(m.Handle))
	}
	return n
}

func (m *ReferList) Size() (n int) {
	var l int
	_ = l
	if len(m.Handles) > 0 {
		l = 0
		for _, e := range m.Handles {
			l += sovDelphi(uint64(e))
		}
		n += 1 + sovDelphi(uint64(l)) + l
	}
	return n
}

func (m *Counter) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovDelphi(uint64(m.Value))
	}
	return n
}

func (m *Gauge) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Histogram) Size() (n int) {
	var l int
	_ = l
	if len(m.Ranges) > 0 {
		l = 0
		for _, e := range m.Ranges {
			l += sovDelphi(uint64(e))
		}
		n += 1 + sovDelphi(uint64(l)) + l
	}
	if len(m.Counts) > 0 {
		l = 0
		for _, e := range m.Counts {
			l += sovDelphi(uint64(e))
		}
		n += 1 + sovDelphi(uint64(l)) + l
	}
	return n
}

func sovDelphi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDelphi(x uint64) (n int) {
	return sovDelphi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelphi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelphi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelphi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelphi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelphi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Handles = append(m.Handles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDelphi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDelphi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Handles = append(m.Handles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Handles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelphi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelphi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Counter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Counter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Counter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelphi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelphi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDelphi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelphi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Histogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Histogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Histogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ranges = append(m.Ranges, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDelphi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDelphi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ranges = append(m.Ranges, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDelphi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDelphi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelphi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDelphi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelphi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelphi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelphi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDelphi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDelphi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDelphi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDelphi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelphi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("delphi.proto", fileDescriptorDelphi) }

var fileDescriptorDelphi = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x86, 0x33, 0x49, 0x36, 0xed, 0x9e, 0xa6, 0x74, 0x1d, 0x44, 0x16, 0xa1, 0x69, 0x08, 0x08,
	0xa1, 0x17, 0xe9, 0x85, 0x78, 0x61, 0x44, 0x04, 0xad, 0x5a, 0xa9, 0x61, 0x65, 0x2b, 0x78, 0x67,
	0x98, 0x64, 0x4f, 0xb7, 0x23, 0xd3, 0x99, 0x61, 0x66, 0x36, 0x60, 0x9f, 0xc4, 0x6b, 0x9f, 0xc6,
	0x4b, 0x1f, 0x41, 0xe2, 0x0b, 0xa8, 0x4f, 0x20, 0xb3, 0xb3, 0x51, 0xb4, 0x17, 0xbd, 0x3b, 0xdf,
	0x3f, 0xe7, 0xff, 0xe7, 0xcc, 0x1c, 0xe8, 0x17, 0x28, 0xf4, 0x05, 0x9f, 0x68, 0xa3, 0x9c, 0xa2,
	0xbd, 0x40, 0x77, 0x87, 0xa5, 0x52, 0xa5, 0xc0, 0xa3, 0x5a, 0x5d, 0x54, 0xe7, 0x47, 0x05, 0xda,
	0xa5, 0xe1, 0xda, 0x29, 0x13, 0x3a, 0x47, 0xef, 0x01, 0xb2, 0xc5, 0x07, 0x5c, 0xba, 0x19, 0x3a,
	0x46, 0x29, 0x74, 0x4f, 0xb9, 0x2c, 0x52, 0x32, 0x24, 0xe3, 0x38, 0xaf, 0x6b, 0xaf, 0xbd, 0x61,
	0xee, 0x22, 0x6d, 0x07, 0xcd, 0xd7, 0x34, 0x81, 0xce, 0x29, 0x7e, 0x4c, 0x3b, 0xb5, 0xe4, 0x4b,
	0x7a, 0x07, 0x7a, 0x27, 0x4c, 0x16, 0x02, 0xd3, 0xee, 0x90, 0x8c, 0xbb, 0x79, 0x43, 0xa3, 0x7b,
	0x10, 0xe7, 0x78, 0x8e, 0xe6, 0x35, 0xb7, 0x8e, 0xa6, 0xb0, 0x15, 0x64, 0x9b, 0x92, 0x61, 0x67,
	0xdc, 0xcd, 0x37, 0x38, 0x3a, 0x80, 0xad, 0x67, 0xaa, 0x92, 0x0e, 0x0d, 0xbd, 0x0d, 0xd1, 0x8a,
	0x89, 0x0a, 0xeb, 0x21, 0xba, 0x79, 0x80, 0xd1, 0x3e, 0x44, 0x2f, 0x59, 0x55, 0xe2, 0xbf, 0xc7,
	0x64, 0x73, 0xfc, 0x08, 0xe2, 0x13, 0x6e, 0x9d, 0x2a, 0x0d, 0xbb, 0xf4, 0xb3, 0x18, 0x26, 0xcb,
	0x3f, 0xb7, 0x34, 0xe4, 0xf5, 0xa5, 0xbf, 0xc4, 0xa6, 0xed, 0xa0, 0x07, 0x3a, 0x7c, 0x08, 0x7b,
	0xe1, 0x0f, 0x32, 0x8d, 0x86, 0x39, 0xae, 0x24, 0xdd, 0x85, 0xf8, 0x95, 0x5c, 0x31, 0xc1, 0x8b,
	0x4c, 0x27, 0x2d, 0x1a, 0x43, 0x74, 0x86, 0x2e, 0xd3, 0x09, 0xa1, 0x7d, 0xd8, 0x3e, 0x46, 0x81,
	0x0e, 0x33, 0x9d, 0xb4, 0x0f, 0x1f, 0x43, 0x3c, 0xf3, 0x21, 0x33, 0x55, 0x20, 0xdd, 0x83, 0x9d,
	0xc6, 0xe4, 0x31, 0x69, 0xf9, 0xde, 0x1c, 0x59, 0x20, 0x42, 0x6f, 0xc1, 0xae, 0xa7, 0x77, 0x86,
	0x3b, 0xac, 0xa5, 0xf6, 0xf4, 0x18, 0xfa, 0x95, 0x2e, 0x98, 0xc3, 0x39, 0xae, 0x50, 0x3a, 0x7a,
	0x30, 0x09, 0x0b, 0x9b, 0x6c, 0x16, 0x36, 0x99, 0xa1, 0xb5, 0xac, 0xc4, 0x4c, 0xfb, 0xb1, 0x6c,
	0xfa, 0xe3, 0xb3, 0xff, 0xde, 0xed, 0x7c, 0x27, 0xd8, 0x9e, 0x7b, 0xd7, 0xf4, 0x09, 0xc4, 0x96,
	0xcb, 0x52, 0xa0, 0x53, 0xf2, 0xe6, 0x88, 0x9f, 0x4d, 0xc4, 0x5f, 0xcf, 0x34, 0x03, 0x7a, 0x89,
	0xce, 0xf0, 0xa5, 0x9d, 0x3b, 0xb6, 0x10, 0x38, 0xb7, 0xfc, 0x0a, 0x6f, 0x4e, 0xfa, 0x55, 0x27,
	0x45, 0x79, 0xd2, 0x98, 0xdf, 0x7a, 0xef, 0x19, 0xbf, 0xc2, 0xe9, 0x03, 0x88, 0xc2, 0x83, 0xf6,
	0xaf, 0x65, 0xbc, 0xe0, 0x28, 0x8a, 0xff, 0x9f, 0x13, 0xba, 0x9f, 0x26, 0x5f, 0xd6, 0x03, 0xf2,
	0x75, 0x3d, 0x20, 0xdf, 0xd6, 0x03, 0xf2, 0xe9, 0xfb, 0xa0, 0xb5, 0xe8, 0xd5, 0xbe, 0xfb, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xb4, 0x92, 0x31, 0xdf, 0x02, 0x00, 0x00,
}
