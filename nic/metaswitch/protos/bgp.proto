//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for BGP
//
// NOTE: This is the netagent interface for BGP protocol configurations. This is
// a limited subset of configurations required for current deployments
//
//    This model supports the following BGP configuration level
//    hierarchy:
//
//      BGP
//        |
//        +-> [ global BGP configuration ]
//        +-> neighbor
//          +-> [ neighbor config ]
//          +-> AFI / SAFI [ per-AFI overrides ]";
//
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "gogo.proto";
import "pdsa.proto";
import "meta/meta.proto";
import "types.proto";
import "common.proto";

// bgp service definition
service BGPSvc {
  rpc BGPCreate (BGPRequest) returns (BGPResponse) {}
  rpc BGPUpdate (BGPRequest) returns (BGPResponse) {}
  rpc BGPDelete (BGPRequest) returns (BGPResponse) {}
  rpc BGPGet (BGPRequest) returns (BGPGetResponse) {}
  rpc BGPPeerCreate (BGPPeerRequest) returns (BGPPeerResponse) {}
  rpc BGPPeerUpdate (BGPPeerRequest) returns (BGPPeerResponse) {}
  rpc BGPPeerDelete (BGPPeerRequest) returns (BGPPeerResponse) {}
  rpc BGPPeerGet (BGPPeerRequest) returns (BGPPeerGetResponse) {}
  rpc BGPPeerAfCreate (BGPPeerAfRequest) returns (BGPPeerAfResponse) {}
  rpc BGPPeerAfUpdate (BGPPeerAfRequest) returns (BGPPeerAfResponse) {}
  rpc BGPPeerAfDelete (BGPPeerAfRequest) returns (BGPPeerAfResponse) {}
  rpc BGPPeerAfGet (BGPPeerAfRequest) returns (BGPPeerAfGetResponse) {}
  rpc BGPNLRIPrefixGet (BGPNLRIPrefixRequest) returns (BGPNLRIPrefixGetResponse) {}
}

// BGP address family identifier
enum BGPAfi {
  BGP_AFI_NONE  = 0;
  BGP_AFI_IPV4  = 1;
  BGP_AFI_IPV6  = 2;
  BGP_AFI_L2VPN = 25;
}

// BGP sub-address family identitfier
enum BGPSafi {
  BGP_SAFI_NONE         = 0;
  BGP_SAFI_UNICAST      = 1;
  BGP_SAFI_MULTICAST    = 2;
  BGP_SAFI_BOTH         = 3;
  BGP_SAFI_LABEL        = 4;
  BGP_SAFI_VPLS         = 65;
  BGP_SAFI_EVPN         = 70;
  BGP_SAFI_MPLS_BGP_VPN = 128;
  BGP_SAFI_PRIVATE      = 241;
}

// BGP peer RR client
enum BGPPeerRRClient {
  BGP_PEER_RR_NONE          = 0;
  BGP_PEER_RR_CLIENT        = 1;
  BGP_PEER_RR_MESHED_CLIENT = 2;
}

// BGP peer last_state
enum BGPPeerState {
  BGP_PEER_STATE_NONE        = 0;
  BGP_PEER_STATE_IDLE        = 1;
  BGP_PEER_STATE_CONNECT     = 2;
  BGP_PEER_STATE_ACTIVE      = 3;
  BGP_PEER_STATE_OPENSENT    = 4;
  BGP_PEER_STATE_OPENCONFIRM = 5;
  BGP_PEER_STATE_ESTABLISHED = 6;
}


// BGP configuration
message BGPSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_RM_OID_LEN",
      Mib:    "bgpRmEntTable"
      FillFn: "bgp_rm_ent_set_fill_func"
      UpdateForDelete: true
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_RM_OID_LEN",
      Mib:    "bgpRmEntTable",
      FillFn: "bgp_rm_ent_get_fill_func"
  };
  // unique key/identifier of BGP config
  bytes   Id        = 1;
  // the local autonomous system number
  uint32  LocalASN  = 2 [(venice.pdsaFields) = {Field: "local_as"}];
  // router ID for this bgp instance
  fixed32 RouterId  = 3 [(venice.pdsaFields) = {Field: "local_identifier"}];
  // cluster ID of the local router. if not configured, router ID will be used
  // as cluster ID
  fixed32 ClusterId = 4 [(venice.pdsaFields) = {Field: "cluster_id"}];

  // internal-only fields
  AdminState State  = 1000 [(venice.pdsaFields) = {Field: "admin_status"}, (gogoproto.moretags) = "msinternal:\"true\""];
}

// operational status of BGP spec, if any
message BGPStatus {
}

// BGP object
message BGP {
  BGPSpec   Spec   = 1;
  BGPStatus Status = 2;
}

// BGP spec create and update request
message BGPRequest {
  // requests
  BGPSpec Request = 1;
}

// BGP spec create and update response
message BGPResponse {
  types.ApiStatus ApiStatus = 1;
  BGPStatus       Response  = 2;
}

// BGP spec get response
message BGPGetResponse {
  types.ApiStatus ApiStatus = 1;
  BGP             Response  = 2;
}

// BGP peer configurations
message BGPPeerSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_PER_OID_LEN",
      Mib:    "bgpPeerTable",
      FillFn: "bgp_peer_set_fill_func"
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PER_OID_LEN",
      Mib:    "bgpPeerTable",
      FillFn: "bgp_peer_get_fill_func"
  };
  // unique key/identifier of peer
  bytes           Id           = 1;
  // peer enable/disable admin state. if peer is not enabled then local router
  // must not initiate connections to the neighbor and must not respond to
  // TCP connections attempts from neighbor
  AdminState      State        = 2 [(venice.pdsaFields) = {Field: "admin_status"}];
  // BGP local IP address. control plane chooses the local IP address of the
  // session if an all 0 IP address is provided
  types.IPAddress LocalAddr    = 3 [(venice.pdsaFields) = {Field: "local_addr", SetKeyOidAddrIndex: "AMB_BGP_PER_LOCAL_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PER_LOCAL_ADD_TYP_INDEX"}];
  // BGP peer IP address
  types.IPAddress PeerAddr     = 4 [(venice.pdsaFields) = {Field: "remote_addr", SetKeyOidAddrIndex: "AMB_BGP_PER_REMOTE_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PER_REMOTE_ADD_TYP_IX"}];
  // remote 4-byte AS number
  uint32          RemoteASN    = 5 [(venice.pdsaFields) = {Field: "remote_as"}];
  // send regular community attributes to neighbor
  bool            SendComm     = 6 [(venice.pdsaFields) = {Field: "send_comm"}];
  // send extended community attributes to neighbor
  bool            SendExtComm  = 7 [(venice.pdsaFields) = {Field: "send_ext_comm"}];
  // peer is a route reflector client
  BGPPeerRRClient RRClient     = 8 [(venice.pdsaFields) = {Field: "reflector_client"}];
  // BGP session connect-retry timer in seconds
  uint32          ConnectRetry = 9 [(venice.pdsaFields) = {Field: "connect_retry_interval"}];
  // BGP session holdtime timer in seconds
  uint32          HoldTime     = 10 [(venice.pdsaFields) = {Field: "hold_time_configd"}];
  // BGP session keepalive timer in seconds
  uint32          KeepAlive    = 11 [(venice.pdsaFields) = {Field: "keep_alive_configd"}];
  // MD5 authentication
  bytes           Password     = 12 [(venice.pdsaFields) = {Field: "password", IgnoreIfEmpty: true}];
}

// BGP peer status
message BGPPeerStatus {
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PRST_OID_LEN",
      Mib:    "bgpPeerStatusTable",
      FillFn: "bgp_peer_status_get_fill_func"
  };
  // unique key/identifier of peer
  bytes           Id            = 1;
  // BGP session status
  BGPPeerState    Status        = 2 [(venice.pdsaFields) = {Field: "state"}];
  // BGP session previous status
  BGPPeerState    PrevStatus    = 3 [(venice.pdsaFields) = {Field: "last_state"}];
  // last error received
  bytes           LastErrorRcvd = 4 [(venice.pdsaFields) = {Field: "last_error_rcvd"}];
  // Last error sent
  bytes           LastErrorSent = 5 [(venice.pdsaFields) = {Field: "last_error_sent"}];

  // internal only
  // BGP local IP address
  types.IPAddress LocalAddr     = 1000 [(venice.pdsaFields) = {Field: "local_addr", SetKeyOidAddrIndex: "AMB_BGP_PRST_LOCAL_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PRST_LOCAL_ADDR_TYP_IX"}];
  // BGP peer IP address
  types.IPAddress PeerAddr      = 1001 [(venice.pdsaFields) = {Field: "remote_addr", SetKeyOidAddrIndex: "AMB_BGP_PRST_REMOTE_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PRST_REMOTE_ADDR_TYP_IX"}];
}

// BGP peer object
message BGPPeer {
  BGPPeerSpec   Spec   = 1;
  BGPPeerStatus Status = 2;
}

// BGP peer create and update response
message BGPPeerResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer create and update request
message BGPPeerRequest {
  // requests
  repeated BGPPeerSpec Request = 1;
}

// BGP peer get response
message BGPPeerGetResponse {
  types.ApiStatus  ApiStatus = 1;
  repeated BGPPeer Response  = 2;
}

// BGP peer AF configurations
message BGPPeerAfSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_PAS_OID_LEN",
      Mib:    "bgpPeerAfiSafiTable",
      FillFn: "bgp_peer_af_set_fill_func"
      UpdateForDelete: true
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PAS_OID_LEN",
      Mib:    "bgpPeerAfiSafiTable",
      FillFn: "bgp_peer_af_get_fill_func"
  };

  // unique key/identifier of peer AF config
  bytes           Id          = 1;
  // BGP local IP address
  types.IPAddress LocalAddr   = 2 [(venice.pdsaFields) = {Field: "local_addr", SetKeyOidAddrIndex: "AMB_BGP_PAS_LOCAL_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PAS_LOCAL_ADD_TYP_INDEX"}];
  // BGP peer IP address
  types.IPAddress PeerAddr    = 3 [(venice.pdsaFields) = {Field: "remote_addr", SetKeyOidAddrIndex: "AMB_BGP_PAS_REMOTE_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_BGP_PAS_REMOTE_ADD_TYP_IX"}];
  // BGP address family
  BGPAfi          Afi         = 4 [(venice.pdsaFields) = {Field: "afi",  SetKeyOidIndex: "AMB_BGP_PAS_AFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_AFI_INDEX"}];
  // BGP sub-address family
  BGPSafi         Safi        = 5 [(venice.pdsaFields) = {Field: "safi",  SetKeyOidIndex: "AMB_BGP_PAS_SAFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_SAFI_INDEX"}];
  // enforce this router to set self as next-hop for advertised routes
  bool            NexthopSelf = 6 [(venice.pdsaFields) = {Field: "next_hop_self"}];
  // originate a default route to this peer
  bool            DefaultOrig = 7 [(venice.pdsaFields) = {Field: "originate_default"}];

  // internal only
  // enable/disable address families. this field is internally mapped with create/delete request
  bool            Disable     = 1000 [(venice.pdsaFields) = {Field: "disable_afi_safi"}, (gogoproto.moretags) = "msinternal:\"true\""];
}

// BGP peer AF status and stats, if any
message BGPPeerAfStatus {
}

// BGP peer AF object
message BGPPeerAf {
  BGPPeerAfSpec   Spec   = 1;
  BGPPeerAfStatus Status = 2;
}

// BGP peer AF create and update response
message BGPPeerAfResponse {
  types.ApiStatus ApiStatus = 1;
}

// BGP peer AF create and update request
message BGPPeerAfRequest {
  // requests
  repeated BGPPeerAfSpec Request = 1;
}

// BGP peer AF get response
message BGPPeerAfGetResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated BGPPeerAf  Response  = 2;
}

// NLRI source
enum NLRISrc {
  NLRI_NONE = 0;
  NLRI_PEER = 1; // learned from peer
  NLRI_AFM  = 2; // learned from AFM
  NLRI_SELF = 3; // created by itself

}

// BGP NLRI prefix table
message BGPNLRIPrefixStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_BGP_NL_PF_OID_LEN",
    Mib:    "bgpNlriPrefixTable"
  };

  // BGP address family
  BGPAfi     Afi              = 1 [(venice.pdsaFields) = {Field: "afi", GetKeyOidIndex: "AMB_BGP_NLPF_AFI_INDEX"}];
  // BGP sub-address family
  BGPSafi    Safi             = 2 [(venice.pdsaFields) = {Field: "safi", GetKeyOidIndex: "AMB_BGP_NLPF_SAFI_INDEX"}];
  // prefix in NLRI
  bytes      Prefix           = 3 [(venice.pdsaFields) = {Field: "prfx", GetKeyOidIndex: "AMB_BGP_NLPF_PRFX_INDEX" GetKeyOidLenIndex: "AMB_BGP_NLPF_PRFX_LEN_INDEX"}];
  // prefix length
  uint32     PrefixLen        = 4 [(venice.pdsaFields) = {Field: "prfxlen", GetKeyOidIndex: "AMB_BGP_NLPF_PRFX_LEN_INDEX"}];
  // route source (learned from BGP peer or AFM)
  NLRISrc    RouteSource      = 5 [(venice.pdsaFields) = {Field: "peer_or_afm", GetKeyOidIndex: "AMB_BGP_NLPF_PEER_OR_AFM_INDEX"}];
  // route source index
  uint32     RouteSourceIndex = 6 [(venice.pdsaFields) = {Field: "peer_afm_index", GetKeyOidIndex: "AMB_BGP_NLPF_PEER_AFM_IX_INDEX"}];
  // path ID
  uint32     PathID           = 7 [(venice.pdsaFields) = {Field: "path_id", GetKeyOidIndex: "AMB_BGP_NLPF_PATH_ID_INDEX"}];
  // chosen as BGP best route or not
  bool       BestRoute        = 8 [(venice.pdsaFields) = {Field: "best"}];
  // AS path string
  bytes      ASPathStr        = 9 [(venice.pdsaFields) = {Field: "aspath_str"}];
  // originator ID
  bytes      PathOrigId       = 10 [(venice.pdsaFields) = {Field: "path_attr_orig_id"}];
  // next-hop address
  bytes      NextHopAddr      = 11 [(venice.pdsaFields) = {Field: "path_attr_next_hop"}];
}

// BGP NLRI prefix object
message BGPNLRIPrefix {
  BGPNLRIPrefixStatus Status = 1;
}

// BGP NLRI prefix request
message BGPNLRIPrefixRequest {
  // request
  BGPNLRIPrefixStatus Request = 1;
}

// BGP NLRI prefix get response
message BGPNLRIPrefixGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated BGPNLRIPrefix Response  = 2;
}
