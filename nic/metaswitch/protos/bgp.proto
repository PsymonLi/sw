//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for BGP
//
// NOTE: This is the netagent interface for BGP protocol configurations. This is
// a limited subset of configurations required for current deployments
//
//    This model supports the following BGP configuration level
//    hierarchy:
//
//      BGP
//        |
//        +-> [ global BGP configuration ]
//        +-> neighbor
//          +-> [ neighbor config ]
//          +-> AFI / SAFI [ per-AFI overrides ]";
//
//------------------------------------------------------------------------------

syntax = "proto3";
package pds;

import "pdsa.proto";
import "meta/meta.proto";
import "types.proto";
import "common.proto";

// The bgp service definition
service BGPSvc {
  rpc BGPGlobalSpecCreate (BGPRequest) returns (BGPResponse) {}
  rpc BGPGlobalSpecUpdate (BGPRequest) returns (BGPResponse) {}
  rpc BGPGlobalSpecDelete (BGPRequest) returns (BGPResponse) {}
  rpc BGPGlobalSpecGet (BGPRequest) returns (BGPGlobalSpecGetResponse) {}
  rpc BGPPeerSpecCreate (BGPPeerRequest) returns (BGPResponse) {}
  rpc BGPPeerSpecUpdate (BGPPeerRequest) returns (BGPResponse) {}
  rpc BGPPeerSpecDelete (BGPPeerRequest) returns (BGPResponse) {}
  rpc BGPPeerSpecGet (BGPPeerRequest) returns (BGPPeerGetResponse) {}
  rpc BGPPeerAfCreate (BGPPeerAfRequest) returns (BGPResponse) {}
  rpc BGPPeerAfUpdate (BGPPeerAfRequest) returns (BGPResponse) {}
  rpc BGPPeerAfDelete (BGPPeerAfRequest) returns (BGPResponse) {}
  rpc BGPPeerAfGet (BGPPeerAfRequest) returns (BGPPeerAfGetResponse) {}
  rpc BGPNLRIPrefixGet (BGPNLRIPrefixRequest) returns (BGPNLRIPrefixGetResponse) {}
}

// BGP address family identifier
enum BGPAfi {
  BGP_AFI_NONE  = 0;
  BGP_AFI_IPV4  = 1;
  BGP_AFI_IPV6  = 2;
  BGP_AFI_L2VPN = 25;
}

// BGP sub-address family identitfier
enum BGPSafi {
  BGP_SAFI_NONE         = 0;
  BGP_SAFI_UNICAST      = 1;
  BGP_SAFI_MULTICAST    = 2;
  BGP_SAFI_BOTH         = 3;
  BGP_SAFI_LABEL        = 4;
  BGP_SAFI_VPLS         = 65;
  BGP_SAFI_EVPN         = 70;
  BGP_SAFI_MPLS_BGP_VPN = 128;
  BGP_SAFI_PRIVATE      = 241;
}

// BGP Peer RR Client
enum BGPPeerRRClient {
  BGP_NON_CLIENT    = 0;
  BGP_CLIENT        = 1;
  BGP_MESHED_CLIENT = 2;
}


// Global configuration for BGP
message BGPGlobalSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_RM_OID_LEN",
      Mib:    "bgpRmEntTable"
      FillFn: "bgp_rm_ent_set_fill_func"
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_RM_OID_LEN",
      Mib:    "bgpRmEntTable",
      FillFn: "bgp_rm_ent_get_fill_func"
  };
  // unique key/identifier of BGP global config
  bytes   Id       = 1;
  // The local autonomous system number
  uint32  LocalASN = 2 [(venice.pdsaFields) = {Field: "local_as"}];
  // Router ID for this bgp instance
  fixed32 RouterId = 3 [(venice.pdsaFields) = {Field: "local_identifier"}];
}

// BGPGlobalSpec create and update request
message BGPRequest {
  // requests
  BGPGlobalSpec Request = 1;
}

// operational status of BGP, if any
message BGPStatus {
}

// BGPPeerSpec create and update request
message BGPPeerRequest {
  // requests
  repeated BGPPeerSpec Request = 1;
}

// BGPPeerAf create and update request
message BGPPeerAfRequest {
  // requests
  repeated BGPPeerAfSpec Request = 1;
}

// BGPGlobalSpec create and update response
message BGPResponse {
  types.ApiStatus ApiStatus = 1;
  BGPStatus       Response  = 2;
}

message BGPGlobal {
  BGPGlobalSpec Spec = 1;
}

// BGPGlobalSpec get response
message BGPGlobalSpecGetResponse {
  types.ApiStatus ApiStatus = 1;
  BGPGlobal       Response  = 2;
}

// BGP Peer Object
message BGPPeer {
  BGPPeerSpec   Spec    = 1;
  BGPPeerStatus Status  = 2;
}

// BGP Peer configurations
message BGPPeerSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_PER_OID_LEN",
      Mib:    "bgpPeerTable",
      FillFn: "bgp_peer_set_fill_func"
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PER_OID_LEN",
      Mib:    "bgpPeerTable",
      FillFn: "bgp_peer_get_fill_func"
  };
  // unique key/identifier of peer
  bytes           Id           = 1;
  // Whether BGP peer is enabled ? If peer is not enabled then
  // local router must not initiate connections to the neighbor
  // and must not respond to TCP connections attempts from
  // neighbor
  AdminSt         AdminEn      = 2 [(venice.pdsaFields) = {Field: "admin_status"}];
  // BGP Peer IP Address
  types.IPAddress PeerAddr     = 3 [(venice.pdsaFields) = {Field: "remote_addr"}];
  // BGP Local IP Address
  types.IPAddress LocalAddr    = 4 [(venice.pdsaFields) = {Field: "local_addr"}];
  // IfId
  uint32          IfId         = 5 [(venice.pdsaFields) = {Field: "local_addr_scope_id",  SetKeyOidIndex: "AMB_BGP_PER_SCOPE_ID_INDEX", GetKeyOidIndex: "AMB_BGP_PRST_SCOPE_ID_INDEX"}];
  // Remote 4-byte (32-bit) AS number
  uint32          RemoteASN    = 6 [(venice.pdsaFields) = {Field: "remote_as"}];
  // Send regular community attributes to neighbor
  AMBBool         SendComm     = 7 [(venice.pdsaFields) = {Field: "send_comm"}];
  // Send extended community attributes to neighbor
  AMBBool         SendExtComm  = 8 [(venice.pdsaFields) = {Field: "send_ext_comm"}];
  // Peer is a route reflector client
  BGPPeerRRClient RRClient     = 9 [(venice.pdsaFields) = {Field: "reflector_client"}];
  // BGP session connect-retry timer in seconds
  uint32          ConnectRetry = 10 [(venice.pdsaFields) = {Field: "connect_retry_interval"}];
  // BGP session holdtime timer in seconds
  uint32          HoldTime     = 11 [(venice.pdsaFields) = {Field: "hold_time_configd"}];
  // BGP session keepalive timer in seconds
  uint32          KeepAlive    = 12 [(venice.pdsaFields) = {Field: "keep_alive_configd"}];
  // MD5 Authentication
  bytes           Password     = 13 [(venice.pdsaFields) = {Field: "password", IgnoreIfEmpty: true}];
  
  // TODO: Get-Only fields follows. Will be moved to status table
  // BGP session Status
  uint32          Status       = 100 [(venice.pdsaFields) = {Field: "state"}];
  // BGP session Prev Status
  uint32          PrevStatus   = 101 [(venice.pdsaFields) = {Field: "last_state"}];
  // Last Error Received
  bytes           LastErrorRcvd = 102 [(venice.pdsaFields) = {Field: "last_error_rcvd"}];
  // Last Error Sent
  bytes           LastErrorSent = 103 [(venice.pdsaFields) = {Field: "last_error_sent"}];
}

message BGPPeerStatus {
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PRST_OID_LEN",
      Mib:    "bgpPeerStatusTable",
  };
  // unique key/identifier of peer
  bytes           Id           = 1;
  // Whether BGP peer is enabled ? If peer is not enabled then
  // local router must not initiate connections to the neighbor
  // and must not respond to TCP connections attempts from
  // neighbor
  AdminSt         AdminEn      = 2 [(venice.pdsaFields) = {Field: "admin_status"}];
  // BGP Peer IP Address
  types.IPAddress PeerAddr     = 3 [(venice.pdsaFields) = {Field: "remote_addr"}];
  // BGP Local IP Address
  types.IPAddress LocalAddr    = 4 [(venice.pdsaFields) = {Field: "local_addr"}];
  // IfId
  uint32          IfId         = 5 [(venice.pdsaFields) = {Field: "local_addr_scope_id",  SetKeyOidIndex: "AMB_BGP_PER_SCOPE_ID_INDEX", GetKeyOidIndex: "AMB_BGP_PRST_SCOPE_ID_INDEX"}];
  // Remote 4-byte (32-bit) AS number
  uint32          RemoteASN    = 6 [(venice.pdsaFields) = {Field: "remote_as"}];
  // Send regular community attributes to neighbor
  AMBBool         SendComm     = 7 [(venice.pdsaFields) = {Field: "send_comm"}];
  // Send extended community attributes to neighbor
  AMBBool         SendExtComm  = 8 [(venice.pdsaFields) = {Field: "send_ext_comm"}];
  // Peer is a route reflector client
  BGPPeerRRClient RRClient     = 9 [(venice.pdsaFields) = {Field: "reflector_client"}];
  // BGP session connect-retry timer in seconds
  uint32          ConnectRetry = 10 [(venice.pdsaFields) = {Field: "connect_retry_interval"}];
  // BGP session holdtime timer in seconds
  uint32          HoldTime     = 11 [(venice.pdsaFields) = {Field: "hold_time_configd"}];
  // BGP session keepalive timer in seconds
  uint32          KeepAlive    = 12 [(venice.pdsaFields) = {Field: "keep_alive_configd"}];
  // MD5 Authentication
  bytes           Password     = 13 [(venice.pdsaFields) = {Field: "password", IgnoreIfEmpty: true}];
  
  // TODO: Get-Only fields follows. Will be moved to status table
  // BGP session Status
  uint32          Status       = 100 [(venice.pdsaFields) = {Field: "state"}];
  // BGP session Prev Status
  uint32          PrevStatus   = 101 [(venice.pdsaFields) = {Field: "last_state"}];
  // Last Error Received
  bytes           LastErrorRcvd = 102 [(venice.pdsaFields) = {Field: "last_error_rcvd"}];
  // Last Error Sent
  bytes           LastErrorSent = 103 [(venice.pdsaFields) = {Field: "last_error_sent"}];
}

// BGPPeerSpec get response
message BGPPeerGetResponse {
  types.ApiStatus  ApiStatus = 1;
  repeated BGPPeer Response  = 2;
}

message BGPPeerAf {
  BGPPeerAfSpec   Spec   = 1;
  BGPPeerAfStatus Status = 2;
}

// BGPPeerAf get response
message BGPPeerAfGetResponse {
  types.ApiStatus     ApiStatus = 1;
  repeated BGPPeerAf  Response  = 2;
}

// BGP PeerAF configurations
message BGPPeerAfSpec {
  option (venice.pdsaSetGlobOpts) = {
      OidLen: "AMB_BGP_PAS_OID_LEN",
      Mib:    "bgpPeerAfiSafiTable",
      FillFn: "bgp_peer_af_set_fill_func"
  };
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PAS_OID_LEN",
      Mib:    "bgpPeerAfiSafiTable",
      FillFn: "bgp_peer_af_get_fill_func"
  };

  // unique key/identifier of peer AF config
  bytes           Id          = 1;
  // BGP Peer IP Address
  types.IPAddress PeerAddr    = 2 [(venice.pdsaFields) = {Field: "remote_addr"}];
  // BGP Local IP Address
  types.IPAddress LocalAddr   = 3 [(venice.pdsaFields) = {Field: "local_addr"}];
  // IfId
  uint32          IfId        = 4 [(venice.pdsaFields) = {Field: "local_addr_scope_id",  SetKeyOidIndex: "AMB_BGP_PAS_SCOPE_ID_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_SCOPE_ID_INDEX"}];
  // BGP Address family
  BGPAfi          Afi         = 5 [(venice.pdsaFields) = {Field: "afi",  SetKeyOidIndex: "AMB_BGP_PAS_AFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_AFI_INDEX"}];
  // BGP Sub-Address family
  BGPSafi         Safi        = 6 [(venice.pdsaFields) = {Field: "safi",  SetKeyOidIndex: "AMB_BGP_PAS_SAFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_SAFI_INDEX"}];
  // Disable AFI SAFI
  AMBBool         Disable     = 7 [(venice.pdsaFields) = {Field: "disable_afi_safi"}];
  // Enforce this router to set self as next-hop for advertised routes
  AMBBool         NHself      = 8 [(venice.pdsaFields) = {Field: "next_hop_self"}];
  // Originate a default route to this peer
  AMBBool         DefaultOrig = 9 [(venice.pdsaFields) = {Field: "originate_default"}];
}

message BGPPeerAfStatus {
  option (venice.pdsaGetGlobOpts) = {
      OidLen: "AMB_BGP_PAST_OID_LEN",
      Mib:    "bgpPeerAfiSafiStatusTable"
  };

  // unique key/identifier of peer AF config
  bytes           Id          = 1;
  // BGP Peer IP Address
  types.IPAddress PeerAddr    = 2 [(venice.pdsaFields) = {Field: "remote_addr"}];
  // BGP Local IP Address
  types.IPAddress LocalAddr   = 3 [(venice.pdsaFields) = {Field: "local_addr"}];
  // IfId
  uint32          IfId        = 4 [(venice.pdsaFields) = {Field: "local_addr_scope_id",  SetKeyOidIndex: "AMB_BGP_PAS_SCOPE_ID_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_SCOPE_ID_INDEX"}];
  // BGP Address family
  BGPAfi          Afi         = 5 [(venice.pdsaFields) = {Field: "afi",  SetKeyOidIndex: "AMB_BGP_PAS_AFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_AFI_INDEX"}];
  // BGP Sub-Address family
  BGPSafi         Safi        = 6 [(venice.pdsaFields) = {Field: "safi",  SetKeyOidIndex: "AMB_BGP_PAS_SAFI_INDEX", GetKeyOidIndex: "AMB_BGP_PAST_SAFI_INDEX"}];
  // Disable AFI SAFI
  AMBBool         Disable     = 7 [(venice.pdsaFields) = {Field: "disable_afi_safi"}];
  // Enforce this router to set self as next-hop for advertised routes
  AMBBool         NHself      = 8 [(venice.pdsaFields) = {Field: "next_hop_self"}];
  // Originate a default route to this peer
  AMBBool         DefaultOrig = 9 [(venice.pdsaFields) = {Field: "originate_default"}];
}

enum NLRISrc {
  NLRI_NONE = 0;
  NLRI_PEER = 1; // Learned from Peer
  NLRI_AFM  = 2; // Learned from AFM
  NLRI_SELF = 3; // created by itself

}

message BGPNLRIPrefixStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_BGP_NL_PF_OID_LEN",
    Mib:    "bgpNlriPrefixTable"
  };

  // BGP Address family
  BGPAfi     Afi                = 1 [(venice.pdsaFields) = {Field: "afi", GetKeyOidIndex: "AMB_BGP_NLPF_AFI_INDEX"}];
  // BGP Sub-Address family
  BGPSafi    Safi               = 2 [(venice.pdsaFields) = {Field: "safi", GetKeyOidIndex: "AMB_BGP_NLPF_SAFI_INDEX"}];
  // Prefix in NLRI
  bytes      Prefix             = 3 [(venice.pdsaFields) = {Field: "prfx", GetKeyOidIndex: "AMB_BGP_NLPF_PRFX_INDEX" GetKeyOidLenIndex: "AMB_BGP_NLPF_PRFX_LEN_INDEX"}];
  // Prefix Length
  uint32     PrefixLen          = 4 [(venice.pdsaFields) = {Field: "prefxlen", GetKeyOidIndex: "AMB_BGP_NLPF_PRFX_LEN_INDEX"}];
  // Route Source (learned from BGP Peer or AFM)
  NLRISrc    RouteSource        = 5 [(venice.pdsaFields) = {Field: "peer_or_afm", GetKeyOidIndex: "AMB_BGP_NLPF_PEER_OR_AFM_INDEX"}];
  // Route Source Index
  uint32     RouteSourceIndex   = 6 [(venice.pdsaFields) = {Field: "peer_afm_index", GetKeyOidIndex: "AMB_BGP_NLPF_PEER_AFM_IX_INDEX"}];
  // Path ID
  uint32     PathID             = 7 [(venice.pdsaFields) = {Field: "path_id", GetKeyOidIndex: "AMB_BGP_NLPF_PATH_ID_INDEX"}];
  // Chosen as BGP best route or not
  AMBBool    BestRoute          = 8 [(venice.pdsaFields) = {Field: "best"}];
  // AS Path String
  bytes      ASPathStr          = 9 [(venice.pdsaFields) = {Field: "aspath_str"}];
  // Originator ID
  bytes      PathOrigId         = 10 [(venice.pdsaFields) = {Field: "path_attr_orig_id"}];
  // Next-Hop Address
  bytes      NextHopAddr        = 11 [(venice.pdsaFields) = {Field: "path_attr_next_hop"}];
}

message BGPNLRIPrefix {
  BGPNLRIPrefixStatus Status = 1;
}

// BGPNLRIPrefix request
message BGPNLRIPrefixRequest {
  // requests
  repeated BGPNLRIPrefixStatus Request = 1;
}

// BGPPeerSpec get response
message BGPNLRIPrefixGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated BGPNLRIPrefix Response  = 2;
}
