//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved

syntax = "proto3";
package pds_ms;
import "pdsa.proto";
import "types.proto";


message EvpnBdSpec {
    option (venice.pdsaSetGlobOpts) = {
        OidLen: "AMB_EVPN_BD_OID_LEN",
        Mib:    "evpnBdTable"
    };

    uint32 EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", SetKeyOidIndex: "AMB_EVPN_BD_ENTITY_IX_INDEX"}];
    uint32 EviIndex     = 2 [(venice.pdsaFields) = {Field:"evi_index", SetKeyOidIndex: "AMB_EVPN_BD_EVI_INDEX_INDEX"}];
    uint32 VNI          = 3 [(venice.pdsaFields) = {Field:"vni"}];
}

message EvpnIfBindCfgSpec { 

    option (venice.pdsaSetGlobOpts) = {
        OidLen: "AMB_EVPN_IF_BIND_CFG_OID_LEN",
        Mib:    "evpnIfBindCfgTable"
    };

    uint32 EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", SetKeyOidIndex: "AMB_EVPN_IF_BIND_CFG_ENT_INDEX"}];
    uint32 IfIndex      = 2 [(venice.pdsaFields) = {Field:"if_index", SetKeyOidIndex: "AMB_EVPN_IF_BIND_CFG_IF_INDEX"}];
    uint32 EviIndex     = 3 [(venice.pdsaFields) = {Field:"evi_index"}];
}

message LimVrfSpec {
    option (venice.pdsaSetGlobOpts) = {
        OidLen: "AMB_LIM_VRF_OID_LEN",
        Mib:    "limVrfTable"
    };

    uint32 EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", SetKeyOidIndex: "AMB_LIM_VRF_ENT_IX_INDEX"}];
    string VrfName      = 2 [(venice.pdsaFields) = {Field:"vrf_name", SetKeyOidIndex: "AMB_LIM_VRF_NAME_INDEX"}];
    uint32 VrfNameLen   = 3 [(venice.pdsaFields) = {Field:"vrf_name_len", SetKeyOidIndex: "AMB_LIM_VRF_NAME_LEN_INDEX"}];
}

message LimGenIrbIfSpec {
    option (venice.pdsaSetGlobOpts) = {
        OidLen: "AMB_LIM_GEN_IRB_INTF_OID_LEN",
        Mib:    "limGenIrbInterfaceTable"
    };

    uint32 EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", SetKeyOidIndex: "AMB_LIM_GEN_IRB_IF_ENT_IX_INDEX"}];
    uint32 BDType       = 2 [(venice.pdsaFields) = {Field:"bd_type", SetKeyOidIndex: "AMB_LIM_GEN_IRB_IF_BD_TYPE"}];
    uint32 BDIndex      = 3 [(venice.pdsaFields) = {Field:"bd_index", SetKeyOidIndex: "AMB_LIM_GEN_IRB_IF_BD_INDEX"}];
    bytes  MACAddress   = 4 [(venice.pdsaFields) = {Field:"mac_address"}];
}

message LimInterfaceCfgSpec {
    option (venice.pdsaSetGlobOpts) = {
        OidLen: "AMB_LIM_INTERFACE_CFG_OID_LEN",
        Mib:    "limInterfaceCfgTable"
    };

    uint32 EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", SetKeyOidIndex: "AMB_LIM_IF_CFG_ENT_IX_INDEX"}];
    uint32 IfIndex      = 2 [(venice.pdsaFields) = {Field:"if_index", SetKeyOidIndex: "AMB_LIM_IF_CFG_IF_IX_INDEX"}];
    uint32 IfEnable     = 3 [(venice.pdsaFields) = {Field:"enable"}];
    uint32 IPv4Enabled  = 4 [(venice.pdsaFields) = {Field:"ipv4_enabled"}];
    uint32 IPv4Fwding   = 5 [(venice.pdsaFields) = {Field:"ipv4_forwarding"}];
    uint32 IPv6Enabled  = 6 [(venice.pdsaFields) = {Field:"ipv6_enabled"}];
    uint32 IPv6Fwding   = 7 [(venice.pdsaFields) = {Field:"ipv6_forwarding"}];
    uint32 FwdingMode   = 8 [(venice.pdsaFields) = {Field:"forwarding_mode"}];
    string VrfName      = 9 [(venice.pdsaFields) = {Field:"bind_vrf_name", IgnoreIfEmpty: true}];
}


enum LimIntfType {
  LIM_IF_TYPE_NONE     = 0;
  LIM_IF_TYPE_ETH      = 1;
  LIM_IF_TYPE_LIF      = 2;
  LIM_IF_TYPE_LOOPBACK = 3;
  LIM_IF_TYPE_IRB      = 4;
};

message LimInterfaceAddrSpec {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_LIM_L3_ADDRESS_OID_LEN",
    Mib:    "limL3InterfaceAddressTable"
    FillFn: "lim_intf_addr_fill_func"
  };

  LimIntfType     IfType    = 1; // Interface Type should be converted to MS interface type/subtype, cannot be autogen.
  uint32          IfId      = 2; // Interface ID should be converted to MS interface Index, cannot be Autogen. Filling if_index as part of FillFn
  types.IPAddress IPAddr    = 3 [(venice.pdsaFields) = {Field:"ipaddress", SetKeyOidAddrIndex: "AMB_LIM_L3_ADDR_IPADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_LIM_L3_ADDR_IPDDR_TYP_INDEX", AddrTypeFieldName: "ipaddr_type", AddrLenFieldName: "ipaddress_len"}];
  uint32          PrefixLen = 4 [(venice.pdsaFields) = {Field:"prefix_len"}];
}

// This spec should be used to create only LIF and Loopback interfaces.
// If at all there is a need to create other types of interfaces, another spec should be defined with relevent Mib
message LimInterfaceSpec {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_LIM_SOFTWIF_OID_LEN",
    Mib:    "limSoftwareInterfaceTable"
    FillFn: "lim_sw_intf_fill_func"
  };

  LimIntfType IfType = 1; // interface Type should be converted to MS interface type/subtype, cannot be autogen
  uint32      IfId   = 2 [(venice.pdsaFields) = {Field:"index", SetKeyOidIndex: "AMB_LIM_SOFTWIF_INDEX"}];
}

// spec to configure ext-comm ORF route map table
message BgpRouteMapSpec {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_BGP_MAP_OID_LEN",
    Mib:    "bgpRouteMapTable"
  };

  uint32 RmIndex        = 1 [(venice.pdsaFields) = {Field:"rm_index", SetKeyOidIndex: "AMB_BGP_MAP_RM_INDEX_INDEX"}];
  uint32 Index          = 2 [(venice.pdsaFields) = {Field:"index", SetKeyOidIndex: "AMB_BGP_MAP_INDEX_INDEX"}];
  uint32 Number         = 3 [(venice.pdsaFields) = {Field:"number", SetKeyOidIndex: "AMB_BGP_MAP_NUMBER_INDEX"}];
  uint32 Afi            = 4 [(venice.pdsaFields) = {Field:"ma_afi"}];
  uint32 AfiDefined     = 5 [(venice.pdsaFields) = {Field:"ma_afi_def"}];
  uint32 Safi           = 6 [(venice.pdsaFields) = {Field:"ma_safi"}];
  uint32 SafiDefined    = 7 [(venice.pdsaFields) = {Field:"ma_safi_def"}];
  bytes  MatchExtComm   = 8 [(venice.pdsaFields) = {Field:"ma_ext_comm_exp"}];
  uint32 OrfAssociation = 9 [(venice.pdsaFields) = {Field:"orf_assoc"}];
}
