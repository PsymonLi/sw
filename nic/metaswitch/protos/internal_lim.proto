//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
//
// protobuf specification for lim
//
//------------------------------------------------------------------------------

syntax = "proto3";
package pds_ms;

import "gogo.proto";
import "pdsa.proto";
import "meta/meta.proto";
import "types.proto";

// lim service definition
service LimSvc {
  rpc LimIfStatusGet (LimIfStatusGetRequest) returns (LimIfStatusGetResponse) {}
  rpc LimIfAddrTableGet (LimIfAddrTableGetRequest) returns (LimIfAddrTableGetResponse) {}
  rpc LimVrfGet (LimVrfGetRequest) returns (LimVrfGetResponse) {}
}

enum LimIfOperStatus {
  OPER_NONE = 0;
  OPER_UP = 1;
  OPER_DOWN = 2;
  OPER_TESTING = 3;
  OPER_UNKNOWN = 4;
  OPER_DORMANT = 5;
  OPER_NOT_PRESENT = 6;
  OPER_LOWER_LAYER_DN = 7;
}

enum LimIfType {
  IFTYP_NONE = 0;
  IFTYP_OTHER = 1;
  IFTYP_ETHERNET_CSMACD = 6;
  IFTYP_SOFTWARE_LOOPBACK = 24;
  IFTYP_PROP_VIRTUAL = 53;
  IFTYP_TUNNEL = 131;
  IFTYP_L2VLAN = 135;
  IFTYP_L3IPVLAN = 136;
  IFTYP_IP_FORWARD = 142;
  IFTYP_MPLS_TUNNEL = 150;
  IFTYP_8023AD_LAG = 161;
  IFTYP_MPLS = 166;
  IFTYP_IF_PW_TYPE = 246;
  IFTYP_HQOS_NODE = 4096;
  IFTYP_FLOW = 4097;
}

enum LimIfLoopbackMode {
  LOOPBACK_NONE = 0;
  MAC_LOOPBACK = 1;
}

enum LimOperReason {
  OPR_RSN_EMPTY = 0;
  OPR_RSN_NONE = 1;
  OPR_RSN_ENT_NOT_UP = 2;
  OPR_RSN_ADMIN_CFG = 3;
  OPR_RSN_PROG = 4;
  OPR_RSN_HQOS_SET = 5;
  OPR_RSN_HQOS_LVL = 6;
  OPR_RSN_HQOS_NO_SRC_IF = 7;
  OPR_RSN_HQOS_OVRLP_CFG = 8;
  OPR_RSN_HQOS_INCMPLT_TR = 9;
  OPR_RSN_HQOS_DFLT_BRNCH = 10;
  OPR_RSN_Q_NO_IF = 11;
  OPR_RSN_HQOS_NODE_NO_IF = 12;
  OPR_RSN_RSRC_FAIL = 13;
  OPR_RSN_HQOS_PT_MSMTCH = 14;
  OPR_RSN_Q_WRONG_IF = 15;
  OPR_RSN_HQOS_WRONG_SRC = 16;
  OPR_RSN_SUBIF_NO_MATCH = 17;
  OPR_RSN_SUBIF_M_NO_IF = 18;
  OPR_RSN_SUBIF_NO_PARENT = 19;
  OPR_RSN_LOCAL_IF_ERROR = 20;
  OPR_RSN_SUBIF_R_NO_IF = 21;
  OPR_RSN_SLOT_DOWN = 22;
}

message LimIfStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_LIM_IF_STATUS_OID_LEN",
    Mib:    "limInterfaceStatusTable"
  };

  uint32            EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", GetKeyOidIndex: "AMB_LIM_IF_STATUS_ENT_IX_INDEX"}];
  uint32            IfIndex      = 2 [(venice.pdsaFields) = {Field:"if_index", GetKeyOidIndex: "AMB_LIM_IF_STATUS_IF_IX_INDEX"}];
  // Operational status of the interface.
  LimIfOperStatus   OperStatus   = 3 [(venice.pdsaFields) = {Field: "oper_status"}];
  // The assigned name of the interface.
  string            Name         = 4 [(venice.pdsaFields) = {Field: "name"}];
  // The assigned description of the interface.
  string            Description  = 5 [(venice.pdsaFields) = {Field: "description"}];
  // The type of interface.
  LimIfType         Type         = 6 [(venice.pdsaFields) = {Field: "type"}];
  // The MAC address of the interface.
  string            MacAddr      = 7 [(venice.pdsaFields) = {Field: "mac_address"}];
  // The MTU of the interface
  uint32            Mtu          = 8 [(venice.pdsaFields) = {Field: "mtu"}];
  // The loopback mode used on this interface.
  LimIfLoopbackMode LoopBackMode = 9 [(venice.pdsaFields) = {Field: "loopback_mode"}];
  // Wrapping count of the number of link flaps detected.
  uint32            FlapCount    = 10 [(venice.pdsaFields) = {Field: "flap_count"}];
  // The reason for the interface to be in its current oper status.
  LimOperReason     OperReason   = 11 [(venice.pdsaFields) = {Field: "oper_reason"}];
}

message LimIfStatusKey {
  uint32 EntityIndex  = 1;
  uint32 IfIndex      = 2;
}

message LimIf {
  LimIfStatus Status = 1;
}

message LimIfStatusGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated LimIf  Response  = 2;
}

// Lim Interface key handle
message LimIfStatusKeyHandle {
  option (venice.pdsaGetGlobOpts) = {
    OidLen:  "AMB_LIM_IF_STATUS_OID_LEN",
    Mib:     "limInterfaceStatusTable"
    SpecMsg: "LimIfStatus"
  };
  LimIfStatusKey Key = 1;
}

// Lim Interface status get request
message LimIfStatusGetRequest {
  repeated LimIfStatusKeyHandle Request = 1;
}

enum LimOperStatus {
  OPER_STATUS_NONE        = 0;
  OPER_STATUS_UP          = 1;
  OPER_STATUS_DOWN        = 2;
  OPER_STATUS_GOING_UP    = 3;
  OPER_STATUS_GOING_DOWN  = 4;
  OPER_STATUS_FAILED      = 5;
  OPER_STATUS_FAILED_PERM = 10;
  OPER_STATUS_FAILING     = 11;
}

// LimIfAddrTableStatus table
message LimIfAddrTableStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_LIM_L3_ADDRESS_OID_LEN",
    Mib:    "limL3InterfaceAddressTable"
  };
  // Identifies a DC-LIM entity
  uint32              EntityIndex  = 1 [(venice.pdsaFields) = {Field:"entity_index", GetKeyOidIndex: "AMB_LIM_L3_ADDR_ENT_IX_INDEX"}];
  // The control plane interface index of the interface having an address assigned.
  uint32              IfIndex      = 2 [(venice.pdsaFields) = {Field:"if_index", GetKeyOidIndex: "AMB_LIM_L3_ADDR_IF_IX_INDEX"}];
  // The IP address to be assigned.
  types.IPAddress     IPAddr       = 3 [(venice.pdsaFields) = {Field:"ipaddress", GetKeyOidAddrIndex: "AMB_LIM_L3_ADDR_IPADDR_INDEX", GetKeyOidAddrTypeIndex: "AMB_LIM_L3_ADDR_IPDDR_TYP_INDEX", AddrTypeFieldName: "ipaddr_type", AddrLenFieldName: "ipaddress_len"}];
  // Operational status of the address.
  LimOperStatus       OperStatus   = 4 [(venice.pdsaFields) = {Field:"oper_status"}];
}

message LimIfAddrTableKey {
  uint32          EntityIndex = 1;
  uint32          IfIndex     = 2;
  types.IPAddress IPAddr      = 3;
}

message LimIfAddrTable {
  LimIfAddrTableStatus Status = 1;
}

message LimIfAddrTableGetResponse {
  types.ApiStatus         ApiStatus = 1;
  repeated LimIfAddrTable Response  = 2;
}

// Lim Interface key handle
message LimIfAddrTableKeyHandle {
  option (venice.pdsaGetGlobOpts) = {
    OidLen:  "AMB_LIM_IF_STATUS_OID_LEN",
    Mib:     "limInterfaceStatusTable"
    SpecMsg: "LimIfAddrTableStatus"
  };
  LimIfAddrTableKey Key = 1;
}

// Lim Interface status get request
message LimIfAddrTableGetRequest {
  repeated LimIfAddrTableKeyHandle Request = 1;
}

// LIM Vrf table
message LimVrfStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_LIM_VRF_OID_LEN",
    Mib:    "limVrfTable"
  };

  // Identifies a DC-LIM entity
  uint32        EntityIndex   = 1 [(venice.pdsaFields) = {Field:"entity_index", GetKeyOidIndex: "AMB_LIM_VRF_ENT_IX_INDEX"}];
  // The VRF name
  string        VrfName       = 2 [(venice.pdsaFields) = {Field:"vrf_name", GetKeyOidIndex: "AMB_LIM_VRF_NAME_INDEX", GetKeyOidLenIndex: "AMB_LIM_VRF_NAME_LEN_INDEX"}];
  // A description of the VRF
  string        Desc          = 3 [(venice.pdsaFields) = {Field: "vrf_desc"}];
  // Operational status of the VRF
  LimOperStatus OperStatus    = 4 [(venice.pdsaFields) = {Field: "oper_status"}];
  // The number of interfaces enslaved to this VRF
  uint32        NumInterfaces = 5 [(venice.pdsaFields) = {Field: "num_interfaces"}];
  // The reason for the VRF to be in its current oper status
  LimOperReason OperReason    = 6 [(venice.pdsaFields) = {Field: "oper_reason"}];
}

// LIM vrf key object
message LimVrfStatusKey {
  uint32 EntityIndex  = 1;
  string VrfName      = 2;
}

//LIM vrf object
message LimVrf {
  LimVrfStatus Status = 1;
}

// LIM vrf get response
message LimVrfGetResponse {
  types.ApiStatus ApiStatus = 1;
  repeated LimVrf Response  = 2;
}

// Lim vrf key handle
message LimVrfKeyHandle {
  option (venice.pdsaGetGlobOpts) = {
    OidLen:  "AMB_LIM_VRF_OID_LEN",
    Mib:     "limVrfTable"
    SpecMsg: "LimVrfStatus"
  };
  LimVrfStatusKey Key = 1;
}

// Lim vrf get request
message LimVrfGetRequest {
  repeated LimVrfKeyHandle Request = 1;
}
