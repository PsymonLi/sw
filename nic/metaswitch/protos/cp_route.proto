//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
// protobuf specification for Control Plane Route Table 
//------------------------------------------------------------------------------
syntax = "proto3";
package pds;

import "pdsa.proto";
import "meta/meta.proto";
import "types.proto";
import "common.proto";

// Control Plane Route service definition
service CPRouteSvc
{
  rpc CPStaticRouteSpecCreate (CPStaticRouteRequest) returns (CPStaticRouteResponse) {}
  rpc CPStaticRouteSpecUpdate(CPStaticRouteRequest) returns (CPStaticRouteResponse) {}
  rpc CPStaticRouteSpecDelete (CPStaticRouteRequest) returns (CPStaticRouteResponse) {}
  rpc CPRouteSpecGet  (CPRouteSpecRequest) returns (CPRouteSpecResponse) {}
}

enum RouteType {
  ROUTE_TYPE_NONE   = 0;
  ROUTE_TYPE_OTHER  = 1;
  ROUTE_TYPE_REJECT = 2;
  ROUTE_TYPE_LOCAL  = 3;
  ROUTE_TYPE_REMOTE = 4;
}

enum RouteProto {
 ROUTE_PROTO_NONE   = 0;
 ROUTE_PROTO_BGP    = 14;
}

// Control Plane Route Spec
message CPRouteSpec {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_RIB_OID_LEN",
    Mib:    "rtmRibTable"
  };

  uint32          RouteTableId  = 1 [(venice.pdsaFields) = {Field:"fte_index", GetKeyOidIndex: "AMB_QCR_RIB_FTE_INDEX_INDEX"}];
  types.IPAddress DestAddr      = 2 [(venice.pdsaFields) = {Field:"dest", AddrTypeFieldName: "dest_addr_type", AddrLenFieldName:"dest_addr_len", SetKeyOidAddrIndex: "AMB_QCR_RIB_DEST_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_RIB_DEST_TYPE_INDEX"}];
  uint32          DestPrefixLen = 3 [(venice.pdsaFields) = {Field:"dest_len", GetKeyOidIndex: "AMB_QCR_RIB_DEST_LEN_INDEX"}];
  types.IPAddress NHAddr        = 4 [(venice.pdsaFields) = {Field:"next_hop", SetKeyOidAddrIndex: "AMB_QCR_RIB_NEXT_HOP_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_RIB_NEXT_HOP_TYPE_IX"}];
  uint32          IfIndex       = 5 [(venice.pdsaFields) = {Field:"if_index", GetKeyOidIndex: "AMB_QCR_RIB_IF_INDEX_INDEX"}];
  RouteType       Type          = 6 [(venice.pdsaFields) = {Field:"type"}];
  RouteProto      proto         = 7 [(venice.pdsaFields) = {Field:"proto", GetKeyOidIndex: "AMB_QCR_RIB_PROTO_INDEX"}];
  uint32          RpmIndex      = 8 [(venice.pdsaFields) = {Field:"rpm_index", GetKeyOidIndex: "AMB_QCR_RIB_RPM_INDEX_INDEX"}];
}

message CPRouteSpecRequest {
  // requests
  repeated CPRouteSpec Request = 1;
}

message CPRouteResponse {
  CPRouteSpec Spec = 1;
}
// EVPN MAC IP get response
message CPRouteSpecResponse {
  types.ApiStatus          ApiStatus = 1;
  repeated CPRouteResponse Response  = 2;
}

message CPStaticRouteSpec {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_QCR_STRT_OID_LEN",
    Mib:    "rtmStaticRtTable"
    FillFn: "rtm_strt_fill_func"
  };
    
  // virtual private cloud this route belongs to 
  bytes           RouteTableId = 1;
  // Destination Address 
  types.IPAddress DestAddr     = 2 [(venice.pdsaFields) = {Field: "dest_addr", IsZeroIPValid: True, SetKeyOidAddrIndex: "AMB_QCR_STRT_DEST_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_STRT_DEST_ADDR_TYPE_IX"}];
  // Destination Address Prefix Length
  uint32          PrefixLen    = 3 [(venice.pdsaFields) = {Field: "dest_len", SetKeyOidIndex: "AMB_QCR_STRT_DEST_LEN_INDEX"}];
  // NextHop Address
  types.IPAddress NextHopAddr  = 4 [(venice.pdsaFields) = {Field: "next_hop", IsZeroIPValid: True, SetKeyOidAddrIndex: "AMB_QCR_STRT_NEXT_HOP_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_STRT_NEXT_HOP_TYPE_IX"}];
  // Admin Status
  AdminSt         AdminStatus  = 5 [(venice.pdsaFields) = {Field: "admin_stat"}];
  // Override Admin Distance
  AMBBool         Override     = 6 [(venice.pdsaFields) = {Field: "override"}];
  // Admin Distance
  uint32          AdminDist    = 7 [(venice.pdsaFields) = {Field: "admin_dist"}];

  // Internal only
  bytes           InterfaceId  = 1000; // Outgoing Interface UUID needed on Pegasus
  uint32          IfIndex      = 1001 [(venice.pdsaFields) = {Field: "if_index", SetKeyOidIndex: "AMB_QCR_STRT_IF_INDEX_INDEX"}];
}

// CRUD request message
message CPStaticRouteRequest {
  repeated CPStaticRouteSpec request = 1;
}

// response message
message CPStaticRouteResponse {
  types.ApiStatus       ApiStatus = 1;
}
