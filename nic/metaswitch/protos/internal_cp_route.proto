//------------------------------------------------------------------------------
// {C} Copyright 2019 Pensando Systems Inc. All rights reserved
// protobuf specification for Control Plane Route Table 
//------------------------------------------------------------------------------
syntax = "proto3";
package pds_ms;

import "pdsa.proto";
import "meta/meta.proto";
import "types.proto";

// control plane route service definition
service CPRouteSvc
{
  rpc CPStaticRouteCreate (CPStaticRouteRequest) returns (CPStaticRouteResponse) {}
  rpc CPStaticRouteUpdate(CPStaticRouteRequest) returns (CPStaticRouteResponse) {}
  rpc CPStaticRouteDelete (CPStaticRouteDeleteRequest) returns (CPStaticRouteDeleteResponse) {}
  rpc CPStaticRouteGet (CPStaticRouteGetRequest) returns (CPStaticRouteGetResponse) {}
  rpc CPRouteGet (CPRouteGetRequest) returns (CPRouteGetResponse) {}
  rpc CPRouteRedistGet (CPRouteRedistGetRequest) returns (CPRouteRedistGetResponse) {}
}

// control plane route table 
message CPRouteStatus {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_QCR_RIB_OID_LEN",
    Mib:    "rtmRibTable"
  };
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_RIB_OID_LEN",
    Mib:    "rtmRibTable"
  };

  // route table id this route belongs to
  uint32          RouteTableId  = 1 [(venice.pdsaFields) = {Field:"fte_index", SetKeyOidIndex: "AMB_QCR_RIB_FTE_INDEX_INDEX", GetKeyOidIndex: "AMB_QCR_RIB_FTE_INDEX_INDEX"}];
  // destination address
  types.IPAddress DestAddr      = 2 [(venice.pdsaFields) = {Field:"dest", AddrTypeFieldName: "dest_addr_type", AddrLenFieldName:"dest_addr_len", SetKeyOidAddrIndex: "AMB_QCR_RIB_DEST_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_RIB_DEST_TYPE_INDEX", GetKeyOidAddrIndex: "AMB_QCR_RIB_DEST_INDEX", GetKeyOidAddrTypeIndex: "AMB_QCR_RIB_DEST_TYPE_INDEX"}];
  // destination address prefix
  uint32          DestPrefixLen = 3 [(venice.pdsaFields) = {Field:"dest_len", SetKeyOidIndex: "AMB_QCR_RIB_DEST_LEN_INDEX", GetKeyOidIndex: "AMB_QCR_RIB_DEST_LEN_INDEX"}];
  // next-hop address
  types.IPAddress NHAddr        = 4 [(venice.pdsaFields) = {Field:"next_hop", SetKeyOidAddrIndex: "AMB_QCR_RIB_NEXT_HOP_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_RIB_NEXT_HOP_TYPE_IX", GetKeyOidAddrIndex: "AMB_QCR_RIB_NEXT_HOP_INDEX", GetKeyOidAddrTypeIndex: "AMB_QCR_RIB_NEXT_HOP_TYPE_IX"}];
  // interface index, if the next-hop is an interface
  uint32          IfIndex       = 5 [(venice.pdsaFields) = {Field:"if_index", SetKeyOidIndex: "AMB_QCR_RIB_IF_INDEX_INDEX", GetKeyOidIndex: "AMB_QCR_RIB_IF_INDEX_INDEX"}];
  // type of route
  types.RouteType       Type          = 6 [(venice.pdsaFields) = {Field:"type"}];
  // protocol via which the route is learned
  types.RouteProtocol   Proto         = 7 [(venice.pdsaFields) = {Field:"proto", SetKeyOidIndex: "AMB_QCR_RIB_PROTO_INDEX", GetKeyOidIndex: "AMB_QCR_RIB_PROTO_INDEX"}];
  // The number of seconds since this route was last updated or otherwise determined to be correct.
  int32           Age           = 8 [(venice.pdsaFields) = {Field:"age"}];
  // The primary routing metric for this route
  int32           Metric1       = 9 [(venice.pdsaFields) = {Field:"metric1"}];
  // Is this route programmed either to a forwarding table, or to a partner that queries route information
  bool            FibRoute      = 10 [(venice.pdsaFields) = {Field:"fib_route"}];
  // Indicates whether the route destination is directly connected
  bool            Connected     = 11 [(venice.pdsaFields) = {Field:"connected"}];
  // whether DC-RTM considers that the next-hop address for this route is a loose next hop.
  bool            LooseNextHop  = 12 [(venice.pdsaFields) = {Field:"loose_next_hop"}];
  // Administrative distance for this route
  int32           AdminDistance = 13 [(venice.pdsaFields) = {Field:"admin_distance"}];
}

message CPRouteKey {
  // route table id this route belongs to
  uint32          RouteTableId  = 1;
  // destination address
  types.IPAddress DestAddr      = 2;
  // destination address prefix
  uint32          DestPrefixLen = 3;
  // next-hop address
  types.IPAddress NHAddr        = 4;
  // interface index, if the next-hop is an interface
  uint32          IfIndex       = 5;
  // protocol via which the route is learned
  types.RouteProtocol   Proto         = 6;
}

message CPRouteKeyHandle {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_RIB_OID_LEN",
    Mib:    "rtmRibTable"
    SpecMsg: "CPRouteStatus"
  };
    CPRouteKey Key = 1;
}

// control plane route table get request
message CPRouteGetRequest {
  repeated CPRouteKeyHandle Request = 1;
}

message CPRoute {
  CPRouteStatus Status = 1;
}

message CPRouteGetResponse {
  types.ApiStatus  ApiStatus = 1;
  repeated CPRoute Response  = 2;
}

// control plane static route configuration
message CPStaticRouteSpec {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_QCR_STRT_OID_LEN",
    Mib:    "rtmStaticRtTable"
    FillFn: "rtm_strt_set_fill_func"
  };
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_STRT_OID_LEN",
    Mib:    "rtmStaticRtTable"
    FillFn: "rtm_strt_get_fill_func"
  };
    
  // route table id this route belongs to
  bytes            RouteTableId = 1;
  // destination address 
  types.IPAddress  DestAddr     = 2 [(venice.pdsaFields) = {Field: "dest_addr", IsZeroIPValid: True, SetKeyOidAddrIndex: "AMB_QCR_STRT_DEST_ADDR_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_STRT_DEST_ADDR_TYPE_IX", GetKeyOidAddrIndex: "AMB_QCR_STRT_DEST_ADDR_INDEX", GetKeyOidAddrTypeIndex: "AMB_QCR_STRT_DEST_ADDR_TYPE_IX"}];
  // destination address prefix length
  uint32           PrefixLen    = 3 [(venice.pdsaFields) = {Field: "dest_len", SetKeyOidIndex: "AMB_QCR_STRT_DEST_LEN_INDEX", GetKeyOidIndex: "AMB_QCR_STRT_DEST_LEN_INDEX"}];
  // next-hop address
  types.IPAddress  NextHopAddr  = 4 [(venice.pdsaFields) = {Field: "next_hop", IsZeroIPValid: True, SetKeyOidAddrIndex: "AMB_QCR_STRT_NEXT_HOP_INDEX", SetKeyOidAddrTypeIndex: "AMB_QCR_STRT_NEXT_HOP_TYPE_IX", GetKeyOidAddrIndex: "AMB_QCR_STRT_NEXT_HOP_INDEX", GetKeyOidAddrTypeIndex: "AMB_QCR_STRT_NEXT_HOP_TYPE_IX"}];
  // route is enabled or not
  types.AdminState State        = 5 [(venice.pdsaFields) = {Field: "admin_stat"}];
  // override admin distance
  bool             Override     = 6 [(venice.pdsaFields) = {Field: "override"}];
  // admin distance
  uint32           AdminDist    = 7 [(venice.pdsaFields) = {Field: "admin_dist"}];
  // optional interface ID, if this route is configured on RR
  bytes            InterfaceId  = 8;

  // internal only
  uint32 IfIndex = 1000 [(venice.pdsaFields) = {Field: "if_index", SetKeyOidIndex: "AMB_QCR_STRT_IF_INDEX_INDEX", GetKeyOidIndex: "AMB_QCR_STRT_IF_INDEX_INDEX", IsInternalField: true}];
}

// control plane static route create and update request message
message CPStaticRouteRequest {
  repeated CPStaticRouteSpec Request = 1;
}

// status of control plane static route, if any 
message CPStaticRouteStatus {
}

// control plane static route object
message CPStaticRoute {
    CPStaticRouteSpec   Spec   = 1;
    CPStaticRouteStatus Status = 2;
}

// response messages
message CPStaticRouteResponse {
  types.ApiStatus ApiStatus = 1;
}

// control plane static route key parameters
message CPStaticRouteKey {
  // destination address 
  types.IPAddress DestAddr    = 1;
  // destination address prefix length
  uint32          PrefixLen   = 2;
  // next-hop address
  types.IPAddress NextHopAddr = 3;
}

// control plane static route key handle
message CPStaticRouteKeyHandle {
  option (venice.pdsaSetGlobOpts) = {
    OidLen: "AMB_QCR_STRT_OID_LEN",
    Mib:    "rtmStaticRtTable"
    FillFn: "rtm_strt_set_fill_func_keyhandle"
    SpecMsg: "CPStaticRouteSpec"
  };
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_STRT_OID_LEN",
    Mib:    "rtmStaticRtTable"
    FillFn: "rtm_strt_get_fill_func_keyhandle"
  };
  //unique identifier or key parameters
  oneof id_or_key {
    bytes            Id  = 1;
    CPStaticRouteKey Key = 2;
  }
}
// control plane route delete request
message CPStaticRouteDeleteRequest {
  repeated CPStaticRouteKeyHandle Request = 1;
}

// control plane route delete response
message CPStaticRouteDeleteResponse {
  types.ApiStatus ApiStatus = 1;
}

// control plane route get request
message CPStaticRouteGetRequest {
    repeated CPStaticRouteKeyHandle Request = 1;
}

// control plane route get response
message CPStaticRouteGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated CPStaticRoute Response  = 2;
}

// control plane route table
message CPRouteRedistStatus {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_RDS_OID_LEN",
    Mib:    "rtmRedistTable"
  };

  // The HAF entity index identifying the instance of DC-RTM
  uint32          FteIndex       = 1 [(venice.pdsaFields) = {Field:"fte_index", GetKeyOidIndex: "AMB_QCR_RDS_FTE_INDEX_INDEX"}];
  // The index of this DC-RTM redistribution table entry
  uint32          EntryId        = 2 [(venice.pdsaFields) = {Field:"entry_id", GetKeyOidIndex: "AMB_QCR_RDS_ENTRY_ID_INDEX"}];

  // type of route
  uint32          RuleUsageCount = 3 [(venice.pdsaFields) = {Field:"usage_count"}];
  // Destination IP address filter
  types.IPAddress AddrFilter     = 4 [(venice.pdsaFields) = {Field:"addr_filter", AddrTypeFieldName: "addr_filter_type", AddrLenFieldName:"addr_filter_length"}];
}

message CPRouteRedistKey {
  // The HAF entity index identifying the instance of DC-RTM
  uint32 FteIndex = 1;
  // The index of this DC-RTM redistribution table entry
  uint32 EntryId  = 2;
}

message CPRouteRedistKeyHandle {
  option (venice.pdsaGetGlobOpts) = {
    OidLen: "AMB_QCR_RIB_OID_LEN",
    Mib:    "rtmRedistTable"
    SpecMsg: "CPRouteRedistStatus"
  };
  CPRouteRedistKey Key = 1;
}

// control plane route table get request
message CPRouteRedistGetRequest {
  repeated CPRouteRedistKeyHandle Request = 1;
}

message CPRouteRedist {
  CPRouteRedistStatus Status = 1;
}

message CPRouteRedistGetResponse {
  types.ApiStatus        ApiStatus = 1;
  repeated CPRouteRedist Response  = 2;
}
