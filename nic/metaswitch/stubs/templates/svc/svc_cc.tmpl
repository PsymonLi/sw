// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: {{.Name}}
 */
{{$cam := getMetaswitchMibTablesInfo}}
{{$pkgName := .Package}}
{{$ExtPkgName := "pds"}}
{{$pkg := (joinFields $pkgName "." ".")}}
{{$fileName := .GetName}}
#include "nic/metaswitch/stubs/mgmt/pds_ms_ctm.hpp"
#include "nic/metaswitch/stubs/mgmt/gen/svc/{{TrimSuffix $fileName ".proto"}}_gen.hpp"
#include "nic/metaswitch/stubs/mgmt/gen/mgmt/pds_ms_{{TrimSuffix $fileName ".proto"}}_utils_gen.hpp"
#include "nic/metaswitch/stubs/mgmt/pds_ms_common.hpp"
#include "nic/metaswitch/stubs/mgmt/pds_ms_mgmt_utils.hpp"
#include "nic/metaswitch/stubs/mgmt/pds_ms_mgmt_state.hpp"

{{$file := .}}
{{range .Services}}
{{$svc := .}}
{{$svcname := .Name}}
{{range .Methods}}
{{$rpc := .Name}}
{{$requestTypeName := .RequestType.Name}}
{{$responseTypeName := .ResponseType.Name}}
{{$respMsg := .ResponseType}}
{{$respMsgName := .ResponseType.Name}}
{{if not (HasPrefix $fileName "internal_") }}
  {{$ExtPkgName = $pkgName}}
{{end}}


  {{if hasExtension "venice.pdsaSetGlobOpts" .RequestType }}
    {{$param := (getPdsaSetGlobalOpts .RequestType $cam)}}
    {{if not (eq $param.ActionFn "")}}
Status
{{$svcname}}Impl::{{$rpc}}(ServerContext *context,
                              const {{$ExtPkgName}}::{{.RequestType.Name}} *req,
                              {{$ExtPkgName}}::{{.ResponseType.Name}} *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    types::ApiStatus ret = types::API_STATUS_OK;
    PDS_TRACE_INFO("Received gRPC {{.RequestType.Name}}");
    // lock to allow only one grpc thread processing at a time
    std::lock_guard<std::mutex> lck(pds_ms::mgmt_state_t::grpc_lock());
    try {
    ret = {{$pkgName}}::{{$param.ActionFn}}(req, resp);
    } catch (const pds_ms::Error& e) {
        PDS_TRACE_ERR("gRPC {{.RequestType.Name}} Action Fn aborted %s", e.what());
        resp->set_apistatus(pds_ms_sdk_ret_to_api_status(e.rc()));
        return Status::OK;
    }
    resp->set_apistatus(ret);
    if (ret != types::API_STATUS_OK) {
        PDS_TRACE_ERR ("Failed to process gRPC {{.RequestType.Name}}: %s", pds_ms_api_ret_str(ret));
    } else {
        PDS_TRACE_DEBUG ("Processed gRPC {{.RequestType.Name}} successfully");
    }
    return Status::OK;
    {{end}}
  {{else}}
Status
{{$svcname}}Impl::{{$rpc}}(ServerContext *context,
                              const {{$ExtPkgName}}::{{.RequestType.Name}} *req,
                              {{$ExtPkgName}}::{{.ResponseType.Name}} *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    {{$pkgName}}::{{.ResponseType.Name}} proto_resp;
    types::ApiStatus ret = types::API_STATUS_OK;
    {{if (HasSuffix $rpc "Update")}}
    PDS_TRACE_INFO("Received gRPC {{.RequestType.Name}} Update");
    {{else}}
    PDS_TRACE_INFO("Received gRPC {{.RequestType.Name}}");
    {{end}}
    // lock to allow only one grpc thread processing at a time
    std::lock_guard<std::mutex> lck(pds_ms::mgmt_state_t::grpc_lock());
    try {
    // Guard to release all pending UUIDs in case of any failures
    pds_ms::mgmt_uuid_guard_t uuid_guard;
    {{if or (HasSuffix $rpc "Delete") (HasSuffix $rpc "Create") (HasSuffix $rpc "Update")}}
    uint correlator = PDS_MS_CTM_GRPC_CORRELATOR;
    PDS_MS_START_TXN(correlator);
      {{$fields := .RequestType.Fields}}
      {{range $fields}}
        {{$field := .}}
        {{if or (eq "request" .GetName) (eq "Request" .GetName)}}
          {{if isRepeatedField .}}
    for (int i = 0; i < req->request_size(); i ++) {
        auto req_proto_spec = req->request(i);
          {{else}}
        auto req_proto_spec = req->request();
          {{end}}
          {{if TypeIsMessage .}}
            {{$reqMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
            {{if hasExtension "venice.pdsaSetGlobOpts" $reqMsg}}
              {{$param := (getPdsaSetGlobalOpts $reqMsg $cam)}}
              {{$struct := $param.Struct}}
              {{$specMsgName := $param.SpecMsg}}
              {{if (eq $specMsgName "")}}
                {{$specMsgName = (TrimPrefix .GetTypeName $pkg)}}
              {{end}}
              {{$updForDel := $param.UpdateForDelete}}
              {{$keyHandleReqName := (TrimPrefix .GetTypeName $pkg)}}
        {{$pkgName}}::{{$specMsgName}} proto_spec;
              {{if (HasSuffix $rpc "Delete")}}
        pds_ms_get_{{$specMsgName | ToLower}}_from_{{$keyHandleReqName | ToLower}}(req_proto_spec, proto_spec);
        pds_ms_validate_{{$specMsgName | ToLower}}(proto_spec);
        pds_ms_pre_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_DESTROY, correlator, &req_proto_spec);
        pds_ms_dump_{{$specMsgName | ToLower}}(proto_spec);
                {{if $updForDel}}
        pds_ms_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, TRUE, TRUE);
                {{else}}
        pds_ms_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_DESTROY, correlator, TRUE);
                {{end}}
        pds_ms_post_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_DESTROY, correlator, &req_proto_spec);
              {{end}}
              {{if (HasSuffix $rpc "Create")}}
        pds_ms_ext_to_int_{{$specMsgName | ToLower}}(req_proto_spec, proto_spec);
        pds_ms_validate_{{$specMsgName | ToLower}}(proto_spec);
        pds_ms_pre_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, &req_proto_spec);
        pds_ms_dump_{{$specMsgName | ToLower}}(proto_spec);
        pds_ms_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, FALSE);
        pds_ms_post_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, &req_proto_spec);
              {{end}}
              {{if (HasSuffix $rpc "Update")}}
        pds_ms_ext_to_int_{{$specMsgName | ToLower}}(req_proto_spec, proto_spec);
        pds_ms_validate_{{$specMsgName | ToLower}}(proto_spec);
        pds_ms_pre_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, &req_proto_spec, TRUE);
        pds_ms_dump_{{$specMsgName | ToLower}}(proto_spec);
        pds_ms_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, FALSE, TRUE);
        pds_ms_post_set_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, AMB_ROW_ACTIVE, correlator, &req_proto_spec, TRUE);
              {{end}}
            {{end}}
          {{end}}
          {{if isRepeatedField .}}
    }
          {{end}}
        {{end}}
      {{end}}
    PDS_MS_END_TXN(correlator);
    ret = pds_ms::mgmt_state_t::ms_response_wait();
    {{end}}
 
    {{if (HasSuffix $rpc "Get") }}
      {{$fields := .RequestType.Fields}}
      {{range $fields}}
        {{$field := .}}
        {{if or (eq "request" .GetName) (eq "Request" .GetName) (eq "requests" .GetName) (eq "Requests" .GetName)}}
          {{$keyHandleReqName := ""}}
          {{$repField := false}}
          {{$isOneOf := false}}
          {{if or (eq "request" .GetName) (eq "Request" .GetName)}}
            {{$keyHandleReqName = (TrimPrefix .GetTypeName $pkg)}}
            {{$repField = (isRepeatedField .)}}
          {{else}}
            {{$isOneOf = true}}
            {{$getReqsMsg := (getMsg $file $pkg (TrimPrefix .GetTypeName $pkg))}}
            {{range $getReqsMsg.Fields}}
              {{$repField = (isRepeatedField .)}}
              {{$keyHandleReqName = (TrimPrefix .GetTypeName $pkg)}}
            {{end}}
          {{end}}
          {{if $isOneOf}}
            {{if $repField}}
        if (req->has_requests() && req->requests().request_size()) {
            for (int i = 0; i < req->requests().request_size(); i ++) {
                auto req_proto_spec = req->requests().request(i);
            {{else}}
        if (req->has_request()) {
                auto req_proto_spec = req->request();
            {{end}}
          {{else}}
            {{if $repField}}
        if (req->request_size()) {
            for (int i = 0; i < req->request_size(); i ++) {
                auto req_proto_spec = req->request(i);
            {{else}}
        if (req->has_request()) {
                auto req_proto_spec = req->request();
            {{end}}
          {{end}}

          {{$respFields := $respMsg.Fields}}
          {{range $respFields}}
          {{$respField := .}}
            {{if or (eq "response" .GetName) (eq "Response" .GetName)}}
              {{if TypeIsMessage .}}
                {{$innerRespMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                {{$innerRespFields := $innerRespMsg.Fields}}
                {{$ResponseHasSpec := false}}
                {{range $innerRespFields}}
                {{$innerRespField := .}}
                  {{if or (eq "spec" .GetName) (eq "Spec" .GetName)}}
                    {{$specMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                    {{if hasExtension "venice.pdsaGetGlobOpts" $specMsg}}
                      {{$param := (getPdsaGetGlobalOpts $specMsg $cam)}}
                      {{$struct := $param.Struct}}
                      {{$specMsgName := $param.SpecMsg}}
                      {{if (eq $specMsgName "")}}
                        {{$specMsgName = (TrimPrefix .GetTypeName $pkg)}}
                      {{end}}
                      {{$ResponseHasSpec = true}}
                {{$pkgName}}::{{$specMsgName}} proto_spec;
                pds_ms_get_{{$specMsgName | ToLower}}_from_{{$keyHandleReqName | ToLower}}(req_proto_spec, proto_spec);
                pds_ms_validate_{{$specMsgName | ToLower}}(proto_spec);
                PDS_MS_GET_SHARED_START();
                pds_ms_pre_get_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp, &req_proto_spec);
                pds_ms_dump_{{$specMsgName | ToLower}}(proto_spec);
                pds_ms_get_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp);
                PDS_MS_GET_SHARED_END();
                ret = pds_ms::mgmt_state_t::ms_response_wait();
                pds_ms_post_get_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp, &req_proto_spec);
                    {{end}}
                  {{end}}
                  {{if or (eq "status" .GetName) (eq "Status" .GetName)}}
                    {{$statusMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                    {{if hasExtension "venice.pdsaGetGlobOpts" $statusMsg}}
                      {{$param := (getPdsaGetGlobalOpts $statusMsg $cam)}}
                      {{$struct := $param.Struct}}
                      {{$specMsgName := $param.SpecMsg}}
                      {{if (eq $specMsgName "")}}
                        {{$specMsgName = (TrimPrefix .GetTypeName $pkg)}}
                      {{end}}
                      {{$specType := getCppTypeFieldFromProto .Type .GetTypeName}}
                if (ret == types::API_STATUS_OK) {
                    {{$statusMsgHasNoKeys := true}}
                    {{range $statusMsg.Fields}}
                      {{if hasExtension "venice.pdsaFields" .}}
                        {{$fieldOpt := (getPdsaFieldOpt . $cam $struct)}}
                        {{if not (eq $fieldOpt.IsReadOnly true)}}
                          {{if (eq $fieldOpt.IsKey true) }}
                            {{$statusMsgHasNoKeys = false}}
                          {{end}}
                        {{end}}
                      {{end}}
                    {{end}}
                    {{if $statusMsgHasNoKeys}}
                    {{$pkgName}}::{{$specMsgName}} proto_status;
                    pds_ms_get_{{$specMsgName | ToLower}}_from_{{$keyHandleReqName | ToLower}}(req_proto_spec, proto_status);
                    pds_ms_validate_{{$specMsgName | ToLower}}(proto_status);
                    {{else}}
                      {{if $ResponseHasSpec }}
                    {{$pkgName}}::{{$specMsgName}} proto_status;
                      {{else}}
                    {{$specType}} proto_status;
                      {{end}}
                    {{end}}
                    {{range $statusMsg.Fields}}
                      {{if hasExtension "venice.pdsaFields" .}}
                        {{$fieldOpt := (getPdsaFieldOpt . $cam $struct)}}
                        {{if not (eq $fieldOpt.IsReadOnly true)}}
                          {{if (eq $fieldOpt.IsKey true) }}
                            {{if $ResponseHasSpec }}
                              {{if (eq .GetTypeName ".types.IPAddress")}}
                    proto_status.set_allocated_{{$fieldOpt.Name | ToLower}}(new types::IPAddress(proto_spec.{{$fieldOpt.Name | ToLower}}()));
                              {{else}}
                                {{ if HasPrefix .GetTypeName ".pds_ms."}}
                    proto_status.set_{{$fieldOpt.Name | ToLower}}((pds_ms::{{TrimPrefix .GetTypeName ".pds_ms."}})proto_spec.{{$fieldOpt.Name | ToLower}}());
                                {{else}}
                    proto_status.set_{{.GetName | ToLower}}(proto_spec.{{.GetName | ToLower}}());
                                {{end}}
                              {{end}}
                            {{else}}
                              {{if (eq .GetTypeName ".types.IPAddress")}}
                    proto_status.set_allocated_{{$fieldOpt.Name | ToLower}}(new types::IPAddress(req_proto_spec.key().{{$fieldOpt.Name | ToLower}}()));
                              {{else}}
                                {{ if HasPrefix .GetTypeName ".pds_ms."}}
                    proto_status.set_{{$fieldOpt.Name | ToLower}}((pds_ms::{{TrimPrefix .GetTypeName ".pds_ms."}})req_proto_spec.key().{{$fieldOpt.Name | ToLower}}());
                                {{else}}
                    proto_status.set_{{.GetName | ToLower}}(req_proto_spec.key().{{.GetName | ToLower}}());
                                {{end}}
                              {{end}}
                            {{end}}
                          {{end}}
                        {{end}}
                      {{end}}
                    {{end}}  
                    PDS_MS_GET_SHARED_START();
                    {{$statusMsgName := (TrimPrefix .GetTypeName $pkg)}}
                    pds_ms_pre_get_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(proto_status, &proto_resp, &req_proto_spec);
                    pds_ms_get_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(proto_status, &proto_resp);
                    PDS_MS_GET_SHARED_END();
                    ret = pds_ms::mgmt_state_t::ms_response_wait();
                    pds_ms_post_get_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(proto_status, &proto_resp, &req_proto_spec);
                }
                    {{end}}
                  {{end}}
                {{end}}
                {{if hasExtension "venice.pdsaGetGlobOpts" $innerRespMsg}}
                  {{$param := (getPdsaGetGlobalOpts $innerRespMsg $cam)}}
                  {{$struct := $param.Struct}}
                  {{$specMsgName := (TrimPrefix .GetTypeName $pkg)}}
                  {{if (HasSuffix $rpc "Get")}}
                PDS_MS_GET_SHARED_START();
                pds_ms_pre_get_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp);
                pds_ms_dump_{{$specMsgName | ToLower}}(proto_spec);
                pds_ms_get_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp);
                pds_ms_postget_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(proto_spec, &proto_resp);
                PDS_MS_GET_SHARED_END();
                ret = pds_ms::mgmt_state_t::ms_response_wait();
                  {{end}}
                {{end}}
              {{end}}
            {{end}}
          {{end}}
          {{if $isOneOf}}
            {{if $repField}}
            }
            {{end}}
          {{else}}
            {{if $repField}}
            }
            {{end}}
          {{end}}
        } else {
            {{$respFields := $respMsg.Fields}}
            {{range $respFields}}
            {{$respField := .}}
              {{if or (eq "response" .GetName) (eq "Response" .GetName)}}
                {{if TypeIsMessage .}}
                  {{$innerRespMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                  {{$innerRespFields := $innerRespMsg.Fields}}
                  {{range $innerRespFields}}
                  {{$innerRespField := .}}
                    {{if or (eq "spec" .GetName) (eq "Spec" .GetName)}}
                      {{$specMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                      {{if hasExtension "venice.pdsaGetGlobOpts" $specMsg}}
                        {{$param := (getPdsaGetGlobalOpts $specMsg $cam)}}
                        {{$struct := $param.Struct}}
                        {{$specMsgName := $param.SpecMsg}}
                        {{if (eq $specMsgName "")}}
                          {{$specMsgName = (TrimPrefix .GetTypeName $pkg)}}
                        {{end}}
                PDS_MS_GET_SHARED_START();
                pds_ms_pre_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                pds_ms::{{$requestTypeName}} pds_ms_req;
                        {{$reqRootMsg := (getMsg $file $pkg $requestTypeName)}}
                        {{$fields := $reqRootMsg.Fields}}
                        {{range $fields}}
                          {{if (eq .GetName "Filter")}}
                            {{$filterMsg := (getMsg $file $pkg (TrimPrefix .GetTypeName $pkg))}}
                if (req->has_filter()) {
                    pds_ms::{{$filterMsg.GetName}} *pds_ms_filter = new pds_ms::{{$filterMsg.GetName}};
                            {{$fields := $filterMsg.Fields}}
                            {{range $fields}}
                    pds_ms_filter->set_{{.GetName | ToLower}}(req->filter().{{.GetName | ToLower}}());
                            {{end}}
                    pds_ms_req.set_allocated_filter(pds_ms_filter);
                }
                          {{end}}
                        {{end}}
                pds_ms_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&pds_ms_req, &proto_resp);
                PDS_MS_GET_SHARED_END();
                ret = pds_ms::mgmt_state_t::ms_response_wait();
                pds_ms_post_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                      {{end}}
                    {{end}}
                    {{if or (eq "status" .GetName) (eq "Status" .GetName)}}
                      {{$statusMsg := ($file.Reg.LookupMsg "" .GetTypeName)}}
                      {{if hasExtension "venice.pdsaGetGlobOpts" $statusMsg}}
                        {{$param := (getPdsaGetGlobalOpts $statusMsg $cam)}}
                        {{$struct := $param.Struct}}
                        {{$specMsgName := $param.SpecMsg}}
                        {{if (eq $specMsgName "")}}
                          {{$specMsgName = (TrimPrefix .GetTypeName $pkg)}}
                        {{end}}
                if (ret == types::API_STATUS_OK) {
                    PDS_MS_GET_SHARED_START();
                        {{$statusMsgName := (TrimPrefix .GetTypeName $pkg)}}
                    pds_ms_pre_getall_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                    pds_ms::{{$requestTypeName}} pds_ms_req;
                        {{$reqRootMsg := (getMsg $file $pkg $requestTypeName)}}
                        {{$fields := $reqRootMsg.Fields}}
                        {{range $fields}}
                          {{if (eq .GetName "Filter")}}
                            {{$filterMsg := (getMsg $file $pkg (TrimPrefix .GetTypeName $pkg))}}
                    if (req->has_filter()) {
                        pds_ms::{{$filterMsg.GetName}} *pds_ms_filter = new pds_ms::{{$filterMsg.GetName}};
                            {{$fields := $filterMsg.Fields}}
                            {{range $fields}}
                        pds_ms_filter->set_{{.GetName | ToLower}}(req->filter().{{.GetName | ToLower}}());
                            {{end}}
                        pds_ms_req.set_allocated_filter(pds_ms_filter);
                    }
                          {{end}}
                        {{end}}
                    pds_ms_getall_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(&pds_ms_req, &proto_resp);
                    PDS_MS_GET_SHARED_END();
                    ret = pds_ms::mgmt_state_t::ms_response_wait();
                    pds_ms_post_getall_{{$statusMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                }
                      {{end}}
                    {{end}}
                  {{end}}
                  {{if hasExtension "venice.pdsaGetGlobOpts" $innerRespMsg}}
                    {{$param := (getPdsaGetGlobalOpts $innerRespMsg $cam)}}
                    {{$struct := $param.Struct}}
                    {{$specMsgName := (TrimPrefix .GetTypeName $pkg)}}
                PDS_MS_GET_SHARED_START();
                pds_ms_pre_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                pds_ms::{{$requestTypeName}} pds_ms_req;
                        {{$reqRootMsg := (getMsg $file $pkg $requestTypeName)}}
                        {{$fields := $reqRootMsg.Fields}}
                        {{range $fields}}
                          {{if (eq .GetName "Filter")}}
                            {{$filterMsg := (getMsg $file $pkg (TrimPrefix .GetTypeName $pkg))}}
                if (req->has_filter()) {
                    pds_ms::{{$filterMsg.GetName}} *pds_ms_filter = new pds_ms::{{$filterMsg.GetName}};
                            {{$fields := $filterMsg.Fields}}
                            {{range $fields}}
                    pds_ms_filter->set_{{.GetName | ToLower}}(req->filter().{{.GetName | ToLower}}());
                            {{end}}
                    pds_ms_req.set_allocated_filter(pds_ms_filter);
                }
                          {{end}}
                        {{end}}
                pds_ms_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&pds_ms_req, &proto_resp);
                PDS_MS_GET_SHARED_END();
                ret = pds_ms::mgmt_state_t::ms_response_wait();
                pds_ms_post_getall_{{$specMsgName | ToLower}}_{{$struct | ToLower}}(&proto_resp);
                  {{end}}
                {{end}}
              {{end}}
            {{end}}
        }
        {{end}}
      {{end}}
    {{end}}
    } catch (const pds_ms::Error& e) {
        PDS_TRACE_ERR("CTM Transaction aborted %s", e.what());
        resp->set_apistatus(pds_ms_sdk_ret_to_api_status(e.rc()));
        return Status::OK;
    }
    resp->set_apistatus(ret);
    if (ret != types::API_STATUS_OK) {
        PDS_TRACE_ERR ("Failed to process gRPC {{.RequestType.Name}}: %s", pds_ms_api_ret_str(ret));
    } else {
        PDS_TRACE_DEBUG ("Processed gRPC {{.RequestType.Name}} successfully");

  {{if (HasSuffix $rpc "Get") }}
        //pds_ms_dump_{{$respMsgName| ToLower}}(proto_resp);
        pds_ms_convert_{{$respMsgName | ToLower}}_ext_response (proto_resp, resp);
  {{end}}
    }
    return Status::OK;
  {{end}}
} //{{$svcname}}Impl::{{$rpc}} 

{{end}}
{{end}}
