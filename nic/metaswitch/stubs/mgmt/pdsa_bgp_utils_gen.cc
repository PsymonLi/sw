// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: bgp.proto
 */

#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>      // std::stringstream





#include "nic/metaswitch/stubs/mgmt/pdsa_bgp_utils_gen.hpp"
#include "nic/metaswitch/stubs/mgmt/pdsa_mgmt_utils.hpp"

#define SHARED_DATA_TYPE SMS_SHARED_LOCAL



  
  
  
    
    
    
    
    
    
    /*===== Set MS Table: AMB_BGP_RM_ENT =====*/
    NBB_VOID pdsa_set_amb_bgp_rm_ent_oid(pds::BGPGlobalSpec &req,
                                       NBB_ULONG *oid) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_rm_ent_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_RM_OID_LEN);
        oid[0] = AMB_BGP_RM_OID_LEN;
        oid[1] = 0x41000001;

        
        
          
            
            
              
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_RM_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_set_amb_bgp_rm_ent_oid */

    NBB_VOID pdsa_fill_amb_bgp_rm_ent_fields(pds::BGPGlobalSpec &req,
                                             AMB_GEN_IPS *mib_msg,
                                             AMB_BGP_RM_ENT *v_amb_bgp_rm_ent,
                                             NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_TRC_ENTRY("pdsa_fill_amb_bgp_rm_ent_fields");

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field local_as in AMB_BGP_RM_ENT"));
            
            
            // TYPE_UINT32 LocalASN ulong
              
                
                
                  
            v_amb_bgp_rm_ent->local_as = (ulong)req.localasn();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 6);
            
            
        }
            
          
        
          
          
            
            
            // TYPE_UINT32 VRFId ulong
              
                
                
                  
            v_amb_bgp_rm_ent->index = (ulong)req.vrfid();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 1);
            
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field local_identifier in AMB_BGP_RM_ENT"));
            
            
            // TYPE_FIXED32 RouterId byteArray
              
                
                
            NBB_PUT_LONG(v_amb_bgp_rm_ent->local_identifier, req.routerid());
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 8);
            
            
        }
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_fill_amb_bgp_rm_ent_fields */

    NBB_VOID pdsa_set_amb_bgp_rm_ent(pds::BGPGlobalSpec &req, NBB_LONG row_status) {
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_rm_ent");

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_RM_ENT),
                                                     AMB_BGP_RM_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_set_amb_bgp_rm_ent_oid(req, oid);

        /***************************************************************************/
        /* Build AMB_BGP_RM_ENT.                                                     */
        /***************************************************************************/
        AMB_BGP_RM_ENT *data = (AMB_BGP_RM_ENT*)((NBB_BYTE *)mib_msg + mib_msg->data_offset);
        pdsa_fill_amb_bgp_rm_ent_fields(req, mib_msg, data, row_status);

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_set_amb_bgp_rm_ent */
    
  

  
  
  

  
  
  
    
    
    
    
    
    
    /*===== Set MS Table: AMB_BGP_PEER_AFI_SAFI =====*/
    NBB_VOID pdsa_set_amb_bgp_peer_afi_safi_oid(pds::BGPPeerAf &req,
                                       NBB_ULONG *oid) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_peer_afi_safi_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_PAS_OID_LEN);
        oid[0] = AMB_BGP_PAS_OID_LEN;
        oid[1] = 0x4100001e;

        
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAS_RM_ENT_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: PeerAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerAfiSafiTable", "remote_addr", req.peeraddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: PeerPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAS_REMOTE_PORT_INDEX] = (ulong)req.peerport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: LocalAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerAfiSafiTable", "local_addr", req.localaddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: LocalPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAS_LOCAL_PORT_INDEX] = (ulong)req.localport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: IfId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAS_SCOPE_ID_INDEX] = (ulong)req.ifid();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_ENUM ProtoFieldName: Afi
        // MSFieldType: long ProtoFieldTypeName: .types.BGPAfi
                
                  
        oid[AMB_BGP_PAS_AFI_INDEX] = (long)req.afi();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_ENUM ProtoFieldName: Safi
        // MSFieldType: long ProtoFieldTypeName: .types.BGPSafi
                
                  
        oid[AMB_BGP_PAS_SAFI_INDEX] = (long)req.safi();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_set_amb_bgp_peer_afi_safi_oid */

    NBB_VOID pdsa_fill_amb_bgp_peer_afi_safi_fields(pds::BGPPeerAf &req,
                                             AMB_GEN_IPS *mib_msg,
                                             AMB_BGP_PEER_AFI_SAFI *v_amb_bgp_peer_afi_safi,
                                             NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_TRC_ENTRY("pdsa_fill_amb_bgp_peer_afi_safi_fields");

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        
        
          
          
            
            
            // TYPE_UINT32 VRFId ulong
              
                
                
                  
            v_amb_bgp_peer_afi_safi->rm_ent_index = (ulong)req.vrfid();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 1);
            
            
          
        
          
          
            
            
            // TYPE_MESSAGE PeerAddr byteArray
              
                
                
                  
            pdsa_set_address_field(mib_msg, "bgpPeerAfiSafiTable", "remote_addr", (void*)v_amb_bgp_peer_afi_safi, req.peeraddr());
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 6);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 PeerPort ulong
              
                
                
                  
            v_amb_bgp_peer_afi_safi->remote_port = (ulong)req.peerport();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 7);
            
            
          
        
          
          
            
            
            // TYPE_MESSAGE LocalAddr byteArray
              
                
                
                  
            pdsa_set_address_field(mib_msg, "bgpPeerAfiSafiTable", "local_addr", (void*)v_amb_bgp_peer_afi_safi, req.localaddr());
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 3);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 LocalPort ulong
              
                
                
                  
            v_amb_bgp_peer_afi_safi->local_port = (ulong)req.localport();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 4);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 IfId ulong
              
                
                
                  
            v_amb_bgp_peer_afi_safi->local_addr_scope_id = (ulong)req.ifid();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 24);
            
            
          
        
          
          
            
            
            // TYPE_ENUM Afi long
              
                
                
                  
            v_amb_bgp_peer_afi_safi->afi = (long)req.afi();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 8);
            
            
          
        
          
          
            
            
            // TYPE_ENUM Safi long
              
                
                
                  
            v_amb_bgp_peer_afi_safi->safi = (long)req.safi();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 9);
            
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field next_hop_self in AMB_BGP_PEER_AFI_SAFI"));
            
            
            // TYPE_ENUM NHself long
              
                
                
                  
            v_amb_bgp_peer_afi_safi->next_hop_self = (long)req.nhself();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 14);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field originate_default in AMB_BGP_PEER_AFI_SAFI"));
            
            
            // TYPE_ENUM DefaultOrig long
              
                
                
                  
            v_amb_bgp_peer_afi_safi->originate_default = (long)req.defaultorig();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 15);
            
            
        }
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_fill_amb_bgp_peer_afi_safi_fields */

    NBB_VOID pdsa_set_amb_bgp_peer_afi_safi(pds::BGPPeerAf &req, NBB_LONG row_status) {
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_peer_afi_safi");

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_PEER_AFI_SAFI),
                                                     AMB_BGP_PAS_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_set_amb_bgp_peer_afi_safi_oid(req, oid);

        /***************************************************************************/
        /* Build AMB_BGP_PEER_AFI_SAFI.                                                     */
        /***************************************************************************/
        AMB_BGP_PEER_AFI_SAFI *data = (AMB_BGP_PEER_AFI_SAFI*)((NBB_BYTE *)mib_msg + mib_msg->data_offset);
        pdsa_fill_amb_bgp_peer_afi_safi_fields(req, mib_msg, data, row_status);

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_set_amb_bgp_peer_afi_safi */
    
  

  
  
  
    
    
    
    
    
    
  

  
  
  

  
  
  
    
    
    
    
    
    
  

  
  
  
    
    
    
    
    
    
    /*===== Set MS Table: AMB_BGP_PEER =====*/
    NBB_VOID pdsa_set_amb_bgp_peer_oid(pds::BGPPeerSpec &req,
                                       NBB_ULONG *oid) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_peer_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_PER_OID_LEN);
        oid[0] = AMB_BGP_PER_OID_LEN;
        oid[1] = 0x41000002;

        
        
          
            
            
              
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PER_RM_ENT_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: PeerAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerTable", "remote_addr", req.peeraddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: PeerPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PER_REMOTE_PORT_INDEX] = (ulong)req.peerport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: LocalAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerTable", "local_addr", req.localaddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: LocalPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PER_LOCAL_PORT_INDEX] = (ulong)req.localport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: IfId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PER_SCOPE_ID_INDEX] = (ulong)req.ifid();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_set_amb_bgp_peer_oid */

    NBB_VOID pdsa_fill_amb_bgp_peer_fields(pds::BGPPeerSpec &req,
                                             AMB_GEN_IPS *mib_msg,
                                             AMB_BGP_PEER *v_amb_bgp_peer,
                                             NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_TRC_ENTRY("pdsa_fill_amb_bgp_peer_fields");

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field conf_alt_local_as in AMB_BGP_PEER"));
            
            
            // TYPE_UINT32 LocalASN ulong
              
                
                
                  
            v_amb_bgp_peer->conf_alt_local_as = (ulong)req.localasn();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 96);
            
            
        }
            
          
        
          
          
            
            
            // TYPE_UINT32 VRFId ulong
              
                
                
                  
            v_amb_bgp_peer->rm_ent_index = (ulong)req.vrfid();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 1);
            
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field admin_status in AMB_BGP_PEER"));
            
            
            // TYPE_ENUM AdminEn long
              
                
                
                  
            v_amb_bgp_peer->admin_status = (long)req.adminen();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 5);
            
            
        }
            
          
        
          
          
            
            
            // TYPE_MESSAGE PeerAddr byteArray
              
                
                
                  
            pdsa_set_address_field(mib_msg, "bgpPeerTable", "remote_addr", (void*)v_amb_bgp_peer, req.peeraddr());
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 12);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 PeerPort ulong
              
                
                
                  
            v_amb_bgp_peer->remote_port = (ulong)req.peerport();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 13);
            
            
          
        
          
          
            
            
            // TYPE_MESSAGE LocalAddr byteArray
              
                
                
                  
            pdsa_set_address_field(mib_msg, "bgpPeerTable", "local_addr", (void*)v_amb_bgp_peer, req.localaddr());
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 8);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 LocalPort ulong
              
                
                
                  
            v_amb_bgp_peer->local_port = (ulong)req.localport();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 9);
            
            
          
        
          
          
            
            
            // TYPE_UINT32 IfId ulong
              
                
                
                  
            v_amb_bgp_peer->local_addr_scope_id = (ulong)req.ifid();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 55);
            
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field remote_as in AMB_BGP_PEER"));
            
            
            // TYPE_UINT32 RemoteASN ulong
              
                
                
                  
            v_amb_bgp_peer->remote_as = (ulong)req.remoteasn();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 14);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field send_comm in AMB_BGP_PEER"));
            
            
            // TYPE_ENUM SendComm long
              
                
                
                  
            v_amb_bgp_peer->send_comm = (long)req.sendcomm();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 105);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field send_ext_comm in AMB_BGP_PEER"));
            
            
            // TYPE_ENUM SendExtComm long
              
                
                
                  
            v_amb_bgp_peer->send_ext_comm = (long)req.sendextcomm();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 106);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field reflector_client in AMB_BGP_PEER"));
            
            
            // TYPE_ENUM RRClient long
              
                
                
                  
            v_amb_bgp_peer->reflector_client = (long)req.rrclient();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 17);
            
            
        }
            
          
        
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field connect_retry_interval in AMB_BGP_PEER"));
            
            
            // TYPE_UINT32 ConnectRetry ulong
              
                
                
                  
            v_amb_bgp_peer->connect_retry_interval = (ulong)req.connectretry();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 26);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field hold_time_configd in AMB_BGP_PEER"));
            
            
            // TYPE_UINT32 HoldTime ulong
              
                
                
                  
            v_amb_bgp_peer->hold_time_configd = (ulong)req.holdtime();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 27);
            
            
        }
            
          
        
          
          
            
        if (row_status != AMB_ROW_DESTROY) {
            NBB_TRC_FLOW ((NBB_FORMAT "Not destroying RM: fill in field keep_alive_configd in AMB_BGP_PEER"));
            
            
            // TYPE_UINT32 KeepAlive ulong
              
                
                
                  
            v_amb_bgp_peer->keep_alive_configd = (ulong)req.keepalive();
                  
                
              
            AMB_SET_FIELD_PRESENT(mib_msg, 28);
            
            
        }
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_fill_amb_bgp_peer_fields */

    NBB_VOID pdsa_set_amb_bgp_peer(pds::BGPPeerSpec &req, NBB_LONG row_status) {
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_set_amb_bgp_peer");

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_PEER),
                                                     AMB_BGP_PER_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_set_amb_bgp_peer_oid(req, oid);

        /***************************************************************************/
        /* Build AMB_BGP_PEER.                                                     */
        /***************************************************************************/
        AMB_BGP_PEER *data = (AMB_BGP_PEER*)((NBB_BYTE *)mib_msg + mib_msg->data_offset);
        pdsa_fill_amb_bgp_peer_fields(req, mib_msg, data, row_status);

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_set_amb_bgp_peer */
    
  

  
  
  

  
  
  
    
    
    
    
    
    
  

  
  
  

  
  
  




  
  
  
    
    
    
    
    
    
    /*===== Get MS Table: AMB_BGP_RM_ENT =====*/
    NBB_VOID pdsa_check_get_amb_bgp_rm_ent(NBB_CXT_T NBB_CXT)
    {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        AMB_GET *v_amb_get;
        pds::BGPGlobalSpecResponse resp;
        NBB_LONG bulk_row;
        AMB_BGP_RM_ENT *v_amb_bgp_rm_ent;

        NBB_TRC_ENTRY("pdsa_check_get_amb_bgp_rm_ent");

        /***************************************************************************/
        /* Check assumptions.                                                      */
        /***************************************************************************/
        NBB_ASSERT_PTR_NE(SHARED.saved_ips, NULL);
        NBB_ASSERT_NUM_EQ(SHARED.saved_ips->ips_type, IPS_AMB_GET);

        v_amb_get = (AMB_GET *)SHARED.saved_ips;
        SHARED.saved_ips = NULL;

        if (v_amb_get->ret_code == AMB_RC_NO_ERROR)
        {
            auto ent = resp.add_response();
            /*************************************************************************/
            /* This GET response contains entry from AMB_BGP_RM_ENT                     */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Got a valid AMB_BGP_RM_ENT entry"));

            v_amb_bgp_rm_ent = (AMB_BGP_RM_ENT *)NTL_OFF_GET_POINTER(v_amb_get,
                                                        &v_amb_get->bulk_data_offset);

            for (bulk_row = 0; bulk_row < v_amb_get->bulk_returned; bulk_row++)
            {
                /*************************************************************************/
                /* TODO: Extract the fields.                                             */
                /*************************************************************************/
            
            
              
                
                
                  
                    
                // TYPE_UINT32  LocalASN ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_localasn(v_amb_bgp_rm_ent->local_as);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  VRFId ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_vrfid(v_amb_bgp_rm_ent->index);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_FIXED32  RouterId byteArray LABEL_OPTIONAL
                      
                        
                        
                ent->set_routerid(pdsa_nbb_get_long(v_amb_bgp_rm_ent->local_identifier));
                        
                      
                    
                  
                
              

                /***********************************************************************/
                /* Go to the next MIB row returned.                                    */
                /***********************************************************************/
                v_amb_bgp_rm_ent = (AMB_BGP_RM_ENT *)(((NBB_BYTE *)v_amb_bgp_rm_ent) +
                                        NBB_ALIGN_OFFSET(v_amb_get->data_len));
            }

            /*************************************************************************/
            /* Send back the GET response as a GET request.  Because the             */
            /* get_next_object flag is set, it will return the next AMB_BGP_RM_ENT entry*/
            /*************************************************************************/
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_GET_RESCHEDULE)
        {
            /*************************************************************************/
            /* The product has bounded the amount of processing it does in a single  */
            /* schedule.  The information in the GET does not represent a valid      */
            /* entry, just the last entry the product got to before deciding to      */
            /* reschedule.  Hence do not print the entry out.                        */
            /*                                                                       */
            /* Instead, send the GET response back as a GET-NEXT request (i.e.       */
            /* exact = ATG_NO and get_next_object = ATG_YES) in order to restart the */
            /* GET processing from where the product left off.  Because the          */
            /* get_next_object flag is set, the product will return the next BGP     */
            /* route.                                                                */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Reschedule GET"));
            v_amb_get->exact = ATG_NO;
            v_amb_get->get_next_object = ATG_YES;
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_RESOURCE_UNAVAILABLE)
        {
            /*************************************************************************/
            /* The product failed to process the GET due to a resource failure.      */
            /*                                                                       */
            /* A MIB stub could decide to take action here, for example try again or */
            /* report the error.  However we just free the buffer and continue with  */
            /* the next FSM action.                                                  */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "GET failure"));
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* We are no longer responsible for incoming GETs.                       */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }
        else
        {
            /*************************************************************************/
            /* No more routes.  Free the buffer and move on to the next action.      */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "End of table"));
            NBB_ASSERT_NUM_EQ(v_amb_get->ret_code, AMB_RC_END_OF_TABLE);

            /*************************************************************************/
            /* Free the buffer.                                                      */
            /*************************************************************************/
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* The wait_check_get callback determines which procedure is responsible */
            /* for incoming GET response signals.  The last GET response has been    */
            /* received, and we are no longer responsible for incoming GETs.  Clear  */
            /* the callback.                                                         */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }

        NBB_TRC_EXIT();

        return;

    } /* pdsa_check_get_amb_bgp_rm_ent */

    NBB_VOID pdsa_get_amb_bgp_rm_ent_oid(pds::BGPGlobalSpec &req,
                                       NBB_ULONG *oid  NBB_CCXT_T NBB_CXT) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_rm_ent_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_RM_OID_LEN);
        oid[0] = AMB_BGP_RM_OID_LEN;
        oid[1] = 0x41000001;

        
        
          
            
            
              
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_RM_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_get_amb_bgp_rm_ent_oid */

    NBB_VOID pdsa_get_amb_bgp_rm_ent(pds::BGPGlobalSpec &req,
                                            NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_rm_ent");

        /***************************************************************************/
        /* Define the routine to be used on receipt of a GET response.             */
        /***************************************************************************/
        SHARED.wait_check_get = pdsa_check_get_amb_bgp_rm_ent;

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_RM_ENT),
                                                     AMB_BGP_RM_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Build and send the first GET.                                           */
        /***************************************************************************/

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_get_amb_bgp_rm_ent_oid(req, oid);

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        /***************************************************************************/
        /* We're trying to get the next object, not an exact match.                */
        /***************************************************************************/
        mib_msg->ips_hdr.ips_type       = IPS_AMB_GET;
        mib_msg->exact = ATG_NO;
        mib_msg->get_next_object = ATG_YES;
        mib_msg->bulk_get = ATG_YES;
        mib_msg->bulk_requested = 1000;
        mib_msg->bulk_returned = 0;

        /***************************************************************************/
        /* Send AMB_GET.                                                           */
        /***************************************************************************/
        NBB_TRC_FLOW((NBB_FORMAT "Send a AMB_BGP_RM_ENT GET MIB."));

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_get_amb_bgp_rm_ent */
    
  

  
  
  

  
  
  
    
    
    
    
    
    
    /*===== Get MS Table: AMB_BGP_PEER_AFI_SAFI_STAT =====*/
    NBB_VOID pdsa_check_get_amb_bgp_peer_afi_safi_stat(NBB_CXT_T NBB_CXT)
    {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        AMB_GET *v_amb_get;
        pds::BGPPeerAfResponse resp;
        NBB_LONG bulk_row;
        AMB_BGP_PEER_AFI_SAFI_STAT *v_amb_bgp_peer_afi_safi_stat;

        NBB_TRC_ENTRY("pdsa_check_get_amb_bgp_peer_afi_safi_stat");

        /***************************************************************************/
        /* Check assumptions.                                                      */
        /***************************************************************************/
        NBB_ASSERT_PTR_NE(SHARED.saved_ips, NULL);
        NBB_ASSERT_NUM_EQ(SHARED.saved_ips->ips_type, IPS_AMB_GET);

        v_amb_get = (AMB_GET *)SHARED.saved_ips;
        SHARED.saved_ips = NULL;

        if (v_amb_get->ret_code == AMB_RC_NO_ERROR)
        {
            auto ent = resp.add_response();
            /*************************************************************************/
            /* This GET response contains entry from AMB_BGP_PEER_AFI_SAFI_STAT                     */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Got a valid AMB_BGP_PEER_AFI_SAFI_STAT entry"));

            v_amb_bgp_peer_afi_safi_stat = (AMB_BGP_PEER_AFI_SAFI_STAT *)NTL_OFF_GET_POINTER(v_amb_get,
                                                        &v_amb_get->bulk_data_offset);

            for (bulk_row = 0; bulk_row < v_amb_get->bulk_returned; bulk_row++)
            {
                /*************************************************************************/
                /* TODO: Extract the fields.                                             */
                /*************************************************************************/
            
            
              
                
                
                  
                    
                // TYPE_UINT32  VRFId ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_vrfid(v_amb_bgp_peer_afi_safi_stat->rm_ent_index);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_MESSAGE .types.IPAddress PeerAddr byteArray LABEL_OPTIONAL
                      
                        
                        
                          
                ent->set_allocated_peeraddr(pdsa_get_address("bgpPeerAfiSafiStatusTable", "remote_addr", (void*)v_amb_bgp_peer_afi_safi_stat));
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  PeerPort ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_peerport(v_amb_bgp_peer_afi_safi_stat->remote_port);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_MESSAGE .types.IPAddress LocalAddr byteArray LABEL_OPTIONAL
                      
                        
                        
                          
                ent->set_allocated_localaddr(pdsa_get_address("bgpPeerAfiSafiStatusTable", "local_addr", (void*)v_amb_bgp_peer_afi_safi_stat));
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  LocalPort ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_localport(v_amb_bgp_peer_afi_safi_stat->local_port);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  IfId ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_ifid(v_amb_bgp_peer_afi_safi_stat->local_addr_scope_id);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_ENUM .types.BGPAfi Afi long LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_afi((::types::BGPAfi)v_amb_bgp_peer_afi_safi_stat->afi);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_ENUM .types.BGPSafi Safi long LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_safi((::types::BGPSafi)v_amb_bgp_peer_afi_safi_stat->safi);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                // !!! NHself field is not in table bgpPeerAfiSafiStatusTable !!!
                
                
              
              
                
                
                // !!! DefaultOrig field is not in table bgpPeerAfiSafiStatusTable !!!
                
                
              

                /***********************************************************************/
                /* Go to the next MIB row returned.                                    */
                /***********************************************************************/
                v_amb_bgp_peer_afi_safi_stat = (AMB_BGP_PEER_AFI_SAFI_STAT *)(((NBB_BYTE *)v_amb_bgp_peer_afi_safi_stat) +
                                        NBB_ALIGN_OFFSET(v_amb_get->data_len));
            }

            /*************************************************************************/
            /* Send back the GET response as a GET request.  Because the             */
            /* get_next_object flag is set, it will return the next AMB_BGP_PEER_AFI_SAFI_STAT entry*/
            /*************************************************************************/
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_GET_RESCHEDULE)
        {
            /*************************************************************************/
            /* The product has bounded the amount of processing it does in a single  */
            /* schedule.  The information in the GET does not represent a valid      */
            /* entry, just the last entry the product got to before deciding to      */
            /* reschedule.  Hence do not print the entry out.                        */
            /*                                                                       */
            /* Instead, send the GET response back as a GET-NEXT request (i.e.       */
            /* exact = ATG_NO and get_next_object = ATG_YES) in order to restart the */
            /* GET processing from where the product left off.  Because the          */
            /* get_next_object flag is set, the product will return the next BGP     */
            /* route.                                                                */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Reschedule GET"));
            v_amb_get->exact = ATG_NO;
            v_amb_get->get_next_object = ATG_YES;
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_RESOURCE_UNAVAILABLE)
        {
            /*************************************************************************/
            /* The product failed to process the GET due to a resource failure.      */
            /*                                                                       */
            /* A MIB stub could decide to take action here, for example try again or */
            /* report the error.  However we just free the buffer and continue with  */
            /* the next FSM action.                                                  */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "GET failure"));
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* We are no longer responsible for incoming GETs.                       */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }
        else
        {
            /*************************************************************************/
            /* No more routes.  Free the buffer and move on to the next action.      */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "End of table"));
            NBB_ASSERT_NUM_EQ(v_amb_get->ret_code, AMB_RC_END_OF_TABLE);

            /*************************************************************************/
            /* Free the buffer.                                                      */
            /*************************************************************************/
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* The wait_check_get callback determines which procedure is responsible */
            /* for incoming GET response signals.  The last GET response has been    */
            /* received, and we are no longer responsible for incoming GETs.  Clear  */
            /* the callback.                                                         */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }

        NBB_TRC_EXIT();

        return;

    } /* pdsa_check_get_amb_bgp_peer_afi_safi_stat */

    NBB_VOID pdsa_get_amb_bgp_peer_afi_safi_stat_oid(pds::BGPPeerAf &req,
                                       NBB_ULONG *oid  NBB_CCXT_T NBB_CXT) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_peer_afi_safi_stat_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_PAST_OID_LEN);
        oid[0] = AMB_BGP_PAST_OID_LEN;
        oid[1] = 0x41000028;

        
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAST_RM_ENT_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: PeerAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerAfiSafiStatusTable", "remote_addr", req.peeraddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: PeerPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAST_REMOTE_PORT_INDEX] = (ulong)req.peerport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: LocalAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerAfiSafiStatusTable", "local_addr", req.localaddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: LocalPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAST_LOCAL_PORT_INDEX] = (ulong)req.localport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: IfId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PAST_SCOPE_ID_INDEX] = (ulong)req.ifid();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_ENUM ProtoFieldName: Afi
        // MSFieldType: long ProtoFieldTypeName: .types.BGPAfi
                
                  
        oid[AMB_BGP_PAST_AFI_INDEX] = (long)req.afi();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_ENUM ProtoFieldName: Safi
        // MSFieldType: long ProtoFieldTypeName: .types.BGPSafi
                
                  
        oid[AMB_BGP_PAST_SAFI_INDEX] = (long)req.safi();
                  
                
              
            
          
        
          
            
            
        // !!! NHself field is not in table bgpPeerAfiSafiStatusTable !!!
            
          
        
          
            
            
        // !!! DefaultOrig field is not in table bgpPeerAfiSafiStatusTable !!!
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_get_amb_bgp_peer_afi_safi_stat_oid */

    NBB_VOID pdsa_get_amb_bgp_peer_afi_safi_stat(pds::BGPPeerAf &req,
                                            NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_peer_afi_safi_stat");

        /***************************************************************************/
        /* Define the routine to be used on receipt of a GET response.             */
        /***************************************************************************/
        SHARED.wait_check_get = pdsa_check_get_amb_bgp_peer_afi_safi_stat;

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_PEER_AFI_SAFI_STAT),
                                                     AMB_BGP_PAST_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Build and send the first GET.                                           */
        /***************************************************************************/

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_get_amb_bgp_peer_afi_safi_stat_oid(req, oid);

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        /***************************************************************************/
        /* We're trying to get the next object, not an exact match.                */
        /***************************************************************************/
        mib_msg->ips_hdr.ips_type       = IPS_AMB_GET;
        mib_msg->exact = ATG_NO;
        mib_msg->get_next_object = ATG_YES;
        mib_msg->bulk_get = ATG_YES;
        mib_msg->bulk_requested = 1000;
        mib_msg->bulk_returned = 0;

        /***************************************************************************/
        /* Send AMB_GET.                                                           */
        /***************************************************************************/
        NBB_TRC_FLOW((NBB_FORMAT "Send a AMB_BGP_PEER_AFI_SAFI_STAT GET MIB."));

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_get_amb_bgp_peer_afi_safi_stat */
    
  

  
  
  
    
    
    
    
    
    
  

  
  
  

  
  
  
    
    
    
    
    
    
  

  
  
  
    
    
    
    
    
    
    /*===== Get MS Table: AMB_BGP_PEER_STATUS =====*/
    NBB_VOID pdsa_check_get_amb_bgp_peer_status(NBB_CXT_T NBB_CXT)
    {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        AMB_GET *v_amb_get;
        pds::BGPPeerSpecResponse resp;
        NBB_LONG bulk_row;
        AMB_BGP_PEER_STATUS *v_amb_bgp_peer_status;

        NBB_TRC_ENTRY("pdsa_check_get_amb_bgp_peer_status");

        /***************************************************************************/
        /* Check assumptions.                                                      */
        /***************************************************************************/
        NBB_ASSERT_PTR_NE(SHARED.saved_ips, NULL);
        NBB_ASSERT_NUM_EQ(SHARED.saved_ips->ips_type, IPS_AMB_GET);

        v_amb_get = (AMB_GET *)SHARED.saved_ips;
        SHARED.saved_ips = NULL;

        if (v_amb_get->ret_code == AMB_RC_NO_ERROR)
        {
            auto ent = resp.add_response();
            /*************************************************************************/
            /* This GET response contains entry from AMB_BGP_PEER_STATUS                     */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Got a valid AMB_BGP_PEER_STATUS entry"));

            v_amb_bgp_peer_status = (AMB_BGP_PEER_STATUS *)NTL_OFF_GET_POINTER(v_amb_get,
                                                        &v_amb_get->bulk_data_offset);

            for (bulk_row = 0; bulk_row < v_amb_get->bulk_returned; bulk_row++)
            {
                /*************************************************************************/
                /* TODO: Extract the fields.                                             */
                /*************************************************************************/
            
            
              
                
                
                  
                    
                // TYPE_UINT32  LocalASN ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_localasn(v_amb_bgp_peer_status->conf_alt_local_as);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  VRFId ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_vrfid(v_amb_bgp_peer_status->rm_ent_index);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                // !!! AdminEn field is not in table bgpPeerStatusTable !!!
                
                
              
              
                
                
                  
                    
                // TYPE_MESSAGE .types.IPAddress PeerAddr byteArray LABEL_OPTIONAL
                      
                        
                        
                          
                ent->set_allocated_peeraddr(pdsa_get_address("bgpPeerStatusTable", "remote_addr", (void*)v_amb_bgp_peer_status));
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  PeerPort ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_peerport(v_amb_bgp_peer_status->remote_port);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_MESSAGE .types.IPAddress LocalAddr byteArray LABEL_OPTIONAL
                      
                        
                        
                          
                ent->set_allocated_localaddr(pdsa_get_address("bgpPeerStatusTable", "local_addr", (void*)v_amb_bgp_peer_status));
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  LocalPort ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_localport(v_amb_bgp_peer_status->local_port);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  IfId ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_ifid(v_amb_bgp_peer_status->local_addr_scope_id);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  RemoteASN ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_remoteasn(v_amb_bgp_peer_status->remote_as);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                // !!! SendComm field is not in table bgpPeerStatusTable !!!
                
                
              
              
                
                
                // !!! SendExtComm field is not in table bgpPeerStatusTable !!!
                
                
              
              
                
                
                  
                    
                // TYPE_ENUM .types.BGPPeerClient RRClient long LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_rrclient((::types::BGPPeerClient)v_amb_bgp_peer_status->reflector_client);
                            
                          
                        
                      
                    
                  
                
              
              
              
              
                
                
                  
                    
                // TYPE_UINT32  ConnectRetry ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_connectretry(v_amb_bgp_peer_status->connect_retry_interval);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  HoldTime ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_holdtime(v_amb_bgp_peer_status->hold_time_configd);
                            
                          
                        
                      
                    
                  
                
              
              
                
                
                  
                    
                // TYPE_UINT32  KeepAlive ulong LABEL_OPTIONAL
                      
                        
                        
                          
                            
                            
                ent->set_keepalive(v_amb_bgp_peer_status->keep_alive_configd);
                            
                          
                        
                      
                    
                  
                
              

                /***********************************************************************/
                /* Go to the next MIB row returned.                                    */
                /***********************************************************************/
                v_amb_bgp_peer_status = (AMB_BGP_PEER_STATUS *)(((NBB_BYTE *)v_amb_bgp_peer_status) +
                                        NBB_ALIGN_OFFSET(v_amb_get->data_len));
            }

            /*************************************************************************/
            /* Send back the GET response as a GET request.  Because the             */
            /* get_next_object flag is set, it will return the next AMB_BGP_PEER_STATUS entry*/
            /*************************************************************************/
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_GET_RESCHEDULE)
        {
            /*************************************************************************/
            /* The product has bounded the amount of processing it does in a single  */
            /* schedule.  The information in the GET does not represent a valid      */
            /* entry, just the last entry the product got to before deciding to      */
            /* reschedule.  Hence do not print the entry out.                        */
            /*                                                                       */
            /* Instead, send the GET response back as a GET-NEXT request (i.e.       */
            /* exact = ATG_NO and get_next_object = ATG_YES) in order to restart the */
            /* GET processing from where the product left off.  Because the          */
            /* get_next_object flag is set, the product will return the next BGP     */
            /* route.                                                                */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "Reschedule GET"));
            v_amb_get->exact = ATG_NO;
            v_amb_get->get_next_object = ATG_YES;
            NBB_SEND_IPS(SHARED.sm_pid, AMB_MIB_Q, v_amb_get);
            SMS_GET_INC();
            v_amb_get = NULL;
        }
        else if (v_amb_get->ret_code == AMB_RC_RESOURCE_UNAVAILABLE)
        {
            /*************************************************************************/
            /* The product failed to process the GET due to a resource failure.      */
            /*                                                                       */
            /* A MIB stub could decide to take action here, for example try again or */
            /* report the error.  However we just free the buffer and continue with  */
            /* the next FSM action.                                                  */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "GET failure"));
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* We are no longer responsible for incoming GETs.                       */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }
        else
        {
            /*************************************************************************/
            /* No more routes.  Free the buffer and move on to the next action.      */
            /*************************************************************************/
            NBB_TRC_FLOW((NBB_FORMAT "End of table"));
            NBB_ASSERT_NUM_EQ(v_amb_get->ret_code, AMB_RC_END_OF_TABLE);

            /*************************************************************************/
            /* Free the buffer.                                                      */
            /*************************************************************************/
            NBB_FREE_BUFFER(v_amb_get);
            v_amb_get = NULL;

            /*************************************************************************/
            /* The wait_check_get callback determines which procedure is responsible */
            /* for incoming GET response signals.  The last GET response has been    */
            /* received, and we are no longer responsible for incoming GETs.  Clear  */
            /* the callback.                                                         */
            /*************************************************************************/
            SHARED.wait_check_get = NULL;
        }

        NBB_TRC_EXIT();

        return;

    } /* pdsa_check_get_amb_bgp_peer_status */

    NBB_VOID pdsa_get_amb_bgp_peer_status_oid(pds::BGPPeerSpec &req,
                                       NBB_ULONG *oid  NBB_CCXT_T NBB_CXT) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_peer_status_oid");
        /***************************************************************************/
        /* Zero the OID, then fill in the length, family and entity index.         */
        /***************************************************************************/
        NBB_MEMSET(oid, 0, sizeof(NBB_ULONG) * AMB_BGP_PRST_OID_LEN);
        oid[0] = AMB_BGP_PRST_OID_LEN;
        oid[1] = 0x41000027;

        
        
          
            
            
              
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: VRFId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PRST_RM_ENT_INDEX_INDEX] = (ulong)req.vrfid();
                  
                
              
            
          
        
          
            
            
        // !!! AdminEn field is not in table bgpPeerStatusTable !!!
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: PeerAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerStatusTable", "remote_addr", req.peeraddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: PeerPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PRST_REMOTE_PORT_INDEX] = (ulong)req.peerport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_MESSAGE ProtoFieldName: LocalAddr
        // MSFieldType: byteArray ProtoFieldTypeName: .types.IPAddress
                
                  
        pdsa_set_address_oid(oid, "bgpPeerStatusTable", "local_addr", req.localaddr());
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: LocalPort
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PRST_LOCAL_PORT_INDEX] = (ulong)req.localport();
                  
                
              
            
          
        
          
            
            
              
              
        // ProtoFieldType: TYPE_UINT32 ProtoFieldName: IfId
        // MSFieldType: ulong ProtoFieldTypeName: 
                
                  
        oid[AMB_BGP_PRST_SCOPE_ID_INDEX] = (ulong)req.ifid();
                  
                
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
        // !!! SendComm field is not in table bgpPeerStatusTable !!!
            
          
        
          
            
            
        // !!! SendExtComm field is not in table bgpPeerStatusTable !!!
            
          
        
          
            
            
              
              
            
          
        
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
          
            
            
              
              
            
          
        
        NBB_TRC_EXIT();
    } /* pdsa_get_amb_bgp_peer_status_oid */

    NBB_VOID pdsa_get_amb_bgp_peer_status(pds::BGPPeerSpec &req,
                                            NBB_LONG row_status) {
        /***************************************************************************/
        /* Local Variables                                                         */
        /***************************************************************************/
        NBB_ULONG       test_correlator = 0x100;

        ATG_CPI_ROW_UPDATE  *row_update = NULL;
        AMB_GEN_IPS         *mib_msg = NULL;

        NBB_TRC_ENTRY("pdsa_get_amb_bgp_peer_status");

        /***************************************************************************/
        /* Define the routine to be used on receipt of a GET response.             */
        /***************************************************************************/
        SHARED.wait_check_get = pdsa_check_get_amb_bgp_peer_status;

        // Build row update
        row_update = pdsa_ctm_bld_row_update_common (&mib_msg,
                                                     sizeof(AMB_BGP_PEER_STATUS),
                                                     AMB_BGP_PRST_OID_LEN,
                                                     row_status,
                                                     test_correlator);

        NBB_ASSERT_PTR_NE (row_update, NULL);
        NBB_ASSERT_PTR_NE (mib_msg, NULL);

        /***************************************************************************/
        /* Build and send the first GET.                                           */
        /***************************************************************************/

        /***************************************************************************/
        /* Set up the OID to pass in on the AMB_TEST                               */
        /***************************************************************************/
        NBB_ULONG *oid = (NBB_ULONG *)((NBB_BYTE *)mib_msg + mib_msg->oid_offset);
        pdsa_get_amb_bgp_peer_status_oid(req, oid);

        /***************************************************************************/
        /* Set all fields absent.                                                  */
        /***************************************************************************/
        AMB_SET_ALL_FIELDS_NOT_PRESENT(mib_msg);

        /***************************************************************************/
        /* We're trying to get the next object, not an exact match.                */
        /***************************************************************************/
        mib_msg->ips_hdr.ips_type       = IPS_AMB_GET;
        mib_msg->exact = ATG_NO;
        mib_msg->get_next_object = ATG_YES;
        mib_msg->bulk_get = ATG_YES;
        mib_msg->bulk_requested = 1000;
        mib_msg->bulk_returned = 0;

        /***************************************************************************/
        /* Send AMB_GET.                                                           */
        /***************************************************************************/
        NBB_TRC_FLOW((NBB_FORMAT "Send a AMB_BGP_PEER_STATUS GET MIB."));

        // Send the Row Update request to CSS
        NBB_SEND_IPS (SHARED.css_pid, USER_TO_CPI_Q, row_update);

        NBB_TRC_EXIT();
        return;
    } /* pdsa_get_amb_bgp_peer_status */
    
  

  
  
  

  
  
  
    
    
    
    
    
    
  

  
  
  

  
  
  

