// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: bgp.proto
 */



#include "nic/metaswitch/stubs/mgmt/pdsa_ctm.hpp"
#include "nic/apollo/agent/svc/specs.hpp"
#include "nic/metaswitch/stubs/mgmt/svc/bgp_gen.hpp"
#include "nic/metaswitch/stubs/mgmt/pdsa_bgp_utils_gen.hpp"








Status
BGPSvcImpl::BGPGlobalSpecCreate(ServerContext *context,
                              const pds::BGPRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_rm_ent(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPGlobalSpecDelete(ServerContext *context,
                              const pds::BGPRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
    //Delete request
  
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPGlobalSpecGet(ServerContext *context,
                              const pds::BGPRequest *req,
                              pds::BGPGlobalSpecResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
    //Get request
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPGlobalSpecUpdate(ServerContext *context,
                              const pds::BGPRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_rm_ent(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerAfCreate(ServerContext *context,
                              const pds::BGPPeerAfRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_peer_afi_safi(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerAfDelete(ServerContext *context,
                              const pds::BGPPeerAfRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
    //Delete request
  
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerAfGet(ServerContext *context,
                              const pds::BGPPeerAfRequest *req,
                              pds::BGPPeerAfResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
    //Get request
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerAfUpdate(ServerContext *context,
                              const pds::BGPPeerAfRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_peer_afi_safi(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerSpecCreate(ServerContext *context,
                              const pds::BGPPeerRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_peer(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerSpecDelete(ServerContext *context,
                              const pds::BGPPeerRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
    //Delete request
  
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerSpecGet(ServerContext *context,
                              const pds::BGPPeerRequest *req,
                              pds::BGPPeerSpecResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
    //Get request
  
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 






Status
BGPSvcImpl::BGPPeerSpecUpdate(ServerContext *context,
                              const pds::BGPPeerRequest *req,
                              pds::BGPResponse *resp) {
    if (req == NULL) {
        resp->set_apistatus(types::ApiStatus::API_STATUS_INVALID_ARG);
        return Status::CANCELLED;
    }
    PDSA_START_TXN(0x100);
  
  
  
    //Create/Update request
    
      
      
    for (int i = 0; i < req->request_size(); i ++) {
        auto proto_spec = req->request(i);
        pdsa_set_amb_bgp_peer(proto_spec, AMB_ROW_ACTIVE);
    }
    
  
    PDSA_END_TXN(0x100);

    resp->set_apistatus(types::ApiStatus::API_STATUS_OK);
    return Status::OK;
} 



