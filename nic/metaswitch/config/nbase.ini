;
;*******************************************************************************
;* NBASE INITIALIZATION FILE - DEBUG VERIFICATION VERSION                      *
;*   - must be renamed to nbase.ini before use                                 *
;*   - searched for in the following directories                               *
;*     1) Current directory                                                    *
;*     2) C:\                                                                  *
;*                                                                             *
;* Comments begin with the character ';'                                       *
;*                                                                             *
;*******************************************************************************
;
;
;
; The following entries relate to all N-BASEv2 products, including DC-ATM.

  [dcatm]

; The level of internal tracing ranging from 0, all tracing, to 10, no tracing.
; (Anything over 10 gives no tracing)
; Internal trace is compiled out in release builds by default.

    nbb_trace_level =

; The level of internal tracing used within calls to product verification
; functions.  This replaces the value of nbb_trace_level within those calls.
; Verification functions are only called if verify_memory (see below) is YES.
; This value supports the same value range as nbb_trace_level, and it may be
; set to any value equal to or higher than nbb_trace_level.
; Setting this level to be higher than nbb_trace_level will reduce the trace
; generated by verification routines, which may otherwise obscure more
; important trace from the product.  It will also make the product run faster.
; Internal trace (which includes verification tracing) is compiled out in
; release builds by default.

    nbb_trace_level_verify =

; When nbb_trace_level or nbb_trace_level_verify are set to less than 10, the
; default is to generate tracing at that level and above from all source files.
; Using the following parameters, tracing can be restricted to source files
; which match, or do not match, certain prefixes.
;
; For example, "filter_in = ssg" will cause internal tracing to be generated
; from signalling files only.  If "filter_out = ssgproc" is also included, then
; tracing will be generated from all signalling files except ssgproc.  If no
; filter_in is set, but filter_out is provided, then tracing will be generated
; from all files except those matching filter_out.
;
; To list multiple file prefixes, use a comma separator with no intervening
; spaces.  A maximum of 20 filter strings can be specified.
; For example, "filter_in = ssg,ccc,ces"
;
; In addition to specifying file prefixes to filter in or out, each filename
; prefix may optionally specify a higher trace level for that prefix, which
; replaces the trace level set in nbb_trace_level and nbb_trace_level_verify.
; This is represented by placing a colon after the filter term, followed by the
; desired level of tracing.
; For example, "filter_in = ssg:2" or "filter_out = nbbt:6".

    filter_in =
    filter_out =

; It is also possible to filter the internal tracing output by function name
; instead of by file name (above).  This is configured below, using exactly
; the same same structure as file filtering, except function names/prefixes
; should be specified instead of file names/prefixes.
;
; If function filtering is enabled, file name filtering will be automatically
; disabled.  For example, the following will filter in all functions that match
; 'nbb_time' at level 1, everything else is filtered out (in other words,
; filter_in is ignored):
;
;  "filter_in = ssn:6"
;  "filter_in_function = nbb_time:1"

    filter_in_function =
    filter_out_function =

; Files for internal tracing, IPS tracing, problem determination logs,
; performance tracing, memory tracing and internal dumping respectively.
; Live tracing always goes to <filename>.log whilst the older tracing is
; transferred to <filename>.bak when the configured size limit is reached.

    trace_file  = /var/log/pensando/inttrc
    ips_file    = /var/log/pensando/ipstrc
    pd_file     = /var/log/pensando/pdtrc
    per_file    = /var/log/pensando/pertrc
    mem_file    = /var/log/pensando/memtrc
    dmp_file    = /var/log/pensando/dmptrc

; Maximum size (in KB) of output files for internal tracing, IPS tracing,
; problem determination, performance tracing and memory tracing logs
; respectively.  When the <filename>.log file exceeds this size, its contents
; are moved to <filename>.bak.

    trace_size  = 10000
    ips_size    = 10000
    pd_size     = 10000
    per_size    = 10000
    mem_size    = 10000

; Memory buffer sizes (in KB) for internal tracing, IPS tracing,
; problem determination and performance tracing respectively.  When
; the memory buffer size for a given type of tracing is non-zero, the
; N-BASE will buffer that kind of tracing in memory instead of writing
; it directly to file, using a circular buffer of up to the size
; specified.  Buffered diagnostics are flushed to file when the N-BASE
; terminates.  The default for the following options is 0, so setting
; them explicitly to 0 has the same effect as if they were not present
; in this file at all, or as if they were commented out.  If non-zero,
; these must be greater than or equal to twice the value of the
; NBB_MB_MIN_BLOCK_SIZE constant (defined in nbase/base/nbbicnst.h);
; otherwise they are equivalent to 0.

    int_buf_size = 0
    ips_buf_size = 0
    pd_buf_size  = 0
    per_buf_size = 0

; IPS tracing filtering at source.  This feature allows you to limit the IPSs
; being recorded in the ipstrc.log or IPS in-memory buffer  to those you wish
; to monitor. Setting the filter_ins limits the IPS tracing to the selected IPS
; types and/or those IPSs sent to/from the selected N-Base processes.
; Setting the filter_outs avoids the selected IPS types and/or those IPSs sent
; to/from the selected N-Base processes being traced.
; If a filter_in option is set, the corresponding filter_out option is ignored.
;
; IPS types and N-Base process IDs to be filtered should be listed using their
; hex values, separated by a comma (,) when more than one is listed.
; The use of the hex specifier "0x" is optional.  Preceding zeros are optional.
; Trailing zeros are mandatory.
; A family of IPS types, or N-Base processes, which share the same prefix can be
; filtered by specifying the prefix, followed by 0s.
;
; For example, "ips_type_filter_out = 00000000,01000000"  will remove all global
; and N-Base signals.
; "ips_proc_filter_in = 05000000" will show all signals flowing into, out of,
; and within PNNI.

    ips_type_filter_in =
    ips_type_filter_out =
    ips_proc_filter_in =
    ips_proc_filter_out =

; Maximum IPS record size (in bytes).  IPS records greater than this size will
; be truncated when traced to the log file/buffer.
;
; This feature allows you filter out IPS records above a maximum size, which
; can prevent a small number of large IPS records filling the IPS trace and
; causing the trace to wrap.  If a single IPS record is larger than this size,
; the IPS trace will record the fact that the IPS was not traced, along with
; it's IPS type and size.  A size of 0 will mean that no such filtering is
; applied

    max_single_ips_size = 1048576

; IPS monitoring configuration
;
; This feature allows very lightweight IPS monitoring that can be used to
; diagnose issues seen when the system is running under a high load, and full
; IPS tracing is not possible.
;
; ipsmon_size specifies the size of the output file in KB.  The default of 0
; means that IPS monitoring is turned off.
;
; ipsmon_file specifies the name of the output file.
;
; ipsmon_interval specifies the interval, in milliseconds, at which IPS counts
; are written to the file (when IPS monitoring is turned on).

    ipsmon_size = 0
    ipsmon_file = ipsmon
    ipsmon_interval = 1000

; PD monitoring configuration
;
; This feature allows very lightweight PD log monitoring that can be used to
; diagnose issues seen when the system is running under a high load, and full
; PD logging at a low threshold is not possible.
;
; pdmon_size specifies the size of the output file in KB.  The default of 0
; means that PD monitoring is turned off.
;
; pdmon_file specifies the name of the output file.
;
; pdmon_interval specifies the interval, in milliseconds, at which PD log
; counts are written to the file (when PD monitoring is turned on).

    pdmon_size = 0
    pdmon_file = pdmon
    pdmon_interval = 1000

; Whether direct_send is enabled

    direct_send = NO

; Whether event tracing is enabled - event tracing is NOT compiled out when
; NBB_DEBUG is undefined.  Enabling event tracing forces IPS tracing to be on.

    event_tracing = YES

; Whether timer tracing is enabled - timer tracing is NOT compiled out when
; NBB_DEBUG is undefined.

    timer_tracing = YES

; Whether IPS tracing is enabled - IPS tracing is NOT compiled out when
; NBB_DEBUG is undefined.

    ips_tracing = YES

; Seed for random number generator - Setting "rand_seed = 0" causes the
; N-BASE to use a seed based on the current date and time.

    rand_seed   = 0

; Whether performance tracing is enabled

    per_tracing = NO

; Whether memory usage tracing is enabled - memory usage tracing is NOT
; compiled out when NBB_DEBUG is undefined.

    mem_usage_tracing = NO

; The frequency (in seconds) with which the N-BASE should call
; NBB_MM_LOG_USAGE() to log the output from memory usage tracing.  This field
; only has effect when mem_usage_tracing = YES.

     mem_usage_frequency = 30

; Whether memory tuning tracing is enabled - memory tuning tracing is NOT
; compiled out when NBB_DEBUG is undefined.

    mem_tuning_tracing = NO

; Whether memory allocation tracing should be included in the IPS trace
; file.  This feature is compiled out when NBB_DEBUG is undefined.

    mem_tracing_ips = NO

; Whether memory verification is enabled - memory verification is only
; performed if NBB_DEBUG is defined

    verify_memory = YES

; The frequency at which to perform N-BASE memory verification for a process.
; For example, verify_mem_per_n_schedules = 5 means memory verification is
; performed once every 5 times that the process is scheduled.
; This option is only applicable when the memory verification is switched on
; (verify_memory = yes).

    verify_mem_per_n_schedules = 1

; Whether memory checking is enabled - memory is only checked for guard bytes
; if NBB_DEBUG is defined

    check_memory = NO

; Whether ASSERT should be printed to screen as a dialog box, interrupting
; the process.
; When set to NO the assert will be printed to the standard output and the
; process will exit normally.
; When set to YES the assert will be passed through to the C assert function.
; On Win32 this causes the C runtime library to display a dialog box and
; optionally invoke the JIT debugger.  On Unix this forces the program to
; core dump.
; When set to TRAP the assert will force a trap by causing a deliberate
; protection fault.  On Win32 this invokes the JIT debugger without the
; C runtime library displaying a dialog box.  This is especially useful
; when using a tool such as Dr. Watson to collect crash dumps, as it
; allows crash dumps to be collected without manual intervention.
; When set to CONTINUE the assert will be printed to the standard output and
; execution will continue.

    assert_dlg  = NO

; Whether pointers into N-BASE memory should be checked for validity.

    assert_pointer = NO

; Whether the contents of the memory allocated by each N-BASE process should
; be dumped to disk after an ASSERT.

    dump_on_assert = NO

; Which types of PD logs are sent to the log file.  Determines the 'minimum'
; level of logging which is output. Can be set as NONE, PROBLEM, EXCEPTION
; or AUDIT.  The log types that will be output for each setting are:
; NONE - no logs output
; PROBLEM - just problem logs
; EXCEPTION - problem and exception logs
; AUDIT - problem, exception and audit logs.

    pd_log_level = AUDIT

; The amount of detail sent to the log file.  SUMMARY gives type of logging
; and identifier (1 line).  FULL gives all the PD log information.

    pd_log_detail = FULL

; Comma separated list of up to 10 process types and product ID's, in hex, for
; filtering in/out certain PD logs for printing to the log file
; (for example: 38010000,11020000).
; If a set of processes/products are filtered in, then only logs for those
; processes/products are included.  No logs from any other processes/products
; are included, unless they are specifically filtered in by message ID.
; Note that process type log filtering works in combination with log level
; ('pd_log_level') and dev log ('dev_logging') filtering.
;
; For example, to filter in all logs from process type 0x38020000 and nothing
; else, set:
;
; 'pd_log_level = AUDIT'
; 'dev_logging = YES'
; 'pd_log_filter_in_proc_type = 38020000'
;
; If 'pd_log_level' were set to 'EXCEPTION' and 'dev_logging' were set to 'NO'
; then only EXCEPTION and PROBLEM logs from process type 0x38020000 would be
; included.

    pd_log_filter_in_proc_type =
    pd_log_filter_out_proc_type =

; Comma separated list of message IDs, in hex, for filtering in/out certain
; PD logs for printing to the log file (e.g. 26040021,11020002).  A maximum of
; 10 message ID's can be filtered.  Any messages filtered in/out by message ID
; will be included in/excluded from the log file no matter what.
; Note, the message number printed to the log file is in decimal but the
; message ID is in hex.  For example, the header of the following message:
; **** AUDIT       0x4702 - 49   (0000) **** I:003f3865 F:00000002
; Has a message ID of 47020031 (hex) not 47020049 (decimal).

    pd_log_filter_in =
    pd_log_filter_out =

; Whether Developer logs are enabled - Developer logs are NOT compiled out
; when NBB_DEBUG is undefined.  dev_logging = YES sends the logs to the file.
; console_dev_logging = YES sends the logs to the console.  syslog_dev_logging
; = YES sends the logs to syslog.

    dev_logging = NO
    console_dev_logging = NO
    syslog_dev_logging = NO

; Whether verbose logging is enabled, for output to the log file or console.
; Unless this is set to YES, logs with the PD_VERBOSE_INFO flag set will not
; be output.

    verbose_logging = YES

; Whether excess whitespace should be stripped from PD logs.
; This is useful when the underlying logging subsystem outputs
; PD logs as a single line (note however that this option will only strip
; duplicate spaces from log messages, newline characters are preserved).

    log_strip_whitespace = NO

; Which types of PD logs are sent to the standard output (console logging) and
; syslog (syslog logging).  Determines the 'minimum' level of logging which is
; output. Can be set as NONE, PROBLEM, EXCEPTION or AUDIT.  The log types that
; will be output for each setting are:
; NONE - no logs output
; PROBLEM - just problem logs
; EXCEPTION - problem and exception logs
; AUDIT - problem, exception and audit logs.

    console_log_level = NONE
    syslog_log_level = NONE

; The amount of detail sent to the standard output (console logging) and
; syslog.  SUMMARY gives type of logging and identifier (1 line).  FULL gives
; all the PD log information.

    console_log_detail = SUMMARY
    syslog_log_detail = SUMMARY

; Comma separated list of up to 10 process types and product ID's, in hex, for
; filtering in/out certain PD logs for printing to the log file
; (for example: 38010000,11020000).
; If a set of processes/products are filtered in, then only logs for those
; processes/products are included.  No logs from any other processes/products
; are included, unless they are specifically filtered in by message ID.
; Note that process type log filtering works in combination with log level
; ('console_log_level / syslog_log_level') and dev log ('console_dev_logging /
; syslog_dev_logging') filtering.
;
; For example, to filter in all logs from process type 0x38020000 and nothing
; else, set:
;
; 'console_log_level = AUDIT'
; 'console_dev_logging = YES'
; 'console_log_filter_in_proc_type = 38020000'
;
; If 'console_log_level' were set to 'EXCEPTION' and 'console_dev_logging' were
; set to 'NO' then only EXCEPTION and PROBLEM logs from process type 0x38020000
; would be included.
;
; The same applies to syslog logging.

    console_log_filter_in_proc_type =
    console_log_filter_out_proc_type =
    syslog_log_filter_in_proc_type =
    syslog_log_filter_out_proc_type =

; Comma separated list of message IDs, in hex, for filtering in/out certain
; PD logs for printing to the standard output and syslog (e.g. 26040021,
; 11020002).  A maximum of 10 message ID's can be filtered.  Any messages
; filtered in/out by message ID will be included in/excluded from the standard
; output no matter what.
; Note, the message number printed to the standard output and syslog is in
; decimal but the message ID is in hex.  For example, the header of the
; following message:
; **** AUDIT       0x4702 - 49   (0000) **** I:003f3865 F:00000002
; Has a message ID of 47020031 (hex) not 47020049 (decimal).

    console_log_filter_in =
    console_log_filter_out =
    syslog_log_filter_in =
    syslog_log_filter_out =

; Whether VRF names are included in internal, IPS and PD logging

    int_trace_vrf_name = NO
    ips_trace_vrf_name = YES
    pd_trace_vrf_name = YES

; The following configuration controls PD log streams.
;
; When multiple PD log streams are defined, PD logs will be output to all
; matching streams.  Each stream is defined using the following keywords.  In
; each case the # is replaced with a number between 1 and 8 corresponding to
; the stream ID.
;
; Note that the configuration parameters are identical to those for PD logs
; written to file, but are all followed by "_#".  For a description of each
; parameter, refer to the corresponding PD log file parameter description.
;
; - pd_file_#
; - pd_size_#
; - pd_buf_size_#
;
; PD log streams are filtered using the same parameters as for PD logs written
; to file, followed by "_#". The following filtering parameters can all be
; applied to PD log streams.  For a description of each parameter, refer to the
; corresponding PD log file filtering parameter description.
;
; - pd_log_filter_in_proc_type_# (default none)
; - pd_log_filter_out_proc_type_# (default none)
; - pd_log_filter_in_# (default none)
; - pd_log_filter_out_# (default none)
; - dev_logging_# (default NO)
; - pd_log_level_# (default NONE)
; - pd_log_detail_# (default FULL)
; - pd_trace_vrf_name_# (default YES)
; - pd_log_filter_in_vrf_name_# (default none)
; - pd_log_filter_out_vrf_name_# (default none)
;
; For example, the following configuration for stream 1 causes all PD logs of
; severity PROBLEM and EXCEPTION from OSPF and BGP to be output to file
; c:\ospf_bgp_debug.log with summary detail.
;
; pd_file_1 = c:\ospf_bgp_debug
; pd_size_1 = 10000
; pd_log_filter_in_proc_type_1 = 3E000000,41000000
; pd_log_level_1 = EXCEPTION
; pd_log_detail_1 = SUMMARY

; Whether the system supports a persistent storage stub (PSS).  PSS requires
; special handling by the scheduler to manage a PSS stub.
; The sample PSS stub (in the stubs\aps directory) supports
; - a file-system based persistent storage database (PSD)
; - the SIXA sample application for DC-SIP.
; The sample code will need to be modified to support other protocols,
; applications or PSD implementations.

    pss_startup = NO

; Comma separated list of FTE process types that support PSS (to allow regular
; and PSS based fault tolerance in the same N-BASE).
; For example, to specify that SIPT, SIPH and SIPU support PSS set this
; to "pss_process_types = 0x38070000,0x38020000,0x38010000"

    pss_process_types =

; Comma separated list of <message ID>,<sub code>,<number allowed> for PD logs
; that will cause diagnostics to stop.  Up to 10 events can be specified.
; For example "0x16010035,ALL,10,0x3b010175,0,3" causes the diagnostics to
; stop after the 10th occurrence of any instance of the message 0x16010035 or
; the third occurrence of the instance of message 0x3b010175 with sub code 0.

    diagnostics_stop_logs =

; The number of assertion failures after which diagnostics will stop.  If this
; is set to '0' diagnostics will not stop after any asserts.

    diagnostics_stop_on_assert = 0

; Whether to produce separate internal trace files for each N-BASE process.

    trace_per_process = NO

; Whether global in-memory FSM tracing is enabled

    in_mem_diags = YES

; Whether per-control-block in-memory FSM tracing is enabled (For those
; products and components for which support has been added, this controls
; whether FSM tracing is stored within the control block that corresponds to a
; particular FSM).  FSM tracing is always stored globally according to
; in_mem_diags as well, irrespective of the setting of this field

    per_cb_in_mem_diags = NO

; -----------------------------------------------------------------------------
; Multi-threaded N-BASE configuration
; -----------------------------------------------------------------------------

; The number of thread groups to use.  Each N-BASE process is only allowed to
; be scheduled by threads from a single group.
; -  For a fully symmetric system, run just a single thread group for all
;    processes (default).
; -  On some platforms a performance gain is possible by restricting processes
;    to different thread groups.
; -  The maximum number of thread groups is 16 (NBB_MAX_THREAD_GROUPS).
; -  Thread groups can also be restricted to run on a subset of the available
;    CPU cores.  See thread_group_*_cpu_affinity below.

   num_thread_groups = 1

; The number of scheduling threads to run in each thread group.  For back-
; compatibility, this can also be configured using "num_threads = ".  Typically
; this should be set to the number of cores available to each thread group.

   num_threads_per_group = 1

; List of N-BASE process types that scheduling threads from each group are
; allowed to schedule.
; -  This is a comma separate list of hex numbers that represent process types.
;    For example 0x38010000,0x38020000
; -  A given process type must appear only once across all thread groups.
;    Duplicates will be ignored.
; -  If a process type is not listed by any thread group it will be assigned
;    an arbitrary thread group (default).

  thread_group_1_process_types =
  thread_group_2_process_types =
  thread_group_3_process_types =
  thread_group_4_process_types =
  thread_group_5_process_types =
  thread_group_6_process_types =
  thread_group_7_process_types =
  thread_group_8_process_types =
  thread_group_9_process_types =
  thread_group_10_process_types =
  thread_group_11_process_types =
  thread_group_12_process_types =
  thread_group_13_process_types =
  thread_group_14_process_types =
  thread_group_15_process_types =
  thread_group_16_process_types =

; List of CPUs or cores that scheduling threads from each group are allowed to
; run on and that the file descriptor thread (which runs stub initiators) is
; allowed to run on.  The interpretation of this list is platform dependent.
; -  On Linux it contains CPU indices.
;
; Multiple threads are allowed to be run on the same CPU or core.  By default
; these lists are empty meaning that the OS is left to decide which CPUs or
; cores all threads are run on.

  file_descr_thread_cpu_affinity =
  thread_group_1_cpu_affinity =
  thread_group_2_cpu_affinity =
  thread_group_3_cpu_affinity =
  thread_group_4_cpu_affinity =
  thread_group_5_cpu_affinity =
  thread_group_6_cpu_affinity =
  thread_group_7_cpu_affinity =
  thread_group_8_cpu_affinity =
  thread_group_9_cpu_affinity =
  thread_group_10_cpu_affinity =
  thread_group_11_cpu_affinity =
  thread_group_12_cpu_affinity =
  thread_group_13_cpu_affinity =
  thread_group_14_cpu_affinity =
  thread_group_15_cpu_affinity =
  thread_group_16_cpu_affinity =

; Multithreaded performance tracing.  Note that this is compiled out by default
; and the configuration will be ignored unless NBB_MT_PERF is defined.
;
; -  mt_perf_file: output file name (default mtperf)
; -  mt_perf_size: output file size in KB (default 250KB)
; -  mt_perf_interval: period between statistic dumps in ms (default 1000)
; -  mt_perf_level: trace detail level ranging from 0 (all) to 10 (none)
;
; When compiled in, this feature can be turned off by either setting the file
; size to 0 or the detail level to 10.
;
; When turned on, and the output file fills up, it is transfered to
; <mt_perf_file>.bak (as with other tracing) and new output goes to a fresh
; output file.

  mt_perf_file = mtperf
  mt_perf_size = 250
  mt_perf_interval = 1000
  mt_perf_level = 10

