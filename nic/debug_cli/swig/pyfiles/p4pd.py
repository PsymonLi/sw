# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_p4pd', [dirname(__file__)])
        except ImportError:
            import _p4pd
            return _p4pd
        if fp is not None:
            try:
                _mod = imp.load_module('_p4pd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _p4pd = swig_import_helper()
    del swig_import_helper
else:
    import _p4pd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


P4PD_SUCCESS = _p4pd.P4PD_SUCCESS
P4PD_FAIL = _p4pd.P4PD_FAIL
class twice_nat_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twice_nat_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twice_nat_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nat_metadata_twice_nat_idx"] = _p4pd.twice_nat_swkey_t_nat_metadata_twice_nat_idx_set
    __swig_getmethods__["nat_metadata_twice_nat_idx"] = _p4pd.twice_nat_swkey_t_nat_metadata_twice_nat_idx_get
    if _newclass:nat_metadata_twice_nat_idx = _swig_property(_p4pd.twice_nat_swkey_t_nat_metadata_twice_nat_idx_get, _p4pd.twice_nat_swkey_t_nat_metadata_twice_nat_idx_set)
    def __init__(self): 
        this = _p4pd.new_twice_nat_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_twice_nat_swkey_t
    __del__ = lambda self : None;
twice_nat_swkey_t_swigregister = _p4pd.twice_nat_swkey_t_swigregister
twice_nat_swkey_t_swigregister(twice_nat_swkey_t)

TWICE_NAT_NOP_ID = _p4pd.TWICE_NAT_NOP_ID
TWICE_NAT_TWICE_NAT_REWRITE_INFO_ID = _p4pd.TWICE_NAT_TWICE_NAT_REWRITE_INFO_ID
TWICE_NAT_MAX_ID = _p4pd.TWICE_NAT_MAX_ID
class twice_nat_twice_nat_rewrite_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twice_nat_twice_nat_rewrite_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twice_nat_twice_nat_rewrite_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip"] = _p4pd.twice_nat_twice_nat_rewrite_info_t_ip_set
    __swig_getmethods__["ip"] = _p4pd.twice_nat_twice_nat_rewrite_info_t_ip_get
    if _newclass:ip = _swig_property(_p4pd.twice_nat_twice_nat_rewrite_info_t_ip_get, _p4pd.twice_nat_twice_nat_rewrite_info_t_ip_set)
    __swig_setmethods__["l4_port"] = _p4pd.twice_nat_twice_nat_rewrite_info_t_l4_port_set
    __swig_getmethods__["l4_port"] = _p4pd.twice_nat_twice_nat_rewrite_info_t_l4_port_get
    if _newclass:l4_port = _swig_property(_p4pd.twice_nat_twice_nat_rewrite_info_t_l4_port_get, _p4pd.twice_nat_twice_nat_rewrite_info_t_l4_port_set)
    def __init__(self): 
        this = _p4pd.new_twice_nat_twice_nat_rewrite_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_twice_nat_twice_nat_rewrite_info_t
    __del__ = lambda self : None;
twice_nat_twice_nat_rewrite_info_t_swigregister = _p4pd.twice_nat_twice_nat_rewrite_info_t_swigregister
twice_nat_twice_nat_rewrite_info_t_swigregister(twice_nat_twice_nat_rewrite_info_t)

class twice_nat_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twice_nat_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twice_nat_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["twice_nat_twice_nat_rewrite_info"] = _p4pd.twice_nat_action_union_t_twice_nat_twice_nat_rewrite_info_set
    __swig_getmethods__["twice_nat_twice_nat_rewrite_info"] = _p4pd.twice_nat_action_union_t_twice_nat_twice_nat_rewrite_info_get
    if _newclass:twice_nat_twice_nat_rewrite_info = _swig_property(_p4pd.twice_nat_action_union_t_twice_nat_twice_nat_rewrite_info_get, _p4pd.twice_nat_action_union_t_twice_nat_twice_nat_rewrite_info_set)
    def __init__(self): 
        this = _p4pd.new_twice_nat_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_twice_nat_action_union_t
    __del__ = lambda self : None;
twice_nat_action_union_t_swigregister = _p4pd.twice_nat_action_union_t_swigregister
twice_nat_action_union_t_swigregister(twice_nat_action_union_t)

class twice_nat_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twice_nat_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twice_nat_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.twice_nat_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.twice_nat_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.twice_nat_actiondata_actionid_get, _p4pd.twice_nat_actiondata_actionid_set)
    __swig_setmethods__["twice_nat_action_u"] = _p4pd.twice_nat_actiondata_twice_nat_action_u_set
    __swig_getmethods__["twice_nat_action_u"] = _p4pd.twice_nat_actiondata_twice_nat_action_u_get
    if _newclass:twice_nat_action_u = _swig_property(_p4pd.twice_nat_actiondata_twice_nat_action_u_get, _p4pd.twice_nat_actiondata_twice_nat_action_u_set)
    def __init__(self): 
        this = _p4pd.new_twice_nat_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_twice_nat_actiondata
    __del__ = lambda self : None;
twice_nat_actiondata_swigregister = _p4pd.twice_nat_actiondata_swigregister
twice_nat_actiondata_swigregister(twice_nat_actiondata)

class copp_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["copp_metadata_policer_index"] = _p4pd.copp_action_swkey_t_copp_metadata_policer_index_set
    __swig_getmethods__["copp_metadata_policer_index"] = _p4pd.copp_action_swkey_t_copp_metadata_policer_index_get
    if _newclass:copp_metadata_policer_index = _swig_property(_p4pd.copp_action_swkey_t_copp_metadata_policer_index_get, _p4pd.copp_action_swkey_t_copp_metadata_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_copp_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_action_swkey_t
    __del__ = lambda self : None;
copp_action_swkey_t_swigregister = _p4pd.copp_action_swkey_t_swigregister
copp_action_swkey_t_swigregister(copp_action_swkey_t)

COPP_ACTION_COPP_ACTION_ID = _p4pd.COPP_ACTION_COPP_ACTION_ID
COPP_ACTION_MAX_ID = _p4pd.COPP_ACTION_MAX_ID
class copp_action_copp_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_action_copp_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_action_copp_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["permitted_packets"] = _p4pd.copp_action_copp_action_t_permitted_packets_set
    __swig_getmethods__["permitted_packets"] = _p4pd.copp_action_copp_action_t_permitted_packets_get
    if _newclass:permitted_packets = _swig_property(_p4pd.copp_action_copp_action_t_permitted_packets_get, _p4pd.copp_action_copp_action_t_permitted_packets_set)
    __swig_setmethods__["permitted_bytes"] = _p4pd.copp_action_copp_action_t_permitted_bytes_set
    __swig_getmethods__["permitted_bytes"] = _p4pd.copp_action_copp_action_t_permitted_bytes_get
    if _newclass:permitted_bytes = _swig_property(_p4pd.copp_action_copp_action_t_permitted_bytes_get, _p4pd.copp_action_copp_action_t_permitted_bytes_set)
    __swig_setmethods__["denied_packets"] = _p4pd.copp_action_copp_action_t_denied_packets_set
    __swig_getmethods__["denied_packets"] = _p4pd.copp_action_copp_action_t_denied_packets_get
    if _newclass:denied_packets = _swig_property(_p4pd.copp_action_copp_action_t_denied_packets_get, _p4pd.copp_action_copp_action_t_denied_packets_set)
    __swig_setmethods__["denied_bytes"] = _p4pd.copp_action_copp_action_t_denied_bytes_set
    __swig_getmethods__["denied_bytes"] = _p4pd.copp_action_copp_action_t_denied_bytes_get
    if _newclass:denied_bytes = _swig_property(_p4pd.copp_action_copp_action_t_denied_bytes_get, _p4pd.copp_action_copp_action_t_denied_bytes_set)
    def __init__(self): 
        this = _p4pd.new_copp_action_copp_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_action_copp_action_t
    __del__ = lambda self : None;
copp_action_copp_action_t_swigregister = _p4pd.copp_action_copp_action_t_swigregister
copp_action_copp_action_t_swigregister(copp_action_copp_action_t)

class copp_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["copp_action_copp_action"] = _p4pd.copp_action_action_union_t_copp_action_copp_action_set
    __swig_getmethods__["copp_action_copp_action"] = _p4pd.copp_action_action_union_t_copp_action_copp_action_get
    if _newclass:copp_action_copp_action = _swig_property(_p4pd.copp_action_action_union_t_copp_action_copp_action_get, _p4pd.copp_action_action_union_t_copp_action_copp_action_set)
    def __init__(self): 
        this = _p4pd.new_copp_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_action_action_union_t
    __del__ = lambda self : None;
copp_action_action_union_t_swigregister = _p4pd.copp_action_action_union_t_swigregister
copp_action_action_union_t_swigregister(copp_action_action_union_t)

class copp_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.copp_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.copp_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.copp_action_actiondata_actionid_get, _p4pd.copp_action_actiondata_actionid_set)
    __swig_setmethods__["copp_action_action_u"] = _p4pd.copp_action_actiondata_copp_action_action_u_set
    __swig_getmethods__["copp_action_action_u"] = _p4pd.copp_action_actiondata_copp_action_action_u_get
    if _newclass:copp_action_action_u = _swig_property(_p4pd.copp_action_actiondata_copp_action_action_u_get, _p4pd.copp_action_actiondata_copp_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_copp_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_action_actiondata
    __del__ = lambda self : None;
copp_action_actiondata_swigregister = _p4pd.copp_action_actiondata_swigregister
copp_action_actiondata_swigregister(copp_action_actiondata)

class rewrite_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rewrite_metadata_rewrite_index"] = _p4pd.rewrite_swkey_t_rewrite_metadata_rewrite_index_set
    __swig_getmethods__["rewrite_metadata_rewrite_index"] = _p4pd.rewrite_swkey_t_rewrite_metadata_rewrite_index_get
    if _newclass:rewrite_metadata_rewrite_index = _swig_property(_p4pd.rewrite_swkey_t_rewrite_metadata_rewrite_index_get, _p4pd.rewrite_swkey_t_rewrite_metadata_rewrite_index_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_swkey_t
    __del__ = lambda self : None;
rewrite_swkey_t_swigregister = _p4pd.rewrite_swkey_t_swigregister
rewrite_swkey_t_swigregister(rewrite_swkey_t)

REWRITE_NOP_ID = _p4pd.REWRITE_NOP_ID
REWRITE_REWRITE_ID = _p4pd.REWRITE_REWRITE_ID
REWRITE_IPV4_NAT_SRC_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_SRC_REWRITE_ID
REWRITE_IPV4_NAT_DST_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_DST_REWRITE_ID
REWRITE_IPV4_NAT_SRC_UDP_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_SRC_UDP_REWRITE_ID
REWRITE_IPV4_NAT_DST_UDP_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_DST_UDP_REWRITE_ID
REWRITE_IPV4_NAT_SRC_TCP_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_SRC_TCP_REWRITE_ID
REWRITE_IPV4_NAT_DST_TCP_REWRITE_ID = _p4pd.REWRITE_IPV4_NAT_DST_TCP_REWRITE_ID
REWRITE_IPV4_TWICE_NAT_REWRITE_ID = _p4pd.REWRITE_IPV4_TWICE_NAT_REWRITE_ID
REWRITE_IPV4_TWICE_NAT_UDP_REWRITE_ID = _p4pd.REWRITE_IPV4_TWICE_NAT_UDP_REWRITE_ID
REWRITE_IPV4_TWICE_NAT_TCP_REWRITE_ID = _p4pd.REWRITE_IPV4_TWICE_NAT_TCP_REWRITE_ID
REWRITE_IPV6_NAT_SRC_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_SRC_REWRITE_ID
REWRITE_IPV6_NAT_DST_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_DST_REWRITE_ID
REWRITE_IPV6_NAT_SRC_UDP_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_SRC_UDP_REWRITE_ID
REWRITE_IPV6_NAT_DST_UDP_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_DST_UDP_REWRITE_ID
REWRITE_IPV6_NAT_SRC_TCP_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_SRC_TCP_REWRITE_ID
REWRITE_IPV6_NAT_DST_TCP_REWRITE_ID = _p4pd.REWRITE_IPV6_NAT_DST_TCP_REWRITE_ID
REWRITE_IPV6_TWICE_NAT_REWRITE_ID = _p4pd.REWRITE_IPV6_TWICE_NAT_REWRITE_ID
REWRITE_IPV6_TWICE_NAT_UDP_REWRITE_ID = _p4pd.REWRITE_IPV6_TWICE_NAT_UDP_REWRITE_ID
REWRITE_IPV6_TWICE_NAT_TCP_REWRITE_ID = _p4pd.REWRITE_IPV6_TWICE_NAT_TCP_REWRITE_ID
REWRITE_MAX_ID = _p4pd.REWRITE_MAX_ID
class rewrite_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_rewrite_t_mac_sa_get, _p4pd.rewrite_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_rewrite_t_mac_da_get, _p4pd.rewrite_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_rewrite_t
    __del__ = lambda self : None;
rewrite_rewrite_t_swigregister = _p4pd.rewrite_rewrite_t_swigregister
rewrite_rewrite_t_swigregister(rewrite_rewrite_t)

class rewrite_ipv4_nat_src_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_src_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_src_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_src_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_src_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_src_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_src_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_src_rewrite_t_swigregister
rewrite_ipv4_nat_src_rewrite_t_swigregister(rewrite_ipv4_nat_src_rewrite_t)

class rewrite_ipv4_nat_dst_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_dst_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_dst_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_dst_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_dst_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_dst_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_dst_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_dst_rewrite_t_swigregister
rewrite_ipv4_nat_dst_rewrite_t_swigregister(rewrite_ipv4_nat_dst_rewrite_t)

class rewrite_ipv4_nat_src_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_src_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_src_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_src_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_src_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_src_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_src_udp_rewrite_t_swigregister
rewrite_ipv4_nat_src_udp_rewrite_t_swigregister(rewrite_ipv4_nat_src_udp_rewrite_t)

class rewrite_ipv4_nat_dst_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_dst_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_dst_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_dst_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_dst_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_dst_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_dst_udp_rewrite_t_swigregister
rewrite_ipv4_nat_dst_udp_rewrite_t_swigregister(rewrite_ipv4_nat_dst_udp_rewrite_t)

class rewrite_ipv4_nat_src_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_src_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_src_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_src_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_src_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_src_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_src_tcp_rewrite_t_swigregister
rewrite_ipv4_nat_src_tcp_rewrite_t_swigregister(rewrite_ipv4_nat_src_tcp_rewrite_t)

class rewrite_ipv4_nat_dst_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_nat_dst_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_nat_dst_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_nat_dst_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_nat_dst_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_nat_dst_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_nat_dst_tcp_rewrite_t_swigregister
rewrite_ipv4_nat_dst_tcp_rewrite_t_swigregister(rewrite_ipv4_nat_dst_tcp_rewrite_t)

class rewrite_ipv4_twice_nat_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_twice_nat_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_twice_nat_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_twice_nat_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_twice_nat_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_twice_nat_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_twice_nat_rewrite_t_swigregister = _p4pd.rewrite_ipv4_twice_nat_rewrite_t_swigregister
rewrite_ipv4_twice_nat_rewrite_t_swigregister(rewrite_ipv4_twice_nat_rewrite_t)

class rewrite_ipv4_twice_nat_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_twice_nat_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_twice_nat_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_twice_nat_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_twice_nat_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_twice_nat_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_twice_nat_udp_rewrite_t_swigregister
rewrite_ipv4_twice_nat_udp_rewrite_t_swigregister(rewrite_ipv4_twice_nat_udp_rewrite_t)

class rewrite_ipv4_twice_nat_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv4_twice_nat_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv4_twice_nat_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv4_twice_nat_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv4_twice_nat_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv4_twice_nat_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv4_twice_nat_tcp_rewrite_t_swigregister
rewrite_ipv4_twice_nat_tcp_rewrite_t_swigregister(rewrite_ipv4_twice_nat_tcp_rewrite_t)

class rewrite_ipv6_nat_src_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_src_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_src_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_src_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_src_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_src_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_src_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_src_rewrite_t_swigregister
rewrite_ipv6_nat_src_rewrite_t_swigregister(rewrite_ipv6_nat_src_rewrite_t)

class rewrite_ipv6_nat_dst_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_dst_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_dst_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_dst_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_dst_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_dst_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_dst_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_dst_rewrite_t_swigregister
rewrite_ipv6_nat_dst_rewrite_t_swigregister(rewrite_ipv6_nat_dst_rewrite_t)

class rewrite_ipv6_nat_src_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_src_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_src_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_src_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_src_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_src_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_src_udp_rewrite_t_swigregister
rewrite_ipv6_nat_src_udp_rewrite_t_swigregister(rewrite_ipv6_nat_src_udp_rewrite_t)

class rewrite_ipv6_nat_dst_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_dst_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_dst_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_dst_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_dst_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_dst_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_dst_udp_rewrite_t_swigregister
rewrite_ipv6_nat_dst_udp_rewrite_t_swigregister(rewrite_ipv6_nat_dst_udp_rewrite_t)

class rewrite_ipv6_nat_src_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_src_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_src_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_src_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_src_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_src_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_src_tcp_rewrite_t_swigregister
rewrite_ipv6_nat_src_tcp_rewrite_t_swigregister(rewrite_ipv6_nat_src_tcp_rewrite_t)

class rewrite_ipv6_nat_dst_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_nat_dst_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_nat_dst_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_nat_dst_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_nat_dst_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_nat_dst_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_nat_dst_tcp_rewrite_t_swigregister
rewrite_ipv6_nat_dst_tcp_rewrite_t_swigregister(rewrite_ipv6_nat_dst_tcp_rewrite_t)

class rewrite_ipv6_twice_nat_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_twice_nat_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_twice_nat_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_twice_nat_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_twice_nat_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_twice_nat_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_twice_nat_rewrite_t_swigregister = _p4pd.rewrite_ipv6_twice_nat_rewrite_t_swigregister
rewrite_ipv6_twice_nat_rewrite_t_swigregister(rewrite_ipv6_twice_nat_rewrite_t)

class rewrite_ipv6_twice_nat_udp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_twice_nat_udp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_twice_nat_udp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_twice_nat_udp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_twice_nat_udp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_twice_nat_udp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_twice_nat_udp_rewrite_t_swigregister
rewrite_ipv6_twice_nat_udp_rewrite_t_swigregister(rewrite_ipv6_twice_nat_udp_rewrite_t)

class rewrite_ipv6_twice_nat_tcp_rewrite_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_ipv6_twice_nat_tcp_rewrite_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_ipv6_twice_nat_tcp_rewrite_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_sa_get, _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_da_get, _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_mac_da_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_ipv6_twice_nat_tcp_rewrite_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_ipv6_twice_nat_tcp_rewrite_t
    __del__ = lambda self : None;
rewrite_ipv6_twice_nat_tcp_rewrite_t_swigregister = _p4pd.rewrite_ipv6_twice_nat_tcp_rewrite_t_swigregister
rewrite_ipv6_twice_nat_tcp_rewrite_t_swigregister(rewrite_ipv6_twice_nat_tcp_rewrite_t)

class rewrite_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rewrite_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_rewrite_set
    __swig_getmethods__["rewrite_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_rewrite_get
    if _newclass:rewrite_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_src_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_src_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_rewrite_get
    if _newclass:rewrite_ipv4_nat_src_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_dst_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_dst_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_rewrite_get
    if _newclass:rewrite_ipv4_nat_dst_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_src_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_src_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_udp_rewrite_get
    if _newclass:rewrite_ipv4_nat_src_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_dst_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_dst_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_udp_rewrite_get
    if _newclass:rewrite_ipv4_nat_dst_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_src_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_src_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_tcp_rewrite_get
    if _newclass:rewrite_ipv4_nat_src_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_src_tcp_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_nat_dst_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_nat_dst_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_tcp_rewrite_get
    if _newclass:rewrite_ipv4_nat_dst_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_nat_dst_tcp_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_twice_nat_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_rewrite_set
    __swig_getmethods__["rewrite_ipv4_twice_nat_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_rewrite_get
    if _newclass:rewrite_ipv4_twice_nat_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_twice_nat_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_twice_nat_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_udp_rewrite_get
    if _newclass:rewrite_ipv4_twice_nat_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv4_twice_nat_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv4_twice_nat_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_tcp_rewrite_get
    if _newclass:rewrite_ipv4_twice_nat_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv4_twice_nat_tcp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_src_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_src_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_rewrite_get
    if _newclass:rewrite_ipv6_nat_src_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_dst_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_dst_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_rewrite_get
    if _newclass:rewrite_ipv6_nat_dst_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_src_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_src_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_udp_rewrite_get
    if _newclass:rewrite_ipv6_nat_src_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_dst_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_dst_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_udp_rewrite_get
    if _newclass:rewrite_ipv6_nat_dst_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_src_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_src_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_tcp_rewrite_get
    if _newclass:rewrite_ipv6_nat_src_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_src_tcp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_nat_dst_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_nat_dst_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_tcp_rewrite_get
    if _newclass:rewrite_ipv6_nat_dst_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_nat_dst_tcp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_twice_nat_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_rewrite_set
    __swig_getmethods__["rewrite_ipv6_twice_nat_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_rewrite_get
    if _newclass:rewrite_ipv6_twice_nat_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_twice_nat_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_udp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_twice_nat_udp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_udp_rewrite_get
    if _newclass:rewrite_ipv6_twice_nat_udp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_udp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_udp_rewrite_set)
    __swig_setmethods__["rewrite_ipv6_twice_nat_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_tcp_rewrite_set
    __swig_getmethods__["rewrite_ipv6_twice_nat_tcp_rewrite"] = _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_tcp_rewrite_get
    if _newclass:rewrite_ipv6_twice_nat_tcp_rewrite = _swig_property(_p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_tcp_rewrite_get, _p4pd.rewrite_action_union_t_rewrite_ipv6_twice_nat_tcp_rewrite_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_action_union_t
    __del__ = lambda self : None;
rewrite_action_union_t_swigregister = _p4pd.rewrite_action_union_t_swigregister
rewrite_action_union_t_swigregister(rewrite_action_union_t)

class rewrite_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rewrite_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rewrite_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.rewrite_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.rewrite_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.rewrite_actiondata_actionid_get, _p4pd.rewrite_actiondata_actionid_set)
    __swig_setmethods__["rewrite_action_u"] = _p4pd.rewrite_actiondata_rewrite_action_u_set
    __swig_getmethods__["rewrite_action_u"] = _p4pd.rewrite_actiondata_rewrite_action_u_get
    if _newclass:rewrite_action_u = _swig_property(_p4pd.rewrite_actiondata_rewrite_action_u_get, _p4pd.rewrite_actiondata_rewrite_action_u_set)
    def __init__(self): 
        this = _p4pd.new_rewrite_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_rewrite_actiondata
    __del__ = lambda self : None;
rewrite_actiondata_swigregister = _p4pd.rewrite_actiondata_swigregister
rewrite_actiondata_swigregister(rewrite_actiondata)

class ingress_tx_stats_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_tx_stats_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_tx_stats_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_src_lif"] = _p4pd.ingress_tx_stats_swkey_t_control_metadata_src_lif_set
    __swig_getmethods__["control_metadata_src_lif"] = _p4pd.ingress_tx_stats_swkey_t_control_metadata_src_lif_get
    if _newclass:control_metadata_src_lif = _swig_property(_p4pd.ingress_tx_stats_swkey_t_control_metadata_src_lif_get, _p4pd.ingress_tx_stats_swkey_t_control_metadata_src_lif_set)
    def __init__(self): 
        this = _p4pd.new_ingress_tx_stats_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_tx_stats_swkey_t
    __del__ = lambda self : None;
ingress_tx_stats_swkey_t_swigregister = _p4pd.ingress_tx_stats_swkey_t_swigregister
ingress_tx_stats_swkey_t_swigregister(ingress_tx_stats_swkey_t)

INGRESS_TX_STATS_INGRESS_TX_STATS_ID = _p4pd.INGRESS_TX_STATS_INGRESS_TX_STATS_ID
INGRESS_TX_STATS_MAX_ID = _p4pd.INGRESS_TX_STATS_MAX_ID
class ingress_tx_stats_ingress_tx_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_tx_stats_ingress_tx_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_tx_stats_ingress_tx_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx_ingress_drops"] = _p4pd.ingress_tx_stats_ingress_tx_stats_t_tx_ingress_drops_set
    __swig_getmethods__["tx_ingress_drops"] = _p4pd.ingress_tx_stats_ingress_tx_stats_t_tx_ingress_drops_get
    if _newclass:tx_ingress_drops = _swig_property(_p4pd.ingress_tx_stats_ingress_tx_stats_t_tx_ingress_drops_get, _p4pd.ingress_tx_stats_ingress_tx_stats_t_tx_ingress_drops_set)
    def __init__(self): 
        this = _p4pd.new_ingress_tx_stats_ingress_tx_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_tx_stats_ingress_tx_stats_t
    __del__ = lambda self : None;
ingress_tx_stats_ingress_tx_stats_t_swigregister = _p4pd.ingress_tx_stats_ingress_tx_stats_t_swigregister
ingress_tx_stats_ingress_tx_stats_t_swigregister(ingress_tx_stats_ingress_tx_stats_t)

class ingress_tx_stats_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_tx_stats_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_tx_stats_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ingress_tx_stats_ingress_tx_stats"] = _p4pd.ingress_tx_stats_action_union_t_ingress_tx_stats_ingress_tx_stats_set
    __swig_getmethods__["ingress_tx_stats_ingress_tx_stats"] = _p4pd.ingress_tx_stats_action_union_t_ingress_tx_stats_ingress_tx_stats_get
    if _newclass:ingress_tx_stats_ingress_tx_stats = _swig_property(_p4pd.ingress_tx_stats_action_union_t_ingress_tx_stats_ingress_tx_stats_get, _p4pd.ingress_tx_stats_action_union_t_ingress_tx_stats_ingress_tx_stats_set)
    def __init__(self): 
        this = _p4pd.new_ingress_tx_stats_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_tx_stats_action_union_t
    __del__ = lambda self : None;
ingress_tx_stats_action_union_t_swigregister = _p4pd.ingress_tx_stats_action_union_t_swigregister
ingress_tx_stats_action_union_t_swigregister(ingress_tx_stats_action_union_t)

class ingress_tx_stats_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_tx_stats_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_tx_stats_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ingress_tx_stats_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ingress_tx_stats_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ingress_tx_stats_actiondata_actionid_get, _p4pd.ingress_tx_stats_actiondata_actionid_set)
    __swig_setmethods__["ingress_tx_stats_action_u"] = _p4pd.ingress_tx_stats_actiondata_ingress_tx_stats_action_u_set
    __swig_getmethods__["ingress_tx_stats_action_u"] = _p4pd.ingress_tx_stats_actiondata_ingress_tx_stats_action_u_get
    if _newclass:ingress_tx_stats_action_u = _swig_property(_p4pd.ingress_tx_stats_actiondata_ingress_tx_stats_action_u_get, _p4pd.ingress_tx_stats_actiondata_ingress_tx_stats_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ingress_tx_stats_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_tx_stats_actiondata
    __del__ = lambda self : None;
ingress_tx_stats_actiondata_swigregister = _p4pd.ingress_tx_stats_actiondata_swigregister
ingress_tx_stats_actiondata_swigregister(ingress_tx_stats_actiondata)

class egress_policer_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["policer_metadata_egress_policer_index"] = _p4pd.egress_policer_action_swkey_t_policer_metadata_egress_policer_index_set
    __swig_getmethods__["policer_metadata_egress_policer_index"] = _p4pd.egress_policer_action_swkey_t_policer_metadata_egress_policer_index_get
    if _newclass:policer_metadata_egress_policer_index = _swig_property(_p4pd.egress_policer_action_swkey_t_policer_metadata_egress_policer_index_get, _p4pd.egress_policer_action_swkey_t_policer_metadata_egress_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_action_swkey_t
    __del__ = lambda self : None;
egress_policer_action_swkey_t_swigregister = _p4pd.egress_policer_action_swkey_t_swigregister
egress_policer_action_swkey_t_swigregister(egress_policer_action_swkey_t)

EGRESS_POLICER_ACTION_EGRESS_POLICER_ACTION_ID = _p4pd.EGRESS_POLICER_ACTION_EGRESS_POLICER_ACTION_ID
EGRESS_POLICER_ACTION_MAX_ID = _p4pd.EGRESS_POLICER_ACTION_MAX_ID
class egress_policer_action_egress_policer_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_action_egress_policer_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_action_egress_policer_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["permitted_packets"] = _p4pd.egress_policer_action_egress_policer_action_t_permitted_packets_set
    __swig_getmethods__["permitted_packets"] = _p4pd.egress_policer_action_egress_policer_action_t_permitted_packets_get
    if _newclass:permitted_packets = _swig_property(_p4pd.egress_policer_action_egress_policer_action_t_permitted_packets_get, _p4pd.egress_policer_action_egress_policer_action_t_permitted_packets_set)
    __swig_setmethods__["permitted_bytes"] = _p4pd.egress_policer_action_egress_policer_action_t_permitted_bytes_set
    __swig_getmethods__["permitted_bytes"] = _p4pd.egress_policer_action_egress_policer_action_t_permitted_bytes_get
    if _newclass:permitted_bytes = _swig_property(_p4pd.egress_policer_action_egress_policer_action_t_permitted_bytes_get, _p4pd.egress_policer_action_egress_policer_action_t_permitted_bytes_set)
    __swig_setmethods__["denied_packets"] = _p4pd.egress_policer_action_egress_policer_action_t_denied_packets_set
    __swig_getmethods__["denied_packets"] = _p4pd.egress_policer_action_egress_policer_action_t_denied_packets_get
    if _newclass:denied_packets = _swig_property(_p4pd.egress_policer_action_egress_policer_action_t_denied_packets_get, _p4pd.egress_policer_action_egress_policer_action_t_denied_packets_set)
    __swig_setmethods__["denied_bytes"] = _p4pd.egress_policer_action_egress_policer_action_t_denied_bytes_set
    __swig_getmethods__["denied_bytes"] = _p4pd.egress_policer_action_egress_policer_action_t_denied_bytes_get
    if _newclass:denied_bytes = _swig_property(_p4pd.egress_policer_action_egress_policer_action_t_denied_bytes_get, _p4pd.egress_policer_action_egress_policer_action_t_denied_bytes_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_action_egress_policer_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_action_egress_policer_action_t
    __del__ = lambda self : None;
egress_policer_action_egress_policer_action_t_swigregister = _p4pd.egress_policer_action_egress_policer_action_t_swigregister
egress_policer_action_egress_policer_action_t_swigregister(egress_policer_action_egress_policer_action_t)

class egress_policer_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["egress_policer_action_egress_policer_action"] = _p4pd.egress_policer_action_action_union_t_egress_policer_action_egress_policer_action_set
    __swig_getmethods__["egress_policer_action_egress_policer_action"] = _p4pd.egress_policer_action_action_union_t_egress_policer_action_egress_policer_action_get
    if _newclass:egress_policer_action_egress_policer_action = _swig_property(_p4pd.egress_policer_action_action_union_t_egress_policer_action_egress_policer_action_get, _p4pd.egress_policer_action_action_union_t_egress_policer_action_egress_policer_action_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_action_action_union_t
    __del__ = lambda self : None;
egress_policer_action_action_union_t_swigregister = _p4pd.egress_policer_action_action_union_t_swigregister
egress_policer_action_action_union_t_swigregister(egress_policer_action_action_union_t)

class egress_policer_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.egress_policer_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.egress_policer_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.egress_policer_action_actiondata_actionid_get, _p4pd.egress_policer_action_actiondata_actionid_set)
    __swig_setmethods__["egress_policer_action_action_u"] = _p4pd.egress_policer_action_actiondata_egress_policer_action_action_u_set
    __swig_getmethods__["egress_policer_action_action_u"] = _p4pd.egress_policer_action_actiondata_egress_policer_action_action_u_get
    if _newclass:egress_policer_action_action_u = _swig_property(_p4pd.egress_policer_action_actiondata_egress_policer_action_action_u_get, _p4pd.egress_policer_action_actiondata_egress_policer_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_action_actiondata
    __del__ = lambda self : None;
egress_policer_action_actiondata_swigregister = _p4pd.egress_policer_action_actiondata_swigregister
egress_policer_action_actiondata_swigregister(egress_policer_action_actiondata)

class nacl_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nacl_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nacl_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_flow_miss_ingress"] = _p4pd.nacl_swkey_t_control_metadata_flow_miss_ingress_set
    __swig_getmethods__["control_metadata_flow_miss_ingress"] = _p4pd.nacl_swkey_t_control_metadata_flow_miss_ingress_get
    if _newclass:control_metadata_flow_miss_ingress = _swig_property(_p4pd.nacl_swkey_t_control_metadata_flow_miss_ingress_get, _p4pd.nacl_swkey_t_control_metadata_flow_miss_ingress_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_type_set
    __swig_getmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_type_get
    if _newclass:flow_lkp_metadata_lkp_type = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_type_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_type_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dir"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dir_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dir"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dir_get
    if _newclass:flow_lkp_metadata_lkp_dir = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dir_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dir_set)
    __swig_setmethods__["ethernet_dstAddr"] = _p4pd.nacl_swkey_t_ethernet_dstAddr_set
    __swig_getmethods__["ethernet_dstAddr"] = _p4pd.nacl_swkey_t_ethernet_dstAddr_get
    if _newclass:ethernet_dstAddr = _swig_property(_p4pd.nacl_swkey_t_ethernet_dstAddr_get, _p4pd.nacl_swkey_t_ethernet_dstAddr_set)
    __swig_setmethods__["l3_metadata_ip_option_seen"] = _p4pd.nacl_swkey_t_l3_metadata_ip_option_seen_set
    __swig_getmethods__["l3_metadata_ip_option_seen"] = _p4pd.nacl_swkey_t_l3_metadata_ip_option_seen_get
    if _newclass:l3_metadata_ip_option_seen = _swig_property(_p4pd.nacl_swkey_t_l3_metadata_ip_option_seen_get, _p4pd.nacl_swkey_t_l3_metadata_ip_option_seen_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_src_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_src_get
    if _newclass:flow_lkp_metadata_lkp_src = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_src_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_src_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dst_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dst_get
    if _newclass:flow_lkp_metadata_lkp_dst = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dst_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dst_set)
    __swig_setmethods__["l3_metadata_ip_frag"] = _p4pd.nacl_swkey_t_l3_metadata_ip_frag_set
    __swig_getmethods__["l3_metadata_ip_frag"] = _p4pd.nacl_swkey_t_l3_metadata_ip_frag_get
    if _newclass:l3_metadata_ip_frag = _swig_property(_p4pd.nacl_swkey_t_l3_metadata_ip_frag_get, _p4pd.nacl_swkey_t_l3_metadata_ip_frag_set)
    __swig_setmethods__["control_metadata_from_cpu"] = _p4pd.nacl_swkey_t_control_metadata_from_cpu_set
    __swig_getmethods__["control_metadata_from_cpu"] = _p4pd.nacl_swkey_t_control_metadata_from_cpu_get
    if _newclass:control_metadata_from_cpu = _swig_property(_p4pd.nacl_swkey_t_control_metadata_from_cpu_get, _p4pd.nacl_swkey_t_control_metadata_from_cpu_set)
    __swig_setmethods__["entry_inactive_nacl"] = _p4pd.nacl_swkey_t_entry_inactive_nacl_set
    __swig_getmethods__["entry_inactive_nacl"] = _p4pd.nacl_swkey_t_entry_inactive_nacl_get
    if _newclass:entry_inactive_nacl = _swig_property(_p4pd.nacl_swkey_t_entry_inactive_nacl_get, _p4pd.nacl_swkey_t_entry_inactive_nacl_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_sport"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_sport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_sport"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_sport_get
    if _newclass:flow_lkp_metadata_lkp_sport = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_sport_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_sport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dport_get
    if _newclass:flow_lkp_metadata_lkp_dport = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dport_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_dport_set)
    __swig_setmethods__["control_metadata_drop_reason"] = _p4pd.nacl_swkey_t_control_metadata_drop_reason_set
    __swig_getmethods__["control_metadata_drop_reason"] = _p4pd.nacl_swkey_t_control_metadata_drop_reason_get
    if _newclass:control_metadata_drop_reason = _swig_property(_p4pd.nacl_swkey_t_control_metadata_drop_reason_get, _p4pd.nacl_swkey_t_control_metadata_drop_reason_set)
    __swig_setmethods__["control_metadata_dst_lport"] = _p4pd.nacl_swkey_t_control_metadata_dst_lport_set
    __swig_getmethods__["control_metadata_dst_lport"] = _p4pd.nacl_swkey_t_control_metadata_dst_lport_get
    if _newclass:control_metadata_dst_lport = _swig_property(_p4pd.nacl_swkey_t_control_metadata_dst_lport_get, _p4pd.nacl_swkey_t_control_metadata_dst_lport_set)
    __swig_setmethods__["control_metadata_src_lport"] = _p4pd.nacl_swkey_t_control_metadata_src_lport_set
    __swig_getmethods__["control_metadata_src_lport"] = _p4pd.nacl_swkey_t_control_metadata_src_lport_get
    if _newclass:control_metadata_src_lport = _swig_property(_p4pd.nacl_swkey_t_control_metadata_src_lport_get, _p4pd.nacl_swkey_t_control_metadata_src_lport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_proto_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_proto_get
    if _newclass:flow_lkp_metadata_lkp_proto = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_proto_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_proto_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.nacl_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["tcp_flags"] = _p4pd.nacl_swkey_t_tcp_flags_set
    __swig_getmethods__["tcp_flags"] = _p4pd.nacl_swkey_t_tcp_flags_get
    if _newclass:tcp_flags = _swig_property(_p4pd.nacl_swkey_t_tcp_flags_get, _p4pd.nacl_swkey_t_tcp_flags_set)
    def __init__(self): 
        this = _p4pd.new_nacl_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_nacl_swkey_t
    __del__ = lambda self : None;
nacl_swkey_t_swigregister = _p4pd.nacl_swkey_t_swigregister
nacl_swkey_t_swigregister(nacl_swkey_t)

class nacl_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nacl_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nacl_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_flow_miss_ingress_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_flow_miss_ingress_mask_set
    __swig_getmethods__["control_metadata_flow_miss_ingress_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_flow_miss_ingress_mask_get
    if _newclass:control_metadata_flow_miss_ingress_mask = _swig_property(_p4pd.nacl_swkey_mask_t_control_metadata_flow_miss_ingress_mask_get, _p4pd.nacl_swkey_mask_t_control_metadata_flow_miss_ingress_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_type_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_type_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_get
    if _newclass:flow_lkp_metadata_lkp_type_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dir_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dir_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dir_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dir_mask_get
    if _newclass:flow_lkp_metadata_lkp_dir_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dir_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dir_mask_set)
    __swig_setmethods__["ethernet_dstAddr_mask"] = _p4pd.nacl_swkey_mask_t_ethernet_dstAddr_mask_set
    __swig_getmethods__["ethernet_dstAddr_mask"] = _p4pd.nacl_swkey_mask_t_ethernet_dstAddr_mask_get
    if _newclass:ethernet_dstAddr_mask = _swig_property(_p4pd.nacl_swkey_mask_t_ethernet_dstAddr_mask_get, _p4pd.nacl_swkey_mask_t_ethernet_dstAddr_mask_set)
    __swig_setmethods__["l3_metadata_ip_option_seen_mask"] = _p4pd.nacl_swkey_mask_t_l3_metadata_ip_option_seen_mask_set
    __swig_getmethods__["l3_metadata_ip_option_seen_mask"] = _p4pd.nacl_swkey_mask_t_l3_metadata_ip_option_seen_mask_get
    if _newclass:l3_metadata_ip_option_seen_mask = _swig_property(_p4pd.nacl_swkey_mask_t_l3_metadata_ip_option_seen_mask_get, _p4pd.nacl_swkey_mask_t_l3_metadata_ip_option_seen_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get
    if _newclass:flow_lkp_metadata_lkp_src_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get
    if _newclass:flow_lkp_metadata_lkp_dst_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set)
    __swig_setmethods__["l3_metadata_ip_frag_mask"] = _p4pd.nacl_swkey_mask_t_l3_metadata_ip_frag_mask_set
    __swig_getmethods__["l3_metadata_ip_frag_mask"] = _p4pd.nacl_swkey_mask_t_l3_metadata_ip_frag_mask_get
    if _newclass:l3_metadata_ip_frag_mask = _swig_property(_p4pd.nacl_swkey_mask_t_l3_metadata_ip_frag_mask_get, _p4pd.nacl_swkey_mask_t_l3_metadata_ip_frag_mask_set)
    __swig_setmethods__["control_metadata_from_cpu_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_from_cpu_mask_set
    __swig_getmethods__["control_metadata_from_cpu_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_from_cpu_mask_get
    if _newclass:control_metadata_from_cpu_mask = _swig_property(_p4pd.nacl_swkey_mask_t_control_metadata_from_cpu_mask_get, _p4pd.nacl_swkey_mask_t_control_metadata_from_cpu_mask_set)
    __swig_setmethods__["entry_inactive_nacl_mask"] = _p4pd.nacl_swkey_mask_t_entry_inactive_nacl_mask_set
    __swig_getmethods__["entry_inactive_nacl_mask"] = _p4pd.nacl_swkey_mask_t_entry_inactive_nacl_mask_get
    if _newclass:entry_inactive_nacl_mask = _swig_property(_p4pd.nacl_swkey_mask_t_entry_inactive_nacl_mask_get, _p4pd.nacl_swkey_mask_t_entry_inactive_nacl_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_sport_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_sport_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_sport_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_sport_mask_get
    if _newclass:flow_lkp_metadata_lkp_sport_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_sport_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_sport_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get
    if _newclass:flow_lkp_metadata_lkp_dport_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set)
    __swig_setmethods__["control_metadata_drop_reason_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_drop_reason_mask_set
    __swig_getmethods__["control_metadata_drop_reason_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_drop_reason_mask_get
    if _newclass:control_metadata_drop_reason_mask = _swig_property(_p4pd.nacl_swkey_mask_t_control_metadata_drop_reason_mask_get, _p4pd.nacl_swkey_mask_t_control_metadata_drop_reason_mask_set)
    __swig_setmethods__["control_metadata_dst_lport_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_dst_lport_mask_set
    __swig_getmethods__["control_metadata_dst_lport_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_dst_lport_mask_get
    if _newclass:control_metadata_dst_lport_mask = _swig_property(_p4pd.nacl_swkey_mask_t_control_metadata_dst_lport_mask_get, _p4pd.nacl_swkey_mask_t_control_metadata_dst_lport_mask_set)
    __swig_setmethods__["control_metadata_src_lport_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_src_lport_mask_set
    __swig_getmethods__["control_metadata_src_lport_mask"] = _p4pd.nacl_swkey_mask_t_control_metadata_src_lport_mask_get
    if _newclass:control_metadata_src_lport_mask = _swig_property(_p4pd.nacl_swkey_mask_t_control_metadata_src_lport_mask_get, _p4pd.nacl_swkey_mask_t_control_metadata_src_lport_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get
    if _newclass:flow_lkp_metadata_lkp_proto_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get
    if _newclass:flow_lkp_metadata_lkp_vrf_mask = _swig_property(_p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get, _p4pd.nacl_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set)
    __swig_setmethods__["tcp_flags_mask"] = _p4pd.nacl_swkey_mask_t_tcp_flags_mask_set
    __swig_getmethods__["tcp_flags_mask"] = _p4pd.nacl_swkey_mask_t_tcp_flags_mask_get
    if _newclass:tcp_flags_mask = _swig_property(_p4pd.nacl_swkey_mask_t_tcp_flags_mask_get, _p4pd.nacl_swkey_mask_t_tcp_flags_mask_set)
    def __init__(self): 
        this = _p4pd.new_nacl_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_nacl_swkey_mask_t
    __del__ = lambda self : None;
nacl_swkey_mask_t_swigregister = _p4pd.nacl_swkey_mask_t_swigregister
nacl_swkey_mask_t_swigregister(nacl_swkey_mask_t)

NACL_NOP_ID = _p4pd.NACL_NOP_ID
NACL_NACL_PERMIT_ID = _p4pd.NACL_NACL_PERMIT_ID
NACL_NACL_DENY_ID = _p4pd.NACL_NACL_DENY_ID
NACL_MAX_ID = _p4pd.NACL_MAX_ID
class nacl_nacl_permit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nacl_nacl_permit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nacl_nacl_permit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["force_flow_hit"] = _p4pd.nacl_nacl_permit_t_force_flow_hit_set
    __swig_getmethods__["force_flow_hit"] = _p4pd.nacl_nacl_permit_t_force_flow_hit_get
    if _newclass:force_flow_hit = _swig_property(_p4pd.nacl_nacl_permit_t_force_flow_hit_get, _p4pd.nacl_nacl_permit_t_force_flow_hit_set)
    __swig_setmethods__["policer_index"] = _p4pd.nacl_nacl_permit_t_policer_index_set
    __swig_getmethods__["policer_index"] = _p4pd.nacl_nacl_permit_t_policer_index_get
    if _newclass:policer_index = _swig_property(_p4pd.nacl_nacl_permit_t_policer_index_get, _p4pd.nacl_nacl_permit_t_policer_index_set)
    __swig_setmethods__["log_en"] = _p4pd.nacl_nacl_permit_t_log_en_set
    __swig_getmethods__["log_en"] = _p4pd.nacl_nacl_permit_t_log_en_get
    if _newclass:log_en = _swig_property(_p4pd.nacl_nacl_permit_t_log_en_get, _p4pd.nacl_nacl_permit_t_log_en_set)
    __swig_setmethods__["ingress_mirror_en"] = _p4pd.nacl_nacl_permit_t_ingress_mirror_en_set
    __swig_getmethods__["ingress_mirror_en"] = _p4pd.nacl_nacl_permit_t_ingress_mirror_en_get
    if _newclass:ingress_mirror_en = _swig_property(_p4pd.nacl_nacl_permit_t_ingress_mirror_en_get, _p4pd.nacl_nacl_permit_t_ingress_mirror_en_set)
    __swig_setmethods__["egress_mirror_en"] = _p4pd.nacl_nacl_permit_t_egress_mirror_en_set
    __swig_getmethods__["egress_mirror_en"] = _p4pd.nacl_nacl_permit_t_egress_mirror_en_get
    if _newclass:egress_mirror_en = _swig_property(_p4pd.nacl_nacl_permit_t_egress_mirror_en_get, _p4pd.nacl_nacl_permit_t_egress_mirror_en_set)
    __swig_setmethods__["ingress_mirror_session_id"] = _p4pd.nacl_nacl_permit_t_ingress_mirror_session_id_set
    __swig_getmethods__["ingress_mirror_session_id"] = _p4pd.nacl_nacl_permit_t_ingress_mirror_session_id_get
    if _newclass:ingress_mirror_session_id = _swig_property(_p4pd.nacl_nacl_permit_t_ingress_mirror_session_id_get, _p4pd.nacl_nacl_permit_t_ingress_mirror_session_id_set)
    __swig_setmethods__["egress_mirror_session_id"] = _p4pd.nacl_nacl_permit_t_egress_mirror_session_id_set
    __swig_getmethods__["egress_mirror_session_id"] = _p4pd.nacl_nacl_permit_t_egress_mirror_session_id_get
    if _newclass:egress_mirror_session_id = _swig_property(_p4pd.nacl_nacl_permit_t_egress_mirror_session_id_get, _p4pd.nacl_nacl_permit_t_egress_mirror_session_id_set)
    __swig_setmethods__["qid_en"] = _p4pd.nacl_nacl_permit_t_qid_en_set
    __swig_getmethods__["qid_en"] = _p4pd.nacl_nacl_permit_t_qid_en_get
    if _newclass:qid_en = _swig_property(_p4pd.nacl_nacl_permit_t_qid_en_get, _p4pd.nacl_nacl_permit_t_qid_en_set)
    __swig_setmethods__["qid"] = _p4pd.nacl_nacl_permit_t_qid_set
    __swig_getmethods__["qid"] = _p4pd.nacl_nacl_permit_t_qid_get
    if _newclass:qid = _swig_property(_p4pd.nacl_nacl_permit_t_qid_get, _p4pd.nacl_nacl_permit_t_qid_set)
    __swig_setmethods__["rewrite_en"] = _p4pd.nacl_nacl_permit_t_rewrite_en_set
    __swig_getmethods__["rewrite_en"] = _p4pd.nacl_nacl_permit_t_rewrite_en_get
    if _newclass:rewrite_en = _swig_property(_p4pd.nacl_nacl_permit_t_rewrite_en_get, _p4pd.nacl_nacl_permit_t_rewrite_en_set)
    __swig_setmethods__["rewrite_index"] = _p4pd.nacl_nacl_permit_t_rewrite_index_set
    __swig_getmethods__["rewrite_index"] = _p4pd.nacl_nacl_permit_t_rewrite_index_get
    if _newclass:rewrite_index = _swig_property(_p4pd.nacl_nacl_permit_t_rewrite_index_get, _p4pd.nacl_nacl_permit_t_rewrite_index_set)
    __swig_setmethods__["rewrite_flags"] = _p4pd.nacl_nacl_permit_t_rewrite_flags_set
    __swig_getmethods__["rewrite_flags"] = _p4pd.nacl_nacl_permit_t_rewrite_flags_get
    if _newclass:rewrite_flags = _swig_property(_p4pd.nacl_nacl_permit_t_rewrite_flags_get, _p4pd.nacl_nacl_permit_t_rewrite_flags_set)
    __swig_setmethods__["tunnel_rewrite_en"] = _p4pd.nacl_nacl_permit_t_tunnel_rewrite_en_set
    __swig_getmethods__["tunnel_rewrite_en"] = _p4pd.nacl_nacl_permit_t_tunnel_rewrite_en_get
    if _newclass:tunnel_rewrite_en = _swig_property(_p4pd.nacl_nacl_permit_t_tunnel_rewrite_en_get, _p4pd.nacl_nacl_permit_t_tunnel_rewrite_en_set)
    __swig_setmethods__["tunnel_rewrite_index"] = _p4pd.nacl_nacl_permit_t_tunnel_rewrite_index_set
    __swig_getmethods__["tunnel_rewrite_index"] = _p4pd.nacl_nacl_permit_t_tunnel_rewrite_index_get
    if _newclass:tunnel_rewrite_index = _swig_property(_p4pd.nacl_nacl_permit_t_tunnel_rewrite_index_get, _p4pd.nacl_nacl_permit_t_tunnel_rewrite_index_set)
    __swig_setmethods__["tunnel_vnid"] = _p4pd.nacl_nacl_permit_t_tunnel_vnid_set
    __swig_getmethods__["tunnel_vnid"] = _p4pd.nacl_nacl_permit_t_tunnel_vnid_get
    if _newclass:tunnel_vnid = _swig_property(_p4pd.nacl_nacl_permit_t_tunnel_vnid_get, _p4pd.nacl_nacl_permit_t_tunnel_vnid_set)
    __swig_setmethods__["tunnel_originate"] = _p4pd.nacl_nacl_permit_t_tunnel_originate_set
    __swig_getmethods__["tunnel_originate"] = _p4pd.nacl_nacl_permit_t_tunnel_originate_get
    if _newclass:tunnel_originate = _swig_property(_p4pd.nacl_nacl_permit_t_tunnel_originate_get, _p4pd.nacl_nacl_permit_t_tunnel_originate_set)
    __swig_setmethods__["dst_lport_en"] = _p4pd.nacl_nacl_permit_t_dst_lport_en_set
    __swig_getmethods__["dst_lport_en"] = _p4pd.nacl_nacl_permit_t_dst_lport_en_get
    if _newclass:dst_lport_en = _swig_property(_p4pd.nacl_nacl_permit_t_dst_lport_en_get, _p4pd.nacl_nacl_permit_t_dst_lport_en_set)
    __swig_setmethods__["dst_lport"] = _p4pd.nacl_nacl_permit_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.nacl_nacl_permit_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.nacl_nacl_permit_t_dst_lport_get, _p4pd.nacl_nacl_permit_t_dst_lport_set)
    __swig_setmethods__["egress_policer_en"] = _p4pd.nacl_nacl_permit_t_egress_policer_en_set
    __swig_getmethods__["egress_policer_en"] = _p4pd.nacl_nacl_permit_t_egress_policer_en_get
    if _newclass:egress_policer_en = _swig_property(_p4pd.nacl_nacl_permit_t_egress_policer_en_get, _p4pd.nacl_nacl_permit_t_egress_policer_en_set)
    __swig_setmethods__["egress_policer_index"] = _p4pd.nacl_nacl_permit_t_egress_policer_index_set
    __swig_getmethods__["egress_policer_index"] = _p4pd.nacl_nacl_permit_t_egress_policer_index_get
    if _newclass:egress_policer_index = _swig_property(_p4pd.nacl_nacl_permit_t_egress_policer_index_get, _p4pd.nacl_nacl_permit_t_egress_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_nacl_nacl_permit_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_nacl_nacl_permit_t
    __del__ = lambda self : None;
nacl_nacl_permit_t_swigregister = _p4pd.nacl_nacl_permit_t_swigregister
nacl_nacl_permit_t_swigregister(nacl_nacl_permit_t)

class nacl_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nacl_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nacl_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nacl_nacl_permit"] = _p4pd.nacl_action_union_t_nacl_nacl_permit_set
    __swig_getmethods__["nacl_nacl_permit"] = _p4pd.nacl_action_union_t_nacl_nacl_permit_get
    if _newclass:nacl_nacl_permit = _swig_property(_p4pd.nacl_action_union_t_nacl_nacl_permit_get, _p4pd.nacl_action_union_t_nacl_nacl_permit_set)
    def __init__(self): 
        this = _p4pd.new_nacl_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_nacl_action_union_t
    __del__ = lambda self : None;
nacl_action_union_t_swigregister = _p4pd.nacl_action_union_t_swigregister
nacl_action_union_t_swigregister(nacl_action_union_t)

class nacl_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nacl_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nacl_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.nacl_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.nacl_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.nacl_actiondata_actionid_get, _p4pd.nacl_actiondata_actionid_set)
    __swig_setmethods__["nacl_action_u"] = _p4pd.nacl_actiondata_nacl_action_u_set
    __swig_getmethods__["nacl_action_u"] = _p4pd.nacl_actiondata_nacl_action_u_get
    if _newclass:nacl_action_u = _swig_property(_p4pd.nacl_actiondata_nacl_action_u_get, _p4pd.nacl_actiondata_nacl_action_u_set)
    def __init__(self): 
        this = _p4pd.new_nacl_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_nacl_actiondata
    __del__ = lambda self : None;
nacl_actiondata_swigregister = _p4pd.nacl_actiondata_swigregister
nacl_actiondata_swigregister(nacl_actiondata)

class flow_hash_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_type_set
    __swig_getmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_type_get
    if _newclass:flow_lkp_metadata_lkp_type = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_type_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_type_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_inst"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_inst_set
    __swig_getmethods__["flow_lkp_metadata_lkp_inst"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_inst_get
    if _newclass:flow_lkp_metadata_lkp_inst = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_inst_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_inst_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dir"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dir_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dir"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dir_get
    if _newclass:flow_lkp_metadata_lkp_dir = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dir_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dir_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_src_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_src_get
    if _newclass:flow_lkp_metadata_lkp_src = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_src_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_src_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dst_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dst_get
    if _newclass:flow_lkp_metadata_lkp_dst = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dst_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dst_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_sport"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_sport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_sport"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_sport_get
    if _newclass:flow_lkp_metadata_lkp_sport = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_sport_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_sport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dport_get
    if _newclass:flow_lkp_metadata_lkp_dport = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dport_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_dport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_proto_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_proto_get
    if _newclass:flow_lkp_metadata_lkp_proto = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_proto_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_proto_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.flow_hash_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_swkey_t
    __del__ = lambda self : None;
flow_hash_swkey_t_swigregister = _p4pd.flow_hash_swkey_t_swigregister
flow_hash_swkey_t_swigregister(flow_hash_swkey_t)

FLOW_HASH_FLOW_HASH_INFO_ID = _p4pd.FLOW_HASH_FLOW_HASH_INFO_ID
FLOW_HASH_MAX_ID = _p4pd.FLOW_HASH_MAX_ID
class flow_hash_flow_hash_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_flow_hash_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_flow_hash_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.flow_hash_flow_hash_info_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.flow_hash_flow_hash_info_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.flow_hash_flow_hash_info_t_entry_valid_get, _p4pd.flow_hash_flow_hash_info_t_entry_valid_set)
    __swig_setmethods__["export_en"] = _p4pd.flow_hash_flow_hash_info_t_export_en_set
    __swig_getmethods__["export_en"] = _p4pd.flow_hash_flow_hash_info_t_export_en_get
    if _newclass:export_en = _swig_property(_p4pd.flow_hash_flow_hash_info_t_export_en_get, _p4pd.flow_hash_flow_hash_info_t_export_en_set)
    __swig_setmethods__["flow_index"] = _p4pd.flow_hash_flow_hash_info_t_flow_index_set
    __swig_getmethods__["flow_index"] = _p4pd.flow_hash_flow_hash_info_t_flow_index_get
    if _newclass:flow_index = _swig_property(_p4pd.flow_hash_flow_hash_info_t_flow_index_get, _p4pd.flow_hash_flow_hash_info_t_flow_index_set)
    __swig_setmethods__["hash1"] = _p4pd.flow_hash_flow_hash_info_t_hash1_set
    __swig_getmethods__["hash1"] = _p4pd.flow_hash_flow_hash_info_t_hash1_get
    if _newclass:hash1 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash1_get, _p4pd.flow_hash_flow_hash_info_t_hash1_set)
    __swig_setmethods__["hint1"] = _p4pd.flow_hash_flow_hash_info_t_hint1_set
    __swig_getmethods__["hint1"] = _p4pd.flow_hash_flow_hash_info_t_hint1_get
    if _newclass:hint1 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint1_get, _p4pd.flow_hash_flow_hash_info_t_hint1_set)
    __swig_setmethods__["hash2"] = _p4pd.flow_hash_flow_hash_info_t_hash2_set
    __swig_getmethods__["hash2"] = _p4pd.flow_hash_flow_hash_info_t_hash2_get
    if _newclass:hash2 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash2_get, _p4pd.flow_hash_flow_hash_info_t_hash2_set)
    __swig_setmethods__["hint2"] = _p4pd.flow_hash_flow_hash_info_t_hint2_set
    __swig_getmethods__["hint2"] = _p4pd.flow_hash_flow_hash_info_t_hint2_get
    if _newclass:hint2 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint2_get, _p4pd.flow_hash_flow_hash_info_t_hint2_set)
    __swig_setmethods__["hash3"] = _p4pd.flow_hash_flow_hash_info_t_hash3_set
    __swig_getmethods__["hash3"] = _p4pd.flow_hash_flow_hash_info_t_hash3_get
    if _newclass:hash3 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash3_get, _p4pd.flow_hash_flow_hash_info_t_hash3_set)
    __swig_setmethods__["hint3"] = _p4pd.flow_hash_flow_hash_info_t_hint3_set
    __swig_getmethods__["hint3"] = _p4pd.flow_hash_flow_hash_info_t_hint3_get
    if _newclass:hint3 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint3_get, _p4pd.flow_hash_flow_hash_info_t_hint3_set)
    __swig_setmethods__["hash4"] = _p4pd.flow_hash_flow_hash_info_t_hash4_set
    __swig_getmethods__["hash4"] = _p4pd.flow_hash_flow_hash_info_t_hash4_get
    if _newclass:hash4 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash4_get, _p4pd.flow_hash_flow_hash_info_t_hash4_set)
    __swig_setmethods__["hint4"] = _p4pd.flow_hash_flow_hash_info_t_hint4_set
    __swig_getmethods__["hint4"] = _p4pd.flow_hash_flow_hash_info_t_hint4_get
    if _newclass:hint4 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint4_get, _p4pd.flow_hash_flow_hash_info_t_hint4_set)
    __swig_setmethods__["hash5"] = _p4pd.flow_hash_flow_hash_info_t_hash5_set
    __swig_getmethods__["hash5"] = _p4pd.flow_hash_flow_hash_info_t_hash5_get
    if _newclass:hash5 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash5_get, _p4pd.flow_hash_flow_hash_info_t_hash5_set)
    __swig_setmethods__["hint5"] = _p4pd.flow_hash_flow_hash_info_t_hint5_set
    __swig_getmethods__["hint5"] = _p4pd.flow_hash_flow_hash_info_t_hint5_get
    if _newclass:hint5 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint5_get, _p4pd.flow_hash_flow_hash_info_t_hint5_set)
    __swig_setmethods__["hash6"] = _p4pd.flow_hash_flow_hash_info_t_hash6_set
    __swig_getmethods__["hash6"] = _p4pd.flow_hash_flow_hash_info_t_hash6_get
    if _newclass:hash6 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hash6_get, _p4pd.flow_hash_flow_hash_info_t_hash6_set)
    __swig_setmethods__["hint6"] = _p4pd.flow_hash_flow_hash_info_t_hint6_set
    __swig_getmethods__["hint6"] = _p4pd.flow_hash_flow_hash_info_t_hint6_get
    if _newclass:hint6 = _swig_property(_p4pd.flow_hash_flow_hash_info_t_hint6_get, _p4pd.flow_hash_flow_hash_info_t_hint6_set)
    __swig_setmethods__["more_hashs"] = _p4pd.flow_hash_flow_hash_info_t_more_hashs_set
    __swig_getmethods__["more_hashs"] = _p4pd.flow_hash_flow_hash_info_t_more_hashs_get
    if _newclass:more_hashs = _swig_property(_p4pd.flow_hash_flow_hash_info_t_more_hashs_get, _p4pd.flow_hash_flow_hash_info_t_more_hashs_set)
    __swig_setmethods__["more_hints"] = _p4pd.flow_hash_flow_hash_info_t_more_hints_set
    __swig_getmethods__["more_hints"] = _p4pd.flow_hash_flow_hash_info_t_more_hints_get
    if _newclass:more_hints = _swig_property(_p4pd.flow_hash_flow_hash_info_t_more_hints_get, _p4pd.flow_hash_flow_hash_info_t_more_hints_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_flow_hash_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_flow_hash_info_t
    __del__ = lambda self : None;
flow_hash_flow_hash_info_t_swigregister = _p4pd.flow_hash_flow_hash_info_t_swigregister
flow_hash_flow_hash_info_t_swigregister(flow_hash_flow_hash_info_t)

class flow_hash_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_hash_flow_hash_info"] = _p4pd.flow_hash_action_union_t_flow_hash_flow_hash_info_set
    __swig_getmethods__["flow_hash_flow_hash_info"] = _p4pd.flow_hash_action_union_t_flow_hash_flow_hash_info_get
    if _newclass:flow_hash_flow_hash_info = _swig_property(_p4pd.flow_hash_action_union_t_flow_hash_flow_hash_info_get, _p4pd.flow_hash_action_union_t_flow_hash_flow_hash_info_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_action_union_t
    __del__ = lambda self : None;
flow_hash_action_union_t_swigregister = _p4pd.flow_hash_action_union_t_swigregister
flow_hash_action_union_t_swigregister(flow_hash_action_union_t)

class flow_hash_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.flow_hash_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.flow_hash_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.flow_hash_actiondata_actionid_get, _p4pd.flow_hash_actiondata_actionid_set)
    __swig_setmethods__["flow_hash_action_u"] = _p4pd.flow_hash_actiondata_flow_hash_action_u_set
    __swig_getmethods__["flow_hash_action_u"] = _p4pd.flow_hash_actiondata_flow_hash_action_u_get
    if _newclass:flow_hash_action_u = _swig_property(_p4pd.flow_hash_actiondata_flow_hash_action_u_get, _p4pd.flow_hash_actiondata_flow_hash_action_u_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_actiondata
    __del__ = lambda self : None;
flow_hash_actiondata_swigregister = _p4pd.flow_hash_actiondata_swigregister
flow_hash_actiondata_swigregister(flow_hash_actiondata)

class replica_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, replica_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, replica_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_replica_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_replica_swkey_t
    __del__ = lambda self : None;
replica_swkey_t_swigregister = _p4pd.replica_swkey_t_swigregister
replica_swkey_t_swigregister(replica_swkey_t)

REPLICA_SET_REPLICA_REWRITES_ID = _p4pd.REPLICA_SET_REPLICA_REWRITES_ID
REPLICA_MAX_ID = _p4pd.REPLICA_MAX_ID
class replica_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, replica_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, replica_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_replica_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_replica_action_union_t
    __del__ = lambda self : None;
replica_action_union_t_swigregister = _p4pd.replica_action_union_t_swigregister
replica_action_union_t_swigregister(replica_action_union_t)

class replica_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, replica_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, replica_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.replica_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.replica_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.replica_actiondata_actionid_get, _p4pd.replica_actiondata_actionid_set)
    __swig_setmethods__["replica_action_u"] = _p4pd.replica_actiondata_replica_action_u_set
    __swig_getmethods__["replica_action_u"] = _p4pd.replica_actiondata_replica_action_u_get
    if _newclass:replica_action_u = _swig_property(_p4pd.replica_actiondata_replica_action_u_get, _p4pd.replica_actiondata_replica_action_u_set)
    def __init__(self): 
        this = _p4pd.new_replica_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_replica_actiondata
    __del__ = lambda self : None;
replica_actiondata_swigregister = _p4pd.replica_actiondata_swigregister
replica_actiondata_swigregister(replica_actiondata)

class mirror_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["capri_intrinsic_tm_span_session"] = _p4pd.mirror_swkey_t_capri_intrinsic_tm_span_session_set
    __swig_getmethods__["capri_intrinsic_tm_span_session"] = _p4pd.mirror_swkey_t_capri_intrinsic_tm_span_session_get
    if _newclass:capri_intrinsic_tm_span_session = _swig_property(_p4pd.mirror_swkey_t_capri_intrinsic_tm_span_session_get, _p4pd.mirror_swkey_t_capri_intrinsic_tm_span_session_set)
    def __init__(self): 
        this = _p4pd.new_mirror_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_swkey_t
    __del__ = lambda self : None;
mirror_swkey_t_swigregister = _p4pd.mirror_swkey_t_swigregister
mirror_swkey_t_swigregister(mirror_swkey_t)

MIRROR_NOP_ID = _p4pd.MIRROR_NOP_ID
MIRROR_LOCAL_SPAN_ID = _p4pd.MIRROR_LOCAL_SPAN_ID
MIRROR_REMOTE_SPAN_ID = _p4pd.MIRROR_REMOTE_SPAN_ID
MIRROR_ERSPAN_MIRROR_ID = _p4pd.MIRROR_ERSPAN_MIRROR_ID
MIRROR_DROP_MIRROR_ID = _p4pd.MIRROR_DROP_MIRROR_ID
MIRROR_MAX_ID = _p4pd.MIRROR_MAX_ID
class mirror_local_span_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_local_span_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_local_span_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.mirror_local_span_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.mirror_local_span_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.mirror_local_span_t_dst_lport_get, _p4pd.mirror_local_span_t_dst_lport_set)
    __swig_setmethods__["truncate_len"] = _p4pd.mirror_local_span_t_truncate_len_set
    __swig_getmethods__["truncate_len"] = _p4pd.mirror_local_span_t_truncate_len_get
    if _newclass:truncate_len = _swig_property(_p4pd.mirror_local_span_t_truncate_len_get, _p4pd.mirror_local_span_t_truncate_len_set)
    def __init__(self): 
        this = _p4pd.new_mirror_local_span_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_local_span_t
    __del__ = lambda self : None;
mirror_local_span_t_swigregister = _p4pd.mirror_local_span_t_swigregister
mirror_local_span_t_swigregister(mirror_local_span_t)

class mirror_remote_span_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_remote_span_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_remote_span_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.mirror_remote_span_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.mirror_remote_span_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.mirror_remote_span_t_dst_lport_get, _p4pd.mirror_remote_span_t_dst_lport_set)
    __swig_setmethods__["truncate_len"] = _p4pd.mirror_remote_span_t_truncate_len_set
    __swig_getmethods__["truncate_len"] = _p4pd.mirror_remote_span_t_truncate_len_get
    if _newclass:truncate_len = _swig_property(_p4pd.mirror_remote_span_t_truncate_len_get, _p4pd.mirror_remote_span_t_truncate_len_set)
    __swig_setmethods__["tunnel_rewrite_index"] = _p4pd.mirror_remote_span_t_tunnel_rewrite_index_set
    __swig_getmethods__["tunnel_rewrite_index"] = _p4pd.mirror_remote_span_t_tunnel_rewrite_index_get
    if _newclass:tunnel_rewrite_index = _swig_property(_p4pd.mirror_remote_span_t_tunnel_rewrite_index_get, _p4pd.mirror_remote_span_t_tunnel_rewrite_index_set)
    __swig_setmethods__["vlan"] = _p4pd.mirror_remote_span_t_vlan_set
    __swig_getmethods__["vlan"] = _p4pd.mirror_remote_span_t_vlan_get
    if _newclass:vlan = _swig_property(_p4pd.mirror_remote_span_t_vlan_get, _p4pd.mirror_remote_span_t_vlan_set)
    def __init__(self): 
        this = _p4pd.new_mirror_remote_span_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_remote_span_t
    __del__ = lambda self : None;
mirror_remote_span_t_swigregister = _p4pd.mirror_remote_span_t_swigregister
mirror_remote_span_t_swigregister(mirror_remote_span_t)

class mirror_erspan_mirror_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_erspan_mirror_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_erspan_mirror_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.mirror_erspan_mirror_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.mirror_erspan_mirror_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.mirror_erspan_mirror_t_dst_lport_get, _p4pd.mirror_erspan_mirror_t_dst_lport_set)
    __swig_setmethods__["truncate_len"] = _p4pd.mirror_erspan_mirror_t_truncate_len_set
    __swig_getmethods__["truncate_len"] = _p4pd.mirror_erspan_mirror_t_truncate_len_get
    if _newclass:truncate_len = _swig_property(_p4pd.mirror_erspan_mirror_t_truncate_len_get, _p4pd.mirror_erspan_mirror_t_truncate_len_set)
    __swig_setmethods__["tunnel_rewrite_index"] = _p4pd.mirror_erspan_mirror_t_tunnel_rewrite_index_set
    __swig_getmethods__["tunnel_rewrite_index"] = _p4pd.mirror_erspan_mirror_t_tunnel_rewrite_index_get
    if _newclass:tunnel_rewrite_index = _swig_property(_p4pd.mirror_erspan_mirror_t_tunnel_rewrite_index_get, _p4pd.mirror_erspan_mirror_t_tunnel_rewrite_index_set)
    def __init__(self): 
        this = _p4pd.new_mirror_erspan_mirror_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_erspan_mirror_t
    __del__ = lambda self : None;
mirror_erspan_mirror_t_swigregister = _p4pd.mirror_erspan_mirror_t_swigregister
mirror_erspan_mirror_t_swigregister(mirror_erspan_mirror_t)

class mirror_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mirror_local_span"] = _p4pd.mirror_action_union_t_mirror_local_span_set
    __swig_getmethods__["mirror_local_span"] = _p4pd.mirror_action_union_t_mirror_local_span_get
    if _newclass:mirror_local_span = _swig_property(_p4pd.mirror_action_union_t_mirror_local_span_get, _p4pd.mirror_action_union_t_mirror_local_span_set)
    __swig_setmethods__["mirror_remote_span"] = _p4pd.mirror_action_union_t_mirror_remote_span_set
    __swig_getmethods__["mirror_remote_span"] = _p4pd.mirror_action_union_t_mirror_remote_span_get
    if _newclass:mirror_remote_span = _swig_property(_p4pd.mirror_action_union_t_mirror_remote_span_get, _p4pd.mirror_action_union_t_mirror_remote_span_set)
    __swig_setmethods__["mirror_erspan_mirror"] = _p4pd.mirror_action_union_t_mirror_erspan_mirror_set
    __swig_getmethods__["mirror_erspan_mirror"] = _p4pd.mirror_action_union_t_mirror_erspan_mirror_get
    if _newclass:mirror_erspan_mirror = _swig_property(_p4pd.mirror_action_union_t_mirror_erspan_mirror_get, _p4pd.mirror_action_union_t_mirror_erspan_mirror_set)
    def __init__(self): 
        this = _p4pd.new_mirror_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_action_union_t
    __del__ = lambda self : None;
mirror_action_union_t_swigregister = _p4pd.mirror_action_union_t_swigregister
mirror_action_union_t_swigregister(mirror_action_union_t)

class mirror_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mirror_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mirror_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.mirror_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.mirror_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.mirror_actiondata_actionid_get, _p4pd.mirror_actiondata_actionid_set)
    __swig_setmethods__["mirror_action_u"] = _p4pd.mirror_actiondata_mirror_action_u_set
    __swig_getmethods__["mirror_action_u"] = _p4pd.mirror_actiondata_mirror_action_u_get
    if _newclass:mirror_action_u = _swig_property(_p4pd.mirror_actiondata_mirror_action_u_get, _p4pd.mirror_actiondata_mirror_action_u_set)
    def __init__(self): 
        this = _p4pd.new_mirror_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_mirror_actiondata
    __del__ = lambda self : None;
mirror_actiondata_swigregister = _p4pd.mirror_actiondata_swigregister
mirror_actiondata_swigregister(mirror_actiondata)

class l4_profile_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, l4_profile_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, l4_profile_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l4_metadata_profile_idx"] = _p4pd.l4_profile_swkey_t_l4_metadata_profile_idx_set
    __swig_getmethods__["l4_metadata_profile_idx"] = _p4pd.l4_profile_swkey_t_l4_metadata_profile_idx_get
    if _newclass:l4_metadata_profile_idx = _swig_property(_p4pd.l4_profile_swkey_t_l4_metadata_profile_idx_get, _p4pd.l4_profile_swkey_t_l4_metadata_profile_idx_set)
    def __init__(self): 
        this = _p4pd.new_l4_profile_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_l4_profile_swkey_t
    __del__ = lambda self : None;
l4_profile_swkey_t_swigregister = _p4pd.l4_profile_swkey_t_swigregister
l4_profile_swkey_t_swigregister(l4_profile_swkey_t)

L4_PROFILE_L4_PROFILE_ID = _p4pd.L4_PROFILE_L4_PROFILE_ID
L4_PROFILE_NOP_ID = _p4pd.L4_PROFILE_NOP_ID
L4_PROFILE_MAX_ID = _p4pd.L4_PROFILE_MAX_ID
class l4_profile_l4_profile_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, l4_profile_l4_profile_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, l4_profile_l4_profile_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip_normalization_en"] = _p4pd.l4_profile_l4_profile_t_ip_normalization_en_set
    __swig_getmethods__["ip_normalization_en"] = _p4pd.l4_profile_l4_profile_t_ip_normalization_en_get
    if _newclass:ip_normalization_en = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_normalization_en_get, _p4pd.l4_profile_l4_profile_t_ip_normalization_en_set)
    __swig_setmethods__["ip_rsvd_flags_action"] = _p4pd.l4_profile_l4_profile_t_ip_rsvd_flags_action_set
    __swig_getmethods__["ip_rsvd_flags_action"] = _p4pd.l4_profile_l4_profile_t_ip_rsvd_flags_action_get
    if _newclass:ip_rsvd_flags_action = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_rsvd_flags_action_get, _p4pd.l4_profile_l4_profile_t_ip_rsvd_flags_action_set)
    __swig_setmethods__["ip_df_action"] = _p4pd.l4_profile_l4_profile_t_ip_df_action_set
    __swig_getmethods__["ip_df_action"] = _p4pd.l4_profile_l4_profile_t_ip_df_action_get
    if _newclass:ip_df_action = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_df_action_get, _p4pd.l4_profile_l4_profile_t_ip_df_action_set)
    __swig_setmethods__["ip_options_action"] = _p4pd.l4_profile_l4_profile_t_ip_options_action_set
    __swig_getmethods__["ip_options_action"] = _p4pd.l4_profile_l4_profile_t_ip_options_action_get
    if _newclass:ip_options_action = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_options_action_get, _p4pd.l4_profile_l4_profile_t_ip_options_action_set)
    __swig_setmethods__["ip_invalid_len_action"] = _p4pd.l4_profile_l4_profile_t_ip_invalid_len_action_set
    __swig_getmethods__["ip_invalid_len_action"] = _p4pd.l4_profile_l4_profile_t_ip_invalid_len_action_get
    if _newclass:ip_invalid_len_action = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_invalid_len_action_get, _p4pd.l4_profile_l4_profile_t_ip_invalid_len_action_set)
    __swig_setmethods__["ip_fragment_drop"] = _p4pd.l4_profile_l4_profile_t_ip_fragment_drop_set
    __swig_getmethods__["ip_fragment_drop"] = _p4pd.l4_profile_l4_profile_t_ip_fragment_drop_get
    if _newclass:ip_fragment_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_fragment_drop_get, _p4pd.l4_profile_l4_profile_t_ip_fragment_drop_set)
    __swig_setmethods__["ip_ttl_change_detect_en"] = _p4pd.l4_profile_l4_profile_t_ip_ttl_change_detect_en_set
    __swig_getmethods__["ip_ttl_change_detect_en"] = _p4pd.l4_profile_l4_profile_t_ip_ttl_change_detect_en_get
    if _newclass:ip_ttl_change_detect_en = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_ttl_change_detect_en_get, _p4pd.l4_profile_l4_profile_t_ip_ttl_change_detect_en_set)
    __swig_setmethods__["ip_normalize_ttl"] = _p4pd.l4_profile_l4_profile_t_ip_normalize_ttl_set
    __swig_getmethods__["ip_normalize_ttl"] = _p4pd.l4_profile_l4_profile_t_ip_normalize_ttl_get
    if _newclass:ip_normalize_ttl = _swig_property(_p4pd.l4_profile_l4_profile_t_ip_normalize_ttl_get, _p4pd.l4_profile_l4_profile_t_ip_normalize_ttl_set)
    __swig_setmethods__["icmp_deprecated_msgs_drop"] = _p4pd.l4_profile_l4_profile_t_icmp_deprecated_msgs_drop_set
    __swig_getmethods__["icmp_deprecated_msgs_drop"] = _p4pd.l4_profile_l4_profile_t_icmp_deprecated_msgs_drop_get
    if _newclass:icmp_deprecated_msgs_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_icmp_deprecated_msgs_drop_get, _p4pd.l4_profile_l4_profile_t_icmp_deprecated_msgs_drop_set)
    __swig_setmethods__["icmp_redirect_msg_drop"] = _p4pd.l4_profile_l4_profile_t_icmp_redirect_msg_drop_set
    __swig_getmethods__["icmp_redirect_msg_drop"] = _p4pd.l4_profile_l4_profile_t_icmp_redirect_msg_drop_get
    if _newclass:icmp_redirect_msg_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_icmp_redirect_msg_drop_get, _p4pd.l4_profile_l4_profile_t_icmp_redirect_msg_drop_set)
    __swig_setmethods__["icmp_invalid_code_action"] = _p4pd.l4_profile_l4_profile_t_icmp_invalid_code_action_set
    __swig_getmethods__["icmp_invalid_code_action"] = _p4pd.l4_profile_l4_profile_t_icmp_invalid_code_action_get
    if _newclass:icmp_invalid_code_action = _swig_property(_p4pd.l4_profile_l4_profile_t_icmp_invalid_code_action_get, _p4pd.l4_profile_l4_profile_t_icmp_invalid_code_action_set)
    __swig_setmethods__["tcp_rsvd_flags_action"] = _p4pd.l4_profile_l4_profile_t_tcp_rsvd_flags_action_set
    __swig_getmethods__["tcp_rsvd_flags_action"] = _p4pd.l4_profile_l4_profile_t_tcp_rsvd_flags_action_get
    if _newclass:tcp_rsvd_flags_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_rsvd_flags_action_get, _p4pd.l4_profile_l4_profile_t_tcp_rsvd_flags_action_set)
    __swig_setmethods__["tcp_unexpected_mss_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_mss_action_set
    __swig_getmethods__["tcp_unexpected_mss_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_mss_action_get
    if _newclass:tcp_unexpected_mss_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_unexpected_mss_action_get, _p4pd.l4_profile_l4_profile_t_tcp_unexpected_mss_action_set)
    __swig_setmethods__["tcp_unexpected_win_scale_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_win_scale_action_set
    __swig_getmethods__["tcp_unexpected_win_scale_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_win_scale_action_get
    if _newclass:tcp_unexpected_win_scale_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_unexpected_win_scale_action_get, _p4pd.l4_profile_l4_profile_t_tcp_unexpected_win_scale_action_set)
    __swig_setmethods__["tcp_urg_ptr_not_set_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_ptr_not_set_action_set
    __swig_getmethods__["tcp_urg_ptr_not_set_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_ptr_not_set_action_get
    if _newclass:tcp_urg_ptr_not_set_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_urg_ptr_not_set_action_get, _p4pd.l4_profile_l4_profile_t_tcp_urg_ptr_not_set_action_set)
    __swig_setmethods__["tcp_urg_flag_not_set_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_flag_not_set_action_set
    __swig_getmethods__["tcp_urg_flag_not_set_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_flag_not_set_action_get
    if _newclass:tcp_urg_flag_not_set_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_urg_flag_not_set_action_get, _p4pd.l4_profile_l4_profile_t_tcp_urg_flag_not_set_action_set)
    __swig_setmethods__["tcp_urg_payload_missing_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_payload_missing_action_set
    __swig_getmethods__["tcp_urg_payload_missing_action"] = _p4pd.l4_profile_l4_profile_t_tcp_urg_payload_missing_action_get
    if _newclass:tcp_urg_payload_missing_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_urg_payload_missing_action_get, _p4pd.l4_profile_l4_profile_t_tcp_urg_payload_missing_action_set)
    __swig_setmethods__["tcp_unexpected_echo_ts_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_echo_ts_action_set
    __swig_getmethods__["tcp_unexpected_echo_ts_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_echo_ts_action_get
    if _newclass:tcp_unexpected_echo_ts_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_unexpected_echo_ts_action_get, _p4pd.l4_profile_l4_profile_t_tcp_unexpected_echo_ts_action_set)
    __swig_setmethods__["tcp_rst_with_data_action"] = _p4pd.l4_profile_l4_profile_t_tcp_rst_with_data_action_set
    __swig_getmethods__["tcp_rst_with_data_action"] = _p4pd.l4_profile_l4_profile_t_tcp_rst_with_data_action_get
    if _newclass:tcp_rst_with_data_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_rst_with_data_action_get, _p4pd.l4_profile_l4_profile_t_tcp_rst_with_data_action_set)
    __swig_setmethods__["tcp_data_len_gt_mss_action"] = _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_mss_action_set
    __swig_getmethods__["tcp_data_len_gt_mss_action"] = _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_mss_action_get
    if _newclass:tcp_data_len_gt_mss_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_mss_action_get, _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_mss_action_set)
    __swig_setmethods__["tcp_data_len_gt_win_size_action"] = _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_win_size_action_set
    __swig_getmethods__["tcp_data_len_gt_win_size_action"] = _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_win_size_action_get
    if _newclass:tcp_data_len_gt_win_size_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_win_size_action_get, _p4pd.l4_profile_l4_profile_t_tcp_data_len_gt_win_size_action_set)
    __swig_setmethods__["tcp_unexpected_ts_option_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_ts_option_action_set
    __swig_getmethods__["tcp_unexpected_ts_option_action"] = _p4pd.l4_profile_l4_profile_t_tcp_unexpected_ts_option_action_get
    if _newclass:tcp_unexpected_ts_option_action = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_unexpected_ts_option_action_get, _p4pd.l4_profile_l4_profile_t_tcp_unexpected_ts_option_action_set)
    __swig_setmethods__["tcp_ts_not_present_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_ts_not_present_drop_set
    __swig_getmethods__["tcp_ts_not_present_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_ts_not_present_drop_get
    if _newclass:tcp_ts_not_present_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_ts_not_present_drop_get, _p4pd.l4_profile_l4_profile_t_tcp_ts_not_present_drop_set)
    __swig_setmethods__["tcp_flags_nonsyn_noack_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_flags_nonsyn_noack_drop_set
    __swig_getmethods__["tcp_flags_nonsyn_noack_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_flags_nonsyn_noack_drop_get
    if _newclass:tcp_flags_nonsyn_noack_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_flags_nonsyn_noack_drop_get, _p4pd.l4_profile_l4_profile_t_tcp_flags_nonsyn_noack_drop_set)
    __swig_setmethods__["tcp_invalid_flags_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_invalid_flags_drop_set
    __swig_getmethods__["tcp_invalid_flags_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_invalid_flags_drop_get
    if _newclass:tcp_invalid_flags_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_invalid_flags_drop_get, _p4pd.l4_profile_l4_profile_t_tcp_invalid_flags_drop_set)
    __swig_setmethods__["tcp_non_syn_first_pkt_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_non_syn_first_pkt_drop_set
    __swig_getmethods__["tcp_non_syn_first_pkt_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_non_syn_first_pkt_drop_get
    if _newclass:tcp_non_syn_first_pkt_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_non_syn_first_pkt_drop_get, _p4pd.l4_profile_l4_profile_t_tcp_non_syn_first_pkt_drop_set)
    __swig_setmethods__["tcp_split_handshake_detect_en"] = _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_detect_en_set
    __swig_getmethods__["tcp_split_handshake_detect_en"] = _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_detect_en_get
    if _newclass:tcp_split_handshake_detect_en = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_split_handshake_detect_en_get, _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_detect_en_set)
    __swig_setmethods__["tcp_split_handshake_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_drop_set
    __swig_getmethods__["tcp_split_handshake_drop"] = _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_drop_get
    if _newclass:tcp_split_handshake_drop = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_split_handshake_drop_get, _p4pd.l4_profile_l4_profile_t_tcp_split_handshake_drop_set)
    __swig_setmethods__["icmp_normalization_en"] = _p4pd.l4_profile_l4_profile_t_icmp_normalization_en_set
    __swig_getmethods__["icmp_normalization_en"] = _p4pd.l4_profile_l4_profile_t_icmp_normalization_en_get
    if _newclass:icmp_normalization_en = _swig_property(_p4pd.l4_profile_l4_profile_t_icmp_normalization_en_get, _p4pd.l4_profile_l4_profile_t_icmp_normalization_en_set)
    __swig_setmethods__["tcp_normalization_en"] = _p4pd.l4_profile_l4_profile_t_tcp_normalization_en_set
    __swig_getmethods__["tcp_normalization_en"] = _p4pd.l4_profile_l4_profile_t_tcp_normalization_en_get
    if _newclass:tcp_normalization_en = _swig_property(_p4pd.l4_profile_l4_profile_t_tcp_normalization_en_get, _p4pd.l4_profile_l4_profile_t_tcp_normalization_en_set)
    def __init__(self): 
        this = _p4pd.new_l4_profile_l4_profile_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_l4_profile_l4_profile_t
    __del__ = lambda self : None;
l4_profile_l4_profile_t_swigregister = _p4pd.l4_profile_l4_profile_t_swigregister
l4_profile_l4_profile_t_swigregister(l4_profile_l4_profile_t)

class l4_profile_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, l4_profile_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, l4_profile_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l4_profile_l4_profile"] = _p4pd.l4_profile_action_union_t_l4_profile_l4_profile_set
    __swig_getmethods__["l4_profile_l4_profile"] = _p4pd.l4_profile_action_union_t_l4_profile_l4_profile_get
    if _newclass:l4_profile_l4_profile = _swig_property(_p4pd.l4_profile_action_union_t_l4_profile_l4_profile_get, _p4pd.l4_profile_action_union_t_l4_profile_l4_profile_set)
    def __init__(self): 
        this = _p4pd.new_l4_profile_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_l4_profile_action_union_t
    __del__ = lambda self : None;
l4_profile_action_union_t_swigregister = _p4pd.l4_profile_action_union_t_swigregister
l4_profile_action_union_t_swigregister(l4_profile_action_union_t)

class l4_profile_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, l4_profile_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, l4_profile_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.l4_profile_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.l4_profile_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.l4_profile_actiondata_actionid_get, _p4pd.l4_profile_actiondata_actionid_set)
    __swig_setmethods__["l4_profile_action_u"] = _p4pd.l4_profile_actiondata_l4_profile_action_u_set
    __swig_getmethods__["l4_profile_action_u"] = _p4pd.l4_profile_actiondata_l4_profile_action_u_get
    if _newclass:l4_profile_action_u = _swig_property(_p4pd.l4_profile_actiondata_l4_profile_action_u_get, _p4pd.l4_profile_actiondata_l4_profile_action_u_set)
    def __init__(self): 
        this = _p4pd.new_l4_profile_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_l4_profile_actiondata
    __del__ = lambda self : None;
l4_profile_actiondata_swigregister = _p4pd.l4_profile_actiondata_swigregister
l4_profile_actiondata_swigregister(l4_profile_actiondata)

class tcp_stateless_normalization_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_stateless_normalization_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_stateless_normalization_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tcp_stateless_normalization_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_stateless_normalization_swkey_t
    __del__ = lambda self : None;
tcp_stateless_normalization_swkey_t_swigregister = _p4pd.tcp_stateless_normalization_swkey_t_swigregister
tcp_stateless_normalization_swkey_t_swigregister(tcp_stateless_normalization_swkey_t)

TCP_STATELESS_NORMALIZATION_TCP_STATELESS_NORMALIZATION_ID = _p4pd.TCP_STATELESS_NORMALIZATION_TCP_STATELESS_NORMALIZATION_ID
TCP_STATELESS_NORMALIZATION_MAX_ID = _p4pd.TCP_STATELESS_NORMALIZATION_MAX_ID
class tcp_stateless_normalization_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_stateless_normalization_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_stateless_normalization_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tcp_stateless_normalization_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_stateless_normalization_action_union_t
    __del__ = lambda self : None;
tcp_stateless_normalization_action_union_t_swigregister = _p4pd.tcp_stateless_normalization_action_union_t_swigregister
tcp_stateless_normalization_action_union_t_swigregister(tcp_stateless_normalization_action_union_t)

class tcp_stateless_normalization_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_stateless_normalization_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_stateless_normalization_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tcp_stateless_normalization_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tcp_stateless_normalization_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tcp_stateless_normalization_actiondata_actionid_get, _p4pd.tcp_stateless_normalization_actiondata_actionid_set)
    __swig_setmethods__["tcp_stateless_normalization_action_u"] = _p4pd.tcp_stateless_normalization_actiondata_tcp_stateless_normalization_action_u_set
    __swig_getmethods__["tcp_stateless_normalization_action_u"] = _p4pd.tcp_stateless_normalization_actiondata_tcp_stateless_normalization_action_u_get
    if _newclass:tcp_stateless_normalization_action_u = _swig_property(_p4pd.tcp_stateless_normalization_actiondata_tcp_stateless_normalization_action_u_get, _p4pd.tcp_stateless_normalization_actiondata_tcp_stateless_normalization_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tcp_stateless_normalization_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_stateless_normalization_actiondata
    __del__ = lambda self : None;
tcp_stateless_normalization_actiondata_swigregister = _p4pd.tcp_stateless_normalization_actiondata_swigregister
tcp_stateless_normalization_actiondata_swigregister(tcp_stateless_normalization_actiondata)

class session_state_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session_state_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session_state_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_info_metadata_session_state_index"] = _p4pd.session_state_swkey_t_flow_info_metadata_session_state_index_set
    __swig_getmethods__["flow_info_metadata_session_state_index"] = _p4pd.session_state_swkey_t_flow_info_metadata_session_state_index_get
    if _newclass:flow_info_metadata_session_state_index = _swig_property(_p4pd.session_state_swkey_t_flow_info_metadata_session_state_index_get, _p4pd.session_state_swkey_t_flow_info_metadata_session_state_index_set)
    def __init__(self): 
        this = _p4pd.new_session_state_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_session_state_swkey_t
    __del__ = lambda self : None;
session_state_swkey_t_swigregister = _p4pd.session_state_swkey_t_swigregister
session_state_swkey_t_swigregister(session_state_swkey_t)

SESSION_STATE_NOP_ID = _p4pd.SESSION_STATE_NOP_ID
SESSION_STATE_TCP_SESSION_STATE_INFO_ID = _p4pd.SESSION_STATE_TCP_SESSION_STATE_INFO_ID
SESSION_STATE_MAX_ID = _p4pd.SESSION_STATE_MAX_ID
class session_state_tcp_session_state_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session_state_tcp_session_state_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session_state_tcp_session_state_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iflow_tcp_seq_num"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_seq_num_set
    __swig_getmethods__["iflow_tcp_seq_num"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_seq_num_get
    if _newclass:iflow_tcp_seq_num = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_seq_num_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_seq_num_set)
    __swig_setmethods__["iflow_tcp_ack_num"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ack_num_set
    __swig_getmethods__["iflow_tcp_ack_num"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ack_num_get
    if _newclass:iflow_tcp_ack_num = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ack_num_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ack_num_set)
    __swig_setmethods__["iflow_tcp_win_sz"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_sz_set
    __swig_getmethods__["iflow_tcp_win_sz"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_sz_get
    if _newclass:iflow_tcp_win_sz = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_sz_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_sz_set)
    __swig_setmethods__["iflow_tcp_win_scale"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_scale_set
    __swig_getmethods__["iflow_tcp_win_scale"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_scale_get
    if _newclass:iflow_tcp_win_scale = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_scale_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_win_scale_set)
    __swig_setmethods__["iflow_tcp_mss"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_mss_set
    __swig_getmethods__["iflow_tcp_mss"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_mss_get
    if _newclass:iflow_tcp_mss = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_mss_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_mss_set)
    __swig_setmethods__["iflow_tcp_state"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_state_set
    __swig_getmethods__["iflow_tcp_state"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_state_get
    if _newclass:iflow_tcp_state = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_state_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_state_set)
    __swig_setmethods__["iflow_exceptions_seen"] = _p4pd.session_state_tcp_session_state_info_t_iflow_exceptions_seen_set
    __swig_getmethods__["iflow_exceptions_seen"] = _p4pd.session_state_tcp_session_state_info_t_iflow_exceptions_seen_get
    if _newclass:iflow_exceptions_seen = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_exceptions_seen_get, _p4pd.session_state_tcp_session_state_info_t_iflow_exceptions_seen_set)
    __swig_setmethods__["rflow_tcp_seq_num"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_seq_num_set
    __swig_getmethods__["rflow_tcp_seq_num"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_seq_num_get
    if _newclass:rflow_tcp_seq_num = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_seq_num_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_seq_num_set)
    __swig_setmethods__["rflow_tcp_ack_num"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_ack_num_set
    __swig_getmethods__["rflow_tcp_ack_num"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_ack_num_get
    if _newclass:rflow_tcp_ack_num = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_ack_num_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_ack_num_set)
    __swig_setmethods__["rflow_tcp_win_sz"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_sz_set
    __swig_getmethods__["rflow_tcp_win_sz"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_sz_get
    if _newclass:rflow_tcp_win_sz = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_sz_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_sz_set)
    __swig_setmethods__["rflow_tcp_win_scale"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_scale_set
    __swig_getmethods__["rflow_tcp_win_scale"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_scale_get
    if _newclass:rflow_tcp_win_scale = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_scale_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_win_scale_set)
    __swig_setmethods__["rflow_tcp_mss"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_mss_set
    __swig_getmethods__["rflow_tcp_mss"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_mss_get
    if _newclass:rflow_tcp_mss = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_mss_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_mss_set)
    __swig_setmethods__["rflow_tcp_state"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_state_set
    __swig_getmethods__["rflow_tcp_state"] = _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_state_get
    if _newclass:rflow_tcp_state = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_tcp_state_get, _p4pd.session_state_tcp_session_state_info_t_rflow_tcp_state_set)
    __swig_setmethods__["syn_cookie_delta"] = _p4pd.session_state_tcp_session_state_info_t_syn_cookie_delta_set
    __swig_getmethods__["syn_cookie_delta"] = _p4pd.session_state_tcp_session_state_info_t_syn_cookie_delta_get
    if _newclass:syn_cookie_delta = _swig_property(_p4pd.session_state_tcp_session_state_info_t_syn_cookie_delta_get, _p4pd.session_state_tcp_session_state_info_t_syn_cookie_delta_set)
    __swig_setmethods__["rflow_exceptions_seen"] = _p4pd.session_state_tcp_session_state_info_t_rflow_exceptions_seen_set
    __swig_getmethods__["rflow_exceptions_seen"] = _p4pd.session_state_tcp_session_state_info_t_rflow_exceptions_seen_get
    if _newclass:rflow_exceptions_seen = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_exceptions_seen_get, _p4pd.session_state_tcp_session_state_info_t_rflow_exceptions_seen_set)
    __swig_setmethods__["flow_rtt_seq_check_enabled"] = _p4pd.session_state_tcp_session_state_info_t_flow_rtt_seq_check_enabled_set
    __swig_getmethods__["flow_rtt_seq_check_enabled"] = _p4pd.session_state_tcp_session_state_info_t_flow_rtt_seq_check_enabled_get
    if _newclass:flow_rtt_seq_check_enabled = _swig_property(_p4pd.session_state_tcp_session_state_info_t_flow_rtt_seq_check_enabled_get, _p4pd.session_state_tcp_session_state_info_t_flow_rtt_seq_check_enabled_set)
    __swig_setmethods__["iflow_rtt_in_progress"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_in_progress_set
    __swig_getmethods__["iflow_rtt_in_progress"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_in_progress_get
    if _newclass:iflow_rtt_in_progress = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_rtt_in_progress_get, _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_in_progress_set)
    __swig_setmethods__["iflow_rtt"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_set
    __swig_getmethods__["iflow_rtt"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_get
    if _newclass:iflow_rtt = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_rtt_get, _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_set)
    __swig_setmethods__["iflow_rtt_seq_no"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_seq_no_set
    __swig_getmethods__["iflow_rtt_seq_no"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_seq_no_get
    if _newclass:iflow_rtt_seq_no = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_rtt_seq_no_get, _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_seq_no_set)
    __swig_setmethods__["iflow_rtt_timestamp"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_timestamp_set
    __swig_getmethods__["iflow_rtt_timestamp"] = _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_timestamp_get
    if _newclass:iflow_rtt_timestamp = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_rtt_timestamp_get, _p4pd.session_state_tcp_session_state_info_t_iflow_rtt_timestamp_set)
    __swig_setmethods__["rflow_rtt_in_progress"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_in_progress_set
    __swig_getmethods__["rflow_rtt_in_progress"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_in_progress_get
    if _newclass:rflow_rtt_in_progress = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_rtt_in_progress_get, _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_in_progress_set)
    __swig_setmethods__["rflow_rtt"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_set
    __swig_getmethods__["rflow_rtt"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_get
    if _newclass:rflow_rtt = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_rtt_get, _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_set)
    __swig_setmethods__["rflow_rtt_seq_no"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_seq_no_set
    __swig_getmethods__["rflow_rtt_seq_no"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_seq_no_get
    if _newclass:rflow_rtt_seq_no = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_rtt_seq_no_get, _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_seq_no_set)
    __swig_setmethods__["rflow_rtt_timestamp"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_timestamp_set
    __swig_getmethods__["rflow_rtt_timestamp"] = _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_timestamp_get
    if _newclass:rflow_rtt_timestamp = _swig_property(_p4pd.session_state_tcp_session_state_info_t_rflow_rtt_timestamp_get, _p4pd.session_state_tcp_session_state_info_t_rflow_rtt_timestamp_set)
    __swig_setmethods__["iflow_tcp_ws_option_sent"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ws_option_sent_set
    __swig_getmethods__["iflow_tcp_ws_option_sent"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ws_option_sent_get
    if _newclass:iflow_tcp_ws_option_sent = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ws_option_sent_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ws_option_sent_set)
    __swig_setmethods__["iflow_tcp_ts_option_sent"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ts_option_sent_set
    __swig_getmethods__["iflow_tcp_ts_option_sent"] = _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ts_option_sent_get
    if _newclass:iflow_tcp_ts_option_sent = _swig_property(_p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ts_option_sent_get, _p4pd.session_state_tcp_session_state_info_t_iflow_tcp_ts_option_sent_set)
    __swig_setmethods__["tcp_ts_option_negotiated"] = _p4pd.session_state_tcp_session_state_info_t_tcp_ts_option_negotiated_set
    __swig_getmethods__["tcp_ts_option_negotiated"] = _p4pd.session_state_tcp_session_state_info_t_tcp_ts_option_negotiated_get
    if _newclass:tcp_ts_option_negotiated = _swig_property(_p4pd.session_state_tcp_session_state_info_t_tcp_ts_option_negotiated_get, _p4pd.session_state_tcp_session_state_info_t_tcp_ts_option_negotiated_set)
    def __init__(self): 
        this = _p4pd.new_session_state_tcp_session_state_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_session_state_tcp_session_state_info_t
    __del__ = lambda self : None;
session_state_tcp_session_state_info_t_swigregister = _p4pd.session_state_tcp_session_state_info_t_swigregister
session_state_tcp_session_state_info_t_swigregister(session_state_tcp_session_state_info_t)

class session_state_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session_state_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session_state_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["session_state_tcp_session_state_info"] = _p4pd.session_state_action_union_t_session_state_tcp_session_state_info_set
    __swig_getmethods__["session_state_tcp_session_state_info"] = _p4pd.session_state_action_union_t_session_state_tcp_session_state_info_get
    if _newclass:session_state_tcp_session_state_info = _swig_property(_p4pd.session_state_action_union_t_session_state_tcp_session_state_info_get, _p4pd.session_state_action_union_t_session_state_tcp_session_state_info_set)
    def __init__(self): 
        this = _p4pd.new_session_state_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_session_state_action_union_t
    __del__ = lambda self : None;
session_state_action_union_t_swigregister = _p4pd.session_state_action_union_t_swigregister
session_state_action_union_t_swigregister(session_state_action_union_t)

class session_state_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, session_state_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, session_state_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.session_state_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.session_state_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.session_state_actiondata_actionid_get, _p4pd.session_state_actiondata_actionid_set)
    __swig_setmethods__["session_state_action_u"] = _p4pd.session_state_actiondata_session_state_action_u_set
    __swig_getmethods__["session_state_action_u"] = _p4pd.session_state_actiondata_session_state_action_u_get
    if _newclass:session_state_action_u = _swig_property(_p4pd.session_state_actiondata_session_state_action_u_get, _p4pd.session_state_actiondata_session_state_action_u_set)
    def __init__(self): 
        this = _p4pd.new_session_state_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_session_state_actiondata
    __del__ = lambda self : None;
session_state_actiondata_swigregister = _p4pd.session_state_actiondata_swigregister
session_state_actiondata_swigregister(session_state_actiondata)

class ddos_src_dst_policer_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_src_dst_policer_idx"] = _p4pd.ddos_src_dst_policer_action_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_src_dst_policer_idx"] = _p4pd.ddos_src_dst_policer_action_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_get
    if _newclass:ddos_metadata_ddos_src_dst_policer_idx = _swig_property(_p4pd.ddos_src_dst_policer_action_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_get, _p4pd.ddos_src_dst_policer_action_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_action_swkey_t
    __del__ = lambda self : None;
ddos_src_dst_policer_action_swkey_t_swigregister = _p4pd.ddos_src_dst_policer_action_swkey_t_swigregister
ddos_src_dst_policer_action_swkey_t_swigregister(ddos_src_dst_policer_action_swkey_t)

DDOS_SRC_DST_POLICER_ACTION_NOP_ID = _p4pd.DDOS_SRC_DST_POLICER_ACTION_NOP_ID
DDOS_SRC_DST_POLICER_ACTION_DDOS_SRC_DST_POLICER_ACTION_ID = _p4pd.DDOS_SRC_DST_POLICER_ACTION_DDOS_SRC_DST_POLICER_ACTION_ID
DDOS_SRC_DST_POLICER_ACTION_MAX_ID = _p4pd.DDOS_SRC_DST_POLICER_ACTION_MAX_ID
class ddos_src_dst_policer_action_ddos_src_dst_policer_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_action_ddos_src_dst_policer_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_action_ddos_src_dst_policer_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_dst_policer_saved_color"] = _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_saved_color_set
    __swig_getmethods__["ddos_src_dst_policer_saved_color"] = _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_saved_color_get
    if _newclass:ddos_src_dst_policer_saved_color = _swig_property(_p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_saved_color_get, _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_saved_color_set)
    __swig_setmethods__["ddos_src_dst_policer_dropped_packets"] = _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_dropped_packets_set
    __swig_getmethods__["ddos_src_dst_policer_dropped_packets"] = _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_dropped_packets_get
    if _newclass:ddos_src_dst_policer_dropped_packets = _swig_property(_p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_dropped_packets_get, _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_ddos_src_dst_policer_dropped_packets_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_action_ddos_src_dst_policer_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_action_ddos_src_dst_policer_action_t
    __del__ = lambda self : None;
ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_swigregister = _p4pd.ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_swigregister
ddos_src_dst_policer_action_ddos_src_dst_policer_action_t_swigregister(ddos_src_dst_policer_action_ddos_src_dst_policer_action_t)

class ddos_src_dst_policer_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_dst_policer_action_ddos_src_dst_policer_action"] = _p4pd.ddos_src_dst_policer_action_action_union_t_ddos_src_dst_policer_action_ddos_src_dst_policer_action_set
    __swig_getmethods__["ddos_src_dst_policer_action_ddos_src_dst_policer_action"] = _p4pd.ddos_src_dst_policer_action_action_union_t_ddos_src_dst_policer_action_ddos_src_dst_policer_action_get
    if _newclass:ddos_src_dst_policer_action_ddos_src_dst_policer_action = _swig_property(_p4pd.ddos_src_dst_policer_action_action_union_t_ddos_src_dst_policer_action_ddos_src_dst_policer_action_get, _p4pd.ddos_src_dst_policer_action_action_union_t_ddos_src_dst_policer_action_ddos_src_dst_policer_action_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_action_action_union_t
    __del__ = lambda self : None;
ddos_src_dst_policer_action_action_union_t_swigregister = _p4pd.ddos_src_dst_policer_action_action_union_t_swigregister
ddos_src_dst_policer_action_action_union_t_swigregister(ddos_src_dst_policer_action_action_union_t)

class ddos_src_dst_policer_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_dst_policer_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_dst_policer_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_dst_policer_action_actiondata_actionid_get, _p4pd.ddos_src_dst_policer_action_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_dst_policer_action_action_u"] = _p4pd.ddos_src_dst_policer_action_actiondata_ddos_src_dst_policer_action_action_u_set
    __swig_getmethods__["ddos_src_dst_policer_action_action_u"] = _p4pd.ddos_src_dst_policer_action_actiondata_ddos_src_dst_policer_action_action_u_get
    if _newclass:ddos_src_dst_policer_action_action_u = _swig_property(_p4pd.ddos_src_dst_policer_action_actiondata_ddos_src_dst_policer_action_action_u_get, _p4pd.ddos_src_dst_policer_action_actiondata_ddos_src_dst_policer_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_action_actiondata
    __del__ = lambda self : None;
ddos_src_dst_policer_action_actiondata_swigregister = _p4pd.ddos_src_dst_policer_action_actiondata_swigregister
ddos_src_dst_policer_action_actiondata_swigregister(ddos_src_dst_policer_action_actiondata)

class tunnel_decap_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_swkey_t
    __del__ = lambda self : None;
tunnel_decap_swkey_t_swigregister = _p4pd.tunnel_decap_swkey_t_swigregister
tunnel_decap_swkey_t_swigregister(tunnel_decap_swkey_t)

TUNNEL_DECAP_REMOVE_TUNNEL_HDRS_ID = _p4pd.TUNNEL_DECAP_REMOVE_TUNNEL_HDRS_ID
TUNNEL_DECAP_MAX_ID = _p4pd.TUNNEL_DECAP_MAX_ID
class tunnel_decap_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_action_union_t
    __del__ = lambda self : None;
tunnel_decap_action_union_t_swigregister = _p4pd.tunnel_decap_action_union_t_swigregister
tunnel_decap_action_union_t_swigregister(tunnel_decap_action_union_t)

class tunnel_decap_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tunnel_decap_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tunnel_decap_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tunnel_decap_actiondata_actionid_get, _p4pd.tunnel_decap_actiondata_actionid_set)
    __swig_setmethods__["tunnel_decap_action_u"] = _p4pd.tunnel_decap_actiondata_tunnel_decap_action_u_set
    __swig_getmethods__["tunnel_decap_action_u"] = _p4pd.tunnel_decap_actiondata_tunnel_decap_action_u_get
    if _newclass:tunnel_decap_action_u = _swig_property(_p4pd.tunnel_decap_actiondata_tunnel_decap_action_u_get, _p4pd.tunnel_decap_actiondata_tunnel_decap_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_actiondata
    __del__ = lambda self : None;
tunnel_decap_actiondata_swigregister = _p4pd.tunnel_decap_actiondata_swigregister
tunnel_decap_actiondata_swigregister(tunnel_decap_actiondata)

class ddos_src_dst_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_src_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_src_get
    if _newclass:flow_lkp_metadata_lkp_src = _swig_property(_p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_src_get, _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_src_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dst_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dst_get
    if _newclass:flow_lkp_metadata_lkp_dst = _swig_property(_p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dst_get, _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dst_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dport_get
    if _newclass:flow_lkp_metadata_lkp_dport = _swig_property(_p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dport_get, _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_dport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_proto_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_proto_get
    if _newclass:flow_lkp_metadata_lkp_proto = _swig_property(_p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_proto_get, _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_proto_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.ddos_src_dst_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["entry_inactive_ddos_src_dst"] = _p4pd.ddos_src_dst_swkey_t_entry_inactive_ddos_src_dst_set
    __swig_getmethods__["entry_inactive_ddos_src_dst"] = _p4pd.ddos_src_dst_swkey_t_entry_inactive_ddos_src_dst_get
    if _newclass:entry_inactive_ddos_src_dst = _swig_property(_p4pd.ddos_src_dst_swkey_t_entry_inactive_ddos_src_dst_get, _p4pd.ddos_src_dst_swkey_t_entry_inactive_ddos_src_dst_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_swkey_t
    __del__ = lambda self : None;
ddos_src_dst_swkey_t_swigregister = _p4pd.ddos_src_dst_swkey_t_swigregister
ddos_src_dst_swkey_t_swigregister(ddos_src_dst_swkey_t)

class ddos_src_dst_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get
    if _newclass:flow_lkp_metadata_lkp_src_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get
    if _newclass:flow_lkp_metadata_lkp_dst_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get
    if _newclass:flow_lkp_metadata_lkp_dport_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get
    if _newclass:flow_lkp_metadata_lkp_proto_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get
    if _newclass:flow_lkp_metadata_lkp_vrf_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set)
    __swig_setmethods__["entry_inactive_ddos_src_dst_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_entry_inactive_ddos_src_dst_mask_set
    __swig_getmethods__["entry_inactive_ddos_src_dst_mask"] = _p4pd.ddos_src_dst_swkey_mask_t_entry_inactive_ddos_src_dst_mask_get
    if _newclass:entry_inactive_ddos_src_dst_mask = _swig_property(_p4pd.ddos_src_dst_swkey_mask_t_entry_inactive_ddos_src_dst_mask_get, _p4pd.ddos_src_dst_swkey_mask_t_entry_inactive_ddos_src_dst_mask_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_swkey_mask_t
    __del__ = lambda self : None;
ddos_src_dst_swkey_mask_t_swigregister = _p4pd.ddos_src_dst_swkey_mask_t_swigregister
ddos_src_dst_swkey_mask_t_swigregister(ddos_src_dst_swkey_mask_t)

DDOS_SRC_DST_NOP_ID = _p4pd.DDOS_SRC_DST_NOP_ID
DDOS_SRC_DST_DDOS_SRC_DST_HIT_ID = _p4pd.DDOS_SRC_DST_DDOS_SRC_DST_HIT_ID
DDOS_SRC_DST_MAX_ID = _p4pd.DDOS_SRC_DST_MAX_ID
class ddos_src_dst_ddos_src_dst_hit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_ddos_src_dst_hit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_ddos_src_dst_hit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_dst_base_policer_idx"] = _p4pd.ddos_src_dst_ddos_src_dst_hit_t_ddos_src_dst_base_policer_idx_set
    __swig_getmethods__["ddos_src_dst_base_policer_idx"] = _p4pd.ddos_src_dst_ddos_src_dst_hit_t_ddos_src_dst_base_policer_idx_get
    if _newclass:ddos_src_dst_base_policer_idx = _swig_property(_p4pd.ddos_src_dst_ddos_src_dst_hit_t_ddos_src_dst_base_policer_idx_get, _p4pd.ddos_src_dst_ddos_src_dst_hit_t_ddos_src_dst_base_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_ddos_src_dst_hit_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_ddos_src_dst_hit_t
    __del__ = lambda self : None;
ddos_src_dst_ddos_src_dst_hit_t_swigregister = _p4pd.ddos_src_dst_ddos_src_dst_hit_t_swigregister
ddos_src_dst_ddos_src_dst_hit_t_swigregister(ddos_src_dst_ddos_src_dst_hit_t)

class ddos_src_dst_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_dst_ddos_src_dst_hit"] = _p4pd.ddos_src_dst_action_union_t_ddos_src_dst_ddos_src_dst_hit_set
    __swig_getmethods__["ddos_src_dst_ddos_src_dst_hit"] = _p4pd.ddos_src_dst_action_union_t_ddos_src_dst_ddos_src_dst_hit_get
    if _newclass:ddos_src_dst_ddos_src_dst_hit = _swig_property(_p4pd.ddos_src_dst_action_union_t_ddos_src_dst_ddos_src_dst_hit_get, _p4pd.ddos_src_dst_action_union_t_ddos_src_dst_ddos_src_dst_hit_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_action_union_t
    __del__ = lambda self : None;
ddos_src_dst_action_union_t_swigregister = _p4pd.ddos_src_dst_action_union_t_swigregister
ddos_src_dst_action_union_t_swigregister(ddos_src_dst_action_union_t)

class ddos_src_dst_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_dst_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_dst_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_dst_actiondata_actionid_get, _p4pd.ddos_src_dst_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_dst_action_u"] = _p4pd.ddos_src_dst_actiondata_ddos_src_dst_action_u_set
    __swig_getmethods__["ddos_src_dst_action_u"] = _p4pd.ddos_src_dst_actiondata_ddos_src_dst_action_u_get
    if _newclass:ddos_src_dst_action_u = _swig_property(_p4pd.ddos_src_dst_actiondata_ddos_src_dst_action_u_get, _p4pd.ddos_src_dst_actiondata_ddos_src_dst_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_actiondata
    __del__ = lambda self : None;
ddos_src_dst_actiondata_swigregister = _p4pd.ddos_src_dst_actiondata_swigregister
ddos_src_dst_actiondata_swigregister(ddos_src_dst_actiondata)

class flow_hash_overflow_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_overflow_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_overflow_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recirc_header_overflow_entry_index"] = _p4pd.flow_hash_overflow_swkey_t_recirc_header_overflow_entry_index_set
    __swig_getmethods__["recirc_header_overflow_entry_index"] = _p4pd.flow_hash_overflow_swkey_t_recirc_header_overflow_entry_index_get
    if _newclass:recirc_header_overflow_entry_index = _swig_property(_p4pd.flow_hash_overflow_swkey_t_recirc_header_overflow_entry_index_get, _p4pd.flow_hash_overflow_swkey_t_recirc_header_overflow_entry_index_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_overflow_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_overflow_swkey_t
    __del__ = lambda self : None;
flow_hash_overflow_swkey_t_swigregister = _p4pd.flow_hash_overflow_swkey_t_swigregister
flow_hash_overflow_swkey_t_swigregister(flow_hash_overflow_swkey_t)

FLOW_HASH_OVERFLOW_FLOW_HASH_INFO_ID = _p4pd.FLOW_HASH_OVERFLOW_FLOW_HASH_INFO_ID
FLOW_HASH_OVERFLOW_MAX_ID = _p4pd.FLOW_HASH_OVERFLOW_MAX_ID
class flow_hash_overflow_flow_hash_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_overflow_flow_hash_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_overflow_flow_hash_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.flow_hash_overflow_flow_hash_info_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.flow_hash_overflow_flow_hash_info_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_entry_valid_get, _p4pd.flow_hash_overflow_flow_hash_info_t_entry_valid_set)
    __swig_setmethods__["export_en"] = _p4pd.flow_hash_overflow_flow_hash_info_t_export_en_set
    __swig_getmethods__["export_en"] = _p4pd.flow_hash_overflow_flow_hash_info_t_export_en_get
    if _newclass:export_en = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_export_en_get, _p4pd.flow_hash_overflow_flow_hash_info_t_export_en_set)
    __swig_setmethods__["flow_index"] = _p4pd.flow_hash_overflow_flow_hash_info_t_flow_index_set
    __swig_getmethods__["flow_index"] = _p4pd.flow_hash_overflow_flow_hash_info_t_flow_index_get
    if _newclass:flow_index = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_flow_index_get, _p4pd.flow_hash_overflow_flow_hash_info_t_flow_index_set)
    __swig_setmethods__["hash1"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash1_set
    __swig_getmethods__["hash1"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash1_get
    if _newclass:hash1 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash1_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash1_set)
    __swig_setmethods__["hint1"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint1_set
    __swig_getmethods__["hint1"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint1_get
    if _newclass:hint1 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint1_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint1_set)
    __swig_setmethods__["hash2"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash2_set
    __swig_getmethods__["hash2"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash2_get
    if _newclass:hash2 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash2_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash2_set)
    __swig_setmethods__["hint2"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint2_set
    __swig_getmethods__["hint2"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint2_get
    if _newclass:hint2 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint2_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint2_set)
    __swig_setmethods__["hash3"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash3_set
    __swig_getmethods__["hash3"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash3_get
    if _newclass:hash3 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash3_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash3_set)
    __swig_setmethods__["hint3"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint3_set
    __swig_getmethods__["hint3"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint3_get
    if _newclass:hint3 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint3_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint3_set)
    __swig_setmethods__["hash4"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash4_set
    __swig_getmethods__["hash4"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash4_get
    if _newclass:hash4 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash4_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash4_set)
    __swig_setmethods__["hint4"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint4_set
    __swig_getmethods__["hint4"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint4_get
    if _newclass:hint4 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint4_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint4_set)
    __swig_setmethods__["hash5"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash5_set
    __swig_getmethods__["hash5"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash5_get
    if _newclass:hash5 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash5_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash5_set)
    __swig_setmethods__["hint5"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint5_set
    __swig_getmethods__["hint5"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint5_get
    if _newclass:hint5 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint5_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint5_set)
    __swig_setmethods__["hash6"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash6_set
    __swig_getmethods__["hash6"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hash6_get
    if _newclass:hash6 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hash6_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hash6_set)
    __swig_setmethods__["hint6"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint6_set
    __swig_getmethods__["hint6"] = _p4pd.flow_hash_overflow_flow_hash_info_t_hint6_get
    if _newclass:hint6 = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_hint6_get, _p4pd.flow_hash_overflow_flow_hash_info_t_hint6_set)
    __swig_setmethods__["more_hashs"] = _p4pd.flow_hash_overflow_flow_hash_info_t_more_hashs_set
    __swig_getmethods__["more_hashs"] = _p4pd.flow_hash_overflow_flow_hash_info_t_more_hashs_get
    if _newclass:more_hashs = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_more_hashs_get, _p4pd.flow_hash_overflow_flow_hash_info_t_more_hashs_set)
    __swig_setmethods__["more_hints"] = _p4pd.flow_hash_overflow_flow_hash_info_t_more_hints_set
    __swig_getmethods__["more_hints"] = _p4pd.flow_hash_overflow_flow_hash_info_t_more_hints_get
    if _newclass:more_hints = _swig_property(_p4pd.flow_hash_overflow_flow_hash_info_t_more_hints_get, _p4pd.flow_hash_overflow_flow_hash_info_t_more_hints_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_overflow_flow_hash_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_overflow_flow_hash_info_t
    __del__ = lambda self : None;
flow_hash_overflow_flow_hash_info_t_swigregister = _p4pd.flow_hash_overflow_flow_hash_info_t_swigregister
flow_hash_overflow_flow_hash_info_t_swigregister(flow_hash_overflow_flow_hash_info_t)

class flow_hash_overflow_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_overflow_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_overflow_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_hash_overflow_flow_hash_info"] = _p4pd.flow_hash_overflow_action_union_t_flow_hash_overflow_flow_hash_info_set
    __swig_getmethods__["flow_hash_overflow_flow_hash_info"] = _p4pd.flow_hash_overflow_action_union_t_flow_hash_overflow_flow_hash_info_get
    if _newclass:flow_hash_overflow_flow_hash_info = _swig_property(_p4pd.flow_hash_overflow_action_union_t_flow_hash_overflow_flow_hash_info_get, _p4pd.flow_hash_overflow_action_union_t_flow_hash_overflow_flow_hash_info_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_overflow_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_overflow_action_union_t
    __del__ = lambda self : None;
flow_hash_overflow_action_union_t_swigregister = _p4pd.flow_hash_overflow_action_union_t_swigregister
flow_hash_overflow_action_union_t_swigregister(flow_hash_overflow_action_union_t)

class flow_hash_overflow_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_hash_overflow_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_hash_overflow_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.flow_hash_overflow_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.flow_hash_overflow_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.flow_hash_overflow_actiondata_actionid_get, _p4pd.flow_hash_overflow_actiondata_actionid_set)
    __swig_setmethods__["flow_hash_overflow_action_u"] = _p4pd.flow_hash_overflow_actiondata_flow_hash_overflow_action_u_set
    __swig_getmethods__["flow_hash_overflow_action_u"] = _p4pd.flow_hash_overflow_actiondata_flow_hash_overflow_action_u_get
    if _newclass:flow_hash_overflow_action_u = _swig_property(_p4pd.flow_hash_overflow_actiondata_flow_hash_overflow_action_u_get, _p4pd.flow_hash_overflow_actiondata_flow_hash_overflow_action_u_set)
    def __init__(self): 
        this = _p4pd.new_flow_hash_overflow_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_hash_overflow_actiondata
    __del__ = lambda self : None;
flow_hash_overflow_actiondata_swigregister = _p4pd.flow_hash_overflow_actiondata_swigregister
flow_hash_overflow_actiondata_swigregister(flow_hash_overflow_actiondata)

class input_properties_mac_vlan_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_mac_vlan_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_mac_vlan_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_inactive_input_mac_vlan"] = _p4pd.input_properties_mac_vlan_swkey_t_entry_inactive_input_mac_vlan_set
    __swig_getmethods__["entry_inactive_input_mac_vlan"] = _p4pd.input_properties_mac_vlan_swkey_t_entry_inactive_input_mac_vlan_get
    if _newclass:entry_inactive_input_mac_vlan = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_entry_inactive_input_mac_vlan_get, _p4pd.input_properties_mac_vlan_swkey_t_entry_inactive_input_mac_vlan_set)
    __swig_setmethods__["p4plus_to_p4_vlan_tag"] = _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_vlan_tag_set
    __swig_getmethods__["p4plus_to_p4_vlan_tag"] = _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_vlan_tag_get
    if _newclass:p4plus_to_p4_vlan_tag = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_vlan_tag_get, _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_vlan_tag_set)
    __swig_setmethods__["vlan_tag_valid"] = _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_valid_set
    __swig_getmethods__["vlan_tag_valid"] = _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_valid_get
    if _newclass:vlan_tag_valid = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_valid_get, _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_valid_set)
    __swig_setmethods__["p4plus_to_p4_valid"] = _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_valid_set
    __swig_getmethods__["p4plus_to_p4_valid"] = _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_valid_get
    if _newclass:p4plus_to_p4_valid = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_valid_get, _p4pd.input_properties_mac_vlan_swkey_t_p4plus_to_p4_valid_set)
    __swig_setmethods__["control_metadata_uplink"] = _p4pd.input_properties_mac_vlan_swkey_t_control_metadata_uplink_set
    __swig_getmethods__["control_metadata_uplink"] = _p4pd.input_properties_mac_vlan_swkey_t_control_metadata_uplink_get
    if _newclass:control_metadata_uplink = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_control_metadata_uplink_get, _p4pd.input_properties_mac_vlan_swkey_t_control_metadata_uplink_set)
    __swig_setmethods__["ethernet_srcAddr"] = _p4pd.input_properties_mac_vlan_swkey_t_ethernet_srcAddr_set
    __swig_getmethods__["ethernet_srcAddr"] = _p4pd.input_properties_mac_vlan_swkey_t_ethernet_srcAddr_get
    if _newclass:ethernet_srcAddr = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_ethernet_srcAddr_get, _p4pd.input_properties_mac_vlan_swkey_t_ethernet_srcAddr_set)
    __swig_setmethods__["vlan_tag_vid"] = _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_vid_set
    __swig_getmethods__["vlan_tag_vid"] = _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_vid_get
    if _newclass:vlan_tag_vid = _swig_property(_p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_vid_get, _p4pd.input_properties_mac_vlan_swkey_t_vlan_tag_vid_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_mac_vlan_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_mac_vlan_swkey_t
    __del__ = lambda self : None;
input_properties_mac_vlan_swkey_t_swigregister = _p4pd.input_properties_mac_vlan_swkey_t_swigregister
input_properties_mac_vlan_swkey_t_swigregister(input_properties_mac_vlan_swkey_t)

class input_properties_mac_vlan_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_mac_vlan_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_mac_vlan_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_inactive_input_mac_vlan_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_entry_inactive_input_mac_vlan_mask_set
    __swig_getmethods__["entry_inactive_input_mac_vlan_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_entry_inactive_input_mac_vlan_mask_get
    if _newclass:entry_inactive_input_mac_vlan_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_entry_inactive_input_mac_vlan_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_entry_inactive_input_mac_vlan_mask_set)
    __swig_setmethods__["p4plus_to_p4_vlan_tag_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_vlan_tag_mask_set
    __swig_getmethods__["p4plus_to_p4_vlan_tag_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_vlan_tag_mask_get
    if _newclass:p4plus_to_p4_vlan_tag_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_vlan_tag_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_vlan_tag_mask_set)
    __swig_setmethods__["vlan_tag_valid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_valid_mask_set
    __swig_getmethods__["vlan_tag_valid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_valid_mask_get
    if _newclass:vlan_tag_valid_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_valid_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_valid_mask_set)
    __swig_setmethods__["p4plus_to_p4_valid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_valid_mask_set
    __swig_getmethods__["p4plus_to_p4_valid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_valid_mask_get
    if _newclass:p4plus_to_p4_valid_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_valid_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_p4plus_to_p4_valid_mask_set)
    __swig_setmethods__["control_metadata_uplink_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_control_metadata_uplink_mask_set
    __swig_getmethods__["control_metadata_uplink_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_control_metadata_uplink_mask_get
    if _newclass:control_metadata_uplink_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_control_metadata_uplink_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_control_metadata_uplink_mask_set)
    __swig_setmethods__["ethernet_srcAddr_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_ethernet_srcAddr_mask_set
    __swig_getmethods__["ethernet_srcAddr_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_ethernet_srcAddr_mask_get
    if _newclass:ethernet_srcAddr_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_ethernet_srcAddr_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_ethernet_srcAddr_mask_set)
    __swig_setmethods__["vlan_tag_vid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_vid_mask_set
    __swig_getmethods__["vlan_tag_vid_mask"] = _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_vid_mask_get
    if _newclass:vlan_tag_vid_mask = _swig_property(_p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_vid_mask_get, _p4pd.input_properties_mac_vlan_swkey_mask_t_vlan_tag_vid_mask_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_mac_vlan_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_mac_vlan_swkey_mask_t
    __del__ = lambda self : None;
input_properties_mac_vlan_swkey_mask_t_swigregister = _p4pd.input_properties_mac_vlan_swkey_mask_t_swigregister
input_properties_mac_vlan_swkey_mask_t_swigregister(input_properties_mac_vlan_swkey_mask_t)

INPUT_PROPERTIES_MAC_VLAN_INPUT_PROPERTIES_MAC_VLAN_ID = _p4pd.INPUT_PROPERTIES_MAC_VLAN_INPUT_PROPERTIES_MAC_VLAN_ID
INPUT_PROPERTIES_MAC_VLAN_MAX_ID = _p4pd.INPUT_PROPERTIES_MAC_VLAN_MAX_ID
class input_properties_mac_vlan_input_properties_mac_vlan_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_mac_vlan_input_properties_mac_vlan_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_mac_vlan_input_properties_mac_vlan_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_lif"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_set
    __swig_getmethods__["src_lif"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_get
    if _newclass:src_lif = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_set)
    __swig_setmethods__["src_lif_check_en"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_check_en_set
    __swig_getmethods__["src_lif_check_en"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_check_en_get
    if _newclass:src_lif_check_en = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_check_en_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lif_check_en_set)
    __swig_setmethods__["vrf"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_vrf_set
    __swig_getmethods__["vrf"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_vrf_get
    if _newclass:vrf = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_vrf_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_vrf_set)
    __swig_setmethods__["dir"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dir_set
    __swig_getmethods__["dir"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dir_get
    if _newclass:dir = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dir_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dir_set)
    __swig_setmethods__["flow_miss_action"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_action_set
    __swig_getmethods__["flow_miss_action"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_action_get
    if _newclass:flow_miss_action = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_action_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_action_set)
    __swig_setmethods__["flow_miss_idx"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_idx_set
    __swig_getmethods__["flow_miss_idx"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_idx_get
    if _newclass:flow_miss_idx = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_idx_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_idx_set)
    __swig_setmethods__["ipsg_enable"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_ipsg_enable_set
    __swig_getmethods__["ipsg_enable"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_ipsg_enable_get
    if _newclass:ipsg_enable = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_ipsg_enable_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_ipsg_enable_set)
    __swig_setmethods__["dscp"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dscp_set
    __swig_getmethods__["dscp"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dscp_get
    if _newclass:dscp = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dscp_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dscp_set)
    __swig_setmethods__["l4_profile_idx"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_l4_profile_idx_set
    __swig_getmethods__["l4_profile_idx"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_l4_profile_idx_get
    if _newclass:l4_profile_idx = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_l4_profile_idx_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_l4_profile_idx_set)
    __swig_setmethods__["src_lport"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lport_set
    __swig_getmethods__["src_lport"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lport_get
    if _newclass:src_lport = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lport_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_src_lport_set)
    __swig_setmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_tm_oqueue_set
    __swig_getmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_tm_oqueue_get
    if _newclass:flow_miss_tm_oqueue = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_tm_oqueue_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_flow_miss_tm_oqueue_set)
    __swig_setmethods__["dst_lport"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dst_lport_get, _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_dst_lport_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_mac_vlan_input_properties_mac_vlan_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_mac_vlan_input_properties_mac_vlan_t
    __del__ = lambda self : None;
input_properties_mac_vlan_input_properties_mac_vlan_t_swigregister = _p4pd.input_properties_mac_vlan_input_properties_mac_vlan_t_swigregister
input_properties_mac_vlan_input_properties_mac_vlan_t_swigregister(input_properties_mac_vlan_input_properties_mac_vlan_t)

class input_properties_mac_vlan_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_mac_vlan_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_mac_vlan_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_properties_mac_vlan_input_properties_mac_vlan"] = _p4pd.input_properties_mac_vlan_action_union_t_input_properties_mac_vlan_input_properties_mac_vlan_set
    __swig_getmethods__["input_properties_mac_vlan_input_properties_mac_vlan"] = _p4pd.input_properties_mac_vlan_action_union_t_input_properties_mac_vlan_input_properties_mac_vlan_get
    if _newclass:input_properties_mac_vlan_input_properties_mac_vlan = _swig_property(_p4pd.input_properties_mac_vlan_action_union_t_input_properties_mac_vlan_input_properties_mac_vlan_get, _p4pd.input_properties_mac_vlan_action_union_t_input_properties_mac_vlan_input_properties_mac_vlan_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_mac_vlan_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_mac_vlan_action_union_t
    __del__ = lambda self : None;
input_properties_mac_vlan_action_union_t_swigregister = _p4pd.input_properties_mac_vlan_action_union_t_swigregister
input_properties_mac_vlan_action_union_t_swigregister(input_properties_mac_vlan_action_union_t)

class input_properties_mac_vlan_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_mac_vlan_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_mac_vlan_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.input_properties_mac_vlan_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.input_properties_mac_vlan_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.input_properties_mac_vlan_actiondata_actionid_get, _p4pd.input_properties_mac_vlan_actiondata_actionid_set)
    __swig_setmethods__["input_properties_mac_vlan_action_u"] = _p4pd.input_properties_mac_vlan_actiondata_input_properties_mac_vlan_action_u_set
    __swig_getmethods__["input_properties_mac_vlan_action_u"] = _p4pd.input_properties_mac_vlan_actiondata_input_properties_mac_vlan_action_u_get
    if _newclass:input_properties_mac_vlan_action_u = _swig_property(_p4pd.input_properties_mac_vlan_actiondata_input_properties_mac_vlan_action_u_get, _p4pd.input_properties_mac_vlan_actiondata_input_properties_mac_vlan_action_u_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_mac_vlan_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_mac_vlan_actiondata
    __del__ = lambda self : None;
input_properties_mac_vlan_actiondata_swigregister = _p4pd.input_properties_mac_vlan_actiondata_swigregister
input_properties_mac_vlan_actiondata_swigregister(input_properties_mac_vlan_actiondata)

class ddos_src_dst_policer_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_src_dst_policer_idx"] = _p4pd.ddos_src_dst_policer_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_src_dst_policer_idx"] = _p4pd.ddos_src_dst_policer_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_get
    if _newclass:ddos_metadata_ddos_src_dst_policer_idx = _swig_property(_p4pd.ddos_src_dst_policer_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_get, _p4pd.ddos_src_dst_policer_swkey_t_ddos_metadata_ddos_src_dst_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_swkey_t
    __del__ = lambda self : None;
ddos_src_dst_policer_swkey_t_swigregister = _p4pd.ddos_src_dst_policer_swkey_t_swigregister
ddos_src_dst_policer_swkey_t_swigregister(ddos_src_dst_policer_swkey_t)

DDOS_SRC_DST_POLICER_EXECUTE_DDOS_SRC_DST_POLICER_ID = _p4pd.DDOS_SRC_DST_POLICER_EXECUTE_DDOS_SRC_DST_POLICER_ID
DDOS_SRC_DST_POLICER_MAX_ID = _p4pd.DDOS_SRC_DST_POLICER_MAX_ID
class ddos_src_dst_policer_execute_ddos_src_dst_policer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_execute_ddos_src_dst_policer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_execute_ddos_src_dst_policer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt_set)
    __swig_setmethods__["entry_valid2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid2_set
    __swig_getmethods__["entry_valid2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid2_get
    if _newclass:entry_valid2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_entry_valid2_set)
    __swig_setmethods__["pkt_rate2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate2_set
    __swig_getmethods__["pkt_rate2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate2_get
    if _newclass:pkt_rate2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_pkt_rate2_set)
    __swig_setmethods__["rlimit_en2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en2_set
    __swig_getmethods__["rlimit_en2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en2_get
    if _newclass:rlimit_en2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_en2_set)
    __swig_setmethods__["rlimit_prof2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof2_set
    __swig_getmethods__["rlimit_prof2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof2_get
    if _newclass:rlimit_prof2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rlimit_prof2_set)
    __swig_setmethods__["color_aware2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware2_set
    __swig_getmethods__["color_aware2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware2_get
    if _newclass:color_aware2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_color_aware2_set)
    __swig_setmethods__["rsvd2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd2_set
    __swig_getmethods__["rsvd2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd2_get
    if _newclass:rsvd2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rsvd2_set)
    __swig_setmethods__["axi_wr_pend2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend2_set
    __swig_getmethods__["axi_wr_pend2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend2_get
    if _newclass:axi_wr_pend2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_axi_wr_pend2_set)
    __swig_setmethods__["burst2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst2_set
    __swig_getmethods__["burst2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst2_get
    if _newclass:burst2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_burst2_set)
    __swig_setmethods__["rate2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate2_set
    __swig_getmethods__["rate2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate2_get
    if _newclass:rate2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_rate2_set)
    __swig_setmethods__["tbkt2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt2_set
    __swig_getmethods__["tbkt2"] = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt2_get
    if _newclass:tbkt2 = _swig_property(_p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt2_get, _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_tbkt2_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_execute_ddos_src_dst_policer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_execute_ddos_src_dst_policer_t
    __del__ = lambda self : None;
ddos_src_dst_policer_execute_ddos_src_dst_policer_t_swigregister = _p4pd.ddos_src_dst_policer_execute_ddos_src_dst_policer_t_swigregister
ddos_src_dst_policer_execute_ddos_src_dst_policer_t_swigregister(ddos_src_dst_policer_execute_ddos_src_dst_policer_t)

class ddos_src_dst_policer_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_dst_policer_execute_ddos_src_dst_policer"] = _p4pd.ddos_src_dst_policer_action_union_t_ddos_src_dst_policer_execute_ddos_src_dst_policer_set
    __swig_getmethods__["ddos_src_dst_policer_execute_ddos_src_dst_policer"] = _p4pd.ddos_src_dst_policer_action_union_t_ddos_src_dst_policer_execute_ddos_src_dst_policer_get
    if _newclass:ddos_src_dst_policer_execute_ddos_src_dst_policer = _swig_property(_p4pd.ddos_src_dst_policer_action_union_t_ddos_src_dst_policer_execute_ddos_src_dst_policer_get, _p4pd.ddos_src_dst_policer_action_union_t_ddos_src_dst_policer_execute_ddos_src_dst_policer_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_action_union_t
    __del__ = lambda self : None;
ddos_src_dst_policer_action_union_t_swigregister = _p4pd.ddos_src_dst_policer_action_union_t_swigregister
ddos_src_dst_policer_action_union_t_swigregister(ddos_src_dst_policer_action_union_t)

class ddos_src_dst_policer_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_dst_policer_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_dst_policer_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_dst_policer_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_dst_policer_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_dst_policer_actiondata_actionid_get, _p4pd.ddos_src_dst_policer_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_dst_policer_action_u"] = _p4pd.ddos_src_dst_policer_actiondata_ddos_src_dst_policer_action_u_set
    __swig_getmethods__["ddos_src_dst_policer_action_u"] = _p4pd.ddos_src_dst_policer_actiondata_ddos_src_dst_policer_action_u_get
    if _newclass:ddos_src_dst_policer_action_u = _swig_property(_p4pd.ddos_src_dst_policer_actiondata_ddos_src_dst_policer_action_u_get, _p4pd.ddos_src_dst_policer_actiondata_ddos_src_dst_policer_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_dst_policer_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_dst_policer_actiondata
    __del__ = lambda self : None;
ddos_src_dst_policer_actiondata_swigregister = _p4pd.ddos_src_dst_policer_actiondata_swigregister
ddos_src_dst_policer_actiondata_swigregister(ddos_src_dst_policer_actiondata)

class tcp_options_fixup_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_options_fixup_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_options_fixup_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tcp_options_fixup_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_options_fixup_swkey_t
    __del__ = lambda self : None;
tcp_options_fixup_swkey_t_swigregister = _p4pd.tcp_options_fixup_swkey_t_swigregister
tcp_options_fixup_swkey_t_swigregister(tcp_options_fixup_swkey_t)

TCP_OPTIONS_FIXUP_TCP_OPTIONS_FIXUP_ID = _p4pd.TCP_OPTIONS_FIXUP_TCP_OPTIONS_FIXUP_ID
TCP_OPTIONS_FIXUP_MAX_ID = _p4pd.TCP_OPTIONS_FIXUP_MAX_ID
class tcp_options_fixup_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_options_fixup_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_options_fixup_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tcp_options_fixup_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_options_fixup_action_union_t
    __del__ = lambda self : None;
tcp_options_fixup_action_union_t_swigregister = _p4pd.tcp_options_fixup_action_union_t_swigregister
tcp_options_fixup_action_union_t_swigregister(tcp_options_fixup_action_union_t)

class tcp_options_fixup_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tcp_options_fixup_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tcp_options_fixup_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tcp_options_fixup_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tcp_options_fixup_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tcp_options_fixup_actiondata_actionid_get, _p4pd.tcp_options_fixup_actiondata_actionid_set)
    __swig_setmethods__["tcp_options_fixup_action_u"] = _p4pd.tcp_options_fixup_actiondata_tcp_options_fixup_action_u_set
    __swig_getmethods__["tcp_options_fixup_action_u"] = _p4pd.tcp_options_fixup_actiondata_tcp_options_fixup_action_u_get
    if _newclass:tcp_options_fixup_action_u = _swig_property(_p4pd.tcp_options_fixup_actiondata_tcp_options_fixup_action_u_get, _p4pd.tcp_options_fixup_actiondata_tcp_options_fixup_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tcp_options_fixup_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tcp_options_fixup_actiondata
    __del__ = lambda self : None;
tcp_options_fixup_actiondata_swigregister = _p4pd.tcp_options_fixup_actiondata_swigregister
tcp_options_fixup_actiondata_swigregister(tcp_options_fixup_actiondata)

class p4plus_app_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_p4plus_app_id"] = _p4pd.p4plus_app_swkey_t_control_metadata_p4plus_app_id_set
    __swig_getmethods__["control_metadata_p4plus_app_id"] = _p4pd.p4plus_app_swkey_t_control_metadata_p4plus_app_id_get
    if _newclass:control_metadata_p4plus_app_id = _swig_property(_p4pd.p4plus_app_swkey_t_control_metadata_p4plus_app_id_get, _p4pd.p4plus_app_swkey_t_control_metadata_p4plus_app_id_set)
    def __init__(self): 
        this = _p4pd.new_p4plus_app_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_swkey_t
    __del__ = lambda self : None;
p4plus_app_swkey_t_swigregister = _p4pd.p4plus_app_swkey_t_swigregister
p4plus_app_swkey_t_swigregister(p4plus_app_swkey_t)

P4PLUS_APP_P4PLUS_APP_CLASSIC_NIC_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_CLASSIC_NIC_ID
P4PLUS_APP_P4PLUS_APP_TCP_PROXY_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_TCP_PROXY_ID
P4PLUS_APP_P4PLUS_APP_IPSEC_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_IPSEC_ID
P4PLUS_APP_P4PLUS_APP_RDMA_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_RDMA_ID
P4PLUS_APP_P4PLUS_APP_CPU_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_CPU_ID
P4PLUS_APP_P4PLUS_APP_RAW_REDIR_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_RAW_REDIR_ID
P4PLUS_APP_P4PLUS_APP_DEFAULT_ID = _p4pd.P4PLUS_APP_P4PLUS_APP_DEFAULT_ID
P4PLUS_APP_MAX_ID = _p4pd.P4PLUS_APP_MAX_ID
class p4plus_app_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_app_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_action_union_t
    __del__ = lambda self : None;
p4plus_app_action_union_t_swigregister = _p4pd.p4plus_app_action_union_t_swigregister
p4plus_app_action_union_t_swigregister(p4plus_app_action_union_t)

class p4plus_app_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.p4plus_app_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.p4plus_app_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.p4plus_app_actiondata_actionid_get, _p4pd.p4plus_app_actiondata_actionid_set)
    __swig_setmethods__["p4plus_app_action_u"] = _p4pd.p4plus_app_actiondata_p4plus_app_action_u_set
    __swig_getmethods__["p4plus_app_action_u"] = _p4pd.p4plus_app_actiondata_p4plus_app_action_u_get
    if _newclass:p4plus_app_action_u = _swig_property(_p4pd.p4plus_app_actiondata_p4plus_app_action_u_get, _p4pd.p4plus_app_actiondata_p4plus_app_action_u_set)
    def __init__(self): 
        this = _p4pd.new_p4plus_app_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_actiondata
    __del__ = lambda self : None;
p4plus_app_actiondata_swigregister = _p4pd.p4plus_app_actiondata_swigregister
p4plus_app_actiondata_swigregister(p4plus_app_actiondata)

class decode_roce_opcode_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decode_roce_opcode_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decode_roce_opcode_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roce_bth_opCode"] = _p4pd.decode_roce_opcode_swkey_t_roce_bth_opCode_set
    __swig_getmethods__["roce_bth_opCode"] = _p4pd.decode_roce_opcode_swkey_t_roce_bth_opCode_get
    if _newclass:roce_bth_opCode = _swig_property(_p4pd.decode_roce_opcode_swkey_t_roce_bth_opCode_get, _p4pd.decode_roce_opcode_swkey_t_roce_bth_opCode_set)
    def __init__(self): 
        this = _p4pd.new_decode_roce_opcode_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_decode_roce_opcode_swkey_t
    __del__ = lambda self : None;
decode_roce_opcode_swkey_t_swigregister = _p4pd.decode_roce_opcode_swkey_t_swigregister
decode_roce_opcode_swkey_t_swigregister(decode_roce_opcode_swkey_t)

DECODE_ROCE_OPCODE_NOP_ID = _p4pd.DECODE_ROCE_OPCODE_NOP_ID
DECODE_ROCE_OPCODE_DECODE_ROCE_OPCODE_ID = _p4pd.DECODE_ROCE_OPCODE_DECODE_ROCE_OPCODE_ID
DECODE_ROCE_OPCODE_MAX_ID = _p4pd.DECODE_ROCE_OPCODE_MAX_ID
class decode_roce_opcode_decode_roce_opcode_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decode_roce_opcode_decode_roce_opcode_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decode_roce_opcode_decode_roce_opcode_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["raw_flags"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_raw_flags_set
    __swig_getmethods__["raw_flags"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_raw_flags_get
    if _newclass:raw_flags = _swig_property(_p4pd.decode_roce_opcode_decode_roce_opcode_t_raw_flags_get, _p4pd.decode_roce_opcode_decode_roce_opcode_t_raw_flags_set)
    __swig_setmethods__["len"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_len_set
    __swig_getmethods__["len"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_len_get
    if _newclass:len = _swig_property(_p4pd.decode_roce_opcode_decode_roce_opcode_t_len_get, _p4pd.decode_roce_opcode_decode_roce_opcode_t_len_set)
    __swig_setmethods__["qtype"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_qtype_set
    __swig_getmethods__["qtype"] = _p4pd.decode_roce_opcode_decode_roce_opcode_t_qtype_get
    if _newclass:qtype = _swig_property(_p4pd.decode_roce_opcode_decode_roce_opcode_t_qtype_get, _p4pd.decode_roce_opcode_decode_roce_opcode_t_qtype_set)
    def __init__(self): 
        this = _p4pd.new_decode_roce_opcode_decode_roce_opcode_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_decode_roce_opcode_decode_roce_opcode_t
    __del__ = lambda self : None;
decode_roce_opcode_decode_roce_opcode_t_swigregister = _p4pd.decode_roce_opcode_decode_roce_opcode_t_swigregister
decode_roce_opcode_decode_roce_opcode_t_swigregister(decode_roce_opcode_decode_roce_opcode_t)

class decode_roce_opcode_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decode_roce_opcode_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decode_roce_opcode_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["decode_roce_opcode_decode_roce_opcode"] = _p4pd.decode_roce_opcode_action_union_t_decode_roce_opcode_decode_roce_opcode_set
    __swig_getmethods__["decode_roce_opcode_decode_roce_opcode"] = _p4pd.decode_roce_opcode_action_union_t_decode_roce_opcode_decode_roce_opcode_get
    if _newclass:decode_roce_opcode_decode_roce_opcode = _swig_property(_p4pd.decode_roce_opcode_action_union_t_decode_roce_opcode_decode_roce_opcode_get, _p4pd.decode_roce_opcode_action_union_t_decode_roce_opcode_decode_roce_opcode_set)
    def __init__(self): 
        this = _p4pd.new_decode_roce_opcode_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_decode_roce_opcode_action_union_t
    __del__ = lambda self : None;
decode_roce_opcode_action_union_t_swigregister = _p4pd.decode_roce_opcode_action_union_t_swigregister
decode_roce_opcode_action_union_t_swigregister(decode_roce_opcode_action_union_t)

class decode_roce_opcode_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decode_roce_opcode_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decode_roce_opcode_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.decode_roce_opcode_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.decode_roce_opcode_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.decode_roce_opcode_actiondata_actionid_get, _p4pd.decode_roce_opcode_actiondata_actionid_set)
    __swig_setmethods__["decode_roce_opcode_action_u"] = _p4pd.decode_roce_opcode_actiondata_decode_roce_opcode_action_u_set
    __swig_getmethods__["decode_roce_opcode_action_u"] = _p4pd.decode_roce_opcode_actiondata_decode_roce_opcode_action_u_get
    if _newclass:decode_roce_opcode_action_u = _swig_property(_p4pd.decode_roce_opcode_actiondata_decode_roce_opcode_action_u_get, _p4pd.decode_roce_opcode_actiondata_decode_roce_opcode_action_u_set)
    def __init__(self): 
        this = _p4pd.new_decode_roce_opcode_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_decode_roce_opcode_actiondata
    __del__ = lambda self : None;
decode_roce_opcode_actiondata_swigregister = _p4pd.decode_roce_opcode_actiondata_swigregister
decode_roce_opcode_actiondata_swigregister(decode_roce_opcode_actiondata)

class drop_stats_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_stats_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_stats_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_drop_reason"] = _p4pd.drop_stats_swkey_t_control_metadata_drop_reason_set
    __swig_getmethods__["control_metadata_drop_reason"] = _p4pd.drop_stats_swkey_t_control_metadata_drop_reason_get
    if _newclass:control_metadata_drop_reason = _swig_property(_p4pd.drop_stats_swkey_t_control_metadata_drop_reason_get, _p4pd.drop_stats_swkey_t_control_metadata_drop_reason_set)
    __swig_setmethods__["entry_inactive_drop_stats"] = _p4pd.drop_stats_swkey_t_entry_inactive_drop_stats_set
    __swig_getmethods__["entry_inactive_drop_stats"] = _p4pd.drop_stats_swkey_t_entry_inactive_drop_stats_get
    if _newclass:entry_inactive_drop_stats = _swig_property(_p4pd.drop_stats_swkey_t_entry_inactive_drop_stats_get, _p4pd.drop_stats_swkey_t_entry_inactive_drop_stats_set)
    def __init__(self): 
        this = _p4pd.new_drop_stats_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_drop_stats_swkey_t
    __del__ = lambda self : None;
drop_stats_swkey_t_swigregister = _p4pd.drop_stats_swkey_t_swigregister
drop_stats_swkey_t_swigregister(drop_stats_swkey_t)

class drop_stats_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_stats_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_stats_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_drop_reason_mask"] = _p4pd.drop_stats_swkey_mask_t_control_metadata_drop_reason_mask_set
    __swig_getmethods__["control_metadata_drop_reason_mask"] = _p4pd.drop_stats_swkey_mask_t_control_metadata_drop_reason_mask_get
    if _newclass:control_metadata_drop_reason_mask = _swig_property(_p4pd.drop_stats_swkey_mask_t_control_metadata_drop_reason_mask_get, _p4pd.drop_stats_swkey_mask_t_control_metadata_drop_reason_mask_set)
    __swig_setmethods__["entry_inactive_drop_stats_mask"] = _p4pd.drop_stats_swkey_mask_t_entry_inactive_drop_stats_mask_set
    __swig_getmethods__["entry_inactive_drop_stats_mask"] = _p4pd.drop_stats_swkey_mask_t_entry_inactive_drop_stats_mask_get
    if _newclass:entry_inactive_drop_stats_mask = _swig_property(_p4pd.drop_stats_swkey_mask_t_entry_inactive_drop_stats_mask_get, _p4pd.drop_stats_swkey_mask_t_entry_inactive_drop_stats_mask_set)
    def __init__(self): 
        this = _p4pd.new_drop_stats_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_drop_stats_swkey_mask_t
    __del__ = lambda self : None;
drop_stats_swkey_mask_t_swigregister = _p4pd.drop_stats_swkey_mask_t_swigregister
drop_stats_swkey_mask_t_swigregister(drop_stats_swkey_mask_t)

DROP_STATS_NOP_ID = _p4pd.DROP_STATS_NOP_ID
DROP_STATS_DROP_STATS_ID = _p4pd.DROP_STATS_DROP_STATS_ID
DROP_STATS_MAX_ID = _p4pd.DROP_STATS_MAX_ID
class drop_stats_drop_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_stats_drop_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_stats_drop_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stats_idx"] = _p4pd.drop_stats_drop_stats_t_stats_idx_set
    __swig_getmethods__["stats_idx"] = _p4pd.drop_stats_drop_stats_t_stats_idx_get
    if _newclass:stats_idx = _swig_property(_p4pd.drop_stats_drop_stats_t_stats_idx_get, _p4pd.drop_stats_drop_stats_t_stats_idx_set)
    __swig_setmethods__["drop_pkts"] = _p4pd.drop_stats_drop_stats_t_drop_pkts_set
    __swig_getmethods__["drop_pkts"] = _p4pd.drop_stats_drop_stats_t_drop_pkts_get
    if _newclass:drop_pkts = _swig_property(_p4pd.drop_stats_drop_stats_t_drop_pkts_get, _p4pd.drop_stats_drop_stats_t_drop_pkts_set)
    __swig_setmethods__["mirror_en"] = _p4pd.drop_stats_drop_stats_t_mirror_en_set
    __swig_getmethods__["mirror_en"] = _p4pd.drop_stats_drop_stats_t_mirror_en_get
    if _newclass:mirror_en = _swig_property(_p4pd.drop_stats_drop_stats_t_mirror_en_get, _p4pd.drop_stats_drop_stats_t_mirror_en_set)
    __swig_setmethods__["mirror_session_id"] = _p4pd.drop_stats_drop_stats_t_mirror_session_id_set
    __swig_getmethods__["mirror_session_id"] = _p4pd.drop_stats_drop_stats_t_mirror_session_id_get
    if _newclass:mirror_session_id = _swig_property(_p4pd.drop_stats_drop_stats_t_mirror_session_id_get, _p4pd.drop_stats_drop_stats_t_mirror_session_id_set)
    def __init__(self): 
        this = _p4pd.new_drop_stats_drop_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_drop_stats_drop_stats_t
    __del__ = lambda self : None;
drop_stats_drop_stats_t_swigregister = _p4pd.drop_stats_drop_stats_t_swigregister
drop_stats_drop_stats_t_swigregister(drop_stats_drop_stats_t)

class drop_stats_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_stats_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_stats_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drop_stats_drop_stats"] = _p4pd.drop_stats_action_union_t_drop_stats_drop_stats_set
    __swig_getmethods__["drop_stats_drop_stats"] = _p4pd.drop_stats_action_union_t_drop_stats_drop_stats_get
    if _newclass:drop_stats_drop_stats = _swig_property(_p4pd.drop_stats_action_union_t_drop_stats_drop_stats_get, _p4pd.drop_stats_action_union_t_drop_stats_drop_stats_set)
    def __init__(self): 
        this = _p4pd.new_drop_stats_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_drop_stats_action_union_t
    __del__ = lambda self : None;
drop_stats_action_union_t_swigregister = _p4pd.drop_stats_action_union_t_swigregister
drop_stats_action_union_t_swigregister(drop_stats_action_union_t)

class drop_stats_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_stats_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_stats_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.drop_stats_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.drop_stats_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.drop_stats_actiondata_actionid_get, _p4pd.drop_stats_actiondata_actionid_set)
    __swig_setmethods__["drop_stats_action_u"] = _p4pd.drop_stats_actiondata_drop_stats_action_u_set
    __swig_getmethods__["drop_stats_action_u"] = _p4pd.drop_stats_actiondata_drop_stats_action_u_get
    if _newclass:drop_stats_action_u = _swig_property(_p4pd.drop_stats_actiondata_drop_stats_action_u_get, _p4pd.drop_stats_actiondata_drop_stats_action_u_set)
    def __init__(self): 
        this = _p4pd.new_drop_stats_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_drop_stats_actiondata
    __del__ = lambda self : None;
drop_stats_actiondata_swigregister = _p4pd.drop_stats_actiondata_swigregister
drop_stats_actiondata_swigregister(drop_stats_actiondata)

class tunnel_encap_update_inner_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_encap_update_inner_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_encap_update_inner_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["icmp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_icmp_valid_set
    __swig_getmethods__["icmp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_icmp_valid_get
    if _newclass:icmp_valid = _swig_property(_p4pd.tunnel_encap_update_inner_swkey_t_icmp_valid_get, _p4pd.tunnel_encap_update_inner_swkey_t_icmp_valid_set)
    __swig_setmethods__["tcp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_tcp_valid_set
    __swig_getmethods__["tcp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_tcp_valid_get
    if _newclass:tcp_valid = _swig_property(_p4pd.tunnel_encap_update_inner_swkey_t_tcp_valid_get, _p4pd.tunnel_encap_update_inner_swkey_t_tcp_valid_set)
    __swig_setmethods__["udp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_udp_valid_set
    __swig_getmethods__["udp_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_udp_valid_get
    if _newclass:udp_valid = _swig_property(_p4pd.tunnel_encap_update_inner_swkey_t_udp_valid_get, _p4pd.tunnel_encap_update_inner_swkey_t_udp_valid_set)
    __swig_setmethods__["ipv4_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_ipv4_valid_set
    __swig_getmethods__["ipv4_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_ipv4_valid_get
    if _newclass:ipv4_valid = _swig_property(_p4pd.tunnel_encap_update_inner_swkey_t_ipv4_valid_get, _p4pd.tunnel_encap_update_inner_swkey_t_ipv4_valid_set)
    __swig_setmethods__["ipv6_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_ipv6_valid_set
    __swig_getmethods__["ipv6_valid"] = _p4pd.tunnel_encap_update_inner_swkey_t_ipv6_valid_get
    if _newclass:ipv6_valid = _swig_property(_p4pd.tunnel_encap_update_inner_swkey_t_ipv6_valid_get, _p4pd.tunnel_encap_update_inner_swkey_t_ipv6_valid_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_encap_update_inner_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_encap_update_inner_swkey_t
    __del__ = lambda self : None;
tunnel_encap_update_inner_swkey_t_swigregister = _p4pd.tunnel_encap_update_inner_swkey_t_swigregister
tunnel_encap_update_inner_swkey_t_swigregister(tunnel_encap_update_inner_swkey_t)

TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_UDP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_UDP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_TCP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_TCP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_ICMP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_ICMP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_UNKNOWN_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV4_UNKNOWN_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_UDP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_UDP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_TCP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_TCP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_ICMP_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_ICMP_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_UNKNOWN_REWRITE_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_ENCAP_INNER_IPV6_UNKNOWN_REWRITE_ID
TUNNEL_ENCAP_UPDATE_INNER_MAX_ID = _p4pd.TUNNEL_ENCAP_UPDATE_INNER_MAX_ID
class tunnel_encap_update_inner_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_encap_update_inner_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_encap_update_inner_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tunnel_encap_update_inner_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_encap_update_inner_action_union_t
    __del__ = lambda self : None;
tunnel_encap_update_inner_action_union_t_swigregister = _p4pd.tunnel_encap_update_inner_action_union_t_swigregister
tunnel_encap_update_inner_action_union_t_swigregister(tunnel_encap_update_inner_action_union_t)

class tunnel_encap_update_inner_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_encap_update_inner_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_encap_update_inner_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tunnel_encap_update_inner_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tunnel_encap_update_inner_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tunnel_encap_update_inner_actiondata_actionid_get, _p4pd.tunnel_encap_update_inner_actiondata_actionid_set)
    __swig_setmethods__["tunnel_encap_update_inner_action_u"] = _p4pd.tunnel_encap_update_inner_actiondata_tunnel_encap_update_inner_action_u_set
    __swig_getmethods__["tunnel_encap_update_inner_action_u"] = _p4pd.tunnel_encap_update_inner_actiondata_tunnel_encap_update_inner_action_u_get
    if _newclass:tunnel_encap_update_inner_action_u = _swig_property(_p4pd.tunnel_encap_update_inner_actiondata_tunnel_encap_update_inner_action_u_get, _p4pd.tunnel_encap_update_inner_actiondata_tunnel_encap_update_inner_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_encap_update_inner_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_encap_update_inner_actiondata
    __del__ = lambda self : None;
tunnel_encap_update_inner_actiondata_swigregister = _p4pd.tunnel_encap_update_inner_actiondata_swigregister
tunnel_encap_update_inner_actiondata_swigregister(tunnel_encap_update_inner_actiondata)

class p4plus_app_prep_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_prep_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_prep_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_app_prep_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_prep_swkey_t
    __del__ = lambda self : None;
p4plus_app_prep_swkey_t_swigregister = _p4pd.p4plus_app_prep_swkey_t_swigregister
p4plus_app_prep_swkey_t_swigregister(p4plus_app_prep_swkey_t)

P4PLUS_APP_PREP_P4PLUS_APP_PREP_ID = _p4pd.P4PLUS_APP_PREP_P4PLUS_APP_PREP_ID
P4PLUS_APP_PREP_MAX_ID = _p4pd.P4PLUS_APP_PREP_MAX_ID
class p4plus_app_prep_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_prep_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_prep_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_app_prep_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_prep_action_union_t
    __del__ = lambda self : None;
p4plus_app_prep_action_union_t_swigregister = _p4pd.p4plus_app_prep_action_union_t_swigregister
p4plus_app_prep_action_union_t_swigregister(p4plus_app_prep_action_union_t)

class p4plus_app_prep_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_app_prep_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_app_prep_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.p4plus_app_prep_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.p4plus_app_prep_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.p4plus_app_prep_actiondata_actionid_get, _p4pd.p4plus_app_prep_actiondata_actionid_set)
    __swig_setmethods__["p4plus_app_prep_action_u"] = _p4pd.p4plus_app_prep_actiondata_p4plus_app_prep_action_u_set
    __swig_getmethods__["p4plus_app_prep_action_u"] = _p4pd.p4plus_app_prep_actiondata_p4plus_app_prep_action_u_get
    if _newclass:p4plus_app_prep_action_u = _swig_property(_p4pd.p4plus_app_prep_actiondata_p4plus_app_prep_action_u_get, _p4pd.p4plus_app_prep_actiondata_p4plus_app_prep_action_u_set)
    def __init__(self): 
        this = _p4pd.new_p4plus_app_prep_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_app_prep_actiondata
    __del__ = lambda self : None;
p4plus_app_prep_actiondata_swigregister = _p4pd.p4plus_app_prep_actiondata_swigregister
p4plus_app_prep_actiondata_swigregister(p4plus_app_prep_actiondata)

class egress_policer_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["policer_metadata_egress_policer_index"] = _p4pd.egress_policer_swkey_t_policer_metadata_egress_policer_index_set
    __swig_getmethods__["policer_metadata_egress_policer_index"] = _p4pd.egress_policer_swkey_t_policer_metadata_egress_policer_index_get
    if _newclass:policer_metadata_egress_policer_index = _swig_property(_p4pd.egress_policer_swkey_t_policer_metadata_egress_policer_index_get, _p4pd.egress_policer_swkey_t_policer_metadata_egress_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_swkey_t
    __del__ = lambda self : None;
egress_policer_swkey_t_swigregister = _p4pd.egress_policer_swkey_t_swigregister
egress_policer_swkey_t_swigregister(egress_policer_swkey_t)

EGRESS_POLICER_EXECUTE_EGRESS_POLICER_ID = _p4pd.EGRESS_POLICER_EXECUTE_EGRESS_POLICER_ID
EGRESS_POLICER_MAX_ID = _p4pd.EGRESS_POLICER_MAX_ID
class egress_policer_execute_egress_policer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_execute_egress_policer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_execute_egress_policer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.egress_policer_execute_egress_policer_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.egress_policer_execute_egress_policer_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_entry_valid_get, _p4pd.egress_policer_execute_egress_policer_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.egress_policer_execute_egress_policer_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.egress_policer_execute_egress_policer_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_pkt_rate_get, _p4pd.egress_policer_execute_egress_policer_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.egress_policer_execute_egress_policer_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.egress_policer_execute_egress_policer_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_rlimit_en_get, _p4pd.egress_policer_execute_egress_policer_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.egress_policer_execute_egress_policer_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.egress_policer_execute_egress_policer_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_rlimit_prof_get, _p4pd.egress_policer_execute_egress_policer_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.egress_policer_execute_egress_policer_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.egress_policer_execute_egress_policer_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_color_aware_get, _p4pd.egress_policer_execute_egress_policer_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.egress_policer_execute_egress_policer_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.egress_policer_execute_egress_policer_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_rsvd_get, _p4pd.egress_policer_execute_egress_policer_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.egress_policer_execute_egress_policer_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.egress_policer_execute_egress_policer_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_axi_wr_pend_get, _p4pd.egress_policer_execute_egress_policer_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.egress_policer_execute_egress_policer_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.egress_policer_execute_egress_policer_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_burst_get, _p4pd.egress_policer_execute_egress_policer_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.egress_policer_execute_egress_policer_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.egress_policer_execute_egress_policer_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_rate_get, _p4pd.egress_policer_execute_egress_policer_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.egress_policer_execute_egress_policer_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.egress_policer_execute_egress_policer_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.egress_policer_execute_egress_policer_t_tbkt_get, _p4pd.egress_policer_execute_egress_policer_t_tbkt_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_execute_egress_policer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_execute_egress_policer_t
    __del__ = lambda self : None;
egress_policer_execute_egress_policer_t_swigregister = _p4pd.egress_policer_execute_egress_policer_t_swigregister
egress_policer_execute_egress_policer_t_swigregister(egress_policer_execute_egress_policer_t)

class egress_policer_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["egress_policer_execute_egress_policer"] = _p4pd.egress_policer_action_union_t_egress_policer_execute_egress_policer_set
    __swig_getmethods__["egress_policer_execute_egress_policer"] = _p4pd.egress_policer_action_union_t_egress_policer_execute_egress_policer_get
    if _newclass:egress_policer_execute_egress_policer = _swig_property(_p4pd.egress_policer_action_union_t_egress_policer_execute_egress_policer_get, _p4pd.egress_policer_action_union_t_egress_policer_execute_egress_policer_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_action_union_t
    __del__ = lambda self : None;
egress_policer_action_union_t_swigregister = _p4pd.egress_policer_action_union_t_swigregister
egress_policer_action_union_t_swigregister(egress_policer_action_union_t)

class egress_policer_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, egress_policer_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, egress_policer_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.egress_policer_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.egress_policer_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.egress_policer_actiondata_actionid_get, _p4pd.egress_policer_actiondata_actionid_set)
    __swig_setmethods__["egress_policer_action_u"] = _p4pd.egress_policer_actiondata_egress_policer_action_u_set
    __swig_getmethods__["egress_policer_action_u"] = _p4pd.egress_policer_actiondata_egress_policer_action_u_get
    if _newclass:egress_policer_action_u = _swig_property(_p4pd.egress_policer_actiondata_egress_policer_action_u_get, _p4pd.egress_policer_actiondata_egress_policer_action_u_set)
    def __init__(self): 
        this = _p4pd.new_egress_policer_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_egress_policer_actiondata
    __del__ = lambda self : None;
egress_policer_actiondata_swigregister = _p4pd.egress_policer_actiondata_swigregister
egress_policer_actiondata_swigregister(egress_policer_actiondata)

class flow_info_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_info_metadata_flow_index"] = _p4pd.flow_info_swkey_t_flow_info_metadata_flow_index_set
    __swig_getmethods__["flow_info_metadata_flow_index"] = _p4pd.flow_info_swkey_t_flow_info_metadata_flow_index_get
    if _newclass:flow_info_metadata_flow_index = _swig_property(_p4pd.flow_info_swkey_t_flow_info_metadata_flow_index_get, _p4pd.flow_info_swkey_t_flow_info_metadata_flow_index_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_swkey_t
    __del__ = lambda self : None;
flow_info_swkey_t_swigregister = _p4pd.flow_info_swkey_t_swigregister
flow_info_swkey_t_swigregister(flow_info_swkey_t)

FLOW_INFO_NOP_ID = _p4pd.FLOW_INFO_NOP_ID
FLOW_INFO_FLOW_INFO_ID = _p4pd.FLOW_INFO_FLOW_INFO_ID
FLOW_INFO_FLOW_MISS_ID = _p4pd.FLOW_INFO_FLOW_MISS_ID
FLOW_INFO_FLOW_HIT_DROP_ID = _p4pd.FLOW_INFO_FLOW_HIT_DROP_ID
FLOW_INFO_FLOW_HIT_FROM_VM_BOUNCE_ID = _p4pd.FLOW_INFO_FLOW_HIT_FROM_VM_BOUNCE_ID
FLOW_INFO_FLOW_HIT_TO_VM_BOUNCE_ID = _p4pd.FLOW_INFO_FLOW_HIT_TO_VM_BOUNCE_ID
FLOW_INFO_MAX_ID = _p4pd.FLOW_INFO_MAX_ID
class flow_info_flow_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_flow_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_flow_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.flow_info_flow_info_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.flow_info_flow_info_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.flow_info_flow_info_t_dst_lport_get, _p4pd.flow_info_flow_info_t_dst_lport_set)
    __swig_setmethods__["multicast_en"] = _p4pd.flow_info_flow_info_t_multicast_en_set
    __swig_getmethods__["multicast_en"] = _p4pd.flow_info_flow_info_t_multicast_en_get
    if _newclass:multicast_en = _swig_property(_p4pd.flow_info_flow_info_t_multicast_en_get, _p4pd.flow_info_flow_info_t_multicast_en_set)
    __swig_setmethods__["multicast_ptr"] = _p4pd.flow_info_flow_info_t_multicast_ptr_set
    __swig_getmethods__["multicast_ptr"] = _p4pd.flow_info_flow_info_t_multicast_ptr_get
    if _newclass:multicast_ptr = _swig_property(_p4pd.flow_info_flow_info_t_multicast_ptr_get, _p4pd.flow_info_flow_info_t_multicast_ptr_set)
    __swig_setmethods__["qtype"] = _p4pd.flow_info_flow_info_t_qtype_set
    __swig_getmethods__["qtype"] = _p4pd.flow_info_flow_info_t_qtype_get
    if _newclass:qtype = _swig_property(_p4pd.flow_info_flow_info_t_qtype_get, _p4pd.flow_info_flow_info_t_qtype_set)
    __swig_setmethods__["ingress_policer_index"] = _p4pd.flow_info_flow_info_t_ingress_policer_index_set
    __swig_getmethods__["ingress_policer_index"] = _p4pd.flow_info_flow_info_t_ingress_policer_index_get
    if _newclass:ingress_policer_index = _swig_property(_p4pd.flow_info_flow_info_t_ingress_policer_index_get, _p4pd.flow_info_flow_info_t_ingress_policer_index_set)
    __swig_setmethods__["egress_policer_index"] = _p4pd.flow_info_flow_info_t_egress_policer_index_set
    __swig_getmethods__["egress_policer_index"] = _p4pd.flow_info_flow_info_t_egress_policer_index_get
    if _newclass:egress_policer_index = _swig_property(_p4pd.flow_info_flow_info_t_egress_policer_index_get, _p4pd.flow_info_flow_info_t_egress_policer_index_set)
    __swig_setmethods__["ingress_mirror_session_id"] = _p4pd.flow_info_flow_info_t_ingress_mirror_session_id_set
    __swig_getmethods__["ingress_mirror_session_id"] = _p4pd.flow_info_flow_info_t_ingress_mirror_session_id_get
    if _newclass:ingress_mirror_session_id = _swig_property(_p4pd.flow_info_flow_info_t_ingress_mirror_session_id_get, _p4pd.flow_info_flow_info_t_ingress_mirror_session_id_set)
    __swig_setmethods__["egress_mirror_session_id"] = _p4pd.flow_info_flow_info_t_egress_mirror_session_id_set
    __swig_getmethods__["egress_mirror_session_id"] = _p4pd.flow_info_flow_info_t_egress_mirror_session_id_get
    if _newclass:egress_mirror_session_id = _swig_property(_p4pd.flow_info_flow_info_t_egress_mirror_session_id_get, _p4pd.flow_info_flow_info_t_egress_mirror_session_id_set)
    __swig_setmethods__["rewrite_index"] = _p4pd.flow_info_flow_info_t_rewrite_index_set
    __swig_getmethods__["rewrite_index"] = _p4pd.flow_info_flow_info_t_rewrite_index_get
    if _newclass:rewrite_index = _swig_property(_p4pd.flow_info_flow_info_t_rewrite_index_get, _p4pd.flow_info_flow_info_t_rewrite_index_set)
    __swig_setmethods__["tunnel_rewrite_index"] = _p4pd.flow_info_flow_info_t_tunnel_rewrite_index_set
    __swig_getmethods__["tunnel_rewrite_index"] = _p4pd.flow_info_flow_info_t_tunnel_rewrite_index_get
    if _newclass:tunnel_rewrite_index = _swig_property(_p4pd.flow_info_flow_info_t_tunnel_rewrite_index_get, _p4pd.flow_info_flow_info_t_tunnel_rewrite_index_set)
    __swig_setmethods__["tunnel_vnid"] = _p4pd.flow_info_flow_info_t_tunnel_vnid_set
    __swig_getmethods__["tunnel_vnid"] = _p4pd.flow_info_flow_info_t_tunnel_vnid_get
    if _newclass:tunnel_vnid = _swig_property(_p4pd.flow_info_flow_info_t_tunnel_vnid_get, _p4pd.flow_info_flow_info_t_tunnel_vnid_set)
    __swig_setmethods__["tunnel_originate"] = _p4pd.flow_info_flow_info_t_tunnel_originate_set
    __swig_getmethods__["tunnel_originate"] = _p4pd.flow_info_flow_info_t_tunnel_originate_get
    if _newclass:tunnel_originate = _swig_property(_p4pd.flow_info_flow_info_t_tunnel_originate_get, _p4pd.flow_info_flow_info_t_tunnel_originate_set)
    __swig_setmethods__["nat_ip"] = _p4pd.flow_info_flow_info_t_nat_ip_set
    __swig_getmethods__["nat_ip"] = _p4pd.flow_info_flow_info_t_nat_ip_get
    if _newclass:nat_ip = _swig_property(_p4pd.flow_info_flow_info_t_nat_ip_get, _p4pd.flow_info_flow_info_t_nat_ip_set)
    __swig_setmethods__["nat_l4_port"] = _p4pd.flow_info_flow_info_t_nat_l4_port_set
    __swig_getmethods__["nat_l4_port"] = _p4pd.flow_info_flow_info_t_nat_l4_port_get
    if _newclass:nat_l4_port = _swig_property(_p4pd.flow_info_flow_info_t_nat_l4_port_get, _p4pd.flow_info_flow_info_t_nat_l4_port_set)
    __swig_setmethods__["twice_nat_idx"] = _p4pd.flow_info_flow_info_t_twice_nat_idx_set
    __swig_getmethods__["twice_nat_idx"] = _p4pd.flow_info_flow_info_t_twice_nat_idx_get
    if _newclass:twice_nat_idx = _swig_property(_p4pd.flow_info_flow_info_t_twice_nat_idx_get, _p4pd.flow_info_flow_info_t_twice_nat_idx_set)
    __swig_setmethods__["cos_en"] = _p4pd.flow_info_flow_info_t_cos_en_set
    __swig_getmethods__["cos_en"] = _p4pd.flow_info_flow_info_t_cos_en_get
    if _newclass:cos_en = _swig_property(_p4pd.flow_info_flow_info_t_cos_en_get, _p4pd.flow_info_flow_info_t_cos_en_set)
    __swig_setmethods__["cos"] = _p4pd.flow_info_flow_info_t_cos_set
    __swig_getmethods__["cos"] = _p4pd.flow_info_flow_info_t_cos_get
    if _newclass:cos = _swig_property(_p4pd.flow_info_flow_info_t_cos_get, _p4pd.flow_info_flow_info_t_cos_set)
    __swig_setmethods__["dscp_en"] = _p4pd.flow_info_flow_info_t_dscp_en_set
    __swig_getmethods__["dscp_en"] = _p4pd.flow_info_flow_info_t_dscp_en_get
    if _newclass:dscp_en = _swig_property(_p4pd.flow_info_flow_info_t_dscp_en_get, _p4pd.flow_info_flow_info_t_dscp_en_set)
    __swig_setmethods__["dscp"] = _p4pd.flow_info_flow_info_t_dscp_set
    __swig_getmethods__["dscp"] = _p4pd.flow_info_flow_info_t_dscp_get
    if _newclass:dscp = _swig_property(_p4pd.flow_info_flow_info_t_dscp_get, _p4pd.flow_info_flow_info_t_dscp_set)
    __swig_setmethods__["qid_en"] = _p4pd.flow_info_flow_info_t_qid_en_set
    __swig_getmethods__["qid_en"] = _p4pd.flow_info_flow_info_t_qid_en_get
    if _newclass:qid_en = _swig_property(_p4pd.flow_info_flow_info_t_qid_en_get, _p4pd.flow_info_flow_info_t_qid_en_set)
    __swig_setmethods__["log_en"] = _p4pd.flow_info_flow_info_t_log_en_set
    __swig_getmethods__["log_en"] = _p4pd.flow_info_flow_info_t_log_en_get
    if _newclass:log_en = _swig_property(_p4pd.flow_info_flow_info_t_log_en_get, _p4pd.flow_info_flow_info_t_log_en_set)
    __swig_setmethods__["rewrite_flags"] = _p4pd.flow_info_flow_info_t_rewrite_flags_set
    __swig_getmethods__["rewrite_flags"] = _p4pd.flow_info_flow_info_t_rewrite_flags_get
    if _newclass:rewrite_flags = _swig_property(_p4pd.flow_info_flow_info_t_rewrite_flags_get, _p4pd.flow_info_flow_info_t_rewrite_flags_set)
    __swig_setmethods__["flow_conn_track"] = _p4pd.flow_info_flow_info_t_flow_conn_track_set
    __swig_getmethods__["flow_conn_track"] = _p4pd.flow_info_flow_info_t_flow_conn_track_get
    if _newclass:flow_conn_track = _swig_property(_p4pd.flow_info_flow_info_t_flow_conn_track_get, _p4pd.flow_info_flow_info_t_flow_conn_track_set)
    __swig_setmethods__["flow_ttl"] = _p4pd.flow_info_flow_info_t_flow_ttl_set
    __swig_getmethods__["flow_ttl"] = _p4pd.flow_info_flow_info_t_flow_ttl_get
    if _newclass:flow_ttl = _swig_property(_p4pd.flow_info_flow_info_t_flow_ttl_get, _p4pd.flow_info_flow_info_t_flow_ttl_set)
    __swig_setmethods__["flow_role"] = _p4pd.flow_info_flow_info_t_flow_role_set
    __swig_getmethods__["flow_role"] = _p4pd.flow_info_flow_info_t_flow_role_get
    if _newclass:flow_role = _swig_property(_p4pd.flow_info_flow_info_t_flow_role_get, _p4pd.flow_info_flow_info_t_flow_role_set)
    __swig_setmethods__["session_state_index"] = _p4pd.flow_info_flow_info_t_session_state_index_set
    __swig_getmethods__["session_state_index"] = _p4pd.flow_info_flow_info_t_session_state_index_get
    if _newclass:session_state_index = _swig_property(_p4pd.flow_info_flow_info_t_session_state_index_get, _p4pd.flow_info_flow_info_t_session_state_index_set)
    __swig_setmethods__["start_timestamp"] = _p4pd.flow_info_flow_info_t_start_timestamp_set
    __swig_getmethods__["start_timestamp"] = _p4pd.flow_info_flow_info_t_start_timestamp_get
    if _newclass:start_timestamp = _swig_property(_p4pd.flow_info_flow_info_t_start_timestamp_get, _p4pd.flow_info_flow_info_t_start_timestamp_set)
    __swig_setmethods__["ingress_tm_oqueue"] = _p4pd.flow_info_flow_info_t_ingress_tm_oqueue_set
    __swig_getmethods__["ingress_tm_oqueue"] = _p4pd.flow_info_flow_info_t_ingress_tm_oqueue_get
    if _newclass:ingress_tm_oqueue = _swig_property(_p4pd.flow_info_flow_info_t_ingress_tm_oqueue_get, _p4pd.flow_info_flow_info_t_ingress_tm_oqueue_set)
    __swig_setmethods__["egress_tm_oqueue"] = _p4pd.flow_info_flow_info_t_egress_tm_oqueue_set
    __swig_getmethods__["egress_tm_oqueue"] = _p4pd.flow_info_flow_info_t_egress_tm_oqueue_get
    if _newclass:egress_tm_oqueue = _swig_property(_p4pd.flow_info_flow_info_t_egress_tm_oqueue_get, _p4pd.flow_info_flow_info_t_egress_tm_oqueue_set)
    __swig_setmethods__["expected_src_lif_check_en"] = _p4pd.flow_info_flow_info_t_expected_src_lif_check_en_set
    __swig_getmethods__["expected_src_lif_check_en"] = _p4pd.flow_info_flow_info_t_expected_src_lif_check_en_get
    if _newclass:expected_src_lif_check_en = _swig_property(_p4pd.flow_info_flow_info_t_expected_src_lif_check_en_get, _p4pd.flow_info_flow_info_t_expected_src_lif_check_en_set)
    __swig_setmethods__["expected_src_lif"] = _p4pd.flow_info_flow_info_t_expected_src_lif_set
    __swig_getmethods__["expected_src_lif"] = _p4pd.flow_info_flow_info_t_expected_src_lif_get
    if _newclass:expected_src_lif = _swig_property(_p4pd.flow_info_flow_info_t_expected_src_lif_get, _p4pd.flow_info_flow_info_t_expected_src_lif_set)
    __swig_setmethods__["export_id1"] = _p4pd.flow_info_flow_info_t_export_id1_set
    __swig_getmethods__["export_id1"] = _p4pd.flow_info_flow_info_t_export_id1_get
    if _newclass:export_id1 = _swig_property(_p4pd.flow_info_flow_info_t_export_id1_get, _p4pd.flow_info_flow_info_t_export_id1_set)
    __swig_setmethods__["export_id2"] = _p4pd.flow_info_flow_info_t_export_id2_set
    __swig_getmethods__["export_id2"] = _p4pd.flow_info_flow_info_t_export_id2_get
    if _newclass:export_id2 = _swig_property(_p4pd.flow_info_flow_info_t_export_id2_get, _p4pd.flow_info_flow_info_t_export_id2_set)
    __swig_setmethods__["export_id3"] = _p4pd.flow_info_flow_info_t_export_id3_set
    __swig_getmethods__["export_id3"] = _p4pd.flow_info_flow_info_t_export_id3_get
    if _newclass:export_id3 = _swig_property(_p4pd.flow_info_flow_info_t_export_id3_get, _p4pd.flow_info_flow_info_t_export_id3_set)
    __swig_setmethods__["export_id4"] = _p4pd.flow_info_flow_info_t_export_id4_set
    __swig_getmethods__["export_id4"] = _p4pd.flow_info_flow_info_t_export_id4_get
    if _newclass:export_id4 = _swig_property(_p4pd.flow_info_flow_info_t_export_id4_get, _p4pd.flow_info_flow_info_t_export_id4_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_flow_info_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_flow_info_t
    __del__ = lambda self : None;
flow_info_flow_info_t_swigregister = _p4pd.flow_info_flow_info_t_swigregister
flow_info_flow_info_t_swigregister(flow_info_flow_info_t)

class flow_info_flow_hit_drop_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_flow_hit_drop_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_flow_hit_drop_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_index"] = _p4pd.flow_info_flow_hit_drop_t_flow_index_set
    __swig_getmethods__["flow_index"] = _p4pd.flow_info_flow_hit_drop_t_flow_index_get
    if _newclass:flow_index = _swig_property(_p4pd.flow_info_flow_hit_drop_t_flow_index_get, _p4pd.flow_info_flow_hit_drop_t_flow_index_set)
    __swig_setmethods__["start_timestamp"] = _p4pd.flow_info_flow_hit_drop_t_start_timestamp_set
    __swig_getmethods__["start_timestamp"] = _p4pd.flow_info_flow_hit_drop_t_start_timestamp_get
    if _newclass:start_timestamp = _swig_property(_p4pd.flow_info_flow_hit_drop_t_start_timestamp_get, _p4pd.flow_info_flow_hit_drop_t_start_timestamp_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_flow_hit_drop_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_flow_hit_drop_t
    __del__ = lambda self : None;
flow_info_flow_hit_drop_t_swigregister = _p4pd.flow_info_flow_hit_drop_t_swigregister
flow_info_flow_hit_drop_t_swigregister(flow_info_flow_hit_drop_t)

class flow_info_flow_hit_from_vm_bounce_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_flow_hit_from_vm_bounce_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_flow_hit_from_vm_bounce_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_lif"] = _p4pd.flow_info_flow_hit_from_vm_bounce_t_src_lif_set
    __swig_getmethods__["src_lif"] = _p4pd.flow_info_flow_hit_from_vm_bounce_t_src_lif_get
    if _newclass:src_lif = _swig_property(_p4pd.flow_info_flow_hit_from_vm_bounce_t_src_lif_get, _p4pd.flow_info_flow_hit_from_vm_bounce_t_src_lif_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_flow_hit_from_vm_bounce_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_flow_hit_from_vm_bounce_t
    __del__ = lambda self : None;
flow_info_flow_hit_from_vm_bounce_t_swigregister = _p4pd.flow_info_flow_hit_from_vm_bounce_t_swigregister
flow_info_flow_hit_from_vm_bounce_t_swigregister(flow_info_flow_hit_from_vm_bounce_t)

class flow_info_flow_hit_to_vm_bounce_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_flow_hit_to_vm_bounce_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_flow_hit_to_vm_bounce_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.flow_info_flow_hit_to_vm_bounce_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.flow_info_flow_hit_to_vm_bounce_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.flow_info_flow_hit_to_vm_bounce_t_dst_lport_get, _p4pd.flow_info_flow_hit_to_vm_bounce_t_dst_lport_set)
    __swig_setmethods__["tm_oqueue"] = _p4pd.flow_info_flow_hit_to_vm_bounce_t_tm_oqueue_set
    __swig_getmethods__["tm_oqueue"] = _p4pd.flow_info_flow_hit_to_vm_bounce_t_tm_oqueue_get
    if _newclass:tm_oqueue = _swig_property(_p4pd.flow_info_flow_hit_to_vm_bounce_t_tm_oqueue_get, _p4pd.flow_info_flow_hit_to_vm_bounce_t_tm_oqueue_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_flow_hit_to_vm_bounce_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_flow_hit_to_vm_bounce_t
    __del__ = lambda self : None;
flow_info_flow_hit_to_vm_bounce_t_swigregister = _p4pd.flow_info_flow_hit_to_vm_bounce_t_swigregister
flow_info_flow_hit_to_vm_bounce_t_swigregister(flow_info_flow_hit_to_vm_bounce_t)

class flow_info_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_info_flow_info"] = _p4pd.flow_info_action_union_t_flow_info_flow_info_set
    __swig_getmethods__["flow_info_flow_info"] = _p4pd.flow_info_action_union_t_flow_info_flow_info_get
    if _newclass:flow_info_flow_info = _swig_property(_p4pd.flow_info_action_union_t_flow_info_flow_info_get, _p4pd.flow_info_action_union_t_flow_info_flow_info_set)
    __swig_setmethods__["flow_info_flow_hit_drop"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_drop_set
    __swig_getmethods__["flow_info_flow_hit_drop"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_drop_get
    if _newclass:flow_info_flow_hit_drop = _swig_property(_p4pd.flow_info_action_union_t_flow_info_flow_hit_drop_get, _p4pd.flow_info_action_union_t_flow_info_flow_hit_drop_set)
    __swig_setmethods__["flow_info_flow_hit_from_vm_bounce"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_from_vm_bounce_set
    __swig_getmethods__["flow_info_flow_hit_from_vm_bounce"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_from_vm_bounce_get
    if _newclass:flow_info_flow_hit_from_vm_bounce = _swig_property(_p4pd.flow_info_action_union_t_flow_info_flow_hit_from_vm_bounce_get, _p4pd.flow_info_action_union_t_flow_info_flow_hit_from_vm_bounce_set)
    __swig_setmethods__["flow_info_flow_hit_to_vm_bounce"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_to_vm_bounce_set
    __swig_getmethods__["flow_info_flow_hit_to_vm_bounce"] = _p4pd.flow_info_action_union_t_flow_info_flow_hit_to_vm_bounce_get
    if _newclass:flow_info_flow_hit_to_vm_bounce = _swig_property(_p4pd.flow_info_action_union_t_flow_info_flow_hit_to_vm_bounce_get, _p4pd.flow_info_action_union_t_flow_info_flow_hit_to_vm_bounce_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_action_union_t
    __del__ = lambda self : None;
flow_info_action_union_t_swigregister = _p4pd.flow_info_action_union_t_swigregister
flow_info_action_union_t_swigregister(flow_info_action_union_t)

class flow_info_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_info_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_info_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.flow_info_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.flow_info_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.flow_info_actiondata_actionid_get, _p4pd.flow_info_actiondata_actionid_set)
    __swig_setmethods__["flow_info_action_u"] = _p4pd.flow_info_actiondata_flow_info_action_u_set
    __swig_getmethods__["flow_info_action_u"] = _p4pd.flow_info_actiondata_flow_info_action_u_get
    if _newclass:flow_info_action_u = _swig_property(_p4pd.flow_info_actiondata_flow_info_action_u_get, _p4pd.flow_info_actiondata_flow_info_action_u_set)
    def __init__(self): 
        this = _p4pd.new_flow_info_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_info_actiondata
    __del__ = lambda self : None;
flow_info_actiondata_swigregister = _p4pd.flow_info_actiondata_swigregister
flow_info_actiondata_swigregister(flow_info_actiondata)

class p4plus_to_p4_1_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_1_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_1_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_1_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_1_swkey_t
    __del__ = lambda self : None;
p4plus_to_p4_1_swkey_t_swigregister = _p4pd.p4plus_to_p4_1_swkey_t_swigregister
p4plus_to_p4_1_swkey_t_swigregister(p4plus_to_p4_1_swkey_t)

P4PLUS_TO_P4_1_F_P4PLUS_TO_P4_1_ID = _p4pd.P4PLUS_TO_P4_1_F_P4PLUS_TO_P4_1_ID
P4PLUS_TO_P4_1_MAX_ID = _p4pd.P4PLUS_TO_P4_1_MAX_ID
class p4plus_to_p4_1_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_1_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_1_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_1_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_1_action_union_t
    __del__ = lambda self : None;
p4plus_to_p4_1_action_union_t_swigregister = _p4pd.p4plus_to_p4_1_action_union_t_swigregister
p4plus_to_p4_1_action_union_t_swigregister(p4plus_to_p4_1_action_union_t)

class p4plus_to_p4_1_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_1_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_1_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.p4plus_to_p4_1_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.p4plus_to_p4_1_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.p4plus_to_p4_1_actiondata_actionid_get, _p4pd.p4plus_to_p4_1_actiondata_actionid_set)
    __swig_setmethods__["p4plus_to_p4_1_action_u"] = _p4pd.p4plus_to_p4_1_actiondata_p4plus_to_p4_1_action_u_set
    __swig_getmethods__["p4plus_to_p4_1_action_u"] = _p4pd.p4plus_to_p4_1_actiondata_p4plus_to_p4_1_action_u_get
    if _newclass:p4plus_to_p4_1_action_u = _swig_property(_p4pd.p4plus_to_p4_1_actiondata_p4plus_to_p4_1_action_u_get, _p4pd.p4plus_to_p4_1_actiondata_p4plus_to_p4_1_action_u_set)
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_1_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_1_actiondata
    __del__ = lambda self : None;
p4plus_to_p4_1_actiondata_swigregister = _p4pd.p4plus_to_p4_1_actiondata_swigregister
p4plus_to_p4_1_actiondata_swigregister(p4plus_to_p4_1_actiondata)

class tx_stats_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tx_stats_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tx_stats_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_src_lif"] = _p4pd.tx_stats_swkey_t_control_metadata_src_lif_set
    __swig_getmethods__["control_metadata_src_lif"] = _p4pd.tx_stats_swkey_t_control_metadata_src_lif_get
    if _newclass:control_metadata_src_lif = _swig_property(_p4pd.tx_stats_swkey_t_control_metadata_src_lif_get, _p4pd.tx_stats_swkey_t_control_metadata_src_lif_set)
    def __init__(self): 
        this = _p4pd.new_tx_stats_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tx_stats_swkey_t
    __del__ = lambda self : None;
tx_stats_swkey_t_swigregister = _p4pd.tx_stats_swkey_t_swigregister
tx_stats_swkey_t_swigregister(tx_stats_swkey_t)

TX_STATS_TX_STATS_ID = _p4pd.TX_STATS_TX_STATS_ID
TX_STATS_MAX_ID = _p4pd.TX_STATS_MAX_ID
class tx_stats_tx_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tx_stats_tx_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tx_stats_tx_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx_ucast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_ucast_pkts_set
    __swig_getmethods__["tx_ucast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_ucast_pkts_get
    if _newclass:tx_ucast_pkts = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_ucast_pkts_get, _p4pd.tx_stats_tx_stats_t_tx_ucast_pkts_set)
    __swig_setmethods__["tx_mcast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_mcast_pkts_set
    __swig_getmethods__["tx_mcast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_mcast_pkts_get
    if _newclass:tx_mcast_pkts = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_mcast_pkts_get, _p4pd.tx_stats_tx_stats_t_tx_mcast_pkts_set)
    __swig_setmethods__["tx_bcast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_bcast_pkts_set
    __swig_getmethods__["tx_bcast_pkts"] = _p4pd.tx_stats_tx_stats_t_tx_bcast_pkts_get
    if _newclass:tx_bcast_pkts = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_bcast_pkts_get, _p4pd.tx_stats_tx_stats_t_tx_bcast_pkts_set)
    __swig_setmethods__["tx_ucast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_ucast_bytes_set
    __swig_getmethods__["tx_ucast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_ucast_bytes_get
    if _newclass:tx_ucast_bytes = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_ucast_bytes_get, _p4pd.tx_stats_tx_stats_t_tx_ucast_bytes_set)
    __swig_setmethods__["tx_mcast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_mcast_bytes_set
    __swig_getmethods__["tx_mcast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_mcast_bytes_get
    if _newclass:tx_mcast_bytes = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_mcast_bytes_get, _p4pd.tx_stats_tx_stats_t_tx_mcast_bytes_set)
    __swig_setmethods__["tx_bcast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_bcast_bytes_set
    __swig_getmethods__["tx_bcast_bytes"] = _p4pd.tx_stats_tx_stats_t_tx_bcast_bytes_get
    if _newclass:tx_bcast_bytes = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_bcast_bytes_get, _p4pd.tx_stats_tx_stats_t_tx_bcast_bytes_set)
    __swig_setmethods__["tx_egress_drops"] = _p4pd.tx_stats_tx_stats_t_tx_egress_drops_set
    __swig_getmethods__["tx_egress_drops"] = _p4pd.tx_stats_tx_stats_t_tx_egress_drops_get
    if _newclass:tx_egress_drops = _swig_property(_p4pd.tx_stats_tx_stats_t_tx_egress_drops_get, _p4pd.tx_stats_tx_stats_t_tx_egress_drops_set)
    def __init__(self): 
        this = _p4pd.new_tx_stats_tx_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tx_stats_tx_stats_t
    __del__ = lambda self : None;
tx_stats_tx_stats_t_swigregister = _p4pd.tx_stats_tx_stats_t_swigregister
tx_stats_tx_stats_t_swigregister(tx_stats_tx_stats_t)

class tx_stats_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tx_stats_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tx_stats_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx_stats_tx_stats"] = _p4pd.tx_stats_action_union_t_tx_stats_tx_stats_set
    __swig_getmethods__["tx_stats_tx_stats"] = _p4pd.tx_stats_action_union_t_tx_stats_tx_stats_get
    if _newclass:tx_stats_tx_stats = _swig_property(_p4pd.tx_stats_action_union_t_tx_stats_tx_stats_get, _p4pd.tx_stats_action_union_t_tx_stats_tx_stats_set)
    def __init__(self): 
        this = _p4pd.new_tx_stats_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tx_stats_action_union_t
    __del__ = lambda self : None;
tx_stats_action_union_t_swigregister = _p4pd.tx_stats_action_union_t_swigregister
tx_stats_action_union_t_swigregister(tx_stats_action_union_t)

class tx_stats_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tx_stats_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tx_stats_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tx_stats_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tx_stats_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tx_stats_actiondata_actionid_get, _p4pd.tx_stats_actiondata_actionid_set)
    __swig_setmethods__["tx_stats_action_u"] = _p4pd.tx_stats_actiondata_tx_stats_action_u_set
    __swig_getmethods__["tx_stats_action_u"] = _p4pd.tx_stats_actiondata_tx_stats_action_u_get
    if _newclass:tx_stats_action_u = _swig_property(_p4pd.tx_stats_actiondata_tx_stats_action_u_get, _p4pd.tx_stats_actiondata_tx_stats_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tx_stats_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tx_stats_actiondata
    __del__ = lambda self : None;
tx_stats_actiondata_swigregister = _p4pd.tx_stats_actiondata_swigregister
tx_stats_actiondata_swigregister(tx_stats_actiondata)

class output_mapping_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control_metadata_dst_lport"] = _p4pd.output_mapping_swkey_t_control_metadata_dst_lport_set
    __swig_getmethods__["control_metadata_dst_lport"] = _p4pd.output_mapping_swkey_t_control_metadata_dst_lport_get
    if _newclass:control_metadata_dst_lport = _swig_property(_p4pd.output_mapping_swkey_t_control_metadata_dst_lport_get, _p4pd.output_mapping_swkey_t_control_metadata_dst_lport_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_swkey_t
    __del__ = lambda self : None;
output_mapping_swkey_t_swigregister = _p4pd.output_mapping_swkey_t_swigregister
output_mapping_swkey_t_swigregister(output_mapping_swkey_t)

OUTPUT_MAPPING_OUTPUT_MAPPING_DROP_ID = _p4pd.OUTPUT_MAPPING_OUTPUT_MAPPING_DROP_ID
OUTPUT_MAPPING_SET_TM_OPORT_ID = _p4pd.OUTPUT_MAPPING_SET_TM_OPORT_ID
OUTPUT_MAPPING_REDIRECT_TO_CPU_ID = _p4pd.OUTPUT_MAPPING_REDIRECT_TO_CPU_ID
OUTPUT_MAPPING_REDIRECT_TO_REMOTE_ID = _p4pd.OUTPUT_MAPPING_REDIRECT_TO_REMOTE_ID
OUTPUT_MAPPING_MAX_ID = _p4pd.OUTPUT_MAPPING_MAX_ID
class output_mapping_set_tm_oport_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_set_tm_oport_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_set_tm_oport_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlan_strip"] = _p4pd.output_mapping_set_tm_oport_t_vlan_strip_set
    __swig_getmethods__["vlan_strip"] = _p4pd.output_mapping_set_tm_oport_t_vlan_strip_get
    if _newclass:vlan_strip = _swig_property(_p4pd.output_mapping_set_tm_oport_t_vlan_strip_get, _p4pd.output_mapping_set_tm_oport_t_vlan_strip_set)
    __swig_setmethods__["nports"] = _p4pd.output_mapping_set_tm_oport_t_nports_set
    __swig_getmethods__["nports"] = _p4pd.output_mapping_set_tm_oport_t_nports_get
    if _newclass:nports = _swig_property(_p4pd.output_mapping_set_tm_oport_t_nports_get, _p4pd.output_mapping_set_tm_oport_t_nports_set)
    __swig_setmethods__["egress_mirror_en"] = _p4pd.output_mapping_set_tm_oport_t_egress_mirror_en_set
    __swig_getmethods__["egress_mirror_en"] = _p4pd.output_mapping_set_tm_oport_t_egress_mirror_en_get
    if _newclass:egress_mirror_en = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_mirror_en_get, _p4pd.output_mapping_set_tm_oport_t_egress_mirror_en_set)
    __swig_setmethods__["p4plus_app_id"] = _p4pd.output_mapping_set_tm_oport_t_p4plus_app_id_set
    __swig_getmethods__["p4plus_app_id"] = _p4pd.output_mapping_set_tm_oport_t_p4plus_app_id_get
    if _newclass:p4plus_app_id = _swig_property(_p4pd.output_mapping_set_tm_oport_t_p4plus_app_id_get, _p4pd.output_mapping_set_tm_oport_t_p4plus_app_id_set)
    __swig_setmethods__["rdma_enabled"] = _p4pd.output_mapping_set_tm_oport_t_rdma_enabled_set
    __swig_getmethods__["rdma_enabled"] = _p4pd.output_mapping_set_tm_oport_t_rdma_enabled_get
    if _newclass:rdma_enabled = _swig_property(_p4pd.output_mapping_set_tm_oport_t_rdma_enabled_get, _p4pd.output_mapping_set_tm_oport_t_rdma_enabled_set)
    __swig_setmethods__["dst_lif"] = _p4pd.output_mapping_set_tm_oport_t_dst_lif_set
    __swig_getmethods__["dst_lif"] = _p4pd.output_mapping_set_tm_oport_t_dst_lif_get
    if _newclass:dst_lif = _swig_property(_p4pd.output_mapping_set_tm_oport_t_dst_lif_get, _p4pd.output_mapping_set_tm_oport_t_dst_lif_set)
    __swig_setmethods__["encap_vlan_id"] = _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_set
    __swig_getmethods__["encap_vlan_id"] = _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_get
    if _newclass:encap_vlan_id = _swig_property(_p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_get, _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_set)
    __swig_setmethods__["encap_vlan_id_valid"] = _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_valid_set
    __swig_getmethods__["encap_vlan_id_valid"] = _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_valid_get
    if _newclass:encap_vlan_id_valid = _swig_property(_p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_valid_get, _p4pd.output_mapping_set_tm_oport_t_encap_vlan_id_valid_set)
    __swig_setmethods__["egress_port1"] = _p4pd.output_mapping_set_tm_oport_t_egress_port1_set
    __swig_getmethods__["egress_port1"] = _p4pd.output_mapping_set_tm_oport_t_egress_port1_get
    if _newclass:egress_port1 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port1_get, _p4pd.output_mapping_set_tm_oport_t_egress_port1_set)
    __swig_setmethods__["egress_port2"] = _p4pd.output_mapping_set_tm_oport_t_egress_port2_set
    __swig_getmethods__["egress_port2"] = _p4pd.output_mapping_set_tm_oport_t_egress_port2_get
    if _newclass:egress_port2 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port2_get, _p4pd.output_mapping_set_tm_oport_t_egress_port2_set)
    __swig_setmethods__["egress_port3"] = _p4pd.output_mapping_set_tm_oport_t_egress_port3_set
    __swig_getmethods__["egress_port3"] = _p4pd.output_mapping_set_tm_oport_t_egress_port3_get
    if _newclass:egress_port3 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port3_get, _p4pd.output_mapping_set_tm_oport_t_egress_port3_set)
    __swig_setmethods__["egress_port4"] = _p4pd.output_mapping_set_tm_oport_t_egress_port4_set
    __swig_getmethods__["egress_port4"] = _p4pd.output_mapping_set_tm_oport_t_egress_port4_get
    if _newclass:egress_port4 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port4_get, _p4pd.output_mapping_set_tm_oport_t_egress_port4_set)
    __swig_setmethods__["egress_port5"] = _p4pd.output_mapping_set_tm_oport_t_egress_port5_set
    __swig_getmethods__["egress_port5"] = _p4pd.output_mapping_set_tm_oport_t_egress_port5_get
    if _newclass:egress_port5 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port5_get, _p4pd.output_mapping_set_tm_oport_t_egress_port5_set)
    __swig_setmethods__["egress_port6"] = _p4pd.output_mapping_set_tm_oport_t_egress_port6_set
    __swig_getmethods__["egress_port6"] = _p4pd.output_mapping_set_tm_oport_t_egress_port6_get
    if _newclass:egress_port6 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port6_get, _p4pd.output_mapping_set_tm_oport_t_egress_port6_set)
    __swig_setmethods__["egress_port7"] = _p4pd.output_mapping_set_tm_oport_t_egress_port7_set
    __swig_getmethods__["egress_port7"] = _p4pd.output_mapping_set_tm_oport_t_egress_port7_get
    if _newclass:egress_port7 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port7_get, _p4pd.output_mapping_set_tm_oport_t_egress_port7_set)
    __swig_setmethods__["egress_port8"] = _p4pd.output_mapping_set_tm_oport_t_egress_port8_set
    __swig_getmethods__["egress_port8"] = _p4pd.output_mapping_set_tm_oport_t_egress_port8_get
    if _newclass:egress_port8 = _swig_property(_p4pd.output_mapping_set_tm_oport_t_egress_port8_get, _p4pd.output_mapping_set_tm_oport_t_egress_port8_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_set_tm_oport_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_set_tm_oport_t
    __del__ = lambda self : None;
output_mapping_set_tm_oport_t_swigregister = _p4pd.output_mapping_set_tm_oport_t_swigregister
output_mapping_set_tm_oport_t_swigregister(output_mapping_set_tm_oport_t)

class output_mapping_redirect_to_cpu_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_redirect_to_cpu_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_redirect_to_cpu_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lif"] = _p4pd.output_mapping_redirect_to_cpu_t_dst_lif_set
    __swig_getmethods__["dst_lif"] = _p4pd.output_mapping_redirect_to_cpu_t_dst_lif_get
    if _newclass:dst_lif = _swig_property(_p4pd.output_mapping_redirect_to_cpu_t_dst_lif_get, _p4pd.output_mapping_redirect_to_cpu_t_dst_lif_set)
    __swig_setmethods__["egress_mirror_en"] = _p4pd.output_mapping_redirect_to_cpu_t_egress_mirror_en_set
    __swig_getmethods__["egress_mirror_en"] = _p4pd.output_mapping_redirect_to_cpu_t_egress_mirror_en_get
    if _newclass:egress_mirror_en = _swig_property(_p4pd.output_mapping_redirect_to_cpu_t_egress_mirror_en_get, _p4pd.output_mapping_redirect_to_cpu_t_egress_mirror_en_set)
    __swig_setmethods__["tm_oqueue"] = _p4pd.output_mapping_redirect_to_cpu_t_tm_oqueue_set
    __swig_getmethods__["tm_oqueue"] = _p4pd.output_mapping_redirect_to_cpu_t_tm_oqueue_get
    if _newclass:tm_oqueue = _swig_property(_p4pd.output_mapping_redirect_to_cpu_t_tm_oqueue_get, _p4pd.output_mapping_redirect_to_cpu_t_tm_oqueue_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_redirect_to_cpu_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_redirect_to_cpu_t
    __del__ = lambda self : None;
output_mapping_redirect_to_cpu_t_swigregister = _p4pd.output_mapping_redirect_to_cpu_t_swigregister
output_mapping_redirect_to_cpu_t_swigregister(output_mapping_redirect_to_cpu_t)

class output_mapping_redirect_to_remote_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_redirect_to_remote_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_redirect_to_remote_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_index"] = _p4pd.output_mapping_redirect_to_remote_t_tunnel_index_set
    __swig_getmethods__["tunnel_index"] = _p4pd.output_mapping_redirect_to_remote_t_tunnel_index_get
    if _newclass:tunnel_index = _swig_property(_p4pd.output_mapping_redirect_to_remote_t_tunnel_index_get, _p4pd.output_mapping_redirect_to_remote_t_tunnel_index_set)
    __swig_setmethods__["tm_oport"] = _p4pd.output_mapping_redirect_to_remote_t_tm_oport_set
    __swig_getmethods__["tm_oport"] = _p4pd.output_mapping_redirect_to_remote_t_tm_oport_get
    if _newclass:tm_oport = _swig_property(_p4pd.output_mapping_redirect_to_remote_t_tm_oport_get, _p4pd.output_mapping_redirect_to_remote_t_tm_oport_set)
    __swig_setmethods__["egress_mirror_en"] = _p4pd.output_mapping_redirect_to_remote_t_egress_mirror_en_set
    __swig_getmethods__["egress_mirror_en"] = _p4pd.output_mapping_redirect_to_remote_t_egress_mirror_en_get
    if _newclass:egress_mirror_en = _swig_property(_p4pd.output_mapping_redirect_to_remote_t_egress_mirror_en_get, _p4pd.output_mapping_redirect_to_remote_t_egress_mirror_en_set)
    __swig_setmethods__["tm_oqueue"] = _p4pd.output_mapping_redirect_to_remote_t_tm_oqueue_set
    __swig_getmethods__["tm_oqueue"] = _p4pd.output_mapping_redirect_to_remote_t_tm_oqueue_get
    if _newclass:tm_oqueue = _swig_property(_p4pd.output_mapping_redirect_to_remote_t_tm_oqueue_get, _p4pd.output_mapping_redirect_to_remote_t_tm_oqueue_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_redirect_to_remote_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_redirect_to_remote_t
    __del__ = lambda self : None;
output_mapping_redirect_to_remote_t_swigregister = _p4pd.output_mapping_redirect_to_remote_t_swigregister
output_mapping_redirect_to_remote_t_swigregister(output_mapping_redirect_to_remote_t)

class output_mapping_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["output_mapping_set_tm_oport"] = _p4pd.output_mapping_action_union_t_output_mapping_set_tm_oport_set
    __swig_getmethods__["output_mapping_set_tm_oport"] = _p4pd.output_mapping_action_union_t_output_mapping_set_tm_oport_get
    if _newclass:output_mapping_set_tm_oport = _swig_property(_p4pd.output_mapping_action_union_t_output_mapping_set_tm_oport_get, _p4pd.output_mapping_action_union_t_output_mapping_set_tm_oport_set)
    __swig_setmethods__["output_mapping_redirect_to_cpu"] = _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_cpu_set
    __swig_getmethods__["output_mapping_redirect_to_cpu"] = _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_cpu_get
    if _newclass:output_mapping_redirect_to_cpu = _swig_property(_p4pd.output_mapping_action_union_t_output_mapping_redirect_to_cpu_get, _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_cpu_set)
    __swig_setmethods__["output_mapping_redirect_to_remote"] = _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_remote_set
    __swig_getmethods__["output_mapping_redirect_to_remote"] = _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_remote_get
    if _newclass:output_mapping_redirect_to_remote = _swig_property(_p4pd.output_mapping_action_union_t_output_mapping_redirect_to_remote_get, _p4pd.output_mapping_action_union_t_output_mapping_redirect_to_remote_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_action_union_t
    __del__ = lambda self : None;
output_mapping_action_union_t_swigregister = _p4pd.output_mapping_action_union_t_swigregister
output_mapping_action_union_t_swigregister(output_mapping_action_union_t)

class output_mapping_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_mapping_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_mapping_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.output_mapping_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.output_mapping_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.output_mapping_actiondata_actionid_get, _p4pd.output_mapping_actiondata_actionid_set)
    __swig_setmethods__["output_mapping_action_u"] = _p4pd.output_mapping_actiondata_output_mapping_action_u_set
    __swig_getmethods__["output_mapping_action_u"] = _p4pd.output_mapping_actiondata_output_mapping_action_u_get
    if _newclass:output_mapping_action_u = _swig_property(_p4pd.output_mapping_actiondata_output_mapping_action_u_get, _p4pd.output_mapping_actiondata_output_mapping_action_u_set)
    def __init__(self): 
        this = _p4pd.new_output_mapping_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_output_mapping_actiondata
    __del__ = lambda self : None;
output_mapping_actiondata_swigregister = _p4pd.output_mapping_actiondata_swigregister
output_mapping_actiondata_swigregister(output_mapping_actiondata)

class ddos_service_policer_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_service_policer_idx"] = _p4pd.ddos_service_policer_action_swkey_t_ddos_metadata_ddos_service_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_service_policer_idx"] = _p4pd.ddos_service_policer_action_swkey_t_ddos_metadata_ddos_service_policer_idx_get
    if _newclass:ddos_metadata_ddos_service_policer_idx = _swig_property(_p4pd.ddos_service_policer_action_swkey_t_ddos_metadata_ddos_service_policer_idx_get, _p4pd.ddos_service_policer_action_swkey_t_ddos_metadata_ddos_service_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_action_swkey_t
    __del__ = lambda self : None;
ddos_service_policer_action_swkey_t_swigregister = _p4pd.ddos_service_policer_action_swkey_t_swigregister
ddos_service_policer_action_swkey_t_swigregister(ddos_service_policer_action_swkey_t)

DDOS_SERVICE_POLICER_ACTION_NOP_ID = _p4pd.DDOS_SERVICE_POLICER_ACTION_NOP_ID
DDOS_SERVICE_POLICER_ACTION_DDOS_SERVICE_POLICER_ACTION_ID = _p4pd.DDOS_SERVICE_POLICER_ACTION_DDOS_SERVICE_POLICER_ACTION_ID
DDOS_SERVICE_POLICER_ACTION_MAX_ID = _p4pd.DDOS_SERVICE_POLICER_ACTION_MAX_ID
class ddos_service_policer_action_ddos_service_policer_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_action_ddos_service_policer_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_action_ddos_service_policer_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_service_policer_saved_color"] = _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_saved_color_set
    __swig_getmethods__["ddos_service_policer_saved_color"] = _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_saved_color_get
    if _newclass:ddos_service_policer_saved_color = _swig_property(_p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_saved_color_get, _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_saved_color_set)
    __swig_setmethods__["ddos_service_policer_dropped_packets"] = _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_dropped_packets_set
    __swig_getmethods__["ddos_service_policer_dropped_packets"] = _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_dropped_packets_get
    if _newclass:ddos_service_policer_dropped_packets = _swig_property(_p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_dropped_packets_get, _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_ddos_service_policer_dropped_packets_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_action_ddos_service_policer_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_action_ddos_service_policer_action_t
    __del__ = lambda self : None;
ddos_service_policer_action_ddos_service_policer_action_t_swigregister = _p4pd.ddos_service_policer_action_ddos_service_policer_action_t_swigregister
ddos_service_policer_action_ddos_service_policer_action_t_swigregister(ddos_service_policer_action_ddos_service_policer_action_t)

class ddos_service_policer_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_service_policer_action_ddos_service_policer_action"] = _p4pd.ddos_service_policer_action_action_union_t_ddos_service_policer_action_ddos_service_policer_action_set
    __swig_getmethods__["ddos_service_policer_action_ddos_service_policer_action"] = _p4pd.ddos_service_policer_action_action_union_t_ddos_service_policer_action_ddos_service_policer_action_get
    if _newclass:ddos_service_policer_action_ddos_service_policer_action = _swig_property(_p4pd.ddos_service_policer_action_action_union_t_ddos_service_policer_action_ddos_service_policer_action_get, _p4pd.ddos_service_policer_action_action_union_t_ddos_service_policer_action_ddos_service_policer_action_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_action_action_union_t
    __del__ = lambda self : None;
ddos_service_policer_action_action_union_t_swigregister = _p4pd.ddos_service_policer_action_action_union_t_swigregister
ddos_service_policer_action_action_union_t_swigregister(ddos_service_policer_action_action_union_t)

class ddos_service_policer_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_service_policer_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_service_policer_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_service_policer_action_actiondata_actionid_get, _p4pd.ddos_service_policer_action_actiondata_actionid_set)
    __swig_setmethods__["ddos_service_policer_action_action_u"] = _p4pd.ddos_service_policer_action_actiondata_ddos_service_policer_action_action_u_set
    __swig_getmethods__["ddos_service_policer_action_action_u"] = _p4pd.ddos_service_policer_action_actiondata_ddos_service_policer_action_action_u_get
    if _newclass:ddos_service_policer_action_action_u = _swig_property(_p4pd.ddos_service_policer_action_actiondata_ddos_service_policer_action_action_u_get, _p4pd.ddos_service_policer_action_actiondata_ddos_service_policer_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_action_actiondata
    __del__ = lambda self : None;
ddos_service_policer_action_actiondata_swigregister = _p4pd.ddos_service_policer_action_actiondata_swigregister
ddos_service_policer_action_actiondata_swigregister(ddos_service_policer_action_actiondata)

class input_properties_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["capri_intrinsic_lif"] = _p4pd.input_properties_swkey_t_capri_intrinsic_lif_set
    __swig_getmethods__["capri_intrinsic_lif"] = _p4pd.input_properties_swkey_t_capri_intrinsic_lif_get
    if _newclass:capri_intrinsic_lif = _swig_property(_p4pd.input_properties_swkey_t_capri_intrinsic_lif_get, _p4pd.input_properties_swkey_t_capri_intrinsic_lif_set)
    __swig_setmethods__["vlan_tag_valid"] = _p4pd.input_properties_swkey_t_vlan_tag_valid_set
    __swig_getmethods__["vlan_tag_valid"] = _p4pd.input_properties_swkey_t_vlan_tag_valid_get
    if _newclass:vlan_tag_valid = _swig_property(_p4pd.input_properties_swkey_t_vlan_tag_valid_get, _p4pd.input_properties_swkey_t_vlan_tag_valid_set)
    __swig_setmethods__["vlan_tag_vid"] = _p4pd.input_properties_swkey_t_vlan_tag_vid_set
    __swig_getmethods__["vlan_tag_vid"] = _p4pd.input_properties_swkey_t_vlan_tag_vid_get
    if _newclass:vlan_tag_vid = _swig_property(_p4pd.input_properties_swkey_t_vlan_tag_vid_get, _p4pd.input_properties_swkey_t_vlan_tag_vid_set)
    __swig_setmethods__["entry_inactive_input_properties"] = _p4pd.input_properties_swkey_t_entry_inactive_input_properties_set
    __swig_getmethods__["entry_inactive_input_properties"] = _p4pd.input_properties_swkey_t_entry_inactive_input_properties_get
    if _newclass:entry_inactive_input_properties = _swig_property(_p4pd.input_properties_swkey_t_entry_inactive_input_properties_get, _p4pd.input_properties_swkey_t_entry_inactive_input_properties_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_type_set
    __swig_getmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_type_get
    if _newclass:tunnel_metadata_tunnel_type = _swig_property(_p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_type_get, _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_type_set)
    __swig_setmethods__["tunnel_metadata_tunnel_vni"] = _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_vni_set
    __swig_getmethods__["tunnel_metadata_tunnel_vni"] = _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_vni_get
    if _newclass:tunnel_metadata_tunnel_vni = _swig_property(_p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_vni_get, _p4pd.input_properties_swkey_t_tunnel_metadata_tunnel_vni_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_swkey_t
    __del__ = lambda self : None;
input_properties_swkey_t_swigregister = _p4pd.input_properties_swkey_t_swigregister
input_properties_swkey_t_swigregister(input_properties_swkey_t)

INPUT_PROPERTIES_INPUT_PROPERTIES_ID = _p4pd.INPUT_PROPERTIES_INPUT_PROPERTIES_ID
INPUT_PROPERTIES_MAX_ID = _p4pd.INPUT_PROPERTIES_MAX_ID
class input_properties_input_properties_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_input_properties_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_input_properties_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vrf"] = _p4pd.input_properties_input_properties_t_vrf_set
    __swig_getmethods__["vrf"] = _p4pd.input_properties_input_properties_t_vrf_get
    if _newclass:vrf = _swig_property(_p4pd.input_properties_input_properties_t_vrf_get, _p4pd.input_properties_input_properties_t_vrf_set)
    __swig_setmethods__["dir"] = _p4pd.input_properties_input_properties_t_dir_set
    __swig_getmethods__["dir"] = _p4pd.input_properties_input_properties_t_dir_get
    if _newclass:dir = _swig_property(_p4pd.input_properties_input_properties_t_dir_get, _p4pd.input_properties_input_properties_t_dir_set)
    __swig_setmethods__["flow_miss_action"] = _p4pd.input_properties_input_properties_t_flow_miss_action_set
    __swig_getmethods__["flow_miss_action"] = _p4pd.input_properties_input_properties_t_flow_miss_action_get
    if _newclass:flow_miss_action = _swig_property(_p4pd.input_properties_input_properties_t_flow_miss_action_get, _p4pd.input_properties_input_properties_t_flow_miss_action_set)
    __swig_setmethods__["flow_miss_idx"] = _p4pd.input_properties_input_properties_t_flow_miss_idx_set
    __swig_getmethods__["flow_miss_idx"] = _p4pd.input_properties_input_properties_t_flow_miss_idx_get
    if _newclass:flow_miss_idx = _swig_property(_p4pd.input_properties_input_properties_t_flow_miss_idx_get, _p4pd.input_properties_input_properties_t_flow_miss_idx_set)
    __swig_setmethods__["ipsg_enable"] = _p4pd.input_properties_input_properties_t_ipsg_enable_set
    __swig_getmethods__["ipsg_enable"] = _p4pd.input_properties_input_properties_t_ipsg_enable_get
    if _newclass:ipsg_enable = _swig_property(_p4pd.input_properties_input_properties_t_ipsg_enable_get, _p4pd.input_properties_input_properties_t_ipsg_enable_set)
    __swig_setmethods__["dscp"] = _p4pd.input_properties_input_properties_t_dscp_set
    __swig_getmethods__["dscp"] = _p4pd.input_properties_input_properties_t_dscp_get
    if _newclass:dscp = _swig_property(_p4pd.input_properties_input_properties_t_dscp_get, _p4pd.input_properties_input_properties_t_dscp_set)
    __swig_setmethods__["l4_profile_idx"] = _p4pd.input_properties_input_properties_t_l4_profile_idx_set
    __swig_getmethods__["l4_profile_idx"] = _p4pd.input_properties_input_properties_t_l4_profile_idx_get
    if _newclass:l4_profile_idx = _swig_property(_p4pd.input_properties_input_properties_t_l4_profile_idx_get, _p4pd.input_properties_input_properties_t_l4_profile_idx_set)
    __swig_setmethods__["src_lport"] = _p4pd.input_properties_input_properties_t_src_lport_set
    __swig_getmethods__["src_lport"] = _p4pd.input_properties_input_properties_t_src_lport_get
    if _newclass:src_lport = _swig_property(_p4pd.input_properties_input_properties_t_src_lport_get, _p4pd.input_properties_input_properties_t_src_lport_set)
    __swig_setmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_input_properties_t_flow_miss_tm_oqueue_set
    __swig_getmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_input_properties_t_flow_miss_tm_oqueue_get
    if _newclass:flow_miss_tm_oqueue = _swig_property(_p4pd.input_properties_input_properties_t_flow_miss_tm_oqueue_get, _p4pd.input_properties_input_properties_t_flow_miss_tm_oqueue_set)
    __swig_setmethods__["dst_lport"] = _p4pd.input_properties_input_properties_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.input_properties_input_properties_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.input_properties_input_properties_t_dst_lport_get, _p4pd.input_properties_input_properties_t_dst_lport_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_input_properties_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_input_properties_t
    __del__ = lambda self : None;
input_properties_input_properties_t_swigregister = _p4pd.input_properties_input_properties_t_swigregister
input_properties_input_properties_t_swigregister(input_properties_input_properties_t)

class input_properties_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_properties_input_properties"] = _p4pd.input_properties_action_union_t_input_properties_input_properties_set
    __swig_getmethods__["input_properties_input_properties"] = _p4pd.input_properties_action_union_t_input_properties_input_properties_get
    if _newclass:input_properties_input_properties = _swig_property(_p4pd.input_properties_action_union_t_input_properties_input_properties_get, _p4pd.input_properties_action_union_t_input_properties_input_properties_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_action_union_t
    __del__ = lambda self : None;
input_properties_action_union_t_swigregister = _p4pd.input_properties_action_union_t_swigregister
input_properties_action_union_t_swigregister(input_properties_action_union_t)

class input_properties_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.input_properties_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.input_properties_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.input_properties_actiondata_actionid_get, _p4pd.input_properties_actiondata_actionid_set)
    __swig_setmethods__["input_properties_action_u"] = _p4pd.input_properties_actiondata_input_properties_action_u_set
    __swig_getmethods__["input_properties_action_u"] = _p4pd.input_properties_actiondata_input_properties_action_u_get
    if _newclass:input_properties_action_u = _swig_property(_p4pd.input_properties_actiondata_input_properties_action_u_get, _p4pd.input_properties_actiondata_input_properties_action_u_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_actiondata
    __del__ = lambda self : None;
input_properties_actiondata_swigregister = _p4pd.input_properties_actiondata_swigregister
input_properties_actiondata_swigregister(input_properties_actiondata)

class ddos_src_vf_policer_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_src_vf_policer_idx"] = _p4pd.ddos_src_vf_policer_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_src_vf_policer_idx"] = _p4pd.ddos_src_vf_policer_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_get
    if _newclass:ddos_metadata_ddos_src_vf_policer_idx = _swig_property(_p4pd.ddos_src_vf_policer_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_get, _p4pd.ddos_src_vf_policer_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_swkey_t
    __del__ = lambda self : None;
ddos_src_vf_policer_swkey_t_swigregister = _p4pd.ddos_src_vf_policer_swkey_t_swigregister
ddos_src_vf_policer_swkey_t_swigregister(ddos_src_vf_policer_swkey_t)

DDOS_SRC_VF_POLICER_EXECUTE_DDOS_SRC_VF_POLICER_ID = _p4pd.DDOS_SRC_VF_POLICER_EXECUTE_DDOS_SRC_VF_POLICER_ID
DDOS_SRC_VF_POLICER_MAX_ID = _p4pd.DDOS_SRC_VF_POLICER_MAX_ID
class ddos_src_vf_policer_execute_ddos_src_vf_policer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_execute_ddos_src_vf_policer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_execute_ddos_src_vf_policer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt_set)
    __swig_setmethods__["entry_valid2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid2_set
    __swig_getmethods__["entry_valid2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid2_get
    if _newclass:entry_valid2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_entry_valid2_set)
    __swig_setmethods__["pkt_rate2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate2_set
    __swig_getmethods__["pkt_rate2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate2_get
    if _newclass:pkt_rate2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_pkt_rate2_set)
    __swig_setmethods__["rlimit_en2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en2_set
    __swig_getmethods__["rlimit_en2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en2_get
    if _newclass:rlimit_en2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_en2_set)
    __swig_setmethods__["rlimit_prof2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof2_set
    __swig_getmethods__["rlimit_prof2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof2_get
    if _newclass:rlimit_prof2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rlimit_prof2_set)
    __swig_setmethods__["color_aware2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware2_set
    __swig_getmethods__["color_aware2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware2_get
    if _newclass:color_aware2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_color_aware2_set)
    __swig_setmethods__["rsvd2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd2_set
    __swig_getmethods__["rsvd2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd2_get
    if _newclass:rsvd2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rsvd2_set)
    __swig_setmethods__["axi_wr_pend2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend2_set
    __swig_getmethods__["axi_wr_pend2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend2_get
    if _newclass:axi_wr_pend2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_axi_wr_pend2_set)
    __swig_setmethods__["burst2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst2_set
    __swig_getmethods__["burst2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst2_get
    if _newclass:burst2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_burst2_set)
    __swig_setmethods__["rate2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate2_set
    __swig_getmethods__["rate2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate2_get
    if _newclass:rate2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_rate2_set)
    __swig_setmethods__["tbkt2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt2_set
    __swig_getmethods__["tbkt2"] = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt2_get
    if _newclass:tbkt2 = _swig_property(_p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt2_get, _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_tbkt2_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_execute_ddos_src_vf_policer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_execute_ddos_src_vf_policer_t
    __del__ = lambda self : None;
ddos_src_vf_policer_execute_ddos_src_vf_policer_t_swigregister = _p4pd.ddos_src_vf_policer_execute_ddos_src_vf_policer_t_swigregister
ddos_src_vf_policer_execute_ddos_src_vf_policer_t_swigregister(ddos_src_vf_policer_execute_ddos_src_vf_policer_t)

class ddos_src_vf_policer_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_vf_policer_execute_ddos_src_vf_policer"] = _p4pd.ddos_src_vf_policer_action_union_t_ddos_src_vf_policer_execute_ddos_src_vf_policer_set
    __swig_getmethods__["ddos_src_vf_policer_execute_ddos_src_vf_policer"] = _p4pd.ddos_src_vf_policer_action_union_t_ddos_src_vf_policer_execute_ddos_src_vf_policer_get
    if _newclass:ddos_src_vf_policer_execute_ddos_src_vf_policer = _swig_property(_p4pd.ddos_src_vf_policer_action_union_t_ddos_src_vf_policer_execute_ddos_src_vf_policer_get, _p4pd.ddos_src_vf_policer_action_union_t_ddos_src_vf_policer_execute_ddos_src_vf_policer_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_action_union_t
    __del__ = lambda self : None;
ddos_src_vf_policer_action_union_t_swigregister = _p4pd.ddos_src_vf_policer_action_union_t_swigregister
ddos_src_vf_policer_action_union_t_swigregister(ddos_src_vf_policer_action_union_t)

class ddos_src_vf_policer_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_vf_policer_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_vf_policer_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_vf_policer_actiondata_actionid_get, _p4pd.ddos_src_vf_policer_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_vf_policer_action_u"] = _p4pd.ddos_src_vf_policer_actiondata_ddos_src_vf_policer_action_u_set
    __swig_getmethods__["ddos_src_vf_policer_action_u"] = _p4pd.ddos_src_vf_policer_actiondata_ddos_src_vf_policer_action_u_get
    if _newclass:ddos_src_vf_policer_action_u = _swig_property(_p4pd.ddos_src_vf_policer_actiondata_ddos_src_vf_policer_action_u_get, _p4pd.ddos_src_vf_policer_actiondata_ddos_src_vf_policer_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_actiondata
    __del__ = lambda self : None;
ddos_src_vf_policer_actiondata_swigregister = _p4pd.ddos_src_vf_policer_actiondata_swigregister
ddos_src_vf_policer_actiondata_swigregister(ddos_src_vf_policer_actiondata)

class ingress_policer_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["policer_metadata_ingress_policer_index"] = _p4pd.ingress_policer_swkey_t_policer_metadata_ingress_policer_index_set
    __swig_getmethods__["policer_metadata_ingress_policer_index"] = _p4pd.ingress_policer_swkey_t_policer_metadata_ingress_policer_index_get
    if _newclass:policer_metadata_ingress_policer_index = _swig_property(_p4pd.ingress_policer_swkey_t_policer_metadata_ingress_policer_index_get, _p4pd.ingress_policer_swkey_t_policer_metadata_ingress_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_swkey_t
    __del__ = lambda self : None;
ingress_policer_swkey_t_swigregister = _p4pd.ingress_policer_swkey_t_swigregister
ingress_policer_swkey_t_swigregister(ingress_policer_swkey_t)

INGRESS_POLICER_EXECUTE_INGRESS_POLICER_ID = _p4pd.INGRESS_POLICER_EXECUTE_INGRESS_POLICER_ID
INGRESS_POLICER_MAX_ID = _p4pd.INGRESS_POLICER_MAX_ID
class ingress_policer_execute_ingress_policer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_execute_ingress_policer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_execute_ingress_policer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.ingress_policer_execute_ingress_policer_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.ingress_policer_execute_ingress_policer_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_entry_valid_get, _p4pd.ingress_policer_execute_ingress_policer_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.ingress_policer_execute_ingress_policer_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.ingress_policer_execute_ingress_policer_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_pkt_rate_get, _p4pd.ingress_policer_execute_ingress_policer_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_rlimit_en_get, _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_rlimit_prof_get, _p4pd.ingress_policer_execute_ingress_policer_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.ingress_policer_execute_ingress_policer_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.ingress_policer_execute_ingress_policer_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_color_aware_get, _p4pd.ingress_policer_execute_ingress_policer_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.ingress_policer_execute_ingress_policer_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.ingress_policer_execute_ingress_policer_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_rsvd_get, _p4pd.ingress_policer_execute_ingress_policer_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.ingress_policer_execute_ingress_policer_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.ingress_policer_execute_ingress_policer_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_axi_wr_pend_get, _p4pd.ingress_policer_execute_ingress_policer_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.ingress_policer_execute_ingress_policer_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.ingress_policer_execute_ingress_policer_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_burst_get, _p4pd.ingress_policer_execute_ingress_policer_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.ingress_policer_execute_ingress_policer_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.ingress_policer_execute_ingress_policer_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_rate_get, _p4pd.ingress_policer_execute_ingress_policer_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.ingress_policer_execute_ingress_policer_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.ingress_policer_execute_ingress_policer_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.ingress_policer_execute_ingress_policer_t_tbkt_get, _p4pd.ingress_policer_execute_ingress_policer_t_tbkt_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_execute_ingress_policer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_execute_ingress_policer_t
    __del__ = lambda self : None;
ingress_policer_execute_ingress_policer_t_swigregister = _p4pd.ingress_policer_execute_ingress_policer_t_swigregister
ingress_policer_execute_ingress_policer_t_swigregister(ingress_policer_execute_ingress_policer_t)

class ingress_policer_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ingress_policer_execute_ingress_policer"] = _p4pd.ingress_policer_action_union_t_ingress_policer_execute_ingress_policer_set
    __swig_getmethods__["ingress_policer_execute_ingress_policer"] = _p4pd.ingress_policer_action_union_t_ingress_policer_execute_ingress_policer_get
    if _newclass:ingress_policer_execute_ingress_policer = _swig_property(_p4pd.ingress_policer_action_union_t_ingress_policer_execute_ingress_policer_get, _p4pd.ingress_policer_action_union_t_ingress_policer_execute_ingress_policer_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_action_union_t
    __del__ = lambda self : None;
ingress_policer_action_union_t_swigregister = _p4pd.ingress_policer_action_union_t_swigregister
ingress_policer_action_union_t_swigregister(ingress_policer_action_union_t)

class ingress_policer_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ingress_policer_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ingress_policer_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ingress_policer_actiondata_actionid_get, _p4pd.ingress_policer_actiondata_actionid_set)
    __swig_setmethods__["ingress_policer_action_u"] = _p4pd.ingress_policer_actiondata_ingress_policer_action_u_set
    __swig_getmethods__["ingress_policer_action_u"] = _p4pd.ingress_policer_actiondata_ingress_policer_action_u_get
    if _newclass:ingress_policer_action_u = _swig_property(_p4pd.ingress_policer_actiondata_ingress_policer_action_u_get, _p4pd.ingress_policer_actiondata_ingress_policer_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_actiondata
    __del__ = lambda self : None;
ingress_policer_actiondata_swigregister = _p4pd.ingress_policer_actiondata_swigregister
ingress_policer_actiondata_swigregister(ingress_policer_actiondata)

class input_mapping_tunneled_union1_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_union1_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_union1_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_union1_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_union1_t
    __del__ = lambda self : None;
input_mapping_tunneled_union1_t_swigregister = _p4pd.input_mapping_tunneled_union1_t_swigregister
input_mapping_tunneled_union1_t_swigregister(input_mapping_tunneled_union1_t)

class input_mapping_tunneled_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_ipv4_valid"] = _p4pd.input_mapping_tunneled_swkey_t_inner_ipv4_valid_set
    __swig_getmethods__["inner_ipv4_valid"] = _p4pd.input_mapping_tunneled_swkey_t_inner_ipv4_valid_get
    if _newclass:inner_ipv4_valid = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_inner_ipv4_valid_get, _p4pd.input_mapping_tunneled_swkey_t_inner_ipv4_valid_set)
    __swig_setmethods__["inner_ipv6_valid"] = _p4pd.input_mapping_tunneled_swkey_t_inner_ipv6_valid_set
    __swig_getmethods__["inner_ipv6_valid"] = _p4pd.input_mapping_tunneled_swkey_t_inner_ipv6_valid_get
    if _newclass:inner_ipv6_valid = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_inner_ipv6_valid_get, _p4pd.input_mapping_tunneled_swkey_t_inner_ipv6_valid_set)
    __swig_setmethods__["mpls_0_valid"] = _p4pd.input_mapping_tunneled_swkey_t_mpls_0_valid_set
    __swig_getmethods__["mpls_0_valid"] = _p4pd.input_mapping_tunneled_swkey_t_mpls_0_valid_get
    if _newclass:mpls_0_valid = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_mpls_0_valid_get, _p4pd.input_mapping_tunneled_swkey_t_mpls_0_valid_set)
    __swig_setmethods__["ipv4_valid"] = _p4pd.input_mapping_tunneled_swkey_t_ipv4_valid_set
    __swig_getmethods__["ipv4_valid"] = _p4pd.input_mapping_tunneled_swkey_t_ipv4_valid_get
    if _newclass:ipv4_valid = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_ipv4_valid_get, _p4pd.input_mapping_tunneled_swkey_t_ipv4_valid_set)
    __swig_setmethods__["ipv6_valid"] = _p4pd.input_mapping_tunneled_swkey_t_ipv6_valid_set
    __swig_getmethods__["ipv6_valid"] = _p4pd.input_mapping_tunneled_swkey_t_ipv6_valid_get
    if _newclass:ipv6_valid = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_ipv6_valid_get, _p4pd.input_mapping_tunneled_swkey_t_ipv6_valid_set)
    __swig_setmethods__["entry_inactive_input_mapping"] = _p4pd.input_mapping_tunneled_swkey_t_entry_inactive_input_mapping_set
    __swig_getmethods__["entry_inactive_input_mapping"] = _p4pd.input_mapping_tunneled_swkey_t_entry_inactive_input_mapping_get
    if _newclass:entry_inactive_input_mapping = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_entry_inactive_input_mapping_get, _p4pd.input_mapping_tunneled_swkey_t_entry_inactive_input_mapping_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_mapping_tunneled_swkey_t_tunnel_metadata_tunnel_type_set
    __swig_getmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_mapping_tunneled_swkey_t_tunnel_metadata_tunnel_type_get
    if _newclass:tunnel_metadata_tunnel_type = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_tunnel_metadata_tunnel_type_get, _p4pd.input_mapping_tunneled_swkey_t_tunnel_metadata_tunnel_type_set)
    __swig_setmethods__["input_mapping_tunneled_u1"] = _p4pd.input_mapping_tunneled_swkey_t_input_mapping_tunneled_u1_set
    __swig_getmethods__["input_mapping_tunneled_u1"] = _p4pd.input_mapping_tunneled_swkey_t_input_mapping_tunneled_u1_get
    if _newclass:input_mapping_tunneled_u1 = _swig_property(_p4pd.input_mapping_tunneled_swkey_t_input_mapping_tunneled_u1_get, _p4pd.input_mapping_tunneled_swkey_t_input_mapping_tunneled_u1_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_swkey_t
    __del__ = lambda self : None;
input_mapping_tunneled_swkey_t_swigregister = _p4pd.input_mapping_tunneled_swkey_t_swigregister
input_mapping_tunneled_swkey_t_swigregister(input_mapping_tunneled_swkey_t)

class input_mapping_tunneled_mask_union1_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_mask_union1_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_mask_union1_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_mask_union1_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_mask_union1_t
    __del__ = lambda self : None;
input_mapping_tunneled_mask_union1_t_swigregister = _p4pd.input_mapping_tunneled_mask_union1_t_swigregister
input_mapping_tunneled_mask_union1_t_swigregister(input_mapping_tunneled_mask_union1_t)

class input_mapping_tunneled_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_ipv4_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv4_valid_mask_set
    __swig_getmethods__["inner_ipv4_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv4_valid_mask_get
    if _newclass:inner_ipv4_valid_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv4_valid_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv4_valid_mask_set)
    __swig_setmethods__["inner_ipv6_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv6_valid_mask_set
    __swig_getmethods__["inner_ipv6_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv6_valid_mask_get
    if _newclass:inner_ipv6_valid_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv6_valid_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_inner_ipv6_valid_mask_set)
    __swig_setmethods__["mpls_0_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_mpls_0_valid_mask_set
    __swig_getmethods__["mpls_0_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_mpls_0_valid_mask_get
    if _newclass:mpls_0_valid_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_mpls_0_valid_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_mpls_0_valid_mask_set)
    __swig_setmethods__["ipv4_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_ipv4_valid_mask_set
    __swig_getmethods__["ipv4_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_ipv4_valid_mask_get
    if _newclass:ipv4_valid_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_ipv4_valid_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_ipv4_valid_mask_set)
    __swig_setmethods__["ipv6_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_ipv6_valid_mask_set
    __swig_getmethods__["ipv6_valid_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_ipv6_valid_mask_get
    if _newclass:ipv6_valid_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_ipv6_valid_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_ipv6_valid_mask_set)
    __swig_setmethods__["entry_inactive_input_mapping_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_entry_inactive_input_mapping_mask_set
    __swig_getmethods__["entry_inactive_input_mapping_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_entry_inactive_input_mapping_mask_get
    if _newclass:entry_inactive_input_mapping_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_entry_inactive_input_mapping_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_entry_inactive_input_mapping_mask_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set
    __swig_getmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_mapping_tunneled_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get
    if _newclass:tunnel_metadata_tunnel_type_mask = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get, _p4pd.input_mapping_tunneled_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set)
    __swig_setmethods__["input_mapping_tunneled_mask_u1"] = _p4pd.input_mapping_tunneled_swkey_mask_t_input_mapping_tunneled_mask_u1_set
    __swig_getmethods__["input_mapping_tunneled_mask_u1"] = _p4pd.input_mapping_tunneled_swkey_mask_t_input_mapping_tunneled_mask_u1_get
    if _newclass:input_mapping_tunneled_mask_u1 = _swig_property(_p4pd.input_mapping_tunneled_swkey_mask_t_input_mapping_tunneled_mask_u1_get, _p4pd.input_mapping_tunneled_swkey_mask_t_input_mapping_tunneled_mask_u1_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_swkey_mask_t
    __del__ = lambda self : None;
input_mapping_tunneled_swkey_mask_t_swigregister = _p4pd.input_mapping_tunneled_swkey_mask_t_swigregister
input_mapping_tunneled_swkey_mask_t_swigregister(input_mapping_tunneled_swkey_mask_t)

INPUT_MAPPING_TUNNELED_TUNNELED_IPV4_PACKET_ID = _p4pd.INPUT_MAPPING_TUNNELED_TUNNELED_IPV4_PACKET_ID
INPUT_MAPPING_TUNNELED_TUNNELED_IPV6_PACKET_ID = _p4pd.INPUT_MAPPING_TUNNELED_TUNNELED_IPV6_PACKET_ID
INPUT_MAPPING_TUNNELED_TUNNELED_NON_IP_PACKET_ID = _p4pd.INPUT_MAPPING_TUNNELED_TUNNELED_NON_IP_PACKET_ID
INPUT_MAPPING_TUNNELED_TUNNELED_VM_BOUNCE_PACKET_ID = _p4pd.INPUT_MAPPING_TUNNELED_TUNNELED_VM_BOUNCE_PACKET_ID
INPUT_MAPPING_TUNNELED_NOP_ID = _p4pd.INPUT_MAPPING_TUNNELED_NOP_ID
INPUT_MAPPING_TUNNELED_MAX_ID = _p4pd.INPUT_MAPPING_TUNNELED_MAX_ID
class input_mapping_tunneled_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_action_union_t
    __del__ = lambda self : None;
input_mapping_tunneled_action_union_t_swigregister = _p4pd.input_mapping_tunneled_action_union_t_swigregister
input_mapping_tunneled_action_union_t_swigregister(input_mapping_tunneled_action_union_t)

class input_mapping_tunneled_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_tunneled_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_tunneled_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.input_mapping_tunneled_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.input_mapping_tunneled_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.input_mapping_tunneled_actiondata_actionid_get, _p4pd.input_mapping_tunneled_actiondata_actionid_set)
    __swig_setmethods__["input_mapping_tunneled_action_u"] = _p4pd.input_mapping_tunneled_actiondata_input_mapping_tunneled_action_u_set
    __swig_getmethods__["input_mapping_tunneled_action_u"] = _p4pd.input_mapping_tunneled_actiondata_input_mapping_tunneled_action_u_get
    if _newclass:input_mapping_tunneled_action_u = _swig_property(_p4pd.input_mapping_tunneled_actiondata_input_mapping_tunneled_action_u_get, _p4pd.input_mapping_tunneled_actiondata_input_mapping_tunneled_action_u_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_tunneled_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_tunneled_actiondata
    __del__ = lambda self : None;
input_mapping_tunneled_actiondata_swigregister = _p4pd.input_mapping_tunneled_actiondata_swigregister
input_mapping_tunneled_actiondata_swigregister(input_mapping_tunneled_actiondata)

class validate_packet_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, validate_packet_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, validate_packet_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_validate_packet_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_validate_packet_swkey_t
    __del__ = lambda self : None;
validate_packet_swkey_t_swigregister = _p4pd.validate_packet_swkey_t_swigregister
validate_packet_swkey_t_swigregister(validate_packet_swkey_t)

VALIDATE_PACKET_VALIDATE_PACKET_ID = _p4pd.VALIDATE_PACKET_VALIDATE_PACKET_ID
VALIDATE_PACKET_MAX_ID = _p4pd.VALIDATE_PACKET_MAX_ID
class validate_packet_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, validate_packet_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, validate_packet_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_validate_packet_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_validate_packet_action_union_t
    __del__ = lambda self : None;
validate_packet_action_union_t_swigregister = _p4pd.validate_packet_action_union_t_swigregister
validate_packet_action_union_t_swigregister(validate_packet_action_union_t)

class validate_packet_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, validate_packet_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, validate_packet_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.validate_packet_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.validate_packet_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.validate_packet_actiondata_actionid_get, _p4pd.validate_packet_actiondata_actionid_set)
    __swig_setmethods__["validate_packet_action_u"] = _p4pd.validate_packet_actiondata_validate_packet_action_u_set
    __swig_getmethods__["validate_packet_action_u"] = _p4pd.validate_packet_actiondata_validate_packet_action_u_get
    if _newclass:validate_packet_action_u = _swig_property(_p4pd.validate_packet_actiondata_validate_packet_action_u_get, _p4pd.validate_packet_actiondata_validate_packet_action_u_set)
    def __init__(self): 
        this = _p4pd.new_validate_packet_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_validate_packet_actiondata
    __del__ = lambda self : None;
validate_packet_actiondata_swigregister = _p4pd.validate_packet_actiondata_swigregister
validate_packet_actiondata_swigregister(validate_packet_actiondata)

class input_mapping_native_union1_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_union1_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_union1_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_union1_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_union1_t
    __del__ = lambda self : None;
input_mapping_native_union1_t_swigregister = _p4pd.input_mapping_native_union1_t_swigregister
input_mapping_native_union1_t_swigregister(input_mapping_native_union1_t)

class input_mapping_native_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_ipv4_valid"] = _p4pd.input_mapping_native_swkey_t_inner_ipv4_valid_set
    __swig_getmethods__["inner_ipv4_valid"] = _p4pd.input_mapping_native_swkey_t_inner_ipv4_valid_get
    if _newclass:inner_ipv4_valid = _swig_property(_p4pd.input_mapping_native_swkey_t_inner_ipv4_valid_get, _p4pd.input_mapping_native_swkey_t_inner_ipv4_valid_set)
    __swig_setmethods__["inner_ipv6_valid"] = _p4pd.input_mapping_native_swkey_t_inner_ipv6_valid_set
    __swig_getmethods__["inner_ipv6_valid"] = _p4pd.input_mapping_native_swkey_t_inner_ipv6_valid_get
    if _newclass:inner_ipv6_valid = _swig_property(_p4pd.input_mapping_native_swkey_t_inner_ipv6_valid_get, _p4pd.input_mapping_native_swkey_t_inner_ipv6_valid_set)
    __swig_setmethods__["mpls_0_valid"] = _p4pd.input_mapping_native_swkey_t_mpls_0_valid_set
    __swig_getmethods__["mpls_0_valid"] = _p4pd.input_mapping_native_swkey_t_mpls_0_valid_get
    if _newclass:mpls_0_valid = _swig_property(_p4pd.input_mapping_native_swkey_t_mpls_0_valid_get, _p4pd.input_mapping_native_swkey_t_mpls_0_valid_set)
    __swig_setmethods__["ipv4_valid"] = _p4pd.input_mapping_native_swkey_t_ipv4_valid_set
    __swig_getmethods__["ipv4_valid"] = _p4pd.input_mapping_native_swkey_t_ipv4_valid_get
    if _newclass:ipv4_valid = _swig_property(_p4pd.input_mapping_native_swkey_t_ipv4_valid_get, _p4pd.input_mapping_native_swkey_t_ipv4_valid_set)
    __swig_setmethods__["ipv6_valid"] = _p4pd.input_mapping_native_swkey_t_ipv6_valid_set
    __swig_getmethods__["ipv6_valid"] = _p4pd.input_mapping_native_swkey_t_ipv6_valid_get
    if _newclass:ipv6_valid = _swig_property(_p4pd.input_mapping_native_swkey_t_ipv6_valid_get, _p4pd.input_mapping_native_swkey_t_ipv6_valid_set)
    __swig_setmethods__["entry_inactive_input_mapping"] = _p4pd.input_mapping_native_swkey_t_entry_inactive_input_mapping_set
    __swig_getmethods__["entry_inactive_input_mapping"] = _p4pd.input_mapping_native_swkey_t_entry_inactive_input_mapping_get
    if _newclass:entry_inactive_input_mapping = _swig_property(_p4pd.input_mapping_native_swkey_t_entry_inactive_input_mapping_get, _p4pd.input_mapping_native_swkey_t_entry_inactive_input_mapping_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_mapping_native_swkey_t_tunnel_metadata_tunnel_type_set
    __swig_getmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_mapping_native_swkey_t_tunnel_metadata_tunnel_type_get
    if _newclass:tunnel_metadata_tunnel_type = _swig_property(_p4pd.input_mapping_native_swkey_t_tunnel_metadata_tunnel_type_get, _p4pd.input_mapping_native_swkey_t_tunnel_metadata_tunnel_type_set)
    __swig_setmethods__["input_mapping_native_u1"] = _p4pd.input_mapping_native_swkey_t_input_mapping_native_u1_set
    __swig_getmethods__["input_mapping_native_u1"] = _p4pd.input_mapping_native_swkey_t_input_mapping_native_u1_get
    if _newclass:input_mapping_native_u1 = _swig_property(_p4pd.input_mapping_native_swkey_t_input_mapping_native_u1_get, _p4pd.input_mapping_native_swkey_t_input_mapping_native_u1_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_swkey_t
    __del__ = lambda self : None;
input_mapping_native_swkey_t_swigregister = _p4pd.input_mapping_native_swkey_t_swigregister
input_mapping_native_swkey_t_swigregister(input_mapping_native_swkey_t)

class input_mapping_native_mask_union1_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_mask_union1_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_mask_union1_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_mask_union1_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_mask_union1_t
    __del__ = lambda self : None;
input_mapping_native_mask_union1_t_swigregister = _p4pd.input_mapping_native_mask_union1_t_swigregister
input_mapping_native_mask_union1_t_swigregister(input_mapping_native_mask_union1_t)

class input_mapping_native_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_ipv4_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_inner_ipv4_valid_mask_set
    __swig_getmethods__["inner_ipv4_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_inner_ipv4_valid_mask_get
    if _newclass:inner_ipv4_valid_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_inner_ipv4_valid_mask_get, _p4pd.input_mapping_native_swkey_mask_t_inner_ipv4_valid_mask_set)
    __swig_setmethods__["inner_ipv6_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_inner_ipv6_valid_mask_set
    __swig_getmethods__["inner_ipv6_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_inner_ipv6_valid_mask_get
    if _newclass:inner_ipv6_valid_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_inner_ipv6_valid_mask_get, _p4pd.input_mapping_native_swkey_mask_t_inner_ipv6_valid_mask_set)
    __swig_setmethods__["mpls_0_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_mpls_0_valid_mask_set
    __swig_getmethods__["mpls_0_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_mpls_0_valid_mask_get
    if _newclass:mpls_0_valid_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_mpls_0_valid_mask_get, _p4pd.input_mapping_native_swkey_mask_t_mpls_0_valid_mask_set)
    __swig_setmethods__["ipv4_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_ipv4_valid_mask_set
    __swig_getmethods__["ipv4_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_ipv4_valid_mask_get
    if _newclass:ipv4_valid_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_ipv4_valid_mask_get, _p4pd.input_mapping_native_swkey_mask_t_ipv4_valid_mask_set)
    __swig_setmethods__["ipv6_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_ipv6_valid_mask_set
    __swig_getmethods__["ipv6_valid_mask"] = _p4pd.input_mapping_native_swkey_mask_t_ipv6_valid_mask_get
    if _newclass:ipv6_valid_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_ipv6_valid_mask_get, _p4pd.input_mapping_native_swkey_mask_t_ipv6_valid_mask_set)
    __swig_setmethods__["entry_inactive_input_mapping_mask"] = _p4pd.input_mapping_native_swkey_mask_t_entry_inactive_input_mapping_mask_set
    __swig_getmethods__["entry_inactive_input_mapping_mask"] = _p4pd.input_mapping_native_swkey_mask_t_entry_inactive_input_mapping_mask_get
    if _newclass:entry_inactive_input_mapping_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_entry_inactive_input_mapping_mask_get, _p4pd.input_mapping_native_swkey_mask_t_entry_inactive_input_mapping_mask_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_mapping_native_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set
    __swig_getmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_mapping_native_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get
    if _newclass:tunnel_metadata_tunnel_type_mask = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get, _p4pd.input_mapping_native_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set)
    __swig_setmethods__["input_mapping_native_mask_u1"] = _p4pd.input_mapping_native_swkey_mask_t_input_mapping_native_mask_u1_set
    __swig_getmethods__["input_mapping_native_mask_u1"] = _p4pd.input_mapping_native_swkey_mask_t_input_mapping_native_mask_u1_get
    if _newclass:input_mapping_native_mask_u1 = _swig_property(_p4pd.input_mapping_native_swkey_mask_t_input_mapping_native_mask_u1_get, _p4pd.input_mapping_native_swkey_mask_t_input_mapping_native_mask_u1_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_swkey_mask_t
    __del__ = lambda self : None;
input_mapping_native_swkey_mask_t_swigregister = _p4pd.input_mapping_native_swkey_mask_t_swigregister
input_mapping_native_swkey_mask_t_swigregister(input_mapping_native_swkey_mask_t)

INPUT_MAPPING_NATIVE_NATIVE_IPV4_PACKET_ID = _p4pd.INPUT_MAPPING_NATIVE_NATIVE_IPV4_PACKET_ID
INPUT_MAPPING_NATIVE_NATIVE_IPV6_PACKET_ID = _p4pd.INPUT_MAPPING_NATIVE_NATIVE_IPV6_PACKET_ID
INPUT_MAPPING_NATIVE_NATIVE_NON_IP_PACKET_ID = _p4pd.INPUT_MAPPING_NATIVE_NATIVE_NON_IP_PACKET_ID
INPUT_MAPPING_NATIVE_INPUT_MAPPING_MISS_ID = _p4pd.INPUT_MAPPING_NATIVE_INPUT_MAPPING_MISS_ID
INPUT_MAPPING_NATIVE_NOP_ID = _p4pd.INPUT_MAPPING_NATIVE_NOP_ID
INPUT_MAPPING_NATIVE_MAX_ID = _p4pd.INPUT_MAPPING_NATIVE_MAX_ID
class input_mapping_native_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_action_union_t
    __del__ = lambda self : None;
input_mapping_native_action_union_t_swigregister = _p4pd.input_mapping_native_action_union_t_swigregister
input_mapping_native_action_union_t_swigregister(input_mapping_native_action_union_t)

class input_mapping_native_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_mapping_native_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_mapping_native_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.input_mapping_native_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.input_mapping_native_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.input_mapping_native_actiondata_actionid_get, _p4pd.input_mapping_native_actiondata_actionid_set)
    __swig_setmethods__["input_mapping_native_action_u"] = _p4pd.input_mapping_native_actiondata_input_mapping_native_action_u_set
    __swig_getmethods__["input_mapping_native_action_u"] = _p4pd.input_mapping_native_actiondata_input_mapping_native_action_u_get
    if _newclass:input_mapping_native_action_u = _swig_property(_p4pd.input_mapping_native_actiondata_input_mapping_native_action_u_get, _p4pd.input_mapping_native_actiondata_input_mapping_native_action_u_set)
    def __init__(self): 
        this = _p4pd.new_input_mapping_native_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_mapping_native_actiondata
    __del__ = lambda self : None;
input_mapping_native_actiondata_swigregister = _p4pd.input_mapping_native_actiondata_swigregister
input_mapping_native_actiondata_swigregister(input_mapping_native_actiondata)

class ipsg_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipsg_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipsg_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_type_set
    __swig_getmethods__["flow_lkp_metadata_lkp_type"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_type_get
    if _newclass:flow_lkp_metadata_lkp_type = _swig_property(_p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_type_get, _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_type_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_src_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_src_get
    if _newclass:flow_lkp_metadata_lkp_src = _swig_property(_p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_src_get, _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_src_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.ipsg_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["entry_inactive_ipsg"] = _p4pd.ipsg_swkey_t_entry_inactive_ipsg_set
    __swig_getmethods__["entry_inactive_ipsg"] = _p4pd.ipsg_swkey_t_entry_inactive_ipsg_get
    if _newclass:entry_inactive_ipsg = _swig_property(_p4pd.ipsg_swkey_t_entry_inactive_ipsg_get, _p4pd.ipsg_swkey_t_entry_inactive_ipsg_set)
    def __init__(self): 
        this = _p4pd.new_ipsg_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ipsg_swkey_t
    __del__ = lambda self : None;
ipsg_swkey_t_swigregister = _p4pd.ipsg_swkey_t_swigregister
ipsg_swkey_t_swigregister(ipsg_swkey_t)

class ipsg_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipsg_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipsg_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_type_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_type_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_get
    if _newclass:flow_lkp_metadata_lkp_type_mask = _swig_property(_p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_get, _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_type_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_src_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get
    if _newclass:flow_lkp_metadata_lkp_src_mask = _swig_property(_p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_get, _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_src_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get
    if _newclass:flow_lkp_metadata_lkp_vrf_mask = _swig_property(_p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get, _p4pd.ipsg_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set)
    __swig_setmethods__["entry_inactive_ipsg_mask"] = _p4pd.ipsg_swkey_mask_t_entry_inactive_ipsg_mask_set
    __swig_getmethods__["entry_inactive_ipsg_mask"] = _p4pd.ipsg_swkey_mask_t_entry_inactive_ipsg_mask_get
    if _newclass:entry_inactive_ipsg_mask = _swig_property(_p4pd.ipsg_swkey_mask_t_entry_inactive_ipsg_mask_get, _p4pd.ipsg_swkey_mask_t_entry_inactive_ipsg_mask_set)
    def __init__(self): 
        this = _p4pd.new_ipsg_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ipsg_swkey_mask_t
    __del__ = lambda self : None;
ipsg_swkey_mask_t_swigregister = _p4pd.ipsg_swkey_mask_t_swigregister
ipsg_swkey_mask_t_swigregister(ipsg_swkey_mask_t)

IPSG_IPSG_HIT_ID = _p4pd.IPSG_IPSG_HIT_ID
IPSG_IPSG_MISS_ID = _p4pd.IPSG_IPSG_MISS_ID
IPSG_MAX_ID = _p4pd.IPSG_MAX_ID
class ipsg_ipsg_hit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipsg_ipsg_hit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipsg_ipsg_hit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src_lif"] = _p4pd.ipsg_ipsg_hit_t_src_lif_set
    __swig_getmethods__["src_lif"] = _p4pd.ipsg_ipsg_hit_t_src_lif_get
    if _newclass:src_lif = _swig_property(_p4pd.ipsg_ipsg_hit_t_src_lif_get, _p4pd.ipsg_ipsg_hit_t_src_lif_set)
    __swig_setmethods__["mac"] = _p4pd.ipsg_ipsg_hit_t_mac_set
    __swig_getmethods__["mac"] = _p4pd.ipsg_ipsg_hit_t_mac_get
    if _newclass:mac = _swig_property(_p4pd.ipsg_ipsg_hit_t_mac_get, _p4pd.ipsg_ipsg_hit_t_mac_set)
    __swig_setmethods__["vlan_valid"] = _p4pd.ipsg_ipsg_hit_t_vlan_valid_set
    __swig_getmethods__["vlan_valid"] = _p4pd.ipsg_ipsg_hit_t_vlan_valid_get
    if _newclass:vlan_valid = _swig_property(_p4pd.ipsg_ipsg_hit_t_vlan_valid_get, _p4pd.ipsg_ipsg_hit_t_vlan_valid_set)
    __swig_setmethods__["vlan_id"] = _p4pd.ipsg_ipsg_hit_t_vlan_id_set
    __swig_getmethods__["vlan_id"] = _p4pd.ipsg_ipsg_hit_t_vlan_id_get
    if _newclass:vlan_id = _swig_property(_p4pd.ipsg_ipsg_hit_t_vlan_id_get, _p4pd.ipsg_ipsg_hit_t_vlan_id_set)
    def __init__(self): 
        this = _p4pd.new_ipsg_ipsg_hit_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ipsg_ipsg_hit_t
    __del__ = lambda self : None;
ipsg_ipsg_hit_t_swigregister = _p4pd.ipsg_ipsg_hit_t_swigregister
ipsg_ipsg_hit_t_swigregister(ipsg_ipsg_hit_t)

class ipsg_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipsg_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipsg_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipsg_ipsg_hit"] = _p4pd.ipsg_action_union_t_ipsg_ipsg_hit_set
    __swig_getmethods__["ipsg_ipsg_hit"] = _p4pd.ipsg_action_union_t_ipsg_ipsg_hit_get
    if _newclass:ipsg_ipsg_hit = _swig_property(_p4pd.ipsg_action_union_t_ipsg_ipsg_hit_get, _p4pd.ipsg_action_union_t_ipsg_ipsg_hit_set)
    def __init__(self): 
        this = _p4pd.new_ipsg_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ipsg_action_union_t
    __del__ = lambda self : None;
ipsg_action_union_t_swigregister = _p4pd.ipsg_action_union_t_swigregister
ipsg_action_union_t_swigregister(ipsg_action_union_t)

class ipsg_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipsg_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipsg_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ipsg_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ipsg_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ipsg_actiondata_actionid_get, _p4pd.ipsg_actiondata_actionid_set)
    __swig_setmethods__["ipsg_action_u"] = _p4pd.ipsg_actiondata_ipsg_action_u_set
    __swig_getmethods__["ipsg_action_u"] = _p4pd.ipsg_actiondata_ipsg_action_u_get
    if _newclass:ipsg_action_u = _swig_property(_p4pd.ipsg_actiondata_ipsg_action_u_get, _p4pd.ipsg_actiondata_ipsg_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ipsg_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ipsg_actiondata
    __del__ = lambda self : None;
ipsg_actiondata_swigregister = _p4pd.ipsg_actiondata_swigregister
ipsg_actiondata_swigregister(ipsg_actiondata)

class flow_stats_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_stats_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_stats_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_info_metadata_flow_index"] = _p4pd.flow_stats_swkey_t_flow_info_metadata_flow_index_set
    __swig_getmethods__["flow_info_metadata_flow_index"] = _p4pd.flow_stats_swkey_t_flow_info_metadata_flow_index_get
    if _newclass:flow_info_metadata_flow_index = _swig_property(_p4pd.flow_stats_swkey_t_flow_info_metadata_flow_index_get, _p4pd.flow_stats_swkey_t_flow_info_metadata_flow_index_set)
    def __init__(self): 
        this = _p4pd.new_flow_stats_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_stats_swkey_t
    __del__ = lambda self : None;
flow_stats_swkey_t_swigregister = _p4pd.flow_stats_swkey_t_swigregister
flow_stats_swkey_t_swigregister(flow_stats_swkey_t)

FLOW_STATS_FLOW_STATS_ID = _p4pd.FLOW_STATS_FLOW_STATS_ID
FLOW_STATS_MAX_ID = _p4pd.FLOW_STATS_MAX_ID
class flow_stats_flow_stats_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_stats_flow_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_stats_flow_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["last_seen_timestamp"] = _p4pd.flow_stats_flow_stats_t_last_seen_timestamp_set
    __swig_getmethods__["last_seen_timestamp"] = _p4pd.flow_stats_flow_stats_t_last_seen_timestamp_get
    if _newclass:last_seen_timestamp = _swig_property(_p4pd.flow_stats_flow_stats_t_last_seen_timestamp_get, _p4pd.flow_stats_flow_stats_t_last_seen_timestamp_set)
    __swig_setmethods__["permit_packets"] = _p4pd.flow_stats_flow_stats_t_permit_packets_set
    __swig_getmethods__["permit_packets"] = _p4pd.flow_stats_flow_stats_t_permit_packets_get
    if _newclass:permit_packets = _swig_property(_p4pd.flow_stats_flow_stats_t_permit_packets_get, _p4pd.flow_stats_flow_stats_t_permit_packets_set)
    __swig_setmethods__["permit_bytes"] = _p4pd.flow_stats_flow_stats_t_permit_bytes_set
    __swig_getmethods__["permit_bytes"] = _p4pd.flow_stats_flow_stats_t_permit_bytes_get
    if _newclass:permit_bytes = _swig_property(_p4pd.flow_stats_flow_stats_t_permit_bytes_get, _p4pd.flow_stats_flow_stats_t_permit_bytes_set)
    __swig_setmethods__["drop_packets"] = _p4pd.flow_stats_flow_stats_t_drop_packets_set
    __swig_getmethods__["drop_packets"] = _p4pd.flow_stats_flow_stats_t_drop_packets_get
    if _newclass:drop_packets = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_packets_get, _p4pd.flow_stats_flow_stats_t_drop_packets_set)
    __swig_setmethods__["drop_bytes"] = _p4pd.flow_stats_flow_stats_t_drop_bytes_set
    __swig_getmethods__["drop_bytes"] = _p4pd.flow_stats_flow_stats_t_drop_bytes_get
    if _newclass:drop_bytes = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_bytes_get, _p4pd.flow_stats_flow_stats_t_drop_bytes_set)
    __swig_setmethods__["drop_reason"] = _p4pd.flow_stats_flow_stats_t_drop_reason_set
    __swig_getmethods__["drop_reason"] = _p4pd.flow_stats_flow_stats_t_drop_reason_get
    if _newclass:drop_reason = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_reason_get, _p4pd.flow_stats_flow_stats_t_drop_reason_set)
    __swig_setmethods__["drop_count_map"] = _p4pd.flow_stats_flow_stats_t_drop_count_map_set
    __swig_getmethods__["drop_count_map"] = _p4pd.flow_stats_flow_stats_t_drop_count_map_get
    if _newclass:drop_count_map = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count_map_get, _p4pd.flow_stats_flow_stats_t_drop_count_map_set)
    __swig_setmethods__["drop_count1"] = _p4pd.flow_stats_flow_stats_t_drop_count1_set
    __swig_getmethods__["drop_count1"] = _p4pd.flow_stats_flow_stats_t_drop_count1_get
    if _newclass:drop_count1 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count1_get, _p4pd.flow_stats_flow_stats_t_drop_count1_set)
    __swig_setmethods__["drop_count2"] = _p4pd.flow_stats_flow_stats_t_drop_count2_set
    __swig_getmethods__["drop_count2"] = _p4pd.flow_stats_flow_stats_t_drop_count2_get
    if _newclass:drop_count2 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count2_get, _p4pd.flow_stats_flow_stats_t_drop_count2_set)
    __swig_setmethods__["drop_count3"] = _p4pd.flow_stats_flow_stats_t_drop_count3_set
    __swig_getmethods__["drop_count3"] = _p4pd.flow_stats_flow_stats_t_drop_count3_get
    if _newclass:drop_count3 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count3_get, _p4pd.flow_stats_flow_stats_t_drop_count3_set)
    __swig_setmethods__["drop_count4"] = _p4pd.flow_stats_flow_stats_t_drop_count4_set
    __swig_getmethods__["drop_count4"] = _p4pd.flow_stats_flow_stats_t_drop_count4_get
    if _newclass:drop_count4 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count4_get, _p4pd.flow_stats_flow_stats_t_drop_count4_set)
    __swig_setmethods__["drop_count5"] = _p4pd.flow_stats_flow_stats_t_drop_count5_set
    __swig_getmethods__["drop_count5"] = _p4pd.flow_stats_flow_stats_t_drop_count5_get
    if _newclass:drop_count5 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count5_get, _p4pd.flow_stats_flow_stats_t_drop_count5_set)
    __swig_setmethods__["drop_count6"] = _p4pd.flow_stats_flow_stats_t_drop_count6_set
    __swig_getmethods__["drop_count6"] = _p4pd.flow_stats_flow_stats_t_drop_count6_get
    if _newclass:drop_count6 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count6_get, _p4pd.flow_stats_flow_stats_t_drop_count6_set)
    __swig_setmethods__["drop_count7"] = _p4pd.flow_stats_flow_stats_t_drop_count7_set
    __swig_getmethods__["drop_count7"] = _p4pd.flow_stats_flow_stats_t_drop_count7_get
    if _newclass:drop_count7 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count7_get, _p4pd.flow_stats_flow_stats_t_drop_count7_set)
    __swig_setmethods__["drop_count8"] = _p4pd.flow_stats_flow_stats_t_drop_count8_set
    __swig_getmethods__["drop_count8"] = _p4pd.flow_stats_flow_stats_t_drop_count8_get
    if _newclass:drop_count8 = _swig_property(_p4pd.flow_stats_flow_stats_t_drop_count8_get, _p4pd.flow_stats_flow_stats_t_drop_count8_set)
    __swig_setmethods__["flow_agg_index1"] = _p4pd.flow_stats_flow_stats_t_flow_agg_index1_set
    __swig_getmethods__["flow_agg_index1"] = _p4pd.flow_stats_flow_stats_t_flow_agg_index1_get
    if _newclass:flow_agg_index1 = _swig_property(_p4pd.flow_stats_flow_stats_t_flow_agg_index1_get, _p4pd.flow_stats_flow_stats_t_flow_agg_index1_set)
    __swig_setmethods__["flow_agg_index2"] = _p4pd.flow_stats_flow_stats_t_flow_agg_index2_set
    __swig_getmethods__["flow_agg_index2"] = _p4pd.flow_stats_flow_stats_t_flow_agg_index2_get
    if _newclass:flow_agg_index2 = _swig_property(_p4pd.flow_stats_flow_stats_t_flow_agg_index2_get, _p4pd.flow_stats_flow_stats_t_flow_agg_index2_set)
    __swig_setmethods__["burst_start_timestamp"] = _p4pd.flow_stats_flow_stats_t_burst_start_timestamp_set
    __swig_getmethods__["burst_start_timestamp"] = _p4pd.flow_stats_flow_stats_t_burst_start_timestamp_get
    if _newclass:burst_start_timestamp = _swig_property(_p4pd.flow_stats_flow_stats_t_burst_start_timestamp_get, _p4pd.flow_stats_flow_stats_t_burst_start_timestamp_set)
    __swig_setmethods__["burst_max_timestamp"] = _p4pd.flow_stats_flow_stats_t_burst_max_timestamp_set
    __swig_getmethods__["burst_max_timestamp"] = _p4pd.flow_stats_flow_stats_t_burst_max_timestamp_get
    if _newclass:burst_max_timestamp = _swig_property(_p4pd.flow_stats_flow_stats_t_burst_max_timestamp_get, _p4pd.flow_stats_flow_stats_t_burst_max_timestamp_set)
    __swig_setmethods__["micro_burst_cycles"] = _p4pd.flow_stats_flow_stats_t_micro_burst_cycles_set
    __swig_getmethods__["micro_burst_cycles"] = _p4pd.flow_stats_flow_stats_t_micro_burst_cycles_get
    if _newclass:micro_burst_cycles = _swig_property(_p4pd.flow_stats_flow_stats_t_micro_burst_cycles_get, _p4pd.flow_stats_flow_stats_t_micro_burst_cycles_set)
    __swig_setmethods__["allowed_bytes"] = _p4pd.flow_stats_flow_stats_t_allowed_bytes_set
    __swig_getmethods__["allowed_bytes"] = _p4pd.flow_stats_flow_stats_t_allowed_bytes_get
    if _newclass:allowed_bytes = _swig_property(_p4pd.flow_stats_flow_stats_t_allowed_bytes_get, _p4pd.flow_stats_flow_stats_t_allowed_bytes_set)
    __swig_setmethods__["max_allowed_bytes"] = _p4pd.flow_stats_flow_stats_t_max_allowed_bytes_set
    __swig_getmethods__["max_allowed_bytes"] = _p4pd.flow_stats_flow_stats_t_max_allowed_bytes_get
    if _newclass:max_allowed_bytes = _swig_property(_p4pd.flow_stats_flow_stats_t_max_allowed_bytes_get, _p4pd.flow_stats_flow_stats_t_max_allowed_bytes_set)
    __swig_setmethods__["burst_exceed_bytes"] = _p4pd.flow_stats_flow_stats_t_burst_exceed_bytes_set
    __swig_getmethods__["burst_exceed_bytes"] = _p4pd.flow_stats_flow_stats_t_burst_exceed_bytes_get
    if _newclass:burst_exceed_bytes = _swig_property(_p4pd.flow_stats_flow_stats_t_burst_exceed_bytes_get, _p4pd.flow_stats_flow_stats_t_burst_exceed_bytes_set)
    __swig_setmethods__["burst_exceed_count"] = _p4pd.flow_stats_flow_stats_t_burst_exceed_count_set
    __swig_getmethods__["burst_exceed_count"] = _p4pd.flow_stats_flow_stats_t_burst_exceed_count_get
    if _newclass:burst_exceed_count = _swig_property(_p4pd.flow_stats_flow_stats_t_burst_exceed_count_get, _p4pd.flow_stats_flow_stats_t_burst_exceed_count_set)
    def __init__(self): 
        this = _p4pd.new_flow_stats_flow_stats_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_stats_flow_stats_t
    __del__ = lambda self : None;
flow_stats_flow_stats_t_swigregister = _p4pd.flow_stats_flow_stats_t_swigregister
flow_stats_flow_stats_t_swigregister(flow_stats_flow_stats_t)

class flow_stats_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_stats_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_stats_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_stats_flow_stats"] = _p4pd.flow_stats_action_union_t_flow_stats_flow_stats_set
    __swig_getmethods__["flow_stats_flow_stats"] = _p4pd.flow_stats_action_union_t_flow_stats_flow_stats_get
    if _newclass:flow_stats_flow_stats = _swig_property(_p4pd.flow_stats_action_union_t_flow_stats_flow_stats_get, _p4pd.flow_stats_action_union_t_flow_stats_flow_stats_set)
    def __init__(self): 
        this = _p4pd.new_flow_stats_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_stats_action_union_t
    __del__ = lambda self : None;
flow_stats_action_union_t_swigregister = _p4pd.flow_stats_action_union_t_swigregister
flow_stats_action_union_t_swigregister(flow_stats_action_union_t)

class flow_stats_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flow_stats_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flow_stats_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.flow_stats_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.flow_stats_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.flow_stats_actiondata_actionid_get, _p4pd.flow_stats_actiondata_actionid_set)
    __swig_setmethods__["flow_stats_action_u"] = _p4pd.flow_stats_actiondata_flow_stats_action_u_set
    __swig_getmethods__["flow_stats_action_u"] = _p4pd.flow_stats_actiondata_flow_stats_action_u_get
    if _newclass:flow_stats_action_u = _swig_property(_p4pd.flow_stats_actiondata_flow_stats_action_u_get, _p4pd.flow_stats_actiondata_flow_stats_action_u_set)
    def __init__(self): 
        this = _p4pd.new_flow_stats_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_flow_stats_actiondata
    __del__ = lambda self : None;
flow_stats_actiondata_swigregister = _p4pd.flow_stats_actiondata_swigregister
flow_stats_actiondata_swigregister(flow_stats_actiondata)

class ingress_policer_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["policer_metadata_ingress_policer_index"] = _p4pd.ingress_policer_action_swkey_t_policer_metadata_ingress_policer_index_set
    __swig_getmethods__["policer_metadata_ingress_policer_index"] = _p4pd.ingress_policer_action_swkey_t_policer_metadata_ingress_policer_index_get
    if _newclass:policer_metadata_ingress_policer_index = _swig_property(_p4pd.ingress_policer_action_swkey_t_policer_metadata_ingress_policer_index_get, _p4pd.ingress_policer_action_swkey_t_policer_metadata_ingress_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_action_swkey_t
    __del__ = lambda self : None;
ingress_policer_action_swkey_t_swigregister = _p4pd.ingress_policer_action_swkey_t_swigregister
ingress_policer_action_swkey_t_swigregister(ingress_policer_action_swkey_t)

INGRESS_POLICER_ACTION_INGRESS_POLICER_ACTION_ID = _p4pd.INGRESS_POLICER_ACTION_INGRESS_POLICER_ACTION_ID
INGRESS_POLICER_ACTION_MAX_ID = _p4pd.INGRESS_POLICER_ACTION_MAX_ID
class ingress_policer_action_ingress_policer_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_action_ingress_policer_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_action_ingress_policer_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["marking_overwrite"] = _p4pd.ingress_policer_action_ingress_policer_action_t_marking_overwrite_set
    __swig_getmethods__["marking_overwrite"] = _p4pd.ingress_policer_action_ingress_policer_action_t_marking_overwrite_get
    if _newclass:marking_overwrite = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_marking_overwrite_get, _p4pd.ingress_policer_action_ingress_policer_action_t_marking_overwrite_set)
    __swig_setmethods__["cos_en"] = _p4pd.ingress_policer_action_ingress_policer_action_t_cos_en_set
    __swig_getmethods__["cos_en"] = _p4pd.ingress_policer_action_ingress_policer_action_t_cos_en_get
    if _newclass:cos_en = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_cos_en_get, _p4pd.ingress_policer_action_ingress_policer_action_t_cos_en_set)
    __swig_setmethods__["cos"] = _p4pd.ingress_policer_action_ingress_policer_action_t_cos_set
    __swig_getmethods__["cos"] = _p4pd.ingress_policer_action_ingress_policer_action_t_cos_get
    if _newclass:cos = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_cos_get, _p4pd.ingress_policer_action_ingress_policer_action_t_cos_set)
    __swig_setmethods__["dscp_en"] = _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_en_set
    __swig_getmethods__["dscp_en"] = _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_en_get
    if _newclass:dscp_en = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_dscp_en_get, _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_en_set)
    __swig_setmethods__["dscp"] = _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_set
    __swig_getmethods__["dscp"] = _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_get
    if _newclass:dscp = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_dscp_get, _p4pd.ingress_policer_action_ingress_policer_action_t_dscp_set)
    __swig_setmethods__["permitted_packets"] = _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_packets_set
    __swig_getmethods__["permitted_packets"] = _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_packets_get
    if _newclass:permitted_packets = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_permitted_packets_get, _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_packets_set)
    __swig_setmethods__["permitted_bytes"] = _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_bytes_set
    __swig_getmethods__["permitted_bytes"] = _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_bytes_get
    if _newclass:permitted_bytes = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_permitted_bytes_get, _p4pd.ingress_policer_action_ingress_policer_action_t_permitted_bytes_set)
    __swig_setmethods__["denied_packets"] = _p4pd.ingress_policer_action_ingress_policer_action_t_denied_packets_set
    __swig_getmethods__["denied_packets"] = _p4pd.ingress_policer_action_ingress_policer_action_t_denied_packets_get
    if _newclass:denied_packets = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_denied_packets_get, _p4pd.ingress_policer_action_ingress_policer_action_t_denied_packets_set)
    __swig_setmethods__["denied_bytes"] = _p4pd.ingress_policer_action_ingress_policer_action_t_denied_bytes_set
    __swig_getmethods__["denied_bytes"] = _p4pd.ingress_policer_action_ingress_policer_action_t_denied_bytes_get
    if _newclass:denied_bytes = _swig_property(_p4pd.ingress_policer_action_ingress_policer_action_t_denied_bytes_get, _p4pd.ingress_policer_action_ingress_policer_action_t_denied_bytes_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_action_ingress_policer_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_action_ingress_policer_action_t
    __del__ = lambda self : None;
ingress_policer_action_ingress_policer_action_t_swigregister = _p4pd.ingress_policer_action_ingress_policer_action_t_swigregister
ingress_policer_action_ingress_policer_action_t_swigregister(ingress_policer_action_ingress_policer_action_t)

class ingress_policer_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ingress_policer_action_ingress_policer_action"] = _p4pd.ingress_policer_action_action_union_t_ingress_policer_action_ingress_policer_action_set
    __swig_getmethods__["ingress_policer_action_ingress_policer_action"] = _p4pd.ingress_policer_action_action_union_t_ingress_policer_action_ingress_policer_action_get
    if _newclass:ingress_policer_action_ingress_policer_action = _swig_property(_p4pd.ingress_policer_action_action_union_t_ingress_policer_action_ingress_policer_action_get, _p4pd.ingress_policer_action_action_union_t_ingress_policer_action_ingress_policer_action_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_action_action_union_t
    __del__ = lambda self : None;
ingress_policer_action_action_union_t_swigregister = _p4pd.ingress_policer_action_action_union_t_swigregister
ingress_policer_action_action_union_t_swigregister(ingress_policer_action_action_union_t)

class ingress_policer_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ingress_policer_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ingress_policer_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ingress_policer_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ingress_policer_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ingress_policer_action_actiondata_actionid_get, _p4pd.ingress_policer_action_actiondata_actionid_set)
    __swig_setmethods__["ingress_policer_action_action_u"] = _p4pd.ingress_policer_action_actiondata_ingress_policer_action_action_u_set
    __swig_getmethods__["ingress_policer_action_action_u"] = _p4pd.ingress_policer_action_actiondata_ingress_policer_action_action_u_get
    if _newclass:ingress_policer_action_action_u = _swig_property(_p4pd.ingress_policer_action_actiondata_ingress_policer_action_action_u_get, _p4pd.ingress_policer_action_actiondata_ingress_policer_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ingress_policer_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ingress_policer_action_actiondata
    __del__ = lambda self : None;
ingress_policer_action_actiondata_swigregister = _p4pd.ingress_policer_action_actiondata_swigregister
ingress_policer_action_actiondata_swigregister(ingress_policer_action_actiondata)

class ddos_src_vf_policer_action_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_action_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_action_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_src_vf_policer_idx"] = _p4pd.ddos_src_vf_policer_action_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_src_vf_policer_idx"] = _p4pd.ddos_src_vf_policer_action_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_get
    if _newclass:ddos_metadata_ddos_src_vf_policer_idx = _swig_property(_p4pd.ddos_src_vf_policer_action_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_get, _p4pd.ddos_src_vf_policer_action_swkey_t_ddos_metadata_ddos_src_vf_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_action_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_action_swkey_t
    __del__ = lambda self : None;
ddos_src_vf_policer_action_swkey_t_swigregister = _p4pd.ddos_src_vf_policer_action_swkey_t_swigregister
ddos_src_vf_policer_action_swkey_t_swigregister(ddos_src_vf_policer_action_swkey_t)

DDOS_SRC_VF_POLICER_ACTION_NOP_ID = _p4pd.DDOS_SRC_VF_POLICER_ACTION_NOP_ID
DDOS_SRC_VF_POLICER_ACTION_DDOS_SRC_VF_POLICER_ACTION_ID = _p4pd.DDOS_SRC_VF_POLICER_ACTION_DDOS_SRC_VF_POLICER_ACTION_ID
DDOS_SRC_VF_POLICER_ACTION_MAX_ID = _p4pd.DDOS_SRC_VF_POLICER_ACTION_MAX_ID
class ddos_src_vf_policer_action_ddos_src_vf_policer_action_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_action_ddos_src_vf_policer_action_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_action_ddos_src_vf_policer_action_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_vf_policer_saved_color"] = _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_saved_color_set
    __swig_getmethods__["ddos_src_vf_policer_saved_color"] = _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_saved_color_get
    if _newclass:ddos_src_vf_policer_saved_color = _swig_property(_p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_saved_color_get, _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_saved_color_set)
    __swig_setmethods__["ddos_src_vf_policer_dropped_packets"] = _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_dropped_packets_set
    __swig_getmethods__["ddos_src_vf_policer_dropped_packets"] = _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_dropped_packets_get
    if _newclass:ddos_src_vf_policer_dropped_packets = _swig_property(_p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_dropped_packets_get, _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_ddos_src_vf_policer_dropped_packets_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_action_ddos_src_vf_policer_action_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_action_ddos_src_vf_policer_action_t
    __del__ = lambda self : None;
ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_swigregister = _p4pd.ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_swigregister
ddos_src_vf_policer_action_ddos_src_vf_policer_action_t_swigregister(ddos_src_vf_policer_action_ddos_src_vf_policer_action_t)

class ddos_src_vf_policer_action_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_action_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_action_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_vf_policer_action_ddos_src_vf_policer_action"] = _p4pd.ddos_src_vf_policer_action_action_union_t_ddos_src_vf_policer_action_ddos_src_vf_policer_action_set
    __swig_getmethods__["ddos_src_vf_policer_action_ddos_src_vf_policer_action"] = _p4pd.ddos_src_vf_policer_action_action_union_t_ddos_src_vf_policer_action_ddos_src_vf_policer_action_get
    if _newclass:ddos_src_vf_policer_action_ddos_src_vf_policer_action = _swig_property(_p4pd.ddos_src_vf_policer_action_action_union_t_ddos_src_vf_policer_action_ddos_src_vf_policer_action_get, _p4pd.ddos_src_vf_policer_action_action_union_t_ddos_src_vf_policer_action_ddos_src_vf_policer_action_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_action_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_action_action_union_t
    __del__ = lambda self : None;
ddos_src_vf_policer_action_action_union_t_swigregister = _p4pd.ddos_src_vf_policer_action_action_union_t_swigregister
ddos_src_vf_policer_action_action_union_t_swigregister(ddos_src_vf_policer_action_action_union_t)

class ddos_src_vf_policer_action_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_policer_action_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_policer_action_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_vf_policer_action_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_vf_policer_action_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_vf_policer_action_actiondata_actionid_get, _p4pd.ddos_src_vf_policer_action_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_vf_policer_action_action_u"] = _p4pd.ddos_src_vf_policer_action_actiondata_ddos_src_vf_policer_action_action_u_set
    __swig_getmethods__["ddos_src_vf_policer_action_action_u"] = _p4pd.ddos_src_vf_policer_action_actiondata_ddos_src_vf_policer_action_action_u_get
    if _newclass:ddos_src_vf_policer_action_action_u = _swig_property(_p4pd.ddos_src_vf_policer_action_actiondata_ddos_src_vf_policer_action_action_u_get, _p4pd.ddos_src_vf_policer_action_actiondata_ddos_src_vf_policer_action_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_policer_action_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_policer_action_actiondata
    __del__ = lambda self : None;
ddos_src_vf_policer_action_actiondata_swigregister = _p4pd.ddos_src_vf_policer_action_actiondata_swigregister
ddos_src_vf_policer_action_actiondata_swigregister(ddos_src_vf_policer_action_actiondata)

class tunnel_decap_copy_inner_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_copy_inner_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_copy_inner_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_udp_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_udp_valid_set
    __swig_getmethods__["inner_udp_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_udp_valid_get
    if _newclass:inner_udp_valid = _swig_property(_p4pd.tunnel_decap_copy_inner_swkey_t_inner_udp_valid_get, _p4pd.tunnel_decap_copy_inner_swkey_t_inner_udp_valid_set)
    __swig_setmethods__["inner_ipv4_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv4_valid_set
    __swig_getmethods__["inner_ipv4_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv4_valid_get
    if _newclass:inner_ipv4_valid = _swig_property(_p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv4_valid_get, _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv4_valid_set)
    __swig_setmethods__["inner_ipv6_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv6_valid_set
    __swig_getmethods__["inner_ipv6_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv6_valid_get
    if _newclass:inner_ipv6_valid = _swig_property(_p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv6_valid_get, _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ipv6_valid_set)
    __swig_setmethods__["inner_ethernet_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ethernet_valid_set
    __swig_getmethods__["inner_ethernet_valid"] = _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ethernet_valid_get
    if _newclass:inner_ethernet_valid = _swig_property(_p4pd.tunnel_decap_copy_inner_swkey_t_inner_ethernet_valid_get, _p4pd.tunnel_decap_copy_inner_swkey_t_inner_ethernet_valid_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_copy_inner_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_copy_inner_swkey_t
    __del__ = lambda self : None;
tunnel_decap_copy_inner_swkey_t_swigregister = _p4pd.tunnel_decap_copy_inner_swkey_t_swigregister
tunnel_decap_copy_inner_swkey_t_swigregister(tunnel_decap_copy_inner_swkey_t)

TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV4_UDP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV4_UDP_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV4_OTHER_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV4_OTHER_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV6_UDP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV6_UDP_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV6_OTHER_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_IPV6_OTHER_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV4_UDP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV4_UDP_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV4_OTHER_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV4_OTHER_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV6_UDP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV6_UDP_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV6_OTHER_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_IPV6_OTHER_ID
TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_NON_IP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_COPY_INNER_ETH_NON_IP_ID
TUNNEL_DECAP_COPY_INNER_NOP_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_NOP_ID
TUNNEL_DECAP_COPY_INNER_MAX_ID = _p4pd.TUNNEL_DECAP_COPY_INNER_MAX_ID
class tunnel_decap_copy_inner_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_copy_inner_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_copy_inner_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_copy_inner_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_copy_inner_action_union_t
    __del__ = lambda self : None;
tunnel_decap_copy_inner_action_union_t_swigregister = _p4pd.tunnel_decap_copy_inner_action_union_t_swigregister
tunnel_decap_copy_inner_action_union_t_swigregister(tunnel_decap_copy_inner_action_union_t)

class tunnel_decap_copy_inner_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_decap_copy_inner_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_decap_copy_inner_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tunnel_decap_copy_inner_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tunnel_decap_copy_inner_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tunnel_decap_copy_inner_actiondata_actionid_get, _p4pd.tunnel_decap_copy_inner_actiondata_actionid_set)
    __swig_setmethods__["tunnel_decap_copy_inner_action_u"] = _p4pd.tunnel_decap_copy_inner_actiondata_tunnel_decap_copy_inner_action_u_set
    __swig_getmethods__["tunnel_decap_copy_inner_action_u"] = _p4pd.tunnel_decap_copy_inner_actiondata_tunnel_decap_copy_inner_action_u_get
    if _newclass:tunnel_decap_copy_inner_action_u = _swig_property(_p4pd.tunnel_decap_copy_inner_actiondata_tunnel_decap_copy_inner_action_u_get, _p4pd.tunnel_decap_copy_inner_actiondata_tunnel_decap_copy_inner_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_decap_copy_inner_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_decap_copy_inner_actiondata
    __del__ = lambda self : None;
tunnel_decap_copy_inner_actiondata_swigregister = _p4pd.tunnel_decap_copy_inner_actiondata_swigregister
tunnel_decap_copy_inner_actiondata_swigregister(tunnel_decap_copy_inner_actiondata)

class compute_checksum_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compute_checksum_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compute_checksum_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tcp_valid"] = _p4pd.compute_checksum_swkey_t_tcp_valid_set
    __swig_getmethods__["tcp_valid"] = _p4pd.compute_checksum_swkey_t_tcp_valid_get
    if _newclass:tcp_valid = _swig_property(_p4pd.compute_checksum_swkey_t_tcp_valid_get, _p4pd.compute_checksum_swkey_t_tcp_valid_set)
    __swig_setmethods__["inner_udp_valid"] = _p4pd.compute_checksum_swkey_t_inner_udp_valid_set
    __swig_getmethods__["inner_udp_valid"] = _p4pd.compute_checksum_swkey_t_inner_udp_valid_get
    if _newclass:inner_udp_valid = _swig_property(_p4pd.compute_checksum_swkey_t_inner_udp_valid_get, _p4pd.compute_checksum_swkey_t_inner_udp_valid_set)
    __swig_setmethods__["inner_ipv4_valid"] = _p4pd.compute_checksum_swkey_t_inner_ipv4_valid_set
    __swig_getmethods__["inner_ipv4_valid"] = _p4pd.compute_checksum_swkey_t_inner_ipv4_valid_get
    if _newclass:inner_ipv4_valid = _swig_property(_p4pd.compute_checksum_swkey_t_inner_ipv4_valid_get, _p4pd.compute_checksum_swkey_t_inner_ipv4_valid_set)
    __swig_setmethods__["inner_ipv6_valid"] = _p4pd.compute_checksum_swkey_t_inner_ipv6_valid_set
    __swig_getmethods__["inner_ipv6_valid"] = _p4pd.compute_checksum_swkey_t_inner_ipv6_valid_get
    if _newclass:inner_ipv6_valid = _swig_property(_p4pd.compute_checksum_swkey_t_inner_ipv6_valid_get, _p4pd.compute_checksum_swkey_t_inner_ipv6_valid_set)
    __swig_setmethods__["udp_valid"] = _p4pd.compute_checksum_swkey_t_udp_valid_set
    __swig_getmethods__["udp_valid"] = _p4pd.compute_checksum_swkey_t_udp_valid_get
    if _newclass:udp_valid = _swig_property(_p4pd.compute_checksum_swkey_t_udp_valid_get, _p4pd.compute_checksum_swkey_t_udp_valid_set)
    __swig_setmethods__["ipv4_valid"] = _p4pd.compute_checksum_swkey_t_ipv4_valid_set
    __swig_getmethods__["ipv4_valid"] = _p4pd.compute_checksum_swkey_t_ipv4_valid_get
    if _newclass:ipv4_valid = _swig_property(_p4pd.compute_checksum_swkey_t_ipv4_valid_get, _p4pd.compute_checksum_swkey_t_ipv4_valid_set)
    __swig_setmethods__["ipv6_valid"] = _p4pd.compute_checksum_swkey_t_ipv6_valid_set
    __swig_getmethods__["ipv6_valid"] = _p4pd.compute_checksum_swkey_t_ipv6_valid_get
    if _newclass:ipv6_valid = _swig_property(_p4pd.compute_checksum_swkey_t_ipv6_valid_get, _p4pd.compute_checksum_swkey_t_ipv6_valid_set)
    __swig_setmethods__["entry_inactive_compute_checksum"] = _p4pd.compute_checksum_swkey_t_entry_inactive_compute_checksum_set
    __swig_getmethods__["entry_inactive_compute_checksum"] = _p4pd.compute_checksum_swkey_t_entry_inactive_compute_checksum_get
    if _newclass:entry_inactive_compute_checksum = _swig_property(_p4pd.compute_checksum_swkey_t_entry_inactive_compute_checksum_get, _p4pd.compute_checksum_swkey_t_entry_inactive_compute_checksum_set)
    def __init__(self): 
        this = _p4pd.new_compute_checksum_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_compute_checksum_swkey_t
    __del__ = lambda self : None;
compute_checksum_swkey_t_swigregister = _p4pd.compute_checksum_swkey_t_swigregister
compute_checksum_swkey_t_swigregister(compute_checksum_swkey_t)

class compute_checksum_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compute_checksum_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compute_checksum_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tcp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_tcp_valid_mask_set
    __swig_getmethods__["tcp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_tcp_valid_mask_get
    if _newclass:tcp_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_tcp_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_tcp_valid_mask_set)
    __swig_setmethods__["inner_udp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_udp_valid_mask_set
    __swig_getmethods__["inner_udp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_udp_valid_mask_get
    if _newclass:inner_udp_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_inner_udp_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_inner_udp_valid_mask_set)
    __swig_setmethods__["inner_ipv4_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_ipv4_valid_mask_set
    __swig_getmethods__["inner_ipv4_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_ipv4_valid_mask_get
    if _newclass:inner_ipv4_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_inner_ipv4_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_inner_ipv4_valid_mask_set)
    __swig_setmethods__["inner_ipv6_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_ipv6_valid_mask_set
    __swig_getmethods__["inner_ipv6_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_inner_ipv6_valid_mask_get
    if _newclass:inner_ipv6_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_inner_ipv6_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_inner_ipv6_valid_mask_set)
    __swig_setmethods__["udp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_udp_valid_mask_set
    __swig_getmethods__["udp_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_udp_valid_mask_get
    if _newclass:udp_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_udp_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_udp_valid_mask_set)
    __swig_setmethods__["ipv4_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_ipv4_valid_mask_set
    __swig_getmethods__["ipv4_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_ipv4_valid_mask_get
    if _newclass:ipv4_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_ipv4_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_ipv4_valid_mask_set)
    __swig_setmethods__["ipv6_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_ipv6_valid_mask_set
    __swig_getmethods__["ipv6_valid_mask"] = _p4pd.compute_checksum_swkey_mask_t_ipv6_valid_mask_get
    if _newclass:ipv6_valid_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_ipv6_valid_mask_get, _p4pd.compute_checksum_swkey_mask_t_ipv6_valid_mask_set)
    __swig_setmethods__["entry_inactive_compute_checksum_mask"] = _p4pd.compute_checksum_swkey_mask_t_entry_inactive_compute_checksum_mask_set
    __swig_getmethods__["entry_inactive_compute_checksum_mask"] = _p4pd.compute_checksum_swkey_mask_t_entry_inactive_compute_checksum_mask_get
    if _newclass:entry_inactive_compute_checksum_mask = _swig_property(_p4pd.compute_checksum_swkey_mask_t_entry_inactive_compute_checksum_mask_get, _p4pd.compute_checksum_swkey_mask_t_entry_inactive_compute_checksum_mask_set)
    def __init__(self): 
        this = _p4pd.new_compute_checksum_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_compute_checksum_swkey_mask_t
    __del__ = lambda self : None;
compute_checksum_swkey_mask_t_swigregister = _p4pd.compute_checksum_swkey_mask_t_swigregister
compute_checksum_swkey_mask_t_swigregister(compute_checksum_swkey_mask_t)

COMPUTE_CHECKSUM_COMPUTE_CHECKSUM1_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM1_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM2_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM2_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM3_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM3_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM4_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM4_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM5_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM5_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM6_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM6_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM7_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM7_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM8_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM8_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM9_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM9_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM10_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM10_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM11_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM11_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM12_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM12_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM13_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM13_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM14_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM14_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM15_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM15_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM16_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM16_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM17_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM17_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM18_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM18_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM19_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM19_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM20_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM20_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM21_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM21_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM22_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM22_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM23_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM23_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM24_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM24_ID
COMPUTE_CHECKSUM_COMPUTE_CHECKSUM25_ID = _p4pd.COMPUTE_CHECKSUM_COMPUTE_CHECKSUM25_ID
COMPUTE_CHECKSUM_MAX_ID = _p4pd.COMPUTE_CHECKSUM_MAX_ID
class compute_checksum_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compute_checksum_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compute_checksum_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_compute_checksum_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_compute_checksum_action_union_t
    __del__ = lambda self : None;
compute_checksum_action_union_t_swigregister = _p4pd.compute_checksum_action_union_t_swigregister
compute_checksum_action_union_t_swigregister(compute_checksum_action_union_t)

class compute_checksum_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compute_checksum_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compute_checksum_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.compute_checksum_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.compute_checksum_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.compute_checksum_actiondata_actionid_get, _p4pd.compute_checksum_actiondata_actionid_set)
    __swig_setmethods__["compute_checksum_action_u"] = _p4pd.compute_checksum_actiondata_compute_checksum_action_u_set
    __swig_getmethods__["compute_checksum_action_u"] = _p4pd.compute_checksum_actiondata_compute_checksum_action_u_get
    if _newclass:compute_checksum_action_u = _swig_property(_p4pd.compute_checksum_actiondata_compute_checksum_action_u_get, _p4pd.compute_checksum_actiondata_compute_checksum_action_u_set)
    def __init__(self): 
        this = _p4pd.new_compute_checksum_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_compute_checksum_actiondata
    __del__ = lambda self : None;
compute_checksum_actiondata_swigregister = _p4pd.compute_checksum_actiondata_swigregister
compute_checksum_actiondata_swigregister(compute_checksum_actiondata)

class registered_macs_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dstMacAddr"] = _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dstMacAddr"] = _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_get
    if _newclass:flow_lkp_metadata_lkp_dstMacAddr = _swig_property(_p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_get, _p4pd.registered_macs_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_set)
    __swig_setmethods__["entry_inactive_registered_macs"] = _p4pd.registered_macs_swkey_t_entry_inactive_registered_macs_set
    __swig_getmethods__["entry_inactive_registered_macs"] = _p4pd.registered_macs_swkey_t_entry_inactive_registered_macs_get
    if _newclass:entry_inactive_registered_macs = _swig_property(_p4pd.registered_macs_swkey_t_entry_inactive_registered_macs_get, _p4pd.registered_macs_swkey_t_entry_inactive_registered_macs_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_swkey_t
    __del__ = lambda self : None;
registered_macs_swkey_t_swigregister = _p4pd.registered_macs_swkey_t_swigregister
registered_macs_swkey_t_swigregister(registered_macs_swkey_t)

REGISTERED_MACS_REGISTERED_MACS_ID = _p4pd.REGISTERED_MACS_REGISTERED_MACS_ID
REGISTERED_MACS_MAX_ID = _p4pd.REGISTERED_MACS_MAX_ID
class registered_macs_registered_macs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_registered_macs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_registered_macs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.registered_macs_registered_macs_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.registered_macs_registered_macs_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.registered_macs_registered_macs_t_dst_lport_get, _p4pd.registered_macs_registered_macs_t_dst_lport_set)
    __swig_setmethods__["multicast_en"] = _p4pd.registered_macs_registered_macs_t_multicast_en_set
    __swig_getmethods__["multicast_en"] = _p4pd.registered_macs_registered_macs_t_multicast_en_get
    if _newclass:multicast_en = _swig_property(_p4pd.registered_macs_registered_macs_t_multicast_en_get, _p4pd.registered_macs_registered_macs_t_multicast_en_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_registered_macs_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_registered_macs_t
    __del__ = lambda self : None;
registered_macs_registered_macs_t_swigregister = _p4pd.registered_macs_registered_macs_t_swigregister
registered_macs_registered_macs_t_swigregister(registered_macs_registered_macs_t)

class registered_macs_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["registered_macs_registered_macs"] = _p4pd.registered_macs_action_union_t_registered_macs_registered_macs_set
    __swig_getmethods__["registered_macs_registered_macs"] = _p4pd.registered_macs_action_union_t_registered_macs_registered_macs_get
    if _newclass:registered_macs_registered_macs = _swig_property(_p4pd.registered_macs_action_union_t_registered_macs_registered_macs_get, _p4pd.registered_macs_action_union_t_registered_macs_registered_macs_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_action_union_t
    __del__ = lambda self : None;
registered_macs_action_union_t_swigregister = _p4pd.registered_macs_action_union_t_swigregister
registered_macs_action_union_t_swigregister(registered_macs_action_union_t)

class registered_macs_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.registered_macs_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.registered_macs_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.registered_macs_actiondata_actionid_get, _p4pd.registered_macs_actiondata_actionid_set)
    __swig_setmethods__["registered_macs_action_u"] = _p4pd.registered_macs_actiondata_registered_macs_action_u_set
    __swig_getmethods__["registered_macs_action_u"] = _p4pd.registered_macs_actiondata_registered_macs_action_u_get
    if _newclass:registered_macs_action_u = _swig_property(_p4pd.registered_macs_actiondata_registered_macs_action_u_get, _p4pd.registered_macs_actiondata_registered_macs_action_u_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_actiondata
    __del__ = lambda self : None;
registered_macs_actiondata_swigregister = _p4pd.registered_macs_actiondata_swigregister
registered_macs_actiondata_swigregister(registered_macs_actiondata)

class copp_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["copp_metadata_policer_index"] = _p4pd.copp_swkey_t_copp_metadata_policer_index_set
    __swig_getmethods__["copp_metadata_policer_index"] = _p4pd.copp_swkey_t_copp_metadata_policer_index_get
    if _newclass:copp_metadata_policer_index = _swig_property(_p4pd.copp_swkey_t_copp_metadata_policer_index_get, _p4pd.copp_swkey_t_copp_metadata_policer_index_set)
    def __init__(self): 
        this = _p4pd.new_copp_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_swkey_t
    __del__ = lambda self : None;
copp_swkey_t_swigregister = _p4pd.copp_swkey_t_swigregister
copp_swkey_t_swigregister(copp_swkey_t)

COPP_EXECUTE_COPP_ID = _p4pd.COPP_EXECUTE_COPP_ID
COPP_MAX_ID = _p4pd.COPP_MAX_ID
class copp_execute_copp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_execute_copp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_execute_copp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.copp_execute_copp_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.copp_execute_copp_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.copp_execute_copp_t_entry_valid_get, _p4pd.copp_execute_copp_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.copp_execute_copp_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.copp_execute_copp_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.copp_execute_copp_t_pkt_rate_get, _p4pd.copp_execute_copp_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.copp_execute_copp_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.copp_execute_copp_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.copp_execute_copp_t_rlimit_en_get, _p4pd.copp_execute_copp_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.copp_execute_copp_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.copp_execute_copp_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.copp_execute_copp_t_rlimit_prof_get, _p4pd.copp_execute_copp_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.copp_execute_copp_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.copp_execute_copp_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.copp_execute_copp_t_color_aware_get, _p4pd.copp_execute_copp_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.copp_execute_copp_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.copp_execute_copp_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.copp_execute_copp_t_rsvd_get, _p4pd.copp_execute_copp_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.copp_execute_copp_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.copp_execute_copp_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.copp_execute_copp_t_axi_wr_pend_get, _p4pd.copp_execute_copp_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.copp_execute_copp_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.copp_execute_copp_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.copp_execute_copp_t_burst_get, _p4pd.copp_execute_copp_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.copp_execute_copp_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.copp_execute_copp_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.copp_execute_copp_t_rate_get, _p4pd.copp_execute_copp_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.copp_execute_copp_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.copp_execute_copp_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.copp_execute_copp_t_tbkt_get, _p4pd.copp_execute_copp_t_tbkt_set)
    def __init__(self): 
        this = _p4pd.new_copp_execute_copp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_execute_copp_t
    __del__ = lambda self : None;
copp_execute_copp_t_swigregister = _p4pd.copp_execute_copp_t_swigregister
copp_execute_copp_t_swigregister(copp_execute_copp_t)

class copp_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["copp_execute_copp"] = _p4pd.copp_action_union_t_copp_execute_copp_set
    __swig_getmethods__["copp_execute_copp"] = _p4pd.copp_action_union_t_copp_execute_copp_get
    if _newclass:copp_execute_copp = _swig_property(_p4pd.copp_action_union_t_copp_execute_copp_get, _p4pd.copp_action_union_t_copp_execute_copp_set)
    def __init__(self): 
        this = _p4pd.new_copp_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_action_union_t
    __del__ = lambda self : None;
copp_action_union_t_swigregister = _p4pd.copp_action_union_t_swigregister
copp_action_union_t_swigregister(copp_action_union_t)

class copp_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, copp_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, copp_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.copp_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.copp_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.copp_actiondata_actionid_get, _p4pd.copp_actiondata_actionid_set)
    __swig_setmethods__["copp_action_u"] = _p4pd.copp_actiondata_copp_action_u_set
    __swig_getmethods__["copp_action_u"] = _p4pd.copp_actiondata_copp_action_u_get
    if _newclass:copp_action_u = _swig_property(_p4pd.copp_actiondata_copp_action_u_get, _p4pd.copp_actiondata_copp_action_u_set)
    def __init__(self): 
        this = _p4pd.new_copp_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_copp_actiondata
    __del__ = lambda self : None;
copp_actiondata_swigregister = _p4pd.copp_actiondata_swigregister
copp_actiondata_swigregister(copp_actiondata)

class ddos_service_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dst_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dst_get
    if _newclass:flow_lkp_metadata_lkp_dst = _swig_property(_p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dst_get, _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dst_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dport_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dport_get
    if _newclass:flow_lkp_metadata_lkp_dport = _swig_property(_p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dport_get, _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_dport_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_proto_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_proto_get
    if _newclass:flow_lkp_metadata_lkp_proto = _swig_property(_p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_proto_get, _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_proto_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.ddos_service_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["entry_inactive_ddos_service"] = _p4pd.ddos_service_swkey_t_entry_inactive_ddos_service_set
    __swig_getmethods__["entry_inactive_ddos_service"] = _p4pd.ddos_service_swkey_t_entry_inactive_ddos_service_get
    if _newclass:entry_inactive_ddos_service = _swig_property(_p4pd.ddos_service_swkey_t_entry_inactive_ddos_service_get, _p4pd.ddos_service_swkey_t_entry_inactive_ddos_service_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_swkey_t
    __del__ = lambda self : None;
ddos_service_swkey_t_swigregister = _p4pd.ddos_service_swkey_t_swigregister
ddos_service_swkey_t_swigregister(ddos_service_swkey_t)

class ddos_service_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dst_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get
    if _newclass:flow_lkp_metadata_lkp_dst_mask = _swig_property(_p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_get, _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dst_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dport_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get
    if _newclass:flow_lkp_metadata_lkp_dport_mask = _swig_property(_p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_get, _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_dport_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_proto_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get
    if _newclass:flow_lkp_metadata_lkp_proto_mask = _swig_property(_p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_get, _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_proto_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get
    if _newclass:flow_lkp_metadata_lkp_vrf_mask = _swig_property(_p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get, _p4pd.ddos_service_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set)
    __swig_setmethods__["entry_inactive_ddos_service_mask"] = _p4pd.ddos_service_swkey_mask_t_entry_inactive_ddos_service_mask_set
    __swig_getmethods__["entry_inactive_ddos_service_mask"] = _p4pd.ddos_service_swkey_mask_t_entry_inactive_ddos_service_mask_get
    if _newclass:entry_inactive_ddos_service_mask = _swig_property(_p4pd.ddos_service_swkey_mask_t_entry_inactive_ddos_service_mask_get, _p4pd.ddos_service_swkey_mask_t_entry_inactive_ddos_service_mask_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_swkey_mask_t
    __del__ = lambda self : None;
ddos_service_swkey_mask_t_swigregister = _p4pd.ddos_service_swkey_mask_t_swigregister
ddos_service_swkey_mask_t_swigregister(ddos_service_swkey_mask_t)

DDOS_SERVICE_NOP_ID = _p4pd.DDOS_SERVICE_NOP_ID
DDOS_SERVICE_DDOS_SERVICE_HIT_ID = _p4pd.DDOS_SERVICE_DDOS_SERVICE_HIT_ID
DDOS_SERVICE_MAX_ID = _p4pd.DDOS_SERVICE_MAX_ID
class ddos_service_ddos_service_hit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_ddos_service_hit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_ddos_service_hit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_service_base_policer_idx"] = _p4pd.ddos_service_ddos_service_hit_t_ddos_service_base_policer_idx_set
    __swig_getmethods__["ddos_service_base_policer_idx"] = _p4pd.ddos_service_ddos_service_hit_t_ddos_service_base_policer_idx_get
    if _newclass:ddos_service_base_policer_idx = _swig_property(_p4pd.ddos_service_ddos_service_hit_t_ddos_service_base_policer_idx_get, _p4pd.ddos_service_ddos_service_hit_t_ddos_service_base_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_ddos_service_hit_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_ddos_service_hit_t
    __del__ = lambda self : None;
ddos_service_ddos_service_hit_t_swigregister = _p4pd.ddos_service_ddos_service_hit_t_swigregister
ddos_service_ddos_service_hit_t_swigregister(ddos_service_ddos_service_hit_t)

class ddos_service_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_service_ddos_service_hit"] = _p4pd.ddos_service_action_union_t_ddos_service_ddos_service_hit_set
    __swig_getmethods__["ddos_service_ddos_service_hit"] = _p4pd.ddos_service_action_union_t_ddos_service_ddos_service_hit_get
    if _newclass:ddos_service_ddos_service_hit = _swig_property(_p4pd.ddos_service_action_union_t_ddos_service_ddos_service_hit_get, _p4pd.ddos_service_action_union_t_ddos_service_ddos_service_hit_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_action_union_t
    __del__ = lambda self : None;
ddos_service_action_union_t_swigregister = _p4pd.ddos_service_action_union_t_swigregister
ddos_service_action_union_t_swigregister(ddos_service_action_union_t)

class ddos_service_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_service_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_service_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_service_actiondata_actionid_get, _p4pd.ddos_service_actiondata_actionid_set)
    __swig_setmethods__["ddos_service_action_u"] = _p4pd.ddos_service_actiondata_ddos_service_action_u_set
    __swig_getmethods__["ddos_service_action_u"] = _p4pd.ddos_service_actiondata_ddos_service_action_u_get
    if _newclass:ddos_service_action_u = _swig_property(_p4pd.ddos_service_actiondata_ddos_service_action_u_get, _p4pd.ddos_service_actiondata_ddos_service_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_actiondata
    __del__ = lambda self : None;
ddos_service_actiondata_swigregister = _p4pd.ddos_service_actiondata_swigregister
ddos_service_actiondata_swigregister(ddos_service_actiondata)

class ddos_service_policer_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_metadata_ddos_service_policer_idx"] = _p4pd.ddos_service_policer_swkey_t_ddos_metadata_ddos_service_policer_idx_set
    __swig_getmethods__["ddos_metadata_ddos_service_policer_idx"] = _p4pd.ddos_service_policer_swkey_t_ddos_metadata_ddos_service_policer_idx_get
    if _newclass:ddos_metadata_ddos_service_policer_idx = _swig_property(_p4pd.ddos_service_policer_swkey_t_ddos_metadata_ddos_service_policer_idx_get, _p4pd.ddos_service_policer_swkey_t_ddos_metadata_ddos_service_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_swkey_t
    __del__ = lambda self : None;
ddos_service_policer_swkey_t_swigregister = _p4pd.ddos_service_policer_swkey_t_swigregister
ddos_service_policer_swkey_t_swigregister(ddos_service_policer_swkey_t)

DDOS_SERVICE_POLICER_EXECUTE_DDOS_SERVICE_POLICER_ID = _p4pd.DDOS_SERVICE_POLICER_EXECUTE_DDOS_SERVICE_POLICER_ID
DDOS_SERVICE_POLICER_MAX_ID = _p4pd.DDOS_SERVICE_POLICER_MAX_ID
class ddos_service_policer_execute_ddos_service_policer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_execute_ddos_service_policer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_execute_ddos_service_policer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_valid"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid_set
    __swig_getmethods__["entry_valid"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid_get
    if _newclass:entry_valid = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid_set)
    __swig_setmethods__["pkt_rate"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate_set
    __swig_getmethods__["pkt_rate"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate_get
    if _newclass:pkt_rate = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate_set)
    __swig_setmethods__["rlimit_en"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en_set
    __swig_getmethods__["rlimit_en"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en_get
    if _newclass:rlimit_en = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en_set)
    __swig_setmethods__["rlimit_prof"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof_set
    __swig_getmethods__["rlimit_prof"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof_get
    if _newclass:rlimit_prof = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof_set)
    __swig_setmethods__["color_aware"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware_set
    __swig_getmethods__["color_aware"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware_get
    if _newclass:color_aware = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware_set)
    __swig_setmethods__["rsvd"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd_set
    __swig_getmethods__["rsvd"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd_get
    if _newclass:rsvd = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd_set)
    __swig_setmethods__["axi_wr_pend"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend_set
    __swig_getmethods__["axi_wr_pend"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend_get
    if _newclass:axi_wr_pend = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend_set)
    __swig_setmethods__["burst"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst_set
    __swig_getmethods__["burst"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst_get
    if _newclass:burst = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst_set)
    __swig_setmethods__["rate"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate_set
    __swig_getmethods__["rate"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate_get
    if _newclass:rate = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate_set)
    __swig_setmethods__["tbkt"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt_set
    __swig_getmethods__["tbkt"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt_get
    if _newclass:tbkt = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt_set)
    __swig_setmethods__["entry_valid2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid2_set
    __swig_getmethods__["entry_valid2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid2_get
    if _newclass:entry_valid2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_entry_valid2_set)
    __swig_setmethods__["pkt_rate2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate2_set
    __swig_getmethods__["pkt_rate2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate2_get
    if _newclass:pkt_rate2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_pkt_rate2_set)
    __swig_setmethods__["rlimit_en2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en2_set
    __swig_getmethods__["rlimit_en2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en2_get
    if _newclass:rlimit_en2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_en2_set)
    __swig_setmethods__["rlimit_prof2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof2_set
    __swig_getmethods__["rlimit_prof2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof2_get
    if _newclass:rlimit_prof2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rlimit_prof2_set)
    __swig_setmethods__["color_aware2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware2_set
    __swig_getmethods__["color_aware2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware2_get
    if _newclass:color_aware2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_color_aware2_set)
    __swig_setmethods__["rsvd2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd2_set
    __swig_getmethods__["rsvd2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd2_get
    if _newclass:rsvd2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rsvd2_set)
    __swig_setmethods__["axi_wr_pend2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend2_set
    __swig_getmethods__["axi_wr_pend2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend2_get
    if _newclass:axi_wr_pend2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_axi_wr_pend2_set)
    __swig_setmethods__["burst2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst2_set
    __swig_getmethods__["burst2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst2_get
    if _newclass:burst2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_burst2_set)
    __swig_setmethods__["rate2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate2_set
    __swig_getmethods__["rate2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate2_get
    if _newclass:rate2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_rate2_set)
    __swig_setmethods__["tbkt2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt2_set
    __swig_getmethods__["tbkt2"] = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt2_get
    if _newclass:tbkt2 = _swig_property(_p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt2_get, _p4pd.ddos_service_policer_execute_ddos_service_policer_t_tbkt2_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_execute_ddos_service_policer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_execute_ddos_service_policer_t
    __del__ = lambda self : None;
ddos_service_policer_execute_ddos_service_policer_t_swigregister = _p4pd.ddos_service_policer_execute_ddos_service_policer_t_swigregister
ddos_service_policer_execute_ddos_service_policer_t_swigregister(ddos_service_policer_execute_ddos_service_policer_t)

class ddos_service_policer_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_service_policer_execute_ddos_service_policer"] = _p4pd.ddos_service_policer_action_union_t_ddos_service_policer_execute_ddos_service_policer_set
    __swig_getmethods__["ddos_service_policer_execute_ddos_service_policer"] = _p4pd.ddos_service_policer_action_union_t_ddos_service_policer_execute_ddos_service_policer_get
    if _newclass:ddos_service_policer_execute_ddos_service_policer = _swig_property(_p4pd.ddos_service_policer_action_union_t_ddos_service_policer_execute_ddos_service_policer_get, _p4pd.ddos_service_policer_action_union_t_ddos_service_policer_execute_ddos_service_policer_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_action_union_t
    __del__ = lambda self : None;
ddos_service_policer_action_union_t_swigregister = _p4pd.ddos_service_policer_action_union_t_swigregister
ddos_service_policer_action_union_t_swigregister(ddos_service_policer_action_union_t)

class ddos_service_policer_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_service_policer_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_service_policer_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_service_policer_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_service_policer_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_service_policer_actiondata_actionid_get, _p4pd.ddos_service_policer_actiondata_actionid_set)
    __swig_setmethods__["ddos_service_policer_action_u"] = _p4pd.ddos_service_policer_actiondata_ddos_service_policer_action_u_set
    __swig_getmethods__["ddos_service_policer_action_u"] = _p4pd.ddos_service_policer_actiondata_ddos_service_policer_action_u_get
    if _newclass:ddos_service_policer_action_u = _swig_property(_p4pd.ddos_service_policer_actiondata_ddos_service_policer_action_u_get, _p4pd.ddos_service_policer_actiondata_ddos_service_policer_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_service_policer_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_service_policer_actiondata
    __del__ = lambda self : None;
ddos_service_policer_actiondata_swigregister = _p4pd.ddos_service_policer_actiondata_swigregister
ddos_service_policer_actiondata_swigregister(ddos_service_policer_actiondata)

class ddos_src_vf_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_inactive_ddos_src_vf"] = _p4pd.ddos_src_vf_swkey_t_entry_inactive_ddos_src_vf_set
    __swig_getmethods__["entry_inactive_ddos_src_vf"] = _p4pd.ddos_src_vf_swkey_t_entry_inactive_ddos_src_vf_get
    if _newclass:entry_inactive_ddos_src_vf = _swig_property(_p4pd.ddos_src_vf_swkey_t_entry_inactive_ddos_src_vf_get, _p4pd.ddos_src_vf_swkey_t_entry_inactive_ddos_src_vf_set)
    __swig_setmethods__["control_metadata_src_lport"] = _p4pd.ddos_src_vf_swkey_t_control_metadata_src_lport_set
    __swig_getmethods__["control_metadata_src_lport"] = _p4pd.ddos_src_vf_swkey_t_control_metadata_src_lport_get
    if _newclass:control_metadata_src_lport = _swig_property(_p4pd.ddos_src_vf_swkey_t_control_metadata_src_lport_get, _p4pd.ddos_src_vf_swkey_t_control_metadata_src_lport_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_swkey_t
    __del__ = lambda self : None;
ddos_src_vf_swkey_t_swigregister = _p4pd.ddos_src_vf_swkey_t_swigregister
ddos_src_vf_swkey_t_swigregister(ddos_src_vf_swkey_t)

class ddos_src_vf_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_inactive_ddos_src_vf_mask"] = _p4pd.ddos_src_vf_swkey_mask_t_entry_inactive_ddos_src_vf_mask_set
    __swig_getmethods__["entry_inactive_ddos_src_vf_mask"] = _p4pd.ddos_src_vf_swkey_mask_t_entry_inactive_ddos_src_vf_mask_get
    if _newclass:entry_inactive_ddos_src_vf_mask = _swig_property(_p4pd.ddos_src_vf_swkey_mask_t_entry_inactive_ddos_src_vf_mask_get, _p4pd.ddos_src_vf_swkey_mask_t_entry_inactive_ddos_src_vf_mask_set)
    __swig_setmethods__["control_metadata_src_lport_mask"] = _p4pd.ddos_src_vf_swkey_mask_t_control_metadata_src_lport_mask_set
    __swig_getmethods__["control_metadata_src_lport_mask"] = _p4pd.ddos_src_vf_swkey_mask_t_control_metadata_src_lport_mask_get
    if _newclass:control_metadata_src_lport_mask = _swig_property(_p4pd.ddos_src_vf_swkey_mask_t_control_metadata_src_lport_mask_get, _p4pd.ddos_src_vf_swkey_mask_t_control_metadata_src_lport_mask_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_swkey_mask_t
    __del__ = lambda self : None;
ddos_src_vf_swkey_mask_t_swigregister = _p4pd.ddos_src_vf_swkey_mask_t_swigregister
ddos_src_vf_swkey_mask_t_swigregister(ddos_src_vf_swkey_mask_t)

DDOS_SRC_VF_NOP_ID = _p4pd.DDOS_SRC_VF_NOP_ID
DDOS_SRC_VF_DDOS_SRC_VF_HIT_ID = _p4pd.DDOS_SRC_VF_DDOS_SRC_VF_HIT_ID
DDOS_SRC_VF_MAX_ID = _p4pd.DDOS_SRC_VF_MAX_ID
class ddos_src_vf_ddos_src_vf_hit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_ddos_src_vf_hit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_ddos_src_vf_hit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_vf_base_policer_idx"] = _p4pd.ddos_src_vf_ddos_src_vf_hit_t_ddos_src_vf_base_policer_idx_set
    __swig_getmethods__["ddos_src_vf_base_policer_idx"] = _p4pd.ddos_src_vf_ddos_src_vf_hit_t_ddos_src_vf_base_policer_idx_get
    if _newclass:ddos_src_vf_base_policer_idx = _swig_property(_p4pd.ddos_src_vf_ddos_src_vf_hit_t_ddos_src_vf_base_policer_idx_get, _p4pd.ddos_src_vf_ddos_src_vf_hit_t_ddos_src_vf_base_policer_idx_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_ddos_src_vf_hit_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_ddos_src_vf_hit_t
    __del__ = lambda self : None;
ddos_src_vf_ddos_src_vf_hit_t_swigregister = _p4pd.ddos_src_vf_ddos_src_vf_hit_t_swigregister
ddos_src_vf_ddos_src_vf_hit_t_swigregister(ddos_src_vf_ddos_src_vf_hit_t)

class ddos_src_vf_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ddos_src_vf_ddos_src_vf_hit"] = _p4pd.ddos_src_vf_action_union_t_ddos_src_vf_ddos_src_vf_hit_set
    __swig_getmethods__["ddos_src_vf_ddos_src_vf_hit"] = _p4pd.ddos_src_vf_action_union_t_ddos_src_vf_ddos_src_vf_hit_get
    if _newclass:ddos_src_vf_ddos_src_vf_hit = _swig_property(_p4pd.ddos_src_vf_action_union_t_ddos_src_vf_ddos_src_vf_hit_get, _p4pd.ddos_src_vf_action_union_t_ddos_src_vf_ddos_src_vf_hit_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_action_union_t
    __del__ = lambda self : None;
ddos_src_vf_action_union_t_swigregister = _p4pd.ddos_src_vf_action_union_t_swigregister
ddos_src_vf_action_union_t_swigregister(ddos_src_vf_action_union_t)

class ddos_src_vf_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddos_src_vf_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddos_src_vf_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.ddos_src_vf_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.ddos_src_vf_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.ddos_src_vf_actiondata_actionid_get, _p4pd.ddos_src_vf_actiondata_actionid_set)
    __swig_setmethods__["ddos_src_vf_action_u"] = _p4pd.ddos_src_vf_actiondata_ddos_src_vf_action_u_set
    __swig_getmethods__["ddos_src_vf_action_u"] = _p4pd.ddos_src_vf_actiondata_ddos_src_vf_action_u_get
    if _newclass:ddos_src_vf_action_u = _swig_property(_p4pd.ddos_src_vf_actiondata_ddos_src_vf_action_u_get, _p4pd.ddos_src_vf_actiondata_ddos_src_vf_action_u_set)
    def __init__(self): 
        this = _p4pd.new_ddos_src_vf_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_ddos_src_vf_actiondata
    __del__ = lambda self : None;
ddos_src_vf_actiondata_swigregister = _p4pd.ddos_src_vf_actiondata_swigregister
ddos_src_vf_actiondata_swigregister(ddos_src_vf_actiondata)

class registered_macs_otcam_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_otcam_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_otcam_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_vrf_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf"] = _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_vrf_get
    if _newclass:flow_lkp_metadata_lkp_vrf = _swig_property(_p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_vrf_get, _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_vrf_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dstMacAddr"] = _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dstMacAddr"] = _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_get
    if _newclass:flow_lkp_metadata_lkp_dstMacAddr = _swig_property(_p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_get, _p4pd.registered_macs_otcam_swkey_t_flow_lkp_metadata_lkp_dstMacAddr_set)
    __swig_setmethods__["entry_inactive_registered_macs"] = _p4pd.registered_macs_otcam_swkey_t_entry_inactive_registered_macs_set
    __swig_getmethods__["entry_inactive_registered_macs"] = _p4pd.registered_macs_otcam_swkey_t_entry_inactive_registered_macs_get
    if _newclass:entry_inactive_registered_macs = _swig_property(_p4pd.registered_macs_otcam_swkey_t_entry_inactive_registered_macs_get, _p4pd.registered_macs_otcam_swkey_t_entry_inactive_registered_macs_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_otcam_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_otcam_swkey_t
    __del__ = lambda self : None;
registered_macs_otcam_swkey_t_swigregister = _p4pd.registered_macs_otcam_swkey_t_swigregister
registered_macs_otcam_swkey_t_swigregister(registered_macs_otcam_swkey_t)

class registered_macs_otcam_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_otcam_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_otcam_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_vrf_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get
    if _newclass:flow_lkp_metadata_lkp_vrf_mask = _swig_property(_p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_get, _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_vrf_mask_set)
    __swig_setmethods__["flow_lkp_metadata_lkp_dstMacAddr_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_dstMacAddr_mask_set
    __swig_getmethods__["flow_lkp_metadata_lkp_dstMacAddr_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_dstMacAddr_mask_get
    if _newclass:flow_lkp_metadata_lkp_dstMacAddr_mask = _swig_property(_p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_dstMacAddr_mask_get, _p4pd.registered_macs_otcam_swkey_mask_t_flow_lkp_metadata_lkp_dstMacAddr_mask_set)
    __swig_setmethods__["entry_inactive_registered_macs_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_entry_inactive_registered_macs_mask_set
    __swig_getmethods__["entry_inactive_registered_macs_mask"] = _p4pd.registered_macs_otcam_swkey_mask_t_entry_inactive_registered_macs_mask_get
    if _newclass:entry_inactive_registered_macs_mask = _swig_property(_p4pd.registered_macs_otcam_swkey_mask_t_entry_inactive_registered_macs_mask_get, _p4pd.registered_macs_otcam_swkey_mask_t_entry_inactive_registered_macs_mask_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_otcam_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_otcam_swkey_mask_t
    __del__ = lambda self : None;
registered_macs_otcam_swkey_mask_t_swigregister = _p4pd.registered_macs_otcam_swkey_mask_t_swigregister
registered_macs_otcam_swkey_mask_t_swigregister(registered_macs_otcam_swkey_mask_t)

REGISTERED_MACS_OTCAM_REGISTERED_MACS_ID = _p4pd.REGISTERED_MACS_OTCAM_REGISTERED_MACS_ID
REGISTERED_MACS_OTCAM_MAX_ID = _p4pd.REGISTERED_MACS_OTCAM_MAX_ID
class registered_macs_otcam_registered_macs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_otcam_registered_macs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_otcam_registered_macs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_lport"] = _p4pd.registered_macs_otcam_registered_macs_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.registered_macs_otcam_registered_macs_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.registered_macs_otcam_registered_macs_t_dst_lport_get, _p4pd.registered_macs_otcam_registered_macs_t_dst_lport_set)
    __swig_setmethods__["multicast_en"] = _p4pd.registered_macs_otcam_registered_macs_t_multicast_en_set
    __swig_getmethods__["multicast_en"] = _p4pd.registered_macs_otcam_registered_macs_t_multicast_en_get
    if _newclass:multicast_en = _swig_property(_p4pd.registered_macs_otcam_registered_macs_t_multicast_en_get, _p4pd.registered_macs_otcam_registered_macs_t_multicast_en_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_otcam_registered_macs_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_otcam_registered_macs_t
    __del__ = lambda self : None;
registered_macs_otcam_registered_macs_t_swigregister = _p4pd.registered_macs_otcam_registered_macs_t_swigregister
registered_macs_otcam_registered_macs_t_swigregister(registered_macs_otcam_registered_macs_t)

class registered_macs_otcam_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_otcam_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_otcam_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["registered_macs_otcam_registered_macs"] = _p4pd.registered_macs_otcam_action_union_t_registered_macs_otcam_registered_macs_set
    __swig_getmethods__["registered_macs_otcam_registered_macs"] = _p4pd.registered_macs_otcam_action_union_t_registered_macs_otcam_registered_macs_get
    if _newclass:registered_macs_otcam_registered_macs = _swig_property(_p4pd.registered_macs_otcam_action_union_t_registered_macs_otcam_registered_macs_get, _p4pd.registered_macs_otcam_action_union_t_registered_macs_otcam_registered_macs_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_otcam_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_otcam_action_union_t
    __del__ = lambda self : None;
registered_macs_otcam_action_union_t_swigregister = _p4pd.registered_macs_otcam_action_union_t_swigregister
registered_macs_otcam_action_union_t_swigregister(registered_macs_otcam_action_union_t)

class registered_macs_otcam_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, registered_macs_otcam_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, registered_macs_otcam_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.registered_macs_otcam_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.registered_macs_otcam_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.registered_macs_otcam_actiondata_actionid_get, _p4pd.registered_macs_otcam_actiondata_actionid_set)
    __swig_setmethods__["registered_macs_otcam_action_u"] = _p4pd.registered_macs_otcam_actiondata_registered_macs_otcam_action_u_set
    __swig_getmethods__["registered_macs_otcam_action_u"] = _p4pd.registered_macs_otcam_actiondata_registered_macs_otcam_action_u_get
    if _newclass:registered_macs_otcam_action_u = _swig_property(_p4pd.registered_macs_otcam_actiondata_registered_macs_otcam_action_u_get, _p4pd.registered_macs_otcam_actiondata_registered_macs_otcam_action_u_set)
    def __init__(self): 
        this = _p4pd.new_registered_macs_otcam_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_registered_macs_otcam_actiondata
    __del__ = lambda self : None;
registered_macs_otcam_actiondata_swigregister = _p4pd.registered_macs_otcam_actiondata_swigregister
registered_macs_otcam_actiondata_swigregister(registered_macs_otcam_actiondata)

class p4plus_to_p4_2_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_2_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_2_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_2_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_2_swkey_t
    __del__ = lambda self : None;
p4plus_to_p4_2_swkey_t_swigregister = _p4pd.p4plus_to_p4_2_swkey_t_swigregister
p4plus_to_p4_2_swkey_t_swigregister(p4plus_to_p4_2_swkey_t)

P4PLUS_TO_P4_2_F_P4PLUS_TO_P4_2_ID = _p4pd.P4PLUS_TO_P4_2_F_P4PLUS_TO_P4_2_ID
P4PLUS_TO_P4_2_MAX_ID = _p4pd.P4PLUS_TO_P4_2_MAX_ID
class p4plus_to_p4_2_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_2_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_2_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_2_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_2_action_union_t
    __del__ = lambda self : None;
p4plus_to_p4_2_action_union_t_swigregister = _p4pd.p4plus_to_p4_2_action_union_t_swigregister
p4plus_to_p4_2_action_union_t_swigregister(p4plus_to_p4_2_action_union_t)

class p4plus_to_p4_2_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4plus_to_p4_2_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4plus_to_p4_2_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.p4plus_to_p4_2_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.p4plus_to_p4_2_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.p4plus_to_p4_2_actiondata_actionid_get, _p4pd.p4plus_to_p4_2_actiondata_actionid_set)
    __swig_setmethods__["p4plus_to_p4_2_action_u"] = _p4pd.p4plus_to_p4_2_actiondata_p4plus_to_p4_2_action_u_set
    __swig_getmethods__["p4plus_to_p4_2_action_u"] = _p4pd.p4plus_to_p4_2_actiondata_p4plus_to_p4_2_action_u_get
    if _newclass:p4plus_to_p4_2_action_u = _swig_property(_p4pd.p4plus_to_p4_2_actiondata_p4plus_to_p4_2_action_u_get, _p4pd.p4plus_to_p4_2_actiondata_p4plus_to_p4_2_action_u_set)
    def __init__(self): 
        this = _p4pd.new_p4plus_to_p4_2_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4plus_to_p4_2_actiondata
    __del__ = lambda self : None;
p4plus_to_p4_2_actiondata_swigregister = _p4pd.p4plus_to_p4_2_actiondata_swigregister
p4plus_to_p4_2_actiondata_swigregister(p4plus_to_p4_2_actiondata)

class input_properties_otcam_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_otcam_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_otcam_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["capri_intrinsic_lif"] = _p4pd.input_properties_otcam_swkey_t_capri_intrinsic_lif_set
    __swig_getmethods__["capri_intrinsic_lif"] = _p4pd.input_properties_otcam_swkey_t_capri_intrinsic_lif_get
    if _newclass:capri_intrinsic_lif = _swig_property(_p4pd.input_properties_otcam_swkey_t_capri_intrinsic_lif_get, _p4pd.input_properties_otcam_swkey_t_capri_intrinsic_lif_set)
    __swig_setmethods__["vlan_tag_valid"] = _p4pd.input_properties_otcam_swkey_t_vlan_tag_valid_set
    __swig_getmethods__["vlan_tag_valid"] = _p4pd.input_properties_otcam_swkey_t_vlan_tag_valid_get
    if _newclass:vlan_tag_valid = _swig_property(_p4pd.input_properties_otcam_swkey_t_vlan_tag_valid_get, _p4pd.input_properties_otcam_swkey_t_vlan_tag_valid_set)
    __swig_setmethods__["vlan_tag_vid"] = _p4pd.input_properties_otcam_swkey_t_vlan_tag_vid_set
    __swig_getmethods__["vlan_tag_vid"] = _p4pd.input_properties_otcam_swkey_t_vlan_tag_vid_get
    if _newclass:vlan_tag_vid = _swig_property(_p4pd.input_properties_otcam_swkey_t_vlan_tag_vid_get, _p4pd.input_properties_otcam_swkey_t_vlan_tag_vid_set)
    __swig_setmethods__["entry_inactive_input_properties"] = _p4pd.input_properties_otcam_swkey_t_entry_inactive_input_properties_set
    __swig_getmethods__["entry_inactive_input_properties"] = _p4pd.input_properties_otcam_swkey_t_entry_inactive_input_properties_get
    if _newclass:entry_inactive_input_properties = _swig_property(_p4pd.input_properties_otcam_swkey_t_entry_inactive_input_properties_get, _p4pd.input_properties_otcam_swkey_t_entry_inactive_input_properties_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_type_set
    __swig_getmethods__["tunnel_metadata_tunnel_type"] = _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_type_get
    if _newclass:tunnel_metadata_tunnel_type = _swig_property(_p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_type_get, _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_type_set)
    __swig_setmethods__["tunnel_metadata_tunnel_vni"] = _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_vni_set
    __swig_getmethods__["tunnel_metadata_tunnel_vni"] = _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_vni_get
    if _newclass:tunnel_metadata_tunnel_vni = _swig_property(_p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_vni_get, _p4pd.input_properties_otcam_swkey_t_tunnel_metadata_tunnel_vni_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_otcam_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_otcam_swkey_t
    __del__ = lambda self : None;
input_properties_otcam_swkey_t_swigregister = _p4pd.input_properties_otcam_swkey_t_swigregister
input_properties_otcam_swkey_t_swigregister(input_properties_otcam_swkey_t)

class input_properties_otcam_swkey_mask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_otcam_swkey_mask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_otcam_swkey_mask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["capri_intrinsic_lif_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_capri_intrinsic_lif_mask_set
    __swig_getmethods__["capri_intrinsic_lif_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_capri_intrinsic_lif_mask_get
    if _newclass:capri_intrinsic_lif_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_capri_intrinsic_lif_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_capri_intrinsic_lif_mask_set)
    __swig_setmethods__["vlan_tag_valid_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_valid_mask_set
    __swig_getmethods__["vlan_tag_valid_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_valid_mask_get
    if _newclass:vlan_tag_valid_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_valid_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_valid_mask_set)
    __swig_setmethods__["vlan_tag_vid_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_vid_mask_set
    __swig_getmethods__["vlan_tag_vid_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_vid_mask_get
    if _newclass:vlan_tag_vid_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_vid_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_vlan_tag_vid_mask_set)
    __swig_setmethods__["entry_inactive_input_properties_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_entry_inactive_input_properties_mask_set
    __swig_getmethods__["entry_inactive_input_properties_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_entry_inactive_input_properties_mask_get
    if _newclass:entry_inactive_input_properties_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_entry_inactive_input_properties_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_entry_inactive_input_properties_mask_set)
    __swig_setmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set
    __swig_getmethods__["tunnel_metadata_tunnel_type_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get
    if _newclass:tunnel_metadata_tunnel_type_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_type_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_type_mask_set)
    __swig_setmethods__["tunnel_metadata_tunnel_vni_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_vni_mask_set
    __swig_getmethods__["tunnel_metadata_tunnel_vni_mask"] = _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_vni_mask_get
    if _newclass:tunnel_metadata_tunnel_vni_mask = _swig_property(_p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_vni_mask_get, _p4pd.input_properties_otcam_swkey_mask_t_tunnel_metadata_tunnel_vni_mask_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_otcam_swkey_mask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_otcam_swkey_mask_t
    __del__ = lambda self : None;
input_properties_otcam_swkey_mask_t_swigregister = _p4pd.input_properties_otcam_swkey_mask_t_swigregister
input_properties_otcam_swkey_mask_t_swigregister(input_properties_otcam_swkey_mask_t)

INPUT_PROPERTIES_OTCAM_INPUT_PROPERTIES_ID = _p4pd.INPUT_PROPERTIES_OTCAM_INPUT_PROPERTIES_ID
INPUT_PROPERTIES_OTCAM_MAX_ID = _p4pd.INPUT_PROPERTIES_OTCAM_MAX_ID
class input_properties_otcam_input_properties_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_otcam_input_properties_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_otcam_input_properties_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vrf"] = _p4pd.input_properties_otcam_input_properties_t_vrf_set
    __swig_getmethods__["vrf"] = _p4pd.input_properties_otcam_input_properties_t_vrf_get
    if _newclass:vrf = _swig_property(_p4pd.input_properties_otcam_input_properties_t_vrf_get, _p4pd.input_properties_otcam_input_properties_t_vrf_set)
    __swig_setmethods__["dir"] = _p4pd.input_properties_otcam_input_properties_t_dir_set
    __swig_getmethods__["dir"] = _p4pd.input_properties_otcam_input_properties_t_dir_get
    if _newclass:dir = _swig_property(_p4pd.input_properties_otcam_input_properties_t_dir_get, _p4pd.input_properties_otcam_input_properties_t_dir_set)
    __swig_setmethods__["flow_miss_action"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_action_set
    __swig_getmethods__["flow_miss_action"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_action_get
    if _newclass:flow_miss_action = _swig_property(_p4pd.input_properties_otcam_input_properties_t_flow_miss_action_get, _p4pd.input_properties_otcam_input_properties_t_flow_miss_action_set)
    __swig_setmethods__["flow_miss_idx"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_idx_set
    __swig_getmethods__["flow_miss_idx"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_idx_get
    if _newclass:flow_miss_idx = _swig_property(_p4pd.input_properties_otcam_input_properties_t_flow_miss_idx_get, _p4pd.input_properties_otcam_input_properties_t_flow_miss_idx_set)
    __swig_setmethods__["ipsg_enable"] = _p4pd.input_properties_otcam_input_properties_t_ipsg_enable_set
    __swig_getmethods__["ipsg_enable"] = _p4pd.input_properties_otcam_input_properties_t_ipsg_enable_get
    if _newclass:ipsg_enable = _swig_property(_p4pd.input_properties_otcam_input_properties_t_ipsg_enable_get, _p4pd.input_properties_otcam_input_properties_t_ipsg_enable_set)
    __swig_setmethods__["dscp"] = _p4pd.input_properties_otcam_input_properties_t_dscp_set
    __swig_getmethods__["dscp"] = _p4pd.input_properties_otcam_input_properties_t_dscp_get
    if _newclass:dscp = _swig_property(_p4pd.input_properties_otcam_input_properties_t_dscp_get, _p4pd.input_properties_otcam_input_properties_t_dscp_set)
    __swig_setmethods__["l4_profile_idx"] = _p4pd.input_properties_otcam_input_properties_t_l4_profile_idx_set
    __swig_getmethods__["l4_profile_idx"] = _p4pd.input_properties_otcam_input_properties_t_l4_profile_idx_get
    if _newclass:l4_profile_idx = _swig_property(_p4pd.input_properties_otcam_input_properties_t_l4_profile_idx_get, _p4pd.input_properties_otcam_input_properties_t_l4_profile_idx_set)
    __swig_setmethods__["src_lport"] = _p4pd.input_properties_otcam_input_properties_t_src_lport_set
    __swig_getmethods__["src_lport"] = _p4pd.input_properties_otcam_input_properties_t_src_lport_get
    if _newclass:src_lport = _swig_property(_p4pd.input_properties_otcam_input_properties_t_src_lport_get, _p4pd.input_properties_otcam_input_properties_t_src_lport_set)
    __swig_setmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_tm_oqueue_set
    __swig_getmethods__["flow_miss_tm_oqueue"] = _p4pd.input_properties_otcam_input_properties_t_flow_miss_tm_oqueue_get
    if _newclass:flow_miss_tm_oqueue = _swig_property(_p4pd.input_properties_otcam_input_properties_t_flow_miss_tm_oqueue_get, _p4pd.input_properties_otcam_input_properties_t_flow_miss_tm_oqueue_set)
    __swig_setmethods__["dst_lport"] = _p4pd.input_properties_otcam_input_properties_t_dst_lport_set
    __swig_getmethods__["dst_lport"] = _p4pd.input_properties_otcam_input_properties_t_dst_lport_get
    if _newclass:dst_lport = _swig_property(_p4pd.input_properties_otcam_input_properties_t_dst_lport_get, _p4pd.input_properties_otcam_input_properties_t_dst_lport_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_otcam_input_properties_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_otcam_input_properties_t
    __del__ = lambda self : None;
input_properties_otcam_input_properties_t_swigregister = _p4pd.input_properties_otcam_input_properties_t_swigregister
input_properties_otcam_input_properties_t_swigregister(input_properties_otcam_input_properties_t)

class input_properties_otcam_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_otcam_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_otcam_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["input_properties_otcam_input_properties"] = _p4pd.input_properties_otcam_action_union_t_input_properties_otcam_input_properties_set
    __swig_getmethods__["input_properties_otcam_input_properties"] = _p4pd.input_properties_otcam_action_union_t_input_properties_otcam_input_properties_get
    if _newclass:input_properties_otcam_input_properties = _swig_property(_p4pd.input_properties_otcam_action_union_t_input_properties_otcam_input_properties_get, _p4pd.input_properties_otcam_action_union_t_input_properties_otcam_input_properties_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_otcam_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_otcam_action_union_t
    __del__ = lambda self : None;
input_properties_otcam_action_union_t_swigregister = _p4pd.input_properties_otcam_action_union_t_swigregister
input_properties_otcam_action_union_t_swigregister(input_properties_otcam_action_union_t)

class input_properties_otcam_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_properties_otcam_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_properties_otcam_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.input_properties_otcam_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.input_properties_otcam_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.input_properties_otcam_actiondata_actionid_get, _p4pd.input_properties_otcam_actiondata_actionid_set)
    __swig_setmethods__["input_properties_otcam_action_u"] = _p4pd.input_properties_otcam_actiondata_input_properties_otcam_action_u_set
    __swig_getmethods__["input_properties_otcam_action_u"] = _p4pd.input_properties_otcam_actiondata_input_properties_otcam_action_u_get
    if _newclass:input_properties_otcam_action_u = _swig_property(_p4pd.input_properties_otcam_actiondata_input_properties_otcam_action_u_get, _p4pd.input_properties_otcam_actiondata_input_properties_otcam_action_u_set)
    def __init__(self): 
        this = _p4pd.new_input_properties_otcam_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_input_properties_otcam_actiondata
    __del__ = lambda self : None;
input_properties_otcam_actiondata_swigregister = _p4pd.input_properties_otcam_actiondata_swigregister
input_properties_otcam_actiondata_swigregister(input_properties_otcam_actiondata)

class icmp_normalization_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icmp_normalization_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icmp_normalization_swkey_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_icmp_normalization_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_icmp_normalization_swkey_t
    __del__ = lambda self : None;
icmp_normalization_swkey_t_swigregister = _p4pd.icmp_normalization_swkey_t_swigregister
icmp_normalization_swkey_t_swigregister(icmp_normalization_swkey_t)

ICMP_NORMALIZATION_ICMP_NORMALIZATION_ID = _p4pd.ICMP_NORMALIZATION_ICMP_NORMALIZATION_ID
ICMP_NORMALIZATION_MAX_ID = _p4pd.ICMP_NORMALIZATION_MAX_ID
class icmp_normalization_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icmp_normalization_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icmp_normalization_action_union_t, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _p4pd.new_icmp_normalization_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_icmp_normalization_action_union_t
    __del__ = lambda self : None;
icmp_normalization_action_union_t_swigregister = _p4pd.icmp_normalization_action_union_t_swigregister
icmp_normalization_action_union_t_swigregister(icmp_normalization_action_union_t)

class icmp_normalization_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icmp_normalization_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icmp_normalization_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.icmp_normalization_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.icmp_normalization_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.icmp_normalization_actiondata_actionid_get, _p4pd.icmp_normalization_actiondata_actionid_set)
    __swig_setmethods__["icmp_normalization_action_u"] = _p4pd.icmp_normalization_actiondata_icmp_normalization_action_u_set
    __swig_getmethods__["icmp_normalization_action_u"] = _p4pd.icmp_normalization_actiondata_icmp_normalization_action_u_get
    if _newclass:icmp_normalization_action_u = _swig_property(_p4pd.icmp_normalization_actiondata_icmp_normalization_action_u_get, _p4pd.icmp_normalization_actiondata_icmp_normalization_action_u_set)
    def __init__(self): 
        this = _p4pd.new_icmp_normalization_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_icmp_normalization_actiondata
    __del__ = lambda self : None;
icmp_normalization_actiondata_swigregister = _p4pd.icmp_normalization_actiondata_swigregister
icmp_normalization_actiondata_swigregister(icmp_normalization_actiondata)

class tunnel_rewrite_swkey_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_rewrite_swkey_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_rewrite_swkey_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rewrite_metadata_tunnel_rewrite_index"] = _p4pd.tunnel_rewrite_swkey_t_rewrite_metadata_tunnel_rewrite_index_set
    __swig_getmethods__["rewrite_metadata_tunnel_rewrite_index"] = _p4pd.tunnel_rewrite_swkey_t_rewrite_metadata_tunnel_rewrite_index_get
    if _newclass:rewrite_metadata_tunnel_rewrite_index = _swig_property(_p4pd.tunnel_rewrite_swkey_t_rewrite_metadata_tunnel_rewrite_index_get, _p4pd.tunnel_rewrite_swkey_t_rewrite_metadata_tunnel_rewrite_index_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_rewrite_swkey_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_rewrite_swkey_t
    __del__ = lambda self : None;
tunnel_rewrite_swkey_t_swigregister = _p4pd.tunnel_rewrite_swkey_t_swigregister
tunnel_rewrite_swkey_t_swigregister(tunnel_rewrite_swkey_t)

TUNNEL_REWRITE_NOP_ID = _p4pd.TUNNEL_REWRITE_NOP_ID
TUNNEL_REWRITE_ENCAP_VXLAN_ID = _p4pd.TUNNEL_REWRITE_ENCAP_VXLAN_ID
TUNNEL_REWRITE_ENCAP_ERSPAN_ID = _p4pd.TUNNEL_REWRITE_ENCAP_ERSPAN_ID
TUNNEL_REWRITE_ENCAP_VLAN_ID = _p4pd.TUNNEL_REWRITE_ENCAP_VLAN_ID
TUNNEL_REWRITE_MAX_ID = _p4pd.TUNNEL_REWRITE_MAX_ID
class tunnel_rewrite_encap_vxlan_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_rewrite_encap_vxlan_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_rewrite_encap_vxlan_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.tunnel_rewrite_encap_vxlan_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.tunnel_rewrite_encap_vxlan_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_mac_sa_get, _p4pd.tunnel_rewrite_encap_vxlan_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.tunnel_rewrite_encap_vxlan_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.tunnel_rewrite_encap_vxlan_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_mac_da_get, _p4pd.tunnel_rewrite_encap_vxlan_t_mac_da_set)
    __swig_setmethods__["ip_sa"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_sa_set
    __swig_getmethods__["ip_sa"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_sa_get
    if _newclass:ip_sa = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_ip_sa_get, _p4pd.tunnel_rewrite_encap_vxlan_t_ip_sa_set)
    __swig_setmethods__["ip_da"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_da_set
    __swig_getmethods__["ip_da"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_da_get
    if _newclass:ip_da = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_ip_da_get, _p4pd.tunnel_rewrite_encap_vxlan_t_ip_da_set)
    __swig_setmethods__["ip_type"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_type_set
    __swig_getmethods__["ip_type"] = _p4pd.tunnel_rewrite_encap_vxlan_t_ip_type_get
    if _newclass:ip_type = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_ip_type_get, _p4pd.tunnel_rewrite_encap_vxlan_t_ip_type_set)
    __swig_setmethods__["vlan_valid"] = _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_valid_set
    __swig_getmethods__["vlan_valid"] = _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_valid_get
    if _newclass:vlan_valid = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_vlan_valid_get, _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_valid_set)
    __swig_setmethods__["vlan_id"] = _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_id_set
    __swig_getmethods__["vlan_id"] = _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_id_get
    if _newclass:vlan_id = _swig_property(_p4pd.tunnel_rewrite_encap_vxlan_t_vlan_id_get, _p4pd.tunnel_rewrite_encap_vxlan_t_vlan_id_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_rewrite_encap_vxlan_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_rewrite_encap_vxlan_t
    __del__ = lambda self : None;
tunnel_rewrite_encap_vxlan_t_swigregister = _p4pd.tunnel_rewrite_encap_vxlan_t_swigregister
tunnel_rewrite_encap_vxlan_t_swigregister(tunnel_rewrite_encap_vxlan_t)

class tunnel_rewrite_encap_erspan_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_rewrite_encap_erspan_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_rewrite_encap_erspan_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mac_sa"] = _p4pd.tunnel_rewrite_encap_erspan_t_mac_sa_set
    __swig_getmethods__["mac_sa"] = _p4pd.tunnel_rewrite_encap_erspan_t_mac_sa_get
    if _newclass:mac_sa = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_mac_sa_get, _p4pd.tunnel_rewrite_encap_erspan_t_mac_sa_set)
    __swig_setmethods__["mac_da"] = _p4pd.tunnel_rewrite_encap_erspan_t_mac_da_set
    __swig_getmethods__["mac_da"] = _p4pd.tunnel_rewrite_encap_erspan_t_mac_da_get
    if _newclass:mac_da = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_mac_da_get, _p4pd.tunnel_rewrite_encap_erspan_t_mac_da_set)
    __swig_setmethods__["ip_sa"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_sa_set
    __swig_getmethods__["ip_sa"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_sa_get
    if _newclass:ip_sa = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_ip_sa_get, _p4pd.tunnel_rewrite_encap_erspan_t_ip_sa_set)
    __swig_setmethods__["ip_da"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_da_set
    __swig_getmethods__["ip_da"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_da_get
    if _newclass:ip_da = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_ip_da_get, _p4pd.tunnel_rewrite_encap_erspan_t_ip_da_set)
    __swig_setmethods__["ip_type"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_type_set
    __swig_getmethods__["ip_type"] = _p4pd.tunnel_rewrite_encap_erspan_t_ip_type_get
    if _newclass:ip_type = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_ip_type_get, _p4pd.tunnel_rewrite_encap_erspan_t_ip_type_set)
    __swig_setmethods__["vlan_valid"] = _p4pd.tunnel_rewrite_encap_erspan_t_vlan_valid_set
    __swig_getmethods__["vlan_valid"] = _p4pd.tunnel_rewrite_encap_erspan_t_vlan_valid_get
    if _newclass:vlan_valid = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_vlan_valid_get, _p4pd.tunnel_rewrite_encap_erspan_t_vlan_valid_set)
    __swig_setmethods__["vlan_id"] = _p4pd.tunnel_rewrite_encap_erspan_t_vlan_id_set
    __swig_getmethods__["vlan_id"] = _p4pd.tunnel_rewrite_encap_erspan_t_vlan_id_get
    if _newclass:vlan_id = _swig_property(_p4pd.tunnel_rewrite_encap_erspan_t_vlan_id_get, _p4pd.tunnel_rewrite_encap_erspan_t_vlan_id_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_rewrite_encap_erspan_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_rewrite_encap_erspan_t
    __del__ = lambda self : None;
tunnel_rewrite_encap_erspan_t_swigregister = _p4pd.tunnel_rewrite_encap_erspan_t_swigregister
tunnel_rewrite_encap_erspan_t_swigregister(tunnel_rewrite_encap_erspan_t)

class tunnel_rewrite_action_union_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_rewrite_action_union_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_rewrite_action_union_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tunnel_rewrite_encap_vxlan"] = _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_vxlan_set
    __swig_getmethods__["tunnel_rewrite_encap_vxlan"] = _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_vxlan_get
    if _newclass:tunnel_rewrite_encap_vxlan = _swig_property(_p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_vxlan_get, _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_vxlan_set)
    __swig_setmethods__["tunnel_rewrite_encap_erspan"] = _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_erspan_set
    __swig_getmethods__["tunnel_rewrite_encap_erspan"] = _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_erspan_get
    if _newclass:tunnel_rewrite_encap_erspan = _swig_property(_p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_erspan_get, _p4pd.tunnel_rewrite_action_union_t_tunnel_rewrite_encap_erspan_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_rewrite_action_union_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_rewrite_action_union_t
    __del__ = lambda self : None;
tunnel_rewrite_action_union_t_swigregister = _p4pd.tunnel_rewrite_action_union_t_swigregister
tunnel_rewrite_action_union_t_swigregister(tunnel_rewrite_action_union_t)

class tunnel_rewrite_actiondata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tunnel_rewrite_actiondata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tunnel_rewrite_actiondata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actionid"] = _p4pd.tunnel_rewrite_actiondata_actionid_set
    __swig_getmethods__["actionid"] = _p4pd.tunnel_rewrite_actiondata_actionid_get
    if _newclass:actionid = _swig_property(_p4pd.tunnel_rewrite_actiondata_actionid_get, _p4pd.tunnel_rewrite_actiondata_actionid_set)
    __swig_setmethods__["tunnel_rewrite_action_u"] = _p4pd.tunnel_rewrite_actiondata_tunnel_rewrite_action_u_set
    __swig_getmethods__["tunnel_rewrite_action_u"] = _p4pd.tunnel_rewrite_actiondata_tunnel_rewrite_action_u_get
    if _newclass:tunnel_rewrite_action_u = _swig_property(_p4pd.tunnel_rewrite_actiondata_tunnel_rewrite_action_u_get, _p4pd.tunnel_rewrite_actiondata_tunnel_rewrite_action_u_set)
    def __init__(self): 
        this = _p4pd.new_tunnel_rewrite_actiondata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_tunnel_rewrite_actiondata
    __del__ = lambda self : None;
tunnel_rewrite_actiondata_swigregister = _p4pd.tunnel_rewrite_actiondata_swigregister
tunnel_rewrite_actiondata_swigregister(tunnel_rewrite_actiondata)

P4TBL_ID_HASH_MIN = _p4pd.P4TBL_ID_HASH_MIN
P4TBL_ID_HASH_MAX = _p4pd.P4TBL_ID_HASH_MAX
P4TBL_ID_HASH_OTCAM_MIN = _p4pd.P4TBL_ID_HASH_OTCAM_MIN
P4TBL_ID_HASH_OTCAM_MAX = _p4pd.P4TBL_ID_HASH_OTCAM_MAX
P4TBL_ID_TCAM_MIN = _p4pd.P4TBL_ID_TCAM_MIN
P4TBL_ID_TCAM_MAX = _p4pd.P4TBL_ID_TCAM_MAX
P4TBL_ID_INDEX_MIN = _p4pd.P4TBL_ID_INDEX_MIN
P4TBL_ID_INDEX_MAX = _p4pd.P4TBL_ID_INDEX_MAX
P4TBL_ID_MPU_MIN = _p4pd.P4TBL_ID_MPU_MIN
P4TBL_ID_MPU_MAX = _p4pd.P4TBL_ID_MPU_MAX
P4TBL_ID_TBLMIN = _p4pd.P4TBL_ID_TBLMIN
P4TBL_ID_FLOW_HASH = _p4pd.P4TBL_ID_FLOW_HASH
P4TBL_ID_FLOW_HASH_OVERFLOW = _p4pd.P4TBL_ID_FLOW_HASH_OVERFLOW
P4TBL_ID_INPUT_PROPERTIES = _p4pd.P4TBL_ID_INPUT_PROPERTIES
P4TBL_ID_REGISTERED_MACS = _p4pd.P4TBL_ID_REGISTERED_MACS
P4TBL_ID_NACL = _p4pd.P4TBL_ID_NACL
P4TBL_ID_DDOS_SRC_DST = _p4pd.P4TBL_ID_DDOS_SRC_DST
P4TBL_ID_INPUT_PROPERTIES_MAC_VLAN = _p4pd.P4TBL_ID_INPUT_PROPERTIES_MAC_VLAN
P4TBL_ID_DROP_STATS = _p4pd.P4TBL_ID_DROP_STATS
P4TBL_ID_INPUT_MAPPING_TUNNELED = _p4pd.P4TBL_ID_INPUT_MAPPING_TUNNELED
P4TBL_ID_INPUT_MAPPING_NATIVE = _p4pd.P4TBL_ID_INPUT_MAPPING_NATIVE
P4TBL_ID_IPSG = _p4pd.P4TBL_ID_IPSG
P4TBL_ID_COMPUTE_CHECKSUM = _p4pd.P4TBL_ID_COMPUTE_CHECKSUM
P4TBL_ID_DDOS_SERVICE = _p4pd.P4TBL_ID_DDOS_SERVICE
P4TBL_ID_DDOS_SRC_VF = _p4pd.P4TBL_ID_DDOS_SRC_VF
P4TBL_ID_REGISTERED_MACS_OTCAM = _p4pd.P4TBL_ID_REGISTERED_MACS_OTCAM
P4TBL_ID_INPUT_PROPERTIES_OTCAM = _p4pd.P4TBL_ID_INPUT_PROPERTIES_OTCAM
P4TBL_ID_TWICE_NAT = _p4pd.P4TBL_ID_TWICE_NAT
P4TBL_ID_COPP_ACTION = _p4pd.P4TBL_ID_COPP_ACTION
P4TBL_ID_REWRITE = _p4pd.P4TBL_ID_REWRITE
P4TBL_ID_INGRESS_TX_STATS = _p4pd.P4TBL_ID_INGRESS_TX_STATS
P4TBL_ID_EGRESS_POLICER_ACTION = _p4pd.P4TBL_ID_EGRESS_POLICER_ACTION
P4TBL_ID_MIRROR = _p4pd.P4TBL_ID_MIRROR
P4TBL_ID_L4_PROFILE = _p4pd.P4TBL_ID_L4_PROFILE
P4TBL_ID_SESSION_STATE = _p4pd.P4TBL_ID_SESSION_STATE
P4TBL_ID_DDOS_SRC_DST_POLICER_ACTION = _p4pd.P4TBL_ID_DDOS_SRC_DST_POLICER_ACTION
P4TBL_ID_DDOS_SRC_DST_POLICER = _p4pd.P4TBL_ID_DDOS_SRC_DST_POLICER
P4TBL_ID_P4PLUS_APP = _p4pd.P4TBL_ID_P4PLUS_APP
P4TBL_ID_DECODE_ROCE_OPCODE = _p4pd.P4TBL_ID_DECODE_ROCE_OPCODE
P4TBL_ID_TUNNEL_ENCAP_UPDATE_INNER = _p4pd.P4TBL_ID_TUNNEL_ENCAP_UPDATE_INNER
P4TBL_ID_EGRESS_POLICER = _p4pd.P4TBL_ID_EGRESS_POLICER
P4TBL_ID_FLOW_INFO = _p4pd.P4TBL_ID_FLOW_INFO
P4TBL_ID_TX_STATS = _p4pd.P4TBL_ID_TX_STATS
P4TBL_ID_OUTPUT_MAPPING = _p4pd.P4TBL_ID_OUTPUT_MAPPING
P4TBL_ID_DDOS_SERVICE_POLICER_ACTION = _p4pd.P4TBL_ID_DDOS_SERVICE_POLICER_ACTION
P4TBL_ID_DDOS_SRC_VF_POLICER = _p4pd.P4TBL_ID_DDOS_SRC_VF_POLICER
P4TBL_ID_INGRESS_POLICER = _p4pd.P4TBL_ID_INGRESS_POLICER
P4TBL_ID_FLOW_STATS = _p4pd.P4TBL_ID_FLOW_STATS
P4TBL_ID_INGRESS_POLICER_ACTION = _p4pd.P4TBL_ID_INGRESS_POLICER_ACTION
P4TBL_ID_DDOS_SRC_VF_POLICER_ACTION = _p4pd.P4TBL_ID_DDOS_SRC_VF_POLICER_ACTION
P4TBL_ID_TUNNEL_DECAP_COPY_INNER = _p4pd.P4TBL_ID_TUNNEL_DECAP_COPY_INNER
P4TBL_ID_COPP = _p4pd.P4TBL_ID_COPP
P4TBL_ID_DDOS_SERVICE_POLICER = _p4pd.P4TBL_ID_DDOS_SERVICE_POLICER
P4TBL_ID_TUNNEL_REWRITE = _p4pd.P4TBL_ID_TUNNEL_REWRITE
P4TBL_ID_REPLICA = _p4pd.P4TBL_ID_REPLICA
P4TBL_ID_TCP_STATELESS_NORMALIZATION = _p4pd.P4TBL_ID_TCP_STATELESS_NORMALIZATION
P4TBL_ID_TUNNEL_DECAP = _p4pd.P4TBL_ID_TUNNEL_DECAP
P4TBL_ID_TCP_OPTIONS_FIXUP = _p4pd.P4TBL_ID_TCP_OPTIONS_FIXUP
P4TBL_ID_P4PLUS_APP_PREP = _p4pd.P4TBL_ID_P4PLUS_APP_PREP
P4TBL_ID_P4PLUS_TO_P4_1 = _p4pd.P4TBL_ID_P4PLUS_TO_P4_1
P4TBL_ID_VALIDATE_PACKET = _p4pd.P4TBL_ID_VALIDATE_PACKET
P4TBL_ID_P4PLUS_TO_P4_2 = _p4pd.P4TBL_ID_P4PLUS_TO_P4_2
P4TBL_ID_ICMP_NORMALIZATION = _p4pd.P4TBL_ID_ICMP_NORMALIZATION
P4TBL_ID_TBLMAX = _p4pd.P4TBL_ID_TBLMAX
P4TBL_NAME_MAX_LEN = _p4pd.P4TBL_NAME_MAX_LEN

def p4pd_prep_p4tbl_names():
  return _p4pd.p4pd_prep_p4tbl_names()
p4pd_prep_p4tbl_names = _p4pd.p4pd_prep_p4tbl_names

def p4pd_prep_p4tbl_sw_struct_sizes():
  return _p4pd.p4pd_prep_p4tbl_sw_struct_sizes()
p4pd_prep_p4tbl_sw_struct_sizes = _p4pd.p4pd_prep_p4tbl_sw_struct_sizes

def p4pd_get_max_action_id(*args):
  return _p4pd.p4pd_get_max_action_id(*args)
p4pd_get_max_action_id = _p4pd.p4pd_get_max_action_id

def p4pd_get_action_name(*args):
  return _p4pd.p4pd_get_action_name(*args)
p4pd_get_action_name = _p4pd.p4pd_get_action_name
class p4_replication_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, p4_replication_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, p4_replication_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rewrite_index"] = _p4pd.p4_replication_data_t_rewrite_index_set
    __swig_getmethods__["rewrite_index"] = _p4pd.p4_replication_data_t_rewrite_index_get
    if _newclass:rewrite_index = _swig_property(_p4pd.p4_replication_data_t_rewrite_index_get, _p4pd.p4_replication_data_t_rewrite_index_set)
    __swig_setmethods__["is_tunnel"] = _p4pd.p4_replication_data_t_is_tunnel_set
    __swig_getmethods__["is_tunnel"] = _p4pd.p4_replication_data_t_is_tunnel_get
    if _newclass:is_tunnel = _swig_property(_p4pd.p4_replication_data_t_is_tunnel_get, _p4pd.p4_replication_data_t_is_tunnel_set)
    __swig_setmethods__["is_qid"] = _p4pd.p4_replication_data_t_is_qid_set
    __swig_getmethods__["is_qid"] = _p4pd.p4_replication_data_t_is_qid_get
    if _newclass:is_qid = _swig_property(_p4pd.p4_replication_data_t_is_qid_get, _p4pd.p4_replication_data_t_is_qid_set)
    __swig_setmethods__["repl_type"] = _p4pd.p4_replication_data_t_repl_type_set
    __swig_getmethods__["repl_type"] = _p4pd.p4_replication_data_t_repl_type_get
    if _newclass:repl_type = _swig_property(_p4pd.p4_replication_data_t_repl_type_get, _p4pd.p4_replication_data_t_repl_type_set)
    __swig_setmethods__["qid_or_vnid"] = _p4pd.p4_replication_data_t_qid_or_vnid_set
    __swig_getmethods__["qid_or_vnid"] = _p4pd.p4_replication_data_t_qid_or_vnid_get
    if _newclass:qid_or_vnid = _swig_property(_p4pd.p4_replication_data_t_qid_or_vnid_get, _p4pd.p4_replication_data_t_qid_or_vnid_set)
    __swig_setmethods__["tunnel_rewrite_index"] = _p4pd.p4_replication_data_t_tunnel_rewrite_index_set
    __swig_getmethods__["tunnel_rewrite_index"] = _p4pd.p4_replication_data_t_tunnel_rewrite_index_get
    if _newclass:tunnel_rewrite_index = _swig_property(_p4pd.p4_replication_data_t_tunnel_rewrite_index_get, _p4pd.p4_replication_data_t_tunnel_rewrite_index_set)
    __swig_setmethods__["lport"] = _p4pd.p4_replication_data_t_lport_set
    __swig_getmethods__["lport"] = _p4pd.p4_replication_data_t_lport_get
    if _newclass:lport = _swig_property(_p4pd.p4_replication_data_t_lport_get, _p4pd.p4_replication_data_t_lport_set)
    __swig_setmethods__["qtype"] = _p4pd.p4_replication_data_t_qtype_set
    __swig_getmethods__["qtype"] = _p4pd.p4_replication_data_t_qtype_get
    if _newclass:qtype = _swig_property(_p4pd.p4_replication_data_t_qtype_get, _p4pd.p4_replication_data_t_qtype_set)
    def __init__(self): 
        this = _p4pd.new_p4_replication_data_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _p4pd.delete_p4_replication_data_t
    __del__ = lambda self : None;
p4_replication_data_t_swigregister = _p4pd.p4_replication_data_t_swigregister
p4_replication_data_t_swigregister(p4_replication_data_t)
cvar = _p4pd.cvar

P4_REPL_TABLE_NAME = _p4pd.P4_REPL_TABLE_NAME
P4_REPL_TABLE_DEPTH = _p4pd.P4_REPL_TABLE_DEPTH

def get_table_id(*args):
  return _p4pd.get_table_id(*args)
get_table_id = _p4pd.get_table_id

def dump_table(*args):
  return _p4pd.dump_table(*args)
dump_table = _p4pd.dump_table

def get_data(*args):
  return _p4pd.get_data(*args)
get_data = _p4pd.get_data
# This file is compatible with both classic and new-style classes.


