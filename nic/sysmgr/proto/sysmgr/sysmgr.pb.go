// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sysmgr.proto

/*
Package sysmgr is a generated protocol buffer package.

It is generated from these files:
	sysmgr.proto

It has these top-level messages:
	SysmgrShutdownReq_
	SysmgrShutdownStatus_
	SysmgrRebootReq_
	SysmgrServiceStatus_
*/
package sysmgr

import clientApi "github.com/pensando/sw/nic/delphi/gosdk/client_api"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SysmgrShutdownReq_ struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
}

func (m *SysmgrShutdownReq_) Reset()                    { *m = SysmgrShutdownReq_{} }
func (m *SysmgrShutdownReq_) String() string            { return proto.CompactTextString(m) }
func (*SysmgrShutdownReq_) ProtoMessage()               {}
func (*SysmgrShutdownReq_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SysmgrShutdownReq_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SysmgrShutdownStatus_ struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key  string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Pid  int32              `protobuf:"varint,3,opt,name=Pid" json:"Pid,omitempty"`
}

func (m *SysmgrShutdownStatus_) Reset()                    { *m = SysmgrShutdownStatus_{} }
func (m *SysmgrShutdownStatus_) String() string            { return proto.CompactTextString(m) }
func (*SysmgrShutdownStatus_) ProtoMessage()               {}
func (*SysmgrShutdownStatus_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SysmgrShutdownStatus_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SysmgrShutdownStatus_) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SysmgrShutdownStatus_) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type SysmgrRebootReq_ struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key  string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Pid  int32              `protobuf:"varint,3,opt,name=Pid" json:"Pid,omitempty"`
}

func (m *SysmgrRebootReq_) Reset()                    { *m = SysmgrRebootReq_{} }
func (m *SysmgrRebootReq_) String() string            { return proto.CompactTextString(m) }
func (*SysmgrRebootReq_) ProtoMessage()               {}
func (*SysmgrRebootReq_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SysmgrRebootReq_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SysmgrRebootReq_) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SysmgrRebootReq_) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type SysmgrServiceStatus_ struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key  string             `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
	Pid  int32              `protobuf:"varint,3,opt,name=Pid" json:"Pid,omitempty"`
}

func (m *SysmgrServiceStatus_) Reset()                    { *m = SysmgrServiceStatus_{} }
func (m *SysmgrServiceStatus_) String() string            { return proto.CompactTextString(m) }
func (*SysmgrServiceStatus_) ProtoMessage()               {}
func (*SysmgrServiceStatus_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SysmgrServiceStatus_) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SysmgrServiceStatus_) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SysmgrServiceStatus_) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type delphiWrapper interface {
	bubbleSave()
}

type SysmgrShutdownStatus struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	meta      *delphi.ObjectMeta
	key       string
	pid       int32
}

func (o *SysmgrShutdownStatus) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *SysmgrShutdownStatus) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *SysmgrShutdownStatus) GetKey() string {
	return o.key
}

func (o *SysmgrShutdownStatus) SetKey(val string) {
	o.key = val
	o.bubbleSave()
}

func (o *SysmgrShutdownStatus) GetPid() int32 {
	return o.pid
}

func (o *SysmgrShutdownStatus) SetPid(val int32) {
	o.pid = val
	o.bubbleSave()
}

func (o *SysmgrShutdownStatus) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *SysmgrShutdownStatus) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *SysmgrShutdownStatus) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewSysmgrShutdownStatus(sdkClient clientApi.Client) *SysmgrShutdownStatus {
	w := &SysmgrShutdownStatus{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "SysmgrShutdownStatus",
	}
	return w
}

func NewSysmgrShutdownStatusWithKey(sdkClient clientApi.Client, key string) *SysmgrShutdownStatus {
	w := NewSysmgrShutdownStatus(sdkClient)
	w.SetKey(key)
	return w
}

func GetSysmgrShutdownStatus(sdkClient clientApi.Client, key string) *SysmgrShutdownStatus {
	lookupKey := fmt.Sprintf("%v", key)
	b := sdkClient.GetObject("SysmgrShutdownStatus", lookupKey)
	if b == nil {
		return nil
	}
	o, ok := b.(*SysmgrShutdownStatus)
	if !ok {
		panic("Couldn't cast to SysmgrShutdownStatus")
	}
	return o
}

func childNewSysmgrShutdownStatus(parent delphiWrapper, sdkClient clientApi.Client) *SysmgrShutdownStatus {
	w := NewSysmgrShutdownStatus(sdkClient)
	w.parent = parent
	return w
}

func childNewSysmgrShutdownStatusWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *SysmgrShutdownStatus) *SysmgrShutdownStatus {
	w := childNewSysmgrShutdownStatus(parent, sdkClient)
	w.key = value.key
	w.pid = value.pid
	return w
}

func (o *SysmgrShutdownStatus) GetProtoMsg() *SysmgrShutdownStatus_ {
	return &SysmgrShutdownStatus_{
		Meta: o.meta,
		Key:  o.key,
		Pid:  o.pid,
	}
}

func (o *SysmgrShutdownStatus) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *SysmgrShutdownStatus) GetKeyString() string {
	return fmt.Sprintf("%v", (obj.key))
}

func (obj *SysmgrShutdownStatus) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SysmgrShutdownStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnSysmgrShutdownStatusCreate(obj)
			} else {
				rctr.OnSysmgrShutdownStatusUpdate(obj)
			}
		} else {
			rctr.OnSysmgrShutdownStatusDelete(obj)
		}
	}
}

type SysmgrShutdownStatusReactor interface {
	OnSysmgrShutdownStatusCreate(obj *SysmgrShutdownStatus)
	OnSysmgrShutdownStatusUpdate(obj *SysmgrShutdownStatus)
	OnSysmgrShutdownStatusDelete(obj *SysmgrShutdownStatus)
}

func (obj *SysmgrShutdownStatus) GetPath() string {
	return "SysmgrShutdownStatus" + "|" + obj.GetKeyString()
}

func newSysmgrShutdownStatusFromMessage(msg *SysmgrShutdownStatus_) *SysmgrShutdownStatus {
	return &SysmgrShutdownStatus{
		meta: msg.Meta,
		key:  msg.Key,
		pid:  msg.Pid,
	}
}

func sysmgrShutdownStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SysmgrShutdownStatus_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newSysmgrShutdownStatusFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func SysmgrShutdownStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SysmgrShutdownStatus", mode)
}

func SysmgrShutdownStatusMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	keyString := fmt.Sprintf("%v", key)
	client.MountKindKey("SysmgrShutdownStatus", keyString, mode)
}

func SysmgrShutdownStatusWatch(client clientApi.Client, reactor SysmgrShutdownStatusReactor) {
	client.WatchKind("SysmgrShutdownStatus", reactor)
}

type SysmgrShutdownStatusIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *SysmgrShutdownStatusIterator) Next() *SysmgrShutdownStatus {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*SysmgrShutdownStatus)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func SysmgrShutdownStatusList(client clientApi.Client) *SysmgrShutdownStatusIterator {
	return &SysmgrShutdownStatusIterator{
		objects: client.List("SysmgrShutdownStatus"),
		cur:     0,
	}
}

type SysmgrRebootReq struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	meta      *delphi.ObjectMeta
	key       string
	pid       int32
}

func (o *SysmgrRebootReq) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *SysmgrRebootReq) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *SysmgrRebootReq) GetKey() string {
	return o.key
}

func (o *SysmgrRebootReq) SetKey(val string) {
	o.key = val
	o.bubbleSave()
}

func (o *SysmgrRebootReq) GetPid() int32 {
	return o.pid
}

func (o *SysmgrRebootReq) SetPid(val int32) {
	o.pid = val
	o.bubbleSave()
}

func (o *SysmgrRebootReq) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *SysmgrRebootReq) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *SysmgrRebootReq) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewSysmgrRebootReq(sdkClient clientApi.Client) *SysmgrRebootReq {
	w := &SysmgrRebootReq{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "SysmgrRebootReq",
	}
	return w
}

func NewSysmgrRebootReqWithKey(sdkClient clientApi.Client, key string) *SysmgrRebootReq {
	w := NewSysmgrRebootReq(sdkClient)
	w.SetKey(key)
	return w
}

func GetSysmgrRebootReq(sdkClient clientApi.Client, key string) *SysmgrRebootReq {
	lookupKey := fmt.Sprintf("%v", key)
	b := sdkClient.GetObject("SysmgrRebootReq", lookupKey)
	if b == nil {
		return nil
	}
	o, ok := b.(*SysmgrRebootReq)
	if !ok {
		panic("Couldn't cast to SysmgrRebootReq")
	}
	return o
}

func childNewSysmgrRebootReq(parent delphiWrapper, sdkClient clientApi.Client) *SysmgrRebootReq {
	w := NewSysmgrRebootReq(sdkClient)
	w.parent = parent
	return w
}

func childNewSysmgrRebootReqWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *SysmgrRebootReq) *SysmgrRebootReq {
	w := childNewSysmgrRebootReq(parent, sdkClient)
	w.key = value.key
	w.pid = value.pid
	return w
}

func (o *SysmgrRebootReq) GetProtoMsg() *SysmgrRebootReq_ {
	return &SysmgrRebootReq_{
		Meta: o.meta,
		Key:  o.key,
		Pid:  o.pid,
	}
}

func (o *SysmgrRebootReq) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *SysmgrRebootReq) GetKeyString() string {
	return fmt.Sprintf("%v", (obj.key))
}

func (obj *SysmgrRebootReq) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SysmgrRebootReqReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnSysmgrRebootReqCreate(obj)
			} else {
				rctr.OnSysmgrRebootReqUpdate(obj)
			}
		} else {
			rctr.OnSysmgrRebootReqDelete(obj)
		}
	}
}

type SysmgrRebootReqReactor interface {
	OnSysmgrRebootReqCreate(obj *SysmgrRebootReq)
	OnSysmgrRebootReqUpdate(obj *SysmgrRebootReq)
	OnSysmgrRebootReqDelete(obj *SysmgrRebootReq)
}

func (obj *SysmgrRebootReq) GetPath() string {
	return "SysmgrRebootReq" + "|" + obj.GetKeyString()
}

func newSysmgrRebootReqFromMessage(msg *SysmgrRebootReq_) *SysmgrRebootReq {
	return &SysmgrRebootReq{
		meta: msg.Meta,
		key:  msg.Key,
		pid:  msg.Pid,
	}
}

func sysmgrRebootReqFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SysmgrRebootReq_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newSysmgrRebootReqFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func SysmgrRebootReqMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SysmgrRebootReq", mode)
}

func SysmgrRebootReqMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	keyString := fmt.Sprintf("%v", key)
	client.MountKindKey("SysmgrRebootReq", keyString, mode)
}

func SysmgrRebootReqWatch(client clientApi.Client, reactor SysmgrRebootReqReactor) {
	client.WatchKind("SysmgrRebootReq", reactor)
}

type SysmgrRebootReqIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *SysmgrRebootReqIterator) Next() *SysmgrRebootReq {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*SysmgrRebootReq)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func SysmgrRebootReqList(client clientApi.Client) *SysmgrRebootReqIterator {
	return &SysmgrRebootReqIterator{
		objects: client.List("SysmgrRebootReq"),
		cur:     0,
	}
}

type SysmgrServiceStatus struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	meta      *delphi.ObjectMeta
	key       string
	pid       int32
}

func (o *SysmgrServiceStatus) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *SysmgrServiceStatus) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *SysmgrServiceStatus) GetKey() string {
	return o.key
}

func (o *SysmgrServiceStatus) SetKey(val string) {
	o.key = val
	o.bubbleSave()
}

func (o *SysmgrServiceStatus) GetPid() int32 {
	return o.pid
}

func (o *SysmgrServiceStatus) SetPid(val int32) {
	o.pid = val
	o.bubbleSave()
}

func (o *SysmgrServiceStatus) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *SysmgrServiceStatus) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *SysmgrServiceStatus) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewSysmgrServiceStatus(sdkClient clientApi.Client) *SysmgrServiceStatus {
	w := &SysmgrServiceStatus{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "SysmgrServiceStatus",
	}
	return w
}

func NewSysmgrServiceStatusWithKey(sdkClient clientApi.Client, key string) *SysmgrServiceStatus {
	w := NewSysmgrServiceStatus(sdkClient)
	w.SetKey(key)
	return w
}

func GetSysmgrServiceStatus(sdkClient clientApi.Client, key string) *SysmgrServiceStatus {
	lookupKey := fmt.Sprintf("%v", key)
	b := sdkClient.GetObject("SysmgrServiceStatus", lookupKey)
	if b == nil {
		return nil
	}
	o, ok := b.(*SysmgrServiceStatus)
	if !ok {
		panic("Couldn't cast to SysmgrServiceStatus")
	}
	return o
}

func childNewSysmgrServiceStatus(parent delphiWrapper, sdkClient clientApi.Client) *SysmgrServiceStatus {
	w := NewSysmgrServiceStatus(sdkClient)
	w.parent = parent
	return w
}

func childNewSysmgrServiceStatusWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *SysmgrServiceStatus) *SysmgrServiceStatus {
	w := childNewSysmgrServiceStatus(parent, sdkClient)
	w.key = value.key
	w.pid = value.pid
	return w
}

func (o *SysmgrServiceStatus) GetProtoMsg() *SysmgrServiceStatus_ {
	return &SysmgrServiceStatus_{
		Meta: o.meta,
		Key:  o.key,
		Pid:  o.pid,
	}
}

func (o *SysmgrServiceStatus) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *SysmgrServiceStatus) GetKeyString() string {
	return fmt.Sprintf("%v", (obj.key))
}

func (obj *SysmgrServiceStatus) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SysmgrServiceStatusReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnSysmgrServiceStatusCreate(obj)
			} else {
				rctr.OnSysmgrServiceStatusUpdate(obj)
			}
		} else {
			rctr.OnSysmgrServiceStatusDelete(obj)
		}
	}
}

type SysmgrServiceStatusReactor interface {
	OnSysmgrServiceStatusCreate(obj *SysmgrServiceStatus)
	OnSysmgrServiceStatusUpdate(obj *SysmgrServiceStatus)
	OnSysmgrServiceStatusDelete(obj *SysmgrServiceStatus)
}

func (obj *SysmgrServiceStatus) GetPath() string {
	return "SysmgrServiceStatus" + "|" + obj.GetKeyString()
}

func newSysmgrServiceStatusFromMessage(msg *SysmgrServiceStatus_) *SysmgrServiceStatus {
	return &SysmgrServiceStatus{
		meta: msg.Meta,
		key:  msg.Key,
		pid:  msg.Pid,
	}
}

func sysmgrServiceStatusFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SysmgrServiceStatus_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newSysmgrServiceStatusFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func SysmgrServiceStatusMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SysmgrServiceStatus", mode)
}

func SysmgrServiceStatusMountKey(client clientApi.Client, key string, mode delphi.MountMode) {
	keyString := fmt.Sprintf("%v", key)
	client.MountKindKey("SysmgrServiceStatus", keyString, mode)
}

func SysmgrServiceStatusWatch(client clientApi.Client, reactor SysmgrServiceStatusReactor) {
	client.WatchKind("SysmgrServiceStatus", reactor)
}

type SysmgrServiceStatusIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *SysmgrServiceStatusIterator) Next() *SysmgrServiceStatus {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*SysmgrServiceStatus)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func SysmgrServiceStatusList(client clientApi.Client) *SysmgrServiceStatusIterator {
	return &SysmgrServiceStatusIterator{
		objects: client.List("SysmgrServiceStatus"),
		cur:     0,
	}
}

type SysmgrShutdownReq struct {
	sdkClient clientApi.Client
	parent    delphiWrapper
	meta      *delphi.ObjectMeta
}

func (o *SysmgrShutdownReq) GetMeta() *delphi.ObjectMeta {
	return o.meta
}

func (o *SysmgrShutdownReq) SetMeta(val *delphi.ObjectMeta) {
	o.meta = val
	o.bubbleSave()
}

func (o *SysmgrShutdownReq) bubbleSave() {
	if o.parent != nil {
		o.parent.bubbleSave()
	} else {
		o.save()
	}
}

func (o *SysmgrShutdownReq) save() {
	if o.GetKeyString() != "" {
		o.sdkClient.SetObject(o)
	}
}

func (o *SysmgrShutdownReq) Delete() {
	o.sdkClient.DeleteObject(o)
}

func NewSysmgrShutdownReq(sdkClient clientApi.Client) *SysmgrShutdownReq {
	w := &SysmgrShutdownReq{}
	w.sdkClient = sdkClient
	w.meta = &delphi.ObjectMeta{
		Kind: "SysmgrShutdownReq",
	}
	return w
}

func GetSysmgrShutdownReq(sdkClient clientApi.Client) *SysmgrShutdownReq {
	b := sdkClient.GetObject("SysmgrShutdownReq", "default")
	if b == nil {
		return nil
	}
	o, ok := b.(*SysmgrShutdownReq)
	if !ok {
		panic("Couldn't cast to SysmgrShutdownReq")
	}
	return o
}

func childNewSysmgrShutdownReq(parent delphiWrapper, sdkClient clientApi.Client) *SysmgrShutdownReq {
	w := NewSysmgrShutdownReq(sdkClient)
	w.parent = parent
	return w
}

func childNewSysmgrShutdownReqWithValue(parent delphiWrapper, sdkClient clientApi.Client, value *SysmgrShutdownReq) *SysmgrShutdownReq {
	w := childNewSysmgrShutdownReq(parent, sdkClient)
	return w
}

func (o *SysmgrShutdownReq) GetProtoMsg() *SysmgrShutdownReq_ {
	return &SysmgrShutdownReq_{
		Meta: o.meta,
	}
}

func (o *SysmgrShutdownReq) GetMessage() proto.Message {
	return o.GetProtoMsg()
}

func (obj *SysmgrShutdownReq) GetKeyString() string {
	return "default"
}

func (obj *SysmgrShutdownReq) TriggerEvent(oldObj clientApi.BaseObject, op delphi.ObjectOperation, rl []clientApi.BaseReactor) {
	for _, r := range rl {
		rctr, ok := r.(SysmgrShutdownReqReactor)
		if ok == false {
			panic("Not a Reactor")
		}
		if op == delphi.ObjectOperation_SetOp {
			if oldObj == nil {
				rctr.OnSysmgrShutdownReqCreate(obj)
			} else {
				rctr.OnSysmgrShutdownReqUpdate(obj)
			}
		} else {
			rctr.OnSysmgrShutdownReqDelete(obj)
		}
	}
}

type SysmgrShutdownReqReactor interface {
	OnSysmgrShutdownReqCreate(obj *SysmgrShutdownReq)
	OnSysmgrShutdownReqUpdate(obj *SysmgrShutdownReq)
	OnSysmgrShutdownReqDelete(obj *SysmgrShutdownReq)
}

func (obj *SysmgrShutdownReq) GetPath() string {
	return "SysmgrShutdownReq" + "|" + obj.GetKeyString()
}

func newSysmgrShutdownReqFromMessage(msg *SysmgrShutdownReq_) *SysmgrShutdownReq {
	return &SysmgrShutdownReq{
		meta: msg.Meta,
	}
}

func sysmgrShutdownReqFactory(sdkClient clientApi.Client, data []byte) (clientApi.BaseObject, error) {
	var msg SysmgrShutdownReq_
	err := proto.Unmarshal(data, &msg)
	if err != nil {
		return nil, err
	}
	w := newSysmgrShutdownReqFromMessage(&msg)
	w.sdkClient = sdkClient
	return w, nil
}

func SysmgrShutdownReqMount(client clientApi.Client, mode delphi.MountMode) {
	client.MountKind("SysmgrShutdownReq", mode)
}

func SysmgrShutdownReqWatch(client clientApi.Client, reactor SysmgrShutdownReqReactor) {
	client.WatchKind("SysmgrShutdownReq", reactor)
}

type SysmgrShutdownReqIterator struct {
	objects []clientApi.BaseObject
	cur     int
}

func (i *SysmgrShutdownReqIterator) Next() *SysmgrShutdownReq {
	if i.cur >= len(i.objects) {
		return nil
	}
	obj, ok := i.objects[i.cur].(*SysmgrShutdownReq)
	if !ok {
		panic("Cast error")
	}
	i.cur++
	return obj
}

func SysmgrShutdownReqList(client clientApi.Client) *SysmgrShutdownReqIterator {
	return &SysmgrShutdownReqIterator{
		objects: client.List("SysmgrShutdownReq"),
		cur:     0,
	}
}

func init() {
	proto.RegisterType((*SysmgrShutdownReq_)(nil), "sysmgr.SysmgrShutdownReq_")
	proto.RegisterType((*SysmgrShutdownStatus_)(nil), "sysmgr.SysmgrShutdownStatus_")
	proto.RegisterType((*SysmgrRebootReq_)(nil), "sysmgr.SysmgrRebootReq_")
	proto.RegisterType((*SysmgrServiceStatus_)(nil), "sysmgr.SysmgrServiceStatus_")
	clientApi.RegisterFactory("SysmgrShutdownStatus", sysmgrShutdownStatusFactory)
	clientApi.RegisterFactory("SysmgrRebootReq", sysmgrRebootReqFactory)
	clientApi.RegisterFactory("SysmgrServiceStatus", sysmgrServiceStatusFactory)
	clientApi.RegisterFactory("SysmgrShutdownReq", sysmgrShutdownReqFactory)
}

func init() { proto.RegisterFile("sysmgr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xae, 0x2c, 0xce,
	0x4d, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x54, 0xf2, 0x32,
	0x93, 0xf5, 0x53, 0x52, 0x73, 0x0a, 0x32, 0x32, 0xf5, 0xc1, 0x32, 0x30, 0x0e, 0x84, 0x82, 0xa8,
	0x56, 0x72, 0xe3, 0x12, 0x0a, 0x06, 0xab, 0x0f, 0xce, 0x28, 0x2d, 0x49, 0xc9, 0x2f, 0xcf, 0x0b,
	0x4a, 0x2d, 0x8c, 0x17, 0x52, 0xe3, 0x62, 0xf1, 0x4d, 0x2d, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x36, 0x12, 0xd2, 0x83, 0x6a, 0xf1, 0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0x01, 0xc9, 0x04, 0x81,
	0xe5, 0xad, 0x38, 0x1a, 0xa6, 0x2b, 0x31, 0x76, 0x4c, 0x57, 0x62, 0x54, 0xca, 0xe4, 0x12, 0x45,
	0x35, 0x27, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x98, 0x68, 0xa3, 0x84, 0x04, 0xb8, 0x98, 0xbd, 0x53,
	0x2b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x90, 0x48, 0x40, 0x66, 0x8a, 0x04,
	0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x88, 0x69, 0xc5, 0x02, 0xb2, 0x4e, 0x29, 0x85, 0x4b, 0x00,
	0x62, 0x55, 0x50, 0x6a, 0x52, 0x7e, 0x7e, 0x09, 0x29, 0x0e, 0x26, 0xc1, 0x96, 0x0c, 0x2e, 0x11,
	0xa8, 0x87, 0x52, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x69, 0xe6, 0x9f, 0x24, 0x36, 0x70, 0x4c, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x6d, 0xec, 0xdb, 0xc7, 0x01, 0x00, 0x00,
}
