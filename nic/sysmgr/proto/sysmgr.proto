syntax = "proto3";

package sysmgr;

import "delphi.proto";

message SysmgrShutdownReq {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta  = 1;
    string                 Key   = 2;
}

message SysmgrShutdownStatus {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta  = 1;
    string                 Key   = 2;
    int32                  Pid   = 3;
}

message SysmgrRebootReq {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta  = 1;
    string                 Key   = 2;
    int32                  Pid   = 3;
}

message SysmgrRespawnReq {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta  = 1;
    string                 Key   = 2;
    int32                  Pid   = 3;
}

message SysmgrServiceStatus {
    option (delphi.update_event) = true;
    delphi.ObjectMeta      Meta  = 1;
    string                 Key   = 2;
    int32                  Pid   = 3;
}

message SysmgrServiceSpec {
    option (delphi.update_event)         = true;
    delphi.ObjectMeta      Meta          = 1;
    string                 Key           = 2;
    string                 Command       = 3;
    repeated string        Dependencies  = 4;
    repeated string        Environment   = 5;
    bool                   DelphiService = 7;
    bool                   Restartable   = 8;
}

enum ProcessState {
    Waiting  = 0;
    Ready    = 1;
    Launched = 2;
    Running  = 3;
    Died     = 4;
}

message SysmgrProcessStatus {
    option (delphi.update_event)      = true;
    delphi.ObjectMeta      Meta       = 1;
    string                 Key        = 2;
    int32                  Pid        = 3;
    ProcessState           State      = 4;
    string                 ExitReason = 5;
}

enum SystemState {
    Normal = 0;
    Fault  = 1;
}

message SysmgrSystemStatus {
    option (delphi.update_event)  = true;
    option (delphi.singleton)     = true;
    delphi.ObjectMeta      Meta   = 1;
    SystemState            State  = 2;
    string                 Reason = 3;
}
