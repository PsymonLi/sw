HAL Coding Style (C/C++/protobuf only):

1) Except for the protobuf generated files, don't use camel case for
   anything including class names, function names, variable names etc.
2) For global variables, use g_ prefix
3) For constants (that are not macros), you can use k_ prefix
4) For private variables in classes and structures, use _ as suffix and
   expose get/set methods
5) Don't expose a constructor for a class as is, use factory method
   instead. There are several benefits to this approach over using
   constructor directly:
  a) we can use in place constructors in these factory methods where
    memory is coming from slabs instead of heap
  b) we can detect memory allocation failures and return NULL, which
    a constructor can't do
  c) if class instantiation fails in the middle (some buffers are allocated but
    some other failed), we can back off and unitialize cleanly
6) Don't use malloc()/calloc() anywhere, instead use HAL_MALLOC instead
   a) we may endup overloading new operator eventually to track allocs and frees
      to pin point mem leaks
   b) same goes with direct usage of new, ideally we should do HAL_MALLOC and
      use inplace constructor instead
   c) refer to hal.hpp file
7) Use HAL_ASSERT_XXX() macros defined in hal.hpp instead of directly using
   assert()
8) For protobuf, use 2 space indentation (not 4 space)
9) For C/C++, use 4 space indentation
10) NO tabs (except probably Makefile)
11) No blank spaces at the end of each line
12) Don't use C++ STL or boost etc. in the config or data path unless you are
    absolutely sure that there is no other way to do it. For example, it is ok
    to parse some config files in .json when HAL starts
13) Don't use fancy C++ features that come with performance penalty e.g.,
    virtual functions etc. in the data path. C like C++ is perfectly fine
14) Namespce your code, double namespacing is perfectly fine too !!
    e.g., hal::utils, hal::pd etc.
15) Make sure each header file can compile fully by itself, i.e., each header
    file should include all header files it depends on. Ensure there are no
    circular dependencies
