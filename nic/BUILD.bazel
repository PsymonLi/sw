package(default_visibility = ["//visibility:public"])

licenses(["notice"])  # MIT license

load("//nic/bazel:common_deps.bzl", "csr_copts")
load("//nic/bazel:common_deps.bzl", "csr_defines_copts")

config_setting(
   name = "gft",
   values = { "define": "p4pipeline=gft" }
)

cc_library(
    name = "iris_p4pd",
    srcs = [
            "build/iris/gen/datapath/p4/src/p4pd.cc",
            "build/iris/gen/datapath/p4/src/p4pd_table_range.cc"],
    hdrs = [
        "build/iris/gen/datapath/p4/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "gft_p4pd",
    srcs = [
            "gen/gft/src/p4pd.cc",
            "gen/gft/src/p4pd_table_range.cc"],
    hdrs = [
        "gen/gft/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "apollo_p4pd",
    srcs = [
            "gen/apollo/src/p4pd.cc",
            "gen/apollo/src/p4pd_table_range.cc"],
    hdrs = [
        "gen/apollo/include/p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "apollo_txdma",
    srcs = ["gen/apollo_txdma/src/apollo_txdma_p4pd.cc",
            "gen/apollo_txdma/src/apollo_txdma_p4pd_table_range.cc"],
    hdrs = [
        "gen/apollo_txdma/include/apollo_txdma_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "apollo_rxdma",
    srcs = ["gen/apollo_rxdma/src/apollo_rxdma_p4pd.cc",
            "gen/apollo_rxdma/src/apollo_rxdma_p4pd_table_range.cc"],
    hdrs = [
        "gen/apollo_rxdma/include/apollo_rxdma_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_txdma",
    srcs = ["gen/common_txdma_actions/src/common_txdma_actions_p4pd.cc",
            "gen/common_txdma_actions/src/common_txdma_actions_p4pd_table_range.cc"],
    hdrs = [
        "gen/common_txdma_actions/include/common_txdma_actions_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_rxdma",
    srcs = ["gen/common_rxdma_actions/src/common_rxdma_actions_p4pd.cc",
            "gen/common_rxdma_actions/src/common_rxdma_actions_p4pd_table_range.cc"],
    hdrs = [
        "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
    name = "p4pluspd_storage_seq",
    srcs = ["gen/storage_seq/src/storage_seq_p4pd.cc",
            "gen/storage_seq/src/storage_seq_p4plus_entry_packing.cc"],
    hdrs = [
        "gen/storage_seq/include/storage_seq_p4pd.h",
    ],
    deps = [
        "//nic/include:base_includes",
    ],
)

cc_library(
        name = "gen_common_includes",
        srcs = [],
        hdrs =  [
                "gen/common_txdma_actions/include/common_txdma_actions_p4pd_table.h",
                "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd_table.h",
                "gen/common_txdma_actions/include/common_txdma_actions_p4pd.h",
                "gen/common_rxdma_actions/include/common_rxdma_actions_p4pd.h",
                ],
        deps = ["//nic/include:base_includes"],
)

cc_library(
        name = "gen_p4plus_includes",
        srcs = [],
        hdrs =  [
                "gen/tcp_proxy_rxdma/include/tcp_proxy_rxdma_p4plus_ingress.h",
                "gen/tcp_proxy_txdma/include/tcp_proxy_txdma_p4plus_ingress.h",
                "gen/tls_txdma_pre_crypto_enc/include/tls_txdma_pre_crypto_enc_p4plus_ingress.h",
                "gen/tls_txdma_post_crypto_enc/include/tls_txdma_post_crypto_enc_p4plus_ingress.h",
                "gen/cpu_rxdma/include/cpu_rxdma_p4plus_ingress.h",
                "gen/cpu_txdma/include/cpu_txdma_p4plus_ingress.h",
                "gen/gc_txdma/include/gc_txdma_p4plus_ingress.h",
                "gen/rawr_rxdma/include/rawr_rxdma_p4plus_ingress.h",
                "gen/rawc_txdma/include/rawc_txdma_p4plus_ingress.h",
                "gen/proxyr_txdma/include/proxyr_txdma_p4plus_ingress.h",
                "gen/proxyc_txdma/include/proxyc_txdma_p4plus_ingress.h",
                "gen/esp_ipv4_tunnel_h2n_rxdma/include/esp_ipv4_tunnel_h2n_rxdma_p4plus_ingress.h",
                "gen/esp_v4_tunnel_n2h_rxdma/include/esp_v4_tunnel_n2h_rxdma_p4plus_ingress.h",
                ],
        deps = ["//nic/include:base_includes"],
)

cc_library(
        name = "gen_iris_includes",
        srcs = [],
        hdrs =  [
            "build/iris/gen/datapath/p4/include/p4pd.h",
            "build/iris/gen/datapath/p4/include/p4plus_egress.h",
            "build/iris/gen/datapath/p4/include/p4plus_ingress.h",
            "build/iris/gen/datapath/p4/include/p4pd_table.h",
            "gen/tcp_proxy_txdma/include/ingress_phv.h",
            "gen/tcp_proxy_rxdma/include/ingress_phv.h",
            "build/iris/gen/datapath/p4/include/ingress_phv.h",
            "build/iris/gen/datapath/p4/include/egress_phv.h",
        ],
        deps = ["//nic/include:base_includes"],
)

cc_library(
    name = "gen_gft_includes",
    srcs = [],
    hdrs = [
            "gen/gft/include/p4pd.h",
            "gen/gft/include/p4plus_egress.h",
            "gen/gft/include/p4plus_ingress.h",
            "gen/gft/include/p4pd_table.h",
        ],
    deps = ["//nic/include:base_includes"],
)

cc_library(
    name = "hal_svc_nw_gen",
    srcs = glob(["gen/hal/svc/nw/*.cc", "gen/hal/svc/nw/*.hpp"]),
    hdrs = glob(["gen/hal/svc/nw/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/hal:hal_src",
        "//nic/include:base_includes",
        "//nic:spdlog",
        "//nic:grpc_includes",
    ],
)

cc_library(
    name = "hal_svc_gen_nw_includes",
    srcs = glob(["gen/hal/svc/nw/*.hpp"]),
    hdrs = glob(["gen/hal/svc/nw/*.hpp"]),
    deps = [
        "//nic:gen_proto_includes",
        "//nic/include:base_includes",
        "//nic:grpc_includes",
    ],
)

cc_library(
    name = "gen_proto_includes",
    srcs = [
    ] + glob(["gen/proto/hal/*.hpp"]),
    hdrs = glob([
        "gen/proto/hal/*.hpp",
        "gen/proto/hal/*.h",
    ]),
    includes = [
            "gen/proto/hal",
            ],
    deps = [
        "//nic/delphi/proto/delphi:delphi_cc_proto",
    ]
)

cc_library(
    name = "liblinkmgr",
    srcs = [
        "conf/linkmgr/liblinkmgr.so",
    ],
)

cc_library(
    name = "liblinkmgr_csr",
    srcs = [
        "conf/linkmgr/liblinkmgr_csr.so"
    ],
)

cc_library(
    name = "grpc",
    deps = ["//nic/hal/third-party:grpc"],
)

cc_library(
    name = "libprotobuf",
    deps = ["//nic/hal/third-party:libprotobuf"],
)

cc_library(
    name = "grpc_includes",
    deps = ["//nic/hal/third-party:grpc_includes"],
)

cc_library(
    name = "google_includes",
    deps = ["//nic/hal/third-party:google_includes"],
)

cc_library(
    name = "spdlog",
    deps = ["//nic/hal/third-party:spdlog"],
)

cc_library(
    name = "boost",
    deps = ["@third_party//:boost"],
)

cc_library(
    name = "libaapl",
    deps = ["@sdk//:libaapl"],
)

cc_library(
    name = "lkl_includes",
    deps = ["//nic/hal/third-party:lkl_includes"],
)

cc_library(
    name = "lkl",
    deps = ["//nic/hal/third-party:lkl"],
)

cc_library(
    name = "openssl",
    deps = ["//nic/hal/third-party:openssl"],
)

cc_library(
    name = "openssl-native",
    deps = ["//nic/hal/third-party:openssl-native"],
)

cc_library(
    name = "snort3",
    deps = ["//nic/hal/third-party:snort3"],
)

cc_library(
    name = "libtirpc",
    deps = ["//nic/hal/third-party:libtirpc"],
)

cc_library(
    name = "libtins",
    deps = ["//nic/hal/third-party:libtins"],
)

cc_library(
    name = "libzmq",
    deps = ["//nic/hal/third-party:libzmq"],
)

cc_library(
    name = "zmq_includes",
    deps = ["//nic/hal/third-party:zmq_includes"],
)

cc_library(
    name = "libsknobs",
    deps = ["//nic/hal/third-party:libsknobs"],
)

cc_library(
    name = "liblif",
    srcs = ["conf/plugins/lif/liblif.so"],
)

config_setting(
    name = "aarch64_mode",
    values = { "cpu": "aarch64-linux" }
)

# Used by dol/test/storage/BUILD
cc_library(
    name = "compression_asic_hdrs",
    hdrs = [
        "asic/capri/design/common/cap_addr_define.h",
        "asic/capri/model/cap_he/readonly/cap_hens_csr_define.h",
        "asic/capri/model/cap_txs/cap_txs_csr_define.h",
    ],
)

# Used by platform builds
cc_library(
    name = "platform_asic_hdrs",
    hdrs = [
        "asic/capri/design/common/cap_addr_define.h",
        "asic/capri/model/cap_top/cap_top_csr_defines.h",
        "asic/capri/model/cap_he/readonly/cap_hens_csr_define.h",
        "asic/capri/model/cap_txs/cap_txs_csr_define.h",
        "asic/capri/model/cap_top/csr_defines/cap_pics_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_intr_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_wa_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_pxb_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_mc_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_ms_c_hdr.h",
        "asic/capri/model/cap_top/csr_defines/cap_pp_c_hdr.h",
    ],
)

exports_files(["tools/ncc/tenjin_wrapper.py",
               "asic/capri/verif/common/csr_gen/pbc.yaml"])
