#! /bin/bash

TOOLS_DIR=`dirname $0`
ABS_TOOLS_DIR=`readlink -f $TOOLS_DIR`
export NIC_DIR=`dirname $ABS_TOOLS_DIR`

#Parse Command line options first.
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "I?m sorry, `getopt --test` failed in this environment."
    exit 1
fi

OPTIONS="kilc:s:t:r:"
LONGOPTIONS="keep-data,configfile:,run-time:,skip-target:;ignore-errors,modellogs,run-only:,skip-asm-ins-stats"

PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    # e.g. $? == 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi

eval set -- "$PARSED"

# now enjoy the options in order and nicely split until we see --
config_file="coverage.json"
max_job_run_time=60 #60 minutes to monitor a job.
keep_data=0
ignore_errors=0
enable_model_logs=0
skip_targets=()
while true; do
    case "$1" in
        -k |--keep-data)
            keep_data=1
            shift
            ;;
        -s|--skip-target)
            skip_targets+=($2)
            shift 2
            ;;
        -c|--config-file)
            config_file=$2
            shift 2
            ;;
        -r|--run-only)
            run_only=$2
            shift 2
            ;;
        -t|--run-time)
            max_job_run_time=$2
            shift 2
            ;;
        -i|--ignore-errors)
            ignore_errors=1
            shift
            ;;
        --skip-asm-ins-stats)
            export SKIP_ASM_INS_STATS=--skip-asm-ins-stats
            shift
            ;;
        -l|--modellogs)
            enable_model_logs=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

export COVERAGE_CONFIG_PATH=$NIC_DIR/conf/
export COVERAGE_OUTPUT=$NIC_DIR/coverage
export BULLSEYE_MODEL_COVERAGE_FILE=$COVERAGE_OUTPUT/bullseye_model.cov
export BULLSEYE_HTML_OUTPUT_DIR=$COVERAGE_OUTPUT/bullseye_model_coverage

export BULLSEYE_HAL_COVERAGE_FILE=$NIC_DIR/../bazel-out/../../bullseye_hal.cov
export BULLSEYE_HAL_HTML_OUTPUT_DIR=$COVERAGE_OUTPUT/bullseye_hal_coverage
export BULLSEYE_HAL_FILTER_COVERAGE_FILE=$COVERAGE_CONFIG_PATH/bullseye/hal_filter.txt


if [ $keep_data -eq 0 ];then
    rm -rf $COVERAGE_OUTPUT
    rm -f $MPU_COV_DUMP_FILE
fi

if [ $ignore_errors -eq 1 ];then
    export IGNORE_ERRORS=--ignore-errors
fi

if [ $enable_model_logs -eq 1 ];then
    export MODEL_LOGGING_ENABLED=1
fi

if [[ -v run_only ]];then
    export RUN_ONLY="--run-only $run_only"
fi

export MPU_COV_DUMP_FILE=$NIC_DIR/coverage/asm_cov.dump
export MPU_PC_COV_DUMP_DIR=$NIC_DIR/coverage/asm_out_all

#Remove mpu coverage dump file as its incremental.
mkdir -p $MPU_PC_COV_DUMP_DIR

export CAPCOV=$NIC_DIR/asic/capri/model/capsim-gen/bin/capcov
export CAPRI_LOADER_CONF=$NIC_DIR/gen/capri_loader.conf
export GCOVR=$NIC_DIR/third-party/gcovr-3.3/scripts/gcovr
export BULLSEYE_COVHTML=/home/asic/tools/eda/bullseye/bin/covhtml
export BULLSEYE_COVSELECT=/home/asic/tools/eda/bullseye/bin/covselect
export GEN_DIR=$NIC_DIR/gen

if [ ${#skip_targets[@]} -eq 0 ]; then
    $NIC_DIR/tools/gen_dol_cov_run.py
else
    $NIC_DIR/tools/gen_dol_cov_run.py --skip-targets ${skip_targets[@]}
fi

OUT=$?
if [ $OUT -ne 0 ];then
   echo "Dol coverage run generation failed!"
   exit 1
fi
set -o pipefail

#Set up locale encoding for pipenv
localedef -v -c -i en_US -f UTF-8 en_US.UTF-8
export LANG=en_US.UTF-8
#Install Virtual Env if not installed before.
pip3 install --user pipenv
#Setup path for Pipenv
export PATH=$PATH:~/.local/bin/
#Install Pandas 
pip3 freeze > /tmp/requirements.txt                             
pipenv install -r /tmp/requirements.txt      
pipenv install pandas

pipenv run python3 $NIC_DIR/tools/gcov/run.py $SKIP_ASM_INS_STATS $IGNORE_ERRORS --config $config_file --max-job-run-time  $max_job_run_time $RUN_ONLY 2>&1 | tee $NIC_DIR/coverage.log
OUT=$?
if [ $OUT -ne 0 ];then
   echo "Coverage run failed."
   exit 1
fi
rm -f $MPU_COV_DUMP_FILE
