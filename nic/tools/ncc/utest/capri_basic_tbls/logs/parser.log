INFO::INGRESS States: 6
DEBUG::INGRESS: States ['start', 'parse_ethernet', 'parse_ipv6', 'parse_ipv4', 'parse_udp', 'parse_tcp']
INFO::INGRESS: Total Headers : 6
INFO::Total Fixed Headers size: 119 Bytes
DEBUG::Headers: [p4_header_instance.capri_intrinsic, p4_header_instance.ethernet, p4_header_instance.ipv6, p4_header_instance.ipv4, p4_header_instance.udp, p4_header_instance.tcp]
DEBUG::terminate - remove mis-aligned ohi field ipv6.version
DEBUG::terminate - remove mis-aligned ohi field ipv6.trafficClass
DEBUG::INGRESS:OHI OrderedDict([(p4_header_instance.ethernet, [[-1,-1]:(6, 8),]), (p4_header_instance.ipv6, [[-1,-1]:(4, 20),]), (p4_header_instance.ipv4, [[-1,-1]:(0, 4),, [-1,-1]:(6, 2),, [-1,-1]:(9, 7),]), (p4_header_instance.udp, [[-1,-1]:(0, 2),, [-1,-1]:(4, 4),]), (p4_header_instance.tcp, [[-1,-1]:(0, 20),])])
INFO::INGRESS: Totals extracted fields 55, ohi_fields 28, union_fields 0
INFO::INGRESS: Total parse paths 7
INFO::INGRESS: Longest parse path = 4 states
DEBUG::INGRESS: Longest parse path(4)=[start, parse_ethernet, parse_ipv4, parse_tcp]
INFO::EGRESS States: 6
DEBUG::EGRESS: States ['start', 'parse_ethernet', 'parse_ipv6', 'parse_ipv4', 'parse_udp', 'parse_tcp']
INFO::EGRESS: Total Headers : 6
INFO::Total Fixed Headers size: 119 Bytes
DEBUG::Headers: [p4_header_instance.capri_intrinsic, p4_header_instance.ethernet, p4_header_instance.ipv6, p4_header_instance.ipv4, p4_header_instance.udp, p4_header_instance.tcp]
DEBUG::EGRESS:OHI OrderedDict([(p4_header_instance.ethernet, [[-1,-1]:(0, 14),]), (p4_header_instance.ipv6, [[-1,-1]:(0, 40),]), (p4_header_instance.ipv4, [[-1,-1]:(0, 20),]), (p4_header_instance.udp, [[-1,-1]:(0, 8),]), (p4_header_instance.tcp, [[-1,-1]:(0, 20),])])
INFO::EGRESS: Totals extracted fields 55, ohi_fields 37, union_fields 0
INFO::EGRESS: Total parse paths 7
INFO::EGRESS: Longest parse path = 4 states
DEBUG::EGRESS: Longest parse path(4)=[start, parse_ethernet, parse_ipv4, parse_tcp]
DEBUG::INGRESS:OHI OrderedDict([(p4_header_instance.ethernet, [[-1,-1]:(6, 8),]), (p4_header_instance.ipv6, [[-1,-1]:(4, 20),]), (p4_header_instance.ipv4, [[-1,-1]:(6, 2),, [-1,-1]:(9, 7),]), (p4_header_instance.udp, [[-1,-1]:(0, 2),, [-1,-1]:(4, 4),]), (p4_header_instance.tcp, [[-1,-1]:(0, 20),])])
INFO::INGRESS:Max ohi used 3
DEBUG::Max ohi path [p4_header_instance.capri_intrinsic, p4_header_instance.ethernet, p4_header_instance.ipv4, p4_header_instance.tcp]
DEBUG::INGRESS: OHI allocation OrderedDict([(p4_header_instance.ethernet, [[0,-1]:(6, 8),]), (p4_header_instance.ipv6, [[1,-1]:(4, 20),]), (p4_header_instance.ipv4, [[1,-1]:(6, 2),, [-1,-1]:(9, 7),]), (p4_header_instance.udp, [[2,-1]:(0, 2),, [-1,-1]:(4, 4),]), (p4_header_instance.tcp, [[2,-1]:(0, 20),])])
DEBUG::EGRESS:OHI OrderedDict([(p4_header_instance.ethernet, [[-1,-1]:(0, 14),]), (p4_header_instance.ipv6, [[-1,-1]:(0, 40),]), (p4_header_instance.ipv4, [[-1,-1]:(0, 20),]), (p4_header_instance.udp, [[-1,-1]:(0, 8),]), (p4_header_instance.tcp, [[-1,-1]:(0, 20),])])
INFO::EGRESS:Max ohi used 3
DEBUG::Max ohi path [p4_header_instance.capri_intrinsic, p4_header_instance.ethernet, p4_header_instance.ipv4, p4_header_instance.tcp]
DEBUG::EGRESS: OHI allocation OrderedDict([(p4_header_instance.ethernet, [[0,-1]:(0, 14),]), (p4_header_instance.ipv6, [[1,-1]:(0, 40),]), (p4_header_instance.ipv4, [[1,-1]:(0, 20),]), (p4_header_instance.udp, [[2,-1]:(0, 8),]), (p4_header_instance.tcp, [[2,-1]:(0, 20),])])
DEBUG::INGRESS:parse_udp Marked as END
DEBUG::INGRESS:parse_tcp Marked as END
DEBUG::State: start: key_size 4
DEBUG::INGRESS:start Build l2p keymap size 4
DEBUG::INGRESS:start Create key map for __current_x_y koff 0 size 4 phys_off 0 roff 0
DEBUG::State LKP_FLDS: start: lkp_flds [
__current_x_y FLD_PKT pkt_off 0 len 4 key_off 0]
DEBUG::State LKP_REGS: start: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 0, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
__current_x_y FLD_PKT pkt_off 0 len 4 key_off 0, 0, 4))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:start extract_len 17
DEBUG::State: parse_ethernet: key_size 16
DEBUG::INGRESS:parse_ethernet Build l2p keymap size 16
DEBUG::INGRESS:parse_ethernet Create key map for ethernet.etherType koff 0 size 16 phys_off 0 roff 0
DEBUG::State LKP_FLDS: parse_ethernet: lkp_flds [
ethernet.etherType FLD_PKT pkt_off 96 len 16 key_off 0]
DEBUG::State LKP_REGS: parse_ethernet: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 96, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ethernet.etherType FLD_PKT pkt_off 96 len 16 key_off 0, 0, 16))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:parse_ethernet extract_len 14
DEBUG::State: parse_ipv6: key_size 8
DEBUG::INGRESS:parse_ipv6 Build l2p keymap size 8
DEBUG::INGRESS:parse_ipv6 Create key map for ipv6.nextHdr koff 0 size 8 phys_off 0 roff 0
DEBUG::State LKP_FLDS: parse_ipv6: lkp_flds [
ipv6.nextHdr FLD_PKT pkt_off 48 len 8 key_off 0]
DEBUG::State LKP_REGS: parse_ipv6: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 48, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ipv6.nextHdr FLD_PKT pkt_off 48 len 8 key_off 0, 0, 8))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:parse_ipv6 extract_len 40
DEBUG::State: parse_ipv4: key_size 21
DEBUG::INGRESS:parse_ipv4 Build l2p keymap size 21
DEBUG::INGRESS:parse_ipv4 Create key map for ipv4.fragOffset koff 0 size 13 phys_off 0 roff 3
DEBUG::INGRESS:parse_ipv4 Create key map for ipv4.protocol koff 13 size 8 phys_off 16 roff 0
DEBUG::State LKP_FLDS: parse_ipv4: lkp_flds [
ipv4.fragOffset FLD_PKT pkt_off 51 len 13 key_off 0, 
ipv4.protocol FLD_PKT pkt_off 72 len 8 key_off 13]
DEBUG::State LKP_REGS: parse_ipv4: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 48, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(3, (
ipv4.fragOffset FLD_PKT pkt_off 51 len 13 key_off 0, 0, 13))]), 
type lkp_reg_type.LKP_REG_PKT pkt_off 72, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ipv4.protocol FLD_PKT pkt_off 72 len 8 key_off 13, 0, 8))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:parse_ipv4 extract_len 20
DEBUG::State: parse_udp: key_size 0
DEBUG::INGRESS:parse_udp Build l2p keymap size 0
DEBUG::State LKP_FLDS: parse_udp: lkp_flds []
DEBUG::State LKP_REGS: parse_udp: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:parse_udp extract_len 8
DEBUG::State: parse_tcp: key_size 0
DEBUG::INGRESS:parse_tcp Build l2p keymap size 0
DEBUG::State LKP_FLDS: parse_tcp: lkp_flds []
DEBUG::State LKP_REGS: parse_tcp: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:parse_tcp extract_len 20
DEBUG::State: __END__: key_size 0
DEBUG::INGRESS:__END__ Build l2p keymap size 0
DEBUG::State LKP_FLDS: __END__: lkp_flds []
DEBUG::State LKP_REGS: __END__: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::INGRESS:__END__ extract_len 0
DEBUG::parse_ethernet:extraction_tuples=[(0, 17, 0), (17, 6, 64)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 0', 'pkt_off 4, bytes 4, phc 4', 'pkt_off 8, bytes 4, phc 8', 'pkt_off 12, bytes 4, phc 12', 'pkt_off 16, bytes 1, phc 16', 'pkt_off 17, bytes 4, phc 64', 'pkt_off 21, bytes 2, phc 68']
DEBUG::parse_ipv6:extraction_tuples=[(0, 4, 70), (24, 16, 74)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 70', 'pkt_off 24, bytes 4, phc 74', 'pkt_off 28, bytes 4, phc 78', 'pkt_off 32, bytes 4, phc 82', 'pkt_off 36, bytes 4, phc 86']
DEBUG::parse_ipv4:extraction_tuples=[(0, 6, 90), (8, 1, 96), (16, 4, 97)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 90', 'pkt_off 4, bytes 2, phc 94', 'pkt_off 8, bytes 1, phc 96', 'pkt_off 16, bytes 4, phc 97']
DEBUG::parse_udp:extraction_tuples=[(2, 2, 101)]
DEBUG::Extract instructions : ['pkt_off 2, bytes 2, phc 101']
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::EGRESS:parse_udp Marked as END
DEBUG::EGRESS:parse_tcp Marked as END
DEBUG::State: start: key_size 4
DEBUG::EGRESS:start Build l2p keymap size 4
DEBUG::EGRESS:start Create key map for __current_x_y koff 0 size 4 phys_off 0 roff 0
DEBUG::State LKP_FLDS: start: lkp_flds [
__current_x_y FLD_PKT pkt_off 0 len 4 key_off 0]
DEBUG::State LKP_REGS: start: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 0, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
__current_x_y FLD_PKT pkt_off 0 len 4 key_off 0, 0, 4))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:start extract_len 17
DEBUG::State: parse_ethernet: key_size 16
DEBUG::EGRESS:parse_ethernet Build l2p keymap size 16
DEBUG::EGRESS:parse_ethernet Create key map for ethernet.etherType koff 0 size 16 phys_off 0 roff 0
DEBUG::State LKP_FLDS: parse_ethernet: lkp_flds [
ethernet.etherType FLD_PKT pkt_off 96 len 16 key_off 0]
DEBUG::State LKP_REGS: parse_ethernet: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 96, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ethernet.etherType FLD_PKT pkt_off 96 len 16 key_off 0, 0, 16))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:parse_ethernet extract_len 14
DEBUG::State: parse_ipv6: key_size 8
DEBUG::EGRESS:parse_ipv6 Build l2p keymap size 8
DEBUG::EGRESS:parse_ipv6 Create key map for ipv6.nextHdr koff 0 size 8 phys_off 0 roff 0
DEBUG::State LKP_FLDS: parse_ipv6: lkp_flds [
ipv6.nextHdr FLD_PKT pkt_off 48 len 8 key_off 0]
DEBUG::State LKP_REGS: parse_ipv6: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 48, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ipv6.nextHdr FLD_PKT pkt_off 48 len 8 key_off 0, 0, 8))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:parse_ipv6 extract_len 40
DEBUG::State: parse_ipv4: key_size 21
DEBUG::EGRESS:parse_ipv4 Build l2p keymap size 21
DEBUG::EGRESS:parse_ipv4 Create key map for ipv4.fragOffset koff 0 size 13 phys_off 0 roff 3
DEBUG::EGRESS:parse_ipv4 Create key map for ipv4.protocol koff 13 size 8 phys_off 16 roff 0
DEBUG::State LKP_FLDS: parse_ipv4: lkp_flds [
ipv4.fragOffset FLD_PKT pkt_off 51 len 13 key_off 0, 
ipv4.protocol FLD_PKT pkt_off 72 len 8 key_off 13]
DEBUG::State LKP_REGS: parse_ipv4: lkp_regs [
type lkp_reg_type.LKP_REG_PKT pkt_off 48, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(3, (
ipv4.fragOffset FLD_PKT pkt_off 51 len 13 key_off 0, 0, 13))]), 
type lkp_reg_type.LKP_REG_PKT pkt_off 72, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict([(0, (
ipv4.protocol FLD_PKT pkt_off 72 len 8 key_off 13, 0, 8))]), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:parse_ipv4 extract_len 20
DEBUG::State: parse_udp: key_size 0
DEBUG::EGRESS:parse_udp Build l2p keymap size 0
DEBUG::State LKP_FLDS: parse_udp: lkp_flds []
DEBUG::State LKP_REGS: parse_udp: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:parse_udp extract_len 8
DEBUG::State: parse_tcp: key_size 0
DEBUG::EGRESS:parse_tcp Build l2p keymap size 0
DEBUG::State LKP_FLDS: parse_tcp: lkp_flds []
DEBUG::State LKP_REGS: parse_tcp: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:parse_tcp extract_len 20
DEBUG::State: __END__: key_size 0
DEBUG::EGRESS:__END__ Build l2p keymap size 0
DEBUG::State LKP_FLDS: __END__: lkp_flds []
DEBUG::State LKP_REGS: __END__: lkp_regs [
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict(), 
type lkp_reg_type.LKP_REG_NONE pkt_off -1, is_key False, store_en False, expr None, first_pkt_fld None flds OrderedDict()]
DEBUG::EGRESS:__END__ extract_len 0
DEBUG::parse_ethernet:extraction_tuples=[(0, 17, 0)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 0', 'pkt_off 4, bytes 4, phc 4', 'pkt_off 8, bytes 4, phc 8', 'pkt_off 12, bytes 4, phc 12', 'pkt_off 16, bytes 1, phc 16']
DEBUG::parse_ipv6:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::parse_ipv4:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::parse_udp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
INFO::INGRESS:Parser Output Generation:
DEBUG::INGRESS:start[1]->parse_ethernet[2]
DEBUG::INGRESS:fill_sram_entry for parse_ethernet + start
DEBUG::parse_ethernet:extraction_tuples=[(0, 17, 0), (17, 6, 64)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 0', 'pkt_off 4, bytes 4, phc 4', 'pkt_off 8, bytes 4, phc 8', 'pkt_off 12, bytes 4, phc 12', 'pkt_off 16, bytes 1, phc 16', 'pkt_off 17, bytes 4, phc 64', 'pkt_off 21, bytes 2, phc 68']
DEBUG::OHI instruction[0]: off 23, len 8
DEBUG::INGRESS:parse_ethernet:Flit # 0
DEBUG::TCAM-decoder[0] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x1, y_state = 0x1fe
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[0] - 
action = 0, nxt_state = 2, offset_inst: sel 0, mux_sel 0, val 31 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,4) -> phv(0), extract_inst[1] = pkt(4,4) -> phv(4), extract_inst[2] = pkt(8,4) -> phv(8), extract_inst[3] = pkt(12,4) -> phv(12), extract_inst[4] = pkt(16,1) -> phv(16), extract_inst[5] = pkt(17,4) -> phv(64), extract_inst[6] = pkt(21,2) -> phv(68), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 3
Total meta_inst 1
ohi_inst[0]: ohi[0] = current_off + 23
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 29]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ethernet[2]->parse_ipv4[4]
DEBUG::INGRESS:fill_sram_entry for parse_ipv4 + None
DEBUG::parse_ipv4:extraction_tuples=[(0, 6, 90), (8, 1, 96), (16, 4, 97)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 90', 'pkt_off 4, bytes 2, phc 94', 'pkt_off 8, bytes 1, phc 96', 'pkt_off 16, bytes 4, phc 97']
DEBUG::OHI instruction[1]: off 6, len 2
DEBUG::INGRESS:parse_ipv4:Flit # 0
DEBUG::TCAM-decoder[1] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x800, 	y_lkp_val[0] = 0xf7ff
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[1] - 
action = 0, nxt_state = 4, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[1], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,4) -> phv(90), extract_inst[1] = pkt(4,2) -> phv(94), extract_inst[2] = pkt(8,1) -> phv(96), extract_inst[3] = pkt(16,4) -> phv(97), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 8
Total meta_inst 1
ohi_inst[0]: ohi[1] = current_off + 6
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 6]
mux_idx[1] = pkt[current_off + 9]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ethernet[2]->parse_ipv6[3]
DEBUG::INGRESS:fill_sram_entry for parse_ipv6 + None
DEBUG::parse_ipv6:extraction_tuples=[(0, 4, 70), (24, 16, 74)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 70', 'pkt_off 24, bytes 4, phc 74', 'pkt_off 28, bytes 4, phc 78', 'pkt_off 32, bytes 4, phc 82', 'pkt_off 36, bytes 4, phc 86']
DEBUG::OHI instruction[1]: off 4, len 20
DEBUG::INGRESS:parse_ipv6:Flit # 0
DEBUG::TCAM-decoder[2] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x86dd, 	y_lkp_val[0] = 0x7922
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[2] - 
action = 0, nxt_state = 3, offset_inst: sel 0, mux_sel 0, val 40 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,4) -> phv(70), extract_inst[1] = pkt(24,4) -> phv(74), extract_inst[2] = pkt(28,4) -> phv(78), extract_inst[3] = pkt(32,4) -> phv(82), extract_inst[4] = pkt(36,4) -> phv(86), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 4
Total meta_inst 1
ohi_inst[0]: ohi[1] = current_off + 4
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 6]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ethernet[2]->__END__[7]
DEBUG::INGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::INGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::INGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[3] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[3] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv6[3]->parse_tcp[6]
DEBUG::INGRESS:fill_sram_entry for parse_tcp + None
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 20
DEBUG::INGRESS:parse_tcp:End State: OHI instruction[1] 48 len 20
DEBUG::INGRESS:parse_tcp:No PHV writes in this state
DEBUG::TCAM-decoder[4] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x600, 	y_lkp_val[0] = 0xf900
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[4] - 
action = 1, nxt_state = 6, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 32
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 20
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv6[3]->parse_udp[5]
DEBUG::INGRESS:fill_sram_entry for parse_udp + None
DEBUG::parse_udp:extraction_tuples=[(2, 2, 101)]
DEBUG::Extract instructions : ['pkt_off 2, bytes 2, phc 101']
DEBUG::OHI instruction[2]: off 0, len 2
DEBUG::INGRESS:parse_udp:End State: OHI instruction[1] 48 len 8
DEBUG::INGRESS:parse_udp:Flit # 0
DEBUG::TCAM-decoder[5] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x1100, 	y_lkp_val[0] = 0xee00
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[5] - 
action = 1, nxt_state = 5, offset_inst: sel 0, mux_sel 0, val 8 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(2,2) -> phv(101), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 16
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 8
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv6[3]->__END__[7]
DEBUG::INGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::INGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::INGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[6] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[6] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv4[4]->parse_tcp[6]
DEBUG::INGRESS:fill_sram_entry for parse_tcp + None
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 20
DEBUG::INGRESS:parse_tcp:End State: OHI instruction[1] 48 len 20
DEBUG::INGRESS:parse_tcp:No PHV writes in this state
DEBUG::TCAM-decoder[7] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x1fff
x_lkp_val[1] = 0x600, 	y_lkp_val[1] = 0xf900
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[7] - 
action = 1, nxt_state = 6, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 32
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 20
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv4[4]->parse_udp[5]
DEBUG::INGRESS:fill_sram_entry for parse_udp + None
DEBUG::parse_udp:extraction_tuples=[(2, 2, 101)]
DEBUG::Extract instructions : ['pkt_off 2, bytes 2, phc 101']
DEBUG::OHI instruction[2]: off 0, len 2
DEBUG::INGRESS:parse_udp:End State: OHI instruction[1] 48 len 8
DEBUG::INGRESS:parse_udp:Flit # 0
DEBUG::TCAM-decoder[8] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x1fff
x_lkp_val[1] = 0x1100, 	y_lkp_val[1] = 0xee00
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[8] - 
action = 1, nxt_state = 5, offset_inst: sel 0, mux_sel 0, val 8 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(2,2) -> phv(101), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 16
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 8
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::INGRESS:parse_ipv4[4]->__END__[7]
DEBUG::INGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::INGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::INGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[9] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[9] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::Skip transition from parse_udp -> __END__, Terminate
DEBUG::Skip transition from parse_tcp -> __END__, Terminate
DEBUG::Skip transition from __END__ -> __END__, Terminate
INFO::INGRESS:Tcam states used 11
DEBUG::Parser init_profile
curr_offset = 0, state = 1, lkp_val_pkt_idx0 = 0, lkp_val_pkt_idx1 = 0, lkp_val_pkt_idx2 = 0

INFO::EGRESS:Parser Output Generation:
DEBUG::EGRESS:start[1]->parse_ethernet[2]
DEBUG::EGRESS:fill_sram_entry for parse_ethernet + start
DEBUG::parse_ethernet:extraction_tuples=[(0, 17, 0)]
DEBUG::Extract instructions : ['pkt_off 0, bytes 4, phc 0', 'pkt_off 4, bytes 4, phc 4', 'pkt_off 8, bytes 4, phc 8', 'pkt_off 12, bytes 4, phc 12', 'pkt_off 16, bytes 1, phc 16']
DEBUG::OHI instruction[0]: off 17, len 14
DEBUG::EGRESS:parse_ethernet:Flit # 0
DEBUG::TCAM-decoder[0] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x1, y_state = 0x1fe
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[0] - 
action = 0, nxt_state = 2, offset_inst: sel 0, mux_sel 0, val 31 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,4) -> phv(0), extract_inst[1] = pkt(4,4) -> phv(4), extract_inst[2] = pkt(8,4) -> phv(8), extract_inst[3] = pkt(12,4) -> phv(12), extract_inst[4] = pkt(16,1) -> phv(16), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 3
Total meta_inst 1
ohi_inst[0]: ohi[0] = current_off + 17
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 29]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ethernet[2]->parse_ipv4[4]
DEBUG::EGRESS:fill_sram_entry for parse_ipv4 + None
DEBUG::parse_ipv4:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[1]: off 0, len 20
DEBUG::EGRESS:parse_ipv4:No PHV writes in this state
DEBUG::TCAM-decoder[1] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x800, 	y_lkp_val[0] = 0xf7ff
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[1] - 
action = 0, nxt_state = 4, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[1], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 8
Total meta_inst 1
ohi_inst[0]: ohi[1] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 6]
mux_idx[1] = pkt[current_off + 9]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ethernet[2]->parse_ipv6[3]
DEBUG::EGRESS:fill_sram_entry for parse_ipv6 + None
DEBUG::parse_ipv6:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[1]: off 0, len 40
DEBUG::EGRESS:parse_ipv6:No PHV writes in this state
DEBUG::TCAM-decoder[2] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x86dd, 	y_lkp_val[0] = 0x7922
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[2] - 
action = 0, nxt_state = 3, offset_inst: sel 0, mux_sel 0, val 40 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 4
Total meta_inst 1
ohi_inst[0]: ohi[1] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 6]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ethernet[2]->__END__[7]
DEBUG::EGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::EGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::EGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[3] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x2, y_state = 0x1fd
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[3] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv6[3]->parse_tcp[6]
DEBUG::EGRESS:fill_sram_entry for parse_tcp + None
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 20
DEBUG::EGRESS:parse_tcp:End State: OHI instruction[1] 48 len 20
DEBUG::EGRESS:parse_tcp:No PHV writes in this state
DEBUG::TCAM-decoder[4] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x600, 	y_lkp_val[0] = 0xf900
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[4] - 
action = 1, nxt_state = 6, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 32
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 20
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv6[3]->parse_udp[5]
DEBUG::EGRESS:fill_sram_entry for parse_udp + None
DEBUG::parse_udp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 8
DEBUG::EGRESS:parse_udp:End State: OHI instruction[1] 48 len 8
DEBUG::EGRESS:parse_udp:No PHV writes in this state
DEBUG::TCAM-decoder[5] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x1100, 	y_lkp_val[0] = 0xee00
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[5] - 
action = 1, nxt_state = 5, offset_inst: sel 0, mux_sel 0, val 8 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 16
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 8
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv6[3]->__END__[7]
DEBUG::EGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::EGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::EGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[6] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x3, y_state = 0x1fc
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[6] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv4[4]->parse_tcp[6]
DEBUG::EGRESS:fill_sram_entry for parse_tcp + None
DEBUG::parse_tcp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 20
DEBUG::EGRESS:parse_tcp:End State: OHI instruction[1] 48 len 20
DEBUG::EGRESS:parse_tcp:No PHV writes in this state
DEBUG::TCAM-decoder[7] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x1fff
x_lkp_val[1] = 0x600, 	y_lkp_val[1] = 0xf900
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[7] - 
action = 1, nxt_state = 6, offset_inst: sel 0, mux_sel 0, val 20 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 32
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 20
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv4[4]->parse_udp[5]
DEBUG::EGRESS:fill_sram_entry for parse_udp + None
DEBUG::parse_udp:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::OHI instruction[2]: off 0, len 8
DEBUG::EGRESS:parse_udp:End State: OHI instruction[1] 48 len 8
DEBUG::EGRESS:parse_udp:No PHV writes in this state
DEBUG::TCAM-decoder[8] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x1fff
x_lkp_val[1] = 0x1100, 	y_lkp_val[1] = 0xee00
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[8] - 
action = 1, nxt_state = 5, offset_inst: sel 0, mux_sel 0, val 8 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 63 |= 16
meta_inst[1]: hv_en 0 |= 128
Total meta_inst 2
ohi_inst[0]: ohi[2] = current_off + 0
ohi_inst[1]: ohi[48] = current_off + 8
Total ohi_inst 2
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::EGRESS:parse_ipv4[4]->__END__[7]
DEBUG::EGRESS:fill_sram_entry for __END__ + None
DEBUG::__END__:extraction_tuples=[]
DEBUG::Extract instructions : []
DEBUG::EGRESS:__END__:End State: OHI instruction[0] 48 len 0
DEBUG::EGRESS:__END__:No PHV writes in this state
DEBUG::TCAM-decoder[9] - 
valid = 1
x_control(key) = 0, y_control(mask) = 0, x_state = 0x4, y_state = 0x1fb
x_lkp_val[0] = 0x0, 	y_lkp_val[0] = 0x0
x_lkp_val[1] = 0x0, 	y_lkp_val[1] = 0x0
x_lkp_val[2] = 0x0, 	y_lkp_val[2] = 0x0

DEBUG::SRAM-decoder[9] - 
action = 1, nxt_state = 7, offset_inst: sel 0, mux_sel 0, val 0 
lkp_val_inst[0] = mux_pkt[0], store_en = 0
lkp_val_inst[1] = mux_pkt[0], store_en = 0
lkp_val_inst[2] = mux_pkt[0], store_en = 0

Total lkp_val_inst 3
extract_inst[0] = pkt(0,0) -> phv(0), extract_inst[1] = pkt(0,0) -> phv(0), extract_inst[2] = pkt(0,0) -> phv(0), extract_inst[3] = pkt(0,0) -> phv(0), extract_inst[4] = pkt(0,0) -> phv(0), extract_inst[5] = pkt(0,0) -> phv(0), extract_inst[6] = pkt(0,0) -> phv(0), extract_inst[7] = pkt(0,0) -> phv(0), extract_inst[8] = pkt(0,0) -> phv(0), extract_inst[9] = pkt(0,0) -> phv(0), extract_inst[10] = pkt(0,0) -> phv(0), extract_inst[11] = pkt(0,0) -> phv(0), extract_inst[12] = pkt(0,0) -> phv(0), extract_inst[13] = pkt(0,0) -> phv(0), extract_inst[14] = pkt(0,0) -> phv(0), extract_inst[15] = pkt(0,0) -> phv(0), 
Total extract_inst 16
meta_inst[0]: hv_en 0 |= 128
Total meta_inst 1
ohi_inst[0]: ohi[48] = current_off + 0
Total ohi_inst 1
mux_idx[0] = pkt[current_off + 0]
mux_idx[1] = pkt[current_off + 0]
mux_idx[2] = pkt[current_off + 0]
mux_idx[3] = pkt[current_off + 0]
Total mux_idx 4
mux_inst_data[0] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[1] = ((mux_pkt[0] & 0) >> 0) - 0
mux_inst_data[2] = ((mux_pkt[0] & 0) >> 0) - 0
Total mux_inst 3

DEBUG::Skip transition from parse_udp -> __END__, Terminate
DEBUG::Skip transition from parse_tcp -> __END__, Terminate
DEBUG::Skip transition from __END__ -> __END__, Terminate
INFO::EGRESS:Tcam states used 11
DEBUG::Parser init_profile
curr_offset = 0, state = 1, lkp_val_pkt_idx0 = 0, lkp_val_pkt_idx1 = 0, lkp_val_pkt_idx2 = 0

