
1. create a directory and copy naples-release-v1.tgz (call it install_dir)

2. cd install_dir

3. tar xvzf naples-release-v1.tgz

   once naples-release-v1.tgz is unzipped, you will find a Vagrantfile
   that is needed to VMs needed for simulating multiple data centers
   (each VM is a datacenter/kingdom)

   to create a VM needed to run NAPLES docker container. Note that
   only bare minimum packages needed to run NAPLES docker container
   are installed in this default Vagrantfile. Please feel free to add
   other packages that you may need to run your (native) apps, if any.

4. vagrant up

   This will bringup the datacenters and establish the VM connectivity between
   them. Additionally, each of the VMs will have NAPLES container running
   already with all the components of Pensando NIC. This container represents
   the NIC in the VPN gateway of that datacenter. Use 'vagrant ssh node1/node2'
   to connect to VMs

5. If you have to spin the NAPLES container manually (in case something went wrong),
   use 'docker start/stop naples-sim' inside the VMs.
   To do a fresh re-install of the naples container, re-provision the vargant VM
   using 'vagrant up --provision'

By default, port 9007 of the docker container is exposed to the host (i.e., VM
representing the datacenter) and hence REST APIs can be invoked using curl.

Examples:

Create a tenant:
curl -d'{"Kind":"Tenant","meta":{"Name":"tenant-1","Tenant":"tenant-1","CreationTime":"1970-01-01T00:00:00Z","ModTime":"1970-01-01T00:00:00Z"},"spec":{},"status":{}}' -X POST -H "Content-Type: application/json" 172.17.0.2:9007/api/tenants/

Get all tenants:
curl 172.17.0.2:9007/api/tenants/
[{"kind":"Tenant","meta":{"name":"tenant-1","tenant":"tenant-1","creation-time":"1970-01-01T00:00:00Z","mod-time":"1970-01-01T00:00:00Z"},"spec":{},"status":{"TenantID":3}}]

Create a NAT pool:
curl -d'{"kind":"NatPool","meta":{"name":"testNatPool","tenant":"tenant-1","namespace":"ns-1","creation-time":"1970-01-01T00:00:00Z","mod-time":"1970-01-01T00:00:00Z"},"spec":{"NetworkName":"default"},"status":{}}' -X POST -H "Content-Type: application/json" 172.17.0.2:9007/api/natpools/

Get all NAT pools:
curl 172.17.0.2:9007/api/natpools/ | jq .
[
  {
    "kind": "NatPool",
    "meta": {
      "name": "testNatPool",
      "tenant": "tenant-1",
      "namespace": "ns-1",
      "creation-time": "1970-01-01T00:00:00Z",
      "mod-time": "1970-01-01T00:00:00Z"
    },
    "spec": {
      "NetworkName": "default"
    },
    "status": {
      "id": 1
    }
  }
]

Create NAT policy:
curl -d'{"kind":"NatPolicy","meta":{"name":"testNatPolicy","tenant":"tenant-1","namespace":"ns-1","creation-time":"1970-01-01T00:00:00Z","mod-time":"1970-01-01T00:00:00Z"},"spec":{"rules":[{"from":{"match-type":"IPRange","match":"10.0.0.0 - 10.0.1.0"},"to":{"match-type":"IPRange","match":"192.168.0.0 - 192.168.1.1"},"protocol":"","from-port":"","to-port":"","nat-pool":"preCreatedNatPool","action":"SNAT"}]},"status":{}}' -X POST -H "Content-Type: application/json" 172.17.0.2:9007/api/natpolicies/

Get all NAT policies:
curl 172.17.0.2:9007/api/natpolicies/ | jq .
[
  {
    "kind": "NatPolicy",
    "meta": {
      "name": "testNatPolicy",
      "tenant": "tenant-1",
      "namespace": "ns-1",
      "creation-time": "1970-01-01T00:00:00Z",
      "mod-time": "1970-01-01T00:00:00Z"
    },
    "spec": {
      "rules": [
        {
          "from": {
            "match-type": "IPRange",
            "match": "10.0.0.0 - 10.0.1.0"
          },
          "to": {
            "match-type": "IPRange",
            "match": "192.168.0.0 - 192.168.1.1"
          },
          "protocol": "",
          "from-port": "",
          "to-port": "",
          "nat-pool": "preCreatedNatPool",
          "action": "SNAT"
        }
      ]
    },
    "status": {
      "id": 1
    }
  }
]

Here 172.17.0.2 is IP address of the eth0 interface inside the NAPLES container
