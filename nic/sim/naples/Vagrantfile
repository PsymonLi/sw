# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">=1.9.5"

BOX_IMAGE = "venice/turin-centos74"
NODE_COUNT = 2

NAPLES_VER = "v1"
NAPLES_IMAGE = "pensando/naples:#{NAPLES_VER}"
NAPLES_IMAGE_FILE = "naples-docker-#{NAPLES_VER}.tgz"
NAPLES_DATA_DIR = "/var/run/naples/"
AGENT_PORT=9007
VENICE_IMAGE_FILE = "venice-sim.tar"

if File.exist?(NAPLES_IMAGE_FILE) == false

    unless Vagrant.has_plugin?("vagrant-docker-login")
      system("vagrant plugin install vagrant-docker-login")
      puts "vagrant-docker-login dependency installed, please try the command again"
      exit
    end

    unless ENV["DOCKER_USERNAME"] && ENV["DOCKER_PASSWORD"]
      puts "Please set your DOCKER_USERNAME, DOCKER_PASSWORD environment variables"
      exit
    end
end

Vagrant.configure("2") do |config|
  config.vm.box = BOX_IMAGE

  if !ENV['TURIN_DISABLE_NAPLES'] then
  NODE_COUNT.times do |i|
    config.vm.define "node#{i+1}" do |subconfig|
      subconfig.vm.hostname = "node#{i+1}"

      # data network (eth1)
      subconfig.vm.network :private_network, ip: "192.168.10.#{i+11}"

      # control network (eth2)
      subconfig.vm.network :private_network, ip: "0.0.0.0", virtualbox__intnet: "control_net", auto_config: false

      #agent port forwarding
      subconfig.vm.network  "forwarded_port", guest: AGENT_PORT, host: 9000+i+11

      subconfig.vm.provider "virtualbox" do |vb|
        vb.memory = "2096"
        vb.cpus = 2
        vb.customize ['modifyvm', :id, '--nictype3', '82545EM']
        vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
        vb.linked_clone = true # use base image and clone from it. for multi-VM, saves space
      end

      # install app docker images
      subconfig.vm.provision "docker" do |d|
        d.pull_images "networkstatic/iperf3"
      end
      if File.exist?(NAPLES_IMAGE_FILE) == false
          subconfig.vm.provision :docker_login
      end

      # one time setup
      subconfig.vm.provision "shell", inline: <<-SCRIPT
        sudo chmod a+rwx /var/run/docker.sock
        sudo chmod a+rwx /var/run/openvswitch/db.sock

        mkdir -p #{NAPLES_DATA_DIR}
        if [ -f /vagrant/#{NAPLES_IMAGE_FILE} ]; then
          docker images purge
          docker rmi -f #{NAPLES_IMAGE}
          docker load --input /vagrant/#{NAPLES_IMAGE_FILE}
        else
          docker pull #{NAPLES_IMAGE}
        fi

        # create control network: macvlan docker net with 32 containers/node, 8 nodes/system
        docker network create -d macvlan --subnet=11.1.1.0/24 --ip-range=11.1.1.#{32 + 32*i}/27 --gateway=11.1.1.254 -o parent=eth2 control-net
        # create ovs data network: ovs bridge: all nodes creates tunnel to node0 (hub)
        ovs-vsctl add-br data-net
      SCRIPT

      # provision data network tunnels
      if i == 0 then
        NODE_COUNT.times do |n1|
          if n1 != 0 then
            subconfig.vm.provision "shell" do |s|
              s.inline = "ovs-vsctl add-port data-net vxtun-to-node#{n1+1} -- set interface vxtun-to-node#{n1+1} type=vxlan options:key=11111 options:remote_ip=192.168.10.#{n1+11}"
            end
          end
        end
      else
        subconfig.vm.provision "shell" do |s|
          s.inline = "ovs-vsctl add-port data-net vxtun-to-node1 -- set interface vxtun-to-node1 type=vxlan options:key=11111 options:remote_ip=192.168.10.11"
        end
      end

      # bringup naples container
      subconfig.vm.provision "docker" do |d|
        d.run "naples-sim", image: NAPLES_IMAGE,
          args: "--privileged -p #{AGENT_PORT}:#{AGENT_PORT} --mount type=bind,source=#{NAPLES_DATA_DIR},target=/naples/data"
      end

      # Copy config samples and bootstrap script
      subconfig.vm.provision "shell", inline: <<-SCRIPT
        cp #{NAPLES_DATA_DIR}/examples/SF-Kingdom#{i+1}.postman_collection.json /home/vagrant/postman_collection.json
        cp #{NAPLES_DATA_DIR}/examples/postman_env.json /home/vagrant/postman_env.json
        cp #{NAPLES_DATA_DIR}/examples/README /home/vagrant/README
        cp #{NAPLES_DATA_DIR}/bootstrap.sh /usr/bin/naples-bootstrap.sh
        chmod +x /usr/bin/naples-bootstrap.sh

        # configure control-network for naples-sim
        ip link set up dev eth2
        docker network connect control-net naples-sim

        sudo systemctl stop firewalld
        sudo setenforce 0
      SCRIPT

      # Run this on every boot
      subconfig.vm.provision "shell", run: 'always', inline: "/usr/bin/naples-bootstrap.sh $1", args: "#{i+1}"
    end
    end
  end

  if ENV['TURIN_ENABLE_VENICE'] then
      config.vm.define  "venice" do |subconfig|
          subconfig.vm.box = BOX_IMAGE
          subconfig.vm.box = "venice/centos74"
          subconfig.vm.box_version = "0.8"
          config.ssh.insert_key = false
          subconfig.vm.provision :shell, inline: 'ulimit -n 4096'
          subconfig.vm.hostname = "venice"

          # control network (eth1)
          subconfig.vm.network :private_network, ip: "0.0.0.0", virtualbox__intnet: "control_net", auto_config: false

          subconfig.vm.provider "virtualbox" do |vb|
              vb.memory = "4096"
              vb.cpus = 4
              vb.customize ['modifyvm', :id, '--nictype2', '82545EM']
              vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
              vb.linked_clone = true # use base image and clone from it. for multi-VM, saves space
          end

          subconfig.vm.provision "shell", inline: <<-SCRIPT
            systemctl stop firewalld && systemctl disable firewalld
            systemctl stop chronyd && systemctl disable chronyd
            systemctl stop kubelet && systemctl disable kubelet
            setenforce 0
            usermod -a -G root vagrant
            usermod -a -G docker vagrant
            mkdir -p /etc/docker
            echo '{ "insecure-registries" : ["registry.test.pensando.io:5000"] }' > /etc/docker/daemon.json
            systemctl start docker
            systemctl enable docker
            ip link set up dev eth1
            sysctl -w vm.max_map_count=262144
            chmod 777 /var/run/docker.sock
          SCRIPT

          subconfig.vm.provision "shell", privileged: false, inline: <<-SCRIPT
              mkdir -p /home/vagrant/venice
              if [ -f /vagrant/#{VENICE_IMAGE_FILE} ]; then
                  cd /home/vagrant/venice
                  tar xvf /vagrant/#{VENICE_IMAGE_FILE}
              else
                  echo TODO download the venice sim binaries here with some credentials and extract the file
              fi
              /home/vagrant/venice/venice-bootstrap.sh
          SCRIPT
      end
  end
end
