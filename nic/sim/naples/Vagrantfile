# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">=1.9.5"

BOX_IMAGE = "turin/centos74"
BOX_VERSION = "0.2"

# node_count = number of naples nodes, overwritted using TURIN_NODE_COUNT env variable
node_count = 2
if ENV['TURIN_NODE_COUNT'] then
    node_count = ENV["TURIN_NODE_COUNT"].to_i
end

# number of cpus per naples node, overridden using TURIN_CPUS_PER_NODE env variable
cpus_per_node = "2"
if ENV["TURIN_CPUS_PER_NODE"] then
    cpus_per_node = ENV["TURIN_CPUS_PER_NODE"]
end

# Memory per vagrant node(unit is Megabytes) is controilled by CPUS_PER_NODE env variable
memory_per_node = 2048
if ENV["TURIN_MEMORY_PER_NODE"] then
    memory_per_node = ENV["TURIN_MEMORY_PER_NODE"].to_i
end

NAPLES_VER = "v1"
NAPLES_IMAGE = "pensando/naples:#{NAPLES_VER}"
NAPLES_IMAGE_FILE = "naples-docker-#{NAPLES_VER}.tgz"
NAPLES_DATA_DIR = "/var/run/naples/"
NAPLES_OVERLAY_CONFIG_DIR="/home/vagrant/configs/config_vxlan_overlay"
NAPLES_IPSEC_CONFIG_DIR="/home/vagrant/configs/config_ipsec"
AGENT_PORT=9007

VENICE_VER = "v0.1"
VENICE_DOCKER_IMAGE = "pensando/venice:#{VENICE_VER}"
VENICE_IMAGE_FILE = "venice-sim.tar"
VENICE_CPUS_PER_NODE = "4"
VENICE_MEMORY_PER_NODE = "4096"
VENICE_PORT = 10001
venice_port = VENICE_PORT
if ENV["VENICE_PORT"] then
    venice_port = ENV["VENICE_PORT"]
end

# Ensure docker creds are set if image is not provided locally
if ((!ENV['TURIN_DISABLE_NAPLES'] && File.exist?(NAPLES_IMAGE_FILE) == false) ||
    (ENV['TURIN_ENABLE_VENICE'] && File.exist?(VENICE_IMAGE_FILE) == false))

    unless ENV["DOCKER_USERNAME"] && ENV["DOCKER_PASSWORD"]
      puts "Please set your DOCKER_USERNAME, DOCKER_PASSWORD environment variables"
      exit
    end

    docker_user = ENV["DOCKER_USERNAME"]
    docker_password = ENV["DOCKER_PASSWORD"]

end

Vagrant.configure("2") do |config|
  config.vm.box = BOX_IMAGE
  config.vm.box_version = BOX_VERSION

  if !ENV['TURIN_DISABLE_NAPLES'] then
  (0..(node_count-1)).each do |i|
    config.vm.define "node#{i+1}" do |subconfig|
      subconfig.vm.hostname = "node#{i+1}"

      # data network (eth1)
      subconfig.vm.network :private_network, ip: "192.168.10.#{i+11}"

      # control network (eth2)
      subconfig.vm.network :private_network, ip: "0.0.0.0", virtualbox__intnet: "control_net", auto_config: false

      #agent port forwarding
      subconfig.vm.network  "forwarded_port", guest: AGENT_PORT, host: 9000+i+11

      subconfig.vm.provider "virtualbox" do |vb|
        vb.memory = memory_per_node
        vb.cpus = cpus_per_node
        vb.customize ['modifyvm', :id, '--nictype3', '82545EM']
        vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
        vb.linked_clone = true # use base image and clone from it. for multi-VM, saves space
      end

      subconfig.vm.provision "shell", run: 'always',  inline: <<-SCRIPT
        sudo /vagrant/naples_vm_bringup.py  --node-id #{i+1} --network-ip-range 11.1.1.#{32 + 32*i}/27
      SCRIPT

      # Copy config samples and bootstrap script
      subconfig.vm.provision "shell", inline: <<-SCRIPT
        cp #{NAPLES_DATA_DIR}/examples/config_ipsec/Node#{i+1}.postman_collection.json #{NAPLES_IPSEC_CONFIG_DIR}/postman_collection.json
        cp #{NAPLES_DATA_DIR}/examples/config_vxlan_overlay/Node#{i+1}.postman_collection.json #{NAPLES_OVERLAY_CONFIG_DIR}/postman_collection.json
        cp #{NAPLES_DATA_DIR}/examples/config_vxlan_overlay/Node#{i+1}.Delete.postman_collection.json #{NAPLES_OVERLAY_CONFIG_DIR}/postman_delete_collection.json
        cp #{NAPLES_DATA_DIR}/examples/config_vxlan_overlay/Node#{i+1}.security_policy.json #{NAPLES_OVERLAY_CONFIG_DIR}/security_policy.json
        cp #{NAPLES_DATA_DIR}/examples/config_vxlan_overlay/Node#{i+1}.security_policy_del.json #{NAPLES_OVERLAY_CONFIG_DIR}/security_policy_del.json
        cp #{NAPLES_DATA_DIR}/examples/postman_env.json /home/vagrant/configs/postman_env.json
        cp #{NAPLES_DATA_DIR}/examples/config_ipsec/README #{NAPLES_IPSEC_CONFIG_DIR}/README
        cp #{NAPLES_DATA_DIR}/examples/config_vxlan_overlay/README #{NAPLES_OVERLAY_CONFIG_DIR}/README

        # configure control-network for naples-sim
        ip link set up dev eth2
        ip link set dev eth1 mtu 9216

        sudo systemctl stop firewalld
        sudo setenforce 0
      SCRIPT

      # Run this on every boot

      #If user wants to mount their dircotry inside vagrant node then they need to set TURIN_DEV to 1 and TURIN_DEV_MOUNT_DIR to the directory path which needs to be mounted under the vagrant ndoe at /mnt/sw path
      if ENV["TURIN_DEV"] && ENV["TURIN_DEV"] == "1" then
          subconfig.vm.synced_folder ENV["TURIN_DEV_MOUNT_DIR"], "/mnt/sw"
      end

    end
    end
  end

  if ENV['TURIN_ENABLE_VENICE'] then
      config.vm.define  "venice" do |subconfig|
          subconfig.vm.box = BOX_IMAGE
          subconfig.vm.box_version = BOX_VERSION
          config.ssh.insert_key = false
          subconfig.vm.provision :shell, inline: 'ulimit -n 4096'
          subconfig.vm.hostname = "venice"

          # control network (eth1)
          subconfig.vm.network :private_network, ip: "0.0.0.0", virtualbox__intnet: "control_net", auto_config: false

          # venice port forwarding (out of the VM)
          subconfig.vm.network  "forwarded_port", guest: VENICE_PORT, host: venice_port

          subconfig.vm.provider "virtualbox" do |vb|
              vb.memory = VENICE_MEMORY_PER_NODE
              vb.cpus = VENICE_CPUS_PER_NODE
              vb.customize ['modifyvm', :id, '--nictype2', '82545EM']
              vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
              vb.linked_clone = true # use base image and clone from it. for multi-VM, saves space
          end

          subconfig.vm.provision "shell", inline: <<-SCRIPT
            systemctl stop chronyd && systemctl disable chronyd
            setenforce 0
            usermod -a -G root vagrant
            usermod -a -G docker vagrant
            mkdir -p /etc/docker
            systemctl start docker
            systemctl enable docker
            ip link set up dev eth1
            sysctl -w vm.max_map_count=262144
            chmod 777 /var/run/docker.sock
          SCRIPT

          if File.exist?(VENICE_IMAGE_FILE) == false
              subconfig.vm.provision "shell", inline: <<-SCRIPT
                  docker login -u #{docker_user} -p #{docker_password}
                  docker pull #{VENICE_DOCKER_IMAGE}
              SCRIPT
          end

          subconfig.vm.provision "shell", privileged: false, inline: <<-SCRIPT
              mkdir -p /home/vagrant/venice
              if ! [ -f /vagrant/#{VENICE_IMAGE_FILE} ]; then
                  dev_env=false
                  docker run --user $(id -u):$(id -g) --rm -v /vagrant:/import #{VENICE_DOCKER_IMAGE}
              fi
              cd /home/vagrant/venice
              tar xvf /vagrant/#{VENICE_IMAGE_FILE}
              docker load -i /home/vagrant/venice/pen-dind.tar
              docker load -i /home/vagrant/venice/pen-e2e.tar
              /home/vagrant/venice/venice-bootstrap.sh

              if [ "$dev_env" == false ]; then
                  rm -f /vagrant/#{VENICE_IMAGE_FILE}
              fi
          SCRIPT
      end
  end
end
