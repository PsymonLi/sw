//
// {C} Copyright 2020 Pensando Systems Inc. All rights reserved
//
#include <session_internal.pb.h>
#include "pdsa_hdlr.h"

using namespace vppinternal;

static const FlowState encoded_state[] = {
    [PDS_FLOW_STATE_CONN_INIT]        = INIT,
    [PDS_FLOW_STATE_CONN_SETUP]       = SETUP,
    [PDS_FLOW_STATE_ESTABLISHED]      = EST,
    [PDS_FLOW_STATE_KEEPALIVE_SENT]   = KEEPALIVE,
    [PDS_FLOW_STATE_HALF_CLOSE_IFLOW] = HALFCLOSE_IFLOW,
    [PDS_FLOW_STATE_HALF_CLOSE_RFLOW] = HALFCLOSE_RFLOW,
    [PDS_FLOW_STATE_CLOSE]            = CLOSE
    };

static pds_flow_state decoded_state[] = {
    [INIT]            = PDS_FLOW_STATE_CONN_INIT,
    [SETUP]           = PDS_FLOW_STATE_CONN_SETUP,
    [EST]             = PDS_FLOW_STATE_ESTABLISHED,
    [KEEPALIVE]       = PDS_FLOW_STATE_KEEPALIVE_SENT,
    [HALFCLOSE_IFLOW] = PDS_FLOW_STATE_HALF_CLOSE_IFLOW,
    [HALFCLOSE_RFLOW] = PDS_FLOW_STATE_HALF_CLOSE_RFLOW,
    [CLOSE]           = PDS_FLOW_STATE_CLOSE
    };

static const FlowSubType encoded_type[] = {
    [PDS_FLOW_L2L_INTRA_SUBNET]                = L2L_INTRA_SUBNET,
    [PDS_FLOW_L2L_INTER_SUBNET]                = L2L_INTER_SUBNET,
    [PDS_FLOW_L2R_INTRA_SUBNET]                = L2R_INTRA_SUBNET,
    [PDS_FLOW_L2R_INTER_SUBNET]                = L2R_INTER_SUBNET,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE]            = L2N_ASYMMETRIC_ROUTE,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAPT]       = L2N_ASYMMETRIC_ROUTE_NAPT,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAT]        = L2N_ASYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE]             = L2N_SYMMETRIC_ROUTE,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAPT]        = L2N_SYMMETRIC_ROUTE_NAPT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAT]         = L2N_SYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_TWICE_NAT]   = L2N_SYMMETRIC_ROUTE_TWICE_NAT,
    [PDS_FLOW_L2N_INTRA_VCN_ROUTE]             = L2N_INTRA_VCN_ROUTE,
    [PDS_FLOW_R2L_INTRA_SUBNET]                = R2L_INTRA_SUBNET,
    [PDS_FLOW_R2L_INTER_SUBNET]                = R2L_INTER_SUBNET,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE]            = N2L_ASYMMETRIC_ROUTE,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE_NAT]        = N2L_ASYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE]             = N2L_SYMMETRIC_ROUTE,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE_NAT]         = N2L_SYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE_SVC_NAT]    = N2L_ASYMMETRIC_ROUTE_SVC_NAT,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE_SVC_NAT]     = N2L_SYMMETRIC_ROUTE_SVC_NAT,
    [PDS_FLOW_N2L_INTRA_VCN_ROUTE]             = N2L_INTRA_VCN_ROUTE
    };

static pds_flow_pkt_type decoded_type[] = {
    [L2L_INTRA_SUBNET]                = PDS_FLOW_L2L_INTRA_SUBNET,
    [L2L_INTER_SUBNET]                = PDS_FLOW_L2L_INTER_SUBNET,
    [L2R_INTRA_SUBNET]                = PDS_FLOW_L2R_INTRA_SUBNET,
    [L2R_INTER_SUBNET]                = PDS_FLOW_L2R_INTER_SUBNET,
    [L2N_ASYMMETRIC_ROUTE]            = PDS_FLOW_L2N_ASYMMETRIC_ROUTE,
    [L2N_ASYMMETRIC_ROUTE_NAPT]       = PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAPT,
    [L2N_ASYMMETRIC_ROUTE_NAT]        = PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAT,
    [L2N_SYMMETRIC_ROUTE]             = PDS_FLOW_L2N_SYMMETRIC_ROUTE,
    [L2N_SYMMETRIC_ROUTE_NAPT]        = PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAPT,
    [L2N_SYMMETRIC_ROUTE_NAT]         = PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAT,
    [L2N_SYMMETRIC_ROUTE_TWICE_NAT]   = PDS_FLOW_L2N_SYMMETRIC_ROUTE_TWICE_NAT,
    [L2N_INTRA_VCN_ROUTE]             = PDS_FLOW_L2N_INTRA_VCN_ROUTE,
    [R2L_INTRA_SUBNET]                = PDS_FLOW_R2L_INTRA_SUBNET,
    [R2L_INTER_SUBNET]                = PDS_FLOW_R2L_INTER_SUBNET,
    [N2L_ASYMMETRIC_ROUTE]            = PDS_FLOW_N2L_ASYMMETRIC_ROUTE,
    [N2L_ASYMMETRIC_ROUTE_NAT]        = PDS_FLOW_N2L_ASYMMETRIC_ROUTE_NAT,
    [N2L_SYMMETRIC_ROUTE]             = PDS_FLOW_N2L_SYMMETRIC_ROUTE,
    [N2L_SYMMETRIC_ROUTE_NAT]         = PDS_FLOW_N2L_SYMMETRIC_ROUTE_NAT,
    [N2L_ASYMMETRIC_ROUTE_SVC_NAT]    = PDS_FLOW_N2L_ASYMMETRIC_ROUTE_SVC_NAT,
    [N2L_SYMMETRIC_ROUTE_SVC_NAT]     = PDS_FLOW_N2L_SYMMETRIC_ROUTE_SVC_NAT,
    [N2L_INTRA_VCN_ROUTE]             = PDS_FLOW_N2L_INTRA_VCN_ROUTE
    };

uint32_t
pds_encode_flowstate(pds_flow_state flowstate)
{
    return encoded_state[flowstate];
}

pds_flow_state
pds_decode_flowstate(uint32_t flowstate)
{
    return decoded_state[flowstate];
}

uint32_t
pds_encode_flow_pkt_type(pds_flow_pkt_type flowtype)
{
    return encoded_type[flowtype];
}

pds_flow_pkt_type
pds_decode_flow_pkt_type(uint32_t flowtype)
{
    return decoded_type[flowtype];
}

