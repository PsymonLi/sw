//
// {C} Copyright 2020 Pensando Systems Inc. All rights reserved
//
#include <sess_sync.pb.h>
#include "pdsa_hdlr.h"

using namespace sess_sync;

static const FlowState encoded_state[] = {
    [PDS_FLOW_STATE_CONN_INIT]        = FLOW_STATE_INIT,
    [PDS_FLOW_STATE_CONN_SETUP]       = FLOW_STATE_SETUP,
    [PDS_FLOW_STATE_ESTABLISHED]      = FLOW_STATE_ESTABLISHED,
    [PDS_FLOW_STATE_KEEPALIVE_SENT]   = FLOW_STATE_KEEPALIVE,
    [PDS_FLOW_STATE_HALF_CLOSE_IFLOW] = FLOW_STATE_HALFCLOSE_IFLOW,
    [PDS_FLOW_STATE_HALF_CLOSE_RFLOW] = FLOW_STATE_HALFCLOSE_RFLOW,
    [PDS_FLOW_STATE_CLOSE]            = FLOW_STATE_CLOSE
};

static pds_flow_state decoded_state[] = {
    [FLOW_STATE_NONE]            = PDS_FLOW_STATE_CONN_INIT, // To avoid compilation error
    [FLOW_STATE_INIT]            = PDS_FLOW_STATE_CONN_INIT,
    [FLOW_STATE_SETUP]           = PDS_FLOW_STATE_CONN_SETUP,
    [FLOW_STATE_ESTABLISHED]     = PDS_FLOW_STATE_ESTABLISHED,
    [FLOW_STATE_KEEPALIVE]       = PDS_FLOW_STATE_KEEPALIVE_SENT,
    [FLOW_STATE_HALFCLOSE_IFLOW] = PDS_FLOW_STATE_HALF_CLOSE_IFLOW,
    [FLOW_STATE_HALFCLOSE_RFLOW] = PDS_FLOW_STATE_HALF_CLOSE_RFLOW,
    [FLOW_STATE_CLOSE]           = PDS_FLOW_STATE_CLOSE
};

static const FlowSubType encoded_type[] = {
    [PDS_FLOW_L2L_INTRA_SUBNET]              = FLOW_TYPE_L2L_INTRA_SUBNET,
    [PDS_FLOW_L2L_INTER_SUBNET]              = FLOW_TYPE_L2L_INTER_SUBNET,
    [PDS_FLOW_L2R_INTRA_SUBNET]              = FLOW_TYPE_L2R_INTRA_SUBNET,
    [PDS_FLOW_L2R_INTER_SUBNET]              = FLOW_TYPE_L2R_INTER_SUBNET,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE]          = FLOW_TYPE_L2N_ASYMMETRIC_ROUTE,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAPT]     = FLOW_TYPE_L2N_ASYMMETRIC_ROUTE_NAPT,
    [PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAT]      = FLOW_TYPE_L2N_ASYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE]           = FLOW_TYPE_L2N_SYMMETRIC_ROUTE,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAPT]      = FLOW_TYPE_L2N_SYMMETRIC_ROUTE_NAPT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAT]       = FLOW_TYPE_L2N_SYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_L2N_SYMMETRIC_ROUTE_TWICE_NAT] = FLOW_TYPE_L2N_SYMMETRIC_ROUTE_TWICE_NAT,
    [PDS_FLOW_L2N_INTRA_VCN_ROUTE]           = FLOW_TYPE_L2N_INTRA_VCN_ROUTE,
    [PDS_FLOW_R2L_INTRA_SUBNET]              = FLOW_TYPE_R2L_INTRA_SUBNET,
    [PDS_FLOW_R2L_INTER_SUBNET]              = FLOW_TYPE_R2L_INTER_SUBNET,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE]          = FLOW_TYPE_N2L_ASYMMETRIC_ROUTE,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE_NAT]      = FLOW_TYPE_N2L_ASYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE]           = FLOW_TYPE_N2L_SYMMETRIC_ROUTE,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE_NAT]       = FLOW_TYPE_N2L_SYMMETRIC_ROUTE_NAT,
    [PDS_FLOW_N2L_ASYMMETRIC_ROUTE_SVC_NAT]  = FLOW_TYPE_N2L_ASYMMETRIC_ROUTE_SVC_NAT,
    [PDS_FLOW_N2L_SYMMETRIC_ROUTE_SVC_NAT]   = FLOW_TYPE_N2L_SYMMETRIC_ROUTE_SVC_NAT,
    [PDS_FLOW_N2L_INTRA_VCN_ROUTE]           = FLOW_TYPE_N2L_INTRA_VCN_ROUTE
};

static pds_flow_pkt_type decoded_type[] = {
    [FLOW_TYPE_NONE]                          = PDS_FLOW_L2L_INTRA_SUBNET, // To avoid compilation error
    [FLOW_TYPE_L2L_INTRA_SUBNET]              = PDS_FLOW_L2L_INTRA_SUBNET,
    [FLOW_TYPE_L2L_INTER_SUBNET]              = PDS_FLOW_L2L_INTER_SUBNET,
    [FLOW_TYPE_L2R_INTRA_SUBNET]              = PDS_FLOW_L2R_INTRA_SUBNET,
    [FLOW_TYPE_L2R_INTER_SUBNET]              = PDS_FLOW_L2R_INTER_SUBNET,
    [FLOW_TYPE_L2N_ASYMMETRIC_ROUTE]          = PDS_FLOW_L2N_ASYMMETRIC_ROUTE,
    [FLOW_TYPE_L2N_ASYMMETRIC_ROUTE_NAPT]     = PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAPT,
    [FLOW_TYPE_L2N_ASYMMETRIC_ROUTE_NAT]      = PDS_FLOW_L2N_ASYMMETRIC_ROUTE_NAT,
    [FLOW_TYPE_L2N_SYMMETRIC_ROUTE]           = PDS_FLOW_L2N_SYMMETRIC_ROUTE,
    [FLOW_TYPE_L2N_SYMMETRIC_ROUTE_NAPT]      = PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAPT,
    [FLOW_TYPE_L2N_SYMMETRIC_ROUTE_NAT]       = PDS_FLOW_L2N_SYMMETRIC_ROUTE_NAT,
    [FLOW_TYPE_L2N_SYMMETRIC_ROUTE_TWICE_NAT] = PDS_FLOW_L2N_SYMMETRIC_ROUTE_TWICE_NAT,
    [FLOW_TYPE_L2N_INTRA_VCN_ROUTE]           = PDS_FLOW_L2N_INTRA_VCN_ROUTE,
    [FLOW_TYPE_R2L_INTRA_SUBNET]              = PDS_FLOW_R2L_INTRA_SUBNET,
    [FLOW_TYPE_R2L_INTER_SUBNET]              = PDS_FLOW_R2L_INTER_SUBNET,
    [FLOW_TYPE_N2L_ASYMMETRIC_ROUTE]          = PDS_FLOW_N2L_ASYMMETRIC_ROUTE,
    [FLOW_TYPE_N2L_ASYMMETRIC_ROUTE_NAT]      = PDS_FLOW_N2L_ASYMMETRIC_ROUTE_NAT,
    [FLOW_TYPE_N2L_SYMMETRIC_ROUTE]           = PDS_FLOW_N2L_SYMMETRIC_ROUTE,
    [FLOW_TYPE_N2L_SYMMETRIC_ROUTE_NAT]       = PDS_FLOW_N2L_SYMMETRIC_ROUTE_NAT,
    [FLOW_TYPE_N2L_ASYMMETRIC_ROUTE_SVC_NAT]  = PDS_FLOW_N2L_ASYMMETRIC_ROUTE_SVC_NAT,
    [FLOW_TYPE_N2L_SYMMETRIC_ROUTE_SVC_NAT]   = PDS_FLOW_N2L_SYMMETRIC_ROUTE_SVC_NAT,
    [FLOW_TYPE_N2L_INTRA_VCN_ROUTE]           = PDS_FLOW_N2L_INTRA_VCN_ROUTE
};

uint32_t
pds_encode_flowstate (pds_flow_state flowstate)
{
    return encoded_state[flowstate];
}

pds_flow_state
pds_decode_flowstate (uint32_t flowstate)
{
    return decoded_state[flowstate];
}

uint32_t
pds_encode_flow_pkt_type (pds_flow_pkt_type flowtype)
{
    return encoded_type[flowtype];
}

pds_flow_pkt_type
pds_decode_flow_pkt_type (uint32_t flowtype)
{
    return decoded_type[flowtype];
}

