import argparse
import json
import os
import shutil
import sys
import errno
import subprocess

from hparser import *
from spec import *

def layout(opts):
    spec = load_spec(opts.spec)
    pr = Printer()
    pr.add("/* WARNING: Autogenerated file by libtranslate. Don't edit manually */")
    pr.add('#ifndef __%s_LAYOUT_H__' % (spec['name'].upper()))
    pr.add('#define __%s_LAYOUT_H__' % (spec['name'].upper()))
    pr.add('')
    pr.add('#define %s_ENTRY_SIZE %s' % (spec['name'].upper(), spec['entrySize']))
    pr.add('')
    pr.add('typedef enum %s_layout_ {' % (spec['name']))
    pr.incr()
    i = 0
    for entry in spec['entries']:
        pr.add('%s_%s = %d' % (spec['name'].upper(), entry['name'], i))
        i += 1
    pr.decr()
    pr.add('} %s_layout_t;\n' % (spec['name']))
    pr.add('#endif')
    with open(opts.output, 'w') as f:
        f.write(pr._buffer)

def main():
    commands = {
        'layout': layout,
    }
    parser = argparse.ArgumentParser()
    parser.add_argument('spec', metavar='filename', type=str,
        help='The JSON file with the table spec')

    subparsers = parser.add_subparsers(dest='subcommand')

    layout_parser = subparsers.add_parser('layout')
    layout_parser.add_argument('output', metavar='out-filename', type=str,
        help='The file to write the generated code to')

    args = parser.parse_args()
    
    commands[args.subcommand](args)

if __name__ == '__main__':
    main()