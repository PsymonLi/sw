#include "nic/hal/hal.hpp"
#include "nic/hal/pd/capri/capri_barco_asym_apis.hpp"

namespace hal {
namespace pd {


uint8_t p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFE,     0xFF, 0xFF, 0xFC, 0x2F
};
uint8_t n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};
uint8_t xg[] = {
    0x79, 0xBE, 0x66, 0x7E,     0xF9, 0xDC, 0xBB, 0xAC,
    0x55, 0xA0, 0x62, 0x95,     0xCE, 0x87, 0x0B, 0x07,
    0x02, 0x9B, 0xFC, 0xDB,     0x2D, 0xCE, 0x28, 0xD9,
    0x59, 0xF2, 0x81, 0x5B,     0x16, 0xF8, 0x17, 0x98
};
uint8_t yg[] = {
    0x48, 0x3A, 0xDA, 0x77,     0x26, 0xA3, 0xC4, 0x65,
    0x5D, 0xA4, 0xFB, 0xFC,     0x0E, 0x11, 0x08, 0xA8,
    0xFD, 0x17, 0xB4, 0x48,     0xA6, 0x85, 0x54, 0x19,
    0x9C, 0x47, 0xD0, 0x8F,     0xFB, 0x10, 0xD4, 0xB8
};
uint8_t a[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00
};
uint8_t b[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x07
};
uint8_t k[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xAB, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};

uint8_t x3[32];
uint8_t y3[32];

#define MAX_LINE_SZ 128
void hex_dump_trace(char *str, char *buf, uint16_t len)
{
    char            line[MAX_LINE_SZ];
    char            *lineptr;
    uint16_t        idx = 0;
    uint16_t        lineoffset = 0;

    lineptr = &line[0];
    HAL_TRACE_DEBUG("{}:", str);
    for (idx = 0; idx < len; idx++) {

        lineoffset += snprintf(lineptr + lineoffset, (MAX_LINE_SZ - lineoffset - 1),
                "%02hhx ", buf[idx]);

        if (((idx + 1) % 16) == 0) {
            HAL_TRACE_DEBUG("-{}- {}", idx, line);
            lineoffset = 0;
        }
    }
    if (lineoffset) {
        HAL_TRACE_DEBUG("- {}", line);
    }

}


hal_ret_t capri_barco_asym_ecc_point_mul_p256_test(void)
{
    hal_ret_t           ret = HAL_RET_OK;

    hex_dump_trace((char *)"p", (char *)p, 32);
    hex_dump_trace((char *)"n", (char *)n, 32);
    hex_dump_trace((char *)"xg", (char *)xg, 32);
    hex_dump_trace((char *)"yg", (char *)yg, 32);
    hex_dump_trace((char *)"a", (char *)a, 32);
    hex_dump_trace((char *)"b", (char *)b, 32);
    hex_dump_trace((char *)"k", (char *)k, 32);

    ret = capri_barco_asym_ecc_point_mul_p256(p, n,
        xg, yg, a, b, xg, yg, k, x3, y3);

    if (ret == HAL_RET_OK) {
        hex_dump_trace((char *)"x2", (char *)x3, 32);
        hex_dump_trace((char *)"y3", (char *)y3, 32);
    }

    return ret;
}

hal_ret_t capri_barco_asym_run_tests(void)
{
    hal_ret_t       ret = HAL_RET_OK;

    ret = capri_barco_asym_ecc_point_mul_p256_test();

    return ret;
}
}    // namespace pd
}    // namespace hal
