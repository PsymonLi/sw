#include "nic/hal/hal.hpp"
#include "nic/hal/pd/capri/capri_barco_asym_apis.hpp"

namespace hal {
namespace pd {


#if 0
/* secp256k1 */
uint8_t p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFE,     0xFF, 0xFF, 0xFC, 0x2F
};
uint8_t n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};
uint8_t xg[] = {
    0x79, 0xBE, 0x66, 0x7E,     0xF9, 0xDC, 0xBB, 0xAC,
    0x55, 0xA0, 0x62, 0x95,     0xCE, 0x87, 0x0B, 0x07,
    0x02, 0x9B, 0xFC, 0xDB,     0x2D, 0xCE, 0x28, 0xD9,
    0x59, 0xF2, 0x81, 0x5B,     0x16, 0xF8, 0x17, 0x98
};
uint8_t yg[] = {
    0x48, 0x3A, 0xDA, 0x77,     0x26, 0xA3, 0xC4, 0x65,
    0x5D, 0xA4, 0xFB, 0xFC,     0x0E, 0x11, 0x08, 0xA8,
    0xFD, 0x17, 0xB4, 0x48,     0xA6, 0x85, 0x54, 0x19,
    0x9C, 0x47, 0xD0, 0x8F,     0xFB, 0x10, 0xD4, 0xB8
};
uint8_t a[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00
};
uint8_t b[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x07
};
uint8_t k[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xAB, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};
#else
/* secp256r1 */
uint8_t p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF 
};

uint8_t n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xE6, 0xFA, 0xAD,     0xA7, 0x17, 0x9E, 0x84,
    0xF3, 0xB9, 0xCA, 0xC2,     0xFC, 0x63, 0x25, 0x51
};

uint8_t xg[] = {
    0x6B, 0x17, 0xD1, 0xF2,     0xE1, 0x2C, 0x42, 0x47,
    0xF8, 0xBC, 0xE6, 0xE5,     0x63, 0xA4, 0x40, 0xF2,
    0x77, 0x03, 0x7D, 0x81,     0x2D, 0xEB, 0x33, 0xA0, 
    0xF4, 0xA1, 0x39, 0x45,     0xD8, 0x98, 0xC2, 0x96 
};

uint8_t yg[] = {
    0x4F, 0xE3, 0x42, 0xE2,     0xFE, 0x1A, 0x7F, 0x9B,
    0x8E, 0xE7, 0xEB, 0x4A,     0x7C, 0x0F, 0x9E, 0x16,
    0x2B, 0xCE, 0x33, 0x57,     0x6B, 0x31, 0x5E, 0xCE,
    0xCB, 0xB6, 0x40, 0x68,     0x37, 0xBF, 0x51, 0xF5
};

uint8_t a[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFC
};

uint8_t b[] = {
    0x5A, 0xC6, 0x35, 0xD8,     0xAA, 0x3A, 0x93, 0xE7,
    0xB3, 0xEB, 0xBD, 0x55,     0x76, 0x98, 0x86, 0xBC,
    0x65, 0x1D, 0x06, 0xB0,     0xCC, 0x53, 0xB0, 0xF6,
    0x3B, 0xCE, 0x3C, 0x3E,     0x27, 0xD2, 0x60, 0x4B 
};


uint8_t k[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x09
};

/* Expected output for ECC Point Mul */
uint8_t xq[] = {
    0xEA, 0x68, 0xD7, 0xB6,     0xFE, 0xDF, 0x0B, 0x71,
    0x87, 0x89, 0x38, 0xD5,     0x1D, 0x71, 0xF8, 0x72,
    0x9E, 0x0A, 0xCB, 0x8C,     0x2C, 0x6D, 0xF8, 0xB3,
    0xD7, 0x9E, 0x8A, 0x4B,     0x90, 0x94, 0x9E, 0xE0
};
uint8_t yq[] = {
    0x2A, 0x27, 0x44, 0xC9,     0x72, 0xC9, 0xFC, 0xE7,
    0x87, 0x01, 0x4A, 0x96,     0x4A, 0x8E, 0xA0, 0xC8,
    0x4D, 0x71, 0x4F, 0xEA,     0xA4, 0xDE, 0x82, 0x3F,
    0xE8, 0x5A, 0x22, 0x4A,     0x4D, 0xD0, 0x48, 0xFA
};

#endif


#define MAX_LINE_SZ 128
void hex_dump_trace(char *str, char *buf, uint16_t len)
{
    char            line[MAX_LINE_SZ];
    char            *lineptr;
    uint16_t        idx = 0;
    uint16_t        lineoffset = 0;

    lineptr = &line[0];
    HAL_TRACE_DEBUG("{}:", str);
    for (idx = 0; idx < len; idx++) {

        lineoffset += snprintf(lineptr + lineoffset, (MAX_LINE_SZ - lineoffset - 1),
                "%02hhx ", buf[idx]);

        if (((idx + 1) % 16) == 0) {
            HAL_TRACE_DEBUG("{}", line);
            lineoffset = 0;
        }
    }
    if (lineoffset) {
        HAL_TRACE_DEBUG("{}", line);
    }

}


hal_ret_t capri_barco_asym_ecc_point_mul_p256_test(void)
{
    hal_ret_t           ret = HAL_RET_OK;
    uint8_t             x3[32];
    uint8_t             y3[32];

    ret = capri_barco_asym_ecc_point_mul_p256(p, n,
        xg, yg, a, b, xg, yg, k, x3, y3);

    return ret;
}

hal_ret_t capri_barco_asym_ecdsa_sig_gen_test(void)
{
    hal_ret_t           ret = HAL_RET_OK;
    uint8_t             r[32];
    uint8_t             s[32];

    /* Using k for private key (dA)     */
    /* Using n for the message hash h   */

    ret = capri_barco_asym_ecdsa_p256_sig_gen(p, n,
        xg, yg, a, b, k/*da*/, k, n/*h*/, r, s);

    return ret;
}

uint8_t r[] = {
    0xa9, 0xc0, 0xbe, 0xa4,     0xb0, 0x64, 0xc6, 0x20,
    0xdb, 0x60, 0x16, 0x72,     0x41, 0x41, 0xfb, 0x55,
    0x22, 0xca, 0x97, 0x4d,     0x48, 0x3f, 0x19, 0x26,
    0x54, 0xbb, 0x21, 0xd1,     0xcb, 0xb4, 0xa4, 0x8f
};

uint8_t s[] = {
    0xed, 0x5e, 0x31, 0x00,     0xeb, 0x28, 0x40, 0xac,
    0xe3, 0xed, 0xe4, 0xdc,     0x12, 0xd9, 0xa6, 0x1e,
    0x1a, 0x7c, 0xa4, 0xb8,     0x26, 0x10, 0xe9, 0xb0,
    0x9e, 0x7b, 0x93, 0x58,     0x19, 0xf8, 0xbd, 0x52
};

hal_ret_t capri_barco_asym_ecdsa_sig_verify_test(void)
{
    hal_ret_t           ret = HAL_RET_OK;

    ret = capri_barco_asym_ecdsa_p256_sig_verify(p, n,
        xg, yg, a, b, xq, yq, r, s, n/*h*/);

    return ret;
}


hal_ret_t capri_barco_asym_run_tests(void)
{
    hal_ret_t       ret = HAL_RET_OK;

    ret = capri_barco_asym_ecc_point_mul_p256_test();
    if (ret != HAL_RET_OK) {
        HAL_TRACE_ERR("capri_barco_asym_ecc_point_mul_p256_test failed");
    }
    ret = capri_barco_asym_ecdsa_sig_gen_test();
    if (ret != HAL_RET_OK) {
        HAL_TRACE_ERR("capri_barco_asym_ecdsa_sig_gen_test failed");
    }
    ret = capri_barco_asym_ecdsa_sig_verify_test();
    if (ret != HAL_RET_OK) {
        HAL_TRACE_ERR("capri_barco_asym_ecdsa_sig_verify_test failed");
    }

    return ret;
}
}    // namespace pd
}    // namespace hal
