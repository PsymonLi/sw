#include "nic/hal/hal.hpp"
#include "nic/hal/pd/capri/capri_barco_asym_apis.hpp"

namespace hal {
namespace pd {


#if 0
/* secp256k1 */
uint8_t p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFE,     0xFF, 0xFF, 0xFC, 0x2F
};
uint8_t n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};
uint8_t xg[] = {
    0x79, 0xBE, 0x66, 0x7E,     0xF9, 0xDC, 0xBB, 0xAC,
    0x55, 0xA0, 0x62, 0x95,     0xCE, 0x87, 0x0B, 0x07,
    0x02, 0x9B, 0xFC, 0xDB,     0x2D, 0xCE, 0x28, 0xD9,
    0x59, 0xF2, 0x81, 0x5B,     0x16, 0xF8, 0x17, 0x98
};
uint8_t yg[] = {
    0x48, 0x3A, 0xDA, 0x77,     0x26, 0xA3, 0xC4, 0x65,
    0x5D, 0xA4, 0xFB, 0xFC,     0x0E, 0x11, 0x08, 0xA8,
    0xFD, 0x17, 0xB4, 0x48,     0xA6, 0x85, 0x54, 0x19,
    0x9C, 0x47, 0xD0, 0x8F,     0xFB, 0x10, 0xD4, 0xB8
};
uint8_t a[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00
};
uint8_t b[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x07
};
uint8_t k[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xAB, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFE, 
    0xBA, 0xAE, 0xDC, 0xE6,     0xAF, 0x48, 0xA0, 0x3B, 
    0xBF, 0xD2, 0x5E, 0x8C,     0xD0, 0x36, 0x41, 0x41
};
#else
/* secp256r1 */
uint8_t p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF 
};

uint8_t n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xE6, 0xFA, 0xAD,     0xA7, 0x17, 0x9E, 0x84,
    0xF3, 0xB9, 0xCA, 0xC2,     0xFC, 0x63, 0x25, 0x51
};

uint8_t xg[] = {
    0x6B, 0x17, 0xD1, 0xF2,     0xE1, 0x2C, 0x42, 0x47,
    0xF8, 0xBC, 0xE6, 0xE5,     0x63, 0xA4, 0x40, 0xF2,
    0x77, 0x03, 0x7D, 0x81,     0x2D, 0xEB, 0x33, 0xA0, 
    0xF4, 0xA1, 0x39, 0x45,     0xD8, 0x98, 0xC2, 0x96 
};

uint8_t yg[] = {
    0x4F, 0xE3, 0x42, 0xE2,     0xFE, 0x1A, 0x7F, 0x9B,
    0x8E, 0xE7, 0xEB, 0x4A,     0x7C, 0x0F, 0x9E, 0x16,
    0x2B, 0xCE, 0x33, 0x57,     0x6B, 0x31, 0x5E, 0xCE,
    0xCB, 0xB6, 0x40, 0x68,     0x37, 0xBF, 0x51, 0xF5
};

uint8_t a[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFC
};

uint8_t b[] = {
    0x5A, 0xC6, 0x35, 0xD8,     0xAA, 0x3A, 0x93, 0xE7,
    0xB3, 0xEB, 0xBD, 0x55,     0x76, 0x98, 0x86, 0xBC,
    0x65, 0x1D, 0x06, 0xB0,     0xCC, 0x53, 0xB0, 0xF6,
    0x3B, 0xCE, 0x3C, 0x3E,     0x27, 0xD2, 0x60, 0x4B 
};


uint8_t k[] = {
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x09
};

uint8_t xP[] = {
    0x8E, 0x53, 0x3B, 0x6F,     0xA0, 0xBF, 0x7B, 0x46,
    0x25, 0xBB, 0x30, 0x66,     0x7C, 0x01, 0xFB, 0x60,
    0x7E, 0xF9, 0xF8, 0xB8,     0xA8, 0x0F, 0xEF, 0x5B,
    0x30, 0x06, 0x28, 0x70,     0x31, 0x87, 0xB2, 0xA3
};
uint8_t yP[] = {

    0x73, 0xEB, 0x1D, 0xBD,     0xE0, 0x33, 0x18, 0x36,
    0x6D, 0x06, 0x9F, 0x83,     0xA6, 0xF5, 0x90, 0x00,
    0x53, 0xC7, 0x36, 0x33,     0xCB, 0x04, 0x1B, 0x21,
    0xC5, 0x5E, 0x1A, 0x86,     0xC1, 0xF4, 0x00, 0xB4
};

#endif

uint8_t x3[32];
uint8_t y3[32];

#define MAX_LINE_SZ 128
void hex_dump_trace(char *str, char *buf, uint16_t len)
{
    char            line[MAX_LINE_SZ];
    char            *lineptr;
    uint16_t        idx = 0;
    uint16_t        lineoffset = 0;

    lineptr = &line[0];
    HAL_TRACE_DEBUG("{}:", str);
    for (idx = 0; idx < len; idx++) {

        lineoffset += snprintf(lineptr + lineoffset, (MAX_LINE_SZ - lineoffset - 1),
                "%02hhx ", buf[idx]);

        if (((idx + 1) % 16) == 0) {
            HAL_TRACE_DEBUG("{}", line);
            lineoffset = 0;
        }
    }
    if (lineoffset) {
        HAL_TRACE_DEBUG("{}", line);
    }

}


hal_ret_t capri_barco_asym_ecc_point_mul_p256_test(void)
{
    hal_ret_t           ret = HAL_RET_OK;

    ret = capri_barco_asym_ecc_point_mul_p256(p, n,
        xg, yg, a, b, xg, yg, k, x3, y3);

    return ret;
}

hal_ret_t capri_barco_asym_run_tests(void)
{
    hal_ret_t       ret = HAL_RET_OK;

    ret = capri_barco_asym_ecc_point_mul_p256_test();

    return ret;
}
}    // namespace pd
}    // namespace hal
