
#include "cap_pbc_csr.h"
#include "LogMsg.h"        
using namespace std;
        
cap_pbc_csr_dhs_sched_entry_t::cap_pbc_csr_dhs_sched_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_sched_entry_t::~cap_pbc_csr_dhs_sched_entry_t() { }

cap_pbc_csr_dhs_sched_t::cap_pbc_csr_dhs_sched_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_sched_t::~cap_pbc_csr_dhs_sched_t() { }

cap_pbc_csr_dhs_rc_entry_t::cap_pbc_csr_dhs_rc_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_rc_entry_t::~cap_pbc_csr_dhs_rc_entry_t() { }

cap_pbc_csr_dhs_rc_t::cap_pbc_csr_dhs_rc_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_rc_t::~cap_pbc_csr_dhs_rc_t() { }

cap_pbc_csr_dhs_gc_entry_t::cap_pbc_csr_dhs_gc_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_gc_entry_t::~cap_pbc_csr_dhs_gc_entry_t() { }

cap_pbc_csr_dhs_gc_t::cap_pbc_csr_dhs_gc_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_gc_t::~cap_pbc_csr_dhs_gc_t() { }

cap_pbc_csr_dhs_desc_1_entry_t::cap_pbc_csr_dhs_desc_1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_desc_1_entry_t::~cap_pbc_csr_dhs_desc_1_entry_t() { }

cap_pbc_csr_dhs_desc_1_t::cap_pbc_csr_dhs_desc_1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_desc_1_t::~cap_pbc_csr_dhs_desc_1_t() { }

cap_pbc_csr_dhs_ll_1_entry_t::cap_pbc_csr_dhs_ll_1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_ll_1_entry_t::~cap_pbc_csr_dhs_ll_1_entry_t() { }

cap_pbc_csr_dhs_ll_1_t::cap_pbc_csr_dhs_ll_1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_ll_1_t::~cap_pbc_csr_dhs_ll_1_t() { }

cap_pbc_csr_dhs_fc_1_entry_t::cap_pbc_csr_dhs_fc_1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_fc_1_entry_t::~cap_pbc_csr_dhs_fc_1_entry_t() { }

cap_pbc_csr_dhs_fc_1_t::cap_pbc_csr_dhs_fc_1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_fc_1_t::~cap_pbc_csr_dhs_fc_1_t() { }

cap_pbc_csr_dhs_desc_0_entry_t::cap_pbc_csr_dhs_desc_0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_desc_0_entry_t::~cap_pbc_csr_dhs_desc_0_entry_t() { }

cap_pbc_csr_dhs_desc_0_t::cap_pbc_csr_dhs_desc_0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_desc_0_t::~cap_pbc_csr_dhs_desc_0_t() { }

cap_pbc_csr_dhs_ll_0_entry_t::cap_pbc_csr_dhs_ll_0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_ll_0_entry_t::~cap_pbc_csr_dhs_ll_0_entry_t() { }

cap_pbc_csr_dhs_ll_0_t::cap_pbc_csr_dhs_ll_0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_ll_0_t::~cap_pbc_csr_dhs_ll_0_t() { }

cap_pbc_csr_dhs_fc_0_entry_t::cap_pbc_csr_dhs_fc_0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_fc_0_entry_t::~cap_pbc_csr_dhs_fc_0_entry_t() { }

cap_pbc_csr_dhs_fc_0_t::cap_pbc_csr_dhs_fc_0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_fc_0_t::~cap_pbc_csr_dhs_fc_0_t() { }

cap_pbc_csr_dhs_oq_11_entry_t::cap_pbc_csr_dhs_oq_11_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_11_entry_t::~cap_pbc_csr_dhs_oq_11_entry_t() { }

cap_pbc_csr_dhs_oq_11_t::cap_pbc_csr_dhs_oq_11_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_11_t::~cap_pbc_csr_dhs_oq_11_t() { }

cap_pbc_csr_dhs_oq_10_entry_t::cap_pbc_csr_dhs_oq_10_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_10_entry_t::~cap_pbc_csr_dhs_oq_10_entry_t() { }

cap_pbc_csr_dhs_oq_10_t::cap_pbc_csr_dhs_oq_10_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_10_t::~cap_pbc_csr_dhs_oq_10_t() { }

cap_pbc_csr_dhs_oq_9_entry_t::cap_pbc_csr_dhs_oq_9_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_9_entry_t::~cap_pbc_csr_dhs_oq_9_entry_t() { }

cap_pbc_csr_dhs_oq_9_t::cap_pbc_csr_dhs_oq_9_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_9_t::~cap_pbc_csr_dhs_oq_9_t() { }

cap_pbc_csr_dhs_oq_8_entry_t::cap_pbc_csr_dhs_oq_8_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_8_entry_t::~cap_pbc_csr_dhs_oq_8_entry_t() { }

cap_pbc_csr_dhs_oq_8_t::cap_pbc_csr_dhs_oq_8_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_8_t::~cap_pbc_csr_dhs_oq_8_t() { }

cap_pbc_csr_dhs_oq_7_entry_t::cap_pbc_csr_dhs_oq_7_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_7_entry_t::~cap_pbc_csr_dhs_oq_7_entry_t() { }

cap_pbc_csr_dhs_oq_7_t::cap_pbc_csr_dhs_oq_7_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_7_t::~cap_pbc_csr_dhs_oq_7_t() { }

cap_pbc_csr_dhs_oq_6_entry_t::cap_pbc_csr_dhs_oq_6_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_6_entry_t::~cap_pbc_csr_dhs_oq_6_entry_t() { }

cap_pbc_csr_dhs_oq_6_t::cap_pbc_csr_dhs_oq_6_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_6_t::~cap_pbc_csr_dhs_oq_6_t() { }

cap_pbc_csr_dhs_oq_5_entry_t::cap_pbc_csr_dhs_oq_5_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_5_entry_t::~cap_pbc_csr_dhs_oq_5_entry_t() { }

cap_pbc_csr_dhs_oq_5_t::cap_pbc_csr_dhs_oq_5_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_5_t::~cap_pbc_csr_dhs_oq_5_t() { }

cap_pbc_csr_dhs_oq_4_entry_t::cap_pbc_csr_dhs_oq_4_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_4_entry_t::~cap_pbc_csr_dhs_oq_4_entry_t() { }

cap_pbc_csr_dhs_oq_4_t::cap_pbc_csr_dhs_oq_4_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_4_t::~cap_pbc_csr_dhs_oq_4_t() { }

cap_pbc_csr_dhs_oq_3_entry_t::cap_pbc_csr_dhs_oq_3_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_3_entry_t::~cap_pbc_csr_dhs_oq_3_entry_t() { }

cap_pbc_csr_dhs_oq_3_t::cap_pbc_csr_dhs_oq_3_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_3_t::~cap_pbc_csr_dhs_oq_3_t() { }

cap_pbc_csr_dhs_oq_2_entry_t::cap_pbc_csr_dhs_oq_2_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_2_entry_t::~cap_pbc_csr_dhs_oq_2_entry_t() { }

cap_pbc_csr_dhs_oq_2_t::cap_pbc_csr_dhs_oq_2_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_2_t::~cap_pbc_csr_dhs_oq_2_t() { }

cap_pbc_csr_dhs_oq_1_entry_t::cap_pbc_csr_dhs_oq_1_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_1_entry_t::~cap_pbc_csr_dhs_oq_1_entry_t() { }

cap_pbc_csr_dhs_oq_1_t::cap_pbc_csr_dhs_oq_1_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_1_t::~cap_pbc_csr_dhs_oq_1_t() { }

cap_pbc_csr_dhs_oq_0_entry_t::cap_pbc_csr_dhs_oq_0_entry_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_0_entry_t::~cap_pbc_csr_dhs_oq_0_entry_t() { }

cap_pbc_csr_dhs_oq_0_t::cap_pbc_csr_dhs_oq_0_t(string name, cap_csr_base * parent): 
    cap_memory_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_dhs_oq_0_t::~cap_pbc_csr_dhs_oq_0_t() { }

cap_pbc_csr_cfg_src_port_to_lif_map_t::cap_pbc_csr_cfg_src_port_to_lif_map_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_src_port_to_lif_map_t::~cap_pbc_csr_cfg_src_port_to_lif_map_t() { }

cap_pbc_csr_cfg_tail_drop_t::cap_pbc_csr_cfg_tail_drop_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_tail_drop_t::~cap_pbc_csr_cfg_tail_drop_t() { }

cap_pbc_csr_sta_rpl_err_t::cap_pbc_csr_sta_rpl_err_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_rpl_err_t::~cap_pbc_csr_sta_rpl_err_t() { }

cap_pbc_csr_sta_ecc_sideband_t::cap_pbc_csr_sta_ecc_sideband_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_sideband_t::~cap_pbc_csr_sta_ecc_sideband_t() { }

cap_pbc_csr_cfg_spare_t::cap_pbc_csr_cfg_spare_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_spare_t::~cap_pbc_csr_cfg_spare_t() { }

cap_pbc_csr_cfg_debug_port_t::cap_pbc_csr_cfg_debug_port_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_debug_port_t::~cap_pbc_csr_cfg_debug_port_t() { }

cap_pbc_csr_cfg_dhs_t::cap_pbc_csr_cfg_dhs_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_dhs_t::~cap_pbc_csr_cfg_dhs_t() { }

cap_pbc_csr_sta_oq_12_t::cap_pbc_csr_sta_oq_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_oq_12_t::~cap_pbc_csr_sta_oq_12_t() { }

cap_pbc_csr_sta_oq_t::cap_pbc_csr_sta_oq_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_oq_t::~cap_pbc_csr_sta_oq_t() { }

cap_pbc_csr_cnt_write_error_t::cap_pbc_csr_cnt_write_error_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cnt_write_error_t::~cap_pbc_csr_cnt_write_error_t() { }

cap_pbc_csr_cnt_flits_t::cap_pbc_csr_cnt_flits_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cnt_flits_t::~cap_pbc_csr_cnt_flits_t() { }

cap_pbc_csr_cfg_parser8_t::cap_pbc_csr_cfg_parser8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser8_t::~cap_pbc_csr_cfg_parser8_t() { }

cap_pbc_csr_cfg_parser7_t::cap_pbc_csr_cfg_parser7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser7_t::~cap_pbc_csr_cfg_parser7_t() { }

cap_pbc_csr_cfg_parser6_t::cap_pbc_csr_cfg_parser6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser6_t::~cap_pbc_csr_cfg_parser6_t() { }

cap_pbc_csr_cfg_parser5_t::cap_pbc_csr_cfg_parser5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser5_t::~cap_pbc_csr_cfg_parser5_t() { }

cap_pbc_csr_cfg_parser4_t::cap_pbc_csr_cfg_parser4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser4_t::~cap_pbc_csr_cfg_parser4_t() { }

cap_pbc_csr_cfg_parser3_t::cap_pbc_csr_cfg_parser3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser3_t::~cap_pbc_csr_cfg_parser3_t() { }

cap_pbc_csr_cfg_parser2_t::cap_pbc_csr_cfg_parser2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser2_t::~cap_pbc_csr_cfg_parser2_t() { }

cap_pbc_csr_cfg_parser1_t::cap_pbc_csr_cfg_parser1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser1_t::~cap_pbc_csr_cfg_parser1_t() { }

cap_pbc_csr_cfg_parser0_t::cap_pbc_csr_cfg_parser0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_parser0_t::~cap_pbc_csr_cfg_parser0_t() { }

cap_pbc_csr_cfg_rpl_t::cap_pbc_csr_cfg_rpl_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_rpl_t::~cap_pbc_csr_cfg_rpl_t() { }

cap_pbc_csr_cfg_island_control_t::cap_pbc_csr_cfg_island_control_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_island_control_t::~cap_pbc_csr_cfg_island_control_t() { }

cap_pbc_csr_sta_sched_t::cap_pbc_csr_sta_sched_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_sched_t::~cap_pbc_csr_sta_sched_t() { }

cap_pbc_csr_cfg_sched_t::cap_pbc_csr_cfg_sched_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_sched_t::~cap_pbc_csr_cfg_sched_t() { }

cap_pbc_csr_sta_rc_t::cap_pbc_csr_sta_rc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_rc_t::~cap_pbc_csr_sta_rc_t() { }

cap_pbc_csr_cfg_rc_t::cap_pbc_csr_cfg_rc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_rc_t::~cap_pbc_csr_cfg_rc_t() { }

cap_pbc_csr_cfg_gc_t::cap_pbc_csr_cfg_gc_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_gc_t::~cap_pbc_csr_cfg_gc_t() { }

cap_pbc_csr_sta_ecc_desc_1_t::cap_pbc_csr_sta_ecc_desc_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_desc_1_t::~cap_pbc_csr_sta_ecc_desc_1_t() { }

cap_pbc_csr_cfg_desc_1_t::cap_pbc_csr_cfg_desc_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_desc_1_t::~cap_pbc_csr_cfg_desc_1_t() { }

cap_pbc_csr_sta_ecc_ll_1_t::cap_pbc_csr_sta_ecc_ll_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_ll_1_t::~cap_pbc_csr_sta_ecc_ll_1_t() { }

cap_pbc_csr_cfg_ll_1_t::cap_pbc_csr_cfg_ll_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_ll_1_t::~cap_pbc_csr_cfg_ll_1_t() { }

cap_pbc_csr_sta_ecc_fc_1_t::cap_pbc_csr_sta_ecc_fc_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_fc_1_t::~cap_pbc_csr_sta_ecc_fc_1_t() { }

cap_pbc_csr_cfg_fc_mgr_1_t::cap_pbc_csr_cfg_fc_mgr_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_fc_mgr_1_t::~cap_pbc_csr_cfg_fc_mgr_1_t() { }

cap_pbc_csr_sta_fc_mgr_1_t::cap_pbc_csr_sta_fc_mgr_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_fc_mgr_1_t::~cap_pbc_csr_sta_fc_mgr_1_t() { }

cap_pbc_csr_sta_ecc_desc_0_t::cap_pbc_csr_sta_ecc_desc_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_desc_0_t::~cap_pbc_csr_sta_ecc_desc_0_t() { }

cap_pbc_csr_cfg_desc_0_t::cap_pbc_csr_cfg_desc_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_desc_0_t::~cap_pbc_csr_cfg_desc_0_t() { }

cap_pbc_csr_sta_ecc_ll_0_t::cap_pbc_csr_sta_ecc_ll_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_ll_0_t::~cap_pbc_csr_sta_ecc_ll_0_t() { }

cap_pbc_csr_cfg_ll_0_t::cap_pbc_csr_cfg_ll_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_ll_0_t::~cap_pbc_csr_cfg_ll_0_t() { }

cap_pbc_csr_sta_ecc_fc_0_t::cap_pbc_csr_sta_ecc_fc_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_fc_0_t::~cap_pbc_csr_sta_ecc_fc_0_t() { }

cap_pbc_csr_cfg_fc_mgr_0_t::cap_pbc_csr_cfg_fc_mgr_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_fc_mgr_0_t::~cap_pbc_csr_cfg_fc_mgr_0_t() { }

cap_pbc_csr_sta_fc_mgr_0_t::cap_pbc_csr_sta_fc_mgr_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_fc_mgr_0_t::~cap_pbc_csr_sta_fc_mgr_0_t() { }

cap_pbc_csr_sta_ecc_rwr_t::cap_pbc_csr_sta_ecc_rwr_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_rwr_t::~cap_pbc_csr_sta_ecc_rwr_t() { }

cap_pbc_csr_sta_ecc_pack_t::cap_pbc_csr_sta_ecc_pack_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_pack_t::~cap_pbc_csr_sta_ecc_pack_t() { }

cap_pbc_csr_sta_ecc_oq_t::cap_pbc_csr_sta_ecc_oq_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_ecc_oq_t::~cap_pbc_csr_sta_ecc_oq_t() { }

cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::cap_pbc_csr_cfg_oq_11_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_11_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::cap_pbc_csr_cfg_oq_11_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_11_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::cap_pbc_csr_cfg_oq_11_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_11_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::cap_pbc_csr_cfg_oq_11_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_11_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_11_t::cap_pbc_csr_cfg_oq_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_11_t::~cap_pbc_csr_cfg_oq_11_t() { }

cap_pbc_csr_cfg_account_11_pg_31_t::cap_pbc_csr_cfg_account_11_pg_31_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_31_t::~cap_pbc_csr_cfg_account_11_pg_31_t() { }

cap_pbc_csr_cfg_account_11_pg_30_t::cap_pbc_csr_cfg_account_11_pg_30_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_30_t::~cap_pbc_csr_cfg_account_11_pg_30_t() { }

cap_pbc_csr_cfg_account_11_pg_29_t::cap_pbc_csr_cfg_account_11_pg_29_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_29_t::~cap_pbc_csr_cfg_account_11_pg_29_t() { }

cap_pbc_csr_cfg_account_11_pg_28_t::cap_pbc_csr_cfg_account_11_pg_28_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_28_t::~cap_pbc_csr_cfg_account_11_pg_28_t() { }

cap_pbc_csr_cfg_account_11_pg_27_t::cap_pbc_csr_cfg_account_11_pg_27_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_27_t::~cap_pbc_csr_cfg_account_11_pg_27_t() { }

cap_pbc_csr_cfg_account_11_pg_26_t::cap_pbc_csr_cfg_account_11_pg_26_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_26_t::~cap_pbc_csr_cfg_account_11_pg_26_t() { }

cap_pbc_csr_cfg_account_11_pg_25_t::cap_pbc_csr_cfg_account_11_pg_25_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_25_t::~cap_pbc_csr_cfg_account_11_pg_25_t() { }

cap_pbc_csr_cfg_account_11_pg_24_t::cap_pbc_csr_cfg_account_11_pg_24_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_24_t::~cap_pbc_csr_cfg_account_11_pg_24_t() { }

cap_pbc_csr_cfg_account_11_pg_23_t::cap_pbc_csr_cfg_account_11_pg_23_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_23_t::~cap_pbc_csr_cfg_account_11_pg_23_t() { }

cap_pbc_csr_cfg_account_11_pg_22_t::cap_pbc_csr_cfg_account_11_pg_22_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_22_t::~cap_pbc_csr_cfg_account_11_pg_22_t() { }

cap_pbc_csr_cfg_account_11_pg_21_t::cap_pbc_csr_cfg_account_11_pg_21_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_21_t::~cap_pbc_csr_cfg_account_11_pg_21_t() { }

cap_pbc_csr_cfg_account_11_pg_20_t::cap_pbc_csr_cfg_account_11_pg_20_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_20_t::~cap_pbc_csr_cfg_account_11_pg_20_t() { }

cap_pbc_csr_cfg_account_11_pg_19_t::cap_pbc_csr_cfg_account_11_pg_19_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_19_t::~cap_pbc_csr_cfg_account_11_pg_19_t() { }

cap_pbc_csr_cfg_account_11_pg_18_t::cap_pbc_csr_cfg_account_11_pg_18_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_18_t::~cap_pbc_csr_cfg_account_11_pg_18_t() { }

cap_pbc_csr_cfg_account_11_pg_17_t::cap_pbc_csr_cfg_account_11_pg_17_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_17_t::~cap_pbc_csr_cfg_account_11_pg_17_t() { }

cap_pbc_csr_cfg_account_11_pg_16_t::cap_pbc_csr_cfg_account_11_pg_16_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_16_t::~cap_pbc_csr_cfg_account_11_pg_16_t() { }

cap_pbc_csr_cfg_account_11_pg_15_t::cap_pbc_csr_cfg_account_11_pg_15_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_15_t::~cap_pbc_csr_cfg_account_11_pg_15_t() { }

cap_pbc_csr_cfg_account_11_pg_14_t::cap_pbc_csr_cfg_account_11_pg_14_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_14_t::~cap_pbc_csr_cfg_account_11_pg_14_t() { }

cap_pbc_csr_cfg_account_11_pg_13_t::cap_pbc_csr_cfg_account_11_pg_13_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_13_t::~cap_pbc_csr_cfg_account_11_pg_13_t() { }

cap_pbc_csr_cfg_account_11_pg_12_t::cap_pbc_csr_cfg_account_11_pg_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_12_t::~cap_pbc_csr_cfg_account_11_pg_12_t() { }

cap_pbc_csr_cfg_account_11_pg_11_t::cap_pbc_csr_cfg_account_11_pg_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_11_t::~cap_pbc_csr_cfg_account_11_pg_11_t() { }

cap_pbc_csr_cfg_account_11_pg_10_t::cap_pbc_csr_cfg_account_11_pg_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_10_t::~cap_pbc_csr_cfg_account_11_pg_10_t() { }

cap_pbc_csr_cfg_account_11_pg_9_t::cap_pbc_csr_cfg_account_11_pg_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_9_t::~cap_pbc_csr_cfg_account_11_pg_9_t() { }

cap_pbc_csr_cfg_account_11_pg_8_t::cap_pbc_csr_cfg_account_11_pg_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_8_t::~cap_pbc_csr_cfg_account_11_pg_8_t() { }

cap_pbc_csr_cfg_account_11_pg_7_t::cap_pbc_csr_cfg_account_11_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_7_t::~cap_pbc_csr_cfg_account_11_pg_7_t() { }

cap_pbc_csr_cfg_account_11_pg_6_t::cap_pbc_csr_cfg_account_11_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_6_t::~cap_pbc_csr_cfg_account_11_pg_6_t() { }

cap_pbc_csr_cfg_account_11_pg_5_t::cap_pbc_csr_cfg_account_11_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_5_t::~cap_pbc_csr_cfg_account_11_pg_5_t() { }

cap_pbc_csr_cfg_account_11_pg_4_t::cap_pbc_csr_cfg_account_11_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_4_t::~cap_pbc_csr_cfg_account_11_pg_4_t() { }

cap_pbc_csr_cfg_account_11_pg_3_t::cap_pbc_csr_cfg_account_11_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_3_t::~cap_pbc_csr_cfg_account_11_pg_3_t() { }

cap_pbc_csr_cfg_account_11_pg_2_t::cap_pbc_csr_cfg_account_11_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_2_t::~cap_pbc_csr_cfg_account_11_pg_2_t() { }

cap_pbc_csr_cfg_account_11_pg_1_t::cap_pbc_csr_cfg_account_11_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_1_t::~cap_pbc_csr_cfg_account_11_pg_1_t() { }

cap_pbc_csr_cfg_account_11_pg_0_t::cap_pbc_csr_cfg_account_11_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pg_0_t::~cap_pbc_csr_cfg_account_11_pg_0_t() { }

cap_pbc_csr_cfg_account_11_mtu_table_t::cap_pbc_csr_cfg_account_11_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_mtu_table_t::~cap_pbc_csr_cfg_account_11_mtu_table_t() { }

cap_pbc_csr_cfg_account_11_pause_timer_t::cap_pbc_csr_cfg_account_11_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_pause_timer_t::~cap_pbc_csr_cfg_account_11_pause_timer_t() { }

cap_pbc_csr_sta_account_11_t::cap_pbc_csr_sta_account_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_11_t::~cap_pbc_csr_sta_account_11_t() { }

cap_pbc_csr_cfg_account_11_tc_to_pg_t::cap_pbc_csr_cfg_account_11_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_11_tc_to_pg_t::~cap_pbc_csr_cfg_account_11_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_11_t::cap_pbc_csr_cfg_write_control_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_11_t::~cap_pbc_csr_cfg_write_control_11_t() { }

cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::cap_pbc_csr_cfg_oq_10_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_10_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::cap_pbc_csr_cfg_oq_10_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_10_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::cap_pbc_csr_cfg_oq_10_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_10_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::cap_pbc_csr_cfg_oq_10_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_10_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_10_t::cap_pbc_csr_cfg_oq_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_10_t::~cap_pbc_csr_cfg_oq_10_t() { }

cap_pbc_csr_cfg_account_10_pg_31_t::cap_pbc_csr_cfg_account_10_pg_31_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_31_t::~cap_pbc_csr_cfg_account_10_pg_31_t() { }

cap_pbc_csr_cfg_account_10_pg_30_t::cap_pbc_csr_cfg_account_10_pg_30_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_30_t::~cap_pbc_csr_cfg_account_10_pg_30_t() { }

cap_pbc_csr_cfg_account_10_pg_29_t::cap_pbc_csr_cfg_account_10_pg_29_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_29_t::~cap_pbc_csr_cfg_account_10_pg_29_t() { }

cap_pbc_csr_cfg_account_10_pg_28_t::cap_pbc_csr_cfg_account_10_pg_28_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_28_t::~cap_pbc_csr_cfg_account_10_pg_28_t() { }

cap_pbc_csr_cfg_account_10_pg_27_t::cap_pbc_csr_cfg_account_10_pg_27_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_27_t::~cap_pbc_csr_cfg_account_10_pg_27_t() { }

cap_pbc_csr_cfg_account_10_pg_26_t::cap_pbc_csr_cfg_account_10_pg_26_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_26_t::~cap_pbc_csr_cfg_account_10_pg_26_t() { }

cap_pbc_csr_cfg_account_10_pg_25_t::cap_pbc_csr_cfg_account_10_pg_25_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_25_t::~cap_pbc_csr_cfg_account_10_pg_25_t() { }

cap_pbc_csr_cfg_account_10_pg_24_t::cap_pbc_csr_cfg_account_10_pg_24_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_24_t::~cap_pbc_csr_cfg_account_10_pg_24_t() { }

cap_pbc_csr_cfg_account_10_pg_23_t::cap_pbc_csr_cfg_account_10_pg_23_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_23_t::~cap_pbc_csr_cfg_account_10_pg_23_t() { }

cap_pbc_csr_cfg_account_10_pg_22_t::cap_pbc_csr_cfg_account_10_pg_22_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_22_t::~cap_pbc_csr_cfg_account_10_pg_22_t() { }

cap_pbc_csr_cfg_account_10_pg_21_t::cap_pbc_csr_cfg_account_10_pg_21_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_21_t::~cap_pbc_csr_cfg_account_10_pg_21_t() { }

cap_pbc_csr_cfg_account_10_pg_20_t::cap_pbc_csr_cfg_account_10_pg_20_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_20_t::~cap_pbc_csr_cfg_account_10_pg_20_t() { }

cap_pbc_csr_cfg_account_10_pg_19_t::cap_pbc_csr_cfg_account_10_pg_19_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_19_t::~cap_pbc_csr_cfg_account_10_pg_19_t() { }

cap_pbc_csr_cfg_account_10_pg_18_t::cap_pbc_csr_cfg_account_10_pg_18_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_18_t::~cap_pbc_csr_cfg_account_10_pg_18_t() { }

cap_pbc_csr_cfg_account_10_pg_17_t::cap_pbc_csr_cfg_account_10_pg_17_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_17_t::~cap_pbc_csr_cfg_account_10_pg_17_t() { }

cap_pbc_csr_cfg_account_10_pg_16_t::cap_pbc_csr_cfg_account_10_pg_16_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_16_t::~cap_pbc_csr_cfg_account_10_pg_16_t() { }

cap_pbc_csr_cfg_account_10_pg_15_t::cap_pbc_csr_cfg_account_10_pg_15_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_15_t::~cap_pbc_csr_cfg_account_10_pg_15_t() { }

cap_pbc_csr_cfg_account_10_pg_14_t::cap_pbc_csr_cfg_account_10_pg_14_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_14_t::~cap_pbc_csr_cfg_account_10_pg_14_t() { }

cap_pbc_csr_cfg_account_10_pg_13_t::cap_pbc_csr_cfg_account_10_pg_13_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_13_t::~cap_pbc_csr_cfg_account_10_pg_13_t() { }

cap_pbc_csr_cfg_account_10_pg_12_t::cap_pbc_csr_cfg_account_10_pg_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_12_t::~cap_pbc_csr_cfg_account_10_pg_12_t() { }

cap_pbc_csr_cfg_account_10_pg_11_t::cap_pbc_csr_cfg_account_10_pg_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_11_t::~cap_pbc_csr_cfg_account_10_pg_11_t() { }

cap_pbc_csr_cfg_account_10_pg_10_t::cap_pbc_csr_cfg_account_10_pg_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_10_t::~cap_pbc_csr_cfg_account_10_pg_10_t() { }

cap_pbc_csr_cfg_account_10_pg_9_t::cap_pbc_csr_cfg_account_10_pg_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_9_t::~cap_pbc_csr_cfg_account_10_pg_9_t() { }

cap_pbc_csr_cfg_account_10_pg_8_t::cap_pbc_csr_cfg_account_10_pg_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_8_t::~cap_pbc_csr_cfg_account_10_pg_8_t() { }

cap_pbc_csr_cfg_account_10_pg_7_t::cap_pbc_csr_cfg_account_10_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_7_t::~cap_pbc_csr_cfg_account_10_pg_7_t() { }

cap_pbc_csr_cfg_account_10_pg_6_t::cap_pbc_csr_cfg_account_10_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_6_t::~cap_pbc_csr_cfg_account_10_pg_6_t() { }

cap_pbc_csr_cfg_account_10_pg_5_t::cap_pbc_csr_cfg_account_10_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_5_t::~cap_pbc_csr_cfg_account_10_pg_5_t() { }

cap_pbc_csr_cfg_account_10_pg_4_t::cap_pbc_csr_cfg_account_10_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_4_t::~cap_pbc_csr_cfg_account_10_pg_4_t() { }

cap_pbc_csr_cfg_account_10_pg_3_t::cap_pbc_csr_cfg_account_10_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_3_t::~cap_pbc_csr_cfg_account_10_pg_3_t() { }

cap_pbc_csr_cfg_account_10_pg_2_t::cap_pbc_csr_cfg_account_10_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_2_t::~cap_pbc_csr_cfg_account_10_pg_2_t() { }

cap_pbc_csr_cfg_account_10_pg_1_t::cap_pbc_csr_cfg_account_10_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_1_t::~cap_pbc_csr_cfg_account_10_pg_1_t() { }

cap_pbc_csr_cfg_account_10_pg_0_t::cap_pbc_csr_cfg_account_10_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pg_0_t::~cap_pbc_csr_cfg_account_10_pg_0_t() { }

cap_pbc_csr_cfg_account_10_mtu_table_t::cap_pbc_csr_cfg_account_10_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_mtu_table_t::~cap_pbc_csr_cfg_account_10_mtu_table_t() { }

cap_pbc_csr_cfg_account_10_pause_timer_t::cap_pbc_csr_cfg_account_10_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_pause_timer_t::~cap_pbc_csr_cfg_account_10_pause_timer_t() { }

cap_pbc_csr_sta_account_10_t::cap_pbc_csr_sta_account_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_10_t::~cap_pbc_csr_sta_account_10_t() { }

cap_pbc_csr_cfg_account_10_tc_to_pg_t::cap_pbc_csr_cfg_account_10_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_10_tc_to_pg_t::~cap_pbc_csr_cfg_account_10_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_10_t::cap_pbc_csr_cfg_write_control_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_10_t::~cap_pbc_csr_cfg_write_control_10_t() { }

cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::cap_pbc_csr_cfg_oq_9_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_9_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::cap_pbc_csr_cfg_oq_9_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_9_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::cap_pbc_csr_cfg_oq_9_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_9_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::cap_pbc_csr_cfg_oq_9_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_9_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_9_t::cap_pbc_csr_cfg_oq_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_9_t::~cap_pbc_csr_cfg_oq_9_t() { }

cap_pbc_csr_cfg_account_9_pg_15_t::cap_pbc_csr_cfg_account_9_pg_15_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_15_t::~cap_pbc_csr_cfg_account_9_pg_15_t() { }

cap_pbc_csr_cfg_account_9_pg_14_t::cap_pbc_csr_cfg_account_9_pg_14_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_14_t::~cap_pbc_csr_cfg_account_9_pg_14_t() { }

cap_pbc_csr_cfg_account_9_pg_13_t::cap_pbc_csr_cfg_account_9_pg_13_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_13_t::~cap_pbc_csr_cfg_account_9_pg_13_t() { }

cap_pbc_csr_cfg_account_9_pg_12_t::cap_pbc_csr_cfg_account_9_pg_12_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_12_t::~cap_pbc_csr_cfg_account_9_pg_12_t() { }

cap_pbc_csr_cfg_account_9_pg_11_t::cap_pbc_csr_cfg_account_9_pg_11_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_11_t::~cap_pbc_csr_cfg_account_9_pg_11_t() { }

cap_pbc_csr_cfg_account_9_pg_10_t::cap_pbc_csr_cfg_account_9_pg_10_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_10_t::~cap_pbc_csr_cfg_account_9_pg_10_t() { }

cap_pbc_csr_cfg_account_9_pg_9_t::cap_pbc_csr_cfg_account_9_pg_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_9_t::~cap_pbc_csr_cfg_account_9_pg_9_t() { }

cap_pbc_csr_cfg_account_9_pg_8_t::cap_pbc_csr_cfg_account_9_pg_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_8_t::~cap_pbc_csr_cfg_account_9_pg_8_t() { }

cap_pbc_csr_cfg_account_9_pg_7_t::cap_pbc_csr_cfg_account_9_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_7_t::~cap_pbc_csr_cfg_account_9_pg_7_t() { }

cap_pbc_csr_cfg_account_9_pg_6_t::cap_pbc_csr_cfg_account_9_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_6_t::~cap_pbc_csr_cfg_account_9_pg_6_t() { }

cap_pbc_csr_cfg_account_9_pg_5_t::cap_pbc_csr_cfg_account_9_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_5_t::~cap_pbc_csr_cfg_account_9_pg_5_t() { }

cap_pbc_csr_cfg_account_9_pg_4_t::cap_pbc_csr_cfg_account_9_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_4_t::~cap_pbc_csr_cfg_account_9_pg_4_t() { }

cap_pbc_csr_cfg_account_9_pg_3_t::cap_pbc_csr_cfg_account_9_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_3_t::~cap_pbc_csr_cfg_account_9_pg_3_t() { }

cap_pbc_csr_cfg_account_9_pg_2_t::cap_pbc_csr_cfg_account_9_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_2_t::~cap_pbc_csr_cfg_account_9_pg_2_t() { }

cap_pbc_csr_cfg_account_9_pg_1_t::cap_pbc_csr_cfg_account_9_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_1_t::~cap_pbc_csr_cfg_account_9_pg_1_t() { }

cap_pbc_csr_cfg_account_9_pg_0_t::cap_pbc_csr_cfg_account_9_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pg_0_t::~cap_pbc_csr_cfg_account_9_pg_0_t() { }

cap_pbc_csr_cfg_account_9_mtu_table_t::cap_pbc_csr_cfg_account_9_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_mtu_table_t::~cap_pbc_csr_cfg_account_9_mtu_table_t() { }

cap_pbc_csr_cfg_account_9_pause_timer_t::cap_pbc_csr_cfg_account_9_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_pause_timer_t::~cap_pbc_csr_cfg_account_9_pause_timer_t() { }

cap_pbc_csr_sta_account_9_t::cap_pbc_csr_sta_account_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_9_t::~cap_pbc_csr_sta_account_9_t() { }

cap_pbc_csr_cfg_account_9_tc_to_pg_t::cap_pbc_csr_cfg_account_9_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_9_tc_to_pg_t::~cap_pbc_csr_cfg_account_9_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_9_t::cap_pbc_csr_cfg_write_control_9_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_9_t::~cap_pbc_csr_cfg_write_control_9_t() { }

cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::cap_pbc_csr_cfg_oq_8_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_8_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::cap_pbc_csr_cfg_oq_8_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_8_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::cap_pbc_csr_cfg_oq_8_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_8_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::cap_pbc_csr_cfg_oq_8_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_8_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_8_t::cap_pbc_csr_cfg_oq_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_8_t::~cap_pbc_csr_cfg_oq_8_t() { }

cap_pbc_csr_cfg_account_8_pg_7_t::cap_pbc_csr_cfg_account_8_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_7_t::~cap_pbc_csr_cfg_account_8_pg_7_t() { }

cap_pbc_csr_cfg_account_8_pg_6_t::cap_pbc_csr_cfg_account_8_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_6_t::~cap_pbc_csr_cfg_account_8_pg_6_t() { }

cap_pbc_csr_cfg_account_8_pg_5_t::cap_pbc_csr_cfg_account_8_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_5_t::~cap_pbc_csr_cfg_account_8_pg_5_t() { }

cap_pbc_csr_cfg_account_8_pg_4_t::cap_pbc_csr_cfg_account_8_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_4_t::~cap_pbc_csr_cfg_account_8_pg_4_t() { }

cap_pbc_csr_cfg_account_8_pg_3_t::cap_pbc_csr_cfg_account_8_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_3_t::~cap_pbc_csr_cfg_account_8_pg_3_t() { }

cap_pbc_csr_cfg_account_8_pg_2_t::cap_pbc_csr_cfg_account_8_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_2_t::~cap_pbc_csr_cfg_account_8_pg_2_t() { }

cap_pbc_csr_cfg_account_8_pg_1_t::cap_pbc_csr_cfg_account_8_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_1_t::~cap_pbc_csr_cfg_account_8_pg_1_t() { }

cap_pbc_csr_cfg_account_8_pg_0_t::cap_pbc_csr_cfg_account_8_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pg_0_t::~cap_pbc_csr_cfg_account_8_pg_0_t() { }

cap_pbc_csr_cfg_account_8_mtu_table_t::cap_pbc_csr_cfg_account_8_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_mtu_table_t::~cap_pbc_csr_cfg_account_8_mtu_table_t() { }

cap_pbc_csr_cfg_account_8_pause_timer_t::cap_pbc_csr_cfg_account_8_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_pause_timer_t::~cap_pbc_csr_cfg_account_8_pause_timer_t() { }

cap_pbc_csr_sta_account_8_t::cap_pbc_csr_sta_account_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_8_t::~cap_pbc_csr_sta_account_8_t() { }

cap_pbc_csr_cfg_account_8_tc_to_pg_t::cap_pbc_csr_cfg_account_8_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_8_tc_to_pg_t::~cap_pbc_csr_cfg_account_8_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_8_t::cap_pbc_csr_cfg_write_control_8_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_8_t::~cap_pbc_csr_cfg_write_control_8_t() { }

cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::cap_pbc_csr_cfg_oq_7_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_7_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::cap_pbc_csr_cfg_oq_7_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_7_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::cap_pbc_csr_cfg_oq_7_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_7_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::cap_pbc_csr_cfg_oq_7_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_7_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_7_t::cap_pbc_csr_cfg_oq_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_7_t::~cap_pbc_csr_cfg_oq_7_t() { }

cap_pbc_csr_cfg_account_7_pg_7_t::cap_pbc_csr_cfg_account_7_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_7_t::~cap_pbc_csr_cfg_account_7_pg_7_t() { }

cap_pbc_csr_cfg_account_7_pg_6_t::cap_pbc_csr_cfg_account_7_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_6_t::~cap_pbc_csr_cfg_account_7_pg_6_t() { }

cap_pbc_csr_cfg_account_7_pg_5_t::cap_pbc_csr_cfg_account_7_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_5_t::~cap_pbc_csr_cfg_account_7_pg_5_t() { }

cap_pbc_csr_cfg_account_7_pg_4_t::cap_pbc_csr_cfg_account_7_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_4_t::~cap_pbc_csr_cfg_account_7_pg_4_t() { }

cap_pbc_csr_cfg_account_7_pg_3_t::cap_pbc_csr_cfg_account_7_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_3_t::~cap_pbc_csr_cfg_account_7_pg_3_t() { }

cap_pbc_csr_cfg_account_7_pg_2_t::cap_pbc_csr_cfg_account_7_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_2_t::~cap_pbc_csr_cfg_account_7_pg_2_t() { }

cap_pbc_csr_cfg_account_7_pg_1_t::cap_pbc_csr_cfg_account_7_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_1_t::~cap_pbc_csr_cfg_account_7_pg_1_t() { }

cap_pbc_csr_cfg_account_7_pg_0_t::cap_pbc_csr_cfg_account_7_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pg_0_t::~cap_pbc_csr_cfg_account_7_pg_0_t() { }

cap_pbc_csr_cfg_account_7_mtu_table_t::cap_pbc_csr_cfg_account_7_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_mtu_table_t::~cap_pbc_csr_cfg_account_7_mtu_table_t() { }

cap_pbc_csr_cfg_account_7_pause_timer_t::cap_pbc_csr_cfg_account_7_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_pause_timer_t::~cap_pbc_csr_cfg_account_7_pause_timer_t() { }

cap_pbc_csr_sta_account_7_t::cap_pbc_csr_sta_account_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_7_t::~cap_pbc_csr_sta_account_7_t() { }

cap_pbc_csr_cfg_account_7_tc_to_pg_t::cap_pbc_csr_cfg_account_7_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_7_tc_to_pg_t::~cap_pbc_csr_cfg_account_7_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_7_t::cap_pbc_csr_cfg_write_control_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_7_t::~cap_pbc_csr_cfg_write_control_7_t() { }

cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::cap_pbc_csr_cfg_oq_6_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_6_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::cap_pbc_csr_cfg_oq_6_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_6_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::cap_pbc_csr_cfg_oq_6_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_6_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::cap_pbc_csr_cfg_oq_6_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_6_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_6_t::cap_pbc_csr_cfg_oq_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_6_t::~cap_pbc_csr_cfg_oq_6_t() { }

cap_pbc_csr_cfg_account_6_pg_7_t::cap_pbc_csr_cfg_account_6_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_7_t::~cap_pbc_csr_cfg_account_6_pg_7_t() { }

cap_pbc_csr_cfg_account_6_pg_6_t::cap_pbc_csr_cfg_account_6_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_6_t::~cap_pbc_csr_cfg_account_6_pg_6_t() { }

cap_pbc_csr_cfg_account_6_pg_5_t::cap_pbc_csr_cfg_account_6_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_5_t::~cap_pbc_csr_cfg_account_6_pg_5_t() { }

cap_pbc_csr_cfg_account_6_pg_4_t::cap_pbc_csr_cfg_account_6_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_4_t::~cap_pbc_csr_cfg_account_6_pg_4_t() { }

cap_pbc_csr_cfg_account_6_pg_3_t::cap_pbc_csr_cfg_account_6_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_3_t::~cap_pbc_csr_cfg_account_6_pg_3_t() { }

cap_pbc_csr_cfg_account_6_pg_2_t::cap_pbc_csr_cfg_account_6_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_2_t::~cap_pbc_csr_cfg_account_6_pg_2_t() { }

cap_pbc_csr_cfg_account_6_pg_1_t::cap_pbc_csr_cfg_account_6_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_1_t::~cap_pbc_csr_cfg_account_6_pg_1_t() { }

cap_pbc_csr_cfg_account_6_pg_0_t::cap_pbc_csr_cfg_account_6_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pg_0_t::~cap_pbc_csr_cfg_account_6_pg_0_t() { }

cap_pbc_csr_cfg_account_6_mtu_table_t::cap_pbc_csr_cfg_account_6_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_mtu_table_t::~cap_pbc_csr_cfg_account_6_mtu_table_t() { }

cap_pbc_csr_cfg_account_6_pause_timer_t::cap_pbc_csr_cfg_account_6_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_pause_timer_t::~cap_pbc_csr_cfg_account_6_pause_timer_t() { }

cap_pbc_csr_sta_account_6_t::cap_pbc_csr_sta_account_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_6_t::~cap_pbc_csr_sta_account_6_t() { }

cap_pbc_csr_cfg_account_6_tc_to_pg_t::cap_pbc_csr_cfg_account_6_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_6_tc_to_pg_t::~cap_pbc_csr_cfg_account_6_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_6_t::cap_pbc_csr_cfg_write_control_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_6_t::~cap_pbc_csr_cfg_write_control_6_t() { }

cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::cap_pbc_csr_cfg_oq_5_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_5_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::cap_pbc_csr_cfg_oq_5_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_5_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::cap_pbc_csr_cfg_oq_5_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_5_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::cap_pbc_csr_cfg_oq_5_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_5_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_5_t::cap_pbc_csr_cfg_oq_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_5_t::~cap_pbc_csr_cfg_oq_5_t() { }

cap_pbc_csr_cfg_account_5_pg_7_t::cap_pbc_csr_cfg_account_5_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_7_t::~cap_pbc_csr_cfg_account_5_pg_7_t() { }

cap_pbc_csr_cfg_account_5_pg_6_t::cap_pbc_csr_cfg_account_5_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_6_t::~cap_pbc_csr_cfg_account_5_pg_6_t() { }

cap_pbc_csr_cfg_account_5_pg_5_t::cap_pbc_csr_cfg_account_5_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_5_t::~cap_pbc_csr_cfg_account_5_pg_5_t() { }

cap_pbc_csr_cfg_account_5_pg_4_t::cap_pbc_csr_cfg_account_5_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_4_t::~cap_pbc_csr_cfg_account_5_pg_4_t() { }

cap_pbc_csr_cfg_account_5_pg_3_t::cap_pbc_csr_cfg_account_5_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_3_t::~cap_pbc_csr_cfg_account_5_pg_3_t() { }

cap_pbc_csr_cfg_account_5_pg_2_t::cap_pbc_csr_cfg_account_5_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_2_t::~cap_pbc_csr_cfg_account_5_pg_2_t() { }

cap_pbc_csr_cfg_account_5_pg_1_t::cap_pbc_csr_cfg_account_5_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_1_t::~cap_pbc_csr_cfg_account_5_pg_1_t() { }

cap_pbc_csr_cfg_account_5_pg_0_t::cap_pbc_csr_cfg_account_5_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pg_0_t::~cap_pbc_csr_cfg_account_5_pg_0_t() { }

cap_pbc_csr_cfg_account_5_mtu_table_t::cap_pbc_csr_cfg_account_5_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_mtu_table_t::~cap_pbc_csr_cfg_account_5_mtu_table_t() { }

cap_pbc_csr_cfg_account_5_pause_timer_t::cap_pbc_csr_cfg_account_5_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_pause_timer_t::~cap_pbc_csr_cfg_account_5_pause_timer_t() { }

cap_pbc_csr_sta_account_5_t::cap_pbc_csr_sta_account_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_5_t::~cap_pbc_csr_sta_account_5_t() { }

cap_pbc_csr_cfg_account_5_tc_to_pg_t::cap_pbc_csr_cfg_account_5_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_5_tc_to_pg_t::~cap_pbc_csr_cfg_account_5_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_5_t::cap_pbc_csr_cfg_write_control_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_5_t::~cap_pbc_csr_cfg_write_control_5_t() { }

cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::cap_pbc_csr_cfg_oq_4_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_4_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::cap_pbc_csr_cfg_oq_4_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_4_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::cap_pbc_csr_cfg_oq_4_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_4_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::cap_pbc_csr_cfg_oq_4_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_4_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_4_t::cap_pbc_csr_cfg_oq_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_4_t::~cap_pbc_csr_cfg_oq_4_t() { }

cap_pbc_csr_cfg_account_4_pg_7_t::cap_pbc_csr_cfg_account_4_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_7_t::~cap_pbc_csr_cfg_account_4_pg_7_t() { }

cap_pbc_csr_cfg_account_4_pg_6_t::cap_pbc_csr_cfg_account_4_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_6_t::~cap_pbc_csr_cfg_account_4_pg_6_t() { }

cap_pbc_csr_cfg_account_4_pg_5_t::cap_pbc_csr_cfg_account_4_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_5_t::~cap_pbc_csr_cfg_account_4_pg_5_t() { }

cap_pbc_csr_cfg_account_4_pg_4_t::cap_pbc_csr_cfg_account_4_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_4_t::~cap_pbc_csr_cfg_account_4_pg_4_t() { }

cap_pbc_csr_cfg_account_4_pg_3_t::cap_pbc_csr_cfg_account_4_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_3_t::~cap_pbc_csr_cfg_account_4_pg_3_t() { }

cap_pbc_csr_cfg_account_4_pg_2_t::cap_pbc_csr_cfg_account_4_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_2_t::~cap_pbc_csr_cfg_account_4_pg_2_t() { }

cap_pbc_csr_cfg_account_4_pg_1_t::cap_pbc_csr_cfg_account_4_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_1_t::~cap_pbc_csr_cfg_account_4_pg_1_t() { }

cap_pbc_csr_cfg_account_4_pg_0_t::cap_pbc_csr_cfg_account_4_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pg_0_t::~cap_pbc_csr_cfg_account_4_pg_0_t() { }

cap_pbc_csr_cfg_account_4_mtu_table_t::cap_pbc_csr_cfg_account_4_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_mtu_table_t::~cap_pbc_csr_cfg_account_4_mtu_table_t() { }

cap_pbc_csr_cfg_account_4_pause_timer_t::cap_pbc_csr_cfg_account_4_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_pause_timer_t::~cap_pbc_csr_cfg_account_4_pause_timer_t() { }

cap_pbc_csr_sta_account_4_t::cap_pbc_csr_sta_account_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_4_t::~cap_pbc_csr_sta_account_4_t() { }

cap_pbc_csr_cfg_account_4_tc_to_pg_t::cap_pbc_csr_cfg_account_4_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_4_tc_to_pg_t::~cap_pbc_csr_cfg_account_4_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_4_t::cap_pbc_csr_cfg_write_control_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_4_t::~cap_pbc_csr_cfg_write_control_4_t() { }

cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::cap_pbc_csr_cfg_oq_3_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_3_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::cap_pbc_csr_cfg_oq_3_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_3_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::cap_pbc_csr_cfg_oq_3_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_3_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::cap_pbc_csr_cfg_oq_3_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_3_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_3_t::cap_pbc_csr_cfg_oq_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_3_t::~cap_pbc_csr_cfg_oq_3_t() { }

cap_pbc_csr_cfg_account_3_pg_7_t::cap_pbc_csr_cfg_account_3_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_7_t::~cap_pbc_csr_cfg_account_3_pg_7_t() { }

cap_pbc_csr_cfg_account_3_pg_6_t::cap_pbc_csr_cfg_account_3_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_6_t::~cap_pbc_csr_cfg_account_3_pg_6_t() { }

cap_pbc_csr_cfg_account_3_pg_5_t::cap_pbc_csr_cfg_account_3_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_5_t::~cap_pbc_csr_cfg_account_3_pg_5_t() { }

cap_pbc_csr_cfg_account_3_pg_4_t::cap_pbc_csr_cfg_account_3_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_4_t::~cap_pbc_csr_cfg_account_3_pg_4_t() { }

cap_pbc_csr_cfg_account_3_pg_3_t::cap_pbc_csr_cfg_account_3_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_3_t::~cap_pbc_csr_cfg_account_3_pg_3_t() { }

cap_pbc_csr_cfg_account_3_pg_2_t::cap_pbc_csr_cfg_account_3_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_2_t::~cap_pbc_csr_cfg_account_3_pg_2_t() { }

cap_pbc_csr_cfg_account_3_pg_1_t::cap_pbc_csr_cfg_account_3_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_1_t::~cap_pbc_csr_cfg_account_3_pg_1_t() { }

cap_pbc_csr_cfg_account_3_pg_0_t::cap_pbc_csr_cfg_account_3_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pg_0_t::~cap_pbc_csr_cfg_account_3_pg_0_t() { }

cap_pbc_csr_cfg_account_3_mtu_table_t::cap_pbc_csr_cfg_account_3_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_mtu_table_t::~cap_pbc_csr_cfg_account_3_mtu_table_t() { }

cap_pbc_csr_cfg_account_3_pause_timer_t::cap_pbc_csr_cfg_account_3_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_pause_timer_t::~cap_pbc_csr_cfg_account_3_pause_timer_t() { }

cap_pbc_csr_sta_account_3_t::cap_pbc_csr_sta_account_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_3_t::~cap_pbc_csr_sta_account_3_t() { }

cap_pbc_csr_cfg_account_3_tc_to_pg_t::cap_pbc_csr_cfg_account_3_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_3_tc_to_pg_t::~cap_pbc_csr_cfg_account_3_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_3_t::cap_pbc_csr_cfg_write_control_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_3_t::~cap_pbc_csr_cfg_write_control_3_t() { }

cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::cap_pbc_csr_cfg_oq_2_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_2_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::cap_pbc_csr_cfg_oq_2_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_2_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::cap_pbc_csr_cfg_oq_2_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_2_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::cap_pbc_csr_cfg_oq_2_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_2_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_2_t::cap_pbc_csr_cfg_oq_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_2_t::~cap_pbc_csr_cfg_oq_2_t() { }

cap_pbc_csr_cfg_account_2_pg_7_t::cap_pbc_csr_cfg_account_2_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_7_t::~cap_pbc_csr_cfg_account_2_pg_7_t() { }

cap_pbc_csr_cfg_account_2_pg_6_t::cap_pbc_csr_cfg_account_2_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_6_t::~cap_pbc_csr_cfg_account_2_pg_6_t() { }

cap_pbc_csr_cfg_account_2_pg_5_t::cap_pbc_csr_cfg_account_2_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_5_t::~cap_pbc_csr_cfg_account_2_pg_5_t() { }

cap_pbc_csr_cfg_account_2_pg_4_t::cap_pbc_csr_cfg_account_2_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_4_t::~cap_pbc_csr_cfg_account_2_pg_4_t() { }

cap_pbc_csr_cfg_account_2_pg_3_t::cap_pbc_csr_cfg_account_2_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_3_t::~cap_pbc_csr_cfg_account_2_pg_3_t() { }

cap_pbc_csr_cfg_account_2_pg_2_t::cap_pbc_csr_cfg_account_2_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_2_t::~cap_pbc_csr_cfg_account_2_pg_2_t() { }

cap_pbc_csr_cfg_account_2_pg_1_t::cap_pbc_csr_cfg_account_2_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_1_t::~cap_pbc_csr_cfg_account_2_pg_1_t() { }

cap_pbc_csr_cfg_account_2_pg_0_t::cap_pbc_csr_cfg_account_2_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pg_0_t::~cap_pbc_csr_cfg_account_2_pg_0_t() { }

cap_pbc_csr_cfg_account_2_mtu_table_t::cap_pbc_csr_cfg_account_2_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_mtu_table_t::~cap_pbc_csr_cfg_account_2_mtu_table_t() { }

cap_pbc_csr_cfg_account_2_pause_timer_t::cap_pbc_csr_cfg_account_2_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_pause_timer_t::~cap_pbc_csr_cfg_account_2_pause_timer_t() { }

cap_pbc_csr_sta_account_2_t::cap_pbc_csr_sta_account_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_2_t::~cap_pbc_csr_sta_account_2_t() { }

cap_pbc_csr_cfg_account_2_tc_to_pg_t::cap_pbc_csr_cfg_account_2_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_2_tc_to_pg_t::~cap_pbc_csr_cfg_account_2_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_2_t::cap_pbc_csr_cfg_write_control_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_2_t::~cap_pbc_csr_cfg_write_control_2_t() { }

cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::cap_pbc_csr_cfg_oq_1_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_1_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::cap_pbc_csr_cfg_oq_1_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_1_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::cap_pbc_csr_cfg_oq_1_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_1_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::cap_pbc_csr_cfg_oq_1_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_1_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_1_t::cap_pbc_csr_cfg_oq_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_1_t::~cap_pbc_csr_cfg_oq_1_t() { }

cap_pbc_csr_cfg_account_1_pg_7_t::cap_pbc_csr_cfg_account_1_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_7_t::~cap_pbc_csr_cfg_account_1_pg_7_t() { }

cap_pbc_csr_cfg_account_1_pg_6_t::cap_pbc_csr_cfg_account_1_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_6_t::~cap_pbc_csr_cfg_account_1_pg_6_t() { }

cap_pbc_csr_cfg_account_1_pg_5_t::cap_pbc_csr_cfg_account_1_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_5_t::~cap_pbc_csr_cfg_account_1_pg_5_t() { }

cap_pbc_csr_cfg_account_1_pg_4_t::cap_pbc_csr_cfg_account_1_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_4_t::~cap_pbc_csr_cfg_account_1_pg_4_t() { }

cap_pbc_csr_cfg_account_1_pg_3_t::cap_pbc_csr_cfg_account_1_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_3_t::~cap_pbc_csr_cfg_account_1_pg_3_t() { }

cap_pbc_csr_cfg_account_1_pg_2_t::cap_pbc_csr_cfg_account_1_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_2_t::~cap_pbc_csr_cfg_account_1_pg_2_t() { }

cap_pbc_csr_cfg_account_1_pg_1_t::cap_pbc_csr_cfg_account_1_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_1_t::~cap_pbc_csr_cfg_account_1_pg_1_t() { }

cap_pbc_csr_cfg_account_1_pg_0_t::cap_pbc_csr_cfg_account_1_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pg_0_t::~cap_pbc_csr_cfg_account_1_pg_0_t() { }

cap_pbc_csr_cfg_account_1_mtu_table_t::cap_pbc_csr_cfg_account_1_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_mtu_table_t::~cap_pbc_csr_cfg_account_1_mtu_table_t() { }

cap_pbc_csr_cfg_account_1_pause_timer_t::cap_pbc_csr_cfg_account_1_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_pause_timer_t::~cap_pbc_csr_cfg_account_1_pause_timer_t() { }

cap_pbc_csr_sta_account_1_t::cap_pbc_csr_sta_account_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_1_t::~cap_pbc_csr_sta_account_1_t() { }

cap_pbc_csr_cfg_account_1_tc_to_pg_t::cap_pbc_csr_cfg_account_1_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_1_tc_to_pg_t::~cap_pbc_csr_cfg_account_1_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_1_t::cap_pbc_csr_cfg_write_control_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_1_t::~cap_pbc_csr_cfg_write_control_1_t() { }

cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::cap_pbc_csr_cfg_oq_0_arb_l2_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::~cap_pbc_csr_cfg_oq_0_arb_l2_strict_t() { }

cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::cap_pbc_csr_cfg_oq_0_arb_l2_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::~cap_pbc_csr_cfg_oq_0_arb_l2_selection_t() { }

cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::cap_pbc_csr_cfg_oq_0_arb_l1_strict_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::~cap_pbc_csr_cfg_oq_0_arb_l1_strict_t() { }

cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::cap_pbc_csr_cfg_oq_0_arb_l1_selection_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::~cap_pbc_csr_cfg_oq_0_arb_l1_selection_t() { }

cap_pbc_csr_cfg_oq_0_t::cap_pbc_csr_cfg_oq_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_oq_0_t::~cap_pbc_csr_cfg_oq_0_t() { }

cap_pbc_csr_cfg_account_0_pg_7_t::cap_pbc_csr_cfg_account_0_pg_7_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_7_t::~cap_pbc_csr_cfg_account_0_pg_7_t() { }

cap_pbc_csr_cfg_account_0_pg_6_t::cap_pbc_csr_cfg_account_0_pg_6_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_6_t::~cap_pbc_csr_cfg_account_0_pg_6_t() { }

cap_pbc_csr_cfg_account_0_pg_5_t::cap_pbc_csr_cfg_account_0_pg_5_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_5_t::~cap_pbc_csr_cfg_account_0_pg_5_t() { }

cap_pbc_csr_cfg_account_0_pg_4_t::cap_pbc_csr_cfg_account_0_pg_4_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_4_t::~cap_pbc_csr_cfg_account_0_pg_4_t() { }

cap_pbc_csr_cfg_account_0_pg_3_t::cap_pbc_csr_cfg_account_0_pg_3_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_3_t::~cap_pbc_csr_cfg_account_0_pg_3_t() { }

cap_pbc_csr_cfg_account_0_pg_2_t::cap_pbc_csr_cfg_account_0_pg_2_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_2_t::~cap_pbc_csr_cfg_account_0_pg_2_t() { }

cap_pbc_csr_cfg_account_0_pg_1_t::cap_pbc_csr_cfg_account_0_pg_1_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_1_t::~cap_pbc_csr_cfg_account_0_pg_1_t() { }

cap_pbc_csr_cfg_account_0_pg_0_t::cap_pbc_csr_cfg_account_0_pg_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pg_0_t::~cap_pbc_csr_cfg_account_0_pg_0_t() { }

cap_pbc_csr_cfg_account_0_mtu_table_t::cap_pbc_csr_cfg_account_0_mtu_table_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_mtu_table_t::~cap_pbc_csr_cfg_account_0_mtu_table_t() { }

cap_pbc_csr_cfg_account_0_pause_timer_t::cap_pbc_csr_cfg_account_0_pause_timer_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_pause_timer_t::~cap_pbc_csr_cfg_account_0_pause_timer_t() { }

cap_pbc_csr_sta_account_0_t::cap_pbc_csr_sta_account_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_sta_account_0_t::~cap_pbc_csr_sta_account_0_t() { }

cap_pbc_csr_cfg_account_0_tc_to_pg_t::cap_pbc_csr_cfg_account_0_tc_to_pg_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_account_0_tc_to_pg_t::~cap_pbc_csr_cfg_account_0_tc_to_pg_t() { }

cap_pbc_csr_cfg_write_control_0_t::cap_pbc_csr_cfg_write_control_0_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_write_control_0_t::~cap_pbc_csr_cfg_write_control_0_t() { }

cap_pbc_csr_cfg_pbc_control_t::cap_pbc_csr_cfg_pbc_control_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_cfg_pbc_control_t::~cap_pbc_csr_cfg_pbc_control_t() { }

cap_pbc_csr_base_t::cap_pbc_csr_base_t(string name, cap_csr_base * parent): 
    cap_register_base(name, parent)  { 
        //init();
        }
cap_pbc_csr_base_t::~cap_pbc_csr_base_t() { }

cap_pbc_csr_t::cap_pbc_csr_t(string name, cap_csr_base * parent): 
    cap_block_base(name, parent)  { 
        set_byte_size(8192);
        set_attributes(0,get_name(), 0);
        }
cap_pbc_csr_t::~cap_pbc_csr_t() { }

void cap_pbc_csr_dhs_sched_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".current_credit: 0x" << int_var__current_credit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".quanta: 0x" << int_var__quanta << dec << endl)
}

void cap_pbc_csr_dhs_sched_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_rc_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".count0: 0x" << int_var__count0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count1: 0x" << int_var__count1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count2: 0x" << int_var__count2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count3: 0x" << int_var__count3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count4: 0x" << int_var__count4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count5: 0x" << int_var__count5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count6: 0x" << int_var__count6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".count7: 0x" << int_var__count7 << dec << endl)
}

void cap_pbc_csr_dhs_rc_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_gc_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_gc_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_desc_1_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".src_port: 0x" << int_var__src_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".refcount: 0x" << int_var__refcount << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".input_queue: 0x" << int_var__input_queue << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_pack: 0x" << int_var__eop_pack << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".err_pack: 0x" << int_var__err_pack << dec << endl)
}

void cap_pbc_csr_dhs_desc_1_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_ll_1_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".full: 0x" << int_var__full << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ge256B: 0x" << int_var__ge256B << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl)
}

void cap_pbc_csr_dhs_ll_1_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_fc_1_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".cell0: 0x" << int_var__cell0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cell1: 0x" << int_var__cell1 << dec << endl)
}

void cap_pbc_csr_dhs_fc_1_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_desc_0_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".src_port: 0x" << int_var__src_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".refcount: 0x" << int_var__refcount << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".input_queue: 0x" << int_var__input_queue << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_pack: 0x" << int_var__eop_pack << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".err_pack: 0x" << int_var__err_pack << dec << endl)
}

void cap_pbc_csr_dhs_desc_0_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_ll_0_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop: 0x" << int_var__eop << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".full: 0x" << int_var__full << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ge256B: 0x" << int_var__ge256B << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".err: 0x" << int_var__err << dec << endl)
}

void cap_pbc_csr_dhs_ll_0_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_fc_0_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".cell0: 0x" << int_var__cell0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cell1: 0x" << int_var__cell1 << dec << endl)
}

void cap_pbc_csr_dhs_fc_0_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_11_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pack_info: 0x" << int_var__pack_info << dec << endl)
}

void cap_pbc_csr_dhs_oq_11_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_10_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_ptr: 0x" << int_var__rpl_ptr << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rpl_en: 0x" << int_var__rpl_en << dec << endl)
}

void cap_pbc_csr_dhs_oq_10_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_9_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_9_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_8_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_8_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_7_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_7_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_6_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_6_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_5_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_5_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_4_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_4_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_3_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_3_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_2_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_2_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_1_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_1_t::show() {

    entry.show();
}

void cap_pbc_csr_dhs_oq_0_entry_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".next_cell: 0x" << int_var__next_cell << dec << endl)
}

void cap_pbc_csr_dhs_oq_0_t::show() {

    entry.show();
}

void cap_pbc_csr_cfg_src_port_to_lif_map_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".entry_0: 0x" << int_var__entry_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_1: 0x" << int_var__entry_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_2: 0x" << int_var__entry_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_3: 0x" << int_var__entry_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_4: 0x" << int_var__entry_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_5: 0x" << int_var__entry_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_6: 0x" << int_var__entry_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_7: 0x" << int_var__entry_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".entry_8: 0x" << int_var__entry_8 << dec << endl)
}

void cap_pbc_csr_cfg_tail_drop_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".cpu_threshold: 0x" << int_var__cpu_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".span_threshold: 0x" << int_var__span_threshold << dec << endl)
}

void cap_pbc_csr_sta_rpl_err_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".rid: 0x" << int_var__rid << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rresp: 0x" << int_var__rresp << dec << endl)
}

void cap_pbc_csr_sta_ecc_sideband_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_spare_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".data: 0x" << int_var__data << dec << endl)
}

void cap_pbc_csr_cfg_debug_port_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".select: 0x" << int_var__select << dec << endl)
}

void cap_pbc_csr_cfg_dhs_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".address: 0x" << int_var__address << dec << endl)
}

void cap_pbc_csr_sta_oq_12_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".depth_value: 0x" << int_var__depth_value << dec << endl)
}

void cap_pbc_csr_sta_oq_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".depth_value: 0x" << int_var__depth_value << dec << endl)
}

void cap_pbc_csr_cnt_write_error_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".discarded: 0x" << int_var__discarded << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".admitted: 0x" << int_var__admitted << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".intrinsic_drop: 0x" << int_var__intrinsic_drop << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".out_of_cells: 0x" << int_var__out_of_cells << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".out_of_credit: 0x" << int_var__out_of_credit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".truncation: 0x" << int_var__truncation << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".port_disabled: 0x" << int_var__port_disabled << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".out_of_cells1: 0x" << int_var__out_of_cells1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".tail_drop_cpu: 0x" << int_var__tail_drop_cpu << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".tail_drop_span: 0x" << int_var__tail_drop_span << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".enqueue: 0x" << int_var__enqueue << dec << endl)
}

void cap_pbc_csr_cnt_flits_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".sop_in: 0x" << int_var__sop_in << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_in: 0x" << int_var__eop_in << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".sop_out: 0x" << int_var__sop_out << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".eop_out: 0x" << int_var__eop_out << dec << endl)
}

void cap_pbc_csr_cfg_parser8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_parser0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".dot1q_type: 0x" << int_var__dot1q_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv4_type: 0x" << int_var__ipv4_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipv6_type: 0x" << int_var__ipv6_type << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_ip: 0x" << int_var__use_ip << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".use_dot1q: 0x" << int_var__use_dot1q << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_cos: 0x" << int_var__default_cos << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".default_port: 0x" << int_var__default_port << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".oq_map: 0x" << int_var__oq_map << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dscp_map: 0x" << int_var__dscp_map << dec << endl)
}

void cap_pbc_csr_cfg_rpl_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".base: 0x" << int_var__base << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".token_size: 0x" << int_var__token_size << dec << endl)
}

void cap_pbc_csr_cfg_island_control_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".map: 0x" << int_var__map << dec << endl)
}

void cap_pbc_csr_sta_sched_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable: 0x" << int_var__ecc_uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable: 0x" << int_var__ecc_correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_syndrome: 0x" << int_var__ecc_syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_addr: 0x" << int_var__ecc_addr << dec << endl)
}

void cap_pbc_csr_cfg_sched_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable_wrr: 0x" << int_var__enable_wrr << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_selection: 0x" << int_var__dhs_selection << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".timer: 0x" << int_var__timer << dec << endl)
}

void cap_pbc_csr_sta_rc_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".init_done: 0x" << int_var__init_done << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_uncorrectable: 0x" << int_var__ecc_uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_correctable: 0x" << int_var__ecc_correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_syndrome: 0x" << int_var__ecc_syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_addr: 0x" << int_var__ecc_addr << dec << endl)
}

void cap_pbc_csr_cfg_rc_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".init_start: 0x" << int_var__init_start << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".init_reset: 0x" << int_var__init_reset << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_cfg_gc_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_ecc_desc_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_desc_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_ecc_ll_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_ll_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_ecc_fc_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_fc_mgr_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".init_start: 0x" << int_var__init_start << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".init_reset: 0x" << int_var__init_reset << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".max_row: 0x" << int_var__max_row << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".min_cell: 0x" << int_var__min_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_fc_mgr_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".cells_available: 0x" << int_var__cells_available << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".init_done: 0x" << int_var__init_done << dec << endl)
}

void cap_pbc_csr_sta_ecc_desc_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_desc_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_ecc_ll_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_ll_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_ecc_fc_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_fc_mgr_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".init_start: 0x" << int_var__init_start << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".init_reset: 0x" << int_var__init_reset << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".max_row: 0x" << int_var__max_row << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".min_cell: 0x" << int_var__min_cell << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
}

void cap_pbc_csr_sta_fc_mgr_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".cells_available: 0x" << int_var__cells_available << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".init_done: 0x" << int_var__init_done << dec << endl)
}

void cap_pbc_csr_sta_ecc_rwr_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_sta_ecc_pack_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_sta_ecc_oq_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".uncorrectable: 0x" << int_var__uncorrectable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".correctable: 0x" << int_var__correctable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".syndrome: 0x" << int_var__syndrome << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".addr: 0x" << int_var__addr << dec << endl)
}

void cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_msb: 0x" << int_var__packing_msb << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_selection: 0x" << int_var__dhs_selection << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_31_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_30_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_29_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_28_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_27_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_26_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_25_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_24_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_23_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_22_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_21_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_20_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_19_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_18_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_17_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_16_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_15_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_14_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_13_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_12_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_11_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg8: 0x" << int_var__pg8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg9: 0x" << int_var__pg9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg10: 0x" << int_var__pg10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg11: 0x" << int_var__pg11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg12: 0x" << int_var__pg12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg13: 0x" << int_var__pg13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg14: 0x" << int_var__pg14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg15: 0x" << int_var__pg15 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg16: 0x" << int_var__pg16 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg17: 0x" << int_var__pg17 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg18: 0x" << int_var__pg18 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg19: 0x" << int_var__pg19 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg20: 0x" << int_var__pg20 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg21: 0x" << int_var__pg21 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg22: 0x" << int_var__pg22 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg23: 0x" << int_var__pg23 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg24: 0x" << int_var__pg24 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg25: 0x" << int_var__pg25 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg26: 0x" << int_var__pg26 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg27: 0x" << int_var__pg27 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg28: 0x" << int_var__pg28 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg29: 0x" << int_var__pg29 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg30: 0x" << int_var__pg30 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg31: 0x" << int_var__pg31 << dec << endl)
}

void cap_pbc_csr_cfg_account_11_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_8: 0x" << int_var__occupancy_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_9: 0x" << int_var__occupancy_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_10: 0x" << int_var__occupancy_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_11: 0x" << int_var__occupancy_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_12: 0x" << int_var__occupancy_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_13: 0x" << int_var__occupancy_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_14: 0x" << int_var__occupancy_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_15: 0x" << int_var__occupancy_15 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_16: 0x" << int_var__occupancy_16 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_17: 0x" << int_var__occupancy_17 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_18: 0x" << int_var__occupancy_18 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_19: 0x" << int_var__occupancy_19 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_20: 0x" << int_var__occupancy_20 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_21: 0x" << int_var__occupancy_21 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_22: 0x" << int_var__occupancy_22 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_23: 0x" << int_var__occupancy_23 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_24: 0x" << int_var__occupancy_24 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_25: 0x" << int_var__occupancy_25 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_26: 0x" << int_var__occupancy_26 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_27: 0x" << int_var__occupancy_27 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_28: 0x" << int_var__occupancy_28 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_29: 0x" << int_var__occupancy_29 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_30: 0x" << int_var__occupancy_30 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_31: 0x" << int_var__occupancy_31 << dec << endl)
}

void cap_pbc_csr_cfg_account_11_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_selection: 0x" << int_var__dhs_selection << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_31_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_30_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_29_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_28_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_27_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_26_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_25_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_24_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_23_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_22_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_21_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_20_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_19_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_18_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_17_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_16_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_15_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_14_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_13_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_12_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_10_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg8: 0x" << int_var__pg8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg9: 0x" << int_var__pg9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg10: 0x" << int_var__pg10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg11: 0x" << int_var__pg11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg12: 0x" << int_var__pg12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg13: 0x" << int_var__pg13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg14: 0x" << int_var__pg14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg15: 0x" << int_var__pg15 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg16: 0x" << int_var__pg16 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg17: 0x" << int_var__pg17 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg18: 0x" << int_var__pg18 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg19: 0x" << int_var__pg19 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg20: 0x" << int_var__pg20 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg21: 0x" << int_var__pg21 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg22: 0x" << int_var__pg22 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg23: 0x" << int_var__pg23 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg24: 0x" << int_var__pg24 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg25: 0x" << int_var__pg25 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg26: 0x" << int_var__pg26 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg27: 0x" << int_var__pg27 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg28: 0x" << int_var__pg28 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg29: 0x" << int_var__pg29 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg30: 0x" << int_var__pg30 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg31: 0x" << int_var__pg31 << dec << endl)
}

void cap_pbc_csr_cfg_account_10_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_8: 0x" << int_var__occupancy_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_9: 0x" << int_var__occupancy_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_10: 0x" << int_var__occupancy_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_11: 0x" << int_var__occupancy_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_12: 0x" << int_var__occupancy_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_13: 0x" << int_var__occupancy_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_14: 0x" << int_var__occupancy_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_15: 0x" << int_var__occupancy_15 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_16: 0x" << int_var__occupancy_16 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_17: 0x" << int_var__occupancy_17 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_18: 0x" << int_var__occupancy_18 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_19: 0x" << int_var__occupancy_19 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_20: 0x" << int_var__occupancy_20 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_21: 0x" << int_var__occupancy_21 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_22: 0x" << int_var__occupancy_22 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_23: 0x" << int_var__occupancy_23 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_24: 0x" << int_var__occupancy_24 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_25: 0x" << int_var__occupancy_25 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_26: 0x" << int_var__occupancy_26 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_27: 0x" << int_var__occupancy_27 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_28: 0x" << int_var__occupancy_28 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_29: 0x" << int_var__occupancy_29 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_30: 0x" << int_var__occupancy_30 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_31: 0x" << int_var__occupancy_31 << dec << endl)
}

void cap_pbc_csr_cfg_account_10_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_15_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_14_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_13_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_12_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_11_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_10_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_9_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg8: 0x" << int_var__pg8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg9: 0x" << int_var__pg9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg10: 0x" << int_var__pg10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg11: 0x" << int_var__pg11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg12: 0x" << int_var__pg12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg13: 0x" << int_var__pg13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg14: 0x" << int_var__pg14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg15: 0x" << int_var__pg15 << dec << endl)
}

void cap_pbc_csr_cfg_account_9_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_8: 0x" << int_var__occupancy_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_9: 0x" << int_var__occupancy_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_10: 0x" << int_var__occupancy_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_11: 0x" << int_var__occupancy_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_12: 0x" << int_var__occupancy_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_13: 0x" << int_var__occupancy_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_14: 0x" << int_var__occupancy_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_15: 0x" << int_var__occupancy_15 << dec << endl)
}

void cap_pbc_csr_cfg_account_9_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_9_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_8_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_8_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_8_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_8_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_7_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_7_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_7_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_6_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_6_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_6_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_5_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_5_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_5_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_4_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_4_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_4_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_3_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_3_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_3_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_2_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_2_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_2_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_1_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_1_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_1_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
}

void cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".priority: 0x" << int_var__priority << dec << endl)
}

void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".node_0: 0x" << int_var__node_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_1: 0x" << int_var__node_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_2: 0x" << int_var__node_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_3: 0x" << int_var__node_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_4: 0x" << int_var__node_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_5: 0x" << int_var__node_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_6: 0x" << int_var__node_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_7: 0x" << int_var__node_7 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_8: 0x" << int_var__node_8 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_9: 0x" << int_var__node_9 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_10: 0x" << int_var__node_10 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_11: 0x" << int_var__node_11 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_12: 0x" << int_var__node_12 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_13: 0x" << int_var__node_13 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_14: 0x" << int_var__node_14 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".node_15: 0x" << int_var__node_15 << dec << endl)
}

void cap_pbc_csr_cfg_oq_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_det: 0x" << int_var__ecc_disable_det << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ecc_disable_cor: 0x" << int_var__ecc_disable_cor << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".dhs_eccbypass: 0x" << int_var__dhs_eccbypass << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".num_hdr_bytes: 0x" << int_var__num_hdr_bytes << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite_enable: 0x" << int_var__rewrite_enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".ipg_bytes: 0x" << int_var__ipg_bytes << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_7_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_6_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_5_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_4_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_3_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_2_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_1_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pg_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".reserved_min: 0x" << int_var__reserved_min << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".xon_threshold: 0x" << int_var__xon_threshold << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".headroom: 0x" << int_var__headroom << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".low_limit: 0x" << int_var__low_limit << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".alpha: 0x" << int_var__alpha << dec << endl)
}

void cap_pbc_csr_cfg_account_0_mtu_table_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".pg0: 0x" << int_var__pg0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg1: 0x" << int_var__pg1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg2: 0x" << int_var__pg2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg3: 0x" << int_var__pg3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg4: 0x" << int_var__pg4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg5: 0x" << int_var__pg5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg6: 0x" << int_var__pg6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".pg7: 0x" << int_var__pg7 << dec << endl)
}

void cap_pbc_csr_cfg_account_0_pause_timer_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".xoff_timeout: 0x" << int_var__xoff_timeout << dec << endl)
}

void cap_pbc_csr_sta_account_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_0: 0x" << int_var__occupancy_0 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_1: 0x" << int_var__occupancy_1 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_2: 0x" << int_var__occupancy_2 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_3: 0x" << int_var__occupancy_3 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_4: 0x" << int_var__occupancy_4 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_5: 0x" << int_var__occupancy_5 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_6: 0x" << int_var__occupancy_6 << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".occupancy_7: 0x" << int_var__occupancy_7 << dec << endl)
}

void cap_pbc_csr_cfg_account_0_tc_to_pg_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".table: 0x" << int_var__table << dec << endl)
}

void cap_pbc_csr_cfg_write_control_0_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".enable: 0x" << int_var__enable << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".cut_thru: 0x" << int_var__cut_thru << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing: 0x" << int_var__packing << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_same_pg: 0x" << int_var__packing_same_pg << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".packing_timeout_cycles: 0x" << int_var__packing_timeout_cycles << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rewrite: 0x" << int_var__rewrite << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".rate_limiter: 0x" << int_var__rate_limiter << dec << endl)
    PLOG_MSG(hex << string(get_hier_path()) << ".drop_on_error: 0x" << int_var__drop_on_error << dec << endl)
}

void cap_pbc_csr_cfg_pbc_control_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".sw_reset: 0x" << int_var__sw_reset << dec << endl)
}

void cap_pbc_csr_base_t::show() {

    PLOG_MSG(hex << string(get_hier_path()) << ".scratch_reg: 0x" << int_var__scratch_reg << dec << endl)
}

void cap_pbc_csr_t::show() {

    base.show();
    cfg_pbc_control.show();
    cfg_write_control_0.show();
    cfg_account_0_tc_to_pg.show();
    sta_account_0.show();
    cfg_account_0_pause_timer.show();
    cfg_account_0_mtu_table.show();
    cfg_account_0_pg_0.show();
    cfg_account_0_pg_1.show();
    cfg_account_0_pg_2.show();
    cfg_account_0_pg_3.show();
    cfg_account_0_pg_4.show();
    cfg_account_0_pg_5.show();
    cfg_account_0_pg_6.show();
    cfg_account_0_pg_7.show();
    cfg_oq_0.show();
    cfg_oq_0_arb_l1_selection.show();
    cfg_oq_0_arb_l1_strict.show();
    cfg_oq_0_arb_l2_selection.show();
    cfg_oq_0_arb_l2_strict.show();
    cfg_write_control_1.show();
    cfg_account_1_tc_to_pg.show();
    sta_account_1.show();
    cfg_account_1_pause_timer.show();
    cfg_account_1_mtu_table.show();
    cfg_account_1_pg_0.show();
    cfg_account_1_pg_1.show();
    cfg_account_1_pg_2.show();
    cfg_account_1_pg_3.show();
    cfg_account_1_pg_4.show();
    cfg_account_1_pg_5.show();
    cfg_account_1_pg_6.show();
    cfg_account_1_pg_7.show();
    cfg_oq_1.show();
    cfg_oq_1_arb_l1_selection.show();
    cfg_oq_1_arb_l1_strict.show();
    cfg_oq_1_arb_l2_selection.show();
    cfg_oq_1_arb_l2_strict.show();
    cfg_write_control_2.show();
    cfg_account_2_tc_to_pg.show();
    sta_account_2.show();
    cfg_account_2_pause_timer.show();
    cfg_account_2_mtu_table.show();
    cfg_account_2_pg_0.show();
    cfg_account_2_pg_1.show();
    cfg_account_2_pg_2.show();
    cfg_account_2_pg_3.show();
    cfg_account_2_pg_4.show();
    cfg_account_2_pg_5.show();
    cfg_account_2_pg_6.show();
    cfg_account_2_pg_7.show();
    cfg_oq_2.show();
    cfg_oq_2_arb_l1_selection.show();
    cfg_oq_2_arb_l1_strict.show();
    cfg_oq_2_arb_l2_selection.show();
    cfg_oq_2_arb_l2_strict.show();
    cfg_write_control_3.show();
    cfg_account_3_tc_to_pg.show();
    sta_account_3.show();
    cfg_account_3_pause_timer.show();
    cfg_account_3_mtu_table.show();
    cfg_account_3_pg_0.show();
    cfg_account_3_pg_1.show();
    cfg_account_3_pg_2.show();
    cfg_account_3_pg_3.show();
    cfg_account_3_pg_4.show();
    cfg_account_3_pg_5.show();
    cfg_account_3_pg_6.show();
    cfg_account_3_pg_7.show();
    cfg_oq_3.show();
    cfg_oq_3_arb_l1_selection.show();
    cfg_oq_3_arb_l1_strict.show();
    cfg_oq_3_arb_l2_selection.show();
    cfg_oq_3_arb_l2_strict.show();
    cfg_write_control_4.show();
    cfg_account_4_tc_to_pg.show();
    sta_account_4.show();
    cfg_account_4_pause_timer.show();
    cfg_account_4_mtu_table.show();
    cfg_account_4_pg_0.show();
    cfg_account_4_pg_1.show();
    cfg_account_4_pg_2.show();
    cfg_account_4_pg_3.show();
    cfg_account_4_pg_4.show();
    cfg_account_4_pg_5.show();
    cfg_account_4_pg_6.show();
    cfg_account_4_pg_7.show();
    cfg_oq_4.show();
    cfg_oq_4_arb_l1_selection.show();
    cfg_oq_4_arb_l1_strict.show();
    cfg_oq_4_arb_l2_selection.show();
    cfg_oq_4_arb_l2_strict.show();
    cfg_write_control_5.show();
    cfg_account_5_tc_to_pg.show();
    sta_account_5.show();
    cfg_account_5_pause_timer.show();
    cfg_account_5_mtu_table.show();
    cfg_account_5_pg_0.show();
    cfg_account_5_pg_1.show();
    cfg_account_5_pg_2.show();
    cfg_account_5_pg_3.show();
    cfg_account_5_pg_4.show();
    cfg_account_5_pg_5.show();
    cfg_account_5_pg_6.show();
    cfg_account_5_pg_7.show();
    cfg_oq_5.show();
    cfg_oq_5_arb_l1_selection.show();
    cfg_oq_5_arb_l1_strict.show();
    cfg_oq_5_arb_l2_selection.show();
    cfg_oq_5_arb_l2_strict.show();
    cfg_write_control_6.show();
    cfg_account_6_tc_to_pg.show();
    sta_account_6.show();
    cfg_account_6_pause_timer.show();
    cfg_account_6_mtu_table.show();
    cfg_account_6_pg_0.show();
    cfg_account_6_pg_1.show();
    cfg_account_6_pg_2.show();
    cfg_account_6_pg_3.show();
    cfg_account_6_pg_4.show();
    cfg_account_6_pg_5.show();
    cfg_account_6_pg_6.show();
    cfg_account_6_pg_7.show();
    cfg_oq_6.show();
    cfg_oq_6_arb_l1_selection.show();
    cfg_oq_6_arb_l1_strict.show();
    cfg_oq_6_arb_l2_selection.show();
    cfg_oq_6_arb_l2_strict.show();
    cfg_write_control_7.show();
    cfg_account_7_tc_to_pg.show();
    sta_account_7.show();
    cfg_account_7_pause_timer.show();
    cfg_account_7_mtu_table.show();
    cfg_account_7_pg_0.show();
    cfg_account_7_pg_1.show();
    cfg_account_7_pg_2.show();
    cfg_account_7_pg_3.show();
    cfg_account_7_pg_4.show();
    cfg_account_7_pg_5.show();
    cfg_account_7_pg_6.show();
    cfg_account_7_pg_7.show();
    cfg_oq_7.show();
    cfg_oq_7_arb_l1_selection.show();
    cfg_oq_7_arb_l1_strict.show();
    cfg_oq_7_arb_l2_selection.show();
    cfg_oq_7_arb_l2_strict.show();
    cfg_write_control_8.show();
    cfg_account_8_tc_to_pg.show();
    sta_account_8.show();
    cfg_account_8_pause_timer.show();
    cfg_account_8_mtu_table.show();
    cfg_account_8_pg_0.show();
    cfg_account_8_pg_1.show();
    cfg_account_8_pg_2.show();
    cfg_account_8_pg_3.show();
    cfg_account_8_pg_4.show();
    cfg_account_8_pg_5.show();
    cfg_account_8_pg_6.show();
    cfg_account_8_pg_7.show();
    cfg_oq_8.show();
    cfg_oq_8_arb_l1_selection.show();
    cfg_oq_8_arb_l1_strict.show();
    cfg_oq_8_arb_l2_selection.show();
    cfg_oq_8_arb_l2_strict.show();
    cfg_write_control_9.show();
    cfg_account_9_tc_to_pg.show();
    sta_account_9.show();
    cfg_account_9_pause_timer.show();
    cfg_account_9_mtu_table.show();
    cfg_account_9_pg_0.show();
    cfg_account_9_pg_1.show();
    cfg_account_9_pg_2.show();
    cfg_account_9_pg_3.show();
    cfg_account_9_pg_4.show();
    cfg_account_9_pg_5.show();
    cfg_account_9_pg_6.show();
    cfg_account_9_pg_7.show();
    cfg_account_9_pg_8.show();
    cfg_account_9_pg_9.show();
    cfg_account_9_pg_10.show();
    cfg_account_9_pg_11.show();
    cfg_account_9_pg_12.show();
    cfg_account_9_pg_13.show();
    cfg_account_9_pg_14.show();
    cfg_account_9_pg_15.show();
    cfg_oq_9.show();
    cfg_oq_9_arb_l1_selection.show();
    cfg_oq_9_arb_l1_strict.show();
    cfg_oq_9_arb_l2_selection.show();
    cfg_oq_9_arb_l2_strict.show();
    cfg_write_control_10.show();
    cfg_account_10_tc_to_pg.show();
    sta_account_10.show();
    cfg_account_10_pause_timer.show();
    cfg_account_10_mtu_table.show();
    cfg_account_10_pg_0.show();
    cfg_account_10_pg_1.show();
    cfg_account_10_pg_2.show();
    cfg_account_10_pg_3.show();
    cfg_account_10_pg_4.show();
    cfg_account_10_pg_5.show();
    cfg_account_10_pg_6.show();
    cfg_account_10_pg_7.show();
    cfg_account_10_pg_8.show();
    cfg_account_10_pg_9.show();
    cfg_account_10_pg_10.show();
    cfg_account_10_pg_11.show();
    cfg_account_10_pg_12.show();
    cfg_account_10_pg_13.show();
    cfg_account_10_pg_14.show();
    cfg_account_10_pg_15.show();
    cfg_account_10_pg_16.show();
    cfg_account_10_pg_17.show();
    cfg_account_10_pg_18.show();
    cfg_account_10_pg_19.show();
    cfg_account_10_pg_20.show();
    cfg_account_10_pg_21.show();
    cfg_account_10_pg_22.show();
    cfg_account_10_pg_23.show();
    cfg_account_10_pg_24.show();
    cfg_account_10_pg_25.show();
    cfg_account_10_pg_26.show();
    cfg_account_10_pg_27.show();
    cfg_account_10_pg_28.show();
    cfg_account_10_pg_29.show();
    cfg_account_10_pg_30.show();
    cfg_account_10_pg_31.show();
    cfg_oq_10.show();
    cfg_oq_10_arb_l1_selection.show();
    cfg_oq_10_arb_l1_strict.show();
    cfg_oq_10_arb_l2_selection.show();
    cfg_oq_10_arb_l2_strict.show();
    cfg_write_control_11.show();
    cfg_account_11_tc_to_pg.show();
    sta_account_11.show();
    cfg_account_11_pause_timer.show();
    cfg_account_11_mtu_table.show();
    cfg_account_11_pg_0.show();
    cfg_account_11_pg_1.show();
    cfg_account_11_pg_2.show();
    cfg_account_11_pg_3.show();
    cfg_account_11_pg_4.show();
    cfg_account_11_pg_5.show();
    cfg_account_11_pg_6.show();
    cfg_account_11_pg_7.show();
    cfg_account_11_pg_8.show();
    cfg_account_11_pg_9.show();
    cfg_account_11_pg_10.show();
    cfg_account_11_pg_11.show();
    cfg_account_11_pg_12.show();
    cfg_account_11_pg_13.show();
    cfg_account_11_pg_14.show();
    cfg_account_11_pg_15.show();
    cfg_account_11_pg_16.show();
    cfg_account_11_pg_17.show();
    cfg_account_11_pg_18.show();
    cfg_account_11_pg_19.show();
    cfg_account_11_pg_20.show();
    cfg_account_11_pg_21.show();
    cfg_account_11_pg_22.show();
    cfg_account_11_pg_23.show();
    cfg_account_11_pg_24.show();
    cfg_account_11_pg_25.show();
    cfg_account_11_pg_26.show();
    cfg_account_11_pg_27.show();
    cfg_account_11_pg_28.show();
    cfg_account_11_pg_29.show();
    cfg_account_11_pg_30.show();
    cfg_account_11_pg_31.show();
    cfg_oq_11.show();
    cfg_oq_11_arb_l1_selection.show();
    cfg_oq_11_arb_l1_strict.show();
    cfg_oq_11_arb_l2_selection.show();
    cfg_oq_11_arb_l2_strict.show();
    sta_ecc_oq.show();
    sta_ecc_pack.show();
    sta_ecc_rwr.show();
    sta_fc_mgr_0.show();
    cfg_fc_mgr_0.show();
    sta_ecc_fc_0.show();
    cfg_ll_0.show();
    sta_ecc_ll_0.show();
    cfg_desc_0.show();
    sta_ecc_desc_0.show();
    sta_fc_mgr_1.show();
    cfg_fc_mgr_1.show();
    sta_ecc_fc_1.show();
    cfg_ll_1.show();
    sta_ecc_ll_1.show();
    cfg_desc_1.show();
    sta_ecc_desc_1.show();
    cfg_gc.show();
    cfg_rc.show();
    sta_rc.show();
    cfg_sched.show();
    sta_sched.show();
    cfg_island_control.show();
    cfg_rpl.show();
    cfg_parser0.show();
    cfg_parser1.show();
    cfg_parser2.show();
    cfg_parser3.show();
    cfg_parser4.show();
    cfg_parser5.show();
    cfg_parser6.show();
    cfg_parser7.show();
    cfg_parser8.show();
    for(int ii = 0; ii < 12; ii++) {
        cnt_flits[ii].show();
    }
    for(int ii = 0; ii < 12; ii++) {
        cnt_write_error[ii].show();
    }
    for(int ii = 0; ii < 12; ii++) {
        sta_oq[ii].show();
    }
    sta_oq_12.show();
    cfg_dhs.show();
    cfg_debug_port.show();
    cfg_spare.show();
    sta_ecc_sideband.show();
    sta_rpl_err.show();
    cfg_tail_drop.show();
    cfg_src_port_to_lif_map.show();
    dhs_oq_0.show();
    dhs_oq_1.show();
    dhs_oq_2.show();
    dhs_oq_3.show();
    dhs_oq_4.show();
    dhs_oq_5.show();
    dhs_oq_6.show();
    dhs_oq_7.show();
    dhs_oq_8.show();
    dhs_oq_9.show();
    dhs_oq_10.show();
    dhs_oq_11.show();
    dhs_fc_0.show();
    dhs_ll_0.show();
    dhs_desc_0.show();
    dhs_fc_1.show();
    dhs_ll_1.show();
    dhs_desc_1.show();
    dhs_gc.show();
    dhs_rc.show();
    dhs_sched.show();
}

int cap_pbc_csr_dhs_sched_entry_t::get_width() const {
    return cap_pbc_csr_dhs_sched_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_sched_t::get_width() const {
    return cap_pbc_csr_dhs_sched_t::s_get_width();

}

int cap_pbc_csr_dhs_rc_entry_t::get_width() const {
    return cap_pbc_csr_dhs_rc_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_rc_t::get_width() const {
    return cap_pbc_csr_dhs_rc_t::s_get_width();

}

int cap_pbc_csr_dhs_gc_entry_t::get_width() const {
    return cap_pbc_csr_dhs_gc_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_gc_t::get_width() const {
    return cap_pbc_csr_dhs_gc_t::s_get_width();

}

int cap_pbc_csr_dhs_desc_1_entry_t::get_width() const {
    return cap_pbc_csr_dhs_desc_1_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_desc_1_t::get_width() const {
    return cap_pbc_csr_dhs_desc_1_t::s_get_width();

}

int cap_pbc_csr_dhs_ll_1_entry_t::get_width() const {
    return cap_pbc_csr_dhs_ll_1_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_ll_1_t::get_width() const {
    return cap_pbc_csr_dhs_ll_1_t::s_get_width();

}

int cap_pbc_csr_dhs_fc_1_entry_t::get_width() const {
    return cap_pbc_csr_dhs_fc_1_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_fc_1_t::get_width() const {
    return cap_pbc_csr_dhs_fc_1_t::s_get_width();

}

int cap_pbc_csr_dhs_desc_0_entry_t::get_width() const {
    return cap_pbc_csr_dhs_desc_0_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_desc_0_t::get_width() const {
    return cap_pbc_csr_dhs_desc_0_t::s_get_width();

}

int cap_pbc_csr_dhs_ll_0_entry_t::get_width() const {
    return cap_pbc_csr_dhs_ll_0_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_ll_0_t::get_width() const {
    return cap_pbc_csr_dhs_ll_0_t::s_get_width();

}

int cap_pbc_csr_dhs_fc_0_entry_t::get_width() const {
    return cap_pbc_csr_dhs_fc_0_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_fc_0_t::get_width() const {
    return cap_pbc_csr_dhs_fc_0_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_11_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_11_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_11_t::get_width() const {
    return cap_pbc_csr_dhs_oq_11_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_10_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_10_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_10_t::get_width() const {
    return cap_pbc_csr_dhs_oq_10_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_9_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_9_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_9_t::get_width() const {
    return cap_pbc_csr_dhs_oq_9_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_8_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_8_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_8_t::get_width() const {
    return cap_pbc_csr_dhs_oq_8_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_7_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_7_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_7_t::get_width() const {
    return cap_pbc_csr_dhs_oq_7_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_6_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_6_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_6_t::get_width() const {
    return cap_pbc_csr_dhs_oq_6_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_5_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_5_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_5_t::get_width() const {
    return cap_pbc_csr_dhs_oq_5_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_4_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_4_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_4_t::get_width() const {
    return cap_pbc_csr_dhs_oq_4_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_3_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_3_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_3_t::get_width() const {
    return cap_pbc_csr_dhs_oq_3_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_2_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_2_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_2_t::get_width() const {
    return cap_pbc_csr_dhs_oq_2_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_1_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_1_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_1_t::get_width() const {
    return cap_pbc_csr_dhs_oq_1_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_0_entry_t::get_width() const {
    return cap_pbc_csr_dhs_oq_0_entry_t::s_get_width();

}

int cap_pbc_csr_dhs_oq_0_t::get_width() const {
    return cap_pbc_csr_dhs_oq_0_t::s_get_width();

}

int cap_pbc_csr_cfg_src_port_to_lif_map_t::get_width() const {
    return cap_pbc_csr_cfg_src_port_to_lif_map_t::s_get_width();

}

int cap_pbc_csr_cfg_tail_drop_t::get_width() const {
    return cap_pbc_csr_cfg_tail_drop_t::s_get_width();

}

int cap_pbc_csr_sta_rpl_err_t::get_width() const {
    return cap_pbc_csr_sta_rpl_err_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_sideband_t::get_width() const {
    return cap_pbc_csr_sta_ecc_sideband_t::s_get_width();

}

int cap_pbc_csr_cfg_spare_t::get_width() const {
    return cap_pbc_csr_cfg_spare_t::s_get_width();

}

int cap_pbc_csr_cfg_debug_port_t::get_width() const {
    return cap_pbc_csr_cfg_debug_port_t::s_get_width();

}

int cap_pbc_csr_cfg_dhs_t::get_width() const {
    return cap_pbc_csr_cfg_dhs_t::s_get_width();

}

int cap_pbc_csr_sta_oq_12_t::get_width() const {
    return cap_pbc_csr_sta_oq_12_t::s_get_width();

}

int cap_pbc_csr_sta_oq_t::get_width() const {
    return cap_pbc_csr_sta_oq_t::s_get_width();

}

int cap_pbc_csr_cnt_write_error_t::get_width() const {
    return cap_pbc_csr_cnt_write_error_t::s_get_width();

}

int cap_pbc_csr_cnt_flits_t::get_width() const {
    return cap_pbc_csr_cnt_flits_t::s_get_width();

}

int cap_pbc_csr_cfg_parser8_t::get_width() const {
    return cap_pbc_csr_cfg_parser8_t::s_get_width();

}

int cap_pbc_csr_cfg_parser7_t::get_width() const {
    return cap_pbc_csr_cfg_parser7_t::s_get_width();

}

int cap_pbc_csr_cfg_parser6_t::get_width() const {
    return cap_pbc_csr_cfg_parser6_t::s_get_width();

}

int cap_pbc_csr_cfg_parser5_t::get_width() const {
    return cap_pbc_csr_cfg_parser5_t::s_get_width();

}

int cap_pbc_csr_cfg_parser4_t::get_width() const {
    return cap_pbc_csr_cfg_parser4_t::s_get_width();

}

int cap_pbc_csr_cfg_parser3_t::get_width() const {
    return cap_pbc_csr_cfg_parser3_t::s_get_width();

}

int cap_pbc_csr_cfg_parser2_t::get_width() const {
    return cap_pbc_csr_cfg_parser2_t::s_get_width();

}

int cap_pbc_csr_cfg_parser1_t::get_width() const {
    return cap_pbc_csr_cfg_parser1_t::s_get_width();

}

int cap_pbc_csr_cfg_parser0_t::get_width() const {
    return cap_pbc_csr_cfg_parser0_t::s_get_width();

}

int cap_pbc_csr_cfg_rpl_t::get_width() const {
    return cap_pbc_csr_cfg_rpl_t::s_get_width();

}

int cap_pbc_csr_cfg_island_control_t::get_width() const {
    return cap_pbc_csr_cfg_island_control_t::s_get_width();

}

int cap_pbc_csr_sta_sched_t::get_width() const {
    return cap_pbc_csr_sta_sched_t::s_get_width();

}

int cap_pbc_csr_cfg_sched_t::get_width() const {
    return cap_pbc_csr_cfg_sched_t::s_get_width();

}

int cap_pbc_csr_sta_rc_t::get_width() const {
    return cap_pbc_csr_sta_rc_t::s_get_width();

}

int cap_pbc_csr_cfg_rc_t::get_width() const {
    return cap_pbc_csr_cfg_rc_t::s_get_width();

}

int cap_pbc_csr_cfg_gc_t::get_width() const {
    return cap_pbc_csr_cfg_gc_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_desc_1_t::get_width() const {
    return cap_pbc_csr_sta_ecc_desc_1_t::s_get_width();

}

int cap_pbc_csr_cfg_desc_1_t::get_width() const {
    return cap_pbc_csr_cfg_desc_1_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_ll_1_t::get_width() const {
    return cap_pbc_csr_sta_ecc_ll_1_t::s_get_width();

}

int cap_pbc_csr_cfg_ll_1_t::get_width() const {
    return cap_pbc_csr_cfg_ll_1_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_fc_1_t::get_width() const {
    return cap_pbc_csr_sta_ecc_fc_1_t::s_get_width();

}

int cap_pbc_csr_cfg_fc_mgr_1_t::get_width() const {
    return cap_pbc_csr_cfg_fc_mgr_1_t::s_get_width();

}

int cap_pbc_csr_sta_fc_mgr_1_t::get_width() const {
    return cap_pbc_csr_sta_fc_mgr_1_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_desc_0_t::get_width() const {
    return cap_pbc_csr_sta_ecc_desc_0_t::s_get_width();

}

int cap_pbc_csr_cfg_desc_0_t::get_width() const {
    return cap_pbc_csr_cfg_desc_0_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_ll_0_t::get_width() const {
    return cap_pbc_csr_sta_ecc_ll_0_t::s_get_width();

}

int cap_pbc_csr_cfg_ll_0_t::get_width() const {
    return cap_pbc_csr_cfg_ll_0_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_fc_0_t::get_width() const {
    return cap_pbc_csr_sta_ecc_fc_0_t::s_get_width();

}

int cap_pbc_csr_cfg_fc_mgr_0_t::get_width() const {
    return cap_pbc_csr_cfg_fc_mgr_0_t::s_get_width();

}

int cap_pbc_csr_sta_fc_mgr_0_t::get_width() const {
    return cap_pbc_csr_sta_fc_mgr_0_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_rwr_t::get_width() const {
    return cap_pbc_csr_sta_ecc_rwr_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_pack_t::get_width() const {
    return cap_pbc_csr_sta_ecc_pack_t::s_get_width();

}

int cap_pbc_csr_sta_ecc_oq_t::get_width() const {
    return cap_pbc_csr_sta_ecc_oq_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_11_t::get_width() const {
    return cap_pbc_csr_cfg_oq_11_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_31_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_31_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_30_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_30_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_29_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_29_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_28_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_28_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_27_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_27_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_26_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_26_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_25_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_25_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_24_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_24_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_23_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_23_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_22_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_22_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_21_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_21_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_20_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_20_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_19_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_19_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_18_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_18_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_17_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_17_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_16_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_16_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_15_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_15_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_14_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_14_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_13_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_13_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_12_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_12_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_11_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_11_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_10_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_10_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_9_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_9_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_8_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_8_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_11_t::get_width() const {
    return cap_pbc_csr_sta_account_11_t::s_get_width();

}

int cap_pbc_csr_cfg_account_11_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_11_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_11_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_11_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_10_t::get_width() const {
    return cap_pbc_csr_cfg_oq_10_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_31_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_31_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_30_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_30_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_29_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_29_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_28_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_28_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_27_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_27_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_26_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_26_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_25_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_25_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_24_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_24_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_23_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_23_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_22_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_22_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_21_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_21_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_20_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_20_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_19_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_19_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_18_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_18_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_17_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_17_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_16_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_16_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_15_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_15_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_14_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_14_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_13_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_13_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_12_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_12_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_11_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_11_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_10_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_10_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_9_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_9_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_8_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_8_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_10_t::get_width() const {
    return cap_pbc_csr_sta_account_10_t::s_get_width();

}

int cap_pbc_csr_cfg_account_10_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_10_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_10_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_10_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_9_t::get_width() const {
    return cap_pbc_csr_cfg_oq_9_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_15_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_15_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_14_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_14_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_13_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_13_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_12_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_12_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_11_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_11_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_10_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_10_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_9_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_9_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_8_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_8_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_9_t::get_width() const {
    return cap_pbc_csr_sta_account_9_t::s_get_width();

}

int cap_pbc_csr_cfg_account_9_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_9_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_9_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_9_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_8_t::get_width() const {
    return cap_pbc_csr_cfg_oq_8_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_8_t::get_width() const {
    return cap_pbc_csr_sta_account_8_t::s_get_width();

}

int cap_pbc_csr_cfg_account_8_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_8_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_8_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_8_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_7_t::get_width() const {
    return cap_pbc_csr_cfg_oq_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_7_t::get_width() const {
    return cap_pbc_csr_sta_account_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_7_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_7_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_7_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_7_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_6_t::get_width() const {
    return cap_pbc_csr_cfg_oq_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_6_t::get_width() const {
    return cap_pbc_csr_sta_account_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_6_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_6_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_6_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_6_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_5_t::get_width() const {
    return cap_pbc_csr_cfg_oq_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_5_t::get_width() const {
    return cap_pbc_csr_sta_account_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_5_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_5_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_5_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_5_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_4_t::get_width() const {
    return cap_pbc_csr_cfg_oq_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_4_t::get_width() const {
    return cap_pbc_csr_sta_account_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_4_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_4_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_4_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_4_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_3_t::get_width() const {
    return cap_pbc_csr_cfg_oq_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_3_t::get_width() const {
    return cap_pbc_csr_sta_account_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_3_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_3_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_3_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_3_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_2_t::get_width() const {
    return cap_pbc_csr_cfg_oq_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_2_t::get_width() const {
    return cap_pbc_csr_sta_account_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_2_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_2_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_2_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_2_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_1_t::get_width() const {
    return cap_pbc_csr_cfg_oq_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_1_t::get_width() const {
    return cap_pbc_csr_sta_account_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_1_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_1_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_1_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_1_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::get_width() const {
    return cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::get_width() const {
    return cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::s_get_width();

}

int cap_pbc_csr_cfg_oq_0_t::get_width() const {
    return cap_pbc_csr_cfg_oq_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_7_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_7_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_6_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_6_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_5_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_5_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_4_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_4_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_3_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_3_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_2_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_2_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_1_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_1_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pg_0_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pg_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_mtu_table_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_mtu_table_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_pause_timer_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_pause_timer_t::s_get_width();

}

int cap_pbc_csr_sta_account_0_t::get_width() const {
    return cap_pbc_csr_sta_account_0_t::s_get_width();

}

int cap_pbc_csr_cfg_account_0_tc_to_pg_t::get_width() const {
    return cap_pbc_csr_cfg_account_0_tc_to_pg_t::s_get_width();

}

int cap_pbc_csr_cfg_write_control_0_t::get_width() const {
    return cap_pbc_csr_cfg_write_control_0_t::s_get_width();

}

int cap_pbc_csr_cfg_pbc_control_t::get_width() const {
    return cap_pbc_csr_cfg_pbc_control_t::s_get_width();

}

int cap_pbc_csr_base_t::get_width() const {
    return cap_pbc_csr_base_t::s_get_width();

}

int cap_pbc_csr_t::get_width() const {
    return cap_pbc_csr_t::s_get_width();

}

int cap_pbc_csr_dhs_sched_entry_t::s_get_width() {
    int _count = 0;

    _count += 32; // current_credit
    _count += 32; // quanta
    return _count;
}

int cap_pbc_csr_dhs_sched_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_sched_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_rc_entry_t::s_get_width() {
    int _count = 0;

    _count += 3; // count0
    _count += 3; // count1
    _count += 3; // count2
    _count += 3; // count3
    _count += 3; // count4
    _count += 3; // count5
    _count += 3; // count6
    _count += 3; // count7
    return _count;
}

int cap_pbc_csr_dhs_rc_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_rc_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_gc_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_gc_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_gc_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_desc_1_entry_t::s_get_width() {
    int _count = 0;

    _count += 4; // src_port
    _count += 3; // refcount
    _count += 3; // input_queue
    _count += 5; // eop_pack
    _count += 5; // err_pack
    return _count;
}

int cap_pbc_csr_dhs_desc_1_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_desc_1_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_ll_1_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    _count += 1; // eop
    _count += 1; // full
    _count += 1; // ge256B
    _count += 1; // err
    return _count;
}

int cap_pbc_csr_dhs_ll_1_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_ll_1_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_fc_1_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // cell0
    _count += 14; // cell1
    return _count;
}

int cap_pbc_csr_dhs_fc_1_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_fc_1_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_desc_0_entry_t::s_get_width() {
    int _count = 0;

    _count += 4; // src_port
    _count += 3; // refcount
    _count += 3; // input_queue
    _count += 5; // eop_pack
    _count += 5; // err_pack
    return _count;
}

int cap_pbc_csr_dhs_desc_0_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_desc_0_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_ll_0_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    _count += 1; // eop
    _count += 1; // full
    _count += 1; // ge256B
    _count += 1; // err
    return _count;
}

int cap_pbc_csr_dhs_ll_0_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_ll_0_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_fc_0_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // cell0
    _count += 14; // cell1
    return _count;
}

int cap_pbc_csr_dhs_fc_0_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_fc_0_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_11_entry_t::s_get_width() {
    int _count = 0;

    _count += 13; // next_cell
    _count += 5; // pack_info
    return _count;
}

int cap_pbc_csr_dhs_oq_11_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_11_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_10_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    _count += 16; // rpl_ptr
    _count += 1; // rpl_en
    return _count;
}

int cap_pbc_csr_dhs_oq_10_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_10_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_9_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_9_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_9_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_8_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_8_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_8_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_7_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_7_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_7_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_6_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_6_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_6_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_5_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_5_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_5_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_4_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_4_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_4_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_3_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_3_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_3_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_2_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_2_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_2_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_1_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_1_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_1_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_dhs_oq_0_entry_t::s_get_width() {
    int _count = 0;

    _count += 14; // next_cell
    return _count;
}

int cap_pbc_csr_dhs_oq_0_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_dhs_oq_0_entry_t::s_get_width(); // entry
    return _count;
}

int cap_pbc_csr_cfg_src_port_to_lif_map_t::s_get_width() {
    int _count = 0;

    _count += 11; // entry_0
    _count += 11; // entry_1
    _count += 11; // entry_2
    _count += 11; // entry_3
    _count += 11; // entry_4
    _count += 11; // entry_5
    _count += 11; // entry_6
    _count += 11; // entry_7
    _count += 11; // entry_8
    return _count;
}

int cap_pbc_csr_cfg_tail_drop_t::s_get_width() {
    int _count = 0;

    _count += 16; // cpu_threshold
    _count += 16; // span_threshold
    return _count;
}

int cap_pbc_csr_sta_rpl_err_t::s_get_width() {
    int _count = 0;

    _count += 5; // rid
    _count += 2; // rresp
    return _count;
}

int cap_pbc_csr_sta_ecc_sideband_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 14; // addr
    return _count;
}

int cap_pbc_csr_cfg_spare_t::s_get_width() {
    int _count = 0;

    _count += 32; // data
    return _count;
}

int cap_pbc_csr_cfg_debug_port_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // select
    return _count;
}

int cap_pbc_csr_cfg_dhs_t::s_get_width() {
    int _count = 0;

    _count += 14; // address
    return _count;
}

int cap_pbc_csr_sta_oq_12_t::s_get_width() {
    int _count = 0;

    _count += 16; // depth_value
    return _count;
}

int cap_pbc_csr_sta_oq_t::s_get_width() {
    int _count = 0;

    _count += 512; // depth_value
    return _count;
}

int cap_pbc_csr_cnt_write_error_t::s_get_width() {
    int _count = 0;

    _count += 16; // discarded
    _count += 16; // admitted
    _count += 16; // intrinsic_drop
    _count += 8; // out_of_cells
    _count += 8; // out_of_credit
    _count += 8; // truncation
    _count += 8; // port_disabled
    _count += 16; // out_of_cells1
    _count += 16; // tail_drop_cpu
    _count += 16; // tail_drop_span
    _count += 8; // enqueue
    return _count;
}

int cap_pbc_csr_cnt_flits_t::s_get_width() {
    int _count = 0;

    _count += 16; // sop_in
    _count += 16; // eop_in
    _count += 16; // sop_out
    _count += 16; // eop_out
    return _count;
}

int cap_pbc_csr_cfg_parser8_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser7_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser6_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser5_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser4_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser3_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser2_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser1_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_parser0_t::s_get_width() {
    int _count = 0;

    _count += 16; // dot1q_type
    _count += 16; // ipv4_type
    _count += 16; // ipv6_type
    _count += 1; // use_ip
    _count += 1; // use_dot1q
    _count += 3; // default_cos
    _count += 4; // default_port
    _count += 40; // oq_map
    _count += 192; // dscp_map
    return _count;
}

int cap_pbc_csr_cfg_rpl_t::s_get_width() {
    int _count = 0;

    _count += 27; // base
    _count += 2; // token_size
    return _count;
}

int cap_pbc_csr_cfg_island_control_t::s_get_width() {
    int _count = 0;

    _count += 1; // map
    return _count;
}

int cap_pbc_csr_sta_sched_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_uncorrectable
    _count += 1; // ecc_correctable
    _count += 8; // ecc_syndrome
    _count += 9; // ecc_addr
    return _count;
}

int cap_pbc_csr_cfg_sched_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable_wrr
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 2; // dhs_selection
    _count += 32; // timer
    return _count;
}

int cap_pbc_csr_sta_rc_t::s_get_width() {
    int _count = 0;

    _count += 1; // init_done
    _count += 1; // ecc_uncorrectable
    _count += 1; // ecc_correctable
    _count += 6; // ecc_syndrome
    _count += 11; // ecc_addr
    return _count;
}

int cap_pbc_csr_cfg_rc_t::s_get_width() {
    int _count = 0;

    _count += 1; // init_start
    _count += 1; // init_reset
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_cfg_gc_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_ecc_desc_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 14; // addr
    return _count;
}

int cap_pbc_csr_cfg_desc_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_ecc_ll_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 14; // addr
    return _count;
}

int cap_pbc_csr_cfg_ll_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_ecc_fc_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 12; // addr
    return _count;
}

int cap_pbc_csr_cfg_fc_mgr_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // init_start
    _count += 1; // init_reset
    _count += 12; // max_row
    _count += 13; // min_cell
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_fc_mgr_1_t::s_get_width() {
    int _count = 0;

    _count += 13; // cells_available
    _count += 1; // init_done
    return _count;
}

int cap_pbc_csr_sta_ecc_desc_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 14; // addr
    return _count;
}

int cap_pbc_csr_cfg_desc_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_ecc_ll_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 14; // addr
    return _count;
}

int cap_pbc_csr_cfg_ll_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_ecc_fc_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 7; // syndrome
    _count += 12; // addr
    return _count;
}

int cap_pbc_csr_cfg_fc_mgr_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // init_start
    _count += 1; // init_reset
    _count += 12; // max_row
    _count += 13; // min_cell
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    return _count;
}

int cap_pbc_csr_sta_fc_mgr_0_t::s_get_width() {
    int _count = 0;

    _count += 13; // cells_available
    _count += 1; // init_done
    return _count;
}

int cap_pbc_csr_sta_ecc_rwr_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 18; // syndrome
    _count += 15; // addr
    return _count;
}

int cap_pbc_csr_sta_ecc_pack_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 17; // addr
    return _count;
}

int cap_pbc_csr_sta_ecc_oq_t::s_get_width() {
    int _count = 0;

    _count += 1; // uncorrectable
    _count += 1; // correctable
    _count += 6; // syndrome
    _count += 18; // addr
    return _count;
}

int cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_11_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 1; // packing_msb
    _count += 4; // dhs_selection
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_31_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_30_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_29_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_28_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_27_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_26_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_25_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_24_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_23_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_22_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_21_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_20_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_19_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_18_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_17_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_16_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_15_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_14_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_13_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_12_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_11_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_10_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_9_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_8_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_11_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    _count += 5; // pg8
    _count += 5; // pg9
    _count += 5; // pg10
    _count += 5; // pg11
    _count += 5; // pg12
    _count += 5; // pg13
    _count += 5; // pg14
    _count += 5; // pg15
    _count += 5; // pg16
    _count += 5; // pg17
    _count += 5; // pg18
    _count += 5; // pg19
    _count += 5; // pg20
    _count += 5; // pg21
    _count += 5; // pg22
    _count += 5; // pg23
    _count += 5; // pg24
    _count += 5; // pg25
    _count += 5; // pg26
    _count += 5; // pg27
    _count += 5; // pg28
    _count += 5; // pg29
    _count += 5; // pg30
    _count += 5; // pg31
    return _count;
}

int cap_pbc_csr_cfg_account_11_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_11_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    _count += 14; // occupancy_8
    _count += 14; // occupancy_9
    _count += 14; // occupancy_10
    _count += 14; // occupancy_11
    _count += 14; // occupancy_12
    _count += 14; // occupancy_13
    _count += 14; // occupancy_14
    _count += 14; // occupancy_15
    _count += 14; // occupancy_16
    _count += 14; // occupancy_17
    _count += 14; // occupancy_18
    _count += 14; // occupancy_19
    _count += 14; // occupancy_20
    _count += 14; // occupancy_21
    _count += 14; // occupancy_22
    _count += 14; // occupancy_23
    _count += 14; // occupancy_24
    _count += 14; // occupancy_25
    _count += 14; // occupancy_26
    _count += 14; // occupancy_27
    _count += 14; // occupancy_28
    _count += 14; // occupancy_29
    _count += 14; // occupancy_30
    _count += 14; // occupancy_31
    return _count;
}

int cap_pbc_csr_cfg_account_11_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 160; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_11_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_10_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 3; // dhs_selection
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_31_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_30_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_29_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_28_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_27_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_26_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_25_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_24_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_23_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_22_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_21_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_20_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_19_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_18_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_17_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_16_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_15_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_14_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_13_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_12_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_11_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_10_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_9_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_8_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_10_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    _count += 5; // pg8
    _count += 5; // pg9
    _count += 5; // pg10
    _count += 5; // pg11
    _count += 5; // pg12
    _count += 5; // pg13
    _count += 5; // pg14
    _count += 5; // pg15
    _count += 5; // pg16
    _count += 5; // pg17
    _count += 5; // pg18
    _count += 5; // pg19
    _count += 5; // pg20
    _count += 5; // pg21
    _count += 5; // pg22
    _count += 5; // pg23
    _count += 5; // pg24
    _count += 5; // pg25
    _count += 5; // pg26
    _count += 5; // pg27
    _count += 5; // pg28
    _count += 5; // pg29
    _count += 5; // pg30
    _count += 5; // pg31
    return _count;
}

int cap_pbc_csr_cfg_account_10_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_10_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    _count += 14; // occupancy_8
    _count += 14; // occupancy_9
    _count += 14; // occupancy_10
    _count += 14; // occupancy_11
    _count += 14; // occupancy_12
    _count += 14; // occupancy_13
    _count += 14; // occupancy_14
    _count += 14; // occupancy_15
    _count += 14; // occupancy_16
    _count += 14; // occupancy_17
    _count += 14; // occupancy_18
    _count += 14; // occupancy_19
    _count += 14; // occupancy_20
    _count += 14; // occupancy_21
    _count += 14; // occupancy_22
    _count += 14; // occupancy_23
    _count += 14; // occupancy_24
    _count += 14; // occupancy_25
    _count += 14; // occupancy_26
    _count += 14; // occupancy_27
    _count += 14; // occupancy_28
    _count += 14; // occupancy_29
    _count += 14; // occupancy_30
    _count += 14; // occupancy_31
    return _count;
}

int cap_pbc_csr_cfg_account_10_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 160; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_10_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_9_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_15_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_14_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_13_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_12_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_11_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_10_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_9_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_8_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_9_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    _count += 5; // pg8
    _count += 5; // pg9
    _count += 5; // pg10
    _count += 5; // pg11
    _count += 5; // pg12
    _count += 5; // pg13
    _count += 5; // pg14
    _count += 5; // pg15
    return _count;
}

int cap_pbc_csr_cfg_account_9_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_9_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    _count += 14; // occupancy_8
    _count += 14; // occupancy_9
    _count += 14; // occupancy_10
    _count += 14; // occupancy_11
    _count += 14; // occupancy_12
    _count += 14; // occupancy_13
    _count += 14; // occupancy_14
    _count += 14; // occupancy_15
    return _count;
}

int cap_pbc_csr_cfg_account_9_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 64; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_9_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_8_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_8_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_8_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_8_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_8_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_8_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_7_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_7_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_7_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_7_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_7_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_7_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_6_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_6_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_6_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_6_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_6_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_6_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_5_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_5_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_5_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_5_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_5_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_5_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_4_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_4_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_4_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_4_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_4_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_4_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_3_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_3_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_3_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_3_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_3_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_3_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_2_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_2_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_2_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_2_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_2_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_2_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_1_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_1_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_1_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_1_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_1_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::s_get_width() {
    int _count = 0;

    _count += 16; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::s_get_width() {
    int _count = 0;

    _count += 16; // node_0
    _count += 16; // node_1
    _count += 16; // node_2
    _count += 16; // node_3
    return _count;
}

int cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::s_get_width() {
    int _count = 0;

    _count += 32; // priority
    return _count;
}

int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::s_get_width() {
    int _count = 0;

    _count += 32; // node_0
    _count += 32; // node_1
    _count += 32; // node_2
    _count += 32; // node_3
    _count += 32; // node_4
    _count += 32; // node_5
    _count += 32; // node_6
    _count += 32; // node_7
    _count += 32; // node_8
    _count += 32; // node_9
    _count += 32; // node_10
    _count += 32; // node_11
    _count += 32; // node_12
    _count += 32; // node_13
    _count += 32; // node_14
    _count += 32; // node_15
    return _count;
}

int cap_pbc_csr_cfg_oq_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 1; // ecc_disable_det
    _count += 1; // ecc_disable_cor
    _count += 1; // dhs_eccbypass
    _count += 7; // num_hdr_bytes
    _count += 1; // rewrite_enable
    _count += 5; // ipg_bytes
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_7_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_6_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_5_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_4_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_3_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_2_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_1_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_pg_0_t::s_get_width() {
    int _count = 0;

    _count += 10; // reserved_min
    _count += 14; // xon_threshold
    _count += 12; // headroom
    _count += 14; // low_limit
    _count += 4; // alpha
    return _count;
}

int cap_pbc_csr_cfg_account_0_mtu_table_t::s_get_width() {
    int _count = 0;

    _count += 5; // pg0
    _count += 5; // pg1
    _count += 5; // pg2
    _count += 5; // pg3
    _count += 5; // pg4
    _count += 5; // pg5
    _count += 5; // pg6
    _count += 5; // pg7
    return _count;
}

int cap_pbc_csr_cfg_account_0_pause_timer_t::s_get_width() {
    int _count = 0;

    _count += 32; // xoff_timeout
    return _count;
}

int cap_pbc_csr_sta_account_0_t::s_get_width() {
    int _count = 0;

    _count += 14; // occupancy_0
    _count += 14; // occupancy_1
    _count += 14; // occupancy_2
    _count += 14; // occupancy_3
    _count += 14; // occupancy_4
    _count += 14; // occupancy_5
    _count += 14; // occupancy_6
    _count += 14; // occupancy_7
    return _count;
}

int cap_pbc_csr_cfg_account_0_tc_to_pg_t::s_get_width() {
    int _count = 0;

    _count += 24; // table
    return _count;
}

int cap_pbc_csr_cfg_write_control_0_t::s_get_width() {
    int _count = 0;

    _count += 1; // enable
    _count += 5; // cut_thru
    _count += 1; // packing
    _count += 1; // packing_same_pg
    _count += 10; // packing_timeout_cycles
    _count += 1; // rewrite
    _count += 3; // rate_limiter
    _count += 1; // drop_on_error
    return _count;
}

int cap_pbc_csr_cfg_pbc_control_t::s_get_width() {
    int _count = 0;

    _count += 1; // sw_reset
    return _count;
}

int cap_pbc_csr_base_t::s_get_width() {
    int _count = 0;

    _count += 32; // scratch_reg
    return _count;
}

int cap_pbc_csr_t::s_get_width() {
    int _count = 0;

    _count += cap_pbc_csr_base_t::s_get_width(); // base
    _count += cap_pbc_csr_cfg_pbc_control_t::s_get_width(); // cfg_pbc_control
    _count += cap_pbc_csr_cfg_write_control_0_t::s_get_width(); // cfg_write_control_0
    _count += cap_pbc_csr_cfg_account_0_tc_to_pg_t::s_get_width(); // cfg_account_0_tc_to_pg
    _count += cap_pbc_csr_sta_account_0_t::s_get_width(); // sta_account_0
    _count += cap_pbc_csr_cfg_account_0_pause_timer_t::s_get_width(); // cfg_account_0_pause_timer
    _count += cap_pbc_csr_cfg_account_0_mtu_table_t::s_get_width(); // cfg_account_0_mtu_table
    _count += cap_pbc_csr_cfg_account_0_pg_0_t::s_get_width(); // cfg_account_0_pg_0
    _count += cap_pbc_csr_cfg_account_0_pg_1_t::s_get_width(); // cfg_account_0_pg_1
    _count += cap_pbc_csr_cfg_account_0_pg_2_t::s_get_width(); // cfg_account_0_pg_2
    _count += cap_pbc_csr_cfg_account_0_pg_3_t::s_get_width(); // cfg_account_0_pg_3
    _count += cap_pbc_csr_cfg_account_0_pg_4_t::s_get_width(); // cfg_account_0_pg_4
    _count += cap_pbc_csr_cfg_account_0_pg_5_t::s_get_width(); // cfg_account_0_pg_5
    _count += cap_pbc_csr_cfg_account_0_pg_6_t::s_get_width(); // cfg_account_0_pg_6
    _count += cap_pbc_csr_cfg_account_0_pg_7_t::s_get_width(); // cfg_account_0_pg_7
    _count += cap_pbc_csr_cfg_oq_0_t::s_get_width(); // cfg_oq_0
    _count += cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::s_get_width(); // cfg_oq_0_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::s_get_width(); // cfg_oq_0_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::s_get_width(); // cfg_oq_0_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::s_get_width(); // cfg_oq_0_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_1_t::s_get_width(); // cfg_write_control_1
    _count += cap_pbc_csr_cfg_account_1_tc_to_pg_t::s_get_width(); // cfg_account_1_tc_to_pg
    _count += cap_pbc_csr_sta_account_1_t::s_get_width(); // sta_account_1
    _count += cap_pbc_csr_cfg_account_1_pause_timer_t::s_get_width(); // cfg_account_1_pause_timer
    _count += cap_pbc_csr_cfg_account_1_mtu_table_t::s_get_width(); // cfg_account_1_mtu_table
    _count += cap_pbc_csr_cfg_account_1_pg_0_t::s_get_width(); // cfg_account_1_pg_0
    _count += cap_pbc_csr_cfg_account_1_pg_1_t::s_get_width(); // cfg_account_1_pg_1
    _count += cap_pbc_csr_cfg_account_1_pg_2_t::s_get_width(); // cfg_account_1_pg_2
    _count += cap_pbc_csr_cfg_account_1_pg_3_t::s_get_width(); // cfg_account_1_pg_3
    _count += cap_pbc_csr_cfg_account_1_pg_4_t::s_get_width(); // cfg_account_1_pg_4
    _count += cap_pbc_csr_cfg_account_1_pg_5_t::s_get_width(); // cfg_account_1_pg_5
    _count += cap_pbc_csr_cfg_account_1_pg_6_t::s_get_width(); // cfg_account_1_pg_6
    _count += cap_pbc_csr_cfg_account_1_pg_7_t::s_get_width(); // cfg_account_1_pg_7
    _count += cap_pbc_csr_cfg_oq_1_t::s_get_width(); // cfg_oq_1
    _count += cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::s_get_width(); // cfg_oq_1_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::s_get_width(); // cfg_oq_1_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::s_get_width(); // cfg_oq_1_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::s_get_width(); // cfg_oq_1_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_2_t::s_get_width(); // cfg_write_control_2
    _count += cap_pbc_csr_cfg_account_2_tc_to_pg_t::s_get_width(); // cfg_account_2_tc_to_pg
    _count += cap_pbc_csr_sta_account_2_t::s_get_width(); // sta_account_2
    _count += cap_pbc_csr_cfg_account_2_pause_timer_t::s_get_width(); // cfg_account_2_pause_timer
    _count += cap_pbc_csr_cfg_account_2_mtu_table_t::s_get_width(); // cfg_account_2_mtu_table
    _count += cap_pbc_csr_cfg_account_2_pg_0_t::s_get_width(); // cfg_account_2_pg_0
    _count += cap_pbc_csr_cfg_account_2_pg_1_t::s_get_width(); // cfg_account_2_pg_1
    _count += cap_pbc_csr_cfg_account_2_pg_2_t::s_get_width(); // cfg_account_2_pg_2
    _count += cap_pbc_csr_cfg_account_2_pg_3_t::s_get_width(); // cfg_account_2_pg_3
    _count += cap_pbc_csr_cfg_account_2_pg_4_t::s_get_width(); // cfg_account_2_pg_4
    _count += cap_pbc_csr_cfg_account_2_pg_5_t::s_get_width(); // cfg_account_2_pg_5
    _count += cap_pbc_csr_cfg_account_2_pg_6_t::s_get_width(); // cfg_account_2_pg_6
    _count += cap_pbc_csr_cfg_account_2_pg_7_t::s_get_width(); // cfg_account_2_pg_7
    _count += cap_pbc_csr_cfg_oq_2_t::s_get_width(); // cfg_oq_2
    _count += cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::s_get_width(); // cfg_oq_2_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::s_get_width(); // cfg_oq_2_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::s_get_width(); // cfg_oq_2_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::s_get_width(); // cfg_oq_2_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_3_t::s_get_width(); // cfg_write_control_3
    _count += cap_pbc_csr_cfg_account_3_tc_to_pg_t::s_get_width(); // cfg_account_3_tc_to_pg
    _count += cap_pbc_csr_sta_account_3_t::s_get_width(); // sta_account_3
    _count += cap_pbc_csr_cfg_account_3_pause_timer_t::s_get_width(); // cfg_account_3_pause_timer
    _count += cap_pbc_csr_cfg_account_3_mtu_table_t::s_get_width(); // cfg_account_3_mtu_table
    _count += cap_pbc_csr_cfg_account_3_pg_0_t::s_get_width(); // cfg_account_3_pg_0
    _count += cap_pbc_csr_cfg_account_3_pg_1_t::s_get_width(); // cfg_account_3_pg_1
    _count += cap_pbc_csr_cfg_account_3_pg_2_t::s_get_width(); // cfg_account_3_pg_2
    _count += cap_pbc_csr_cfg_account_3_pg_3_t::s_get_width(); // cfg_account_3_pg_3
    _count += cap_pbc_csr_cfg_account_3_pg_4_t::s_get_width(); // cfg_account_3_pg_4
    _count += cap_pbc_csr_cfg_account_3_pg_5_t::s_get_width(); // cfg_account_3_pg_5
    _count += cap_pbc_csr_cfg_account_3_pg_6_t::s_get_width(); // cfg_account_3_pg_6
    _count += cap_pbc_csr_cfg_account_3_pg_7_t::s_get_width(); // cfg_account_3_pg_7
    _count += cap_pbc_csr_cfg_oq_3_t::s_get_width(); // cfg_oq_3
    _count += cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::s_get_width(); // cfg_oq_3_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::s_get_width(); // cfg_oq_3_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::s_get_width(); // cfg_oq_3_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::s_get_width(); // cfg_oq_3_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_4_t::s_get_width(); // cfg_write_control_4
    _count += cap_pbc_csr_cfg_account_4_tc_to_pg_t::s_get_width(); // cfg_account_4_tc_to_pg
    _count += cap_pbc_csr_sta_account_4_t::s_get_width(); // sta_account_4
    _count += cap_pbc_csr_cfg_account_4_pause_timer_t::s_get_width(); // cfg_account_4_pause_timer
    _count += cap_pbc_csr_cfg_account_4_mtu_table_t::s_get_width(); // cfg_account_4_mtu_table
    _count += cap_pbc_csr_cfg_account_4_pg_0_t::s_get_width(); // cfg_account_4_pg_0
    _count += cap_pbc_csr_cfg_account_4_pg_1_t::s_get_width(); // cfg_account_4_pg_1
    _count += cap_pbc_csr_cfg_account_4_pg_2_t::s_get_width(); // cfg_account_4_pg_2
    _count += cap_pbc_csr_cfg_account_4_pg_3_t::s_get_width(); // cfg_account_4_pg_3
    _count += cap_pbc_csr_cfg_account_4_pg_4_t::s_get_width(); // cfg_account_4_pg_4
    _count += cap_pbc_csr_cfg_account_4_pg_5_t::s_get_width(); // cfg_account_4_pg_5
    _count += cap_pbc_csr_cfg_account_4_pg_6_t::s_get_width(); // cfg_account_4_pg_6
    _count += cap_pbc_csr_cfg_account_4_pg_7_t::s_get_width(); // cfg_account_4_pg_7
    _count += cap_pbc_csr_cfg_oq_4_t::s_get_width(); // cfg_oq_4
    _count += cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::s_get_width(); // cfg_oq_4_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::s_get_width(); // cfg_oq_4_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::s_get_width(); // cfg_oq_4_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::s_get_width(); // cfg_oq_4_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_5_t::s_get_width(); // cfg_write_control_5
    _count += cap_pbc_csr_cfg_account_5_tc_to_pg_t::s_get_width(); // cfg_account_5_tc_to_pg
    _count += cap_pbc_csr_sta_account_5_t::s_get_width(); // sta_account_5
    _count += cap_pbc_csr_cfg_account_5_pause_timer_t::s_get_width(); // cfg_account_5_pause_timer
    _count += cap_pbc_csr_cfg_account_5_mtu_table_t::s_get_width(); // cfg_account_5_mtu_table
    _count += cap_pbc_csr_cfg_account_5_pg_0_t::s_get_width(); // cfg_account_5_pg_0
    _count += cap_pbc_csr_cfg_account_5_pg_1_t::s_get_width(); // cfg_account_5_pg_1
    _count += cap_pbc_csr_cfg_account_5_pg_2_t::s_get_width(); // cfg_account_5_pg_2
    _count += cap_pbc_csr_cfg_account_5_pg_3_t::s_get_width(); // cfg_account_5_pg_3
    _count += cap_pbc_csr_cfg_account_5_pg_4_t::s_get_width(); // cfg_account_5_pg_4
    _count += cap_pbc_csr_cfg_account_5_pg_5_t::s_get_width(); // cfg_account_5_pg_5
    _count += cap_pbc_csr_cfg_account_5_pg_6_t::s_get_width(); // cfg_account_5_pg_6
    _count += cap_pbc_csr_cfg_account_5_pg_7_t::s_get_width(); // cfg_account_5_pg_7
    _count += cap_pbc_csr_cfg_oq_5_t::s_get_width(); // cfg_oq_5
    _count += cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::s_get_width(); // cfg_oq_5_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::s_get_width(); // cfg_oq_5_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::s_get_width(); // cfg_oq_5_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::s_get_width(); // cfg_oq_5_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_6_t::s_get_width(); // cfg_write_control_6
    _count += cap_pbc_csr_cfg_account_6_tc_to_pg_t::s_get_width(); // cfg_account_6_tc_to_pg
    _count += cap_pbc_csr_sta_account_6_t::s_get_width(); // sta_account_6
    _count += cap_pbc_csr_cfg_account_6_pause_timer_t::s_get_width(); // cfg_account_6_pause_timer
    _count += cap_pbc_csr_cfg_account_6_mtu_table_t::s_get_width(); // cfg_account_6_mtu_table
    _count += cap_pbc_csr_cfg_account_6_pg_0_t::s_get_width(); // cfg_account_6_pg_0
    _count += cap_pbc_csr_cfg_account_6_pg_1_t::s_get_width(); // cfg_account_6_pg_1
    _count += cap_pbc_csr_cfg_account_6_pg_2_t::s_get_width(); // cfg_account_6_pg_2
    _count += cap_pbc_csr_cfg_account_6_pg_3_t::s_get_width(); // cfg_account_6_pg_3
    _count += cap_pbc_csr_cfg_account_6_pg_4_t::s_get_width(); // cfg_account_6_pg_4
    _count += cap_pbc_csr_cfg_account_6_pg_5_t::s_get_width(); // cfg_account_6_pg_5
    _count += cap_pbc_csr_cfg_account_6_pg_6_t::s_get_width(); // cfg_account_6_pg_6
    _count += cap_pbc_csr_cfg_account_6_pg_7_t::s_get_width(); // cfg_account_6_pg_7
    _count += cap_pbc_csr_cfg_oq_6_t::s_get_width(); // cfg_oq_6
    _count += cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::s_get_width(); // cfg_oq_6_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::s_get_width(); // cfg_oq_6_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::s_get_width(); // cfg_oq_6_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::s_get_width(); // cfg_oq_6_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_7_t::s_get_width(); // cfg_write_control_7
    _count += cap_pbc_csr_cfg_account_7_tc_to_pg_t::s_get_width(); // cfg_account_7_tc_to_pg
    _count += cap_pbc_csr_sta_account_7_t::s_get_width(); // sta_account_7
    _count += cap_pbc_csr_cfg_account_7_pause_timer_t::s_get_width(); // cfg_account_7_pause_timer
    _count += cap_pbc_csr_cfg_account_7_mtu_table_t::s_get_width(); // cfg_account_7_mtu_table
    _count += cap_pbc_csr_cfg_account_7_pg_0_t::s_get_width(); // cfg_account_7_pg_0
    _count += cap_pbc_csr_cfg_account_7_pg_1_t::s_get_width(); // cfg_account_7_pg_1
    _count += cap_pbc_csr_cfg_account_7_pg_2_t::s_get_width(); // cfg_account_7_pg_2
    _count += cap_pbc_csr_cfg_account_7_pg_3_t::s_get_width(); // cfg_account_7_pg_3
    _count += cap_pbc_csr_cfg_account_7_pg_4_t::s_get_width(); // cfg_account_7_pg_4
    _count += cap_pbc_csr_cfg_account_7_pg_5_t::s_get_width(); // cfg_account_7_pg_5
    _count += cap_pbc_csr_cfg_account_7_pg_6_t::s_get_width(); // cfg_account_7_pg_6
    _count += cap_pbc_csr_cfg_account_7_pg_7_t::s_get_width(); // cfg_account_7_pg_7
    _count += cap_pbc_csr_cfg_oq_7_t::s_get_width(); // cfg_oq_7
    _count += cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::s_get_width(); // cfg_oq_7_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::s_get_width(); // cfg_oq_7_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::s_get_width(); // cfg_oq_7_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::s_get_width(); // cfg_oq_7_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_8_t::s_get_width(); // cfg_write_control_8
    _count += cap_pbc_csr_cfg_account_8_tc_to_pg_t::s_get_width(); // cfg_account_8_tc_to_pg
    _count += cap_pbc_csr_sta_account_8_t::s_get_width(); // sta_account_8
    _count += cap_pbc_csr_cfg_account_8_pause_timer_t::s_get_width(); // cfg_account_8_pause_timer
    _count += cap_pbc_csr_cfg_account_8_mtu_table_t::s_get_width(); // cfg_account_8_mtu_table
    _count += cap_pbc_csr_cfg_account_8_pg_0_t::s_get_width(); // cfg_account_8_pg_0
    _count += cap_pbc_csr_cfg_account_8_pg_1_t::s_get_width(); // cfg_account_8_pg_1
    _count += cap_pbc_csr_cfg_account_8_pg_2_t::s_get_width(); // cfg_account_8_pg_2
    _count += cap_pbc_csr_cfg_account_8_pg_3_t::s_get_width(); // cfg_account_8_pg_3
    _count += cap_pbc_csr_cfg_account_8_pg_4_t::s_get_width(); // cfg_account_8_pg_4
    _count += cap_pbc_csr_cfg_account_8_pg_5_t::s_get_width(); // cfg_account_8_pg_5
    _count += cap_pbc_csr_cfg_account_8_pg_6_t::s_get_width(); // cfg_account_8_pg_6
    _count += cap_pbc_csr_cfg_account_8_pg_7_t::s_get_width(); // cfg_account_8_pg_7
    _count += cap_pbc_csr_cfg_oq_8_t::s_get_width(); // cfg_oq_8
    _count += cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::s_get_width(); // cfg_oq_8_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::s_get_width(); // cfg_oq_8_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::s_get_width(); // cfg_oq_8_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::s_get_width(); // cfg_oq_8_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_9_t::s_get_width(); // cfg_write_control_9
    _count += cap_pbc_csr_cfg_account_9_tc_to_pg_t::s_get_width(); // cfg_account_9_tc_to_pg
    _count += cap_pbc_csr_sta_account_9_t::s_get_width(); // sta_account_9
    _count += cap_pbc_csr_cfg_account_9_pause_timer_t::s_get_width(); // cfg_account_9_pause_timer
    _count += cap_pbc_csr_cfg_account_9_mtu_table_t::s_get_width(); // cfg_account_9_mtu_table
    _count += cap_pbc_csr_cfg_account_9_pg_0_t::s_get_width(); // cfg_account_9_pg_0
    _count += cap_pbc_csr_cfg_account_9_pg_1_t::s_get_width(); // cfg_account_9_pg_1
    _count += cap_pbc_csr_cfg_account_9_pg_2_t::s_get_width(); // cfg_account_9_pg_2
    _count += cap_pbc_csr_cfg_account_9_pg_3_t::s_get_width(); // cfg_account_9_pg_3
    _count += cap_pbc_csr_cfg_account_9_pg_4_t::s_get_width(); // cfg_account_9_pg_4
    _count += cap_pbc_csr_cfg_account_9_pg_5_t::s_get_width(); // cfg_account_9_pg_5
    _count += cap_pbc_csr_cfg_account_9_pg_6_t::s_get_width(); // cfg_account_9_pg_6
    _count += cap_pbc_csr_cfg_account_9_pg_7_t::s_get_width(); // cfg_account_9_pg_7
    _count += cap_pbc_csr_cfg_account_9_pg_8_t::s_get_width(); // cfg_account_9_pg_8
    _count += cap_pbc_csr_cfg_account_9_pg_9_t::s_get_width(); // cfg_account_9_pg_9
    _count += cap_pbc_csr_cfg_account_9_pg_10_t::s_get_width(); // cfg_account_9_pg_10
    _count += cap_pbc_csr_cfg_account_9_pg_11_t::s_get_width(); // cfg_account_9_pg_11
    _count += cap_pbc_csr_cfg_account_9_pg_12_t::s_get_width(); // cfg_account_9_pg_12
    _count += cap_pbc_csr_cfg_account_9_pg_13_t::s_get_width(); // cfg_account_9_pg_13
    _count += cap_pbc_csr_cfg_account_9_pg_14_t::s_get_width(); // cfg_account_9_pg_14
    _count += cap_pbc_csr_cfg_account_9_pg_15_t::s_get_width(); // cfg_account_9_pg_15
    _count += cap_pbc_csr_cfg_oq_9_t::s_get_width(); // cfg_oq_9
    _count += cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::s_get_width(); // cfg_oq_9_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::s_get_width(); // cfg_oq_9_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::s_get_width(); // cfg_oq_9_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::s_get_width(); // cfg_oq_9_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_10_t::s_get_width(); // cfg_write_control_10
    _count += cap_pbc_csr_cfg_account_10_tc_to_pg_t::s_get_width(); // cfg_account_10_tc_to_pg
    _count += cap_pbc_csr_sta_account_10_t::s_get_width(); // sta_account_10
    _count += cap_pbc_csr_cfg_account_10_pause_timer_t::s_get_width(); // cfg_account_10_pause_timer
    _count += cap_pbc_csr_cfg_account_10_mtu_table_t::s_get_width(); // cfg_account_10_mtu_table
    _count += cap_pbc_csr_cfg_account_10_pg_0_t::s_get_width(); // cfg_account_10_pg_0
    _count += cap_pbc_csr_cfg_account_10_pg_1_t::s_get_width(); // cfg_account_10_pg_1
    _count += cap_pbc_csr_cfg_account_10_pg_2_t::s_get_width(); // cfg_account_10_pg_2
    _count += cap_pbc_csr_cfg_account_10_pg_3_t::s_get_width(); // cfg_account_10_pg_3
    _count += cap_pbc_csr_cfg_account_10_pg_4_t::s_get_width(); // cfg_account_10_pg_4
    _count += cap_pbc_csr_cfg_account_10_pg_5_t::s_get_width(); // cfg_account_10_pg_5
    _count += cap_pbc_csr_cfg_account_10_pg_6_t::s_get_width(); // cfg_account_10_pg_6
    _count += cap_pbc_csr_cfg_account_10_pg_7_t::s_get_width(); // cfg_account_10_pg_7
    _count += cap_pbc_csr_cfg_account_10_pg_8_t::s_get_width(); // cfg_account_10_pg_8
    _count += cap_pbc_csr_cfg_account_10_pg_9_t::s_get_width(); // cfg_account_10_pg_9
    _count += cap_pbc_csr_cfg_account_10_pg_10_t::s_get_width(); // cfg_account_10_pg_10
    _count += cap_pbc_csr_cfg_account_10_pg_11_t::s_get_width(); // cfg_account_10_pg_11
    _count += cap_pbc_csr_cfg_account_10_pg_12_t::s_get_width(); // cfg_account_10_pg_12
    _count += cap_pbc_csr_cfg_account_10_pg_13_t::s_get_width(); // cfg_account_10_pg_13
    _count += cap_pbc_csr_cfg_account_10_pg_14_t::s_get_width(); // cfg_account_10_pg_14
    _count += cap_pbc_csr_cfg_account_10_pg_15_t::s_get_width(); // cfg_account_10_pg_15
    _count += cap_pbc_csr_cfg_account_10_pg_16_t::s_get_width(); // cfg_account_10_pg_16
    _count += cap_pbc_csr_cfg_account_10_pg_17_t::s_get_width(); // cfg_account_10_pg_17
    _count += cap_pbc_csr_cfg_account_10_pg_18_t::s_get_width(); // cfg_account_10_pg_18
    _count += cap_pbc_csr_cfg_account_10_pg_19_t::s_get_width(); // cfg_account_10_pg_19
    _count += cap_pbc_csr_cfg_account_10_pg_20_t::s_get_width(); // cfg_account_10_pg_20
    _count += cap_pbc_csr_cfg_account_10_pg_21_t::s_get_width(); // cfg_account_10_pg_21
    _count += cap_pbc_csr_cfg_account_10_pg_22_t::s_get_width(); // cfg_account_10_pg_22
    _count += cap_pbc_csr_cfg_account_10_pg_23_t::s_get_width(); // cfg_account_10_pg_23
    _count += cap_pbc_csr_cfg_account_10_pg_24_t::s_get_width(); // cfg_account_10_pg_24
    _count += cap_pbc_csr_cfg_account_10_pg_25_t::s_get_width(); // cfg_account_10_pg_25
    _count += cap_pbc_csr_cfg_account_10_pg_26_t::s_get_width(); // cfg_account_10_pg_26
    _count += cap_pbc_csr_cfg_account_10_pg_27_t::s_get_width(); // cfg_account_10_pg_27
    _count += cap_pbc_csr_cfg_account_10_pg_28_t::s_get_width(); // cfg_account_10_pg_28
    _count += cap_pbc_csr_cfg_account_10_pg_29_t::s_get_width(); // cfg_account_10_pg_29
    _count += cap_pbc_csr_cfg_account_10_pg_30_t::s_get_width(); // cfg_account_10_pg_30
    _count += cap_pbc_csr_cfg_account_10_pg_31_t::s_get_width(); // cfg_account_10_pg_31
    _count += cap_pbc_csr_cfg_oq_10_t::s_get_width(); // cfg_oq_10
    _count += cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::s_get_width(); // cfg_oq_10_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::s_get_width(); // cfg_oq_10_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::s_get_width(); // cfg_oq_10_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::s_get_width(); // cfg_oq_10_arb_l2_strict
    _count += cap_pbc_csr_cfg_write_control_11_t::s_get_width(); // cfg_write_control_11
    _count += cap_pbc_csr_cfg_account_11_tc_to_pg_t::s_get_width(); // cfg_account_11_tc_to_pg
    _count += cap_pbc_csr_sta_account_11_t::s_get_width(); // sta_account_11
    _count += cap_pbc_csr_cfg_account_11_pause_timer_t::s_get_width(); // cfg_account_11_pause_timer
    _count += cap_pbc_csr_cfg_account_11_mtu_table_t::s_get_width(); // cfg_account_11_mtu_table
    _count += cap_pbc_csr_cfg_account_11_pg_0_t::s_get_width(); // cfg_account_11_pg_0
    _count += cap_pbc_csr_cfg_account_11_pg_1_t::s_get_width(); // cfg_account_11_pg_1
    _count += cap_pbc_csr_cfg_account_11_pg_2_t::s_get_width(); // cfg_account_11_pg_2
    _count += cap_pbc_csr_cfg_account_11_pg_3_t::s_get_width(); // cfg_account_11_pg_3
    _count += cap_pbc_csr_cfg_account_11_pg_4_t::s_get_width(); // cfg_account_11_pg_4
    _count += cap_pbc_csr_cfg_account_11_pg_5_t::s_get_width(); // cfg_account_11_pg_5
    _count += cap_pbc_csr_cfg_account_11_pg_6_t::s_get_width(); // cfg_account_11_pg_6
    _count += cap_pbc_csr_cfg_account_11_pg_7_t::s_get_width(); // cfg_account_11_pg_7
    _count += cap_pbc_csr_cfg_account_11_pg_8_t::s_get_width(); // cfg_account_11_pg_8
    _count += cap_pbc_csr_cfg_account_11_pg_9_t::s_get_width(); // cfg_account_11_pg_9
    _count += cap_pbc_csr_cfg_account_11_pg_10_t::s_get_width(); // cfg_account_11_pg_10
    _count += cap_pbc_csr_cfg_account_11_pg_11_t::s_get_width(); // cfg_account_11_pg_11
    _count += cap_pbc_csr_cfg_account_11_pg_12_t::s_get_width(); // cfg_account_11_pg_12
    _count += cap_pbc_csr_cfg_account_11_pg_13_t::s_get_width(); // cfg_account_11_pg_13
    _count += cap_pbc_csr_cfg_account_11_pg_14_t::s_get_width(); // cfg_account_11_pg_14
    _count += cap_pbc_csr_cfg_account_11_pg_15_t::s_get_width(); // cfg_account_11_pg_15
    _count += cap_pbc_csr_cfg_account_11_pg_16_t::s_get_width(); // cfg_account_11_pg_16
    _count += cap_pbc_csr_cfg_account_11_pg_17_t::s_get_width(); // cfg_account_11_pg_17
    _count += cap_pbc_csr_cfg_account_11_pg_18_t::s_get_width(); // cfg_account_11_pg_18
    _count += cap_pbc_csr_cfg_account_11_pg_19_t::s_get_width(); // cfg_account_11_pg_19
    _count += cap_pbc_csr_cfg_account_11_pg_20_t::s_get_width(); // cfg_account_11_pg_20
    _count += cap_pbc_csr_cfg_account_11_pg_21_t::s_get_width(); // cfg_account_11_pg_21
    _count += cap_pbc_csr_cfg_account_11_pg_22_t::s_get_width(); // cfg_account_11_pg_22
    _count += cap_pbc_csr_cfg_account_11_pg_23_t::s_get_width(); // cfg_account_11_pg_23
    _count += cap_pbc_csr_cfg_account_11_pg_24_t::s_get_width(); // cfg_account_11_pg_24
    _count += cap_pbc_csr_cfg_account_11_pg_25_t::s_get_width(); // cfg_account_11_pg_25
    _count += cap_pbc_csr_cfg_account_11_pg_26_t::s_get_width(); // cfg_account_11_pg_26
    _count += cap_pbc_csr_cfg_account_11_pg_27_t::s_get_width(); // cfg_account_11_pg_27
    _count += cap_pbc_csr_cfg_account_11_pg_28_t::s_get_width(); // cfg_account_11_pg_28
    _count += cap_pbc_csr_cfg_account_11_pg_29_t::s_get_width(); // cfg_account_11_pg_29
    _count += cap_pbc_csr_cfg_account_11_pg_30_t::s_get_width(); // cfg_account_11_pg_30
    _count += cap_pbc_csr_cfg_account_11_pg_31_t::s_get_width(); // cfg_account_11_pg_31
    _count += cap_pbc_csr_cfg_oq_11_t::s_get_width(); // cfg_oq_11
    _count += cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::s_get_width(); // cfg_oq_11_arb_l1_selection
    _count += cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::s_get_width(); // cfg_oq_11_arb_l1_strict
    _count += cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::s_get_width(); // cfg_oq_11_arb_l2_selection
    _count += cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::s_get_width(); // cfg_oq_11_arb_l2_strict
    _count += cap_pbc_csr_sta_ecc_oq_t::s_get_width(); // sta_ecc_oq
    _count += cap_pbc_csr_sta_ecc_pack_t::s_get_width(); // sta_ecc_pack
    _count += cap_pbc_csr_sta_ecc_rwr_t::s_get_width(); // sta_ecc_rwr
    _count += cap_pbc_csr_sta_fc_mgr_0_t::s_get_width(); // sta_fc_mgr_0
    _count += cap_pbc_csr_cfg_fc_mgr_0_t::s_get_width(); // cfg_fc_mgr_0
    _count += cap_pbc_csr_sta_ecc_fc_0_t::s_get_width(); // sta_ecc_fc_0
    _count += cap_pbc_csr_cfg_ll_0_t::s_get_width(); // cfg_ll_0
    _count += cap_pbc_csr_sta_ecc_ll_0_t::s_get_width(); // sta_ecc_ll_0
    _count += cap_pbc_csr_cfg_desc_0_t::s_get_width(); // cfg_desc_0
    _count += cap_pbc_csr_sta_ecc_desc_0_t::s_get_width(); // sta_ecc_desc_0
    _count += cap_pbc_csr_sta_fc_mgr_1_t::s_get_width(); // sta_fc_mgr_1
    _count += cap_pbc_csr_cfg_fc_mgr_1_t::s_get_width(); // cfg_fc_mgr_1
    _count += cap_pbc_csr_sta_ecc_fc_1_t::s_get_width(); // sta_ecc_fc_1
    _count += cap_pbc_csr_cfg_ll_1_t::s_get_width(); // cfg_ll_1
    _count += cap_pbc_csr_sta_ecc_ll_1_t::s_get_width(); // sta_ecc_ll_1
    _count += cap_pbc_csr_cfg_desc_1_t::s_get_width(); // cfg_desc_1
    _count += cap_pbc_csr_sta_ecc_desc_1_t::s_get_width(); // sta_ecc_desc_1
    _count += cap_pbc_csr_cfg_gc_t::s_get_width(); // cfg_gc
    _count += cap_pbc_csr_cfg_rc_t::s_get_width(); // cfg_rc
    _count += cap_pbc_csr_sta_rc_t::s_get_width(); // sta_rc
    _count += cap_pbc_csr_cfg_sched_t::s_get_width(); // cfg_sched
    _count += cap_pbc_csr_sta_sched_t::s_get_width(); // sta_sched
    _count += cap_pbc_csr_cfg_island_control_t::s_get_width(); // cfg_island_control
    _count += cap_pbc_csr_cfg_rpl_t::s_get_width(); // cfg_rpl
    _count += cap_pbc_csr_cfg_parser0_t::s_get_width(); // cfg_parser0
    _count += cap_pbc_csr_cfg_parser1_t::s_get_width(); // cfg_parser1
    _count += cap_pbc_csr_cfg_parser2_t::s_get_width(); // cfg_parser2
    _count += cap_pbc_csr_cfg_parser3_t::s_get_width(); // cfg_parser3
    _count += cap_pbc_csr_cfg_parser4_t::s_get_width(); // cfg_parser4
    _count += cap_pbc_csr_cfg_parser5_t::s_get_width(); // cfg_parser5
    _count += cap_pbc_csr_cfg_parser6_t::s_get_width(); // cfg_parser6
    _count += cap_pbc_csr_cfg_parser7_t::s_get_width(); // cfg_parser7
    _count += cap_pbc_csr_cfg_parser8_t::s_get_width(); // cfg_parser8
    _count += (cap_pbc_csr_cnt_flits_t::s_get_width() * 12); // cnt_flits
    _count += (cap_pbc_csr_cnt_write_error_t::s_get_width() * 12); // cnt_write_error
    _count += (cap_pbc_csr_sta_oq_t::s_get_width() * 12); // sta_oq
    _count += cap_pbc_csr_sta_oq_12_t::s_get_width(); // sta_oq_12
    _count += cap_pbc_csr_cfg_dhs_t::s_get_width(); // cfg_dhs
    _count += cap_pbc_csr_cfg_debug_port_t::s_get_width(); // cfg_debug_port
    _count += cap_pbc_csr_cfg_spare_t::s_get_width(); // cfg_spare
    _count += cap_pbc_csr_sta_ecc_sideband_t::s_get_width(); // sta_ecc_sideband
    _count += cap_pbc_csr_sta_rpl_err_t::s_get_width(); // sta_rpl_err
    _count += cap_pbc_csr_cfg_tail_drop_t::s_get_width(); // cfg_tail_drop
    _count += cap_pbc_csr_cfg_src_port_to_lif_map_t::s_get_width(); // cfg_src_port_to_lif_map
    _count += cap_pbc_csr_dhs_oq_0_t::s_get_width(); // dhs_oq_0
    _count += cap_pbc_csr_dhs_oq_1_t::s_get_width(); // dhs_oq_1
    _count += cap_pbc_csr_dhs_oq_2_t::s_get_width(); // dhs_oq_2
    _count += cap_pbc_csr_dhs_oq_3_t::s_get_width(); // dhs_oq_3
    _count += cap_pbc_csr_dhs_oq_4_t::s_get_width(); // dhs_oq_4
    _count += cap_pbc_csr_dhs_oq_5_t::s_get_width(); // dhs_oq_5
    _count += cap_pbc_csr_dhs_oq_6_t::s_get_width(); // dhs_oq_6
    _count += cap_pbc_csr_dhs_oq_7_t::s_get_width(); // dhs_oq_7
    _count += cap_pbc_csr_dhs_oq_8_t::s_get_width(); // dhs_oq_8
    _count += cap_pbc_csr_dhs_oq_9_t::s_get_width(); // dhs_oq_9
    _count += cap_pbc_csr_dhs_oq_10_t::s_get_width(); // dhs_oq_10
    _count += cap_pbc_csr_dhs_oq_11_t::s_get_width(); // dhs_oq_11
    _count += cap_pbc_csr_dhs_fc_0_t::s_get_width(); // dhs_fc_0
    _count += cap_pbc_csr_dhs_ll_0_t::s_get_width(); // dhs_ll_0
    _count += cap_pbc_csr_dhs_desc_0_t::s_get_width(); // dhs_desc_0
    _count += cap_pbc_csr_dhs_fc_1_t::s_get_width(); // dhs_fc_1
    _count += cap_pbc_csr_dhs_ll_1_t::s_get_width(); // dhs_ll_1
    _count += cap_pbc_csr_dhs_desc_1_t::s_get_width(); // dhs_desc_1
    _count += cap_pbc_csr_dhs_gc_t::s_get_width(); // dhs_gc
    _count += cap_pbc_csr_dhs_rc_t::s_get_width(); // dhs_rc
    _count += cap_pbc_csr_dhs_sched_t::s_get_width(); // dhs_sched
    return _count;
}

void cap_pbc_csr_dhs_sched_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // current_credit
    int_var__current_credit = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< current_credit_cpp_int_t >()  ;
    _count += 32;
    // quanta
    int_var__quanta = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< quanta_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_dhs_sched_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_rc_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // count0
    int_var__count0 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count0_cpp_int_t >()  ;
    _count += 3;
    // count1
    int_var__count1 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count1_cpp_int_t >()  ;
    _count += 3;
    // count2
    int_var__count2 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count2_cpp_int_t >()  ;
    _count += 3;
    // count3
    int_var__count3 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count3_cpp_int_t >()  ;
    _count += 3;
    // count4
    int_var__count4 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count4_cpp_int_t >()  ;
    _count += 3;
    // count5
    int_var__count5 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count5_cpp_int_t >()  ;
    _count += 3;
    // count6
    int_var__count6 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count6_cpp_int_t >()  ;
    _count += 3;
    // count7
    int_var__count7 = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< count7_cpp_int_t >()  ;
    _count += 3;
}

void cap_pbc_csr_dhs_rc_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_gc_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_gc_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_desc_1_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // src_port
    int_var__src_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< src_port_cpp_int_t >()  ;
    _count += 4;
    // refcount
    int_var__refcount = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< refcount_cpp_int_t >()  ;
    _count += 3;
    // input_queue
    int_var__input_queue = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< input_queue_cpp_int_t >()  ;
    _count += 3;
    // eop_pack
    int_var__eop_pack = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< eop_pack_cpp_int_t >()  ;
    _count += 5;
    // err_pack
    int_var__err_pack = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< err_pack_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_dhs_desc_1_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_ll_1_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
    // eop
    int_var__eop = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< eop_cpp_int_t >()  ;
    _count += 1;
    // full
    int_var__full = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< full_cpp_int_t >()  ;
    _count += 1;
    // ge256B
    int_var__ge256B = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ge256B_cpp_int_t >()  ;
    _count += 1;
    // err
    int_var__err = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< err_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_dhs_ll_1_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_fc_1_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // cell0
    int_var__cell0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< cell0_cpp_int_t >()  ;
    _count += 14;
    // cell1
    int_var__cell1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< cell1_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_fc_1_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_desc_0_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // src_port
    int_var__src_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< src_port_cpp_int_t >()  ;
    _count += 4;
    // refcount
    int_var__refcount = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< refcount_cpp_int_t >()  ;
    _count += 3;
    // input_queue
    int_var__input_queue = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< input_queue_cpp_int_t >()  ;
    _count += 3;
    // eop_pack
    int_var__eop_pack = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< eop_pack_cpp_int_t >()  ;
    _count += 5;
    // err_pack
    int_var__err_pack = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< err_pack_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_dhs_desc_0_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_ll_0_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
    // eop
    int_var__eop = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< eop_cpp_int_t >()  ;
    _count += 1;
    // full
    int_var__full = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< full_cpp_int_t >()  ;
    _count += 1;
    // ge256B
    int_var__ge256B = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ge256B_cpp_int_t >()  ;
    _count += 1;
    // err
    int_var__err = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< err_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_dhs_ll_0_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_fc_0_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // cell0
    int_var__cell0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< cell0_cpp_int_t >()  ;
    _count += 14;
    // cell1
    int_var__cell1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< cell1_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_fc_0_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_11_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 13 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 13;
    // pack_info
    int_var__pack_info = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pack_info_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_dhs_oq_11_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_10_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
    // rpl_ptr
    int_var__rpl_ptr = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< rpl_ptr_cpp_int_t >()  ;
    _count += 16;
    // rpl_en
    int_var__rpl_en = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rpl_en_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_dhs_oq_10_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_9_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_9_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_8_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_8_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_7_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_7_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_6_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_6_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_5_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_5_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_4_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_4_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_3_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_3_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_2_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_2_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_1_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_1_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_dhs_oq_0_entry_t::all(const cpp_int & _val) {
    int _count = 0;

    // next_cell
    int_var__next_cell = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< next_cell_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_dhs_oq_0_t::all(const cpp_int & _val) {
    int _count = 0;

    entry.all( hlp.get_slc(_val, _count, _count -1 + entry.get_width() )); // entry
    _count += entry.get_width();
}

void cap_pbc_csr_cfg_src_port_to_lif_map_t::all(const cpp_int & _val) {
    int _count = 0;

    // entry_0
    int_var__entry_0 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_0_cpp_int_t >()  ;
    _count += 11;
    // entry_1
    int_var__entry_1 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_1_cpp_int_t >()  ;
    _count += 11;
    // entry_2
    int_var__entry_2 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_2_cpp_int_t >()  ;
    _count += 11;
    // entry_3
    int_var__entry_3 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_3_cpp_int_t >()  ;
    _count += 11;
    // entry_4
    int_var__entry_4 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_4_cpp_int_t >()  ;
    _count += 11;
    // entry_5
    int_var__entry_5 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_5_cpp_int_t >()  ;
    _count += 11;
    // entry_6
    int_var__entry_6 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_6_cpp_int_t >()  ;
    _count += 11;
    // entry_7
    int_var__entry_7 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_7_cpp_int_t >()  ;
    _count += 11;
    // entry_8
    int_var__entry_8 = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< entry_8_cpp_int_t >()  ;
    _count += 11;
}

void cap_pbc_csr_cfg_tail_drop_t::all(const cpp_int & _val) {
    int _count = 0;

    // cpu_threshold
    int_var__cpu_threshold = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< cpu_threshold_cpp_int_t >()  ;
    _count += 16;
    // span_threshold
    int_var__span_threshold = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< span_threshold_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_sta_rpl_err_t::all(const cpp_int & _val) {
    int _count = 0;

    // rid
    int_var__rid = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< rid_cpp_int_t >()  ;
    _count += 5;
    // rresp
    int_var__rresp = hlp.get_slc(_val, _count, _count -1 + 2 ).convert_to< rresp_cpp_int_t >()  ;
    _count += 2;
}

void cap_pbc_csr_sta_ecc_sideband_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 7;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< addr_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_spare_t::all(const cpp_int & _val) {
    int _count = 0;

    // data
    int_var__data = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< data_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_debug_port_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // select
    int_var__select = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< select_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_dhs_t::all(const cpp_int & _val) {
    int _count = 0;

    // address
    int_var__address = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< address_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_sta_oq_12_t::all(const cpp_int & _val) {
    int _count = 0;

    // depth_value
    int_var__depth_value = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< depth_value_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_sta_oq_t::all(const cpp_int & _val) {
    int _count = 0;

    // depth_value
    int_var__depth_value = hlp.get_slc(_val, _count, _count -1 + 512 ).convert_to< depth_value_cpp_int_t >()  ;
    _count += 512;
}

void cap_pbc_csr_cnt_write_error_t::all(const cpp_int & _val) {
    int _count = 0;

    // discarded
    int_var__discarded = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< discarded_cpp_int_t >()  ;
    _count += 16;
    // admitted
    int_var__admitted = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< admitted_cpp_int_t >()  ;
    _count += 16;
    // intrinsic_drop
    int_var__intrinsic_drop = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< intrinsic_drop_cpp_int_t >()  ;
    _count += 16;
    // out_of_cells
    int_var__out_of_cells = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< out_of_cells_cpp_int_t >()  ;
    _count += 8;
    // out_of_credit
    int_var__out_of_credit = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< out_of_credit_cpp_int_t >()  ;
    _count += 8;
    // truncation
    int_var__truncation = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< truncation_cpp_int_t >()  ;
    _count += 8;
    // port_disabled
    int_var__port_disabled = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< port_disabled_cpp_int_t >()  ;
    _count += 8;
    // out_of_cells1
    int_var__out_of_cells1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< out_of_cells1_cpp_int_t >()  ;
    _count += 16;
    // tail_drop_cpu
    int_var__tail_drop_cpu = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< tail_drop_cpu_cpp_int_t >()  ;
    _count += 16;
    // tail_drop_span
    int_var__tail_drop_span = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< tail_drop_span_cpp_int_t >()  ;
    _count += 16;
    // enqueue
    int_var__enqueue = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< enqueue_cpp_int_t >()  ;
    _count += 8;
}

void cap_pbc_csr_cnt_flits_t::all(const cpp_int & _val) {
    int _count = 0;

    // sop_in
    int_var__sop_in = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< sop_in_cpp_int_t >()  ;
    _count += 16;
    // eop_in
    int_var__eop_in = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< eop_in_cpp_int_t >()  ;
    _count += 16;
    // sop_out
    int_var__sop_out = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< sop_out_cpp_int_t >()  ;
    _count += 16;
    // eop_out
    int_var__eop_out = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< eop_out_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_parser8_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser7_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser6_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser5_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser4_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser3_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser2_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser1_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_parser0_t::all(const cpp_int & _val) {
    int _count = 0;

    // dot1q_type
    int_var__dot1q_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< dot1q_type_cpp_int_t >()  ;
    _count += 16;
    // ipv4_type
    int_var__ipv4_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv4_type_cpp_int_t >()  ;
    _count += 16;
    // ipv6_type
    int_var__ipv6_type = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< ipv6_type_cpp_int_t >()  ;
    _count += 16;
    // use_ip
    int_var__use_ip = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_ip_cpp_int_t >()  ;
    _count += 1;
    // use_dot1q
    int_var__use_dot1q = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< use_dot1q_cpp_int_t >()  ;
    _count += 1;
    // default_cos
    int_var__default_cos = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< default_cos_cpp_int_t >()  ;
    _count += 3;
    // default_port
    int_var__default_port = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< default_port_cpp_int_t >()  ;
    _count += 4;
    // oq_map
    int_var__oq_map = hlp.get_slc(_val, _count, _count -1 + 40 ).convert_to< oq_map_cpp_int_t >()  ;
    _count += 40;
    // dscp_map
    int_var__dscp_map = hlp.get_slc(_val, _count, _count -1 + 192 ).convert_to< dscp_map_cpp_int_t >()  ;
    _count += 192;
}

void cap_pbc_csr_cfg_rpl_t::all(const cpp_int & _val) {
    int _count = 0;

    // base
    int_var__base = hlp.get_slc(_val, _count, _count -1 + 27 ).convert_to< base_cpp_int_t >()  ;
    _count += 27;
    // token_size
    int_var__token_size = hlp.get_slc(_val, _count, _count -1 + 2 ).convert_to< token_size_cpp_int_t >()  ;
    _count += 2;
}

void cap_pbc_csr_cfg_island_control_t::all(const cpp_int & _val) {
    int _count = 0;

    // map
    int_var__map = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< map_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_sched_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_uncorrectable
    int_var__ecc_uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // ecc_correctable
    int_var__ecc_correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_correctable_cpp_int_t >()  ;
    _count += 1;
    // ecc_syndrome
    int_var__ecc_syndrome = hlp.get_slc(_val, _count, _count -1 + 8 ).convert_to< ecc_syndrome_cpp_int_t >()  ;
    _count += 8;
    // ecc_addr
    int_var__ecc_addr = hlp.get_slc(_val, _count, _count -1 + 9 ).convert_to< ecc_addr_cpp_int_t >()  ;
    _count += 9;
}

void cap_pbc_csr_cfg_sched_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable_wrr
    int_var__enable_wrr = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_wrr_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // dhs_selection
    int_var__dhs_selection = hlp.get_slc(_val, _count, _count -1 + 2 ).convert_to< dhs_selection_cpp_int_t >()  ;
    _count += 2;
    // timer
    int_var__timer = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< timer_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_rc_t::all(const cpp_int & _val) {
    int _count = 0;

    // init_done
    int_var__init_done = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_done_cpp_int_t >()  ;
    _count += 1;
    // ecc_uncorrectable
    int_var__ecc_uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // ecc_correctable
    int_var__ecc_correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_correctable_cpp_int_t >()  ;
    _count += 1;
    // ecc_syndrome
    int_var__ecc_syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< ecc_syndrome_cpp_int_t >()  ;
    _count += 6;
    // ecc_addr
    int_var__ecc_addr = hlp.get_slc(_val, _count, _count -1 + 11 ).convert_to< ecc_addr_cpp_int_t >()  ;
    _count += 11;
}

void cap_pbc_csr_cfg_rc_t::all(const cpp_int & _val) {
    int _count = 0;

    // init_start
    int_var__init_start = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_start_cpp_int_t >()  ;
    _count += 1;
    // init_reset
    int_var__init_reset = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_reset_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_gc_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_desc_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< addr_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_desc_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_ll_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< addr_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_ll_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_fc_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 7;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< addr_cpp_int_t >()  ;
    _count += 12;
}

void cap_pbc_csr_cfg_fc_mgr_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // init_start
    int_var__init_start = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_start_cpp_int_t >()  ;
    _count += 1;
    // init_reset
    int_var__init_reset = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_reset_cpp_int_t >()  ;
    _count += 1;
    // max_row
    int_var__max_row = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< max_row_cpp_int_t >()  ;
    _count += 12;
    // min_cell
    int_var__min_cell = hlp.get_slc(_val, _count, _count -1 + 13 ).convert_to< min_cell_cpp_int_t >()  ;
    _count += 13;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_fc_mgr_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // cells_available
    int_var__cells_available = hlp.get_slc(_val, _count, _count -1 + 13 ).convert_to< cells_available_cpp_int_t >()  ;
    _count += 13;
    // init_done
    int_var__init_done = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_done_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_desc_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< addr_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_desc_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_ll_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< addr_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_ll_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_fc_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 7;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< addr_cpp_int_t >()  ;
    _count += 12;
}

void cap_pbc_csr_cfg_fc_mgr_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // init_start
    int_var__init_start = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_start_cpp_int_t >()  ;
    _count += 1;
    // init_reset
    int_var__init_reset = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_reset_cpp_int_t >()  ;
    _count += 1;
    // max_row
    int_var__max_row = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< max_row_cpp_int_t >()  ;
    _count += 12;
    // min_cell
    int_var__min_cell = hlp.get_slc(_val, _count, _count -1 + 13 ).convert_to< min_cell_cpp_int_t >()  ;
    _count += 13;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_fc_mgr_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // cells_available
    int_var__cells_available = hlp.get_slc(_val, _count, _count -1 + 13 ).convert_to< cells_available_cpp_int_t >()  ;
    _count += 13;
    // init_done
    int_var__init_done = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< init_done_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_sta_ecc_rwr_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 18 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 18;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 15 ).convert_to< addr_cpp_int_t >()  ;
    _count += 15;
}

void cap_pbc_csr_sta_ecc_pack_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 17 ).convert_to< addr_cpp_int_t >()  ;
    _count += 17;
}

void cap_pbc_csr_sta_ecc_oq_t::all(const cpp_int & _val) {
    int _count = 0;

    // uncorrectable
    int_var__uncorrectable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< uncorrectable_cpp_int_t >()  ;
    _count += 1;
    // correctable
    int_var__correctable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< correctable_cpp_int_t >()  ;
    _count += 1;
    // syndrome
    int_var__syndrome = hlp.get_slc(_val, _count, _count -1 + 6 ).convert_to< syndrome_cpp_int_t >()  ;
    _count += 6;
    // addr
    int_var__addr = hlp.get_slc(_val, _count, _count -1 + 18 ).convert_to< addr_cpp_int_t >()  ;
    _count += 18;
}

void cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // packing_msb
    int_var__packing_msb = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_msb_cpp_int_t >()  ;
    _count += 1;
    // dhs_selection
    int_var__dhs_selection = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< dhs_selection_cpp_int_t >()  ;
    _count += 4;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_11_pg_31_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_30_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_29_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_28_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_27_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_26_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_25_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_24_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_23_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_22_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_21_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_20_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_19_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_18_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_17_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_16_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_15_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_14_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_13_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_12_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_11_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
    // pg8
    int_var__pg8 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg8_cpp_int_t >()  ;
    _count += 5;
    // pg9
    int_var__pg9 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg9_cpp_int_t >()  ;
    _count += 5;
    // pg10
    int_var__pg10 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg10_cpp_int_t >()  ;
    _count += 5;
    // pg11
    int_var__pg11 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg11_cpp_int_t >()  ;
    _count += 5;
    // pg12
    int_var__pg12 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg12_cpp_int_t >()  ;
    _count += 5;
    // pg13
    int_var__pg13 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg13_cpp_int_t >()  ;
    _count += 5;
    // pg14
    int_var__pg14 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg14_cpp_int_t >()  ;
    _count += 5;
    // pg15
    int_var__pg15 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg15_cpp_int_t >()  ;
    _count += 5;
    // pg16
    int_var__pg16 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg16_cpp_int_t >()  ;
    _count += 5;
    // pg17
    int_var__pg17 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg17_cpp_int_t >()  ;
    _count += 5;
    // pg18
    int_var__pg18 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg18_cpp_int_t >()  ;
    _count += 5;
    // pg19
    int_var__pg19 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg19_cpp_int_t >()  ;
    _count += 5;
    // pg20
    int_var__pg20 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg20_cpp_int_t >()  ;
    _count += 5;
    // pg21
    int_var__pg21 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg21_cpp_int_t >()  ;
    _count += 5;
    // pg22
    int_var__pg22 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg22_cpp_int_t >()  ;
    _count += 5;
    // pg23
    int_var__pg23 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg23_cpp_int_t >()  ;
    _count += 5;
    // pg24
    int_var__pg24 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg24_cpp_int_t >()  ;
    _count += 5;
    // pg25
    int_var__pg25 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg25_cpp_int_t >()  ;
    _count += 5;
    // pg26
    int_var__pg26 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg26_cpp_int_t >()  ;
    _count += 5;
    // pg27
    int_var__pg27 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg27_cpp_int_t >()  ;
    _count += 5;
    // pg28
    int_var__pg28 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg28_cpp_int_t >()  ;
    _count += 5;
    // pg29
    int_var__pg29 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg29_cpp_int_t >()  ;
    _count += 5;
    // pg30
    int_var__pg30 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg30_cpp_int_t >()  ;
    _count += 5;
    // pg31
    int_var__pg31 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg31_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_11_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
    // occupancy_8
    int_var__occupancy_8 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_8_cpp_int_t >()  ;
    _count += 14;
    // occupancy_9
    int_var__occupancy_9 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_9_cpp_int_t >()  ;
    _count += 14;
    // occupancy_10
    int_var__occupancy_10 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_10_cpp_int_t >()  ;
    _count += 14;
    // occupancy_11
    int_var__occupancy_11 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_11_cpp_int_t >()  ;
    _count += 14;
    // occupancy_12
    int_var__occupancy_12 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_12_cpp_int_t >()  ;
    _count += 14;
    // occupancy_13
    int_var__occupancy_13 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_13_cpp_int_t >()  ;
    _count += 14;
    // occupancy_14
    int_var__occupancy_14 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_14_cpp_int_t >()  ;
    _count += 14;
    // occupancy_15
    int_var__occupancy_15 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_15_cpp_int_t >()  ;
    _count += 14;
    // occupancy_16
    int_var__occupancy_16 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_16_cpp_int_t >()  ;
    _count += 14;
    // occupancy_17
    int_var__occupancy_17 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_17_cpp_int_t >()  ;
    _count += 14;
    // occupancy_18
    int_var__occupancy_18 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_18_cpp_int_t >()  ;
    _count += 14;
    // occupancy_19
    int_var__occupancy_19 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_19_cpp_int_t >()  ;
    _count += 14;
    // occupancy_20
    int_var__occupancy_20 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_20_cpp_int_t >()  ;
    _count += 14;
    // occupancy_21
    int_var__occupancy_21 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_21_cpp_int_t >()  ;
    _count += 14;
    // occupancy_22
    int_var__occupancy_22 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_22_cpp_int_t >()  ;
    _count += 14;
    // occupancy_23
    int_var__occupancy_23 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_23_cpp_int_t >()  ;
    _count += 14;
    // occupancy_24
    int_var__occupancy_24 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_24_cpp_int_t >()  ;
    _count += 14;
    // occupancy_25
    int_var__occupancy_25 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_25_cpp_int_t >()  ;
    _count += 14;
    // occupancy_26
    int_var__occupancy_26 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_26_cpp_int_t >()  ;
    _count += 14;
    // occupancy_27
    int_var__occupancy_27 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_27_cpp_int_t >()  ;
    _count += 14;
    // occupancy_28
    int_var__occupancy_28 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_28_cpp_int_t >()  ;
    _count += 14;
    // occupancy_29
    int_var__occupancy_29 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_29_cpp_int_t >()  ;
    _count += 14;
    // occupancy_30
    int_var__occupancy_30 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_30_cpp_int_t >()  ;
    _count += 14;
    // occupancy_31
    int_var__occupancy_31 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_31_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_11_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 160 ).convert_to< table_cpp_int_t >()  ;
    _count += 160;
}

void cap_pbc_csr_cfg_write_control_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // dhs_selection
    int_var__dhs_selection = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< dhs_selection_cpp_int_t >()  ;
    _count += 3;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_10_pg_31_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_30_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_29_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_28_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_27_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_26_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_25_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_24_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_23_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_22_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_21_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_20_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_19_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_18_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_17_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_16_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_15_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_14_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_13_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_12_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_10_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
    // pg8
    int_var__pg8 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg8_cpp_int_t >()  ;
    _count += 5;
    // pg9
    int_var__pg9 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg9_cpp_int_t >()  ;
    _count += 5;
    // pg10
    int_var__pg10 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg10_cpp_int_t >()  ;
    _count += 5;
    // pg11
    int_var__pg11 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg11_cpp_int_t >()  ;
    _count += 5;
    // pg12
    int_var__pg12 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg12_cpp_int_t >()  ;
    _count += 5;
    // pg13
    int_var__pg13 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg13_cpp_int_t >()  ;
    _count += 5;
    // pg14
    int_var__pg14 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg14_cpp_int_t >()  ;
    _count += 5;
    // pg15
    int_var__pg15 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg15_cpp_int_t >()  ;
    _count += 5;
    // pg16
    int_var__pg16 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg16_cpp_int_t >()  ;
    _count += 5;
    // pg17
    int_var__pg17 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg17_cpp_int_t >()  ;
    _count += 5;
    // pg18
    int_var__pg18 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg18_cpp_int_t >()  ;
    _count += 5;
    // pg19
    int_var__pg19 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg19_cpp_int_t >()  ;
    _count += 5;
    // pg20
    int_var__pg20 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg20_cpp_int_t >()  ;
    _count += 5;
    // pg21
    int_var__pg21 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg21_cpp_int_t >()  ;
    _count += 5;
    // pg22
    int_var__pg22 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg22_cpp_int_t >()  ;
    _count += 5;
    // pg23
    int_var__pg23 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg23_cpp_int_t >()  ;
    _count += 5;
    // pg24
    int_var__pg24 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg24_cpp_int_t >()  ;
    _count += 5;
    // pg25
    int_var__pg25 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg25_cpp_int_t >()  ;
    _count += 5;
    // pg26
    int_var__pg26 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg26_cpp_int_t >()  ;
    _count += 5;
    // pg27
    int_var__pg27 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg27_cpp_int_t >()  ;
    _count += 5;
    // pg28
    int_var__pg28 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg28_cpp_int_t >()  ;
    _count += 5;
    // pg29
    int_var__pg29 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg29_cpp_int_t >()  ;
    _count += 5;
    // pg30
    int_var__pg30 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg30_cpp_int_t >()  ;
    _count += 5;
    // pg31
    int_var__pg31 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg31_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_10_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
    // occupancy_8
    int_var__occupancy_8 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_8_cpp_int_t >()  ;
    _count += 14;
    // occupancy_9
    int_var__occupancy_9 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_9_cpp_int_t >()  ;
    _count += 14;
    // occupancy_10
    int_var__occupancy_10 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_10_cpp_int_t >()  ;
    _count += 14;
    // occupancy_11
    int_var__occupancy_11 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_11_cpp_int_t >()  ;
    _count += 14;
    // occupancy_12
    int_var__occupancy_12 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_12_cpp_int_t >()  ;
    _count += 14;
    // occupancy_13
    int_var__occupancy_13 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_13_cpp_int_t >()  ;
    _count += 14;
    // occupancy_14
    int_var__occupancy_14 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_14_cpp_int_t >()  ;
    _count += 14;
    // occupancy_15
    int_var__occupancy_15 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_15_cpp_int_t >()  ;
    _count += 14;
    // occupancy_16
    int_var__occupancy_16 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_16_cpp_int_t >()  ;
    _count += 14;
    // occupancy_17
    int_var__occupancy_17 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_17_cpp_int_t >()  ;
    _count += 14;
    // occupancy_18
    int_var__occupancy_18 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_18_cpp_int_t >()  ;
    _count += 14;
    // occupancy_19
    int_var__occupancy_19 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_19_cpp_int_t >()  ;
    _count += 14;
    // occupancy_20
    int_var__occupancy_20 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_20_cpp_int_t >()  ;
    _count += 14;
    // occupancy_21
    int_var__occupancy_21 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_21_cpp_int_t >()  ;
    _count += 14;
    // occupancy_22
    int_var__occupancy_22 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_22_cpp_int_t >()  ;
    _count += 14;
    // occupancy_23
    int_var__occupancy_23 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_23_cpp_int_t >()  ;
    _count += 14;
    // occupancy_24
    int_var__occupancy_24 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_24_cpp_int_t >()  ;
    _count += 14;
    // occupancy_25
    int_var__occupancy_25 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_25_cpp_int_t >()  ;
    _count += 14;
    // occupancy_26
    int_var__occupancy_26 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_26_cpp_int_t >()  ;
    _count += 14;
    // occupancy_27
    int_var__occupancy_27 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_27_cpp_int_t >()  ;
    _count += 14;
    // occupancy_28
    int_var__occupancy_28 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_28_cpp_int_t >()  ;
    _count += 14;
    // occupancy_29
    int_var__occupancy_29 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_29_cpp_int_t >()  ;
    _count += 14;
    // occupancy_30
    int_var__occupancy_30 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_30_cpp_int_t >()  ;
    _count += 14;
    // occupancy_31
    int_var__occupancy_31 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_31_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_10_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 160 ).convert_to< table_cpp_int_t >()  ;
    _count += 160;
}

void cap_pbc_csr_cfg_write_control_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_9_pg_15_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_14_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_13_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_12_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_11_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_10_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_9_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
    // pg8
    int_var__pg8 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg8_cpp_int_t >()  ;
    _count += 5;
    // pg9
    int_var__pg9 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg9_cpp_int_t >()  ;
    _count += 5;
    // pg10
    int_var__pg10 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg10_cpp_int_t >()  ;
    _count += 5;
    // pg11
    int_var__pg11 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg11_cpp_int_t >()  ;
    _count += 5;
    // pg12
    int_var__pg12 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg12_cpp_int_t >()  ;
    _count += 5;
    // pg13
    int_var__pg13 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg13_cpp_int_t >()  ;
    _count += 5;
    // pg14
    int_var__pg14 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg14_cpp_int_t >()  ;
    _count += 5;
    // pg15
    int_var__pg15 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg15_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_9_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
    // occupancy_8
    int_var__occupancy_8 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_8_cpp_int_t >()  ;
    _count += 14;
    // occupancy_9
    int_var__occupancy_9 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_9_cpp_int_t >()  ;
    _count += 14;
    // occupancy_10
    int_var__occupancy_10 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_10_cpp_int_t >()  ;
    _count += 14;
    // occupancy_11
    int_var__occupancy_11 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_11_cpp_int_t >()  ;
    _count += 14;
    // occupancy_12
    int_var__occupancy_12 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_12_cpp_int_t >()  ;
    _count += 14;
    // occupancy_13
    int_var__occupancy_13 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_13_cpp_int_t >()  ;
    _count += 14;
    // occupancy_14
    int_var__occupancy_14 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_14_cpp_int_t >()  ;
    _count += 14;
    // occupancy_15
    int_var__occupancy_15 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_15_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_9_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 64 ).convert_to< table_cpp_int_t >()  ;
    _count += 64;
}

void cap_pbc_csr_cfg_write_control_9_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_8_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_8_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_8_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_8_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_8_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_7_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_7_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_7_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_7_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_6_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_6_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_6_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_6_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_5_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_5_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_5_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_5_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_4_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_4_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_4_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_4_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_3_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_3_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_3_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_3_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_2_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_2_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_2_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_2_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_1_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_1_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_1_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_1_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< priority_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 16;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 16;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 16;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 16 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 16;
}

void cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::all(const cpp_int & _val) {
    int _count = 0;

    // priority
    int_var__priority = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< priority_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::all(const cpp_int & _val) {
    int _count = 0;

    // node_0
    int_var__node_0 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_0_cpp_int_t >()  ;
    _count += 32;
    // node_1
    int_var__node_1 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_1_cpp_int_t >()  ;
    _count += 32;
    // node_2
    int_var__node_2 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_2_cpp_int_t >()  ;
    _count += 32;
    // node_3
    int_var__node_3 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_3_cpp_int_t >()  ;
    _count += 32;
    // node_4
    int_var__node_4 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_4_cpp_int_t >()  ;
    _count += 32;
    // node_5
    int_var__node_5 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_5_cpp_int_t >()  ;
    _count += 32;
    // node_6
    int_var__node_6 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_6_cpp_int_t >()  ;
    _count += 32;
    // node_7
    int_var__node_7 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_7_cpp_int_t >()  ;
    _count += 32;
    // node_8
    int_var__node_8 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_8_cpp_int_t >()  ;
    _count += 32;
    // node_9
    int_var__node_9 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_9_cpp_int_t >()  ;
    _count += 32;
    // node_10
    int_var__node_10 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_10_cpp_int_t >()  ;
    _count += 32;
    // node_11
    int_var__node_11 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_11_cpp_int_t >()  ;
    _count += 32;
    // node_12
    int_var__node_12 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_12_cpp_int_t >()  ;
    _count += 32;
    // node_13
    int_var__node_13 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_13_cpp_int_t >()  ;
    _count += 32;
    // node_14
    int_var__node_14 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_14_cpp_int_t >()  ;
    _count += 32;
    // node_15
    int_var__node_15 = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< node_15_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_cfg_oq_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_det
    int_var__ecc_disable_det = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_det_cpp_int_t >()  ;
    _count += 1;
    // ecc_disable_cor
    int_var__ecc_disable_cor = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< ecc_disable_cor_cpp_int_t >()  ;
    _count += 1;
    // dhs_eccbypass
    int_var__dhs_eccbypass = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< dhs_eccbypass_cpp_int_t >()  ;
    _count += 1;
    // num_hdr_bytes
    int_var__num_hdr_bytes = hlp.get_slc(_val, _count, _count -1 + 7 ).convert_to< num_hdr_bytes_cpp_int_t >()  ;
    _count += 7;
    // rewrite_enable
    int_var__rewrite_enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_enable_cpp_int_t >()  ;
    _count += 1;
    // ipg_bytes
    int_var__ipg_bytes = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< ipg_bytes_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_0_pg_7_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_6_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_5_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_4_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_3_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_2_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_1_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_pg_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // reserved_min
    int_var__reserved_min = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< reserved_min_cpp_int_t >()  ;
    _count += 10;
    // xon_threshold
    int_var__xon_threshold = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< xon_threshold_cpp_int_t >()  ;
    _count += 14;
    // headroom
    int_var__headroom = hlp.get_slc(_val, _count, _count -1 + 12 ).convert_to< headroom_cpp_int_t >()  ;
    _count += 12;
    // low_limit
    int_var__low_limit = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< low_limit_cpp_int_t >()  ;
    _count += 14;
    // alpha
    int_var__alpha = hlp.get_slc(_val, _count, _count -1 + 4 ).convert_to< alpha_cpp_int_t >()  ;
    _count += 4;
}

void cap_pbc_csr_cfg_account_0_mtu_table_t::all(const cpp_int & _val) {
    int _count = 0;

    // pg0
    int_var__pg0 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg0_cpp_int_t >()  ;
    _count += 5;
    // pg1
    int_var__pg1 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg1_cpp_int_t >()  ;
    _count += 5;
    // pg2
    int_var__pg2 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg2_cpp_int_t >()  ;
    _count += 5;
    // pg3
    int_var__pg3 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg3_cpp_int_t >()  ;
    _count += 5;
    // pg4
    int_var__pg4 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg4_cpp_int_t >()  ;
    _count += 5;
    // pg5
    int_var__pg5 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg5_cpp_int_t >()  ;
    _count += 5;
    // pg6
    int_var__pg6 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg6_cpp_int_t >()  ;
    _count += 5;
    // pg7
    int_var__pg7 = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< pg7_cpp_int_t >()  ;
    _count += 5;
}

void cap_pbc_csr_cfg_account_0_pause_timer_t::all(const cpp_int & _val) {
    int _count = 0;

    // xoff_timeout
    int_var__xoff_timeout = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< xoff_timeout_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_sta_account_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // occupancy_0
    int_var__occupancy_0 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_0_cpp_int_t >()  ;
    _count += 14;
    // occupancy_1
    int_var__occupancy_1 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_1_cpp_int_t >()  ;
    _count += 14;
    // occupancy_2
    int_var__occupancy_2 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_2_cpp_int_t >()  ;
    _count += 14;
    // occupancy_3
    int_var__occupancy_3 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_3_cpp_int_t >()  ;
    _count += 14;
    // occupancy_4
    int_var__occupancy_4 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_4_cpp_int_t >()  ;
    _count += 14;
    // occupancy_5
    int_var__occupancy_5 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_5_cpp_int_t >()  ;
    _count += 14;
    // occupancy_6
    int_var__occupancy_6 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_6_cpp_int_t >()  ;
    _count += 14;
    // occupancy_7
    int_var__occupancy_7 = hlp.get_slc(_val, _count, _count -1 + 14 ).convert_to< occupancy_7_cpp_int_t >()  ;
    _count += 14;
}

void cap_pbc_csr_cfg_account_0_tc_to_pg_t::all(const cpp_int & _val) {
    int _count = 0;

    // table
    int_var__table = hlp.get_slc(_val, _count, _count -1 + 24 ).convert_to< table_cpp_int_t >()  ;
    _count += 24;
}

void cap_pbc_csr_cfg_write_control_0_t::all(const cpp_int & _val) {
    int _count = 0;

    // enable
    int_var__enable = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< enable_cpp_int_t >()  ;
    _count += 1;
    // cut_thru
    int_var__cut_thru = hlp.get_slc(_val, _count, _count -1 + 5 ).convert_to< cut_thru_cpp_int_t >()  ;
    _count += 5;
    // packing
    int_var__packing = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_cpp_int_t >()  ;
    _count += 1;
    // packing_same_pg
    int_var__packing_same_pg = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< packing_same_pg_cpp_int_t >()  ;
    _count += 1;
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = hlp.get_slc(_val, _count, _count -1 + 10 ).convert_to< packing_timeout_cycles_cpp_int_t >()  ;
    _count += 10;
    // rewrite
    int_var__rewrite = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< rewrite_cpp_int_t >()  ;
    _count += 1;
    // rate_limiter
    int_var__rate_limiter = hlp.get_slc(_val, _count, _count -1 + 3 ).convert_to< rate_limiter_cpp_int_t >()  ;
    _count += 3;
    // drop_on_error
    int_var__drop_on_error = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< drop_on_error_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_cfg_pbc_control_t::all(const cpp_int & _val) {
    int _count = 0;

    // sw_reset
    int_var__sw_reset = hlp.get_slc(_val, _count, _count -1 + 1 ).convert_to< sw_reset_cpp_int_t >()  ;
    _count += 1;
}

void cap_pbc_csr_base_t::all(const cpp_int & _val) {
    int _count = 0;

    // scratch_reg
    int_var__scratch_reg = hlp.get_slc(_val, _count, _count -1 + 32 ).convert_to< scratch_reg_cpp_int_t >()  ;
    _count += 32;
}

void cap_pbc_csr_t::all(const cpp_int & _val) {
    int _count = 0;

    base.all( hlp.get_slc(_val, _count, _count -1 + base.get_width() )); // base
    _count += base.get_width();
    cfg_pbc_control.all( hlp.get_slc(_val, _count, _count -1 + cfg_pbc_control.get_width() )); // cfg_pbc_control
    _count += cfg_pbc_control.get_width();
    cfg_write_control_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_0.get_width() )); // cfg_write_control_0
    _count += cfg_write_control_0.get_width();
    cfg_account_0_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_tc_to_pg.get_width() )); // cfg_account_0_tc_to_pg
    _count += cfg_account_0_tc_to_pg.get_width();
    sta_account_0.all( hlp.get_slc(_val, _count, _count -1 + sta_account_0.get_width() )); // sta_account_0
    _count += sta_account_0.get_width();
    cfg_account_0_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pause_timer.get_width() )); // cfg_account_0_pause_timer
    _count += cfg_account_0_pause_timer.get_width();
    cfg_account_0_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_mtu_table.get_width() )); // cfg_account_0_mtu_table
    _count += cfg_account_0_mtu_table.get_width();
    cfg_account_0_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_0.get_width() )); // cfg_account_0_pg_0
    _count += cfg_account_0_pg_0.get_width();
    cfg_account_0_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_1.get_width() )); // cfg_account_0_pg_1
    _count += cfg_account_0_pg_1.get_width();
    cfg_account_0_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_2.get_width() )); // cfg_account_0_pg_2
    _count += cfg_account_0_pg_2.get_width();
    cfg_account_0_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_3.get_width() )); // cfg_account_0_pg_3
    _count += cfg_account_0_pg_3.get_width();
    cfg_account_0_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_4.get_width() )); // cfg_account_0_pg_4
    _count += cfg_account_0_pg_4.get_width();
    cfg_account_0_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_5.get_width() )); // cfg_account_0_pg_5
    _count += cfg_account_0_pg_5.get_width();
    cfg_account_0_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_6.get_width() )); // cfg_account_0_pg_6
    _count += cfg_account_0_pg_6.get_width();
    cfg_account_0_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_0_pg_7.get_width() )); // cfg_account_0_pg_7
    _count += cfg_account_0_pg_7.get_width();
    cfg_oq_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_0.get_width() )); // cfg_oq_0
    _count += cfg_oq_0.get_width();
    cfg_oq_0_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_0_arb_l1_selection.get_width() )); // cfg_oq_0_arb_l1_selection
    _count += cfg_oq_0_arb_l1_selection.get_width();
    cfg_oq_0_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_0_arb_l1_strict.get_width() )); // cfg_oq_0_arb_l1_strict
    _count += cfg_oq_0_arb_l1_strict.get_width();
    cfg_oq_0_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_0_arb_l2_selection.get_width() )); // cfg_oq_0_arb_l2_selection
    _count += cfg_oq_0_arb_l2_selection.get_width();
    cfg_oq_0_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_0_arb_l2_strict.get_width() )); // cfg_oq_0_arb_l2_strict
    _count += cfg_oq_0_arb_l2_strict.get_width();
    cfg_write_control_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_1.get_width() )); // cfg_write_control_1
    _count += cfg_write_control_1.get_width();
    cfg_account_1_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_tc_to_pg.get_width() )); // cfg_account_1_tc_to_pg
    _count += cfg_account_1_tc_to_pg.get_width();
    sta_account_1.all( hlp.get_slc(_val, _count, _count -1 + sta_account_1.get_width() )); // sta_account_1
    _count += sta_account_1.get_width();
    cfg_account_1_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pause_timer.get_width() )); // cfg_account_1_pause_timer
    _count += cfg_account_1_pause_timer.get_width();
    cfg_account_1_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_mtu_table.get_width() )); // cfg_account_1_mtu_table
    _count += cfg_account_1_mtu_table.get_width();
    cfg_account_1_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_0.get_width() )); // cfg_account_1_pg_0
    _count += cfg_account_1_pg_0.get_width();
    cfg_account_1_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_1.get_width() )); // cfg_account_1_pg_1
    _count += cfg_account_1_pg_1.get_width();
    cfg_account_1_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_2.get_width() )); // cfg_account_1_pg_2
    _count += cfg_account_1_pg_2.get_width();
    cfg_account_1_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_3.get_width() )); // cfg_account_1_pg_3
    _count += cfg_account_1_pg_3.get_width();
    cfg_account_1_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_4.get_width() )); // cfg_account_1_pg_4
    _count += cfg_account_1_pg_4.get_width();
    cfg_account_1_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_5.get_width() )); // cfg_account_1_pg_5
    _count += cfg_account_1_pg_5.get_width();
    cfg_account_1_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_6.get_width() )); // cfg_account_1_pg_6
    _count += cfg_account_1_pg_6.get_width();
    cfg_account_1_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_1_pg_7.get_width() )); // cfg_account_1_pg_7
    _count += cfg_account_1_pg_7.get_width();
    cfg_oq_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_1.get_width() )); // cfg_oq_1
    _count += cfg_oq_1.get_width();
    cfg_oq_1_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_1_arb_l1_selection.get_width() )); // cfg_oq_1_arb_l1_selection
    _count += cfg_oq_1_arb_l1_selection.get_width();
    cfg_oq_1_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_1_arb_l1_strict.get_width() )); // cfg_oq_1_arb_l1_strict
    _count += cfg_oq_1_arb_l1_strict.get_width();
    cfg_oq_1_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_1_arb_l2_selection.get_width() )); // cfg_oq_1_arb_l2_selection
    _count += cfg_oq_1_arb_l2_selection.get_width();
    cfg_oq_1_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_1_arb_l2_strict.get_width() )); // cfg_oq_1_arb_l2_strict
    _count += cfg_oq_1_arb_l2_strict.get_width();
    cfg_write_control_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_2.get_width() )); // cfg_write_control_2
    _count += cfg_write_control_2.get_width();
    cfg_account_2_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_tc_to_pg.get_width() )); // cfg_account_2_tc_to_pg
    _count += cfg_account_2_tc_to_pg.get_width();
    sta_account_2.all( hlp.get_slc(_val, _count, _count -1 + sta_account_2.get_width() )); // sta_account_2
    _count += sta_account_2.get_width();
    cfg_account_2_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pause_timer.get_width() )); // cfg_account_2_pause_timer
    _count += cfg_account_2_pause_timer.get_width();
    cfg_account_2_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_mtu_table.get_width() )); // cfg_account_2_mtu_table
    _count += cfg_account_2_mtu_table.get_width();
    cfg_account_2_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_0.get_width() )); // cfg_account_2_pg_0
    _count += cfg_account_2_pg_0.get_width();
    cfg_account_2_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_1.get_width() )); // cfg_account_2_pg_1
    _count += cfg_account_2_pg_1.get_width();
    cfg_account_2_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_2.get_width() )); // cfg_account_2_pg_2
    _count += cfg_account_2_pg_2.get_width();
    cfg_account_2_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_3.get_width() )); // cfg_account_2_pg_3
    _count += cfg_account_2_pg_3.get_width();
    cfg_account_2_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_4.get_width() )); // cfg_account_2_pg_4
    _count += cfg_account_2_pg_4.get_width();
    cfg_account_2_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_5.get_width() )); // cfg_account_2_pg_5
    _count += cfg_account_2_pg_5.get_width();
    cfg_account_2_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_6.get_width() )); // cfg_account_2_pg_6
    _count += cfg_account_2_pg_6.get_width();
    cfg_account_2_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_2_pg_7.get_width() )); // cfg_account_2_pg_7
    _count += cfg_account_2_pg_7.get_width();
    cfg_oq_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_2.get_width() )); // cfg_oq_2
    _count += cfg_oq_2.get_width();
    cfg_oq_2_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_2_arb_l1_selection.get_width() )); // cfg_oq_2_arb_l1_selection
    _count += cfg_oq_2_arb_l1_selection.get_width();
    cfg_oq_2_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_2_arb_l1_strict.get_width() )); // cfg_oq_2_arb_l1_strict
    _count += cfg_oq_2_arb_l1_strict.get_width();
    cfg_oq_2_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_2_arb_l2_selection.get_width() )); // cfg_oq_2_arb_l2_selection
    _count += cfg_oq_2_arb_l2_selection.get_width();
    cfg_oq_2_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_2_arb_l2_strict.get_width() )); // cfg_oq_2_arb_l2_strict
    _count += cfg_oq_2_arb_l2_strict.get_width();
    cfg_write_control_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_3.get_width() )); // cfg_write_control_3
    _count += cfg_write_control_3.get_width();
    cfg_account_3_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_tc_to_pg.get_width() )); // cfg_account_3_tc_to_pg
    _count += cfg_account_3_tc_to_pg.get_width();
    sta_account_3.all( hlp.get_slc(_val, _count, _count -1 + sta_account_3.get_width() )); // sta_account_3
    _count += sta_account_3.get_width();
    cfg_account_3_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pause_timer.get_width() )); // cfg_account_3_pause_timer
    _count += cfg_account_3_pause_timer.get_width();
    cfg_account_3_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_mtu_table.get_width() )); // cfg_account_3_mtu_table
    _count += cfg_account_3_mtu_table.get_width();
    cfg_account_3_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_0.get_width() )); // cfg_account_3_pg_0
    _count += cfg_account_3_pg_0.get_width();
    cfg_account_3_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_1.get_width() )); // cfg_account_3_pg_1
    _count += cfg_account_3_pg_1.get_width();
    cfg_account_3_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_2.get_width() )); // cfg_account_3_pg_2
    _count += cfg_account_3_pg_2.get_width();
    cfg_account_3_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_3.get_width() )); // cfg_account_3_pg_3
    _count += cfg_account_3_pg_3.get_width();
    cfg_account_3_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_4.get_width() )); // cfg_account_3_pg_4
    _count += cfg_account_3_pg_4.get_width();
    cfg_account_3_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_5.get_width() )); // cfg_account_3_pg_5
    _count += cfg_account_3_pg_5.get_width();
    cfg_account_3_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_6.get_width() )); // cfg_account_3_pg_6
    _count += cfg_account_3_pg_6.get_width();
    cfg_account_3_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_3_pg_7.get_width() )); // cfg_account_3_pg_7
    _count += cfg_account_3_pg_7.get_width();
    cfg_oq_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_3.get_width() )); // cfg_oq_3
    _count += cfg_oq_3.get_width();
    cfg_oq_3_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_3_arb_l1_selection.get_width() )); // cfg_oq_3_arb_l1_selection
    _count += cfg_oq_3_arb_l1_selection.get_width();
    cfg_oq_3_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_3_arb_l1_strict.get_width() )); // cfg_oq_3_arb_l1_strict
    _count += cfg_oq_3_arb_l1_strict.get_width();
    cfg_oq_3_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_3_arb_l2_selection.get_width() )); // cfg_oq_3_arb_l2_selection
    _count += cfg_oq_3_arb_l2_selection.get_width();
    cfg_oq_3_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_3_arb_l2_strict.get_width() )); // cfg_oq_3_arb_l2_strict
    _count += cfg_oq_3_arb_l2_strict.get_width();
    cfg_write_control_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_4.get_width() )); // cfg_write_control_4
    _count += cfg_write_control_4.get_width();
    cfg_account_4_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_tc_to_pg.get_width() )); // cfg_account_4_tc_to_pg
    _count += cfg_account_4_tc_to_pg.get_width();
    sta_account_4.all( hlp.get_slc(_val, _count, _count -1 + sta_account_4.get_width() )); // sta_account_4
    _count += sta_account_4.get_width();
    cfg_account_4_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pause_timer.get_width() )); // cfg_account_4_pause_timer
    _count += cfg_account_4_pause_timer.get_width();
    cfg_account_4_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_mtu_table.get_width() )); // cfg_account_4_mtu_table
    _count += cfg_account_4_mtu_table.get_width();
    cfg_account_4_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_0.get_width() )); // cfg_account_4_pg_0
    _count += cfg_account_4_pg_0.get_width();
    cfg_account_4_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_1.get_width() )); // cfg_account_4_pg_1
    _count += cfg_account_4_pg_1.get_width();
    cfg_account_4_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_2.get_width() )); // cfg_account_4_pg_2
    _count += cfg_account_4_pg_2.get_width();
    cfg_account_4_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_3.get_width() )); // cfg_account_4_pg_3
    _count += cfg_account_4_pg_3.get_width();
    cfg_account_4_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_4.get_width() )); // cfg_account_4_pg_4
    _count += cfg_account_4_pg_4.get_width();
    cfg_account_4_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_5.get_width() )); // cfg_account_4_pg_5
    _count += cfg_account_4_pg_5.get_width();
    cfg_account_4_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_6.get_width() )); // cfg_account_4_pg_6
    _count += cfg_account_4_pg_6.get_width();
    cfg_account_4_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_4_pg_7.get_width() )); // cfg_account_4_pg_7
    _count += cfg_account_4_pg_7.get_width();
    cfg_oq_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_4.get_width() )); // cfg_oq_4
    _count += cfg_oq_4.get_width();
    cfg_oq_4_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_4_arb_l1_selection.get_width() )); // cfg_oq_4_arb_l1_selection
    _count += cfg_oq_4_arb_l1_selection.get_width();
    cfg_oq_4_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_4_arb_l1_strict.get_width() )); // cfg_oq_4_arb_l1_strict
    _count += cfg_oq_4_arb_l1_strict.get_width();
    cfg_oq_4_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_4_arb_l2_selection.get_width() )); // cfg_oq_4_arb_l2_selection
    _count += cfg_oq_4_arb_l2_selection.get_width();
    cfg_oq_4_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_4_arb_l2_strict.get_width() )); // cfg_oq_4_arb_l2_strict
    _count += cfg_oq_4_arb_l2_strict.get_width();
    cfg_write_control_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_5.get_width() )); // cfg_write_control_5
    _count += cfg_write_control_5.get_width();
    cfg_account_5_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_tc_to_pg.get_width() )); // cfg_account_5_tc_to_pg
    _count += cfg_account_5_tc_to_pg.get_width();
    sta_account_5.all( hlp.get_slc(_val, _count, _count -1 + sta_account_5.get_width() )); // sta_account_5
    _count += sta_account_5.get_width();
    cfg_account_5_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pause_timer.get_width() )); // cfg_account_5_pause_timer
    _count += cfg_account_5_pause_timer.get_width();
    cfg_account_5_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_mtu_table.get_width() )); // cfg_account_5_mtu_table
    _count += cfg_account_5_mtu_table.get_width();
    cfg_account_5_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_0.get_width() )); // cfg_account_5_pg_0
    _count += cfg_account_5_pg_0.get_width();
    cfg_account_5_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_1.get_width() )); // cfg_account_5_pg_1
    _count += cfg_account_5_pg_1.get_width();
    cfg_account_5_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_2.get_width() )); // cfg_account_5_pg_2
    _count += cfg_account_5_pg_2.get_width();
    cfg_account_5_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_3.get_width() )); // cfg_account_5_pg_3
    _count += cfg_account_5_pg_3.get_width();
    cfg_account_5_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_4.get_width() )); // cfg_account_5_pg_4
    _count += cfg_account_5_pg_4.get_width();
    cfg_account_5_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_5.get_width() )); // cfg_account_5_pg_5
    _count += cfg_account_5_pg_5.get_width();
    cfg_account_5_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_6.get_width() )); // cfg_account_5_pg_6
    _count += cfg_account_5_pg_6.get_width();
    cfg_account_5_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_5_pg_7.get_width() )); // cfg_account_5_pg_7
    _count += cfg_account_5_pg_7.get_width();
    cfg_oq_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_5.get_width() )); // cfg_oq_5
    _count += cfg_oq_5.get_width();
    cfg_oq_5_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_5_arb_l1_selection.get_width() )); // cfg_oq_5_arb_l1_selection
    _count += cfg_oq_5_arb_l1_selection.get_width();
    cfg_oq_5_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_5_arb_l1_strict.get_width() )); // cfg_oq_5_arb_l1_strict
    _count += cfg_oq_5_arb_l1_strict.get_width();
    cfg_oq_5_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_5_arb_l2_selection.get_width() )); // cfg_oq_5_arb_l2_selection
    _count += cfg_oq_5_arb_l2_selection.get_width();
    cfg_oq_5_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_5_arb_l2_strict.get_width() )); // cfg_oq_5_arb_l2_strict
    _count += cfg_oq_5_arb_l2_strict.get_width();
    cfg_write_control_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_6.get_width() )); // cfg_write_control_6
    _count += cfg_write_control_6.get_width();
    cfg_account_6_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_tc_to_pg.get_width() )); // cfg_account_6_tc_to_pg
    _count += cfg_account_6_tc_to_pg.get_width();
    sta_account_6.all( hlp.get_slc(_val, _count, _count -1 + sta_account_6.get_width() )); // sta_account_6
    _count += sta_account_6.get_width();
    cfg_account_6_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pause_timer.get_width() )); // cfg_account_6_pause_timer
    _count += cfg_account_6_pause_timer.get_width();
    cfg_account_6_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_mtu_table.get_width() )); // cfg_account_6_mtu_table
    _count += cfg_account_6_mtu_table.get_width();
    cfg_account_6_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_0.get_width() )); // cfg_account_6_pg_0
    _count += cfg_account_6_pg_0.get_width();
    cfg_account_6_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_1.get_width() )); // cfg_account_6_pg_1
    _count += cfg_account_6_pg_1.get_width();
    cfg_account_6_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_2.get_width() )); // cfg_account_6_pg_2
    _count += cfg_account_6_pg_2.get_width();
    cfg_account_6_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_3.get_width() )); // cfg_account_6_pg_3
    _count += cfg_account_6_pg_3.get_width();
    cfg_account_6_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_4.get_width() )); // cfg_account_6_pg_4
    _count += cfg_account_6_pg_4.get_width();
    cfg_account_6_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_5.get_width() )); // cfg_account_6_pg_5
    _count += cfg_account_6_pg_5.get_width();
    cfg_account_6_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_6.get_width() )); // cfg_account_6_pg_6
    _count += cfg_account_6_pg_6.get_width();
    cfg_account_6_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_6_pg_7.get_width() )); // cfg_account_6_pg_7
    _count += cfg_account_6_pg_7.get_width();
    cfg_oq_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_6.get_width() )); // cfg_oq_6
    _count += cfg_oq_6.get_width();
    cfg_oq_6_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_6_arb_l1_selection.get_width() )); // cfg_oq_6_arb_l1_selection
    _count += cfg_oq_6_arb_l1_selection.get_width();
    cfg_oq_6_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_6_arb_l1_strict.get_width() )); // cfg_oq_6_arb_l1_strict
    _count += cfg_oq_6_arb_l1_strict.get_width();
    cfg_oq_6_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_6_arb_l2_selection.get_width() )); // cfg_oq_6_arb_l2_selection
    _count += cfg_oq_6_arb_l2_selection.get_width();
    cfg_oq_6_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_6_arb_l2_strict.get_width() )); // cfg_oq_6_arb_l2_strict
    _count += cfg_oq_6_arb_l2_strict.get_width();
    cfg_write_control_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_7.get_width() )); // cfg_write_control_7
    _count += cfg_write_control_7.get_width();
    cfg_account_7_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_tc_to_pg.get_width() )); // cfg_account_7_tc_to_pg
    _count += cfg_account_7_tc_to_pg.get_width();
    sta_account_7.all( hlp.get_slc(_val, _count, _count -1 + sta_account_7.get_width() )); // sta_account_7
    _count += sta_account_7.get_width();
    cfg_account_7_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pause_timer.get_width() )); // cfg_account_7_pause_timer
    _count += cfg_account_7_pause_timer.get_width();
    cfg_account_7_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_mtu_table.get_width() )); // cfg_account_7_mtu_table
    _count += cfg_account_7_mtu_table.get_width();
    cfg_account_7_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_0.get_width() )); // cfg_account_7_pg_0
    _count += cfg_account_7_pg_0.get_width();
    cfg_account_7_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_1.get_width() )); // cfg_account_7_pg_1
    _count += cfg_account_7_pg_1.get_width();
    cfg_account_7_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_2.get_width() )); // cfg_account_7_pg_2
    _count += cfg_account_7_pg_2.get_width();
    cfg_account_7_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_3.get_width() )); // cfg_account_7_pg_3
    _count += cfg_account_7_pg_3.get_width();
    cfg_account_7_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_4.get_width() )); // cfg_account_7_pg_4
    _count += cfg_account_7_pg_4.get_width();
    cfg_account_7_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_5.get_width() )); // cfg_account_7_pg_5
    _count += cfg_account_7_pg_5.get_width();
    cfg_account_7_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_6.get_width() )); // cfg_account_7_pg_6
    _count += cfg_account_7_pg_6.get_width();
    cfg_account_7_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_7_pg_7.get_width() )); // cfg_account_7_pg_7
    _count += cfg_account_7_pg_7.get_width();
    cfg_oq_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_7.get_width() )); // cfg_oq_7
    _count += cfg_oq_7.get_width();
    cfg_oq_7_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_7_arb_l1_selection.get_width() )); // cfg_oq_7_arb_l1_selection
    _count += cfg_oq_7_arb_l1_selection.get_width();
    cfg_oq_7_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_7_arb_l1_strict.get_width() )); // cfg_oq_7_arb_l1_strict
    _count += cfg_oq_7_arb_l1_strict.get_width();
    cfg_oq_7_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_7_arb_l2_selection.get_width() )); // cfg_oq_7_arb_l2_selection
    _count += cfg_oq_7_arb_l2_selection.get_width();
    cfg_oq_7_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_7_arb_l2_strict.get_width() )); // cfg_oq_7_arb_l2_strict
    _count += cfg_oq_7_arb_l2_strict.get_width();
    cfg_write_control_8.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_8.get_width() )); // cfg_write_control_8
    _count += cfg_write_control_8.get_width();
    cfg_account_8_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_tc_to_pg.get_width() )); // cfg_account_8_tc_to_pg
    _count += cfg_account_8_tc_to_pg.get_width();
    sta_account_8.all( hlp.get_slc(_val, _count, _count -1 + sta_account_8.get_width() )); // sta_account_8
    _count += sta_account_8.get_width();
    cfg_account_8_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pause_timer.get_width() )); // cfg_account_8_pause_timer
    _count += cfg_account_8_pause_timer.get_width();
    cfg_account_8_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_mtu_table.get_width() )); // cfg_account_8_mtu_table
    _count += cfg_account_8_mtu_table.get_width();
    cfg_account_8_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_0.get_width() )); // cfg_account_8_pg_0
    _count += cfg_account_8_pg_0.get_width();
    cfg_account_8_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_1.get_width() )); // cfg_account_8_pg_1
    _count += cfg_account_8_pg_1.get_width();
    cfg_account_8_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_2.get_width() )); // cfg_account_8_pg_2
    _count += cfg_account_8_pg_2.get_width();
    cfg_account_8_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_3.get_width() )); // cfg_account_8_pg_3
    _count += cfg_account_8_pg_3.get_width();
    cfg_account_8_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_4.get_width() )); // cfg_account_8_pg_4
    _count += cfg_account_8_pg_4.get_width();
    cfg_account_8_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_5.get_width() )); // cfg_account_8_pg_5
    _count += cfg_account_8_pg_5.get_width();
    cfg_account_8_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_6.get_width() )); // cfg_account_8_pg_6
    _count += cfg_account_8_pg_6.get_width();
    cfg_account_8_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_8_pg_7.get_width() )); // cfg_account_8_pg_7
    _count += cfg_account_8_pg_7.get_width();
    cfg_oq_8.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_8.get_width() )); // cfg_oq_8
    _count += cfg_oq_8.get_width();
    cfg_oq_8_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_8_arb_l1_selection.get_width() )); // cfg_oq_8_arb_l1_selection
    _count += cfg_oq_8_arb_l1_selection.get_width();
    cfg_oq_8_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_8_arb_l1_strict.get_width() )); // cfg_oq_8_arb_l1_strict
    _count += cfg_oq_8_arb_l1_strict.get_width();
    cfg_oq_8_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_8_arb_l2_selection.get_width() )); // cfg_oq_8_arb_l2_selection
    _count += cfg_oq_8_arb_l2_selection.get_width();
    cfg_oq_8_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_8_arb_l2_strict.get_width() )); // cfg_oq_8_arb_l2_strict
    _count += cfg_oq_8_arb_l2_strict.get_width();
    cfg_write_control_9.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_9.get_width() )); // cfg_write_control_9
    _count += cfg_write_control_9.get_width();
    cfg_account_9_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_tc_to_pg.get_width() )); // cfg_account_9_tc_to_pg
    _count += cfg_account_9_tc_to_pg.get_width();
    sta_account_9.all( hlp.get_slc(_val, _count, _count -1 + sta_account_9.get_width() )); // sta_account_9
    _count += sta_account_9.get_width();
    cfg_account_9_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pause_timer.get_width() )); // cfg_account_9_pause_timer
    _count += cfg_account_9_pause_timer.get_width();
    cfg_account_9_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_mtu_table.get_width() )); // cfg_account_9_mtu_table
    _count += cfg_account_9_mtu_table.get_width();
    cfg_account_9_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_0.get_width() )); // cfg_account_9_pg_0
    _count += cfg_account_9_pg_0.get_width();
    cfg_account_9_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_1.get_width() )); // cfg_account_9_pg_1
    _count += cfg_account_9_pg_1.get_width();
    cfg_account_9_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_2.get_width() )); // cfg_account_9_pg_2
    _count += cfg_account_9_pg_2.get_width();
    cfg_account_9_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_3.get_width() )); // cfg_account_9_pg_3
    _count += cfg_account_9_pg_3.get_width();
    cfg_account_9_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_4.get_width() )); // cfg_account_9_pg_4
    _count += cfg_account_9_pg_4.get_width();
    cfg_account_9_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_5.get_width() )); // cfg_account_9_pg_5
    _count += cfg_account_9_pg_5.get_width();
    cfg_account_9_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_6.get_width() )); // cfg_account_9_pg_6
    _count += cfg_account_9_pg_6.get_width();
    cfg_account_9_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_7.get_width() )); // cfg_account_9_pg_7
    _count += cfg_account_9_pg_7.get_width();
    cfg_account_9_pg_8.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_8.get_width() )); // cfg_account_9_pg_8
    _count += cfg_account_9_pg_8.get_width();
    cfg_account_9_pg_9.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_9.get_width() )); // cfg_account_9_pg_9
    _count += cfg_account_9_pg_9.get_width();
    cfg_account_9_pg_10.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_10.get_width() )); // cfg_account_9_pg_10
    _count += cfg_account_9_pg_10.get_width();
    cfg_account_9_pg_11.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_11.get_width() )); // cfg_account_9_pg_11
    _count += cfg_account_9_pg_11.get_width();
    cfg_account_9_pg_12.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_12.get_width() )); // cfg_account_9_pg_12
    _count += cfg_account_9_pg_12.get_width();
    cfg_account_9_pg_13.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_13.get_width() )); // cfg_account_9_pg_13
    _count += cfg_account_9_pg_13.get_width();
    cfg_account_9_pg_14.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_14.get_width() )); // cfg_account_9_pg_14
    _count += cfg_account_9_pg_14.get_width();
    cfg_account_9_pg_15.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_9_pg_15.get_width() )); // cfg_account_9_pg_15
    _count += cfg_account_9_pg_15.get_width();
    cfg_oq_9.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_9.get_width() )); // cfg_oq_9
    _count += cfg_oq_9.get_width();
    cfg_oq_9_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_9_arb_l1_selection.get_width() )); // cfg_oq_9_arb_l1_selection
    _count += cfg_oq_9_arb_l1_selection.get_width();
    cfg_oq_9_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_9_arb_l1_strict.get_width() )); // cfg_oq_9_arb_l1_strict
    _count += cfg_oq_9_arb_l1_strict.get_width();
    cfg_oq_9_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_9_arb_l2_selection.get_width() )); // cfg_oq_9_arb_l2_selection
    _count += cfg_oq_9_arb_l2_selection.get_width();
    cfg_oq_9_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_9_arb_l2_strict.get_width() )); // cfg_oq_9_arb_l2_strict
    _count += cfg_oq_9_arb_l2_strict.get_width();
    cfg_write_control_10.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_10.get_width() )); // cfg_write_control_10
    _count += cfg_write_control_10.get_width();
    cfg_account_10_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_tc_to_pg.get_width() )); // cfg_account_10_tc_to_pg
    _count += cfg_account_10_tc_to_pg.get_width();
    sta_account_10.all( hlp.get_slc(_val, _count, _count -1 + sta_account_10.get_width() )); // sta_account_10
    _count += sta_account_10.get_width();
    cfg_account_10_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pause_timer.get_width() )); // cfg_account_10_pause_timer
    _count += cfg_account_10_pause_timer.get_width();
    cfg_account_10_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_mtu_table.get_width() )); // cfg_account_10_mtu_table
    _count += cfg_account_10_mtu_table.get_width();
    cfg_account_10_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_0.get_width() )); // cfg_account_10_pg_0
    _count += cfg_account_10_pg_0.get_width();
    cfg_account_10_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_1.get_width() )); // cfg_account_10_pg_1
    _count += cfg_account_10_pg_1.get_width();
    cfg_account_10_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_2.get_width() )); // cfg_account_10_pg_2
    _count += cfg_account_10_pg_2.get_width();
    cfg_account_10_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_3.get_width() )); // cfg_account_10_pg_3
    _count += cfg_account_10_pg_3.get_width();
    cfg_account_10_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_4.get_width() )); // cfg_account_10_pg_4
    _count += cfg_account_10_pg_4.get_width();
    cfg_account_10_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_5.get_width() )); // cfg_account_10_pg_5
    _count += cfg_account_10_pg_5.get_width();
    cfg_account_10_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_6.get_width() )); // cfg_account_10_pg_6
    _count += cfg_account_10_pg_6.get_width();
    cfg_account_10_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_7.get_width() )); // cfg_account_10_pg_7
    _count += cfg_account_10_pg_7.get_width();
    cfg_account_10_pg_8.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_8.get_width() )); // cfg_account_10_pg_8
    _count += cfg_account_10_pg_8.get_width();
    cfg_account_10_pg_9.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_9.get_width() )); // cfg_account_10_pg_9
    _count += cfg_account_10_pg_9.get_width();
    cfg_account_10_pg_10.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_10.get_width() )); // cfg_account_10_pg_10
    _count += cfg_account_10_pg_10.get_width();
    cfg_account_10_pg_11.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_11.get_width() )); // cfg_account_10_pg_11
    _count += cfg_account_10_pg_11.get_width();
    cfg_account_10_pg_12.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_12.get_width() )); // cfg_account_10_pg_12
    _count += cfg_account_10_pg_12.get_width();
    cfg_account_10_pg_13.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_13.get_width() )); // cfg_account_10_pg_13
    _count += cfg_account_10_pg_13.get_width();
    cfg_account_10_pg_14.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_14.get_width() )); // cfg_account_10_pg_14
    _count += cfg_account_10_pg_14.get_width();
    cfg_account_10_pg_15.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_15.get_width() )); // cfg_account_10_pg_15
    _count += cfg_account_10_pg_15.get_width();
    cfg_account_10_pg_16.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_16.get_width() )); // cfg_account_10_pg_16
    _count += cfg_account_10_pg_16.get_width();
    cfg_account_10_pg_17.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_17.get_width() )); // cfg_account_10_pg_17
    _count += cfg_account_10_pg_17.get_width();
    cfg_account_10_pg_18.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_18.get_width() )); // cfg_account_10_pg_18
    _count += cfg_account_10_pg_18.get_width();
    cfg_account_10_pg_19.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_19.get_width() )); // cfg_account_10_pg_19
    _count += cfg_account_10_pg_19.get_width();
    cfg_account_10_pg_20.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_20.get_width() )); // cfg_account_10_pg_20
    _count += cfg_account_10_pg_20.get_width();
    cfg_account_10_pg_21.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_21.get_width() )); // cfg_account_10_pg_21
    _count += cfg_account_10_pg_21.get_width();
    cfg_account_10_pg_22.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_22.get_width() )); // cfg_account_10_pg_22
    _count += cfg_account_10_pg_22.get_width();
    cfg_account_10_pg_23.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_23.get_width() )); // cfg_account_10_pg_23
    _count += cfg_account_10_pg_23.get_width();
    cfg_account_10_pg_24.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_24.get_width() )); // cfg_account_10_pg_24
    _count += cfg_account_10_pg_24.get_width();
    cfg_account_10_pg_25.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_25.get_width() )); // cfg_account_10_pg_25
    _count += cfg_account_10_pg_25.get_width();
    cfg_account_10_pg_26.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_26.get_width() )); // cfg_account_10_pg_26
    _count += cfg_account_10_pg_26.get_width();
    cfg_account_10_pg_27.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_27.get_width() )); // cfg_account_10_pg_27
    _count += cfg_account_10_pg_27.get_width();
    cfg_account_10_pg_28.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_28.get_width() )); // cfg_account_10_pg_28
    _count += cfg_account_10_pg_28.get_width();
    cfg_account_10_pg_29.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_29.get_width() )); // cfg_account_10_pg_29
    _count += cfg_account_10_pg_29.get_width();
    cfg_account_10_pg_30.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_30.get_width() )); // cfg_account_10_pg_30
    _count += cfg_account_10_pg_30.get_width();
    cfg_account_10_pg_31.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_10_pg_31.get_width() )); // cfg_account_10_pg_31
    _count += cfg_account_10_pg_31.get_width();
    cfg_oq_10.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_10.get_width() )); // cfg_oq_10
    _count += cfg_oq_10.get_width();
    cfg_oq_10_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_10_arb_l1_selection.get_width() )); // cfg_oq_10_arb_l1_selection
    _count += cfg_oq_10_arb_l1_selection.get_width();
    cfg_oq_10_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_10_arb_l1_strict.get_width() )); // cfg_oq_10_arb_l1_strict
    _count += cfg_oq_10_arb_l1_strict.get_width();
    cfg_oq_10_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_10_arb_l2_selection.get_width() )); // cfg_oq_10_arb_l2_selection
    _count += cfg_oq_10_arb_l2_selection.get_width();
    cfg_oq_10_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_10_arb_l2_strict.get_width() )); // cfg_oq_10_arb_l2_strict
    _count += cfg_oq_10_arb_l2_strict.get_width();
    cfg_write_control_11.all( hlp.get_slc(_val, _count, _count -1 + cfg_write_control_11.get_width() )); // cfg_write_control_11
    _count += cfg_write_control_11.get_width();
    cfg_account_11_tc_to_pg.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_tc_to_pg.get_width() )); // cfg_account_11_tc_to_pg
    _count += cfg_account_11_tc_to_pg.get_width();
    sta_account_11.all( hlp.get_slc(_val, _count, _count -1 + sta_account_11.get_width() )); // sta_account_11
    _count += sta_account_11.get_width();
    cfg_account_11_pause_timer.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pause_timer.get_width() )); // cfg_account_11_pause_timer
    _count += cfg_account_11_pause_timer.get_width();
    cfg_account_11_mtu_table.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_mtu_table.get_width() )); // cfg_account_11_mtu_table
    _count += cfg_account_11_mtu_table.get_width();
    cfg_account_11_pg_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_0.get_width() )); // cfg_account_11_pg_0
    _count += cfg_account_11_pg_0.get_width();
    cfg_account_11_pg_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_1.get_width() )); // cfg_account_11_pg_1
    _count += cfg_account_11_pg_1.get_width();
    cfg_account_11_pg_2.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_2.get_width() )); // cfg_account_11_pg_2
    _count += cfg_account_11_pg_2.get_width();
    cfg_account_11_pg_3.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_3.get_width() )); // cfg_account_11_pg_3
    _count += cfg_account_11_pg_3.get_width();
    cfg_account_11_pg_4.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_4.get_width() )); // cfg_account_11_pg_4
    _count += cfg_account_11_pg_4.get_width();
    cfg_account_11_pg_5.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_5.get_width() )); // cfg_account_11_pg_5
    _count += cfg_account_11_pg_5.get_width();
    cfg_account_11_pg_6.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_6.get_width() )); // cfg_account_11_pg_6
    _count += cfg_account_11_pg_6.get_width();
    cfg_account_11_pg_7.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_7.get_width() )); // cfg_account_11_pg_7
    _count += cfg_account_11_pg_7.get_width();
    cfg_account_11_pg_8.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_8.get_width() )); // cfg_account_11_pg_8
    _count += cfg_account_11_pg_8.get_width();
    cfg_account_11_pg_9.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_9.get_width() )); // cfg_account_11_pg_9
    _count += cfg_account_11_pg_9.get_width();
    cfg_account_11_pg_10.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_10.get_width() )); // cfg_account_11_pg_10
    _count += cfg_account_11_pg_10.get_width();
    cfg_account_11_pg_11.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_11.get_width() )); // cfg_account_11_pg_11
    _count += cfg_account_11_pg_11.get_width();
    cfg_account_11_pg_12.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_12.get_width() )); // cfg_account_11_pg_12
    _count += cfg_account_11_pg_12.get_width();
    cfg_account_11_pg_13.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_13.get_width() )); // cfg_account_11_pg_13
    _count += cfg_account_11_pg_13.get_width();
    cfg_account_11_pg_14.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_14.get_width() )); // cfg_account_11_pg_14
    _count += cfg_account_11_pg_14.get_width();
    cfg_account_11_pg_15.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_15.get_width() )); // cfg_account_11_pg_15
    _count += cfg_account_11_pg_15.get_width();
    cfg_account_11_pg_16.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_16.get_width() )); // cfg_account_11_pg_16
    _count += cfg_account_11_pg_16.get_width();
    cfg_account_11_pg_17.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_17.get_width() )); // cfg_account_11_pg_17
    _count += cfg_account_11_pg_17.get_width();
    cfg_account_11_pg_18.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_18.get_width() )); // cfg_account_11_pg_18
    _count += cfg_account_11_pg_18.get_width();
    cfg_account_11_pg_19.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_19.get_width() )); // cfg_account_11_pg_19
    _count += cfg_account_11_pg_19.get_width();
    cfg_account_11_pg_20.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_20.get_width() )); // cfg_account_11_pg_20
    _count += cfg_account_11_pg_20.get_width();
    cfg_account_11_pg_21.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_21.get_width() )); // cfg_account_11_pg_21
    _count += cfg_account_11_pg_21.get_width();
    cfg_account_11_pg_22.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_22.get_width() )); // cfg_account_11_pg_22
    _count += cfg_account_11_pg_22.get_width();
    cfg_account_11_pg_23.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_23.get_width() )); // cfg_account_11_pg_23
    _count += cfg_account_11_pg_23.get_width();
    cfg_account_11_pg_24.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_24.get_width() )); // cfg_account_11_pg_24
    _count += cfg_account_11_pg_24.get_width();
    cfg_account_11_pg_25.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_25.get_width() )); // cfg_account_11_pg_25
    _count += cfg_account_11_pg_25.get_width();
    cfg_account_11_pg_26.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_26.get_width() )); // cfg_account_11_pg_26
    _count += cfg_account_11_pg_26.get_width();
    cfg_account_11_pg_27.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_27.get_width() )); // cfg_account_11_pg_27
    _count += cfg_account_11_pg_27.get_width();
    cfg_account_11_pg_28.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_28.get_width() )); // cfg_account_11_pg_28
    _count += cfg_account_11_pg_28.get_width();
    cfg_account_11_pg_29.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_29.get_width() )); // cfg_account_11_pg_29
    _count += cfg_account_11_pg_29.get_width();
    cfg_account_11_pg_30.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_30.get_width() )); // cfg_account_11_pg_30
    _count += cfg_account_11_pg_30.get_width();
    cfg_account_11_pg_31.all( hlp.get_slc(_val, _count, _count -1 + cfg_account_11_pg_31.get_width() )); // cfg_account_11_pg_31
    _count += cfg_account_11_pg_31.get_width();
    cfg_oq_11.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_11.get_width() )); // cfg_oq_11
    _count += cfg_oq_11.get_width();
    cfg_oq_11_arb_l1_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_11_arb_l1_selection.get_width() )); // cfg_oq_11_arb_l1_selection
    _count += cfg_oq_11_arb_l1_selection.get_width();
    cfg_oq_11_arb_l1_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_11_arb_l1_strict.get_width() )); // cfg_oq_11_arb_l1_strict
    _count += cfg_oq_11_arb_l1_strict.get_width();
    cfg_oq_11_arb_l2_selection.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_11_arb_l2_selection.get_width() )); // cfg_oq_11_arb_l2_selection
    _count += cfg_oq_11_arb_l2_selection.get_width();
    cfg_oq_11_arb_l2_strict.all( hlp.get_slc(_val, _count, _count -1 + cfg_oq_11_arb_l2_strict.get_width() )); // cfg_oq_11_arb_l2_strict
    _count += cfg_oq_11_arb_l2_strict.get_width();
    sta_ecc_oq.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_oq.get_width() )); // sta_ecc_oq
    _count += sta_ecc_oq.get_width();
    sta_ecc_pack.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_pack.get_width() )); // sta_ecc_pack
    _count += sta_ecc_pack.get_width();
    sta_ecc_rwr.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_rwr.get_width() )); // sta_ecc_rwr
    _count += sta_ecc_rwr.get_width();
    sta_fc_mgr_0.all( hlp.get_slc(_val, _count, _count -1 + sta_fc_mgr_0.get_width() )); // sta_fc_mgr_0
    _count += sta_fc_mgr_0.get_width();
    cfg_fc_mgr_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_fc_mgr_0.get_width() )); // cfg_fc_mgr_0
    _count += cfg_fc_mgr_0.get_width();
    sta_ecc_fc_0.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_fc_0.get_width() )); // sta_ecc_fc_0
    _count += sta_ecc_fc_0.get_width();
    cfg_ll_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_ll_0.get_width() )); // cfg_ll_0
    _count += cfg_ll_0.get_width();
    sta_ecc_ll_0.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_ll_0.get_width() )); // sta_ecc_ll_0
    _count += sta_ecc_ll_0.get_width();
    cfg_desc_0.all( hlp.get_slc(_val, _count, _count -1 + cfg_desc_0.get_width() )); // cfg_desc_0
    _count += cfg_desc_0.get_width();
    sta_ecc_desc_0.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_desc_0.get_width() )); // sta_ecc_desc_0
    _count += sta_ecc_desc_0.get_width();
    sta_fc_mgr_1.all( hlp.get_slc(_val, _count, _count -1 + sta_fc_mgr_1.get_width() )); // sta_fc_mgr_1
    _count += sta_fc_mgr_1.get_width();
    cfg_fc_mgr_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_fc_mgr_1.get_width() )); // cfg_fc_mgr_1
    _count += cfg_fc_mgr_1.get_width();
    sta_ecc_fc_1.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_fc_1.get_width() )); // sta_ecc_fc_1
    _count += sta_ecc_fc_1.get_width();
    cfg_ll_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_ll_1.get_width() )); // cfg_ll_1
    _count += cfg_ll_1.get_width();
    sta_ecc_ll_1.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_ll_1.get_width() )); // sta_ecc_ll_1
    _count += sta_ecc_ll_1.get_width();
    cfg_desc_1.all( hlp.get_slc(_val, _count, _count -1 + cfg_desc_1.get_width() )); // cfg_desc_1
    _count += cfg_desc_1.get_width();
    sta_ecc_desc_1.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_desc_1.get_width() )); // sta_ecc_desc_1
    _count += sta_ecc_desc_1.get_width();
    cfg_gc.all( hlp.get_slc(_val, _count, _count -1 + cfg_gc.get_width() )); // cfg_gc
    _count += cfg_gc.get_width();
    cfg_rc.all( hlp.get_slc(_val, _count, _count -1 + cfg_rc.get_width() )); // cfg_rc
    _count += cfg_rc.get_width();
    sta_rc.all( hlp.get_slc(_val, _count, _count -1 + sta_rc.get_width() )); // sta_rc
    _count += sta_rc.get_width();
    cfg_sched.all( hlp.get_slc(_val, _count, _count -1 + cfg_sched.get_width() )); // cfg_sched
    _count += cfg_sched.get_width();
    sta_sched.all( hlp.get_slc(_val, _count, _count -1 + sta_sched.get_width() )); // sta_sched
    _count += sta_sched.get_width();
    cfg_island_control.all( hlp.get_slc(_val, _count, _count -1 + cfg_island_control.get_width() )); // cfg_island_control
    _count += cfg_island_control.get_width();
    cfg_rpl.all( hlp.get_slc(_val, _count, _count -1 + cfg_rpl.get_width() )); // cfg_rpl
    _count += cfg_rpl.get_width();
    cfg_parser0.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser0.get_width() )); // cfg_parser0
    _count += cfg_parser0.get_width();
    cfg_parser1.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser1.get_width() )); // cfg_parser1
    _count += cfg_parser1.get_width();
    cfg_parser2.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser2.get_width() )); // cfg_parser2
    _count += cfg_parser2.get_width();
    cfg_parser3.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser3.get_width() )); // cfg_parser3
    _count += cfg_parser3.get_width();
    cfg_parser4.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser4.get_width() )); // cfg_parser4
    _count += cfg_parser4.get_width();
    cfg_parser5.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser5.get_width() )); // cfg_parser5
    _count += cfg_parser5.get_width();
    cfg_parser6.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser6.get_width() )); // cfg_parser6
    _count += cfg_parser6.get_width();
    cfg_parser7.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser7.get_width() )); // cfg_parser7
    _count += cfg_parser7.get_width();
    cfg_parser8.all( hlp.get_slc(_val, _count, _count -1 + cfg_parser8.get_width() )); // cfg_parser8
    _count += cfg_parser8.get_width();
    // cnt_flits
    for(int ii = 0; ii < 12; ii++) {
        cnt_flits[ii].all( hlp.get_slc(_val, _count, _count -1 + cnt_flits[ii].get_width()));
        _count += cnt_flits[ii].get_width();
    }
    // cnt_write_error
    for(int ii = 0; ii < 12; ii++) {
        cnt_write_error[ii].all( hlp.get_slc(_val, _count, _count -1 + cnt_write_error[ii].get_width()));
        _count += cnt_write_error[ii].get_width();
    }
    // sta_oq
    for(int ii = 0; ii < 12; ii++) {
        sta_oq[ii].all( hlp.get_slc(_val, _count, _count -1 + sta_oq[ii].get_width()));
        _count += sta_oq[ii].get_width();
    }
    sta_oq_12.all( hlp.get_slc(_val, _count, _count -1 + sta_oq_12.get_width() )); // sta_oq_12
    _count += sta_oq_12.get_width();
    cfg_dhs.all( hlp.get_slc(_val, _count, _count -1 + cfg_dhs.get_width() )); // cfg_dhs
    _count += cfg_dhs.get_width();
    cfg_debug_port.all( hlp.get_slc(_val, _count, _count -1 + cfg_debug_port.get_width() )); // cfg_debug_port
    _count += cfg_debug_port.get_width();
    cfg_spare.all( hlp.get_slc(_val, _count, _count -1 + cfg_spare.get_width() )); // cfg_spare
    _count += cfg_spare.get_width();
    sta_ecc_sideband.all( hlp.get_slc(_val, _count, _count -1 + sta_ecc_sideband.get_width() )); // sta_ecc_sideband
    _count += sta_ecc_sideband.get_width();
    sta_rpl_err.all( hlp.get_slc(_val, _count, _count -1 + sta_rpl_err.get_width() )); // sta_rpl_err
    _count += sta_rpl_err.get_width();
    cfg_tail_drop.all( hlp.get_slc(_val, _count, _count -1 + cfg_tail_drop.get_width() )); // cfg_tail_drop
    _count += cfg_tail_drop.get_width();
    cfg_src_port_to_lif_map.all( hlp.get_slc(_val, _count, _count -1 + cfg_src_port_to_lif_map.get_width() )); // cfg_src_port_to_lif_map
    _count += cfg_src_port_to_lif_map.get_width();
    dhs_oq_0.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_0.get_width() )); // dhs_oq_0
    _count += dhs_oq_0.get_width();
    dhs_oq_1.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_1.get_width() )); // dhs_oq_1
    _count += dhs_oq_1.get_width();
    dhs_oq_2.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_2.get_width() )); // dhs_oq_2
    _count += dhs_oq_2.get_width();
    dhs_oq_3.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_3.get_width() )); // dhs_oq_3
    _count += dhs_oq_3.get_width();
    dhs_oq_4.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_4.get_width() )); // dhs_oq_4
    _count += dhs_oq_4.get_width();
    dhs_oq_5.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_5.get_width() )); // dhs_oq_5
    _count += dhs_oq_5.get_width();
    dhs_oq_6.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_6.get_width() )); // dhs_oq_6
    _count += dhs_oq_6.get_width();
    dhs_oq_7.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_7.get_width() )); // dhs_oq_7
    _count += dhs_oq_7.get_width();
    dhs_oq_8.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_8.get_width() )); // dhs_oq_8
    _count += dhs_oq_8.get_width();
    dhs_oq_9.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_9.get_width() )); // dhs_oq_9
    _count += dhs_oq_9.get_width();
    dhs_oq_10.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_10.get_width() )); // dhs_oq_10
    _count += dhs_oq_10.get_width();
    dhs_oq_11.all( hlp.get_slc(_val, _count, _count -1 + dhs_oq_11.get_width() )); // dhs_oq_11
    _count += dhs_oq_11.get_width();
    dhs_fc_0.all( hlp.get_slc(_val, _count, _count -1 + dhs_fc_0.get_width() )); // dhs_fc_0
    _count += dhs_fc_0.get_width();
    dhs_ll_0.all( hlp.get_slc(_val, _count, _count -1 + dhs_ll_0.get_width() )); // dhs_ll_0
    _count += dhs_ll_0.get_width();
    dhs_desc_0.all( hlp.get_slc(_val, _count, _count -1 + dhs_desc_0.get_width() )); // dhs_desc_0
    _count += dhs_desc_0.get_width();
    dhs_fc_1.all( hlp.get_slc(_val, _count, _count -1 + dhs_fc_1.get_width() )); // dhs_fc_1
    _count += dhs_fc_1.get_width();
    dhs_ll_1.all( hlp.get_slc(_val, _count, _count -1 + dhs_ll_1.get_width() )); // dhs_ll_1
    _count += dhs_ll_1.get_width();
    dhs_desc_1.all( hlp.get_slc(_val, _count, _count -1 + dhs_desc_1.get_width() )); // dhs_desc_1
    _count += dhs_desc_1.get_width();
    dhs_gc.all( hlp.get_slc(_val, _count, _count -1 + dhs_gc.get_width() )); // dhs_gc
    _count += dhs_gc.get_width();
    dhs_rc.all( hlp.get_slc(_val, _count, _count -1 + dhs_rc.get_width() )); // dhs_rc
    _count += dhs_rc.get_width();
    dhs_sched.all( hlp.get_slc(_val, _count, _count -1 + dhs_sched.get_width() )); // dhs_sched
    _count += dhs_sched.get_width();
}

cpp_int cap_pbc_csr_dhs_sched_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // current_credit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__current_credit) , _count, _count -1 + 32 );
    _count += 32;
    // quanta
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__quanta) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_sched_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // count0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count0) , _count, _count -1 + 3 );
    _count += 3;
    // count1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count1) , _count, _count -1 + 3 );
    _count += 3;
    // count2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count2) , _count, _count -1 + 3 );
    _count += 3;
    // count3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count3) , _count, _count -1 + 3 );
    _count += 3;
    // count4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count4) , _count, _count -1 + 3 );
    _count += 3;
    // count5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count5) , _count, _count -1 + 3 );
    _count += 3;
    // count6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count6) , _count, _count -1 + 3 );
    _count += 3;
    // count7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__count7) , _count, _count -1 + 3 );
    _count += 3;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_rc_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_gc_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_gc_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // src_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__src_port) , _count, _count -1 + 4 );
    _count += 4;
    // refcount
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__refcount) , _count, _count -1 + 3 );
    _count += 3;
    // input_queue
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__input_queue) , _count, _count -1 + 3 );
    _count += 3;
    // eop_pack
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop_pack) , _count, _count -1 + 5 );
    _count += 5;
    // err_pack
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__err_pack) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_desc_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    // eop
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop) , _count, _count -1 + 1 );
    _count += 1;
    // full
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__full) , _count, _count -1 + 1 );
    _count += 1;
    // ge256B
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ge256B) , _count, _count -1 + 1 );
    _count += 1;
    // err
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__err) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_ll_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_fc_1_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // cell0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cell0) , _count, _count -1 + 14 );
    _count += 14;
    // cell1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cell1) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_fc_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // src_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__src_port) , _count, _count -1 + 4 );
    _count += 4;
    // refcount
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__refcount) , _count, _count -1 + 3 );
    _count += 3;
    // input_queue
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__input_queue) , _count, _count -1 + 3 );
    _count += 3;
    // eop_pack
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop_pack) , _count, _count -1 + 5 );
    _count += 5;
    // err_pack
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__err_pack) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_desc_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    // eop
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop) , _count, _count -1 + 1 );
    _count += 1;
    // full
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__full) , _count, _count -1 + 1 );
    _count += 1;
    // ge256B
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ge256B) , _count, _count -1 + 1 );
    _count += 1;
    // err
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__err) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_ll_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_fc_0_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // cell0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cell0) , _count, _count -1 + 14 );
    _count += 14;
    // cell1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cell1) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_fc_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_11_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 13 );
    _count += 13;
    // pack_info
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pack_info) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_10_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    // rpl_ptr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rpl_ptr) , _count, _count -1 + 16 );
    _count += 16;
    // rpl_en
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rpl_en) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_9_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_8_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_7_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_6_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_5_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_4_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_3_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_2_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_1_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_0_entry_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // next_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__next_cell) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_dhs_oq_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, entry.all() , _count, _count -1 + entry.get_width() ); // entry
    _count += entry.get_width();
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // entry_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_0) , _count, _count -1 + 11 );
    _count += 11;
    // entry_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_1) , _count, _count -1 + 11 );
    _count += 11;
    // entry_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_2) , _count, _count -1 + 11 );
    _count += 11;
    // entry_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_3) , _count, _count -1 + 11 );
    _count += 11;
    // entry_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_4) , _count, _count -1 + 11 );
    _count += 11;
    // entry_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_5) , _count, _count -1 + 11 );
    _count += 11;
    // entry_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_6) , _count, _count -1 + 11 );
    _count += 11;
    // entry_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_7) , _count, _count -1 + 11 );
    _count += 11;
    // entry_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__entry_8) , _count, _count -1 + 11 );
    _count += 11;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_tail_drop_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // cpu_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cpu_threshold) , _count, _count -1 + 16 );
    _count += 16;
    // span_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__span_threshold) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_rpl_err_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // rid
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rid) , _count, _count -1 + 5 );
    _count += 5;
    // rresp
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rresp) , _count, _count -1 + 2 );
    _count += 2;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_sideband_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 7 );
    _count += 7;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_spare_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // data
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__data) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_debug_port_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // select
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__select) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_dhs_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // address
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__address) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_oq_12_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // depth_value
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__depth_value) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_oq_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // depth_value
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__depth_value) , _count, _count -1 + 512 );
    _count += 512;
    return ret_val;
}

cpp_int cap_pbc_csr_cnt_write_error_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // discarded
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__discarded) , _count, _count -1 + 16 );
    _count += 16;
    // admitted
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__admitted) , _count, _count -1 + 16 );
    _count += 16;
    // intrinsic_drop
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__intrinsic_drop) , _count, _count -1 + 16 );
    _count += 16;
    // out_of_cells
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__out_of_cells) , _count, _count -1 + 8 );
    _count += 8;
    // out_of_credit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__out_of_credit) , _count, _count -1 + 8 );
    _count += 8;
    // truncation
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__truncation) , _count, _count -1 + 8 );
    _count += 8;
    // port_disabled
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__port_disabled) , _count, _count -1 + 8 );
    _count += 8;
    // out_of_cells1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__out_of_cells1) , _count, _count -1 + 16 );
    _count += 16;
    // tail_drop_cpu
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__tail_drop_cpu) , _count, _count -1 + 16 );
    _count += 16;
    // tail_drop_span
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__tail_drop_span) , _count, _count -1 + 16 );
    _count += 16;
    // enqueue
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enqueue) , _count, _count -1 + 8 );
    _count += 8;
    return ret_val;
}

cpp_int cap_pbc_csr_cnt_flits_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // sop_in
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__sop_in) , _count, _count -1 + 16 );
    _count += 16;
    // eop_in
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop_in) , _count, _count -1 + 16 );
    _count += 16;
    // sop_out
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__sop_out) , _count, _count -1 + 16 );
    _count += 16;
    // eop_out
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__eop_out) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_parser0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // dot1q_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dot1q_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv4_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv4_type) , _count, _count -1 + 16 );
    _count += 16;
    // ipv6_type
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipv6_type) , _count, _count -1 + 16 );
    _count += 16;
    // use_ip
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_ip) , _count, _count -1 + 1 );
    _count += 1;
    // use_dot1q
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__use_dot1q) , _count, _count -1 + 1 );
    _count += 1;
    // default_cos
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_cos) , _count, _count -1 + 3 );
    _count += 3;
    // default_port
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__default_port) , _count, _count -1 + 4 );
    _count += 4;
    // oq_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__oq_map) , _count, _count -1 + 40 );
    _count += 40;
    // dscp_map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dscp_map) , _count, _count -1 + 192 );
    _count += 192;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_rpl_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // base
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__base) , _count, _count -1 + 27 );
    _count += 27;
    // token_size
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__token_size) , _count, _count -1 + 2 );
    _count += 2;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_island_control_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // map
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__map) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_sched_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_correctable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_syndrome) , _count, _count -1 + 8 );
    _count += 8;
    // ecc_addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_addr) , _count, _count -1 + 9 );
    _count += 9;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_sched_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable_wrr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable_wrr) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_selection
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_selection) , _count, _count -1 + 2 );
    _count += 2;
    // timer
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__timer) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_rc_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // init_done
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_done) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_correctable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // ecc_addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_addr) , _count, _count -1 + 11 );
    _count += 11;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_rc_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // init_start
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_start) , _count, _count -1 + 1 );
    _count += 1;
    // init_reset
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_reset) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_gc_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_desc_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_desc_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_ll_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_ll_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_fc_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 7 );
    _count += 7;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 12 );
    _count += 12;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // init_start
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_start) , _count, _count -1 + 1 );
    _count += 1;
    // init_reset
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_reset) , _count, _count -1 + 1 );
    _count += 1;
    // max_row
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__max_row) , _count, _count -1 + 12 );
    _count += 12;
    // min_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__min_cell) , _count, _count -1 + 13 );
    _count += 13;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_fc_mgr_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // cells_available
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cells_available) , _count, _count -1 + 13 );
    _count += 13;
    // init_done
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_done) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_desc_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_desc_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_ll_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_ll_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_fc_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 7 );
    _count += 7;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 12 );
    _count += 12;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // init_start
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_start) , _count, _count -1 + 1 );
    _count += 1;
    // init_reset
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_reset) , _count, _count -1 + 1 );
    _count += 1;
    // max_row
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__max_row) , _count, _count -1 + 12 );
    _count += 12;
    // min_cell
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__min_cell) , _count, _count -1 + 13 );
    _count += 13;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_fc_mgr_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // cells_available
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cells_available) , _count, _count -1 + 13 );
    _count += 13;
    // init_done
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__init_done) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_rwr_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 18 );
    _count += 18;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 15 );
    _count += 15;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_pack_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 17 );
    _count += 17;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_ecc_oq_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // uncorrectable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__uncorrectable) , _count, _count -1 + 1 );
    _count += 1;
    // correctable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__correctable) , _count, _count -1 + 1 );
    _count += 1;
    // syndrome
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__syndrome) , _count, _count -1 + 6 );
    _count += 6;
    // addr
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__addr) , _count, _count -1 + 18 );
    _count += 18;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // packing_msb
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_msb) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_selection
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_selection) , _count, _count -1 + 4 );
    _count += 4;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    // pg8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg8) , _count, _count -1 + 5 );
    _count += 5;
    // pg9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg9) , _count, _count -1 + 5 );
    _count += 5;
    // pg10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg10) , _count, _count -1 + 5 );
    _count += 5;
    // pg11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg11) , _count, _count -1 + 5 );
    _count += 5;
    // pg12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg12) , _count, _count -1 + 5 );
    _count += 5;
    // pg13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg13) , _count, _count -1 + 5 );
    _count += 5;
    // pg14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg14) , _count, _count -1 + 5 );
    _count += 5;
    // pg15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg15) , _count, _count -1 + 5 );
    _count += 5;
    // pg16
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg16) , _count, _count -1 + 5 );
    _count += 5;
    // pg17
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg17) , _count, _count -1 + 5 );
    _count += 5;
    // pg18
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg18) , _count, _count -1 + 5 );
    _count += 5;
    // pg19
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg19) , _count, _count -1 + 5 );
    _count += 5;
    // pg20
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg20) , _count, _count -1 + 5 );
    _count += 5;
    // pg21
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg21) , _count, _count -1 + 5 );
    _count += 5;
    // pg22
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg22) , _count, _count -1 + 5 );
    _count += 5;
    // pg23
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg23) , _count, _count -1 + 5 );
    _count += 5;
    // pg24
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg24) , _count, _count -1 + 5 );
    _count += 5;
    // pg25
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg25) , _count, _count -1 + 5 );
    _count += 5;
    // pg26
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg26) , _count, _count -1 + 5 );
    _count += 5;
    // pg27
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg27) , _count, _count -1 + 5 );
    _count += 5;
    // pg28
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg28) , _count, _count -1 + 5 );
    _count += 5;
    // pg29
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg29) , _count, _count -1 + 5 );
    _count += 5;
    // pg30
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg30) , _count, _count -1 + 5 );
    _count += 5;
    // pg31
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg31) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_8) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_9) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_10) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_11) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_12) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_13) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_14) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_15) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_16
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_16) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_17
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_17) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_18
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_18) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_19
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_19) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_20
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_20) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_21
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_21) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_22
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_22) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_23
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_23) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_24
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_24) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_25
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_25) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_26
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_26) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_27
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_27) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_28
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_28) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_29
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_29) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_30
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_30) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_31
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_31) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_11_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 160 );
    _count += 160;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_selection
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_selection) , _count, _count -1 + 3 );
    _count += 3;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    // pg8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg8) , _count, _count -1 + 5 );
    _count += 5;
    // pg9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg9) , _count, _count -1 + 5 );
    _count += 5;
    // pg10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg10) , _count, _count -1 + 5 );
    _count += 5;
    // pg11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg11) , _count, _count -1 + 5 );
    _count += 5;
    // pg12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg12) , _count, _count -1 + 5 );
    _count += 5;
    // pg13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg13) , _count, _count -1 + 5 );
    _count += 5;
    // pg14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg14) , _count, _count -1 + 5 );
    _count += 5;
    // pg15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg15) , _count, _count -1 + 5 );
    _count += 5;
    // pg16
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg16) , _count, _count -1 + 5 );
    _count += 5;
    // pg17
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg17) , _count, _count -1 + 5 );
    _count += 5;
    // pg18
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg18) , _count, _count -1 + 5 );
    _count += 5;
    // pg19
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg19) , _count, _count -1 + 5 );
    _count += 5;
    // pg20
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg20) , _count, _count -1 + 5 );
    _count += 5;
    // pg21
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg21) , _count, _count -1 + 5 );
    _count += 5;
    // pg22
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg22) , _count, _count -1 + 5 );
    _count += 5;
    // pg23
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg23) , _count, _count -1 + 5 );
    _count += 5;
    // pg24
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg24) , _count, _count -1 + 5 );
    _count += 5;
    // pg25
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg25) , _count, _count -1 + 5 );
    _count += 5;
    // pg26
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg26) , _count, _count -1 + 5 );
    _count += 5;
    // pg27
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg27) , _count, _count -1 + 5 );
    _count += 5;
    // pg28
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg28) , _count, _count -1 + 5 );
    _count += 5;
    // pg29
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg29) , _count, _count -1 + 5 );
    _count += 5;
    // pg30
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg30) , _count, _count -1 + 5 );
    _count += 5;
    // pg31
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg31) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_8) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_9) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_10) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_11) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_12) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_13) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_14) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_15) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_16
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_16) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_17
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_17) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_18
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_18) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_19
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_19) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_20
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_20) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_21
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_21) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_22
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_22) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_23
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_23) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_24
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_24) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_25
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_25) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_26
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_26) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_27
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_27) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_28
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_28) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_29
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_29) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_30
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_30) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_31
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_31) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_10_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 160 );
    _count += 160;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    // pg8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg8) , _count, _count -1 + 5 );
    _count += 5;
    // pg9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg9) , _count, _count -1 + 5 );
    _count += 5;
    // pg10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg10) , _count, _count -1 + 5 );
    _count += 5;
    // pg11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg11) , _count, _count -1 + 5 );
    _count += 5;
    // pg12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg12) , _count, _count -1 + 5 );
    _count += 5;
    // pg13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg13) , _count, _count -1 + 5 );
    _count += 5;
    // pg14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg14) , _count, _count -1 + 5 );
    _count += 5;
    // pg15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg15) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_8) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_9) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_10) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_11) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_12) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_13) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_14) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_15) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_9_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 64 );
    _count += 64;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_8_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_7_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_6_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_5_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_4_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_3_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_2_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_1_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 16 );
    _count += 16;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 16 );
    _count += 16;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 16 );
    _count += 16;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 16 );
    _count += 16;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // priority
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__priority) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // node_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_0) , _count, _count -1 + 32 );
    _count += 32;
    // node_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_1) , _count, _count -1 + 32 );
    _count += 32;
    // node_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_2) , _count, _count -1 + 32 );
    _count += 32;
    // node_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_3) , _count, _count -1 + 32 );
    _count += 32;
    // node_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_4) , _count, _count -1 + 32 );
    _count += 32;
    // node_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_5) , _count, _count -1 + 32 );
    _count += 32;
    // node_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_6) , _count, _count -1 + 32 );
    _count += 32;
    // node_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_7) , _count, _count -1 + 32 );
    _count += 32;
    // node_8
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_8) , _count, _count -1 + 32 );
    _count += 32;
    // node_9
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_9) , _count, _count -1 + 32 );
    _count += 32;
    // node_10
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_10) , _count, _count -1 + 32 );
    _count += 32;
    // node_11
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_11) , _count, _count -1 + 32 );
    _count += 32;
    // node_12
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_12) , _count, _count -1 + 32 );
    _count += 32;
    // node_13
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_13) , _count, _count -1 + 32 );
    _count += 32;
    // node_14
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_14) , _count, _count -1 + 32 );
    _count += 32;
    // node_15
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__node_15) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_oq_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_det
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_det) , _count, _count -1 + 1 );
    _count += 1;
    // ecc_disable_cor
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ecc_disable_cor) , _count, _count -1 + 1 );
    _count += 1;
    // dhs_eccbypass
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__dhs_eccbypass) , _count, _count -1 + 1 );
    _count += 1;
    // num_hdr_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__num_hdr_bytes) , _count, _count -1 + 7 );
    _count += 7;
    // rewrite_enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite_enable) , _count, _count -1 + 1 );
    _count += 1;
    // ipg_bytes
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__ipg_bytes) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // reserved_min
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__reserved_min) , _count, _count -1 + 10 );
    _count += 10;
    // xon_threshold
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xon_threshold) , _count, _count -1 + 14 );
    _count += 14;
    // headroom
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__headroom) , _count, _count -1 + 12 );
    _count += 12;
    // low_limit
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__low_limit) , _count, _count -1 + 14 );
    _count += 14;
    // alpha
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__alpha) , _count, _count -1 + 4 );
    _count += 4;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // pg0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg0) , _count, _count -1 + 5 );
    _count += 5;
    // pg1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg1) , _count, _count -1 + 5 );
    _count += 5;
    // pg2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg2) , _count, _count -1 + 5 );
    _count += 5;
    // pg3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg3) , _count, _count -1 + 5 );
    _count += 5;
    // pg4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg4) , _count, _count -1 + 5 );
    _count += 5;
    // pg5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg5) , _count, _count -1 + 5 );
    _count += 5;
    // pg6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg6) , _count, _count -1 + 5 );
    _count += 5;
    // pg7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__pg7) , _count, _count -1 + 5 );
    _count += 5;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_pause_timer_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // xoff_timeout
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__xoff_timeout) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_sta_account_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // occupancy_0
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_0) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_1
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_1) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_2
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_2) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_3
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_3) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_4
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_4) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_5
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_5) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_6
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_6) , _count, _count -1 + 14 );
    _count += 14;
    // occupancy_7
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__occupancy_7) , _count, _count -1 + 14 );
    _count += 14;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_account_0_tc_to_pg_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // table
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__table) , _count, _count -1 + 24 );
    _count += 24;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // enable
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__enable) , _count, _count -1 + 1 );
    _count += 1;
    // cut_thru
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__cut_thru) , _count, _count -1 + 5 );
    _count += 5;
    // packing
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing) , _count, _count -1 + 1 );
    _count += 1;
    // packing_same_pg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_same_pg) , _count, _count -1 + 1 );
    _count += 1;
    // packing_timeout_cycles
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__packing_timeout_cycles) , _count, _count -1 + 10 );
    _count += 10;
    // rewrite
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rewrite) , _count, _count -1 + 1 );
    _count += 1;
    // rate_limiter
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__rate_limiter) , _count, _count -1 + 3 );
    _count += 3;
    // drop_on_error
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__drop_on_error) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_cfg_pbc_control_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // sw_reset
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__sw_reset) , _count, _count -1 + 1 );
    _count += 1;
    return ret_val;
}

cpp_int cap_pbc_csr_base_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    // scratch_reg
    ret_val = hlp.set_slc(ret_val, static_cast<cpp_int>(int_var__scratch_reg) , _count, _count -1 + 32 );
    _count += 32;
    return ret_val;
}

cpp_int cap_pbc_csr_t::all() const {
    int _count = 0;
    cpp_int ret_val;

    ret_val = hlp.set_slc(ret_val, base.all() , _count, _count -1 + base.get_width() ); // base
    _count += base.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_pbc_control.all() , _count, _count -1 + cfg_pbc_control.get_width() ); // cfg_pbc_control
    _count += cfg_pbc_control.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_0.all() , _count, _count -1 + cfg_write_control_0.get_width() ); // cfg_write_control_0
    _count += cfg_write_control_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_tc_to_pg.all() , _count, _count -1 + cfg_account_0_tc_to_pg.get_width() ); // cfg_account_0_tc_to_pg
    _count += cfg_account_0_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_0.all() , _count, _count -1 + sta_account_0.get_width() ); // sta_account_0
    _count += sta_account_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pause_timer.all() , _count, _count -1 + cfg_account_0_pause_timer.get_width() ); // cfg_account_0_pause_timer
    _count += cfg_account_0_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_mtu_table.all() , _count, _count -1 + cfg_account_0_mtu_table.get_width() ); // cfg_account_0_mtu_table
    _count += cfg_account_0_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_0.all() , _count, _count -1 + cfg_account_0_pg_0.get_width() ); // cfg_account_0_pg_0
    _count += cfg_account_0_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_1.all() , _count, _count -1 + cfg_account_0_pg_1.get_width() ); // cfg_account_0_pg_1
    _count += cfg_account_0_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_2.all() , _count, _count -1 + cfg_account_0_pg_2.get_width() ); // cfg_account_0_pg_2
    _count += cfg_account_0_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_3.all() , _count, _count -1 + cfg_account_0_pg_3.get_width() ); // cfg_account_0_pg_3
    _count += cfg_account_0_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_4.all() , _count, _count -1 + cfg_account_0_pg_4.get_width() ); // cfg_account_0_pg_4
    _count += cfg_account_0_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_5.all() , _count, _count -1 + cfg_account_0_pg_5.get_width() ); // cfg_account_0_pg_5
    _count += cfg_account_0_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_6.all() , _count, _count -1 + cfg_account_0_pg_6.get_width() ); // cfg_account_0_pg_6
    _count += cfg_account_0_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_0_pg_7.all() , _count, _count -1 + cfg_account_0_pg_7.get_width() ); // cfg_account_0_pg_7
    _count += cfg_account_0_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_0.all() , _count, _count -1 + cfg_oq_0.get_width() ); // cfg_oq_0
    _count += cfg_oq_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_0_arb_l1_selection.all() , _count, _count -1 + cfg_oq_0_arb_l1_selection.get_width() ); // cfg_oq_0_arb_l1_selection
    _count += cfg_oq_0_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_0_arb_l1_strict.all() , _count, _count -1 + cfg_oq_0_arb_l1_strict.get_width() ); // cfg_oq_0_arb_l1_strict
    _count += cfg_oq_0_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_0_arb_l2_selection.all() , _count, _count -1 + cfg_oq_0_arb_l2_selection.get_width() ); // cfg_oq_0_arb_l2_selection
    _count += cfg_oq_0_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_0_arb_l2_strict.all() , _count, _count -1 + cfg_oq_0_arb_l2_strict.get_width() ); // cfg_oq_0_arb_l2_strict
    _count += cfg_oq_0_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_1.all() , _count, _count -1 + cfg_write_control_1.get_width() ); // cfg_write_control_1
    _count += cfg_write_control_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_tc_to_pg.all() , _count, _count -1 + cfg_account_1_tc_to_pg.get_width() ); // cfg_account_1_tc_to_pg
    _count += cfg_account_1_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_1.all() , _count, _count -1 + sta_account_1.get_width() ); // sta_account_1
    _count += sta_account_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pause_timer.all() , _count, _count -1 + cfg_account_1_pause_timer.get_width() ); // cfg_account_1_pause_timer
    _count += cfg_account_1_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_mtu_table.all() , _count, _count -1 + cfg_account_1_mtu_table.get_width() ); // cfg_account_1_mtu_table
    _count += cfg_account_1_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_0.all() , _count, _count -1 + cfg_account_1_pg_0.get_width() ); // cfg_account_1_pg_0
    _count += cfg_account_1_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_1.all() , _count, _count -1 + cfg_account_1_pg_1.get_width() ); // cfg_account_1_pg_1
    _count += cfg_account_1_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_2.all() , _count, _count -1 + cfg_account_1_pg_2.get_width() ); // cfg_account_1_pg_2
    _count += cfg_account_1_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_3.all() , _count, _count -1 + cfg_account_1_pg_3.get_width() ); // cfg_account_1_pg_3
    _count += cfg_account_1_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_4.all() , _count, _count -1 + cfg_account_1_pg_4.get_width() ); // cfg_account_1_pg_4
    _count += cfg_account_1_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_5.all() , _count, _count -1 + cfg_account_1_pg_5.get_width() ); // cfg_account_1_pg_5
    _count += cfg_account_1_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_6.all() , _count, _count -1 + cfg_account_1_pg_6.get_width() ); // cfg_account_1_pg_6
    _count += cfg_account_1_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_1_pg_7.all() , _count, _count -1 + cfg_account_1_pg_7.get_width() ); // cfg_account_1_pg_7
    _count += cfg_account_1_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_1.all() , _count, _count -1 + cfg_oq_1.get_width() ); // cfg_oq_1
    _count += cfg_oq_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_1_arb_l1_selection.all() , _count, _count -1 + cfg_oq_1_arb_l1_selection.get_width() ); // cfg_oq_1_arb_l1_selection
    _count += cfg_oq_1_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_1_arb_l1_strict.all() , _count, _count -1 + cfg_oq_1_arb_l1_strict.get_width() ); // cfg_oq_1_arb_l1_strict
    _count += cfg_oq_1_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_1_arb_l2_selection.all() , _count, _count -1 + cfg_oq_1_arb_l2_selection.get_width() ); // cfg_oq_1_arb_l2_selection
    _count += cfg_oq_1_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_1_arb_l2_strict.all() , _count, _count -1 + cfg_oq_1_arb_l2_strict.get_width() ); // cfg_oq_1_arb_l2_strict
    _count += cfg_oq_1_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_2.all() , _count, _count -1 + cfg_write_control_2.get_width() ); // cfg_write_control_2
    _count += cfg_write_control_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_tc_to_pg.all() , _count, _count -1 + cfg_account_2_tc_to_pg.get_width() ); // cfg_account_2_tc_to_pg
    _count += cfg_account_2_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_2.all() , _count, _count -1 + sta_account_2.get_width() ); // sta_account_2
    _count += sta_account_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pause_timer.all() , _count, _count -1 + cfg_account_2_pause_timer.get_width() ); // cfg_account_2_pause_timer
    _count += cfg_account_2_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_mtu_table.all() , _count, _count -1 + cfg_account_2_mtu_table.get_width() ); // cfg_account_2_mtu_table
    _count += cfg_account_2_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_0.all() , _count, _count -1 + cfg_account_2_pg_0.get_width() ); // cfg_account_2_pg_0
    _count += cfg_account_2_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_1.all() , _count, _count -1 + cfg_account_2_pg_1.get_width() ); // cfg_account_2_pg_1
    _count += cfg_account_2_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_2.all() , _count, _count -1 + cfg_account_2_pg_2.get_width() ); // cfg_account_2_pg_2
    _count += cfg_account_2_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_3.all() , _count, _count -1 + cfg_account_2_pg_3.get_width() ); // cfg_account_2_pg_3
    _count += cfg_account_2_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_4.all() , _count, _count -1 + cfg_account_2_pg_4.get_width() ); // cfg_account_2_pg_4
    _count += cfg_account_2_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_5.all() , _count, _count -1 + cfg_account_2_pg_5.get_width() ); // cfg_account_2_pg_5
    _count += cfg_account_2_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_6.all() , _count, _count -1 + cfg_account_2_pg_6.get_width() ); // cfg_account_2_pg_6
    _count += cfg_account_2_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_2_pg_7.all() , _count, _count -1 + cfg_account_2_pg_7.get_width() ); // cfg_account_2_pg_7
    _count += cfg_account_2_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_2.all() , _count, _count -1 + cfg_oq_2.get_width() ); // cfg_oq_2
    _count += cfg_oq_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_2_arb_l1_selection.all() , _count, _count -1 + cfg_oq_2_arb_l1_selection.get_width() ); // cfg_oq_2_arb_l1_selection
    _count += cfg_oq_2_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_2_arb_l1_strict.all() , _count, _count -1 + cfg_oq_2_arb_l1_strict.get_width() ); // cfg_oq_2_arb_l1_strict
    _count += cfg_oq_2_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_2_arb_l2_selection.all() , _count, _count -1 + cfg_oq_2_arb_l2_selection.get_width() ); // cfg_oq_2_arb_l2_selection
    _count += cfg_oq_2_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_2_arb_l2_strict.all() , _count, _count -1 + cfg_oq_2_arb_l2_strict.get_width() ); // cfg_oq_2_arb_l2_strict
    _count += cfg_oq_2_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_3.all() , _count, _count -1 + cfg_write_control_3.get_width() ); // cfg_write_control_3
    _count += cfg_write_control_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_tc_to_pg.all() , _count, _count -1 + cfg_account_3_tc_to_pg.get_width() ); // cfg_account_3_tc_to_pg
    _count += cfg_account_3_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_3.all() , _count, _count -1 + sta_account_3.get_width() ); // sta_account_3
    _count += sta_account_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pause_timer.all() , _count, _count -1 + cfg_account_3_pause_timer.get_width() ); // cfg_account_3_pause_timer
    _count += cfg_account_3_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_mtu_table.all() , _count, _count -1 + cfg_account_3_mtu_table.get_width() ); // cfg_account_3_mtu_table
    _count += cfg_account_3_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_0.all() , _count, _count -1 + cfg_account_3_pg_0.get_width() ); // cfg_account_3_pg_0
    _count += cfg_account_3_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_1.all() , _count, _count -1 + cfg_account_3_pg_1.get_width() ); // cfg_account_3_pg_1
    _count += cfg_account_3_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_2.all() , _count, _count -1 + cfg_account_3_pg_2.get_width() ); // cfg_account_3_pg_2
    _count += cfg_account_3_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_3.all() , _count, _count -1 + cfg_account_3_pg_3.get_width() ); // cfg_account_3_pg_3
    _count += cfg_account_3_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_4.all() , _count, _count -1 + cfg_account_3_pg_4.get_width() ); // cfg_account_3_pg_4
    _count += cfg_account_3_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_5.all() , _count, _count -1 + cfg_account_3_pg_5.get_width() ); // cfg_account_3_pg_5
    _count += cfg_account_3_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_6.all() , _count, _count -1 + cfg_account_3_pg_6.get_width() ); // cfg_account_3_pg_6
    _count += cfg_account_3_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_3_pg_7.all() , _count, _count -1 + cfg_account_3_pg_7.get_width() ); // cfg_account_3_pg_7
    _count += cfg_account_3_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_3.all() , _count, _count -1 + cfg_oq_3.get_width() ); // cfg_oq_3
    _count += cfg_oq_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_3_arb_l1_selection.all() , _count, _count -1 + cfg_oq_3_arb_l1_selection.get_width() ); // cfg_oq_3_arb_l1_selection
    _count += cfg_oq_3_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_3_arb_l1_strict.all() , _count, _count -1 + cfg_oq_3_arb_l1_strict.get_width() ); // cfg_oq_3_arb_l1_strict
    _count += cfg_oq_3_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_3_arb_l2_selection.all() , _count, _count -1 + cfg_oq_3_arb_l2_selection.get_width() ); // cfg_oq_3_arb_l2_selection
    _count += cfg_oq_3_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_3_arb_l2_strict.all() , _count, _count -1 + cfg_oq_3_arb_l2_strict.get_width() ); // cfg_oq_3_arb_l2_strict
    _count += cfg_oq_3_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_4.all() , _count, _count -1 + cfg_write_control_4.get_width() ); // cfg_write_control_4
    _count += cfg_write_control_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_tc_to_pg.all() , _count, _count -1 + cfg_account_4_tc_to_pg.get_width() ); // cfg_account_4_tc_to_pg
    _count += cfg_account_4_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_4.all() , _count, _count -1 + sta_account_4.get_width() ); // sta_account_4
    _count += sta_account_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pause_timer.all() , _count, _count -1 + cfg_account_4_pause_timer.get_width() ); // cfg_account_4_pause_timer
    _count += cfg_account_4_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_mtu_table.all() , _count, _count -1 + cfg_account_4_mtu_table.get_width() ); // cfg_account_4_mtu_table
    _count += cfg_account_4_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_0.all() , _count, _count -1 + cfg_account_4_pg_0.get_width() ); // cfg_account_4_pg_0
    _count += cfg_account_4_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_1.all() , _count, _count -1 + cfg_account_4_pg_1.get_width() ); // cfg_account_4_pg_1
    _count += cfg_account_4_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_2.all() , _count, _count -1 + cfg_account_4_pg_2.get_width() ); // cfg_account_4_pg_2
    _count += cfg_account_4_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_3.all() , _count, _count -1 + cfg_account_4_pg_3.get_width() ); // cfg_account_4_pg_3
    _count += cfg_account_4_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_4.all() , _count, _count -1 + cfg_account_4_pg_4.get_width() ); // cfg_account_4_pg_4
    _count += cfg_account_4_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_5.all() , _count, _count -1 + cfg_account_4_pg_5.get_width() ); // cfg_account_4_pg_5
    _count += cfg_account_4_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_6.all() , _count, _count -1 + cfg_account_4_pg_6.get_width() ); // cfg_account_4_pg_6
    _count += cfg_account_4_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_4_pg_7.all() , _count, _count -1 + cfg_account_4_pg_7.get_width() ); // cfg_account_4_pg_7
    _count += cfg_account_4_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_4.all() , _count, _count -1 + cfg_oq_4.get_width() ); // cfg_oq_4
    _count += cfg_oq_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_4_arb_l1_selection.all() , _count, _count -1 + cfg_oq_4_arb_l1_selection.get_width() ); // cfg_oq_4_arb_l1_selection
    _count += cfg_oq_4_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_4_arb_l1_strict.all() , _count, _count -1 + cfg_oq_4_arb_l1_strict.get_width() ); // cfg_oq_4_arb_l1_strict
    _count += cfg_oq_4_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_4_arb_l2_selection.all() , _count, _count -1 + cfg_oq_4_arb_l2_selection.get_width() ); // cfg_oq_4_arb_l2_selection
    _count += cfg_oq_4_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_4_arb_l2_strict.all() , _count, _count -1 + cfg_oq_4_arb_l2_strict.get_width() ); // cfg_oq_4_arb_l2_strict
    _count += cfg_oq_4_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_5.all() , _count, _count -1 + cfg_write_control_5.get_width() ); // cfg_write_control_5
    _count += cfg_write_control_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_tc_to_pg.all() , _count, _count -1 + cfg_account_5_tc_to_pg.get_width() ); // cfg_account_5_tc_to_pg
    _count += cfg_account_5_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_5.all() , _count, _count -1 + sta_account_5.get_width() ); // sta_account_5
    _count += sta_account_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pause_timer.all() , _count, _count -1 + cfg_account_5_pause_timer.get_width() ); // cfg_account_5_pause_timer
    _count += cfg_account_5_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_mtu_table.all() , _count, _count -1 + cfg_account_5_mtu_table.get_width() ); // cfg_account_5_mtu_table
    _count += cfg_account_5_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_0.all() , _count, _count -1 + cfg_account_5_pg_0.get_width() ); // cfg_account_5_pg_0
    _count += cfg_account_5_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_1.all() , _count, _count -1 + cfg_account_5_pg_1.get_width() ); // cfg_account_5_pg_1
    _count += cfg_account_5_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_2.all() , _count, _count -1 + cfg_account_5_pg_2.get_width() ); // cfg_account_5_pg_2
    _count += cfg_account_5_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_3.all() , _count, _count -1 + cfg_account_5_pg_3.get_width() ); // cfg_account_5_pg_3
    _count += cfg_account_5_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_4.all() , _count, _count -1 + cfg_account_5_pg_4.get_width() ); // cfg_account_5_pg_4
    _count += cfg_account_5_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_5.all() , _count, _count -1 + cfg_account_5_pg_5.get_width() ); // cfg_account_5_pg_5
    _count += cfg_account_5_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_6.all() , _count, _count -1 + cfg_account_5_pg_6.get_width() ); // cfg_account_5_pg_6
    _count += cfg_account_5_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_5_pg_7.all() , _count, _count -1 + cfg_account_5_pg_7.get_width() ); // cfg_account_5_pg_7
    _count += cfg_account_5_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_5.all() , _count, _count -1 + cfg_oq_5.get_width() ); // cfg_oq_5
    _count += cfg_oq_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_5_arb_l1_selection.all() , _count, _count -1 + cfg_oq_5_arb_l1_selection.get_width() ); // cfg_oq_5_arb_l1_selection
    _count += cfg_oq_5_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_5_arb_l1_strict.all() , _count, _count -1 + cfg_oq_5_arb_l1_strict.get_width() ); // cfg_oq_5_arb_l1_strict
    _count += cfg_oq_5_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_5_arb_l2_selection.all() , _count, _count -1 + cfg_oq_5_arb_l2_selection.get_width() ); // cfg_oq_5_arb_l2_selection
    _count += cfg_oq_5_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_5_arb_l2_strict.all() , _count, _count -1 + cfg_oq_5_arb_l2_strict.get_width() ); // cfg_oq_5_arb_l2_strict
    _count += cfg_oq_5_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_6.all() , _count, _count -1 + cfg_write_control_6.get_width() ); // cfg_write_control_6
    _count += cfg_write_control_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_tc_to_pg.all() , _count, _count -1 + cfg_account_6_tc_to_pg.get_width() ); // cfg_account_6_tc_to_pg
    _count += cfg_account_6_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_6.all() , _count, _count -1 + sta_account_6.get_width() ); // sta_account_6
    _count += sta_account_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pause_timer.all() , _count, _count -1 + cfg_account_6_pause_timer.get_width() ); // cfg_account_6_pause_timer
    _count += cfg_account_6_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_mtu_table.all() , _count, _count -1 + cfg_account_6_mtu_table.get_width() ); // cfg_account_6_mtu_table
    _count += cfg_account_6_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_0.all() , _count, _count -1 + cfg_account_6_pg_0.get_width() ); // cfg_account_6_pg_0
    _count += cfg_account_6_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_1.all() , _count, _count -1 + cfg_account_6_pg_1.get_width() ); // cfg_account_6_pg_1
    _count += cfg_account_6_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_2.all() , _count, _count -1 + cfg_account_6_pg_2.get_width() ); // cfg_account_6_pg_2
    _count += cfg_account_6_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_3.all() , _count, _count -1 + cfg_account_6_pg_3.get_width() ); // cfg_account_6_pg_3
    _count += cfg_account_6_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_4.all() , _count, _count -1 + cfg_account_6_pg_4.get_width() ); // cfg_account_6_pg_4
    _count += cfg_account_6_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_5.all() , _count, _count -1 + cfg_account_6_pg_5.get_width() ); // cfg_account_6_pg_5
    _count += cfg_account_6_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_6.all() , _count, _count -1 + cfg_account_6_pg_6.get_width() ); // cfg_account_6_pg_6
    _count += cfg_account_6_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_6_pg_7.all() , _count, _count -1 + cfg_account_6_pg_7.get_width() ); // cfg_account_6_pg_7
    _count += cfg_account_6_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_6.all() , _count, _count -1 + cfg_oq_6.get_width() ); // cfg_oq_6
    _count += cfg_oq_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_6_arb_l1_selection.all() , _count, _count -1 + cfg_oq_6_arb_l1_selection.get_width() ); // cfg_oq_6_arb_l1_selection
    _count += cfg_oq_6_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_6_arb_l1_strict.all() , _count, _count -1 + cfg_oq_6_arb_l1_strict.get_width() ); // cfg_oq_6_arb_l1_strict
    _count += cfg_oq_6_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_6_arb_l2_selection.all() , _count, _count -1 + cfg_oq_6_arb_l2_selection.get_width() ); // cfg_oq_6_arb_l2_selection
    _count += cfg_oq_6_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_6_arb_l2_strict.all() , _count, _count -1 + cfg_oq_6_arb_l2_strict.get_width() ); // cfg_oq_6_arb_l2_strict
    _count += cfg_oq_6_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_7.all() , _count, _count -1 + cfg_write_control_7.get_width() ); // cfg_write_control_7
    _count += cfg_write_control_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_tc_to_pg.all() , _count, _count -1 + cfg_account_7_tc_to_pg.get_width() ); // cfg_account_7_tc_to_pg
    _count += cfg_account_7_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_7.all() , _count, _count -1 + sta_account_7.get_width() ); // sta_account_7
    _count += sta_account_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pause_timer.all() , _count, _count -1 + cfg_account_7_pause_timer.get_width() ); // cfg_account_7_pause_timer
    _count += cfg_account_7_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_mtu_table.all() , _count, _count -1 + cfg_account_7_mtu_table.get_width() ); // cfg_account_7_mtu_table
    _count += cfg_account_7_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_0.all() , _count, _count -1 + cfg_account_7_pg_0.get_width() ); // cfg_account_7_pg_0
    _count += cfg_account_7_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_1.all() , _count, _count -1 + cfg_account_7_pg_1.get_width() ); // cfg_account_7_pg_1
    _count += cfg_account_7_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_2.all() , _count, _count -1 + cfg_account_7_pg_2.get_width() ); // cfg_account_7_pg_2
    _count += cfg_account_7_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_3.all() , _count, _count -1 + cfg_account_7_pg_3.get_width() ); // cfg_account_7_pg_3
    _count += cfg_account_7_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_4.all() , _count, _count -1 + cfg_account_7_pg_4.get_width() ); // cfg_account_7_pg_4
    _count += cfg_account_7_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_5.all() , _count, _count -1 + cfg_account_7_pg_5.get_width() ); // cfg_account_7_pg_5
    _count += cfg_account_7_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_6.all() , _count, _count -1 + cfg_account_7_pg_6.get_width() ); // cfg_account_7_pg_6
    _count += cfg_account_7_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_7_pg_7.all() , _count, _count -1 + cfg_account_7_pg_7.get_width() ); // cfg_account_7_pg_7
    _count += cfg_account_7_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_7.all() , _count, _count -1 + cfg_oq_7.get_width() ); // cfg_oq_7
    _count += cfg_oq_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_7_arb_l1_selection.all() , _count, _count -1 + cfg_oq_7_arb_l1_selection.get_width() ); // cfg_oq_7_arb_l1_selection
    _count += cfg_oq_7_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_7_arb_l1_strict.all() , _count, _count -1 + cfg_oq_7_arb_l1_strict.get_width() ); // cfg_oq_7_arb_l1_strict
    _count += cfg_oq_7_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_7_arb_l2_selection.all() , _count, _count -1 + cfg_oq_7_arb_l2_selection.get_width() ); // cfg_oq_7_arb_l2_selection
    _count += cfg_oq_7_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_7_arb_l2_strict.all() , _count, _count -1 + cfg_oq_7_arb_l2_strict.get_width() ); // cfg_oq_7_arb_l2_strict
    _count += cfg_oq_7_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_8.all() , _count, _count -1 + cfg_write_control_8.get_width() ); // cfg_write_control_8
    _count += cfg_write_control_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_tc_to_pg.all() , _count, _count -1 + cfg_account_8_tc_to_pg.get_width() ); // cfg_account_8_tc_to_pg
    _count += cfg_account_8_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_8.all() , _count, _count -1 + sta_account_8.get_width() ); // sta_account_8
    _count += sta_account_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pause_timer.all() , _count, _count -1 + cfg_account_8_pause_timer.get_width() ); // cfg_account_8_pause_timer
    _count += cfg_account_8_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_mtu_table.all() , _count, _count -1 + cfg_account_8_mtu_table.get_width() ); // cfg_account_8_mtu_table
    _count += cfg_account_8_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_0.all() , _count, _count -1 + cfg_account_8_pg_0.get_width() ); // cfg_account_8_pg_0
    _count += cfg_account_8_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_1.all() , _count, _count -1 + cfg_account_8_pg_1.get_width() ); // cfg_account_8_pg_1
    _count += cfg_account_8_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_2.all() , _count, _count -1 + cfg_account_8_pg_2.get_width() ); // cfg_account_8_pg_2
    _count += cfg_account_8_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_3.all() , _count, _count -1 + cfg_account_8_pg_3.get_width() ); // cfg_account_8_pg_3
    _count += cfg_account_8_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_4.all() , _count, _count -1 + cfg_account_8_pg_4.get_width() ); // cfg_account_8_pg_4
    _count += cfg_account_8_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_5.all() , _count, _count -1 + cfg_account_8_pg_5.get_width() ); // cfg_account_8_pg_5
    _count += cfg_account_8_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_6.all() , _count, _count -1 + cfg_account_8_pg_6.get_width() ); // cfg_account_8_pg_6
    _count += cfg_account_8_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_8_pg_7.all() , _count, _count -1 + cfg_account_8_pg_7.get_width() ); // cfg_account_8_pg_7
    _count += cfg_account_8_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_8.all() , _count, _count -1 + cfg_oq_8.get_width() ); // cfg_oq_8
    _count += cfg_oq_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_8_arb_l1_selection.all() , _count, _count -1 + cfg_oq_8_arb_l1_selection.get_width() ); // cfg_oq_8_arb_l1_selection
    _count += cfg_oq_8_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_8_arb_l1_strict.all() , _count, _count -1 + cfg_oq_8_arb_l1_strict.get_width() ); // cfg_oq_8_arb_l1_strict
    _count += cfg_oq_8_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_8_arb_l2_selection.all() , _count, _count -1 + cfg_oq_8_arb_l2_selection.get_width() ); // cfg_oq_8_arb_l2_selection
    _count += cfg_oq_8_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_8_arb_l2_strict.all() , _count, _count -1 + cfg_oq_8_arb_l2_strict.get_width() ); // cfg_oq_8_arb_l2_strict
    _count += cfg_oq_8_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_9.all() , _count, _count -1 + cfg_write_control_9.get_width() ); // cfg_write_control_9
    _count += cfg_write_control_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_tc_to_pg.all() , _count, _count -1 + cfg_account_9_tc_to_pg.get_width() ); // cfg_account_9_tc_to_pg
    _count += cfg_account_9_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_9.all() , _count, _count -1 + sta_account_9.get_width() ); // sta_account_9
    _count += sta_account_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pause_timer.all() , _count, _count -1 + cfg_account_9_pause_timer.get_width() ); // cfg_account_9_pause_timer
    _count += cfg_account_9_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_mtu_table.all() , _count, _count -1 + cfg_account_9_mtu_table.get_width() ); // cfg_account_9_mtu_table
    _count += cfg_account_9_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_0.all() , _count, _count -1 + cfg_account_9_pg_0.get_width() ); // cfg_account_9_pg_0
    _count += cfg_account_9_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_1.all() , _count, _count -1 + cfg_account_9_pg_1.get_width() ); // cfg_account_9_pg_1
    _count += cfg_account_9_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_2.all() , _count, _count -1 + cfg_account_9_pg_2.get_width() ); // cfg_account_9_pg_2
    _count += cfg_account_9_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_3.all() , _count, _count -1 + cfg_account_9_pg_3.get_width() ); // cfg_account_9_pg_3
    _count += cfg_account_9_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_4.all() , _count, _count -1 + cfg_account_9_pg_4.get_width() ); // cfg_account_9_pg_4
    _count += cfg_account_9_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_5.all() , _count, _count -1 + cfg_account_9_pg_5.get_width() ); // cfg_account_9_pg_5
    _count += cfg_account_9_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_6.all() , _count, _count -1 + cfg_account_9_pg_6.get_width() ); // cfg_account_9_pg_6
    _count += cfg_account_9_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_7.all() , _count, _count -1 + cfg_account_9_pg_7.get_width() ); // cfg_account_9_pg_7
    _count += cfg_account_9_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_8.all() , _count, _count -1 + cfg_account_9_pg_8.get_width() ); // cfg_account_9_pg_8
    _count += cfg_account_9_pg_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_9.all() , _count, _count -1 + cfg_account_9_pg_9.get_width() ); // cfg_account_9_pg_9
    _count += cfg_account_9_pg_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_10.all() , _count, _count -1 + cfg_account_9_pg_10.get_width() ); // cfg_account_9_pg_10
    _count += cfg_account_9_pg_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_11.all() , _count, _count -1 + cfg_account_9_pg_11.get_width() ); // cfg_account_9_pg_11
    _count += cfg_account_9_pg_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_12.all() , _count, _count -1 + cfg_account_9_pg_12.get_width() ); // cfg_account_9_pg_12
    _count += cfg_account_9_pg_12.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_13.all() , _count, _count -1 + cfg_account_9_pg_13.get_width() ); // cfg_account_9_pg_13
    _count += cfg_account_9_pg_13.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_14.all() , _count, _count -1 + cfg_account_9_pg_14.get_width() ); // cfg_account_9_pg_14
    _count += cfg_account_9_pg_14.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_9_pg_15.all() , _count, _count -1 + cfg_account_9_pg_15.get_width() ); // cfg_account_9_pg_15
    _count += cfg_account_9_pg_15.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_9.all() , _count, _count -1 + cfg_oq_9.get_width() ); // cfg_oq_9
    _count += cfg_oq_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_9_arb_l1_selection.all() , _count, _count -1 + cfg_oq_9_arb_l1_selection.get_width() ); // cfg_oq_9_arb_l1_selection
    _count += cfg_oq_9_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_9_arb_l1_strict.all() , _count, _count -1 + cfg_oq_9_arb_l1_strict.get_width() ); // cfg_oq_9_arb_l1_strict
    _count += cfg_oq_9_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_9_arb_l2_selection.all() , _count, _count -1 + cfg_oq_9_arb_l2_selection.get_width() ); // cfg_oq_9_arb_l2_selection
    _count += cfg_oq_9_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_9_arb_l2_strict.all() , _count, _count -1 + cfg_oq_9_arb_l2_strict.get_width() ); // cfg_oq_9_arb_l2_strict
    _count += cfg_oq_9_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_10.all() , _count, _count -1 + cfg_write_control_10.get_width() ); // cfg_write_control_10
    _count += cfg_write_control_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_tc_to_pg.all() , _count, _count -1 + cfg_account_10_tc_to_pg.get_width() ); // cfg_account_10_tc_to_pg
    _count += cfg_account_10_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_10.all() , _count, _count -1 + sta_account_10.get_width() ); // sta_account_10
    _count += sta_account_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pause_timer.all() , _count, _count -1 + cfg_account_10_pause_timer.get_width() ); // cfg_account_10_pause_timer
    _count += cfg_account_10_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_mtu_table.all() , _count, _count -1 + cfg_account_10_mtu_table.get_width() ); // cfg_account_10_mtu_table
    _count += cfg_account_10_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_0.all() , _count, _count -1 + cfg_account_10_pg_0.get_width() ); // cfg_account_10_pg_0
    _count += cfg_account_10_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_1.all() , _count, _count -1 + cfg_account_10_pg_1.get_width() ); // cfg_account_10_pg_1
    _count += cfg_account_10_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_2.all() , _count, _count -1 + cfg_account_10_pg_2.get_width() ); // cfg_account_10_pg_2
    _count += cfg_account_10_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_3.all() , _count, _count -1 + cfg_account_10_pg_3.get_width() ); // cfg_account_10_pg_3
    _count += cfg_account_10_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_4.all() , _count, _count -1 + cfg_account_10_pg_4.get_width() ); // cfg_account_10_pg_4
    _count += cfg_account_10_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_5.all() , _count, _count -1 + cfg_account_10_pg_5.get_width() ); // cfg_account_10_pg_5
    _count += cfg_account_10_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_6.all() , _count, _count -1 + cfg_account_10_pg_6.get_width() ); // cfg_account_10_pg_6
    _count += cfg_account_10_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_7.all() , _count, _count -1 + cfg_account_10_pg_7.get_width() ); // cfg_account_10_pg_7
    _count += cfg_account_10_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_8.all() , _count, _count -1 + cfg_account_10_pg_8.get_width() ); // cfg_account_10_pg_8
    _count += cfg_account_10_pg_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_9.all() , _count, _count -1 + cfg_account_10_pg_9.get_width() ); // cfg_account_10_pg_9
    _count += cfg_account_10_pg_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_10.all() , _count, _count -1 + cfg_account_10_pg_10.get_width() ); // cfg_account_10_pg_10
    _count += cfg_account_10_pg_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_11.all() , _count, _count -1 + cfg_account_10_pg_11.get_width() ); // cfg_account_10_pg_11
    _count += cfg_account_10_pg_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_12.all() , _count, _count -1 + cfg_account_10_pg_12.get_width() ); // cfg_account_10_pg_12
    _count += cfg_account_10_pg_12.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_13.all() , _count, _count -1 + cfg_account_10_pg_13.get_width() ); // cfg_account_10_pg_13
    _count += cfg_account_10_pg_13.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_14.all() , _count, _count -1 + cfg_account_10_pg_14.get_width() ); // cfg_account_10_pg_14
    _count += cfg_account_10_pg_14.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_15.all() , _count, _count -1 + cfg_account_10_pg_15.get_width() ); // cfg_account_10_pg_15
    _count += cfg_account_10_pg_15.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_16.all() , _count, _count -1 + cfg_account_10_pg_16.get_width() ); // cfg_account_10_pg_16
    _count += cfg_account_10_pg_16.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_17.all() , _count, _count -1 + cfg_account_10_pg_17.get_width() ); // cfg_account_10_pg_17
    _count += cfg_account_10_pg_17.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_18.all() , _count, _count -1 + cfg_account_10_pg_18.get_width() ); // cfg_account_10_pg_18
    _count += cfg_account_10_pg_18.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_19.all() , _count, _count -1 + cfg_account_10_pg_19.get_width() ); // cfg_account_10_pg_19
    _count += cfg_account_10_pg_19.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_20.all() , _count, _count -1 + cfg_account_10_pg_20.get_width() ); // cfg_account_10_pg_20
    _count += cfg_account_10_pg_20.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_21.all() , _count, _count -1 + cfg_account_10_pg_21.get_width() ); // cfg_account_10_pg_21
    _count += cfg_account_10_pg_21.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_22.all() , _count, _count -1 + cfg_account_10_pg_22.get_width() ); // cfg_account_10_pg_22
    _count += cfg_account_10_pg_22.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_23.all() , _count, _count -1 + cfg_account_10_pg_23.get_width() ); // cfg_account_10_pg_23
    _count += cfg_account_10_pg_23.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_24.all() , _count, _count -1 + cfg_account_10_pg_24.get_width() ); // cfg_account_10_pg_24
    _count += cfg_account_10_pg_24.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_25.all() , _count, _count -1 + cfg_account_10_pg_25.get_width() ); // cfg_account_10_pg_25
    _count += cfg_account_10_pg_25.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_26.all() , _count, _count -1 + cfg_account_10_pg_26.get_width() ); // cfg_account_10_pg_26
    _count += cfg_account_10_pg_26.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_27.all() , _count, _count -1 + cfg_account_10_pg_27.get_width() ); // cfg_account_10_pg_27
    _count += cfg_account_10_pg_27.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_28.all() , _count, _count -1 + cfg_account_10_pg_28.get_width() ); // cfg_account_10_pg_28
    _count += cfg_account_10_pg_28.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_29.all() , _count, _count -1 + cfg_account_10_pg_29.get_width() ); // cfg_account_10_pg_29
    _count += cfg_account_10_pg_29.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_30.all() , _count, _count -1 + cfg_account_10_pg_30.get_width() ); // cfg_account_10_pg_30
    _count += cfg_account_10_pg_30.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_10_pg_31.all() , _count, _count -1 + cfg_account_10_pg_31.get_width() ); // cfg_account_10_pg_31
    _count += cfg_account_10_pg_31.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_10.all() , _count, _count -1 + cfg_oq_10.get_width() ); // cfg_oq_10
    _count += cfg_oq_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_10_arb_l1_selection.all() , _count, _count -1 + cfg_oq_10_arb_l1_selection.get_width() ); // cfg_oq_10_arb_l1_selection
    _count += cfg_oq_10_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_10_arb_l1_strict.all() , _count, _count -1 + cfg_oq_10_arb_l1_strict.get_width() ); // cfg_oq_10_arb_l1_strict
    _count += cfg_oq_10_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_10_arb_l2_selection.all() , _count, _count -1 + cfg_oq_10_arb_l2_selection.get_width() ); // cfg_oq_10_arb_l2_selection
    _count += cfg_oq_10_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_10_arb_l2_strict.all() , _count, _count -1 + cfg_oq_10_arb_l2_strict.get_width() ); // cfg_oq_10_arb_l2_strict
    _count += cfg_oq_10_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_write_control_11.all() , _count, _count -1 + cfg_write_control_11.get_width() ); // cfg_write_control_11
    _count += cfg_write_control_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_tc_to_pg.all() , _count, _count -1 + cfg_account_11_tc_to_pg.get_width() ); // cfg_account_11_tc_to_pg
    _count += cfg_account_11_tc_to_pg.get_width();
    ret_val = hlp.set_slc(ret_val, sta_account_11.all() , _count, _count -1 + sta_account_11.get_width() ); // sta_account_11
    _count += sta_account_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pause_timer.all() , _count, _count -1 + cfg_account_11_pause_timer.get_width() ); // cfg_account_11_pause_timer
    _count += cfg_account_11_pause_timer.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_mtu_table.all() , _count, _count -1 + cfg_account_11_mtu_table.get_width() ); // cfg_account_11_mtu_table
    _count += cfg_account_11_mtu_table.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_0.all() , _count, _count -1 + cfg_account_11_pg_0.get_width() ); // cfg_account_11_pg_0
    _count += cfg_account_11_pg_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_1.all() , _count, _count -1 + cfg_account_11_pg_1.get_width() ); // cfg_account_11_pg_1
    _count += cfg_account_11_pg_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_2.all() , _count, _count -1 + cfg_account_11_pg_2.get_width() ); // cfg_account_11_pg_2
    _count += cfg_account_11_pg_2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_3.all() , _count, _count -1 + cfg_account_11_pg_3.get_width() ); // cfg_account_11_pg_3
    _count += cfg_account_11_pg_3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_4.all() , _count, _count -1 + cfg_account_11_pg_4.get_width() ); // cfg_account_11_pg_4
    _count += cfg_account_11_pg_4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_5.all() , _count, _count -1 + cfg_account_11_pg_5.get_width() ); // cfg_account_11_pg_5
    _count += cfg_account_11_pg_5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_6.all() , _count, _count -1 + cfg_account_11_pg_6.get_width() ); // cfg_account_11_pg_6
    _count += cfg_account_11_pg_6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_7.all() , _count, _count -1 + cfg_account_11_pg_7.get_width() ); // cfg_account_11_pg_7
    _count += cfg_account_11_pg_7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_8.all() , _count, _count -1 + cfg_account_11_pg_8.get_width() ); // cfg_account_11_pg_8
    _count += cfg_account_11_pg_8.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_9.all() , _count, _count -1 + cfg_account_11_pg_9.get_width() ); // cfg_account_11_pg_9
    _count += cfg_account_11_pg_9.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_10.all() , _count, _count -1 + cfg_account_11_pg_10.get_width() ); // cfg_account_11_pg_10
    _count += cfg_account_11_pg_10.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_11.all() , _count, _count -1 + cfg_account_11_pg_11.get_width() ); // cfg_account_11_pg_11
    _count += cfg_account_11_pg_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_12.all() , _count, _count -1 + cfg_account_11_pg_12.get_width() ); // cfg_account_11_pg_12
    _count += cfg_account_11_pg_12.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_13.all() , _count, _count -1 + cfg_account_11_pg_13.get_width() ); // cfg_account_11_pg_13
    _count += cfg_account_11_pg_13.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_14.all() , _count, _count -1 + cfg_account_11_pg_14.get_width() ); // cfg_account_11_pg_14
    _count += cfg_account_11_pg_14.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_15.all() , _count, _count -1 + cfg_account_11_pg_15.get_width() ); // cfg_account_11_pg_15
    _count += cfg_account_11_pg_15.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_16.all() , _count, _count -1 + cfg_account_11_pg_16.get_width() ); // cfg_account_11_pg_16
    _count += cfg_account_11_pg_16.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_17.all() , _count, _count -1 + cfg_account_11_pg_17.get_width() ); // cfg_account_11_pg_17
    _count += cfg_account_11_pg_17.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_18.all() , _count, _count -1 + cfg_account_11_pg_18.get_width() ); // cfg_account_11_pg_18
    _count += cfg_account_11_pg_18.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_19.all() , _count, _count -1 + cfg_account_11_pg_19.get_width() ); // cfg_account_11_pg_19
    _count += cfg_account_11_pg_19.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_20.all() , _count, _count -1 + cfg_account_11_pg_20.get_width() ); // cfg_account_11_pg_20
    _count += cfg_account_11_pg_20.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_21.all() , _count, _count -1 + cfg_account_11_pg_21.get_width() ); // cfg_account_11_pg_21
    _count += cfg_account_11_pg_21.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_22.all() , _count, _count -1 + cfg_account_11_pg_22.get_width() ); // cfg_account_11_pg_22
    _count += cfg_account_11_pg_22.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_23.all() , _count, _count -1 + cfg_account_11_pg_23.get_width() ); // cfg_account_11_pg_23
    _count += cfg_account_11_pg_23.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_24.all() , _count, _count -1 + cfg_account_11_pg_24.get_width() ); // cfg_account_11_pg_24
    _count += cfg_account_11_pg_24.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_25.all() , _count, _count -1 + cfg_account_11_pg_25.get_width() ); // cfg_account_11_pg_25
    _count += cfg_account_11_pg_25.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_26.all() , _count, _count -1 + cfg_account_11_pg_26.get_width() ); // cfg_account_11_pg_26
    _count += cfg_account_11_pg_26.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_27.all() , _count, _count -1 + cfg_account_11_pg_27.get_width() ); // cfg_account_11_pg_27
    _count += cfg_account_11_pg_27.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_28.all() , _count, _count -1 + cfg_account_11_pg_28.get_width() ); // cfg_account_11_pg_28
    _count += cfg_account_11_pg_28.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_29.all() , _count, _count -1 + cfg_account_11_pg_29.get_width() ); // cfg_account_11_pg_29
    _count += cfg_account_11_pg_29.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_30.all() , _count, _count -1 + cfg_account_11_pg_30.get_width() ); // cfg_account_11_pg_30
    _count += cfg_account_11_pg_30.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_account_11_pg_31.all() , _count, _count -1 + cfg_account_11_pg_31.get_width() ); // cfg_account_11_pg_31
    _count += cfg_account_11_pg_31.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_11.all() , _count, _count -1 + cfg_oq_11.get_width() ); // cfg_oq_11
    _count += cfg_oq_11.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_11_arb_l1_selection.all() , _count, _count -1 + cfg_oq_11_arb_l1_selection.get_width() ); // cfg_oq_11_arb_l1_selection
    _count += cfg_oq_11_arb_l1_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_11_arb_l1_strict.all() , _count, _count -1 + cfg_oq_11_arb_l1_strict.get_width() ); // cfg_oq_11_arb_l1_strict
    _count += cfg_oq_11_arb_l1_strict.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_11_arb_l2_selection.all() , _count, _count -1 + cfg_oq_11_arb_l2_selection.get_width() ); // cfg_oq_11_arb_l2_selection
    _count += cfg_oq_11_arb_l2_selection.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_oq_11_arb_l2_strict.all() , _count, _count -1 + cfg_oq_11_arb_l2_strict.get_width() ); // cfg_oq_11_arb_l2_strict
    _count += cfg_oq_11_arb_l2_strict.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_oq.all() , _count, _count -1 + sta_ecc_oq.get_width() ); // sta_ecc_oq
    _count += sta_ecc_oq.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_pack.all() , _count, _count -1 + sta_ecc_pack.get_width() ); // sta_ecc_pack
    _count += sta_ecc_pack.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_rwr.all() , _count, _count -1 + sta_ecc_rwr.get_width() ); // sta_ecc_rwr
    _count += sta_ecc_rwr.get_width();
    ret_val = hlp.set_slc(ret_val, sta_fc_mgr_0.all() , _count, _count -1 + sta_fc_mgr_0.get_width() ); // sta_fc_mgr_0
    _count += sta_fc_mgr_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_fc_mgr_0.all() , _count, _count -1 + cfg_fc_mgr_0.get_width() ); // cfg_fc_mgr_0
    _count += cfg_fc_mgr_0.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_fc_0.all() , _count, _count -1 + sta_ecc_fc_0.get_width() ); // sta_ecc_fc_0
    _count += sta_ecc_fc_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_ll_0.all() , _count, _count -1 + cfg_ll_0.get_width() ); // cfg_ll_0
    _count += cfg_ll_0.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_ll_0.all() , _count, _count -1 + sta_ecc_ll_0.get_width() ); // sta_ecc_ll_0
    _count += sta_ecc_ll_0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_desc_0.all() , _count, _count -1 + cfg_desc_0.get_width() ); // cfg_desc_0
    _count += cfg_desc_0.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_desc_0.all() , _count, _count -1 + sta_ecc_desc_0.get_width() ); // sta_ecc_desc_0
    _count += sta_ecc_desc_0.get_width();
    ret_val = hlp.set_slc(ret_val, sta_fc_mgr_1.all() , _count, _count -1 + sta_fc_mgr_1.get_width() ); // sta_fc_mgr_1
    _count += sta_fc_mgr_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_fc_mgr_1.all() , _count, _count -1 + cfg_fc_mgr_1.get_width() ); // cfg_fc_mgr_1
    _count += cfg_fc_mgr_1.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_fc_1.all() , _count, _count -1 + sta_ecc_fc_1.get_width() ); // sta_ecc_fc_1
    _count += sta_ecc_fc_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_ll_1.all() , _count, _count -1 + cfg_ll_1.get_width() ); // cfg_ll_1
    _count += cfg_ll_1.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_ll_1.all() , _count, _count -1 + sta_ecc_ll_1.get_width() ); // sta_ecc_ll_1
    _count += sta_ecc_ll_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_desc_1.all() , _count, _count -1 + cfg_desc_1.get_width() ); // cfg_desc_1
    _count += cfg_desc_1.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_desc_1.all() , _count, _count -1 + sta_ecc_desc_1.get_width() ); // sta_ecc_desc_1
    _count += sta_ecc_desc_1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_gc.all() , _count, _count -1 + cfg_gc.get_width() ); // cfg_gc
    _count += cfg_gc.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_rc.all() , _count, _count -1 + cfg_rc.get_width() ); // cfg_rc
    _count += cfg_rc.get_width();
    ret_val = hlp.set_slc(ret_val, sta_rc.all() , _count, _count -1 + sta_rc.get_width() ); // sta_rc
    _count += sta_rc.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_sched.all() , _count, _count -1 + cfg_sched.get_width() ); // cfg_sched
    _count += cfg_sched.get_width();
    ret_val = hlp.set_slc(ret_val, sta_sched.all() , _count, _count -1 + sta_sched.get_width() ); // sta_sched
    _count += sta_sched.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_island_control.all() , _count, _count -1 + cfg_island_control.get_width() ); // cfg_island_control
    _count += cfg_island_control.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_rpl.all() , _count, _count -1 + cfg_rpl.get_width() ); // cfg_rpl
    _count += cfg_rpl.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser0.all() , _count, _count -1 + cfg_parser0.get_width() ); // cfg_parser0
    _count += cfg_parser0.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser1.all() , _count, _count -1 + cfg_parser1.get_width() ); // cfg_parser1
    _count += cfg_parser1.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser2.all() , _count, _count -1 + cfg_parser2.get_width() ); // cfg_parser2
    _count += cfg_parser2.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser3.all() , _count, _count -1 + cfg_parser3.get_width() ); // cfg_parser3
    _count += cfg_parser3.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser4.all() , _count, _count -1 + cfg_parser4.get_width() ); // cfg_parser4
    _count += cfg_parser4.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser5.all() , _count, _count -1 + cfg_parser5.get_width() ); // cfg_parser5
    _count += cfg_parser5.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser6.all() , _count, _count -1 + cfg_parser6.get_width() ); // cfg_parser6
    _count += cfg_parser6.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser7.all() , _count, _count -1 + cfg_parser7.get_width() ); // cfg_parser7
    _count += cfg_parser7.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_parser8.all() , _count, _count -1 + cfg_parser8.get_width() ); // cfg_parser8
    _count += cfg_parser8.get_width();
    // cnt_flits
    for(int ii = 0; ii < 12; ii++) {
         ret_val = hlp.set_slc(ret_val, cnt_flits[ii].all() , _count, _count -1 + cnt_flits[ii].get_width() );
        _count += cnt_flits[ii].get_width();
    }
    // cnt_write_error
    for(int ii = 0; ii < 12; ii++) {
         ret_val = hlp.set_slc(ret_val, cnt_write_error[ii].all() , _count, _count -1 + cnt_write_error[ii].get_width() );
        _count += cnt_write_error[ii].get_width();
    }
    // sta_oq
    for(int ii = 0; ii < 12; ii++) {
         ret_val = hlp.set_slc(ret_val, sta_oq[ii].all() , _count, _count -1 + sta_oq[ii].get_width() );
        _count += sta_oq[ii].get_width();
    }
    ret_val = hlp.set_slc(ret_val, sta_oq_12.all() , _count, _count -1 + sta_oq_12.get_width() ); // sta_oq_12
    _count += sta_oq_12.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_dhs.all() , _count, _count -1 + cfg_dhs.get_width() ); // cfg_dhs
    _count += cfg_dhs.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_debug_port.all() , _count, _count -1 + cfg_debug_port.get_width() ); // cfg_debug_port
    _count += cfg_debug_port.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_spare.all() , _count, _count -1 + cfg_spare.get_width() ); // cfg_spare
    _count += cfg_spare.get_width();
    ret_val = hlp.set_slc(ret_val, sta_ecc_sideband.all() , _count, _count -1 + sta_ecc_sideband.get_width() ); // sta_ecc_sideband
    _count += sta_ecc_sideband.get_width();
    ret_val = hlp.set_slc(ret_val, sta_rpl_err.all() , _count, _count -1 + sta_rpl_err.get_width() ); // sta_rpl_err
    _count += sta_rpl_err.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_tail_drop.all() , _count, _count -1 + cfg_tail_drop.get_width() ); // cfg_tail_drop
    _count += cfg_tail_drop.get_width();
    ret_val = hlp.set_slc(ret_val, cfg_src_port_to_lif_map.all() , _count, _count -1 + cfg_src_port_to_lif_map.get_width() ); // cfg_src_port_to_lif_map
    _count += cfg_src_port_to_lif_map.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_0.all() , _count, _count -1 + dhs_oq_0.get_width() ); // dhs_oq_0
    _count += dhs_oq_0.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_1.all() , _count, _count -1 + dhs_oq_1.get_width() ); // dhs_oq_1
    _count += dhs_oq_1.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_2.all() , _count, _count -1 + dhs_oq_2.get_width() ); // dhs_oq_2
    _count += dhs_oq_2.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_3.all() , _count, _count -1 + dhs_oq_3.get_width() ); // dhs_oq_3
    _count += dhs_oq_3.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_4.all() , _count, _count -1 + dhs_oq_4.get_width() ); // dhs_oq_4
    _count += dhs_oq_4.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_5.all() , _count, _count -1 + dhs_oq_5.get_width() ); // dhs_oq_5
    _count += dhs_oq_5.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_6.all() , _count, _count -1 + dhs_oq_6.get_width() ); // dhs_oq_6
    _count += dhs_oq_6.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_7.all() , _count, _count -1 + dhs_oq_7.get_width() ); // dhs_oq_7
    _count += dhs_oq_7.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_8.all() , _count, _count -1 + dhs_oq_8.get_width() ); // dhs_oq_8
    _count += dhs_oq_8.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_9.all() , _count, _count -1 + dhs_oq_9.get_width() ); // dhs_oq_9
    _count += dhs_oq_9.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_10.all() , _count, _count -1 + dhs_oq_10.get_width() ); // dhs_oq_10
    _count += dhs_oq_10.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_oq_11.all() , _count, _count -1 + dhs_oq_11.get_width() ); // dhs_oq_11
    _count += dhs_oq_11.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_fc_0.all() , _count, _count -1 + dhs_fc_0.get_width() ); // dhs_fc_0
    _count += dhs_fc_0.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_ll_0.all() , _count, _count -1 + dhs_ll_0.get_width() ); // dhs_ll_0
    _count += dhs_ll_0.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_desc_0.all() , _count, _count -1 + dhs_desc_0.get_width() ); // dhs_desc_0
    _count += dhs_desc_0.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_fc_1.all() , _count, _count -1 + dhs_fc_1.get_width() ); // dhs_fc_1
    _count += dhs_fc_1.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_ll_1.all() , _count, _count -1 + dhs_ll_1.get_width() ); // dhs_ll_1
    _count += dhs_ll_1.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_desc_1.all() , _count, _count -1 + dhs_desc_1.get_width() ); // dhs_desc_1
    _count += dhs_desc_1.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_gc.all() , _count, _count -1 + dhs_gc.get_width() ); // dhs_gc
    _count += dhs_gc.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_rc.all() , _count, _count -1 + dhs_rc.get_width() ); // dhs_rc
    _count += dhs_rc.get_width();
    ret_val = hlp.set_slc(ret_val, dhs_sched.all() , _count, _count -1 + dhs_sched.get_width() ); // dhs_sched
    _count += dhs_sched.get_width();
    return ret_val;
}

void cap_pbc_csr_dhs_sched_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("current_credit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_sched_entry_t::current_credit);
            register_get_func("current_credit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_sched_entry_t::current_credit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("quanta", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_sched_entry_t::quanta);
            register_get_func("quanta", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_sched_entry_t::quanta);
        }
        #endif
    
}

void cap_pbc_csr_dhs_sched_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_rc_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count0);
            register_get_func("count0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count1);
            register_get_func("count1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count2);
            register_get_func("count2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count3);
            register_get_func("count3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count4);
            register_get_func("count4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count5);
            register_get_func("count5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count6);
            register_get_func("count6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("count7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count7);
            register_get_func("count7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_rc_entry_t::count7);
        }
        #endif
    
}

void cap_pbc_csr_dhs_rc_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_gc_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_gc_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_gc_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_gc_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_desc_1_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("src_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::src_port);
            register_get_func("src_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::src_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("refcount", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::refcount);
            register_get_func("refcount", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::refcount);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("input_queue", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::input_queue);
            register_get_func("input_queue", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::input_queue);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop_pack", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::eop_pack);
            register_get_func("eop_pack", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::eop_pack);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("err_pack", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::err_pack);
            register_get_func("err_pack", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_1_entry_t::err_pack);
        }
        #endif
    
}

void cap_pbc_csr_dhs_desc_1_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_ll_1_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::next_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::eop);
            register_get_func("eop", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::eop);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("full", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::full);
            register_get_func("full", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::full);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ge256B", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::ge256B);
            register_get_func("ge256B", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::ge256B);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("err", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::err);
            register_get_func("err", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_1_entry_t::err);
        }
        #endif
    
}

void cap_pbc_csr_dhs_ll_1_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_fc_1_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cell0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_fc_1_entry_t::cell0);
            register_get_func("cell0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_fc_1_entry_t::cell0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cell1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_fc_1_entry_t::cell1);
            register_get_func("cell1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_fc_1_entry_t::cell1);
        }
        #endif
    
}

void cap_pbc_csr_dhs_fc_1_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_desc_0_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("src_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::src_port);
            register_get_func("src_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::src_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("refcount", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::refcount);
            register_get_func("refcount", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::refcount);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("input_queue", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::input_queue);
            register_get_func("input_queue", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::input_queue);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop_pack", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::eop_pack);
            register_get_func("eop_pack", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::eop_pack);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("err_pack", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::err_pack);
            register_get_func("err_pack", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_desc_0_entry_t::err_pack);
        }
        #endif
    
}

void cap_pbc_csr_dhs_desc_0_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_ll_0_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::next_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::eop);
            register_get_func("eop", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::eop);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("full", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::full);
            register_get_func("full", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::full);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ge256B", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::ge256B);
            register_get_func("ge256B", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::ge256B);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("err", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::err);
            register_get_func("err", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_ll_0_entry_t::err);
        }
        #endif
    
}

void cap_pbc_csr_dhs_ll_0_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_fc_0_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cell0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_fc_0_entry_t::cell0);
            register_get_func("cell0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_fc_0_entry_t::cell0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cell1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_fc_0_entry_t::cell1);
            register_get_func("cell1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_fc_0_entry_t::cell1);
        }
        #endif
    
}

void cap_pbc_csr_dhs_fc_0_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_11_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_11_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_11_entry_t::next_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pack_info", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_11_entry_t::pack_info);
            register_get_func("pack_info", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_11_entry_t::pack_info);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_11_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_10_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::next_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rpl_ptr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::rpl_ptr);
            register_get_func("rpl_ptr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::rpl_ptr);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rpl_en", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::rpl_en);
            register_get_func("rpl_en", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_10_entry_t::rpl_en);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_10_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_9_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_9_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_9_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_9_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_8_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_8_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_8_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_8_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_7_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_7_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_7_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_7_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_6_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_6_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_6_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_6_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_5_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_5_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_5_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_5_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_4_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_4_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_4_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_4_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_3_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_3_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_3_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_3_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_2_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_2_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_2_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_2_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_1_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_1_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_1_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_1_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_dhs_oq_0_entry_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("next_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_dhs_oq_0_entry_t::next_cell);
            register_get_func("next_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_dhs_oq_0_entry_t::next_cell);
        }
        #endif
    
}

void cap_pbc_csr_dhs_oq_0_t::init() {

    entry.set_attributes(this,"entry", 0x0 );
}

void cap_pbc_csr_cfg_src_port_to_lif_map_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_0);
            register_get_func("entry_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_1);
            register_get_func("entry_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_2);
            register_get_func("entry_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_3);
            register_get_func("entry_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_4);
            register_get_func("entry_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_5);
            register_get_func("entry_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_6);
            register_get_func("entry_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_7);
            register_get_func("entry_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("entry_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_8);
            register_get_func("entry_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_8);
        }
        #endif
    
}

void cap_pbc_csr_cfg_tail_drop_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cpu_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_tail_drop_t::cpu_threshold);
            register_get_func("cpu_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_tail_drop_t::cpu_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("span_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_tail_drop_t::span_threshold);
            register_get_func("span_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_tail_drop_t::span_threshold);
        }
        #endif
    
    set_reset_val(cpp_int("0x3e803e8"));
    all(get_reset_val());
}

void cap_pbc_csr_sta_rpl_err_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rid", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rpl_err_t::rid);
            register_get_func("rid", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rpl_err_t::rid);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rresp", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rpl_err_t::rresp);
            register_get_func("rresp", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rpl_err_t::rresp);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_sideband_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_sideband_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_spare_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("data", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_spare_t::data);
            register_get_func("data", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_spare_t::data);
        }
        #endif
    
    set_reset_val(cpp_int("0xdeadbeef"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_debug_port_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_debug_port_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_debug_port_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("select", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_debug_port_t::select);
            register_get_func("select", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_debug_port_t::select);
        }
        #endif
    
}

void cap_pbc_csr_cfg_dhs_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("address", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_dhs_t::address);
            register_get_func("address", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_dhs_t::address);
        }
        #endif
    
}

void cap_pbc_csr_sta_oq_12_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("depth_value", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_oq_12_t::depth_value);
            register_get_func("depth_value", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_oq_12_t::depth_value);
        }
        #endif
    
}

void cap_pbc_csr_sta_oq_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("depth_value", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_oq_t::depth_value);
            register_get_func("depth_value", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_oq_t::depth_value);
        }
        #endif
    
}

void cap_pbc_csr_cnt_write_error_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("discarded", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::discarded);
            register_get_func("discarded", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::discarded);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("admitted", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::admitted);
            register_get_func("admitted", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::admitted);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("intrinsic_drop", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::intrinsic_drop);
            register_get_func("intrinsic_drop", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::intrinsic_drop);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("out_of_cells", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_cells);
            register_get_func("out_of_cells", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_cells);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("out_of_credit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_credit);
            register_get_func("out_of_credit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_credit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("truncation", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::truncation);
            register_get_func("truncation", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::truncation);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("port_disabled", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::port_disabled);
            register_get_func("port_disabled", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::port_disabled);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("out_of_cells1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_cells1);
            register_get_func("out_of_cells1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::out_of_cells1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("tail_drop_cpu", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::tail_drop_cpu);
            register_get_func("tail_drop_cpu", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::tail_drop_cpu);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("tail_drop_span", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::tail_drop_span);
            register_get_func("tail_drop_span", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::tail_drop_span);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enqueue", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_write_error_t::enqueue);
            register_get_func("enqueue", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_write_error_t::enqueue);
        }
        #endif
    
}

void cap_pbc_csr_cnt_flits_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("sop_in", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_flits_t::sop_in);
            register_get_func("sop_in", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_flits_t::sop_in);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop_in", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_flits_t::eop_in);
            register_get_func("eop_in", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_flits_t::eop_in);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("sop_out", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_flits_t::sop_out);
            register_get_func("sop_out", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_flits_t::sop_out);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("eop_out", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cnt_flits_t::eop_out);
            register_get_func("eop_out", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cnt_flits_t::eop_out);
        }
        #endif
    
}

void cap_pbc_csr_cfg_parser8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser8_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser8_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser7_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser7_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser6_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser6_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser5_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser5_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser4_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser4_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser3_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser3_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser2_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser2_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser1_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser1_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_parser0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dot1q_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::dot1q_type);
            register_get_func("dot1q_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::dot1q_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv4_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::ipv4_type);
            register_get_func("ipv4_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::ipv4_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipv6_type", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::ipv6_type);
            register_get_func("ipv6_type", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::ipv6_type);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_ip", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::use_ip);
            register_get_func("use_ip", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::use_ip);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("use_dot1q", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::use_dot1q);
            register_get_func("use_dot1q", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::use_dot1q);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_cos", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::default_cos);
            register_get_func("default_cos", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::default_cos);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("default_port", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::default_port);
            register_get_func("default_port", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::default_port);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("oq_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::oq_map);
            register_get_func("oq_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::oq_map);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dscp_map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_parser0_t::dscp_map);
            register_get_func("dscp_map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_parser0_t::dscp_map);
        }
        #endif
    
    set_reset_val(cpp_int("0x16086dd08008100"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_rpl_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("base", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rpl_t::base);
            register_get_func("base", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rpl_t::base);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("token_size", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rpl_t::token_size);
            register_get_func("token_size", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rpl_t::token_size);
        }
        #endif
    
}

void cap_pbc_csr_cfg_island_control_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("map", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_island_control_t::map);
            register_get_func("map", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_island_control_t::map);
        }
        #endif
    
}

void cap_pbc_csr_sta_sched_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_uncorrectable);
            register_get_func("ecc_uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_correctable);
            register_get_func("ecc_correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_syndrome);
            register_get_func("ecc_syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_addr);
            register_get_func("ecc_addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_sched_t::ecc_addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_sched_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable_wrr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::enable_wrr);
            register_get_func("enable_wrr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::enable_wrr);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_selection", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::dhs_selection);
            register_get_func("dhs_selection", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::dhs_selection);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("timer", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_sched_t::timer);
            register_get_func("timer", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_sched_t::timer);
        }
        #endif
    
}

void cap_pbc_csr_sta_rc_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_done", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rc_t::init_done);
            register_get_func("init_done", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rc_t::init_done);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_uncorrectable);
            register_get_func("ecc_uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_correctable);
            register_get_func("ecc_correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_syndrome);
            register_get_func("ecc_syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_addr);
            register_get_func("ecc_addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_rc_t::ecc_addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_rc_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_start", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rc_t::init_start);
            register_get_func("init_start", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rc_t::init_start);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_reset", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rc_t::init_reset);
            register_get_func("init_reset", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rc_t::init_reset);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rc_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rc_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rc_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rc_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_rc_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_rc_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_cfg_gc_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_gc_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_gc_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_gc_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_gc_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_gc_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_gc_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_desc_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_1_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_desc_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_1_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_1_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_1_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_1_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_1_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_1_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_ll_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_1_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_ll_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_1_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_1_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_1_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_1_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_1_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_1_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_fc_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_1_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_fc_mgr_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_start", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::init_start);
            register_get_func("init_start", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::init_start);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_reset", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::init_reset);
            register_get_func("init_reset", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::init_reset);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("max_row", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::max_row);
            register_get_func("max_row", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::max_row);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("min_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::min_cell);
            register_get_func("min_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::min_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_1_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_fc_mgr_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cells_available", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_fc_mgr_1_t::cells_available);
            register_get_func("cells_available", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_fc_mgr_1_t::cells_available);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_done", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_fc_mgr_1_t::init_done);
            register_get_func("init_done", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_fc_mgr_1_t::init_done);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_desc_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_desc_0_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_desc_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_0_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_0_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_0_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_0_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_desc_0_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_desc_0_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_ll_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_ll_0_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_ll_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_0_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_0_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_0_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_0_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_ll_0_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_ll_0_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_fc_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_fc_0_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_fc_mgr_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_start", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::init_start);
            register_get_func("init_start", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::init_start);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_reset", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::init_reset);
            register_get_func("init_reset", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::init_reset);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("max_row", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::max_row);
            register_get_func("max_row", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::max_row);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("min_cell", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::min_cell);
            register_get_func("min_cell", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::min_cell);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_fc_mgr_0_t::dhs_eccbypass);
        }
        #endif
    
}

void cap_pbc_csr_sta_fc_mgr_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cells_available", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_fc_mgr_0_t::cells_available);
            register_get_func("cells_available", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_fc_mgr_0_t::cells_available);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("init_done", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_fc_mgr_0_t::init_done);
            register_get_func("init_done", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_fc_mgr_0_t::init_done);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_rwr_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_rwr_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_pack_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_pack_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_sta_ecc_oq_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("uncorrectable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::uncorrectable);
            register_get_func("uncorrectable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::uncorrectable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("correctable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::correctable);
            register_get_func("correctable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::correctable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("syndrome", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::syndrome);
            register_get_func("syndrome", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::syndrome);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("addr", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::addr);
            register_get_func("addr", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_ecc_oq_t::addr);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_msb", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::packing_msb);
            register_get_func("packing_msb", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::packing_msb);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_selection", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::dhs_selection);
            register_get_func("dhs_selection", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::dhs_selection);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_11_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x10"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_11_pg_31_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_31_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_30_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_30_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_29_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_29_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_28_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_28_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_27_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_27_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_26_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_26_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_25_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_25_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_24_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_24_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_23_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_23_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_22_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_22_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_21_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_21_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_20_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_20_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_19_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_19_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_18_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_18_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_17_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_17_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_16_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_16_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_15_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_15_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_14_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_14_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_13_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_13_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_12_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_12_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_11_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_10_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_9_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_8_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg8);
            register_get_func("pg8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg9);
            register_get_func("pg9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg10);
            register_get_func("pg10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg11);
            register_get_func("pg11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg12);
            register_get_func("pg12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg13);
            register_get_func("pg13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg14);
            register_get_func("pg14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg15);
            register_get_func("pg15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg15);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg16", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg16);
            register_get_func("pg16", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg16);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg17", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg17);
            register_get_func("pg17", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg17);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg18", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg18);
            register_get_func("pg18", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg18);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg19", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg19);
            register_get_func("pg19", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg19);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg20", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg20);
            register_get_func("pg20", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg20);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg21", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg21);
            register_get_func("pg21", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg21);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg22", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg22);
            register_get_func("pg22", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg22);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg23", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg23);
            register_get_func("pg23", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg23);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg24", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg24);
            register_get_func("pg24", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg24);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg25", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg25);
            register_get_func("pg25", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg25);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg26", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg26);
            register_get_func("pg26", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg26);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg27", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg27);
            register_get_func("pg27", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg27);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg28", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg28);
            register_get_func("pg28", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg28);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg29", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg29);
            register_get_func("pg29", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg29);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg30", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg30);
            register_get_func("pg30", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg30);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg31", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg31);
            register_get_func("pg31", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_mtu_table_t::pg31);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffffffffffffffffffffffffffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_11_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_8);
            register_get_func("occupancy_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_9);
            register_get_func("occupancy_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_10);
            register_get_func("occupancy_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_11);
            register_get_func("occupancy_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_12);
            register_get_func("occupancy_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_13);
            register_get_func("occupancy_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_14);
            register_get_func("occupancy_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_15);
            register_get_func("occupancy_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_15);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_16", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_16);
            register_get_func("occupancy_16", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_16);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_17", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_17);
            register_get_func("occupancy_17", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_17);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_18", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_18);
            register_get_func("occupancy_18", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_18);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_19", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_19);
            register_get_func("occupancy_19", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_19);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_20", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_20);
            register_get_func("occupancy_20", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_20);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_21", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_21);
            register_get_func("occupancy_21", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_21);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_22", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_22);
            register_get_func("occupancy_22", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_22);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_23", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_23);
            register_get_func("occupancy_23", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_23);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_24", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_24);
            register_get_func("occupancy_24", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_24);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_25", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_25);
            register_get_func("occupancy_25", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_25);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_26", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_26);
            register_get_func("occupancy_26", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_26);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_27", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_27);
            register_get_func("occupancy_27", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_27);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_28", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_28);
            register_get_func("occupancy_28", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_28);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_29", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_29);
            register_get_func("occupancy_29", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_29);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_30", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_30);
            register_get_func("occupancy_30", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_30);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_31", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_31);
            register_get_func("occupancy_31", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_11_t::occupancy_31);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_11_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_11_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_11_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_11_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x3be"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_selection", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::dhs_selection);
            register_get_func("dhs_selection", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::dhs_selection);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_10_t::ipg_bytes);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_31_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_31_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_30_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_30_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_29_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_29_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_28_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_28_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_27_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_27_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_26_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_26_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_25_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_25_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_24_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_24_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_23_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_23_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_22_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_22_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_21_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_21_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_20_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_20_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_19_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_19_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_18_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_18_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_17_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_17_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_16_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_16_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_15_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_15_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_14_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_14_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_13_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_13_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_12_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_12_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_11_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_10_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_9_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_8_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg8);
            register_get_func("pg8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg9);
            register_get_func("pg9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg10);
            register_get_func("pg10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg11);
            register_get_func("pg11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg12);
            register_get_func("pg12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg13);
            register_get_func("pg13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg14);
            register_get_func("pg14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg15);
            register_get_func("pg15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg15);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg16", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg16);
            register_get_func("pg16", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg16);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg17", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg17);
            register_get_func("pg17", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg17);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg18", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg18);
            register_get_func("pg18", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg18);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg19", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg19);
            register_get_func("pg19", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg19);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg20", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg20);
            register_get_func("pg20", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg20);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg21", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg21);
            register_get_func("pg21", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg21);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg22", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg22);
            register_get_func("pg22", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg22);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg23", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg23);
            register_get_func("pg23", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg23);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg24", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg24);
            register_get_func("pg24", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg24);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg25", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg25);
            register_get_func("pg25", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg25);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg26", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg26);
            register_get_func("pg26", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg26);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg27", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg27);
            register_get_func("pg27", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg27);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg28", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg28);
            register_get_func("pg28", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg28);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg29", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg29);
            register_get_func("pg29", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg29);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg30", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg30);
            register_get_func("pg30", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg30);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg31", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg31);
            register_get_func("pg31", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_mtu_table_t::pg31);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffffffffffffffffffffffffffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_10_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_8);
            register_get_func("occupancy_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_9);
            register_get_func("occupancy_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_10);
            register_get_func("occupancy_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_11);
            register_get_func("occupancy_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_12);
            register_get_func("occupancy_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_13);
            register_get_func("occupancy_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_14);
            register_get_func("occupancy_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_15);
            register_get_func("occupancy_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_15);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_16", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_16);
            register_get_func("occupancy_16", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_16);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_17", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_17);
            register_get_func("occupancy_17", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_17);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_18", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_18);
            register_get_func("occupancy_18", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_18);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_19", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_19);
            register_get_func("occupancy_19", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_19);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_20", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_20);
            register_get_func("occupancy_20", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_20);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_21", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_21);
            register_get_func("occupancy_21", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_21);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_22", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_22);
            register_get_func("occupancy_22", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_22);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_23", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_23);
            register_get_func("occupancy_23", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_23);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_24", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_24);
            register_get_func("occupancy_24", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_24);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_25", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_25);
            register_get_func("occupancy_25", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_25);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_26", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_26);
            register_get_func("occupancy_26", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_26);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_27", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_27);
            register_get_func("occupancy_27", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_27);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_28", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_28);
            register_get_func("occupancy_28", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_28);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_29", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_29);
            register_get_func("occupancy_29", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_29);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_30", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_30);
            register_get_func("occupancy_30", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_30);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_31", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_31);
            register_get_func("occupancy_31", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_10_t::occupancy_31);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_10_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_10_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_10_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_10_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x3be"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_9_t::ipg_bytes);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_15_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_15_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_14_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_14_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_13_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_13_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_12_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_12_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_11_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_11_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_10_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_10_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_9_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_8_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg8);
            register_get_func("pg8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg9);
            register_get_func("pg9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg10);
            register_get_func("pg10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg11);
            register_get_func("pg11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg12);
            register_get_func("pg12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg13);
            register_get_func("pg13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg14);
            register_get_func("pg14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg15);
            register_get_func("pg15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_mtu_table_t::pg15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffffffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_9_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_8);
            register_get_func("occupancy_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_9);
            register_get_func("occupancy_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_10);
            register_get_func("occupancy_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_11);
            register_get_func("occupancy_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_12);
            register_get_func("occupancy_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_13);
            register_get_func("occupancy_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_14);
            register_get_func("occupancy_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_15);
            register_get_func("occupancy_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_9_t::occupancy_15);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_9_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_9_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_9_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_9_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_9_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x3be"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_8_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_8_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_8_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_8_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_8_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_8_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_8_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_8_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_8_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_7_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_7_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_7_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_7_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_7_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_7_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_7_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_7_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_6_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_6_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_6_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_6_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_6_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_6_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_6_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_6_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_5_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_5_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_5_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_5_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_5_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_5_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_5_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_5_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_4_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_4_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_4_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_4_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_4_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_4_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_4_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_4_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_3_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_3_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_3_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_3_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_3_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_3_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_3_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_3_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_2_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_2_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_2_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_2_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_2_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_2_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_2_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_2_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_1_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_1_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_1_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_1_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_1_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_1_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_1_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_1_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_3);
        }
        #endif
    
    set_reset_val(cpp_int("0xffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("priority", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::priority);
            register_get_func("priority", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::priority);
        }
        #endif
    
}

void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_0);
            register_get_func("node_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_1);
            register_get_func("node_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_2);
            register_get_func("node_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_3);
            register_get_func("node_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_4);
            register_get_func("node_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_5);
            register_get_func("node_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_6);
            register_get_func("node_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_7);
            register_get_func("node_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_7);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_8", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_8);
            register_get_func("node_8", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_8);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_9", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_9);
            register_get_func("node_9", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_9);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_10", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_10);
            register_get_func("node_10", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_10);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_11", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_11);
            register_get_func("node_11", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_11);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_12", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_12);
            register_get_func("node_12", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_12);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_13", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_13);
            register_get_func("node_13", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_13);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_14", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_14);
            register_get_func("node_14", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_14);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("node_15", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_15);
            register_get_func("node_15", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_15);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_oq_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_det", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ecc_disable_det);
            register_get_func("ecc_disable_det", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ecc_disable_det);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ecc_disable_cor", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ecc_disable_cor);
            register_get_func("ecc_disable_cor", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ecc_disable_cor);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("dhs_eccbypass", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::dhs_eccbypass);
            register_get_func("dhs_eccbypass", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::dhs_eccbypass);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("num_hdr_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::num_hdr_bytes);
            register_get_func("num_hdr_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::num_hdr_bytes);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite_enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::rewrite_enable);
            register_get_func("rewrite_enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::rewrite_enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("ipg_bytes", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ipg_bytes);
            register_get_func("ipg_bytes", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_oq_0_t::ipg_bytes);
        }
        #endif
    
    set_reset_val(cpp_int("0x14110"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_0_pg_7_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_7_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_6_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_6_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_5_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_5_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_4_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_4_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_3_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_3_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_2_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_2_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_1_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_1_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_pg_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("reserved_min", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::reserved_min);
            register_get_func("reserved_min", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::reserved_min);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xon_threshold", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::xon_threshold);
            register_get_func("xon_threshold", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::xon_threshold);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("headroom", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::headroom);
            register_get_func("headroom", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::headroom);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("low_limit", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::low_limit);
            register_get_func("low_limit", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::low_limit);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("alpha", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::alpha);
            register_get_func("alpha", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pg_0_t::alpha);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_mtu_table_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg0);
            register_get_func("pg0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg1);
            register_get_func("pg1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg2);
            register_get_func("pg2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg3);
            register_get_func("pg3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg4);
            register_get_func("pg4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg5);
            register_get_func("pg5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg6);
            register_get_func("pg6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("pg7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg7);
            register_get_func("pg7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_mtu_table_t::pg7);
        }
        #endif
    
    set_reset_val(cpp_int("0xffffffffff"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_account_0_pause_timer_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("xoff_timeout", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_pause_timer_t::xoff_timeout);
            register_get_func("xoff_timeout", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_pause_timer_t::xoff_timeout);
        }
        #endif
    
}

void cap_pbc_csr_sta_account_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_0", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_0);
            register_get_func("occupancy_0", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_0);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_1", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_1);
            register_get_func("occupancy_1", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_1);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_2", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_2);
            register_get_func("occupancy_2", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_2);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_3", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_3);
            register_get_func("occupancy_3", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_3);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_4", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_4);
            register_get_func("occupancy_4", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_4);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_5", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_5);
            register_get_func("occupancy_5", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_5);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_6", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_6);
            register_get_func("occupancy_6", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_6);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("occupancy_7", (cap_csr_base::set_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_7);
            register_get_func("occupancy_7", (cap_csr_base::get_function_type_t)&cap_pbc_csr_sta_account_0_t::occupancy_7);
        }
        #endif
    
}

void cap_pbc_csr_cfg_account_0_tc_to_pg_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("table", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_account_0_tc_to_pg_t::table);
            register_get_func("table", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_account_0_tc_to_pg_t::table);
        }
        #endif
    
}

void cap_pbc_csr_cfg_write_control_0_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("enable", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::enable);
            register_get_func("enable", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::enable);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("cut_thru", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::cut_thru);
            register_get_func("cut_thru", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::cut_thru);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing);
            register_get_func("packing", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_same_pg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing_same_pg);
            register_get_func("packing_same_pg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing_same_pg);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("packing_timeout_cycles", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing_timeout_cycles);
            register_get_func("packing_timeout_cycles", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::packing_timeout_cycles);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rewrite", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::rewrite);
            register_get_func("rewrite", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::rewrite);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("rate_limiter", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::rate_limiter);
            register_get_func("rate_limiter", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::rate_limiter);
        }
        #endif
    
        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("drop_on_error", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::drop_on_error);
            register_get_func("drop_on_error", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_write_control_0_t::drop_on_error);
        }
        #endif
    
    set_reset_val(cpp_int("0x200afe"));
    all(get_reset_val());
}

void cap_pbc_csr_cfg_pbc_control_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("sw_reset", (cap_csr_base::set_function_type_t)&cap_pbc_csr_cfg_pbc_control_t::sw_reset);
            register_get_func("sw_reset", (cap_csr_base::get_function_type_t)&cap_pbc_csr_cfg_pbc_control_t::sw_reset);
        }
        #endif
    
}

void cap_pbc_csr_base_t::init() {

        #ifndef EXCLUDE_PER_FIELD_CNTRL
        if(!get_field_init_done()) {
            register_set_func("scratch_reg", (cap_csr_base::set_function_type_t)&cap_pbc_csr_base_t::scratch_reg);
            register_get_func("scratch_reg", (cap_csr_base::get_function_type_t)&cap_pbc_csr_base_t::scratch_reg);
        }
        #endif
    
    set_reset_val(cpp_int("0x1"));
    all(get_reset_val());
}

void cap_pbc_csr_t::init() {

    base.set_attributes(this,"base", 0x0 );
    cfg_pbc_control.set_attributes(this,"cfg_pbc_control", 0x4 );
    cfg_write_control_0.set_attributes(this,"cfg_write_control_0", 0x20 );
    cfg_account_0_tc_to_pg.set_attributes(this,"cfg_account_0_tc_to_pg", 0x24 );
    sta_account_0.set_attributes(this,"sta_account_0", 0x30 );
    cfg_account_0_pause_timer.set_attributes(this,"cfg_account_0_pause_timer", 0x40 );
    cfg_account_0_mtu_table.set_attributes(this,"cfg_account_0_mtu_table", 0x48 );
    cfg_account_0_pg_0.set_attributes(this,"cfg_account_0_pg_0", 0x50 );
    cfg_account_0_pg_1.set_attributes(this,"cfg_account_0_pg_1", 0x58 );
    cfg_account_0_pg_2.set_attributes(this,"cfg_account_0_pg_2", 0x60 );
    cfg_account_0_pg_3.set_attributes(this,"cfg_account_0_pg_3", 0x68 );
    cfg_account_0_pg_4.set_attributes(this,"cfg_account_0_pg_4", 0x70 );
    cfg_account_0_pg_5.set_attributes(this,"cfg_account_0_pg_5", 0x78 );
    cfg_account_0_pg_6.set_attributes(this,"cfg_account_0_pg_6", 0x80 );
    cfg_account_0_pg_7.set_attributes(this,"cfg_account_0_pg_7", 0x88 );
    cfg_oq_0.set_attributes(this,"cfg_oq_0", 0x90 );
    cfg_oq_0_arb_l1_selection.set_attributes(this,"cfg_oq_0_arb_l1_selection", 0xc0 );
    cfg_oq_0_arb_l1_strict.set_attributes(this,"cfg_oq_0_arb_l1_strict", 0x100 );
    cfg_oq_0_arb_l2_selection.set_attributes(this,"cfg_oq_0_arb_l2_selection", 0x108 );
    cfg_oq_0_arb_l2_strict.set_attributes(this,"cfg_oq_0_arb_l2_strict", 0x110 );
    cfg_write_control_1.set_attributes(this,"cfg_write_control_1", 0x130 );
    cfg_account_1_tc_to_pg.set_attributes(this,"cfg_account_1_tc_to_pg", 0x134 );
    sta_account_1.set_attributes(this,"sta_account_1", 0x140 );
    cfg_account_1_pause_timer.set_attributes(this,"cfg_account_1_pause_timer", 0x150 );
    cfg_account_1_mtu_table.set_attributes(this,"cfg_account_1_mtu_table", 0x158 );
    cfg_account_1_pg_0.set_attributes(this,"cfg_account_1_pg_0", 0x160 );
    cfg_account_1_pg_1.set_attributes(this,"cfg_account_1_pg_1", 0x168 );
    cfg_account_1_pg_2.set_attributes(this,"cfg_account_1_pg_2", 0x170 );
    cfg_account_1_pg_3.set_attributes(this,"cfg_account_1_pg_3", 0x178 );
    cfg_account_1_pg_4.set_attributes(this,"cfg_account_1_pg_4", 0x180 );
    cfg_account_1_pg_5.set_attributes(this,"cfg_account_1_pg_5", 0x188 );
    cfg_account_1_pg_6.set_attributes(this,"cfg_account_1_pg_6", 0x190 );
    cfg_account_1_pg_7.set_attributes(this,"cfg_account_1_pg_7", 0x198 );
    cfg_oq_1.set_attributes(this,"cfg_oq_1", 0x1a0 );
    cfg_oq_1_arb_l1_selection.set_attributes(this,"cfg_oq_1_arb_l1_selection", 0x1c0 );
    cfg_oq_1_arb_l1_strict.set_attributes(this,"cfg_oq_1_arb_l1_strict", 0x200 );
    cfg_oq_1_arb_l2_selection.set_attributes(this,"cfg_oq_1_arb_l2_selection", 0x208 );
    cfg_oq_1_arb_l2_strict.set_attributes(this,"cfg_oq_1_arb_l2_strict", 0x210 );
    cfg_write_control_2.set_attributes(this,"cfg_write_control_2", 0x230 );
    cfg_account_2_tc_to_pg.set_attributes(this,"cfg_account_2_tc_to_pg", 0x234 );
    sta_account_2.set_attributes(this,"sta_account_2", 0x240 );
    cfg_account_2_pause_timer.set_attributes(this,"cfg_account_2_pause_timer", 0x250 );
    cfg_account_2_mtu_table.set_attributes(this,"cfg_account_2_mtu_table", 0x258 );
    cfg_account_2_pg_0.set_attributes(this,"cfg_account_2_pg_0", 0x260 );
    cfg_account_2_pg_1.set_attributes(this,"cfg_account_2_pg_1", 0x268 );
    cfg_account_2_pg_2.set_attributes(this,"cfg_account_2_pg_2", 0x270 );
    cfg_account_2_pg_3.set_attributes(this,"cfg_account_2_pg_3", 0x278 );
    cfg_account_2_pg_4.set_attributes(this,"cfg_account_2_pg_4", 0x280 );
    cfg_account_2_pg_5.set_attributes(this,"cfg_account_2_pg_5", 0x288 );
    cfg_account_2_pg_6.set_attributes(this,"cfg_account_2_pg_6", 0x290 );
    cfg_account_2_pg_7.set_attributes(this,"cfg_account_2_pg_7", 0x298 );
    cfg_oq_2.set_attributes(this,"cfg_oq_2", 0x2a0 );
    cfg_oq_2_arb_l1_selection.set_attributes(this,"cfg_oq_2_arb_l1_selection", 0x2c0 );
    cfg_oq_2_arb_l1_strict.set_attributes(this,"cfg_oq_2_arb_l1_strict", 0x300 );
    cfg_oq_2_arb_l2_selection.set_attributes(this,"cfg_oq_2_arb_l2_selection", 0x308 );
    cfg_oq_2_arb_l2_strict.set_attributes(this,"cfg_oq_2_arb_l2_strict", 0x310 );
    cfg_write_control_3.set_attributes(this,"cfg_write_control_3", 0x330 );
    cfg_account_3_tc_to_pg.set_attributes(this,"cfg_account_3_tc_to_pg", 0x334 );
    sta_account_3.set_attributes(this,"sta_account_3", 0x340 );
    cfg_account_3_pause_timer.set_attributes(this,"cfg_account_3_pause_timer", 0x350 );
    cfg_account_3_mtu_table.set_attributes(this,"cfg_account_3_mtu_table", 0x358 );
    cfg_account_3_pg_0.set_attributes(this,"cfg_account_3_pg_0", 0x360 );
    cfg_account_3_pg_1.set_attributes(this,"cfg_account_3_pg_1", 0x368 );
    cfg_account_3_pg_2.set_attributes(this,"cfg_account_3_pg_2", 0x370 );
    cfg_account_3_pg_3.set_attributes(this,"cfg_account_3_pg_3", 0x378 );
    cfg_account_3_pg_4.set_attributes(this,"cfg_account_3_pg_4", 0x380 );
    cfg_account_3_pg_5.set_attributes(this,"cfg_account_3_pg_5", 0x388 );
    cfg_account_3_pg_6.set_attributes(this,"cfg_account_3_pg_6", 0x390 );
    cfg_account_3_pg_7.set_attributes(this,"cfg_account_3_pg_7", 0x398 );
    cfg_oq_3.set_attributes(this,"cfg_oq_3", 0x3a0 );
    cfg_oq_3_arb_l1_selection.set_attributes(this,"cfg_oq_3_arb_l1_selection", 0x3c0 );
    cfg_oq_3_arb_l1_strict.set_attributes(this,"cfg_oq_3_arb_l1_strict", 0x400 );
    cfg_oq_3_arb_l2_selection.set_attributes(this,"cfg_oq_3_arb_l2_selection", 0x408 );
    cfg_oq_3_arb_l2_strict.set_attributes(this,"cfg_oq_3_arb_l2_strict", 0x410 );
    cfg_write_control_4.set_attributes(this,"cfg_write_control_4", 0x430 );
    cfg_account_4_tc_to_pg.set_attributes(this,"cfg_account_4_tc_to_pg", 0x434 );
    sta_account_4.set_attributes(this,"sta_account_4", 0x440 );
    cfg_account_4_pause_timer.set_attributes(this,"cfg_account_4_pause_timer", 0x450 );
    cfg_account_4_mtu_table.set_attributes(this,"cfg_account_4_mtu_table", 0x458 );
    cfg_account_4_pg_0.set_attributes(this,"cfg_account_4_pg_0", 0x460 );
    cfg_account_4_pg_1.set_attributes(this,"cfg_account_4_pg_1", 0x468 );
    cfg_account_4_pg_2.set_attributes(this,"cfg_account_4_pg_2", 0x470 );
    cfg_account_4_pg_3.set_attributes(this,"cfg_account_4_pg_3", 0x478 );
    cfg_account_4_pg_4.set_attributes(this,"cfg_account_4_pg_4", 0x480 );
    cfg_account_4_pg_5.set_attributes(this,"cfg_account_4_pg_5", 0x488 );
    cfg_account_4_pg_6.set_attributes(this,"cfg_account_4_pg_6", 0x490 );
    cfg_account_4_pg_7.set_attributes(this,"cfg_account_4_pg_7", 0x498 );
    cfg_oq_4.set_attributes(this,"cfg_oq_4", 0x4a0 );
    cfg_oq_4_arb_l1_selection.set_attributes(this,"cfg_oq_4_arb_l1_selection", 0x4c0 );
    cfg_oq_4_arb_l1_strict.set_attributes(this,"cfg_oq_4_arb_l1_strict", 0x500 );
    cfg_oq_4_arb_l2_selection.set_attributes(this,"cfg_oq_4_arb_l2_selection", 0x508 );
    cfg_oq_4_arb_l2_strict.set_attributes(this,"cfg_oq_4_arb_l2_strict", 0x510 );
    cfg_write_control_5.set_attributes(this,"cfg_write_control_5", 0x530 );
    cfg_account_5_tc_to_pg.set_attributes(this,"cfg_account_5_tc_to_pg", 0x534 );
    sta_account_5.set_attributes(this,"sta_account_5", 0x540 );
    cfg_account_5_pause_timer.set_attributes(this,"cfg_account_5_pause_timer", 0x550 );
    cfg_account_5_mtu_table.set_attributes(this,"cfg_account_5_mtu_table", 0x558 );
    cfg_account_5_pg_0.set_attributes(this,"cfg_account_5_pg_0", 0x560 );
    cfg_account_5_pg_1.set_attributes(this,"cfg_account_5_pg_1", 0x568 );
    cfg_account_5_pg_2.set_attributes(this,"cfg_account_5_pg_2", 0x570 );
    cfg_account_5_pg_3.set_attributes(this,"cfg_account_5_pg_3", 0x578 );
    cfg_account_5_pg_4.set_attributes(this,"cfg_account_5_pg_4", 0x580 );
    cfg_account_5_pg_5.set_attributes(this,"cfg_account_5_pg_5", 0x588 );
    cfg_account_5_pg_6.set_attributes(this,"cfg_account_5_pg_6", 0x590 );
    cfg_account_5_pg_7.set_attributes(this,"cfg_account_5_pg_7", 0x598 );
    cfg_oq_5.set_attributes(this,"cfg_oq_5", 0x5a0 );
    cfg_oq_5_arb_l1_selection.set_attributes(this,"cfg_oq_5_arb_l1_selection", 0x5c0 );
    cfg_oq_5_arb_l1_strict.set_attributes(this,"cfg_oq_5_arb_l1_strict", 0x600 );
    cfg_oq_5_arb_l2_selection.set_attributes(this,"cfg_oq_5_arb_l2_selection", 0x608 );
    cfg_oq_5_arb_l2_strict.set_attributes(this,"cfg_oq_5_arb_l2_strict", 0x610 );
    cfg_write_control_6.set_attributes(this,"cfg_write_control_6", 0x630 );
    cfg_account_6_tc_to_pg.set_attributes(this,"cfg_account_6_tc_to_pg", 0x634 );
    sta_account_6.set_attributes(this,"sta_account_6", 0x640 );
    cfg_account_6_pause_timer.set_attributes(this,"cfg_account_6_pause_timer", 0x650 );
    cfg_account_6_mtu_table.set_attributes(this,"cfg_account_6_mtu_table", 0x658 );
    cfg_account_6_pg_0.set_attributes(this,"cfg_account_6_pg_0", 0x660 );
    cfg_account_6_pg_1.set_attributes(this,"cfg_account_6_pg_1", 0x668 );
    cfg_account_6_pg_2.set_attributes(this,"cfg_account_6_pg_2", 0x670 );
    cfg_account_6_pg_3.set_attributes(this,"cfg_account_6_pg_3", 0x678 );
    cfg_account_6_pg_4.set_attributes(this,"cfg_account_6_pg_4", 0x680 );
    cfg_account_6_pg_5.set_attributes(this,"cfg_account_6_pg_5", 0x688 );
    cfg_account_6_pg_6.set_attributes(this,"cfg_account_6_pg_6", 0x690 );
    cfg_account_6_pg_7.set_attributes(this,"cfg_account_6_pg_7", 0x698 );
    cfg_oq_6.set_attributes(this,"cfg_oq_6", 0x6a0 );
    cfg_oq_6_arb_l1_selection.set_attributes(this,"cfg_oq_6_arb_l1_selection", 0x6c0 );
    cfg_oq_6_arb_l1_strict.set_attributes(this,"cfg_oq_6_arb_l1_strict", 0x700 );
    cfg_oq_6_arb_l2_selection.set_attributes(this,"cfg_oq_6_arb_l2_selection", 0x708 );
    cfg_oq_6_arb_l2_strict.set_attributes(this,"cfg_oq_6_arb_l2_strict", 0x710 );
    cfg_write_control_7.set_attributes(this,"cfg_write_control_7", 0x730 );
    cfg_account_7_tc_to_pg.set_attributes(this,"cfg_account_7_tc_to_pg", 0x734 );
    sta_account_7.set_attributes(this,"sta_account_7", 0x740 );
    cfg_account_7_pause_timer.set_attributes(this,"cfg_account_7_pause_timer", 0x750 );
    cfg_account_7_mtu_table.set_attributes(this,"cfg_account_7_mtu_table", 0x758 );
    cfg_account_7_pg_0.set_attributes(this,"cfg_account_7_pg_0", 0x760 );
    cfg_account_7_pg_1.set_attributes(this,"cfg_account_7_pg_1", 0x768 );
    cfg_account_7_pg_2.set_attributes(this,"cfg_account_7_pg_2", 0x770 );
    cfg_account_7_pg_3.set_attributes(this,"cfg_account_7_pg_3", 0x778 );
    cfg_account_7_pg_4.set_attributes(this,"cfg_account_7_pg_4", 0x780 );
    cfg_account_7_pg_5.set_attributes(this,"cfg_account_7_pg_5", 0x788 );
    cfg_account_7_pg_6.set_attributes(this,"cfg_account_7_pg_6", 0x790 );
    cfg_account_7_pg_7.set_attributes(this,"cfg_account_7_pg_7", 0x798 );
    cfg_oq_7.set_attributes(this,"cfg_oq_7", 0x7a0 );
    cfg_oq_7_arb_l1_selection.set_attributes(this,"cfg_oq_7_arb_l1_selection", 0x7c0 );
    cfg_oq_7_arb_l1_strict.set_attributes(this,"cfg_oq_7_arb_l1_strict", 0x800 );
    cfg_oq_7_arb_l2_selection.set_attributes(this,"cfg_oq_7_arb_l2_selection", 0x808 );
    cfg_oq_7_arb_l2_strict.set_attributes(this,"cfg_oq_7_arb_l2_strict", 0x810 );
    cfg_write_control_8.set_attributes(this,"cfg_write_control_8", 0x830 );
    cfg_account_8_tc_to_pg.set_attributes(this,"cfg_account_8_tc_to_pg", 0x834 );
    sta_account_8.set_attributes(this,"sta_account_8", 0x840 );
    cfg_account_8_pause_timer.set_attributes(this,"cfg_account_8_pause_timer", 0x850 );
    cfg_account_8_mtu_table.set_attributes(this,"cfg_account_8_mtu_table", 0x858 );
    cfg_account_8_pg_0.set_attributes(this,"cfg_account_8_pg_0", 0x860 );
    cfg_account_8_pg_1.set_attributes(this,"cfg_account_8_pg_1", 0x868 );
    cfg_account_8_pg_2.set_attributes(this,"cfg_account_8_pg_2", 0x870 );
    cfg_account_8_pg_3.set_attributes(this,"cfg_account_8_pg_3", 0x878 );
    cfg_account_8_pg_4.set_attributes(this,"cfg_account_8_pg_4", 0x880 );
    cfg_account_8_pg_5.set_attributes(this,"cfg_account_8_pg_5", 0x888 );
    cfg_account_8_pg_6.set_attributes(this,"cfg_account_8_pg_6", 0x890 );
    cfg_account_8_pg_7.set_attributes(this,"cfg_account_8_pg_7", 0x898 );
    cfg_oq_8.set_attributes(this,"cfg_oq_8", 0x8a0 );
    cfg_oq_8_arb_l1_selection.set_attributes(this,"cfg_oq_8_arb_l1_selection", 0x8c0 );
    cfg_oq_8_arb_l1_strict.set_attributes(this,"cfg_oq_8_arb_l1_strict", 0x900 );
    cfg_oq_8_arb_l2_selection.set_attributes(this,"cfg_oq_8_arb_l2_selection", 0x908 );
    cfg_oq_8_arb_l2_strict.set_attributes(this,"cfg_oq_8_arb_l2_strict", 0x910 );
    cfg_write_control_9.set_attributes(this,"cfg_write_control_9", 0x930 );
    cfg_account_9_tc_to_pg.set_attributes(this,"cfg_account_9_tc_to_pg", 0x938 );
    sta_account_9.set_attributes(this,"sta_account_9", 0x940 );
    cfg_account_9_pause_timer.set_attributes(this,"cfg_account_9_pause_timer", 0x960 );
    cfg_account_9_mtu_table.set_attributes(this,"cfg_account_9_mtu_table", 0x970 );
    cfg_account_9_pg_0.set_attributes(this,"cfg_account_9_pg_0", 0x980 );
    cfg_account_9_pg_1.set_attributes(this,"cfg_account_9_pg_1", 0x988 );
    cfg_account_9_pg_2.set_attributes(this,"cfg_account_9_pg_2", 0x990 );
    cfg_account_9_pg_3.set_attributes(this,"cfg_account_9_pg_3", 0x998 );
    cfg_account_9_pg_4.set_attributes(this,"cfg_account_9_pg_4", 0x9a0 );
    cfg_account_9_pg_5.set_attributes(this,"cfg_account_9_pg_5", 0x9a8 );
    cfg_account_9_pg_6.set_attributes(this,"cfg_account_9_pg_6", 0x9b0 );
    cfg_account_9_pg_7.set_attributes(this,"cfg_account_9_pg_7", 0x9b8 );
    cfg_account_9_pg_8.set_attributes(this,"cfg_account_9_pg_8", 0x9c0 );
    cfg_account_9_pg_9.set_attributes(this,"cfg_account_9_pg_9", 0x9c8 );
    cfg_account_9_pg_10.set_attributes(this,"cfg_account_9_pg_10", 0x9d0 );
    cfg_account_9_pg_11.set_attributes(this,"cfg_account_9_pg_11", 0x9d8 );
    cfg_account_9_pg_12.set_attributes(this,"cfg_account_9_pg_12", 0x9e0 );
    cfg_account_9_pg_13.set_attributes(this,"cfg_account_9_pg_13", 0x9e8 );
    cfg_account_9_pg_14.set_attributes(this,"cfg_account_9_pg_14", 0x9f0 );
    cfg_account_9_pg_15.set_attributes(this,"cfg_account_9_pg_15", 0x9f8 );
    cfg_oq_9.set_attributes(this,"cfg_oq_9", 0xa00 );
    cfg_oq_9_arb_l1_selection.set_attributes(this,"cfg_oq_9_arb_l1_selection", 0xa40 );
    cfg_oq_9_arb_l1_strict.set_attributes(this,"cfg_oq_9_arb_l1_strict", 0xa80 );
    cfg_oq_9_arb_l2_selection.set_attributes(this,"cfg_oq_9_arb_l2_selection", 0xa88 );
    cfg_oq_9_arb_l2_strict.set_attributes(this,"cfg_oq_9_arb_l2_strict", 0xa90 );
    cfg_write_control_10.set_attributes(this,"cfg_write_control_10", 0xab0 );
    cfg_account_10_tc_to_pg.set_attributes(this,"cfg_account_10_tc_to_pg", 0xac0 );
    sta_account_10.set_attributes(this,"sta_account_10", 0xb00 );
    cfg_account_10_pause_timer.set_attributes(this,"cfg_account_10_pause_timer", 0xb40 );
    cfg_account_10_mtu_table.set_attributes(this,"cfg_account_10_mtu_table", 0xb60 );
    cfg_account_10_pg_0.set_attributes(this,"cfg_account_10_pg_0", 0xb80 );
    cfg_account_10_pg_1.set_attributes(this,"cfg_account_10_pg_1", 0xb88 );
    cfg_account_10_pg_2.set_attributes(this,"cfg_account_10_pg_2", 0xb90 );
    cfg_account_10_pg_3.set_attributes(this,"cfg_account_10_pg_3", 0xb98 );
    cfg_account_10_pg_4.set_attributes(this,"cfg_account_10_pg_4", 0xba0 );
    cfg_account_10_pg_5.set_attributes(this,"cfg_account_10_pg_5", 0xba8 );
    cfg_account_10_pg_6.set_attributes(this,"cfg_account_10_pg_6", 0xbb0 );
    cfg_account_10_pg_7.set_attributes(this,"cfg_account_10_pg_7", 0xbb8 );
    cfg_account_10_pg_8.set_attributes(this,"cfg_account_10_pg_8", 0xbc0 );
    cfg_account_10_pg_9.set_attributes(this,"cfg_account_10_pg_9", 0xbc8 );
    cfg_account_10_pg_10.set_attributes(this,"cfg_account_10_pg_10", 0xbd0 );
    cfg_account_10_pg_11.set_attributes(this,"cfg_account_10_pg_11", 0xbd8 );
    cfg_account_10_pg_12.set_attributes(this,"cfg_account_10_pg_12", 0xbe0 );
    cfg_account_10_pg_13.set_attributes(this,"cfg_account_10_pg_13", 0xbe8 );
    cfg_account_10_pg_14.set_attributes(this,"cfg_account_10_pg_14", 0xbf0 );
    cfg_account_10_pg_15.set_attributes(this,"cfg_account_10_pg_15", 0xbf8 );
    cfg_account_10_pg_16.set_attributes(this,"cfg_account_10_pg_16", 0xc00 );
    cfg_account_10_pg_17.set_attributes(this,"cfg_account_10_pg_17", 0xc08 );
    cfg_account_10_pg_18.set_attributes(this,"cfg_account_10_pg_18", 0xc10 );
    cfg_account_10_pg_19.set_attributes(this,"cfg_account_10_pg_19", 0xc18 );
    cfg_account_10_pg_20.set_attributes(this,"cfg_account_10_pg_20", 0xc20 );
    cfg_account_10_pg_21.set_attributes(this,"cfg_account_10_pg_21", 0xc28 );
    cfg_account_10_pg_22.set_attributes(this,"cfg_account_10_pg_22", 0xc30 );
    cfg_account_10_pg_23.set_attributes(this,"cfg_account_10_pg_23", 0xc38 );
    cfg_account_10_pg_24.set_attributes(this,"cfg_account_10_pg_24", 0xc40 );
    cfg_account_10_pg_25.set_attributes(this,"cfg_account_10_pg_25", 0xc48 );
    cfg_account_10_pg_26.set_attributes(this,"cfg_account_10_pg_26", 0xc50 );
    cfg_account_10_pg_27.set_attributes(this,"cfg_account_10_pg_27", 0xc58 );
    cfg_account_10_pg_28.set_attributes(this,"cfg_account_10_pg_28", 0xc60 );
    cfg_account_10_pg_29.set_attributes(this,"cfg_account_10_pg_29", 0xc68 );
    cfg_account_10_pg_30.set_attributes(this,"cfg_account_10_pg_30", 0xc70 );
    cfg_account_10_pg_31.set_attributes(this,"cfg_account_10_pg_31", 0xc78 );
    cfg_oq_10.set_attributes(this,"cfg_oq_10", 0xc80 );
    cfg_oq_10_arb_l1_selection.set_attributes(this,"cfg_oq_10_arb_l1_selection", 0xd00 );
    cfg_oq_10_arb_l1_strict.set_attributes(this,"cfg_oq_10_arb_l1_strict", 0xd40 );
    cfg_oq_10_arb_l2_selection.set_attributes(this,"cfg_oq_10_arb_l2_selection", 0xd48 );
    cfg_oq_10_arb_l2_strict.set_attributes(this,"cfg_oq_10_arb_l2_strict", 0xd50 );
    cfg_write_control_11.set_attributes(this,"cfg_write_control_11", 0xd70 );
    cfg_account_11_tc_to_pg.set_attributes(this,"cfg_account_11_tc_to_pg", 0xd80 );
    sta_account_11.set_attributes(this,"sta_account_11", 0xdc0 );
    cfg_account_11_pause_timer.set_attributes(this,"cfg_account_11_pause_timer", 0xe00 );
    cfg_account_11_mtu_table.set_attributes(this,"cfg_account_11_mtu_table", 0xe20 );
    cfg_account_11_pg_0.set_attributes(this,"cfg_account_11_pg_0", 0xe40 );
    cfg_account_11_pg_1.set_attributes(this,"cfg_account_11_pg_1", 0xe48 );
    cfg_account_11_pg_2.set_attributes(this,"cfg_account_11_pg_2", 0xe50 );
    cfg_account_11_pg_3.set_attributes(this,"cfg_account_11_pg_3", 0xe58 );
    cfg_account_11_pg_4.set_attributes(this,"cfg_account_11_pg_4", 0xe60 );
    cfg_account_11_pg_5.set_attributes(this,"cfg_account_11_pg_5", 0xe68 );
    cfg_account_11_pg_6.set_attributes(this,"cfg_account_11_pg_6", 0xe70 );
    cfg_account_11_pg_7.set_attributes(this,"cfg_account_11_pg_7", 0xe78 );
    cfg_account_11_pg_8.set_attributes(this,"cfg_account_11_pg_8", 0xe80 );
    cfg_account_11_pg_9.set_attributes(this,"cfg_account_11_pg_9", 0xe88 );
    cfg_account_11_pg_10.set_attributes(this,"cfg_account_11_pg_10", 0xe90 );
    cfg_account_11_pg_11.set_attributes(this,"cfg_account_11_pg_11", 0xe98 );
    cfg_account_11_pg_12.set_attributes(this,"cfg_account_11_pg_12", 0xea0 );
    cfg_account_11_pg_13.set_attributes(this,"cfg_account_11_pg_13", 0xea8 );
    cfg_account_11_pg_14.set_attributes(this,"cfg_account_11_pg_14", 0xeb0 );
    cfg_account_11_pg_15.set_attributes(this,"cfg_account_11_pg_15", 0xeb8 );
    cfg_account_11_pg_16.set_attributes(this,"cfg_account_11_pg_16", 0xec0 );
    cfg_account_11_pg_17.set_attributes(this,"cfg_account_11_pg_17", 0xec8 );
    cfg_account_11_pg_18.set_attributes(this,"cfg_account_11_pg_18", 0xed0 );
    cfg_account_11_pg_19.set_attributes(this,"cfg_account_11_pg_19", 0xed8 );
    cfg_account_11_pg_20.set_attributes(this,"cfg_account_11_pg_20", 0xee0 );
    cfg_account_11_pg_21.set_attributes(this,"cfg_account_11_pg_21", 0xee8 );
    cfg_account_11_pg_22.set_attributes(this,"cfg_account_11_pg_22", 0xef0 );
    cfg_account_11_pg_23.set_attributes(this,"cfg_account_11_pg_23", 0xef8 );
    cfg_account_11_pg_24.set_attributes(this,"cfg_account_11_pg_24", 0xf00 );
    cfg_account_11_pg_25.set_attributes(this,"cfg_account_11_pg_25", 0xf08 );
    cfg_account_11_pg_26.set_attributes(this,"cfg_account_11_pg_26", 0xf10 );
    cfg_account_11_pg_27.set_attributes(this,"cfg_account_11_pg_27", 0xf18 );
    cfg_account_11_pg_28.set_attributes(this,"cfg_account_11_pg_28", 0xf20 );
    cfg_account_11_pg_29.set_attributes(this,"cfg_account_11_pg_29", 0xf28 );
    cfg_account_11_pg_30.set_attributes(this,"cfg_account_11_pg_30", 0xf30 );
    cfg_account_11_pg_31.set_attributes(this,"cfg_account_11_pg_31", 0xf38 );
    cfg_oq_11.set_attributes(this,"cfg_oq_11", 0xf40 );
    cfg_oq_11_arb_l1_selection.set_attributes(this,"cfg_oq_11_arb_l1_selection", 0xf80 );
    cfg_oq_11_arb_l1_strict.set_attributes(this,"cfg_oq_11_arb_l1_strict", 0xfc0 );
    cfg_oq_11_arb_l2_selection.set_attributes(this,"cfg_oq_11_arb_l2_selection", 0xfc8 );
    cfg_oq_11_arb_l2_strict.set_attributes(this,"cfg_oq_11_arb_l2_strict", 0xfd0 );
    sta_ecc_oq.set_attributes(this,"sta_ecc_oq", 0x1000 );
    sta_ecc_pack.set_attributes(this,"sta_ecc_pack", 0x1030 );
    sta_ecc_rwr.set_attributes(this,"sta_ecc_rwr", 0x1038 );
    sta_fc_mgr_0.set_attributes(this,"sta_fc_mgr_0", 0x1040 );
    cfg_fc_mgr_0.set_attributes(this,"cfg_fc_mgr_0", 0x1044 );
    sta_ecc_fc_0.set_attributes(this,"sta_ecc_fc_0", 0x1048 );
    cfg_ll_0.set_attributes(this,"cfg_ll_0", 0x1070 );
    sta_ecc_ll_0.set_attributes(this,"sta_ecc_ll_0", 0x1074 );
    cfg_desc_0.set_attributes(this,"cfg_desc_0", 0x1090 );
    sta_ecc_desc_0.set_attributes(this,"sta_ecc_desc_0", 0x1094 );
    sta_fc_mgr_1.set_attributes(this,"sta_fc_mgr_1", 0x10b0 );
    cfg_fc_mgr_1.set_attributes(this,"cfg_fc_mgr_1", 0x10b4 );
    sta_ecc_fc_1.set_attributes(this,"sta_ecc_fc_1", 0x10b8 );
    cfg_ll_1.set_attributes(this,"cfg_ll_1", 0x10e0 );
    sta_ecc_ll_1.set_attributes(this,"sta_ecc_ll_1", 0x10e4 );
    cfg_desc_1.set_attributes(this,"cfg_desc_1", 0x1100 );
    sta_ecc_desc_1.set_attributes(this,"sta_ecc_desc_1", 0x1104 );
    cfg_gc.set_attributes(this,"cfg_gc", 0x1120 );
    cfg_rc.set_attributes(this,"cfg_rc", 0x1128 );
    sta_rc.set_attributes(this,"sta_rc", 0x1140 );
    cfg_sched.set_attributes(this,"cfg_sched", 0x1148 );
    sta_sched.set_attributes(this,"sta_sched", 0x1160 );
    cfg_island_control.set_attributes(this,"cfg_island_control", 0x1180 );
    cfg_rpl.set_attributes(this,"cfg_rpl", 0x1184 );
    cfg_parser0.set_attributes(this,"cfg_parser0", 0x11c0 );
    cfg_parser1.set_attributes(this,"cfg_parser1", 0x1200 );
    cfg_parser2.set_attributes(this,"cfg_parser2", 0x1240 );
    cfg_parser3.set_attributes(this,"cfg_parser3", 0x1280 );
    cfg_parser4.set_attributes(this,"cfg_parser4", 0x12c0 );
    cfg_parser5.set_attributes(this,"cfg_parser5", 0x1300 );
    cfg_parser6.set_attributes(this,"cfg_parser6", 0x1340 );
    cfg_parser7.set_attributes(this,"cfg_parser7", 0x1380 );
    cfg_parser8.set_attributes(this,"cfg_parser8", 0x13c0 );
    for(int ii = 0; ii < 12; ii++) {
        if(ii != 0) cnt_flits[ii].set_field_init_done(true);
        cnt_flits[ii].set_attributes(this,"cnt_flits["+to_string(ii)+"]",  0x1400 + (cnt_flits[ii].get_byte_size()*ii));
    }
    for(int ii = 0; ii < 12; ii++) {
        if(ii != 0) cnt_write_error[ii].set_field_init_done(true);
        cnt_write_error[ii].set_attributes(this,"cnt_write_error["+to_string(ii)+"]",  0x1600 + (cnt_write_error[ii].get_byte_size()*ii));
    }
    for(int ii = 0; ii < 12; ii++) {
        if(ii != 0) sta_oq[ii].set_field_init_done(true);
        sta_oq[ii].set_attributes(this,"sta_oq["+to_string(ii)+"]",  0x1800 + (sta_oq[ii].get_byte_size()*ii));
    }
    sta_oq_12.set_attributes(this,"sta_oq_12", 0x1c00 );
    cfg_dhs.set_attributes(this,"cfg_dhs", 0x1c04 );
    cfg_debug_port.set_attributes(this,"cfg_debug_port", 0x1c08 );
    cfg_spare.set_attributes(this,"cfg_spare", 0x1c0c );
    sta_ecc_sideband.set_attributes(this,"sta_ecc_sideband", 0x1c10 );
    sta_rpl_err.set_attributes(this,"sta_rpl_err", 0x1c30 );
    cfg_tail_drop.set_attributes(this,"cfg_tail_drop", 0x1c50 );
    cfg_src_port_to_lif_map.set_attributes(this,"cfg_src_port_to_lif_map", 0x1c60 );
    dhs_oq_0.set_attributes(this,"dhs_oq_0", 0x94 );
    dhs_oq_1.set_attributes(this,"dhs_oq_1", 0x1a4 );
    dhs_oq_2.set_attributes(this,"dhs_oq_2", 0x2a4 );
    dhs_oq_3.set_attributes(this,"dhs_oq_3", 0x3a4 );
    dhs_oq_4.set_attributes(this,"dhs_oq_4", 0x4a4 );
    dhs_oq_5.set_attributes(this,"dhs_oq_5", 0x5a4 );
    dhs_oq_6.set_attributes(this,"dhs_oq_6", 0x6a4 );
    dhs_oq_7.set_attributes(this,"dhs_oq_7", 0x7a4 );
    dhs_oq_8.set_attributes(this,"dhs_oq_8", 0x8a4 );
    dhs_oq_9.set_attributes(this,"dhs_oq_9", 0xa04 );
    dhs_oq_10.set_attributes(this,"dhs_oq_10", 0xcc0 );
    dhs_oq_11.set_attributes(this,"dhs_oq_11", 0xf44 );
    dhs_fc_0.set_attributes(this,"dhs_fc_0", 0x1050 );
    dhs_ll_0.set_attributes(this,"dhs_ll_0", 0x1078 );
    dhs_desc_0.set_attributes(this,"dhs_desc_0", 0x1098 );
    dhs_fc_1.set_attributes(this,"dhs_fc_1", 0x10c0 );
    dhs_ll_1.set_attributes(this,"dhs_ll_1", 0x10e8 );
    dhs_desc_1.set_attributes(this,"dhs_desc_1", 0x1108 );
    dhs_gc.set_attributes(this,"dhs_gc", 0x1124 );
    dhs_rc.set_attributes(this,"dhs_rc", 0x1144 );
    dhs_sched.set_attributes(this,"dhs_sched", 0x1170 );
}

void cap_pbc_csr_dhs_sched_entry_t::current_credit(const cpp_int & _val) { 
    // current_credit
    int_var__current_credit = _val.convert_to< current_credit_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_sched_entry_t::current_credit() const {
    return int_var__current_credit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_sched_entry_t::quanta(const cpp_int & _val) { 
    // quanta
    int_var__quanta = _val.convert_to< quanta_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_sched_entry_t::quanta() const {
    return int_var__quanta.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count0(const cpp_int & _val) { 
    // count0
    int_var__count0 = _val.convert_to< count0_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count0() const {
    return int_var__count0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count1(const cpp_int & _val) { 
    // count1
    int_var__count1 = _val.convert_to< count1_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count1() const {
    return int_var__count1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count2(const cpp_int & _val) { 
    // count2
    int_var__count2 = _val.convert_to< count2_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count2() const {
    return int_var__count2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count3(const cpp_int & _val) { 
    // count3
    int_var__count3 = _val.convert_to< count3_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count3() const {
    return int_var__count3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count4(const cpp_int & _val) { 
    // count4
    int_var__count4 = _val.convert_to< count4_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count4() const {
    return int_var__count4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count5(const cpp_int & _val) { 
    // count5
    int_var__count5 = _val.convert_to< count5_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count5() const {
    return int_var__count5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count6(const cpp_int & _val) { 
    // count6
    int_var__count6 = _val.convert_to< count6_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count6() const {
    return int_var__count6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_rc_entry_t::count7(const cpp_int & _val) { 
    // count7
    int_var__count7 = _val.convert_to< count7_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_rc_entry_t::count7() const {
    return int_var__count7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_gc_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_gc_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_1_entry_t::src_port(const cpp_int & _val) { 
    // src_port
    int_var__src_port = _val.convert_to< src_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::src_port() const {
    return int_var__src_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_1_entry_t::refcount(const cpp_int & _val) { 
    // refcount
    int_var__refcount = _val.convert_to< refcount_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::refcount() const {
    return int_var__refcount.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_1_entry_t::input_queue(const cpp_int & _val) { 
    // input_queue
    int_var__input_queue = _val.convert_to< input_queue_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::input_queue() const {
    return int_var__input_queue.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_1_entry_t::eop_pack(const cpp_int & _val) { 
    // eop_pack
    int_var__eop_pack = _val.convert_to< eop_pack_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::eop_pack() const {
    return int_var__eop_pack.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_1_entry_t::err_pack(const cpp_int & _val) { 
    // err_pack
    int_var__err_pack = _val.convert_to< err_pack_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_1_entry_t::err_pack() const {
    return int_var__err_pack.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_1_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_1_entry_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::eop() const {
    return int_var__eop.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_1_entry_t::full(const cpp_int & _val) { 
    // full
    int_var__full = _val.convert_to< full_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::full() const {
    return int_var__full.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_1_entry_t::ge256B(const cpp_int & _val) { 
    // ge256B
    int_var__ge256B = _val.convert_to< ge256B_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::ge256B() const {
    return int_var__ge256B.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_1_entry_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_1_entry_t::err() const {
    return int_var__err.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_fc_1_entry_t::cell0(const cpp_int & _val) { 
    // cell0
    int_var__cell0 = _val.convert_to< cell0_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_fc_1_entry_t::cell0() const {
    return int_var__cell0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_fc_1_entry_t::cell1(const cpp_int & _val) { 
    // cell1
    int_var__cell1 = _val.convert_to< cell1_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_fc_1_entry_t::cell1() const {
    return int_var__cell1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_0_entry_t::src_port(const cpp_int & _val) { 
    // src_port
    int_var__src_port = _val.convert_to< src_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::src_port() const {
    return int_var__src_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_0_entry_t::refcount(const cpp_int & _val) { 
    // refcount
    int_var__refcount = _val.convert_to< refcount_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::refcount() const {
    return int_var__refcount.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_0_entry_t::input_queue(const cpp_int & _val) { 
    // input_queue
    int_var__input_queue = _val.convert_to< input_queue_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::input_queue() const {
    return int_var__input_queue.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_0_entry_t::eop_pack(const cpp_int & _val) { 
    // eop_pack
    int_var__eop_pack = _val.convert_to< eop_pack_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::eop_pack() const {
    return int_var__eop_pack.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_desc_0_entry_t::err_pack(const cpp_int & _val) { 
    // err_pack
    int_var__err_pack = _val.convert_to< err_pack_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_desc_0_entry_t::err_pack() const {
    return int_var__err_pack.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_0_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_0_entry_t::eop(const cpp_int & _val) { 
    // eop
    int_var__eop = _val.convert_to< eop_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::eop() const {
    return int_var__eop.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_0_entry_t::full(const cpp_int & _val) { 
    // full
    int_var__full = _val.convert_to< full_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::full() const {
    return int_var__full.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_0_entry_t::ge256B(const cpp_int & _val) { 
    // ge256B
    int_var__ge256B = _val.convert_to< ge256B_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::ge256B() const {
    return int_var__ge256B.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_ll_0_entry_t::err(const cpp_int & _val) { 
    // err
    int_var__err = _val.convert_to< err_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_ll_0_entry_t::err() const {
    return int_var__err.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_fc_0_entry_t::cell0(const cpp_int & _val) { 
    // cell0
    int_var__cell0 = _val.convert_to< cell0_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_fc_0_entry_t::cell0() const {
    return int_var__cell0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_fc_0_entry_t::cell1(const cpp_int & _val) { 
    // cell1
    int_var__cell1 = _val.convert_to< cell1_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_fc_0_entry_t::cell1() const {
    return int_var__cell1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_11_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_11_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_11_entry_t::pack_info(const cpp_int & _val) { 
    // pack_info
    int_var__pack_info = _val.convert_to< pack_info_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_11_entry_t::pack_info() const {
    return int_var__pack_info.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_10_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_10_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_10_entry_t::rpl_ptr(const cpp_int & _val) { 
    // rpl_ptr
    int_var__rpl_ptr = _val.convert_to< rpl_ptr_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_10_entry_t::rpl_ptr() const {
    return int_var__rpl_ptr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_10_entry_t::rpl_en(const cpp_int & _val) { 
    // rpl_en
    int_var__rpl_en = _val.convert_to< rpl_en_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_10_entry_t::rpl_en() const {
    return int_var__rpl_en.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_9_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_9_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_8_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_8_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_7_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_7_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_6_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_6_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_5_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_5_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_4_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_4_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_3_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_3_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_2_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_2_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_1_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_1_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_dhs_oq_0_entry_t::next_cell(const cpp_int & _val) { 
    // next_cell
    int_var__next_cell = _val.convert_to< next_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_dhs_oq_0_entry_t::next_cell() const {
    return int_var__next_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_0(const cpp_int & _val) { 
    // entry_0
    int_var__entry_0 = _val.convert_to< entry_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_0() const {
    return int_var__entry_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_1(const cpp_int & _val) { 
    // entry_1
    int_var__entry_1 = _val.convert_to< entry_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_1() const {
    return int_var__entry_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_2(const cpp_int & _val) { 
    // entry_2
    int_var__entry_2 = _val.convert_to< entry_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_2() const {
    return int_var__entry_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_3(const cpp_int & _val) { 
    // entry_3
    int_var__entry_3 = _val.convert_to< entry_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_3() const {
    return int_var__entry_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_4(const cpp_int & _val) { 
    // entry_4
    int_var__entry_4 = _val.convert_to< entry_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_4() const {
    return int_var__entry_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_5(const cpp_int & _val) { 
    // entry_5
    int_var__entry_5 = _val.convert_to< entry_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_5() const {
    return int_var__entry_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_6(const cpp_int & _val) { 
    // entry_6
    int_var__entry_6 = _val.convert_to< entry_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_6() const {
    return int_var__entry_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_7(const cpp_int & _val) { 
    // entry_7
    int_var__entry_7 = _val.convert_to< entry_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_7() const {
    return int_var__entry_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_8(const cpp_int & _val) { 
    // entry_8
    int_var__entry_8 = _val.convert_to< entry_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_src_port_to_lif_map_t::entry_8() const {
    return int_var__entry_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_tail_drop_t::cpu_threshold(const cpp_int & _val) { 
    // cpu_threshold
    int_var__cpu_threshold = _val.convert_to< cpu_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_tail_drop_t::cpu_threshold() const {
    return int_var__cpu_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_tail_drop_t::span_threshold(const cpp_int & _val) { 
    // span_threshold
    int_var__span_threshold = _val.convert_to< span_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_tail_drop_t::span_threshold() const {
    return int_var__span_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rpl_err_t::rid(const cpp_int & _val) { 
    // rid
    int_var__rid = _val.convert_to< rid_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rpl_err_t::rid() const {
    return int_var__rid.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rpl_err_t::rresp(const cpp_int & _val) { 
    // rresp
    int_var__rresp = _val.convert_to< rresp_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rpl_err_t::rresp() const {
    return int_var__rresp.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_sideband_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_sideband_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_sideband_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_sideband_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_sideband_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_sideband_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_sideband_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_sideband_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_spare_t::data(const cpp_int & _val) { 
    // data
    int_var__data = _val.convert_to< data_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_spare_t::data() const {
    return int_var__data.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_debug_port_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_debug_port_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_debug_port_t::select(const cpp_int & _val) { 
    // select
    int_var__select = _val.convert_to< select_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_debug_port_t::select() const {
    return int_var__select.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_dhs_t::address(const cpp_int & _val) { 
    // address
    int_var__address = _val.convert_to< address_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_dhs_t::address() const {
    return int_var__address.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_oq_12_t::depth_value(const cpp_int & _val) { 
    // depth_value
    int_var__depth_value = _val.convert_to< depth_value_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_oq_12_t::depth_value() const {
    return int_var__depth_value.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_oq_t::depth_value(const cpp_int & _val) { 
    // depth_value
    int_var__depth_value = _val.convert_to< depth_value_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_oq_t::depth_value() const {
    return int_var__depth_value.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::discarded(const cpp_int & _val) { 
    // discarded
    int_var__discarded = _val.convert_to< discarded_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::discarded() const {
    return int_var__discarded.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::admitted(const cpp_int & _val) { 
    // admitted
    int_var__admitted = _val.convert_to< admitted_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::admitted() const {
    return int_var__admitted.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::intrinsic_drop(const cpp_int & _val) { 
    // intrinsic_drop
    int_var__intrinsic_drop = _val.convert_to< intrinsic_drop_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::intrinsic_drop() const {
    return int_var__intrinsic_drop.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::out_of_cells(const cpp_int & _val) { 
    // out_of_cells
    int_var__out_of_cells = _val.convert_to< out_of_cells_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::out_of_cells() const {
    return int_var__out_of_cells.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::out_of_credit(const cpp_int & _val) { 
    // out_of_credit
    int_var__out_of_credit = _val.convert_to< out_of_credit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::out_of_credit() const {
    return int_var__out_of_credit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::truncation(const cpp_int & _val) { 
    // truncation
    int_var__truncation = _val.convert_to< truncation_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::truncation() const {
    return int_var__truncation.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::port_disabled(const cpp_int & _val) { 
    // port_disabled
    int_var__port_disabled = _val.convert_to< port_disabled_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::port_disabled() const {
    return int_var__port_disabled.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::out_of_cells1(const cpp_int & _val) { 
    // out_of_cells1
    int_var__out_of_cells1 = _val.convert_to< out_of_cells1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::out_of_cells1() const {
    return int_var__out_of_cells1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::tail_drop_cpu(const cpp_int & _val) { 
    // tail_drop_cpu
    int_var__tail_drop_cpu = _val.convert_to< tail_drop_cpu_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::tail_drop_cpu() const {
    return int_var__tail_drop_cpu.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::tail_drop_span(const cpp_int & _val) { 
    // tail_drop_span
    int_var__tail_drop_span = _val.convert_to< tail_drop_span_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::tail_drop_span() const {
    return int_var__tail_drop_span.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_write_error_t::enqueue(const cpp_int & _val) { 
    // enqueue
    int_var__enqueue = _val.convert_to< enqueue_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_write_error_t::enqueue() const {
    return int_var__enqueue.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_flits_t::sop_in(const cpp_int & _val) { 
    // sop_in
    int_var__sop_in = _val.convert_to< sop_in_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_flits_t::sop_in() const {
    return int_var__sop_in.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_flits_t::eop_in(const cpp_int & _val) { 
    // eop_in
    int_var__eop_in = _val.convert_to< eop_in_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_flits_t::eop_in() const {
    return int_var__eop_in.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_flits_t::sop_out(const cpp_int & _val) { 
    // sop_out
    int_var__sop_out = _val.convert_to< sop_out_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_flits_t::sop_out() const {
    return int_var__sop_out.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cnt_flits_t::eop_out(const cpp_int & _val) { 
    // eop_out
    int_var__eop_out = _val.convert_to< eop_out_cpp_int_t >();
}

cpp_int cap_pbc_csr_cnt_flits_t::eop_out() const {
    return int_var__eop_out.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser8_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser8_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser7_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser7_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser6_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser6_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser5_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser5_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser4_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser4_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser3_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser3_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser2_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser2_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser1_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser1_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::dot1q_type(const cpp_int & _val) { 
    // dot1q_type
    int_var__dot1q_type = _val.convert_to< dot1q_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::dot1q_type() const {
    return int_var__dot1q_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::ipv4_type(const cpp_int & _val) { 
    // ipv4_type
    int_var__ipv4_type = _val.convert_to< ipv4_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::ipv4_type() const {
    return int_var__ipv4_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::ipv6_type(const cpp_int & _val) { 
    // ipv6_type
    int_var__ipv6_type = _val.convert_to< ipv6_type_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::ipv6_type() const {
    return int_var__ipv6_type.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::use_ip(const cpp_int & _val) { 
    // use_ip
    int_var__use_ip = _val.convert_to< use_ip_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::use_ip() const {
    return int_var__use_ip.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::use_dot1q(const cpp_int & _val) { 
    // use_dot1q
    int_var__use_dot1q = _val.convert_to< use_dot1q_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::use_dot1q() const {
    return int_var__use_dot1q.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::default_cos(const cpp_int & _val) { 
    // default_cos
    int_var__default_cos = _val.convert_to< default_cos_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::default_cos() const {
    return int_var__default_cos.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::default_port(const cpp_int & _val) { 
    // default_port
    int_var__default_port = _val.convert_to< default_port_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::default_port() const {
    return int_var__default_port.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::oq_map(const cpp_int & _val) { 
    // oq_map
    int_var__oq_map = _val.convert_to< oq_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::oq_map() const {
    return int_var__oq_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_parser0_t::dscp_map(const cpp_int & _val) { 
    // dscp_map
    int_var__dscp_map = _val.convert_to< dscp_map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_parser0_t::dscp_map() const {
    return int_var__dscp_map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rpl_t::base(const cpp_int & _val) { 
    // base
    int_var__base = _val.convert_to< base_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rpl_t::base() const {
    return int_var__base.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rpl_t::token_size(const cpp_int & _val) { 
    // token_size
    int_var__token_size = _val.convert_to< token_size_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rpl_t::token_size() const {
    return int_var__token_size.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_island_control_t::map(const cpp_int & _val) { 
    // map
    int_var__map = _val.convert_to< map_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_island_control_t::map() const {
    return int_var__map.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_sched_t::ecc_uncorrectable(const cpp_int & _val) { 
    // ecc_uncorrectable
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_sched_t::ecc_uncorrectable() const {
    return int_var__ecc_uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_sched_t::ecc_correctable(const cpp_int & _val) { 
    // ecc_correctable
    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_sched_t::ecc_correctable() const {
    return int_var__ecc_correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_sched_t::ecc_syndrome(const cpp_int & _val) { 
    // ecc_syndrome
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_sched_t::ecc_syndrome() const {
    return int_var__ecc_syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_sched_t::ecc_addr(const cpp_int & _val) { 
    // ecc_addr
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_sched_t::ecc_addr() const {
    return int_var__ecc_addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::enable_wrr(const cpp_int & _val) { 
    // enable_wrr
    int_var__enable_wrr = _val.convert_to< enable_wrr_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::enable_wrr() const {
    return int_var__enable_wrr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::dhs_selection(const cpp_int & _val) { 
    // dhs_selection
    int_var__dhs_selection = _val.convert_to< dhs_selection_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::dhs_selection() const {
    return int_var__dhs_selection.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_sched_t::timer(const cpp_int & _val) { 
    // timer
    int_var__timer = _val.convert_to< timer_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_sched_t::timer() const {
    return int_var__timer.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rc_t::init_done(const cpp_int & _val) { 
    // init_done
    int_var__init_done = _val.convert_to< init_done_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rc_t::init_done() const {
    return int_var__init_done.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rc_t::ecc_uncorrectable(const cpp_int & _val) { 
    // ecc_uncorrectable
    int_var__ecc_uncorrectable = _val.convert_to< ecc_uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rc_t::ecc_uncorrectable() const {
    return int_var__ecc_uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rc_t::ecc_correctable(const cpp_int & _val) { 
    // ecc_correctable
    int_var__ecc_correctable = _val.convert_to< ecc_correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rc_t::ecc_correctable() const {
    return int_var__ecc_correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rc_t::ecc_syndrome(const cpp_int & _val) { 
    // ecc_syndrome
    int_var__ecc_syndrome = _val.convert_to< ecc_syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rc_t::ecc_syndrome() const {
    return int_var__ecc_syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_rc_t::ecc_addr(const cpp_int & _val) { 
    // ecc_addr
    int_var__ecc_addr = _val.convert_to< ecc_addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_rc_t::ecc_addr() const {
    return int_var__ecc_addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rc_t::init_start(const cpp_int & _val) { 
    // init_start
    int_var__init_start = _val.convert_to< init_start_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rc_t::init_start() const {
    return int_var__init_start.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rc_t::init_reset(const cpp_int & _val) { 
    // init_reset
    int_var__init_reset = _val.convert_to< init_reset_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rc_t::init_reset() const {
    return int_var__init_reset.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rc_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rc_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rc_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rc_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_rc_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_rc_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_gc_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_gc_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_gc_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_gc_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_gc_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_gc_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_1_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_1_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_1_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_1_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_1_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_1_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_1_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_1_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_1_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_1_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_1_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_1_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_1_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_1_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_1_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_1_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_1_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_1_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_1_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_1_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_1_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_1_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_1_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_1_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_1_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_1_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_1_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_1_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::init_start(const cpp_int & _val) { 
    // init_start
    int_var__init_start = _val.convert_to< init_start_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::init_start() const {
    return int_var__init_start.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::init_reset(const cpp_int & _val) { 
    // init_reset
    int_var__init_reset = _val.convert_to< init_reset_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::init_reset() const {
    return int_var__init_reset.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::max_row(const cpp_int & _val) { 
    // max_row
    int_var__max_row = _val.convert_to< max_row_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::max_row() const {
    return int_var__max_row.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::min_cell(const cpp_int & _val) { 
    // min_cell
    int_var__min_cell = _val.convert_to< min_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::min_cell() const {
    return int_var__min_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_1_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_1_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_fc_mgr_1_t::cells_available(const cpp_int & _val) { 
    // cells_available
    int_var__cells_available = _val.convert_to< cells_available_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_fc_mgr_1_t::cells_available() const {
    return int_var__cells_available.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_fc_mgr_1_t::init_done(const cpp_int & _val) { 
    // init_done
    int_var__init_done = _val.convert_to< init_done_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_fc_mgr_1_t::init_done() const {
    return int_var__init_done.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_0_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_0_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_0_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_desc_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_desc_0_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_0_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_0_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_0_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_0_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_desc_0_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_desc_0_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_0_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_0_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_0_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_ll_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_ll_0_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_0_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_0_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_0_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_0_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_ll_0_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_ll_0_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_0_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_0_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_0_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_0_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_0_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_0_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_fc_0_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_fc_0_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::init_start(const cpp_int & _val) { 
    // init_start
    int_var__init_start = _val.convert_to< init_start_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::init_start() const {
    return int_var__init_start.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::init_reset(const cpp_int & _val) { 
    // init_reset
    int_var__init_reset = _val.convert_to< init_reset_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::init_reset() const {
    return int_var__init_reset.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::max_row(const cpp_int & _val) { 
    // max_row
    int_var__max_row = _val.convert_to< max_row_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::max_row() const {
    return int_var__max_row.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::min_cell(const cpp_int & _val) { 
    // min_cell
    int_var__min_cell = _val.convert_to< min_cell_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::min_cell() const {
    return int_var__min_cell.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_fc_mgr_0_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_fc_mgr_0_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_fc_mgr_0_t::cells_available(const cpp_int & _val) { 
    // cells_available
    int_var__cells_available = _val.convert_to< cells_available_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_fc_mgr_0_t::cells_available() const {
    return int_var__cells_available.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_fc_mgr_0_t::init_done(const cpp_int & _val) { 
    // init_done
    int_var__init_done = _val.convert_to< init_done_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_fc_mgr_0_t::init_done() const {
    return int_var__init_done.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_rwr_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_rwr_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_rwr_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_rwr_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_rwr_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_rwr_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_rwr_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_rwr_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_pack_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_pack_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_pack_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_pack_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_pack_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_pack_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_pack_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_pack_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_oq_t::uncorrectable(const cpp_int & _val) { 
    // uncorrectable
    int_var__uncorrectable = _val.convert_to< uncorrectable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_oq_t::uncorrectable() const {
    return int_var__uncorrectable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_oq_t::correctable(const cpp_int & _val) { 
    // correctable
    int_var__correctable = _val.convert_to< correctable_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_oq_t::correctable() const {
    return int_var__correctable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_oq_t::syndrome(const cpp_int & _val) { 
    // syndrome
    int_var__syndrome = _val.convert_to< syndrome_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_oq_t::syndrome() const {
    return int_var__syndrome.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_ecc_oq_t::addr(const cpp_int & _val) { 
    // addr
    int_var__addr = _val.convert_to< addr_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_ecc_oq_t::addr() const {
    return int_var__addr.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::packing_msb(const cpp_int & _val) { 
    // packing_msb
    int_var__packing_msb = _val.convert_to< packing_msb_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::packing_msb() const {
    return int_var__packing_msb.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::dhs_selection(const cpp_int & _val) { 
    // dhs_selection
    int_var__dhs_selection = _val.convert_to< dhs_selection_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::dhs_selection() const {
    return int_var__dhs_selection.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_11_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_11_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_31_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_31_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_31_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_31_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_31_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_31_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_30_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_30_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_30_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_30_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_30_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_30_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_29_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_29_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_29_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_29_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_29_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_29_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_28_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_28_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_28_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_28_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_28_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_28_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_27_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_27_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_27_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_27_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_27_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_27_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_26_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_26_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_26_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_26_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_26_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_26_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_25_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_25_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_25_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_25_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_25_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_25_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_24_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_24_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_24_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_24_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_24_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_24_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_23_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_23_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_23_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_23_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_23_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_23_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_22_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_22_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_22_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_22_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_22_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_22_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_21_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_21_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_21_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_21_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_21_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_21_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_20_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_20_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_20_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_20_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_20_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_20_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_19_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_19_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_19_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_19_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_19_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_19_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_18_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_18_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_18_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_18_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_18_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_18_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_17_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_17_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_17_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_17_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_17_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_17_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_16_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_16_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_16_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_16_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_16_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_16_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_15_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_15_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_15_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_15_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_15_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_15_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_14_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_14_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_14_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_14_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_14_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_14_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_13_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_13_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_13_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_13_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_13_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_13_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_12_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_12_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_12_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_12_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_12_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_12_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_11_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_11_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_11_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_11_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_11_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_11_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_10_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_10_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_10_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_10_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_10_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_10_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_9_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_9_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_9_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_9_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_9_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_9_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_8_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_8_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_8_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_8_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_8_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_8_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg8(const cpp_int & _val) { 
    // pg8
    int_var__pg8 = _val.convert_to< pg8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg8() const {
    return int_var__pg8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg9(const cpp_int & _val) { 
    // pg9
    int_var__pg9 = _val.convert_to< pg9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg9() const {
    return int_var__pg9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg10(const cpp_int & _val) { 
    // pg10
    int_var__pg10 = _val.convert_to< pg10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg10() const {
    return int_var__pg10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg11(const cpp_int & _val) { 
    // pg11
    int_var__pg11 = _val.convert_to< pg11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg11() const {
    return int_var__pg11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg12(const cpp_int & _val) { 
    // pg12
    int_var__pg12 = _val.convert_to< pg12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg12() const {
    return int_var__pg12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg13(const cpp_int & _val) { 
    // pg13
    int_var__pg13 = _val.convert_to< pg13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg13() const {
    return int_var__pg13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg14(const cpp_int & _val) { 
    // pg14
    int_var__pg14 = _val.convert_to< pg14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg14() const {
    return int_var__pg14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg15(const cpp_int & _val) { 
    // pg15
    int_var__pg15 = _val.convert_to< pg15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg15() const {
    return int_var__pg15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg16(const cpp_int & _val) { 
    // pg16
    int_var__pg16 = _val.convert_to< pg16_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg16() const {
    return int_var__pg16.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg17(const cpp_int & _val) { 
    // pg17
    int_var__pg17 = _val.convert_to< pg17_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg17() const {
    return int_var__pg17.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg18(const cpp_int & _val) { 
    // pg18
    int_var__pg18 = _val.convert_to< pg18_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg18() const {
    return int_var__pg18.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg19(const cpp_int & _val) { 
    // pg19
    int_var__pg19 = _val.convert_to< pg19_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg19() const {
    return int_var__pg19.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg20(const cpp_int & _val) { 
    // pg20
    int_var__pg20 = _val.convert_to< pg20_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg20() const {
    return int_var__pg20.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg21(const cpp_int & _val) { 
    // pg21
    int_var__pg21 = _val.convert_to< pg21_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg21() const {
    return int_var__pg21.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg22(const cpp_int & _val) { 
    // pg22
    int_var__pg22 = _val.convert_to< pg22_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg22() const {
    return int_var__pg22.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg23(const cpp_int & _val) { 
    // pg23
    int_var__pg23 = _val.convert_to< pg23_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg23() const {
    return int_var__pg23.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg24(const cpp_int & _val) { 
    // pg24
    int_var__pg24 = _val.convert_to< pg24_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg24() const {
    return int_var__pg24.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg25(const cpp_int & _val) { 
    // pg25
    int_var__pg25 = _val.convert_to< pg25_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg25() const {
    return int_var__pg25.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg26(const cpp_int & _val) { 
    // pg26
    int_var__pg26 = _val.convert_to< pg26_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg26() const {
    return int_var__pg26.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg27(const cpp_int & _val) { 
    // pg27
    int_var__pg27 = _val.convert_to< pg27_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg27() const {
    return int_var__pg27.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg28(const cpp_int & _val) { 
    // pg28
    int_var__pg28 = _val.convert_to< pg28_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg28() const {
    return int_var__pg28.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg29(const cpp_int & _val) { 
    // pg29
    int_var__pg29 = _val.convert_to< pg29_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg29() const {
    return int_var__pg29.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg30(const cpp_int & _val) { 
    // pg30
    int_var__pg30 = _val.convert_to< pg30_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg30() const {
    return int_var__pg30.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_mtu_table_t::pg31(const cpp_int & _val) { 
    // pg31
    int_var__pg31 = _val.convert_to< pg31_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_mtu_table_t::pg31() const {
    return int_var__pg31.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_8(const cpp_int & _val) { 
    // occupancy_8
    int_var__occupancy_8 = _val.convert_to< occupancy_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_8() const {
    return int_var__occupancy_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_9(const cpp_int & _val) { 
    // occupancy_9
    int_var__occupancy_9 = _val.convert_to< occupancy_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_9() const {
    return int_var__occupancy_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_10(const cpp_int & _val) { 
    // occupancy_10
    int_var__occupancy_10 = _val.convert_to< occupancy_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_10() const {
    return int_var__occupancy_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_11(const cpp_int & _val) { 
    // occupancy_11
    int_var__occupancy_11 = _val.convert_to< occupancy_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_11() const {
    return int_var__occupancy_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_12(const cpp_int & _val) { 
    // occupancy_12
    int_var__occupancy_12 = _val.convert_to< occupancy_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_12() const {
    return int_var__occupancy_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_13(const cpp_int & _val) { 
    // occupancy_13
    int_var__occupancy_13 = _val.convert_to< occupancy_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_13() const {
    return int_var__occupancy_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_14(const cpp_int & _val) { 
    // occupancy_14
    int_var__occupancy_14 = _val.convert_to< occupancy_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_14() const {
    return int_var__occupancy_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_15(const cpp_int & _val) { 
    // occupancy_15
    int_var__occupancy_15 = _val.convert_to< occupancy_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_15() const {
    return int_var__occupancy_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_16(const cpp_int & _val) { 
    // occupancy_16
    int_var__occupancy_16 = _val.convert_to< occupancy_16_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_16() const {
    return int_var__occupancy_16.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_17(const cpp_int & _val) { 
    // occupancy_17
    int_var__occupancy_17 = _val.convert_to< occupancy_17_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_17() const {
    return int_var__occupancy_17.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_18(const cpp_int & _val) { 
    // occupancy_18
    int_var__occupancy_18 = _val.convert_to< occupancy_18_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_18() const {
    return int_var__occupancy_18.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_19(const cpp_int & _val) { 
    // occupancy_19
    int_var__occupancy_19 = _val.convert_to< occupancy_19_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_19() const {
    return int_var__occupancy_19.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_20(const cpp_int & _val) { 
    // occupancy_20
    int_var__occupancy_20 = _val.convert_to< occupancy_20_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_20() const {
    return int_var__occupancy_20.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_21(const cpp_int & _val) { 
    // occupancy_21
    int_var__occupancy_21 = _val.convert_to< occupancy_21_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_21() const {
    return int_var__occupancy_21.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_22(const cpp_int & _val) { 
    // occupancy_22
    int_var__occupancy_22 = _val.convert_to< occupancy_22_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_22() const {
    return int_var__occupancy_22.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_23(const cpp_int & _val) { 
    // occupancy_23
    int_var__occupancy_23 = _val.convert_to< occupancy_23_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_23() const {
    return int_var__occupancy_23.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_24(const cpp_int & _val) { 
    // occupancy_24
    int_var__occupancy_24 = _val.convert_to< occupancy_24_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_24() const {
    return int_var__occupancy_24.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_25(const cpp_int & _val) { 
    // occupancy_25
    int_var__occupancy_25 = _val.convert_to< occupancy_25_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_25() const {
    return int_var__occupancy_25.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_26(const cpp_int & _val) { 
    // occupancy_26
    int_var__occupancy_26 = _val.convert_to< occupancy_26_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_26() const {
    return int_var__occupancy_26.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_27(const cpp_int & _val) { 
    // occupancy_27
    int_var__occupancy_27 = _val.convert_to< occupancy_27_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_27() const {
    return int_var__occupancy_27.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_28(const cpp_int & _val) { 
    // occupancy_28
    int_var__occupancy_28 = _val.convert_to< occupancy_28_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_28() const {
    return int_var__occupancy_28.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_29(const cpp_int & _val) { 
    // occupancy_29
    int_var__occupancy_29 = _val.convert_to< occupancy_29_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_29() const {
    return int_var__occupancy_29.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_30(const cpp_int & _val) { 
    // occupancy_30
    int_var__occupancy_30 = _val.convert_to< occupancy_30_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_30() const {
    return int_var__occupancy_30.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_11_t::occupancy_31(const cpp_int & _val) { 
    // occupancy_31
    int_var__occupancy_31 = _val.convert_to< occupancy_31_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_11_t::occupancy_31() const {
    return int_var__occupancy_31.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_11_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_11_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_11_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_11_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_11_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_11_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_11_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_11_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::dhs_selection(const cpp_int & _val) { 
    // dhs_selection
    int_var__dhs_selection = _val.convert_to< dhs_selection_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::dhs_selection() const {
    return int_var__dhs_selection.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_10_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_10_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_31_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_31_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_31_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_31_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_31_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_31_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_30_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_30_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_30_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_30_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_30_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_30_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_29_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_29_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_29_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_29_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_29_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_29_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_28_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_28_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_28_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_28_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_28_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_28_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_27_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_27_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_27_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_27_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_27_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_27_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_26_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_26_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_26_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_26_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_26_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_26_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_25_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_25_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_25_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_25_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_25_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_25_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_24_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_24_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_24_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_24_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_24_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_24_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_23_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_23_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_23_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_23_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_23_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_23_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_22_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_22_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_22_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_22_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_22_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_22_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_21_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_21_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_21_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_21_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_21_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_21_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_20_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_20_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_20_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_20_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_20_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_20_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_19_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_19_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_19_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_19_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_19_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_19_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_18_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_18_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_18_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_18_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_18_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_18_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_17_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_17_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_17_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_17_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_17_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_17_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_16_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_16_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_16_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_16_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_16_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_16_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_15_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_15_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_15_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_15_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_15_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_15_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_14_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_14_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_14_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_14_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_14_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_14_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_13_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_13_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_13_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_13_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_13_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_13_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_12_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_12_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_12_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_12_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_12_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_12_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_11_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_11_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_11_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_11_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_11_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_11_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_10_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_10_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_10_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_10_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_10_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_10_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_9_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_9_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_9_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_9_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_9_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_9_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_8_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_8_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_8_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_8_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_8_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_8_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg8(const cpp_int & _val) { 
    // pg8
    int_var__pg8 = _val.convert_to< pg8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg8() const {
    return int_var__pg8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg9(const cpp_int & _val) { 
    // pg9
    int_var__pg9 = _val.convert_to< pg9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg9() const {
    return int_var__pg9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg10(const cpp_int & _val) { 
    // pg10
    int_var__pg10 = _val.convert_to< pg10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg10() const {
    return int_var__pg10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg11(const cpp_int & _val) { 
    // pg11
    int_var__pg11 = _val.convert_to< pg11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg11() const {
    return int_var__pg11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg12(const cpp_int & _val) { 
    // pg12
    int_var__pg12 = _val.convert_to< pg12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg12() const {
    return int_var__pg12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg13(const cpp_int & _val) { 
    // pg13
    int_var__pg13 = _val.convert_to< pg13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg13() const {
    return int_var__pg13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg14(const cpp_int & _val) { 
    // pg14
    int_var__pg14 = _val.convert_to< pg14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg14() const {
    return int_var__pg14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg15(const cpp_int & _val) { 
    // pg15
    int_var__pg15 = _val.convert_to< pg15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg15() const {
    return int_var__pg15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg16(const cpp_int & _val) { 
    // pg16
    int_var__pg16 = _val.convert_to< pg16_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg16() const {
    return int_var__pg16.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg17(const cpp_int & _val) { 
    // pg17
    int_var__pg17 = _val.convert_to< pg17_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg17() const {
    return int_var__pg17.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg18(const cpp_int & _val) { 
    // pg18
    int_var__pg18 = _val.convert_to< pg18_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg18() const {
    return int_var__pg18.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg19(const cpp_int & _val) { 
    // pg19
    int_var__pg19 = _val.convert_to< pg19_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg19() const {
    return int_var__pg19.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg20(const cpp_int & _val) { 
    // pg20
    int_var__pg20 = _val.convert_to< pg20_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg20() const {
    return int_var__pg20.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg21(const cpp_int & _val) { 
    // pg21
    int_var__pg21 = _val.convert_to< pg21_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg21() const {
    return int_var__pg21.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg22(const cpp_int & _val) { 
    // pg22
    int_var__pg22 = _val.convert_to< pg22_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg22() const {
    return int_var__pg22.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg23(const cpp_int & _val) { 
    // pg23
    int_var__pg23 = _val.convert_to< pg23_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg23() const {
    return int_var__pg23.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg24(const cpp_int & _val) { 
    // pg24
    int_var__pg24 = _val.convert_to< pg24_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg24() const {
    return int_var__pg24.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg25(const cpp_int & _val) { 
    // pg25
    int_var__pg25 = _val.convert_to< pg25_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg25() const {
    return int_var__pg25.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg26(const cpp_int & _val) { 
    // pg26
    int_var__pg26 = _val.convert_to< pg26_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg26() const {
    return int_var__pg26.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg27(const cpp_int & _val) { 
    // pg27
    int_var__pg27 = _val.convert_to< pg27_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg27() const {
    return int_var__pg27.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg28(const cpp_int & _val) { 
    // pg28
    int_var__pg28 = _val.convert_to< pg28_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg28() const {
    return int_var__pg28.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg29(const cpp_int & _val) { 
    // pg29
    int_var__pg29 = _val.convert_to< pg29_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg29() const {
    return int_var__pg29.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg30(const cpp_int & _val) { 
    // pg30
    int_var__pg30 = _val.convert_to< pg30_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg30() const {
    return int_var__pg30.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_mtu_table_t::pg31(const cpp_int & _val) { 
    // pg31
    int_var__pg31 = _val.convert_to< pg31_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_mtu_table_t::pg31() const {
    return int_var__pg31.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_8(const cpp_int & _val) { 
    // occupancy_8
    int_var__occupancy_8 = _val.convert_to< occupancy_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_8() const {
    return int_var__occupancy_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_9(const cpp_int & _val) { 
    // occupancy_9
    int_var__occupancy_9 = _val.convert_to< occupancy_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_9() const {
    return int_var__occupancy_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_10(const cpp_int & _val) { 
    // occupancy_10
    int_var__occupancy_10 = _val.convert_to< occupancy_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_10() const {
    return int_var__occupancy_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_11(const cpp_int & _val) { 
    // occupancy_11
    int_var__occupancy_11 = _val.convert_to< occupancy_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_11() const {
    return int_var__occupancy_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_12(const cpp_int & _val) { 
    // occupancy_12
    int_var__occupancy_12 = _val.convert_to< occupancy_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_12() const {
    return int_var__occupancy_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_13(const cpp_int & _val) { 
    // occupancy_13
    int_var__occupancy_13 = _val.convert_to< occupancy_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_13() const {
    return int_var__occupancy_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_14(const cpp_int & _val) { 
    // occupancy_14
    int_var__occupancy_14 = _val.convert_to< occupancy_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_14() const {
    return int_var__occupancy_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_15(const cpp_int & _val) { 
    // occupancy_15
    int_var__occupancy_15 = _val.convert_to< occupancy_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_15() const {
    return int_var__occupancy_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_16(const cpp_int & _val) { 
    // occupancy_16
    int_var__occupancy_16 = _val.convert_to< occupancy_16_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_16() const {
    return int_var__occupancy_16.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_17(const cpp_int & _val) { 
    // occupancy_17
    int_var__occupancy_17 = _val.convert_to< occupancy_17_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_17() const {
    return int_var__occupancy_17.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_18(const cpp_int & _val) { 
    // occupancy_18
    int_var__occupancy_18 = _val.convert_to< occupancy_18_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_18() const {
    return int_var__occupancy_18.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_19(const cpp_int & _val) { 
    // occupancy_19
    int_var__occupancy_19 = _val.convert_to< occupancy_19_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_19() const {
    return int_var__occupancy_19.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_20(const cpp_int & _val) { 
    // occupancy_20
    int_var__occupancy_20 = _val.convert_to< occupancy_20_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_20() const {
    return int_var__occupancy_20.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_21(const cpp_int & _val) { 
    // occupancy_21
    int_var__occupancy_21 = _val.convert_to< occupancy_21_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_21() const {
    return int_var__occupancy_21.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_22(const cpp_int & _val) { 
    // occupancy_22
    int_var__occupancy_22 = _val.convert_to< occupancy_22_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_22() const {
    return int_var__occupancy_22.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_23(const cpp_int & _val) { 
    // occupancy_23
    int_var__occupancy_23 = _val.convert_to< occupancy_23_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_23() const {
    return int_var__occupancy_23.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_24(const cpp_int & _val) { 
    // occupancy_24
    int_var__occupancy_24 = _val.convert_to< occupancy_24_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_24() const {
    return int_var__occupancy_24.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_25(const cpp_int & _val) { 
    // occupancy_25
    int_var__occupancy_25 = _val.convert_to< occupancy_25_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_25() const {
    return int_var__occupancy_25.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_26(const cpp_int & _val) { 
    // occupancy_26
    int_var__occupancy_26 = _val.convert_to< occupancy_26_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_26() const {
    return int_var__occupancy_26.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_27(const cpp_int & _val) { 
    // occupancy_27
    int_var__occupancy_27 = _val.convert_to< occupancy_27_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_27() const {
    return int_var__occupancy_27.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_28(const cpp_int & _val) { 
    // occupancy_28
    int_var__occupancy_28 = _val.convert_to< occupancy_28_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_28() const {
    return int_var__occupancy_28.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_29(const cpp_int & _val) { 
    // occupancy_29
    int_var__occupancy_29 = _val.convert_to< occupancy_29_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_29() const {
    return int_var__occupancy_29.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_30(const cpp_int & _val) { 
    // occupancy_30
    int_var__occupancy_30 = _val.convert_to< occupancy_30_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_30() const {
    return int_var__occupancy_30.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_10_t::occupancy_31(const cpp_int & _val) { 
    // occupancy_31
    int_var__occupancy_31 = _val.convert_to< occupancy_31_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_10_t::occupancy_31() const {
    return int_var__occupancy_31.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_10_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_10_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_10_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_10_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_10_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_10_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_10_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_10_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_9_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_9_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_15_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_15_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_15_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_15_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_15_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_15_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_14_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_14_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_14_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_14_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_14_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_14_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_13_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_13_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_13_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_13_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_13_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_13_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_12_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_12_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_12_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_12_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_12_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_12_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_11_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_11_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_11_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_11_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_11_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_11_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_10_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_10_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_10_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_10_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_10_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_10_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_9_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_9_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_9_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_9_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_9_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_9_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_8_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_8_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_8_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_8_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_8_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_8_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg8(const cpp_int & _val) { 
    // pg8
    int_var__pg8 = _val.convert_to< pg8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg8() const {
    return int_var__pg8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg9(const cpp_int & _val) { 
    // pg9
    int_var__pg9 = _val.convert_to< pg9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg9() const {
    return int_var__pg9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg10(const cpp_int & _val) { 
    // pg10
    int_var__pg10 = _val.convert_to< pg10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg10() const {
    return int_var__pg10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg11(const cpp_int & _val) { 
    // pg11
    int_var__pg11 = _val.convert_to< pg11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg11() const {
    return int_var__pg11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg12(const cpp_int & _val) { 
    // pg12
    int_var__pg12 = _val.convert_to< pg12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg12() const {
    return int_var__pg12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg13(const cpp_int & _val) { 
    // pg13
    int_var__pg13 = _val.convert_to< pg13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg13() const {
    return int_var__pg13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg14(const cpp_int & _val) { 
    // pg14
    int_var__pg14 = _val.convert_to< pg14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg14() const {
    return int_var__pg14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_mtu_table_t::pg15(const cpp_int & _val) { 
    // pg15
    int_var__pg15 = _val.convert_to< pg15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_mtu_table_t::pg15() const {
    return int_var__pg15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_8(const cpp_int & _val) { 
    // occupancy_8
    int_var__occupancy_8 = _val.convert_to< occupancy_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_8() const {
    return int_var__occupancy_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_9(const cpp_int & _val) { 
    // occupancy_9
    int_var__occupancy_9 = _val.convert_to< occupancy_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_9() const {
    return int_var__occupancy_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_10(const cpp_int & _val) { 
    // occupancy_10
    int_var__occupancy_10 = _val.convert_to< occupancy_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_10() const {
    return int_var__occupancy_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_11(const cpp_int & _val) { 
    // occupancy_11
    int_var__occupancy_11 = _val.convert_to< occupancy_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_11() const {
    return int_var__occupancy_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_12(const cpp_int & _val) { 
    // occupancy_12
    int_var__occupancy_12 = _val.convert_to< occupancy_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_12() const {
    return int_var__occupancy_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_13(const cpp_int & _val) { 
    // occupancy_13
    int_var__occupancy_13 = _val.convert_to< occupancy_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_13() const {
    return int_var__occupancy_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_14(const cpp_int & _val) { 
    // occupancy_14
    int_var__occupancy_14 = _val.convert_to< occupancy_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_14() const {
    return int_var__occupancy_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_9_t::occupancy_15(const cpp_int & _val) { 
    // occupancy_15
    int_var__occupancy_15 = _val.convert_to< occupancy_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_9_t::occupancy_15() const {
    return int_var__occupancy_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_9_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_9_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_9_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_9_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_9_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_9_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_9_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_9_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_8_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_8_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_8_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_8_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_8_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_8_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_8_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_8_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_7_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_7_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_7_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_7_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_7_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_7_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_7_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_7_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_6_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_6_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_6_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_6_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_6_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_6_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_6_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_6_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_5_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_5_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_5_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_5_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_5_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_5_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_5_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_5_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_4_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_4_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_4_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_4_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_4_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_4_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_4_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_4_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_3_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_3_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_3_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_3_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_3_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_3_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_3_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_3_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_2_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_2_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_2_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_2_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_2_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_2_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_2_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_2_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_1_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_1_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_1_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_1_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_1_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_1_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_1_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_1_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l2_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::priority(const cpp_int & _val) { 
    // priority
    int_var__priority = _val.convert_to< priority_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_strict_t::priority() const {
    return int_var__priority.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_0(const cpp_int & _val) { 
    // node_0
    int_var__node_0 = _val.convert_to< node_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_0() const {
    return int_var__node_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_1(const cpp_int & _val) { 
    // node_1
    int_var__node_1 = _val.convert_to< node_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_1() const {
    return int_var__node_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_2(const cpp_int & _val) { 
    // node_2
    int_var__node_2 = _val.convert_to< node_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_2() const {
    return int_var__node_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_3(const cpp_int & _val) { 
    // node_3
    int_var__node_3 = _val.convert_to< node_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_3() const {
    return int_var__node_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_4(const cpp_int & _val) { 
    // node_4
    int_var__node_4 = _val.convert_to< node_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_4() const {
    return int_var__node_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_5(const cpp_int & _val) { 
    // node_5
    int_var__node_5 = _val.convert_to< node_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_5() const {
    return int_var__node_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_6(const cpp_int & _val) { 
    // node_6
    int_var__node_6 = _val.convert_to< node_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_6() const {
    return int_var__node_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_7(const cpp_int & _val) { 
    // node_7
    int_var__node_7 = _val.convert_to< node_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_7() const {
    return int_var__node_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_8(const cpp_int & _val) { 
    // node_8
    int_var__node_8 = _val.convert_to< node_8_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_8() const {
    return int_var__node_8.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_9(const cpp_int & _val) { 
    // node_9
    int_var__node_9 = _val.convert_to< node_9_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_9() const {
    return int_var__node_9.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_10(const cpp_int & _val) { 
    // node_10
    int_var__node_10 = _val.convert_to< node_10_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_10() const {
    return int_var__node_10.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_11(const cpp_int & _val) { 
    // node_11
    int_var__node_11 = _val.convert_to< node_11_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_11() const {
    return int_var__node_11.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_12(const cpp_int & _val) { 
    // node_12
    int_var__node_12 = _val.convert_to< node_12_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_12() const {
    return int_var__node_12.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_13(const cpp_int & _val) { 
    // node_13
    int_var__node_13 = _val.convert_to< node_13_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_13() const {
    return int_var__node_13.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_14(const cpp_int & _val) { 
    // node_14
    int_var__node_14 = _val.convert_to< node_14_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_14() const {
    return int_var__node_14.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_15(const cpp_int & _val) { 
    // node_15
    int_var__node_15 = _val.convert_to< node_15_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_arb_l1_selection_t::node_15() const {
    return int_var__node_15.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::ecc_disable_det(const cpp_int & _val) { 
    // ecc_disable_det
    int_var__ecc_disable_det = _val.convert_to< ecc_disable_det_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::ecc_disable_det() const {
    return int_var__ecc_disable_det.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::ecc_disable_cor(const cpp_int & _val) { 
    // ecc_disable_cor
    int_var__ecc_disable_cor = _val.convert_to< ecc_disable_cor_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::ecc_disable_cor() const {
    return int_var__ecc_disable_cor.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::dhs_eccbypass(const cpp_int & _val) { 
    // dhs_eccbypass
    int_var__dhs_eccbypass = _val.convert_to< dhs_eccbypass_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::dhs_eccbypass() const {
    return int_var__dhs_eccbypass.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::num_hdr_bytes(const cpp_int & _val) { 
    // num_hdr_bytes
    int_var__num_hdr_bytes = _val.convert_to< num_hdr_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::num_hdr_bytes() const {
    return int_var__num_hdr_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::rewrite_enable(const cpp_int & _val) { 
    // rewrite_enable
    int_var__rewrite_enable = _val.convert_to< rewrite_enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::rewrite_enable() const {
    return int_var__rewrite_enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_oq_0_t::ipg_bytes(const cpp_int & _val) { 
    // ipg_bytes
    int_var__ipg_bytes = _val.convert_to< ipg_bytes_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_oq_0_t::ipg_bytes() const {
    return int_var__ipg_bytes.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_7_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_7_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_7_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_7_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_7_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_7_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_6_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_6_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_6_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_6_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_6_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_6_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_5_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_5_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_5_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_5_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_5_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_5_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_4_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_4_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_4_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_4_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_4_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_4_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_3_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_3_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_3_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_3_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_3_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_3_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_2_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_2_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_2_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_2_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_2_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_2_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_1_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_1_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_1_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_1_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_1_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_1_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_0_t::reserved_min(const cpp_int & _val) { 
    // reserved_min
    int_var__reserved_min = _val.convert_to< reserved_min_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::reserved_min() const {
    return int_var__reserved_min.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_0_t::xon_threshold(const cpp_int & _val) { 
    // xon_threshold
    int_var__xon_threshold = _val.convert_to< xon_threshold_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::xon_threshold() const {
    return int_var__xon_threshold.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_0_t::headroom(const cpp_int & _val) { 
    // headroom
    int_var__headroom = _val.convert_to< headroom_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::headroom() const {
    return int_var__headroom.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_0_t::low_limit(const cpp_int & _val) { 
    // low_limit
    int_var__low_limit = _val.convert_to< low_limit_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::low_limit() const {
    return int_var__low_limit.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pg_0_t::alpha(const cpp_int & _val) { 
    // alpha
    int_var__alpha = _val.convert_to< alpha_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pg_0_t::alpha() const {
    return int_var__alpha.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg0(const cpp_int & _val) { 
    // pg0
    int_var__pg0 = _val.convert_to< pg0_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg0() const {
    return int_var__pg0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg1(const cpp_int & _val) { 
    // pg1
    int_var__pg1 = _val.convert_to< pg1_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg1() const {
    return int_var__pg1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg2(const cpp_int & _val) { 
    // pg2
    int_var__pg2 = _val.convert_to< pg2_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg2() const {
    return int_var__pg2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg3(const cpp_int & _val) { 
    // pg3
    int_var__pg3 = _val.convert_to< pg3_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg3() const {
    return int_var__pg3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg4(const cpp_int & _val) { 
    // pg4
    int_var__pg4 = _val.convert_to< pg4_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg4() const {
    return int_var__pg4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg5(const cpp_int & _val) { 
    // pg5
    int_var__pg5 = _val.convert_to< pg5_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg5() const {
    return int_var__pg5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg6(const cpp_int & _val) { 
    // pg6
    int_var__pg6 = _val.convert_to< pg6_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg6() const {
    return int_var__pg6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_mtu_table_t::pg7(const cpp_int & _val) { 
    // pg7
    int_var__pg7 = _val.convert_to< pg7_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_mtu_table_t::pg7() const {
    return int_var__pg7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_pause_timer_t::xoff_timeout(const cpp_int & _val) { 
    // xoff_timeout
    int_var__xoff_timeout = _val.convert_to< xoff_timeout_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_pause_timer_t::xoff_timeout() const {
    return int_var__xoff_timeout.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_0(const cpp_int & _val) { 
    // occupancy_0
    int_var__occupancy_0 = _val.convert_to< occupancy_0_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_0() const {
    return int_var__occupancy_0.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_1(const cpp_int & _val) { 
    // occupancy_1
    int_var__occupancy_1 = _val.convert_to< occupancy_1_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_1() const {
    return int_var__occupancy_1.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_2(const cpp_int & _val) { 
    // occupancy_2
    int_var__occupancy_2 = _val.convert_to< occupancy_2_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_2() const {
    return int_var__occupancy_2.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_3(const cpp_int & _val) { 
    // occupancy_3
    int_var__occupancy_3 = _val.convert_to< occupancy_3_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_3() const {
    return int_var__occupancy_3.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_4(const cpp_int & _val) { 
    // occupancy_4
    int_var__occupancy_4 = _val.convert_to< occupancy_4_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_4() const {
    return int_var__occupancy_4.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_5(const cpp_int & _val) { 
    // occupancy_5
    int_var__occupancy_5 = _val.convert_to< occupancy_5_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_5() const {
    return int_var__occupancy_5.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_6(const cpp_int & _val) { 
    // occupancy_6
    int_var__occupancy_6 = _val.convert_to< occupancy_6_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_6() const {
    return int_var__occupancy_6.convert_to< cpp_int >();
}
    
void cap_pbc_csr_sta_account_0_t::occupancy_7(const cpp_int & _val) { 
    // occupancy_7
    int_var__occupancy_7 = _val.convert_to< occupancy_7_cpp_int_t >();
}

cpp_int cap_pbc_csr_sta_account_0_t::occupancy_7() const {
    return int_var__occupancy_7.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_account_0_tc_to_pg_t::table(const cpp_int & _val) { 
    // table
    int_var__table = _val.convert_to< table_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_account_0_tc_to_pg_t::table() const {
    return int_var__table.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::enable(const cpp_int & _val) { 
    // enable
    int_var__enable = _val.convert_to< enable_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::enable() const {
    return int_var__enable.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::cut_thru(const cpp_int & _val) { 
    // cut_thru
    int_var__cut_thru = _val.convert_to< cut_thru_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::cut_thru() const {
    return int_var__cut_thru.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::packing(const cpp_int & _val) { 
    // packing
    int_var__packing = _val.convert_to< packing_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::packing() const {
    return int_var__packing.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::packing_same_pg(const cpp_int & _val) { 
    // packing_same_pg
    int_var__packing_same_pg = _val.convert_to< packing_same_pg_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::packing_same_pg() const {
    return int_var__packing_same_pg.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::packing_timeout_cycles(const cpp_int & _val) { 
    // packing_timeout_cycles
    int_var__packing_timeout_cycles = _val.convert_to< packing_timeout_cycles_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::packing_timeout_cycles() const {
    return int_var__packing_timeout_cycles.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::rewrite(const cpp_int & _val) { 
    // rewrite
    int_var__rewrite = _val.convert_to< rewrite_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::rewrite() const {
    return int_var__rewrite.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::rate_limiter(const cpp_int & _val) { 
    // rate_limiter
    int_var__rate_limiter = _val.convert_to< rate_limiter_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::rate_limiter() const {
    return int_var__rate_limiter.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_write_control_0_t::drop_on_error(const cpp_int & _val) { 
    // drop_on_error
    int_var__drop_on_error = _val.convert_to< drop_on_error_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_write_control_0_t::drop_on_error() const {
    return int_var__drop_on_error.convert_to< cpp_int >();
}
    
void cap_pbc_csr_cfg_pbc_control_t::sw_reset(const cpp_int & _val) { 
    // sw_reset
    int_var__sw_reset = _val.convert_to< sw_reset_cpp_int_t >();
}

cpp_int cap_pbc_csr_cfg_pbc_control_t::sw_reset() const {
    return int_var__sw_reset.convert_to< cpp_int >();
}
    
void cap_pbc_csr_base_t::scratch_reg(const cpp_int & _val) { 
    // scratch_reg
    int_var__scratch_reg = _val.convert_to< scratch_reg_cpp_int_t >();
}

cpp_int cap_pbc_csr_base_t::scratch_reg() const {
    return int_var__scratch_reg.convert_to< cpp_int >();
}
    