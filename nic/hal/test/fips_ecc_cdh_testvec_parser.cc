#include <stdio.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "nic/hal/test/fips_ecc_cdh_testvec_parser.h"



#define FIPS_TESTVEC_ECC_CDH_DEBUG_EN      0
#define FIPS_TESTVEC_ECC_CDH_ERR(...)      printf(__VA_ARGS__)
#define FIPS_TESTVEC_ECC_CDH_TRACE(...)    printf(__VA_ARGS__)
#if (FIPS_TESTVEC_ECC_CDH_DEBUG_EN == 1)
#define FIPS_TESTVEC_ECC_CDH_DEBUG(...)    printf(__VA_ARGS__)
#define FIPS_TESTVEC_ECC_CDH_HEXDUMP(m, d, l)  hex_dump(m, d, l)
#else
#define FIPS_TESTVEC_ECC_CDH_DEBUG(format, ...)
#define FIPS_TESTVEC_ECC_CDH_HEXDUMP(m, d, l)
#endif


/******************************************************************************
    ECC-CDH secp224r1 Domain Parameters
******************************************************************************/
unsigned char secp224r1_p[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01
};

unsigned char secp224r1_n[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0x16, 0xa2,
    0xe0, 0xb8, 0xf0, 0x3e,     0x13, 0xdd, 0x29, 0x45,
    0x5c, 0x5c, 0x2a, 0x3d
};

unsigned char secp224r1_gx[] = {
    0xb7, 0x0e, 0x0c, 0xbd,     0x6b, 0xb4, 0xbf, 0x7f,
    0x32, 0x13, 0x90, 0xb9,     0x4a, 0x03, 0xc1, 0xd3,
    0x56, 0xc2, 0x11, 0x22,     0x34, 0x32, 0x80, 0xd6,
    0x11, 0x5c, 0x1d, 0x21
};

unsigned char secp224r1_gy[] = {
    0xbd, 0x37, 0x63, 0x88,     0xb5, 0xf7, 0x23, 0xfb,
    0x4c, 0x22, 0xdf, 0xe6,     0xcd, 0x43, 0x75, 0xa0,
    0x5a, 0x07, 0x47, 0x64,     0x44, 0xd5, 0x81, 0x99,
    0x85, 0x00, 0x7e, 0x34
};

unsigned char secp224r1_a[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xfe,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfe
};

unsigned char secp224r1_b[] = {
    0xb4, 0x05, 0x0a, 0x85,     0x0c, 0x04, 0xb3, 0xab,
    0xf5, 0x41, 0x32, 0x56,     0x50, 0x44, 0xb0, 0xb7,
    0xd7, 0xbf, 0xd8, 0xba,     0x27, 0x0b, 0x39, 0x43,
    0x23, 0x55, 0xff, 0xb4
};

/******************************************************************************
    ECC-CDH secp256r1 Domain Parameters
******************************************************************************/
unsigned char secp256r1_p[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF 
};

unsigned char secp256r1_n[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xE6, 0xFA, 0xAD,     0xA7, 0x17, 0x9E, 0x84,
    0xF3, 0xB9, 0xCA, 0xC2,     0xFC, 0x63, 0x25, 0x51
};

unsigned char secp256r1_gx[] = {
    0x6B, 0x17, 0xD1, 0xF2,     0xE1, 0x2C, 0x42, 0x47,
    0xF8, 0xBC, 0xE6, 0xE5,     0x63, 0xA4, 0x40, 0xF2,
    0x77, 0x03, 0x7D, 0x81,     0x2D, 0xEB, 0x33, 0xA0, 
    0xF4, 0xA1, 0x39, 0x45,     0xD8, 0x98, 0xC2, 0x96 
};

unsigned char secp256r1_gy[] = {
    0x4F, 0xE3, 0x42, 0xE2,     0xFE, 0x1A, 0x7F, 0x9B,
    0x8E, 0xE7, 0xEB, 0x4A,     0x7C, 0x0F, 0x9E, 0x16,
    0x2B, 0xCE, 0x33, 0x57,     0x6B, 0x31, 0x5E, 0xCE,
    0xCB, 0xB6, 0x40, 0x68,     0x37, 0xBF, 0x51, 0xF5
};

unsigned char secp256r1_a[] = {
    0xFF, 0xFF, 0xFF, 0xFF,     0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF,     0xFF, 0xFF, 0xFF, 0xFC
};

unsigned char secp256r1_b[] = {
    0x5A, 0xC6, 0x35, 0xD8,     0xAA, 0x3A, 0x93, 0xE7,
    0xB3, 0xEB, 0xBD, 0x55,     0x76, 0x98, 0x86, 0xBC,
    0x65, 0x1D, 0x06, 0xB0,     0xCC, 0x53, 0xB0, 0xF6,
    0x3B, 0xCE, 0x3C, 0x3E,     0x27, 0xD2, 0x60, 0x4B 
};

/******************************************************************************
    ECC-CDH secp384r1 Domain Parameters
******************************************************************************/
unsigned char secp384r1_p[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xfe,
    0xff, 0xff, 0xff, 0xff,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xff, 0xff, 0xff, 0xff
};

unsigned char secp384r1_n[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xc7, 0x63, 0x4d, 0x81,     0xf4, 0x37, 0x2d, 0xdf,
    0x58, 0x1a, 0x0d, 0xb2,     0x48, 0xb0, 0xa7, 0x7a,
    0xec, 0xec, 0x19, 0x6a,     0xcc, 0xc5, 0x29, 0x73
};

unsigned char secp384r1_gx[] = {
    0xaa, 0x87, 0xca, 0x22,     0xbe, 0x8b, 0x05, 0x37,
    0x8e, 0xb1, 0xc7, 0x1e,     0xf3, 0x20, 0xad, 0x74,
    0x6e, 0x1d, 0x3b, 0x62,     0x8b, 0xa7, 0x9b, 0x98,
    0x59, 0xf7, 0x41, 0xe0,     0x82, 0x54, 0x2a, 0x38,
    0x55, 0x02, 0xf2, 0x5d,     0xbf, 0x55, 0x29, 0x6c,
    0x3a, 0x54, 0x5e, 0x38,     0x72, 0x76, 0x0a, 0xb7
};

unsigned char secp384r1_gy[] = {
    0x36, 0x17, 0xde, 0x4a,     0x96, 0x26, 0x2c, 0x6f,
    0x5d, 0x9e, 0x98, 0xbf,     0x92, 0x92, 0xdc, 0x29,
    0xf8, 0xf4, 0x1d, 0xbd,     0x28, 0x9a, 0x14, 0x7c,
    0xe9, 0xda, 0x31, 0x13,     0xb5, 0xf0, 0xb8, 0xc0,
    0x0a, 0x60, 0xb1, 0xce,     0x1d, 0x7e, 0x81, 0x9d,
    0x7a, 0x43, 0x1d, 0x7c,     0x90, 0xea, 0x0e, 0x5f
};

unsigned char secp384r1_a[] = {
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xfe,
    0xff, 0xff, 0xff, 0xff,     0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,     0xff, 0xff, 0xff, 0xfc
};

unsigned char secp384r1_b[] = {
    0xb3, 0x31, 0x2f, 0xa7,     0xe2, 0x3e, 0xe7, 0xe4,
    0x98, 0x8e, 0x05, 0x6b,     0xe3, 0xf8, 0x2d, 0x19,
    0x18, 0x1d, 0x9c, 0x6e,     0xfe, 0x81, 0x41, 0x12,
    0x03, 0x14, 0x08, 0x8f,     0x50, 0x13, 0x87, 0x5a,
    0xc6, 0x56, 0x39, 0x8d,     0x8a, 0x2e, 0xd1, 0x9d,
    0x2a, 0x85, 0xc8, 0xed,     0xd3, 0xec, 0x2a, 0xef
};

/******************************************************************************
    ECC-CDH secp521r1 Domain Parameters
******************************************************************************/
unsigned char secp521r1_p[] = {
    0x01, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff
};

unsigned char secp521r1_n[] = {
    0x01, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xfa, 0x51, 0x86,     0x87, 0x83, 0xbf, 0x2f,
    0x96, 0x6b, 0x7f, 0xcc,     0x01, 0x48, 0xf7, 0x09,
    0xa5, 0xd0, 0x3b, 0xb5,     0xc9, 0xb8, 0x89, 0x9c,
    0x47, 0xae, 0xbb, 0x6f,     0xb7, 0x1e, 0x91, 0x38,
    0x64, 0x09
};


unsigned char secp521r1_gx[] = {
    0x00, 0xc6, 0x85, 0x8e,     0x06, 0xb7, 0x04, 0x04,
    0xe9, 0xcd, 0x9e, 0x3e,     0xcb, 0x66, 0x23, 0x95,
    0xb4, 0x42, 0x9c, 0x64,     0x81, 0x39, 0x05, 0x3f,
    0xb5, 0x21, 0xf8, 0x28,     0xaf, 0x60, 0x6b, 0x4d,
    0x3d, 0xba, 0xa1, 0x4b,     0x5e, 0x77, 0xef, 0xe7,
    0x59, 0x28, 0xfe, 0x1d,     0xc1, 0x27, 0xa2, 0xff,
    0xa8, 0xde, 0x33, 0x48,     0xb3, 0xc1, 0x85, 0x6a,
    0x42, 0x9b, 0xf9, 0x7e,     0x7e, 0x31, 0xc2, 0xe5,
    0xbd, 0x66
};

unsigned char secp521r1_gy[] = {
    0x01, 0x18, 0x39, 0x29,     0x6a, 0x78, 0x9a, 0x3b,
    0xc0, 0x04, 0x5c, 0x8a,     0x5f, 0xb4, 0x2c, 0x7d,
    0x1b, 0xd9, 0x98, 0xf5,     0x44, 0x49, 0x57, 0x9b,
    0x44, 0x68, 0x17, 0xaf,     0xbd, 0x17, 0x27, 0x3e,
    0x66, 0x2c, 0x97, 0xee,     0x72, 0x99, 0x5e, 0xf4,
    0x26, 0x40, 0xc5, 0x50,     0xb9, 0x01, 0x3f, 0xad,
    0x07, 0x61, 0x35, 0x3c,     0x70, 0x86, 0xa2, 0x72,
    0xc2, 0x40, 0x88, 0xbe,     0x94, 0x76, 0x9f, 0xd1,
    0x66, 0x50
};

unsigned char secp521r1_a[] = {
    0x01, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff,     0xff, 0xff, 0xff, 0xff,
    0xff, 0xfc
};

unsigned char secp521r1_b[] = {
    0x00, 0x51, 0x95, 0x3e,     0xb9, 0x61, 0x8e, 0x1c,
    0x9a, 0x1f, 0x92, 0x9a,     0x21, 0xa0, 0xb6, 0x85,
    0x40, 0xee, 0xa2, 0xda,     0x72, 0x5b, 0x99, 0xb3,
    0x15, 0xf3, 0xb8, 0xb4,     0x89, 0x91, 0x8e, 0xf1,
    0x09, 0xe1, 0x56, 0x19,     0x39, 0x51, 0xec, 0x7e,
    0x93, 0x7b, 0x16, 0x52,     0xc0, 0xbd, 0x3b, 0xb1,
    0xbf, 0x07, 0x35, 0x73,     0xdf, 0x88, 0x3d, 0x2c,
    0x34, 0xf1, 0xef, 0x45,     0x1f, 0xd4, 0x6b, 0x50,
    0x3f, 0x00
};

/******************************************************************************
    ECC-CDH secp224r1 key
******************************************************************************/
unsigned char secp224r1_qiutx[] =  {
    0xdf, 0x91, 0xd6, 0xc3, 0xd7, 0xef, 0x72, 0x26,
    0xd3, 0x3a, 0x4d, 0xb8, 0x9b, 0xba, 0x9b, 0x6d,
    0xff, 0xad, 0xcf, 0xc9, 0x08, 0x2f, 0xfe, 0x57,
    0x50, 0xb6, 0xa8, 0x8e
};

unsigned char secp224r1_qiuty[] = {
    0x48, 0xb4, 0xfb, 0xc6, 0xcd, 0xe3, 0x37, 0x8f,
    0x49, 0x36, 0x8c, 0x0c, 0xe9, 0xa5, 0xc1, 0x3f,
    0x17, 0x9e, 0xb7, 0x9a, 0x07, 0x1f, 0x68, 0xd0,
    0xba, 0x76, 0x43, 0x41
};

unsigned char secp224r1_diut[] =  {
    0x00, 0x9b, 0xec, 0x47, 0x80, 0xc0, 0x36, 0x15,
    0xcc, 0x46, 0x75, 0x1e, 0x92, 0x7a, 0x88, 0x87,
    0xa3, 0xf8, 0xfe, 0x8a, 0x6d, 0x90, 0x1b, 0x51,
    0x63, 0x46, 0x39, 0xa1
};

/******************************************************************************
    ECC-CDH secp256r1 key
******************************************************************************/
unsigned char secp256r1_qiutx[] =  {
    0xe2, 0x3f, 0xda, 0x04, 0x1c, 0xc6, 0x52, 0xc7,
    0xd2, 0x14, 0x6a, 0xfb, 0x9e, 0xcf, 0xe7, 0x86,
    0x8e, 0x45, 0x92, 0x3f, 0x4a, 0x79, 0xe3, 0xbf,
    0x81, 0x45, 0xa3, 0x35, 0x04, 0xa8, 0x54, 0x80
};
unsigned char secp256r1_qiuty[] =  {
    0xbd, 0x0d, 0x27, 0x72, 0xaf, 0x07, 0x9d, 0x06,
    0x12, 0xa8, 0x7e, 0xd1, 0x16, 0x9a, 0x2c, 0x02,
    0x9a, 0xf7, 0xd3, 0x98, 0xba, 0xa6, 0x9a, 0xfb,
    0x42, 0x80, 0xd0, 0xc8, 0x33, 0x1d, 0x9b, 0xea
};
unsigned char secp256r1_diut[] =  {
    0x82, 0x92, 0x32, 0x7f, 0x94, 0xe6, 0xbf, 0xe5,
    0xaa, 0x30, 0x53, 0xde, 0xdc, 0xe1, 0x11, 0x57,
    0x58, 0x45, 0xfe, 0x95, 0xb0, 0x6c, 0x71, 0xe3,
    0xf8, 0xaa, 0x74, 0x8a, 0x52, 0xa4, 0xaf, 0x89
};

/******************************************************************************
    ECC-CDH secp384r1 key
******************************************************************************/
unsigned char secp384r1_qiutx[] = {
    0x2b, 0x54, 0x73, 0x8f, 0x4e, 0x5c, 0x1c, 0xf4,
    0x91, 0x15, 0x3f, 0xa0, 0x91, 0xa1, 0x7d, 0x26,
    0x77, 0x29, 0x09, 0x8c, 0x86, 0x93, 0x63, 0x8f,
    0x1f, 0xd7, 0x83, 0x45, 0x40, 0x62, 0x19, 0x19,
    0x4a, 0x25, 0x37, 0x0a, 0xec, 0x34, 0xf4, 0xa8,
    0x62, 0xbf, 0x9f, 0x30, 0xa4, 0xc6, 0xdd, 0xe3
};
unsigned char secp384r1_qiuty[] = {
    0x6c, 0x8f, 0xda, 0x58, 0xe1, 0xdf, 0x0c, 0xf8,
    0x53, 0x77, 0xb9, 0x3e, 0x78, 0xe4, 0x1c, 0xc2,
    0x73, 0xaf, 0x35, 0xfc, 0xbb, 0x11, 0x29, 0x6e,
    0x41, 0xce, 0x55, 0xde, 0x77, 0x05, 0xa0, 0x6b,
    0x37, 0x41, 0xcc, 0x68, 0x20, 0x93, 0x36, 0x8f,
    0xc0, 0x66, 0x32, 0xb1, 0x36, 0x72, 0xe1, 0x22
};
unsigned char secp384r1_diut[] = {
    0x3e, 0x29, 0x5b, 0x33, 0x47, 0x40, 0x5c, 0x8f,
    0xa5, 0x0f, 0x29, 0xcc, 0xaf, 0xe8, 0x28, 0x18,
    0x4b, 0x74, 0x6f, 0x8d, 0x5d, 0x0f, 0x31, 0x87,
    0xe6, 0x01, 0xca, 0x68, 0x55, 0x4a, 0xac, 0x41,
    0xfd, 0x94, 0xca, 0xa8, 0x86, 0x40, 0x11, 0xaa,
    0x37, 0xe4, 0x0c, 0xf5, 0x55, 0x9c, 0xf8, 0xbf
};

/******************************************************************************
    ECC-CDH secp521r1 key
******************************************************************************/
unsigned char secp521r1_qiutx[] = {
    0x01, 0xa6, 0x31, 0xb8, 0x4b, 0x54, 0x2b, 0x2c,
    0xa8, 0x1d, 0x42, 0x19, 0x95, 0x12, 0x50, 0x32,
    0x66, 0xbe, 0xc4, 0x0c, 0x7a, 0x2e, 0x73, 0x50,
    0x9a, 0x00, 0xdf, 0xed, 0x82, 0x28, 0x6d, 0x6c,
    0x7f, 0x34, 0xfb, 0xa5, 0x4f, 0xd9, 0xd1, 0x68,
    0x70, 0xe1, 0x0b, 0x3a, 0xfe, 0x15, 0x6b, 0x32,
    0xa2, 0xb3, 0xa0, 0x14, 0x42, 0x95, 0xd4, 0xed,
    0xbc, 0x82, 0x56, 0xfd, 0xbc, 0x19, 0xae, 0x12,
    0xd6, 0x54
};
unsigned char secp521r1_qiuty[] = {
    0x01, 0xfe, 0xa3, 0x36, 0xbf, 0xf6, 0xc9, 0xdd,
    0xff, 0x87, 0x20, 0xc2, 0x92, 0x0c, 0xab, 0xac,
    0x72, 0x18, 0x99, 0xaa, 0xae, 0x3a, 0x7d, 0x4d,
    0xd3, 0xf4, 0xbf, 0x47, 0x23, 0x53, 0x33, 0xe6,
    0xca, 0x5a, 0x81, 0x71, 0x5c, 0x32, 0xde, 0x0c,
    0x3f, 0x65, 0x5c, 0xae, 0x79, 0x3e, 0xeb, 0xdc,
    0x2c, 0xef, 0x8a, 0xd6, 0x67, 0xcb, 0x2e, 0x44,
    0xa1, 0x33, 0x20, 0x39, 0xf8, 0x8d, 0x45, 0xf1,
    0x0d, 0xea
};
unsigned char secp521r1_diut[] = {
    0x01, 0xf5, 0xbe, 0xf2, 0xdc, 0x0e, 0xd8, 0xe3,
    0xdd, 0x8b, 0x43, 0xc0, 0x2f, 0xad, 0xb5, 0x30,
    0xd9, 0xec, 0xe1, 0xcc, 0x92, 0x36, 0x08, 0xb0,
    0xd3, 0xf3, 0xce, 0x3d, 0x39, 0x5d, 0xd7, 0x8c,
    0x1b, 0xc6, 0xe4, 0x72, 0xef, 0x7f, 0x57, 0x8d,
    0xc8, 0x6a, 0xa4, 0xfd, 0x9b, 0x7c, 0xf7, 0x33,
    0x6a, 0x35, 0xc2, 0x85, 0x51, 0x49, 0xc9, 0xf2,
    0x33, 0x59, 0xc8, 0xb1, 0xf9, 0x95, 0x78, 0x7e,
    0x8d, 0x7e
};

fips_testvec_ecc_cdh_parser::fips_testvec_ecc_cdh_parser(const char *test_vector_file)
{
    char            line[FIPS_TESTVEC_ECC_CDH_LINE_SZ_MAX];
    FILE*           fp;
    size_t          bn_len;
    uint32_t        key_size = 0, count;
    int             ret = 0, idx = 0;
    fips_ecc_cdh_group_t    group;
    uint16_t        entry_idx = 0;

    fp = fopen(test_vector_file, "r");
    if (fp == NULL) {
        return;
    }

    while ((fgets(line, FIPS_TESTVEC_ECC_CDH_LINE_SZ_MAX, fp)) != NULL) {

        if (!strncmp(line, FIPS_TESTVEC_ECC_CDH_KEY_SIZE, strlen(FIPS_TESTVEC_ECC_CDH_KEY_SIZE))) {
            if (entry_idx) {
                group.entry_count = entry_idx;
                fips_ecc_cdh_groups.push_back(group);
                entry_idx = 0;
            }

            ret = fips_parse_dec_int(line + strlen(FIPS_TESTVEC_ECC_CDH_KEY_SIZE), &key_size);
            if (ret) {
                FIPS_TESTVEC_ECC_CDH_ERR("Failed to parse 'key size'\n");
                break;
            }
            else {
                group.key_size = key_size;
                key_size = (key_size + 7)/8;
                group.key_size_bytes = key_size;
                FIPS_TESTVEC_ECC_CDH_DEBUG("Key Size: %d (%d B)\n", group.key_size, group.key_size_bytes);
            }
            /* Setup default public+private key pairs */
            switch (group.key_size_bytes) {
                case 28:
                    /* Domain Parameters */
                    memcpy(group.p, secp224r1_p, group.key_size_bytes);
                    memcpy(group.n, secp224r1_n, group.key_size_bytes);
                    memcpy(group.gx, secp224r1_gx, group.key_size_bytes);
                    memcpy(group.gy, secp224r1_gy, group.key_size_bytes);
                    memcpy(group.a, secp224r1_a, group.key_size_bytes);
                    memcpy(group.b, secp224r1_b, group.key_size_bytes);

                    /* Key */
                    for (idx = 0; idx < FIPS_ECC_CDH_ENTRIES_MAX; idx++) {
                        memcpy(group.entries[idx].qiutx, secp224r1_qiutx, group.key_size_bytes);
                        memcpy(group.entries[idx].qiuty, secp224r1_qiuty, group.key_size_bytes);
                        memcpy(group.entries[idx].diut, secp224r1_diut, group.key_size_bytes);
                    }
                    break;
                case 32:
                    /* Domain Parameters */
                    memcpy(group.p, secp256r1_p, group.key_size_bytes);
                    memcpy(group.n, secp256r1_n, group.key_size_bytes);
                    memcpy(group.gx, secp256r1_gx, group.key_size_bytes);
                    memcpy(group.gy, secp256r1_gy, group.key_size_bytes);
                    memcpy(group.a, secp256r1_a, group.key_size_bytes);
                    memcpy(group.b, secp256r1_b, group.key_size_bytes);

                    /* Key */
                    for (idx = 0; idx < FIPS_ECC_CDH_ENTRIES_MAX; idx++) {
                        memcpy(group.entries[idx].qiutx, secp256r1_qiutx, group.key_size_bytes);
                        memcpy(group.entries[idx].qiuty, secp256r1_qiuty, group.key_size_bytes);
                        memcpy(group.entries[idx].diut, secp256r1_diut, group.key_size_bytes);
                    }
                    break;
                case 48:
                    /* Domain Parameters */
                    memcpy(group.p, secp384r1_p, group.key_size_bytes);
                    memcpy(group.n, secp384r1_n, group.key_size_bytes);
                    memcpy(group.gx, secp384r1_gx, group.key_size_bytes);
                    memcpy(group.gy, secp384r1_gy, group.key_size_bytes);
                    memcpy(group.a, secp384r1_a, group.key_size_bytes);
                    memcpy(group.b, secp384r1_b, group.key_size_bytes);

                    /* Key */
                    for (idx = 0; idx < FIPS_ECC_CDH_ENTRIES_MAX; idx++) {
                        memcpy(group.entries[idx].qiutx, secp384r1_qiutx, group.key_size_bytes);
                        memcpy(group.entries[idx].qiuty, secp384r1_qiuty, group.key_size_bytes);
                        memcpy(group.entries[idx].diut, secp384r1_diut, group.key_size_bytes);
                    }
                    break;
                case 66:
                    /* Domain Parameters */
                    memcpy(group.p, secp521r1_p, group.key_size_bytes);
                    memcpy(group.n, secp521r1_n, group.key_size_bytes);
                    memcpy(group.gx, secp521r1_gx, group.key_size_bytes);
                    memcpy(group.gy, secp521r1_gy, group.key_size_bytes);
                    memcpy(group.a, secp521r1_a, group.key_size_bytes);
                    memcpy(group.b, secp521r1_b, group.key_size_bytes);

                    /* Key */
                    for (idx = 0; idx < FIPS_ECC_CDH_ENTRIES_MAX; idx++) {
                        memcpy(group.entries[idx].qiutx, secp521r1_qiutx, group.key_size_bytes);
                        memcpy(group.entries[idx].qiuty, secp521r1_qiuty, group.key_size_bytes);
                        memcpy(group.entries[idx].diut, secp521r1_diut, group.key_size_bytes);
                    }
                    break;
                default:
                    FIPS_TESTVEC_ECC_CDH_ERR("Invalid key length\n");
                    break;
            }
        }
        else if (!strncmp(line, FIPS_TESTVEC_ECC_CDH_COUNT, strlen(FIPS_TESTVEC_ECC_CDH_COUNT))) {
            ret = fips_parse_dec_int(line + strlen(FIPS_TESTVEC_ECC_CDH_COUNT), &count);
            if (ret) {
                FIPS_TESTVEC_ECC_CDH_ERR("Failed to parse 'count'\n");
                break;
            }
            FIPS_TESTVEC_ECC_CDH_DEBUG("Count: %d\n", count);
            if (count != entry_idx) {
                FIPS_TESTVEC_ECC_CDH_ERR("Count mismatch: expected: %d, got: %d\n", entry_idx, count);
                break;
            }
        }
        else if (!strncmp(line, FIPS_TESTVEC_ECC_CDH_QCAVSX, strlen(FIPS_TESTVEC_ECC_CDH_QCAVSX))) {
            bn_len = FIPS_ECC_CDH_KEY_SIZE_MAX;
            ret = fips_parse_hex_bn(line + strlen(FIPS_TESTVEC_ECC_CDH_QCAVSX), 
                    group.entries[entry_idx].qcavsx, &bn_len);
            if (ret) {
                FIPS_TESTVEC_ECC_CDH_ERR("Failed to parse 'QCAVSx'\n");
                break;
            }
            if (bn_len != group.key_size_bytes) {
                FIPS_TESTVEC_ECC_CDH_ERR("Invalid QCAVSx size: expected %d, got %d\n",
                        group.key_size_bytes, (int)bn_len);
                break;
            }
            FIPS_TESTVEC_ECC_CDH_HEXDUMP("QCAVSx", group.entries[entry_idx].qcavsx, bn_len);
        }
        else if (!strncmp(line, FIPS_TESTVEC_ECC_CDH_QCAVSY, strlen(FIPS_TESTVEC_ECC_CDH_QCAVSY))) {
            bn_len = FIPS_ECC_CDH_KEY_SIZE_MAX;
            ret = fips_parse_hex_bn(line + strlen(FIPS_TESTVEC_ECC_CDH_QCAVSY), 
                    group.entries[entry_idx].qcavsy, &bn_len);
            if (ret) {
                FIPS_TESTVEC_ECC_CDH_ERR("Failed to parse 'QCAVSy'\n");
                break;
            }
            if (bn_len != group.key_size_bytes) {
                FIPS_TESTVEC_ECC_CDH_ERR("Invalid QCAVSy size: expected %d, got %d\n",
                        group.key_size_bytes, (int)bn_len);
                break;
            }
            FIPS_TESTVEC_ECC_CDH_HEXDUMP("QCAVSy", group.entries[entry_idx].qcavsy, bn_len);
            entry_idx++;
        }
    }

    if (entry_idx) {
        group.entry_count = entry_idx;
        fips_ecc_cdh_groups.push_back(group);
        entry_idx = 0;
    }

    fclose(fp);
    return;
}


void fips_testvec_ecc_cdh_parser::print_group_testvec(FILE *fp, fips_ecc_cdh_group_t &group)
{

    fprintf(fp, "[P-%d]\n\n", group.key_size);

    for (int idx = 0; idx < group.entry_count; idx++) {
        fprintf(fp, "COUNT = %d\n", idx);
        fips_testvec_hex_output(fp, "QCAVSx",
                group.entries[idx].qcavsx,
                group.key_size_bytes);
        fips_testvec_hex_output(fp, "QCAVSy",
                group.entries[idx].qcavsy,
                group.key_size_bytes);
        fips_testvec_hex_output(fp, "QIUTx",
                group.entries[idx].qiutx,
                group.key_size_bytes);
        fips_testvec_hex_output(fp, "QIUTy",
                group.entries[idx].qiuty,
                group.key_size_bytes);
        fips_testvec_hex_output(fp, "ZIUT",
                group.entries[idx].ziut,
                group.key_size_bytes);
        fprintf(fp, "\n");
    }
    fprintf(fp, "\n");
    return;
}
