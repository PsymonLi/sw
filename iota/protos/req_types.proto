//------------------------------------------------------------------------------
// {C} Copyright 2018 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IO Test Automation Request Message Types
//------------------------------------------------------------------------------

syntax = "proto3";
package iotamodel;

// Imports
import public "gogo.proto";

import "common.proto";


// ConfigTopologyInfo encapsulates all topology information for a given iota invocation
message ConfigTopologyInfo{
    enum EntrypointType {
        ENTRYPOINT_NONE    = 0;
        NAPLES_REST        = 1;
        VENICE_REST        = 2;
    }
    // ConfigEntrypoint captures what object model configs to generate for a given testbed.
    // Could either be venice object model or Agent object model
    EntrypointType      entry_point_type = 1;

    // RESTEndpoint to push the generated configs to
    repeated string     rest_endpoint = 2;

    // Nodes in the topology
    repeated Node       nodes = 3;

    // VLANs for the testbed
    repeated uint32     vlans = 4;
}

message App {
    enum AppType {
        APP_NONE    = 0;
        RAW_PKT     = 1;
        CMD_APP     = 2;
    }

    // AppType captures the workload type. Currently two categories are supported RAW_PKT which supports packet tx and rx
    // and CommandType which can run a command natively on the node. iPerf and the like
    AppType     type = 1;

    // AppConfig is arguments to the app
    string      config = 2;

    // Command that needs to be run on an app
    Command     command = 3;
}

message Command {
    enum CommandMode {
        COMMAND_NONE        = 0;
        COMMAND_FOREGROUND  = 1;
        COMMAND_BACKGROUND  = 2;
    }
    // CommandMode captures the App command type. Whether it should be run in foreground or in background
    CommandMode     mode = 1;
    string          command = 2;
}


message Node {
    enum PersonalityType {
        PERSONALITY_NONE                = 0;
        PERSONALITY_NAPLES              = 1;
        PERSONALITY_VENICE              = 2;
        PERSONALITY_NAPLES_WITH_QEMU    = 3;
    }
    // PersonalityType captures the node personality. naples node, venice node or qemu
    PersonalityType     type = 1;

    // Image captures the the built artifacts that need to be loaded on the node depending on the personality type
    string              image = 2;

    // IP Address of the node
    string              ipaddress = 3;
}

message CfgQueryParameters {
    // Object Kind
    string                  kind = 1;

    // MatchSelector accepts a multiple key value pair, with a default AND between them
    repeated MatchSelector  selectors = 2;
}

message MatchSelector {
    string key = 1;
    string value = 2;
}
