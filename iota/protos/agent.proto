//------------------------------------------------------------------------------
// {C} Copyright 2018 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IO Test Automation Config Management Service
//------------------------------------------------------------------------------

syntax = "proto3";
package iotamodel;

import "topo_svc.proto";

message NaplesConfig {

    // Control interface to use
    string control_intf          = 1;

    // Control ip to use
    string control_ip            = 2;

    // Data IP to use for tunneled mode for now
    repeated string data_ips     = 3;

    // Data Interfaces to configure
    repeated string data_intfs   = 4;

    // Venice IPs to use, if specified agent will come up im managed mode.
    repeated string venice_ips   = 5;

    // Specifies whether pass through mode or not.
    bool pass_through_mode       = 6; // Pass Through mode
}

message VeniceNode {

    // hostname of peer node
    string  host_name   = 1;

    // ip of the peer node
    string  ip_address  = 2;
}

message VeniceConfig {

    // hostname to set for venice.
    string host_name                  = 1;

    // Control interface to use
    string control_intf               = 2;

    // Control ip to use
    string control_ip                 = 3;

    // Peers to add host name entries.
    repeated VeniceNode venice_nodes  = 4;

}


message IotaNode {

    Node node                           = 1;

    oneof node_info {
        // naples
        NaplesConfig    naples_config  = 2;

        VeniceConfig    venice_config  = 3;
    }
}
// ---------------------------- Iota Agent API ----------------------------
// Config Management Service
service IotaAgentApi {

    // AddNode brings up the node with the personality
    rpc AddNode (IotaNode) returns (IotaNode) {};

    // DeleteNode, remove the personaltiy set
    rpc DeleteNode (Node) returns (Node) {};

    // AddWorkloads brings up a workload type on a given node
    rpc AddWorkload (Workload) returns (Workload) {};

    // DeleteWorkloads deletes a given workload
    rpc DeleteWorkload (Workload) returns (Workload) {};

    // Trigger invokes the workload's trigger. It could be ping, start client/server etc..
    rpc Trigger(TriggerMsg) returns (TriggerMsg) {};

    // CheckClusterHealth returns the cluster health
    rpc CheckHealth(NodeHealth) returns  (NodeHealth) {};

}
