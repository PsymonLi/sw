// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topo_svc.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ConfigTopologyInfo from req_types.proto

// Ignoring public import of App from req_types.proto

// Ignoring public import of Command from req_types.proto

// Ignoring public import of Node from req_types.proto

// Ignoring public import of CfgQueryParameters from req_types.proto

// Ignoring public import of MatchSelector from req_types.proto

// Ignoring public import of EntrypointType from req_types.proto

// Ignoring public import of Type from req_types.proto

// Ignoring public import of CmdType from req_types.proto

// Ignoring public import of Type from req_types.proto

// Ignoring public import of IotaAPIResponse from resp_types.proto

// Ignoring public import of ClusterHealthResponse from resp_types.proto

// Ignoring public import of NodeStatus from resp_types.proto

// Ignoring public import of InstantiateAppResponse from resp_types.proto

// Ignoring public import of InstantiateTopoResponse from resp_types.proto

// Ignoring public import of AddNodeResponse from resp_types.proto

// Ignoring public import of GeneratedConfigResponse from resp_types.proto

// Ignoring public import of ConfigPushResponse from resp_types.proto

// Ignoring public import of TriggerAppResponse from resp_types.proto

// Ignoring public import of APIResponseType from resp_types.proto

// Ignoring public import of HealthCodeType from resp_types.proto

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TopologyApi service

type TopologyApiClient interface {
	// InstantiateTopology is called by harness which assigns a personality to the node based on the topology.
	// This is a blocking call to the harness, The parallel instantiation across the nodes is handled internally.
	InstantiateTopology(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*InstantiateTopoResponse, error)
	// InstantiateApps creates a app on the specified node.
	InstantiateApps(ctx context.Context, in *App, opts ...grpc.CallOption) (*InstantiateAppResponse, error)
	// AddNode adds a node to the current topology
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*AddNodeResponse, error)
	// Trigger calls the trigger function of the app.
	TriggerApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*TriggerAppResponse, error)
	// GetAppStdout returns the std out of an app which was run in the background.
	GetAppStdout(ctx context.Context, in *App, opts ...grpc.CallOption) (*TriggerAppResponse, error)
	// Harness queries cluster health prior to running a test case
	CheckClusterHealth(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*ClusterHealthResponse, error)
}

type topologyApiClient struct {
	cc *grpc.ClientConn
}

func NewTopologyApiClient(cc *grpc.ClientConn) TopologyApiClient {
	return &topologyApiClient{cc}
}

func (c *topologyApiClient) InstantiateTopology(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*InstantiateTopoResponse, error) {
	out := new(InstantiateTopoResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/InstantiateTopology", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) InstantiateApps(ctx context.Context, in *App, opts ...grpc.CallOption) (*InstantiateAppResponse, error) {
	out := new(InstantiateAppResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/InstantiateApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*AddNodeResponse, error) {
	out := new(AddNodeResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) TriggerApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*TriggerAppResponse, error) {
	out := new(TriggerAppResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/TriggerApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) GetAppStdout(ctx context.Context, in *App, opts ...grpc.CallOption) (*TriggerAppResponse, error) {
	out := new(TriggerAppResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/GetAppStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) CheckClusterHealth(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*ClusterHealthResponse, error) {
	out := new(ClusterHealthResponse)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/CheckClusterHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopologyApi service

type TopologyApiServer interface {
	// InstantiateTopology is called by harness which assigns a personality to the node based on the topology.
	// This is a blocking call to the harness, The parallel instantiation across the nodes is handled internally.
	InstantiateTopology(context.Context, *ConfigTopologyInfo) (*InstantiateTopoResponse, error)
	// InstantiateApps creates a app on the specified node.
	InstantiateApps(context.Context, *App) (*InstantiateAppResponse, error)
	// AddNode adds a node to the current topology
	AddNode(context.Context, *Node) (*AddNodeResponse, error)
	// Trigger calls the trigger function of the app.
	TriggerApp(context.Context, *App) (*TriggerAppResponse, error)
	// GetAppStdout returns the std out of an app which was run in the background.
	GetAppStdout(context.Context, *App) (*TriggerAppResponse, error)
	// Harness queries cluster health prior to running a test case
	CheckClusterHealth(context.Context, *ConfigTopologyInfo) (*ClusterHealthResponse, error)
}

func RegisterTopologyApiServer(s *grpc.Server, srv TopologyApiServer) {
	s.RegisterService(&_TopologyApi_serviceDesc, srv)
}

func _TopologyApi_InstantiateTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigTopologyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).InstantiateTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/InstantiateTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).InstantiateTopology(ctx, req.(*ConfigTopologyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_InstantiateApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).InstantiateApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/InstantiateApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).InstantiateApps(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_TriggerApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).TriggerApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/TriggerApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).TriggerApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_GetAppStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).GetAppStdout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/GetAppStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).GetAppStdout(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_CheckClusterHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigTopologyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).CheckClusterHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/CheckClusterHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).CheckClusterHealth(ctx, req.(*ConfigTopologyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopologyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotamodel.TopologyApi",
	HandlerType: (*TopologyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstantiateTopology",
			Handler:    _TopologyApi_InstantiateTopology_Handler,
		},
		{
			MethodName: "InstantiateApps",
			Handler:    _TopologyApi_InstantiateApps_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _TopologyApi_AddNode_Handler,
		},
		{
			MethodName: "TriggerApp",
			Handler:    _TopologyApi_TriggerApp_Handler,
		},
		{
			MethodName: "GetAppStdout",
			Handler:    _TopologyApi_GetAppStdout_Handler,
		},
		{
			MethodName: "CheckClusterHealth",
			Handler:    _TopologyApi_CheckClusterHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topo_svc.proto",
}

func init() { proto.RegisterFile("topo_svc.proto", fileDescriptorTopoSvc) }

var fileDescriptorTopoSvc = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x5b, 0x0b, 0x8a, 0xa3, 0xb4, 0x25, 0xee, 0x82, 0x06, 0xed, 0xde, 0x04, 0x74, 0xe3,
	0x46, 0x64, 0x2c, 0xa8, 0xdd, 0x48, 0xd1, 0x82, 0xe0, 0xa6, 0x4c, 0x9b, 0xdb, 0xe9, 0x60, 0x3a,
	0xf7, 0x9a, 0xb9, 0x11, 0xfa, 0x26, 0x3e, 0x90, 0x0b, 0x97, 0x3e, 0x82, 0xd4, 0x17, 0x11, 0x53,
	0x6b, 0x07, 0x15, 0xc4, 0xdd, 0xdc, 0x73, 0xce, 0x77, 0xe6, 0x4f, 0xd4, 0x19, 0x09, 0xfb, 0xee,
	0x61, 0x18, 0x53, 0x8e, 0x8c, 0xc1, 0xba, 0x41, 0x56, 0x13, 0x4c, 0x21, 0x0b, 0xb7, 0x35, 0xa2,
	0xce, 0x20, 0x51, 0x64, 0x12, 0x65, 0x2d, 0xb2, 0x62, 0x83, 0xd6, 0xcd, 0x83, 0xe1, 0xbe, 0x36,
	0x3c, 0x2e, 0x06, 0xf1, 0x10, 0x27, 0x89, 0x46, 0x8d, 0x49, 0x29, 0x0f, 0x8a, 0x51, 0x39, 0x95,
	0x43, 0xb9, 0xfa, 0x8c, 0x37, 0x72, 0xb8, 0xef, 0xf3, 0x94, 0x60, 0xc1, 0x37, 0x73, 0x70, 0xe4,
	0x2b, 0x07, 0x4f, 0x35, 0xb1, 0xd1, 0x43, 0xc2, 0x0c, 0xf5, 0x54, 0x92, 0x09, 0x6e, 0xc5, 0x56,
	0xc7, 0x3a, 0x56, 0x96, 0x8d, 0x62, 0x58, 0x38, 0xc1, 0x4e, 0xfc, 0x75, 0xc4, 0xb8, 0x8d, 0x76,
	0x64, 0xf4, 0xc2, 0xea, 0xd8, 0x11, 0x86, 0x2d, 0xcf, 0xfe, 0x86, 0x5f, 0x81, 0x23, 0xb4, 0x0e,
	0x5a, 0x95, 0xe0, 0x4c, 0x34, 0x3c, 0x53, 0x12, 0xb9, 0xa0, 0xee, 0x81, 0x92, 0x28, 0xdc, 0xfb,
	0xbd, 0x48, 0x12, 0x79, 0x3d, 0x47, 0x62, 0x4d, 0xa6, 0xe9, 0x25, 0xa6, 0x10, 0x34, 0xbc, 0xfc,
	0x87, 0x10, 0x86, 0x7e, 0xe1, 0x3c, 0xe4, 0x91, 0xc7, 0x42, 0xf4, 0x72, 0xa3, 0x35, 0xe4, 0x92,
	0xe8, 0xc7, 0xe6, 0xfe, 0x25, 0x97, 0x31, 0x0f, 0x3f, 0x11, 0x9b, 0xe7, 0xc0, 0x92, 0xe8, 0x9a,
	0x53, 0x2c, 0xf8, 0xff, 0x05, 0x37, 0x22, 0x68, 0x8f, 0x61, 0x78, 0xd7, 0xce, 0x0a, 0xc7, 0x90,
	0x5f, 0x80, 0xca, 0x78, 0xfc, 0xd7, 0xe3, 0xee, 0xfa, 0xb6, 0x0f, 0x2e, 0x8b, 0x4f, 0x9b, 0xcf,
	0xb3, 0xa8, 0xfa, 0x32, 0x8b, 0xaa, 0xaf, 0xb3, 0xa8, 0xfa, 0xf8, 0x16, 0x55, 0xba, 0x2b, 0xdd,
	0xda, 0x60, 0xb5, 0xfc, 0xe3, 0xc3, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb8, 0xd0, 0x7f,
	0x70, 0x02, 0x00, 0x00,
}
