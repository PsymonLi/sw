// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topo_svc.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Op defines topology operation
type Op int32

const (
	Op_NONE    Op = 0
	Op_ADD     Op = 1
	Op_DELETE  Op = 2
	Op_GET     Op = 3
	Op_SAVE    Op = 4
	Op_RESTORE Op = 5
)

var Op_name = map[int32]string{
	0: "NONE",
	1: "ADD",
	2: "DELETE",
	3: "GET",
	4: "SAVE",
	5: "RESTORE",
}
var Op_value = map[string]int32{
	"NONE":    0,
	"ADD":     1,
	"DELETE":  2,
	"GET":     3,
	"SAVE":    4,
	"RESTORE": 5,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}
func (Op) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{0} }

type PersonalityType int32

const (
	PersonalityType_PERSONALITY_NONE       PersonalityType = 0
	PersonalityType_PERSONALITY_NAPLES_SIM PersonalityType = 1
	// No datapath, just spin up multiple naples-sim for scale.
	PersonalityType_PERSONALITY_NAPLES_MULTI_SIM PersonalityType = 2
	// naples sim just running control path
	PersonalityType_PERSONALITY_NAPLES_CONTROL_SIM   PersonalityType = 3
	PersonalityType_PERSONALITY_VENICE               PersonalityType = 4
	PersonalityType_PERSONALITY_NAPLES_SIM_WITH_QEMU PersonalityType = 5
	// Naples Hardware
	PersonalityType_PERSONALITY_NAPLES      PersonalityType = 6
	PersonalityType_PERSONALITY_NAPLES_BITW PersonalityType = 7
	// Naples BITW model to run on one host for performance
	PersonalityType_PERSONALITY_NAPLES_BITW_PERF PersonalityType = 8
	PersonalityType_PERSONALITY_THIRD_PARTY_NIC  PersonalityType = 9
	PersonalityType_PERSONALITY_MELLANOX         PersonalityType = 10
	PersonalityType_PERSONALITY_BROADCOM         PersonalityType = 11
	PersonalityType_PERSONALITY_INTEL            PersonalityType = 12
	// Node just run commands
	PersonalityType_PERSONALITY_COMMAND_NODE PersonalityType = 13
	PersonalityType_PERSONALITY_VENICE_BM    PersonalityType = 14
	PersonalityType_PERSONALITY_VCENTER_NODE PersonalityType = 15
	// Naples with DVS mode
	PersonalityType_PERSONALITY_NAPLES_DVS          PersonalityType = 16
	PersonalityType_PERSONALITY_THIRD_PARTY_NIC_DVS PersonalityType = 17
)

var PersonalityType_name = map[int32]string{
	0:  "PERSONALITY_NONE",
	1:  "PERSONALITY_NAPLES_SIM",
	2:  "PERSONALITY_NAPLES_MULTI_SIM",
	3:  "PERSONALITY_NAPLES_CONTROL_SIM",
	4:  "PERSONALITY_VENICE",
	5:  "PERSONALITY_NAPLES_SIM_WITH_QEMU",
	6:  "PERSONALITY_NAPLES",
	7:  "PERSONALITY_NAPLES_BITW",
	8:  "PERSONALITY_NAPLES_BITW_PERF",
	9:  "PERSONALITY_THIRD_PARTY_NIC",
	10: "PERSONALITY_MELLANOX",
	11: "PERSONALITY_BROADCOM",
	12: "PERSONALITY_INTEL",
	13: "PERSONALITY_COMMAND_NODE",
	14: "PERSONALITY_VENICE_BM",
	15: "PERSONALITY_VCENTER_NODE",
	16: "PERSONALITY_NAPLES_DVS",
	17: "PERSONALITY_THIRD_PARTY_NIC_DVS",
}
var PersonalityType_value = map[string]int32{
	"PERSONALITY_NONE":                 0,
	"PERSONALITY_NAPLES_SIM":           1,
	"PERSONALITY_NAPLES_MULTI_SIM":     2,
	"PERSONALITY_NAPLES_CONTROL_SIM":   3,
	"PERSONALITY_VENICE":               4,
	"PERSONALITY_NAPLES_SIM_WITH_QEMU": 5,
	"PERSONALITY_NAPLES":               6,
	"PERSONALITY_NAPLES_BITW":          7,
	"PERSONALITY_NAPLES_BITW_PERF":     8,
	"PERSONALITY_THIRD_PARTY_NIC":      9,
	"PERSONALITY_MELLANOX":             10,
	"PERSONALITY_BROADCOM":             11,
	"PERSONALITY_INTEL":                12,
	"PERSONALITY_COMMAND_NODE":         13,
	"PERSONALITY_VENICE_BM":            14,
	"PERSONALITY_VCENTER_NODE":         15,
	"PERSONALITY_NAPLES_DVS":           16,
	"PERSONALITY_THIRD_PARTY_NIC_DVS":  17,
}

func (x PersonalityType) String() string {
	return proto.EnumName(PersonalityType_name, int32(x))
}
func (PersonalityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{1} }

type EntityType int32

const (
	EntityType_ENTITY_TYPE_NONE   EntityType = 0
	EntityType_ENTITY_TYPE_HOST   EntityType = 1
	EntityType_ENTITY_TYPE_NAPLES EntityType = 2
)

var EntityType_name = map[int32]string{
	0: "ENTITY_TYPE_NONE",
	1: "ENTITY_TYPE_HOST",
	2: "ENTITY_TYPE_NAPLES",
}
var EntityType_value = map[string]int32{
	"ENTITY_TYPE_NONE":   0,
	"ENTITY_TYPE_HOST":   1,
	"ENTITY_TYPE_NAPLES": 2,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{2} }

type InterfaceType int32

const (
	InterfaceType_INTERFACE_TYPE_NONE      InterfaceType = 0
	InterfaceType_INTERFACE_TYPE_VSS       InterfaceType = 1
	InterfaceType_INTERFACE_TYPE_SRIOV     InterfaceType = 2
	InterfaceType_INTERFACE_TYPE_DVS       InterfaceType = 3
	InterfaceType_INTERFACE_TYPE_DVS_PVLAN InterfaceType = 4
)

var InterfaceType_name = map[int32]string{
	0: "INTERFACE_TYPE_NONE",
	1: "INTERFACE_TYPE_VSS",
	2: "INTERFACE_TYPE_SRIOV",
	3: "INTERFACE_TYPE_DVS",
	4: "INTERFACE_TYPE_DVS_PVLAN",
}
var InterfaceType_value = map[string]int32{
	"INTERFACE_TYPE_NONE":      0,
	"INTERFACE_TYPE_VSS":       1,
	"INTERFACE_TYPE_SRIOV":     2,
	"INTERFACE_TYPE_DVS":       3,
	"INTERFACE_TYPE_DVS_PVLAN": 4,
}

func (x InterfaceType) String() string {
	return proto.EnumName(InterfaceType_name, int32(x))
}
func (InterfaceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{3} }

type WorkloadType int32

const (
	WorkloadType_WORKLOAD_TYPE_NONE                      WorkloadType = 0
	WorkloadType_WORKLOAD_TYPE_CONTAINER                 WorkloadType = 1
	WorkloadType_WORKLOAD_TYPE_VM                        WorkloadType = 2
	WorkloadType_WORKLOAD_TYPE_BARE_METAL                WorkloadType = 3
	WorkloadType_WORKLOAD_TYPE_BARE_METAL_MAC_VLAN       WorkloadType = 4
	WorkloadType_WORKLOAD_TYPE_BARE_METAL_MAC_VLAN_ENCAP WorkloadType = 5
	WorkloadType_WORKLOAD_TYPE_CONTAINER_MAC_VLAN        WorkloadType = 6
)

var WorkloadType_name = map[int32]string{
	0: "WORKLOAD_TYPE_NONE",
	1: "WORKLOAD_TYPE_CONTAINER",
	2: "WORKLOAD_TYPE_VM",
	3: "WORKLOAD_TYPE_BARE_METAL",
	4: "WORKLOAD_TYPE_BARE_METAL_MAC_VLAN",
	5: "WORKLOAD_TYPE_BARE_METAL_MAC_VLAN_ENCAP",
	6: "WORKLOAD_TYPE_CONTAINER_MAC_VLAN",
}
var WorkloadType_value = map[string]int32{
	"WORKLOAD_TYPE_NONE":                      0,
	"WORKLOAD_TYPE_CONTAINER":                 1,
	"WORKLOAD_TYPE_VM":                        2,
	"WORKLOAD_TYPE_BARE_METAL":                3,
	"WORKLOAD_TYPE_BARE_METAL_MAC_VLAN":       4,
	"WORKLOAD_TYPE_BARE_METAL_MAC_VLAN_ENCAP": 5,
	"WORKLOAD_TYPE_CONTAINER_MAC_VLAN":        6,
}

func (x WorkloadType) String() string {
	return proto.EnumName(WorkloadType_name, int32(x))
}
func (WorkloadType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{4} }

type TriggerOp int32

const (
	TriggerOp_TYPE_NONE          TriggerOp = 0
	TriggerOp_EXEC_CMDS          TriggerOp = 1
	TriggerOp_WAIT_FOR_CMDS      TriggerOp = 2
	TriggerOp_TERMINATE_ALL_CMDS TriggerOp = 3
)

var TriggerOp_name = map[int32]string{
	0: "TYPE_NONE",
	1: "EXEC_CMDS",
	2: "WAIT_FOR_CMDS",
	3: "TERMINATE_ALL_CMDS",
}
var TriggerOp_value = map[string]int32{
	"TYPE_NONE":          0,
	"EXEC_CMDS":          1,
	"WAIT_FOR_CMDS":      2,
	"TERMINATE_ALL_CMDS": 3,
}

func (x TriggerOp) String() string {
	return proto.EnumName(TriggerOp_name, int32(x))
}
func (TriggerOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{5} }

type TriggerMode int32

const (
	TriggerMode_MODE_NONE        TriggerMode = 0
	TriggerMode_TRIGGER_SERIAL   TriggerMode = 1
	TriggerMode_TRIGGER_PARALLEL TriggerMode = 2
	// Run commands on node in parallel.
	TriggerMode_TRIGGER_NODE_PARALLEL TriggerMode = 3
)

var TriggerMode_name = map[int32]string{
	0: "MODE_NONE",
	1: "TRIGGER_SERIAL",
	2: "TRIGGER_PARALLEL",
	3: "TRIGGER_NODE_PARALLEL",
}
var TriggerMode_value = map[string]int32{
	"MODE_NONE":             0,
	"TRIGGER_SERIAL":        1,
	"TRIGGER_PARALLEL":      2,
	"TRIGGER_NODE_PARALLEL": 3,
}

func (x TriggerMode) String() string {
	return proto.EnumName(TriggerMode_name, int32(x))
}
func (TriggerMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{6} }

type CommandMode int32

const (
	CommandMode_COMMAND_NONE       CommandMode = 0
	CommandMode_COMMAND_FOREGROUND CommandMode = 1
	CommandMode_COMMAND_BACKGROUND CommandMode = 2
)

var CommandMode_name = map[int32]string{
	0: "COMMAND_NONE",
	1: "COMMAND_FOREGROUND",
	2: "COMMAND_BACKGROUND",
}
var CommandMode_value = map[string]int32{
	"COMMAND_NONE":       0,
	"COMMAND_FOREGROUND": 1,
	"COMMAND_BACKGROUND": 2,
}

func (x CommandMode) String() string {
	return proto.EnumName(CommandMode_name, int32(x))
}
func (CommandMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{7} }

type WorkloadMoveType int32

const (
	WorkloadMoveType_WORKLOAD_MOVE_TYPE_DEFAULT WorkloadMoveType = 0
)

var WorkloadMoveType_name = map[int32]string{
	0: "WORKLOAD_MOVE_TYPE_DEFAULT",
}
var WorkloadMoveType_value = map[string]int32{
	"WORKLOAD_MOVE_TYPE_DEFAULT": 0,
}

func (x WorkloadMoveType) String() string {
	return proto.EnumName(WorkloadMoveType_name, int32(x))
}
func (WorkloadMoveType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{8} }

type NetworkType int32

const (
	NetworkType_NETWORK_TYPE_DEFAULT NetworkType = 0
	// Vmotion network
	NetworkType_NETWORK_TYPE_VMK_VMOTION NetworkType = 1
)

var NetworkType_name = map[int32]string{
	0: "NETWORK_TYPE_DEFAULT",
	1: "NETWORK_TYPE_VMK_VMOTION",
}
var NetworkType_value = map[string]int32{
	"NETWORK_TYPE_DEFAULT":     0,
	"NETWORK_TYPE_VMK_VMOTION": 1,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}
func (NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{9} }

type SwitchOp int32

const (
	SwitchOp_OP_NONE             SwitchOp = 0
	SwitchOp_SHUT_PORTS          SwitchOp = 1
	SwitchOp_NO_SHUT_PORTS       SwitchOp = 2
	SwitchOp_FLAP_PORTS          SwitchOp = 4
	SwitchOp_VLAN_CONFIG         SwitchOp = 5
	SwitchOp_PORT_PAUSE_CONFIG   SwitchOp = 6
	SwitchOp_PORT_PFC_CONFIG     SwitchOp = 7
	SwitchOp_PORT_QOS_CONFIG     SwitchOp = 8
	SwitchOp_PORT_QUEUING_CONFIG SwitchOp = 9
	SwitchOp_CREATE_QOS_CONFIG   SwitchOp = 10
)

var SwitchOp_name = map[int32]string{
	0:  "OP_NONE",
	1:  "SHUT_PORTS",
	2:  "NO_SHUT_PORTS",
	4:  "FLAP_PORTS",
	5:  "VLAN_CONFIG",
	6:  "PORT_PAUSE_CONFIG",
	7:  "PORT_PFC_CONFIG",
	8:  "PORT_QOS_CONFIG",
	9:  "PORT_QUEUING_CONFIG",
	10: "CREATE_QOS_CONFIG",
}
var SwitchOp_value = map[string]int32{
	"OP_NONE":             0,
	"SHUT_PORTS":          1,
	"NO_SHUT_PORTS":       2,
	"FLAP_PORTS":          4,
	"VLAN_CONFIG":         5,
	"PORT_PAUSE_CONFIG":   6,
	"PORT_PFC_CONFIG":     7,
	"PORT_QOS_CONFIG":     8,
	"PORT_QUEUING_CONFIG": 9,
	"CREATE_QOS_CONFIG":   10,
}

func (x SwitchOp) String() string {
	return proto.EnumName(SwitchOp_name, int32(x))
}
func (SwitchOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{10} }

type TestBedNodeType int32

const (
	TestBedNodeType_TESTBED_NODE_TYPE_NONE TestBedNodeType = 0
	TestBedNodeType_TESTBED_NODE_TYPE_SIM  TestBedNodeType = 1
	TestBedNodeType_TESTBED_NODE_TYPE_HW   TestBedNodeType = 2
	// Run multiple sim on HW
	TestBedNodeType_TESTBED_NODE_TYPE_MULTI_SIM TestBedNodeType = 3
	TestBedNodeType_TESTBED_NODE_TYPE_VENICE_BM TestBedNodeType = 4
	// Vcenter node
	TestBedNodeType_TESTBED_NODE_TYPE_VCENTER     TestBedNodeType = 5
	TestBedNodeType_TESTBED_NODE_TYPE_THIRD_PARTY TestBedNodeType = 6
)

var TestBedNodeType_name = map[int32]string{
	0: "TESTBED_NODE_TYPE_NONE",
	1: "TESTBED_NODE_TYPE_SIM",
	2: "TESTBED_NODE_TYPE_HW",
	3: "TESTBED_NODE_TYPE_MULTI_SIM",
	4: "TESTBED_NODE_TYPE_VENICE_BM",
	5: "TESTBED_NODE_TYPE_VCENTER",
	6: "TESTBED_NODE_TYPE_THIRD_PARTY",
}
var TestBedNodeType_value = map[string]int32{
	"TESTBED_NODE_TYPE_NONE":        0,
	"TESTBED_NODE_TYPE_SIM":         1,
	"TESTBED_NODE_TYPE_HW":          2,
	"TESTBED_NODE_TYPE_MULTI_SIM":   3,
	"TESTBED_NODE_TYPE_VENICE_BM":   4,
	"TESTBED_NODE_TYPE_VCENTER":     5,
	"TESTBED_NODE_TYPE_THIRD_PARTY": 6,
}

func (x TestBedNodeType) String() string {
	return proto.EnumName(TestBedNodeType_name, int32(x))
}
func (TestBedNodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{11} }

type TestBedNodeOs int32

const (
	TestBedNodeOs_TESTBED_NODE_OS_LINUX   TestBedNodeOs = 0
	TestBedNodeOs_TESTBED_NODE_OS_FREEBSD TestBedNodeOs = 1
	TestBedNodeOs_TESTBED_NODE_OS_ESX     TestBedNodeOs = 2
	TestBedNodeOs_TESTBED_NODE_OS_VCENTER TestBedNodeOs = 3
	TestBedNodeOs_TESTBED_NODE_OS_WINDOWS TestBedNodeOs = 4
)

var TestBedNodeOs_name = map[int32]string{
	0: "TESTBED_NODE_OS_LINUX",
	1: "TESTBED_NODE_OS_FREEBSD",
	2: "TESTBED_NODE_OS_ESX",
	3: "TESTBED_NODE_OS_VCENTER",
	4: "TESTBED_NODE_OS_WINDOWS",
}
var TestBedNodeOs_value = map[string]int32{
	"TESTBED_NODE_OS_LINUX":   0,
	"TESTBED_NODE_OS_FREEBSD": 1,
	"TESTBED_NODE_OS_ESX":     2,
	"TESTBED_NODE_OS_VCENTER": 3,
	"TESTBED_NODE_OS_WINDOWS": 4,
}

func (x TestBedNodeOs) String() string {
	return proto.EnumName(TestBedNodeOs_name, int32(x))
}
func (TestBedNodeOs) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{12} }

// CopyDirection defines direction whether to copy in or copy out
type CopyDirection int32

const (
	CopyDirection_DIR_NONE CopyDirection = 0
	CopyDirection_DIR_IN   CopyDirection = 1
	CopyDirection_DIR_OUT  CopyDirection = 2
)

var CopyDirection_name = map[int32]string{
	0: "DIR_NONE",
	1: "DIR_IN",
	2: "DIR_OUT",
}
var CopyDirection_value = map[string]int32{
	"DIR_NONE": 0,
	"DIR_IN":   1,
	"DIR_OUT":  2,
}

func (x CopyDirection) String() string {
	return proto.EnumName(CopyDirection_name, int32(x))
}
func (CopyDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{13} }

type NodeHealth_HealthCode int32

const (
	NodeHealth_HEALTH_OK       NodeHealth_HealthCode = 0
	NodeHealth_NAPLES_DOWN     NodeHealth_HealthCode = 1
	NodeHealth_NODE_DOWN       NodeHealth_HealthCode = 2
	NodeHealth_APP_DOWN        NodeHealth_HealthCode = 3
	NodeHealth_NOT_PROVISIONED NodeHealth_HealthCode = 4
)

var NodeHealth_HealthCode_name = map[int32]string{
	0: "HEALTH_OK",
	1: "NAPLES_DOWN",
	2: "NODE_DOWN",
	3: "APP_DOWN",
	4: "NOT_PROVISIONED",
}
var NodeHealth_HealthCode_value = map[string]int32{
	"HEALTH_OK":       0,
	"NAPLES_DOWN":     1,
	"NODE_DOWN":       2,
	"APP_DOWN":        3,
	"NOT_PROVISIONED": 4,
}

func (x NodeHealth_HealthCode) String() string {
	return proto.EnumName(NodeHealth_HealthCode_name, int32(x))
}
func (NodeHealth_HealthCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTopoSvc, []int{29, 0}
}

type DataSwitch_Speed int32

const (
	DataSwitch_Speed_100G DataSwitch_Speed = 0
	DataSwitch_Speed_10G  DataSwitch_Speed = 1
	DataSwitch_Speed_auto DataSwitch_Speed = 2
)

var DataSwitch_Speed_name = map[int32]string{
	0: "Speed_100G",
	1: "Speed_10G",
	2: "Speed_auto",
}
var DataSwitch_Speed_value = map[string]int32{
	"Speed_100G": 0,
	"Speed_10G":  1,
	"Speed_auto": 2,
}

func (x DataSwitch_Speed) String() string {
	return proto.EnumName(DataSwitch_Speed_name, int32(x))
}
func (DataSwitch_Speed) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{36, 0} }

type License_Type int32

const (
	License_LICENSE_NONE    License_Type = 0
	License_LICENSE_VCENTER License_Type = 1
)

var License_Type_name = map[int32]string{
	0: "LICENSE_NONE",
	1: "LICENSE_VCENTER",
}
var License_Type_value = map[string]int32{
	"LICENSE_NONE":    0,
	"LICENSE_VCENTER": 1,
}

func (x License_Type) String() string {
	return proto.EnumName(License_Type_name, int32(x))
}
func (License_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{37, 0} }

// NodeInfo encapsulates all topology information for a given iota-server invocation
type NodeMsg struct {
	// API Response for the node
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Node operation
	NodeOp Op `protobuf:"varint,2,opt,name=node_op,json=nodeOp,proto3,enum=iotamodel.Op" json:"node_op,omitempty"`
	// List of nodes in the e2e cluster
	Nodes []*Node `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	// Set this to true during init time. This will essentially brings up the e2e cluster
	MakeCluster bool `protobuf:"varint,4,opt,name=make_cluster,json=makeCluster,proto3" json:"make_cluster,omitempty"`
	// Cluster is complete or not (Could by used by other nodes to check their admission status for health check)
	ClusterDone bool `protobuf:"varint,5,opt,name=cluster_done,json=clusterDone,proto3" json:"cluster_done,omitempty"`
	// return allocated vlans when doing skip setup
	AllocatedVlans []uint32 `protobuf:"varint,6,rep,packed,name=allocated_vlans,json=allocatedVlans" json:"allocated_vlans,omitempty"`
}

func (m *NodeMsg) Reset()                    { *m = NodeMsg{} }
func (m *NodeMsg) String() string            { return proto.CompactTextString(m) }
func (*NodeMsg) ProtoMessage()               {}
func (*NodeMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{0} }

func (m *NodeMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *NodeMsg) GetNodeOp() Op {
	if m != nil {
		return m.NodeOp
	}
	return Op_NONE
}

func (m *NodeMsg) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NodeMsg) GetMakeCluster() bool {
	if m != nil {
		return m.MakeCluster
	}
	return false
}

func (m *NodeMsg) GetClusterDone() bool {
	if m != nil {
		return m.ClusterDone
	}
	return false
}

func (m *NodeMsg) GetAllocatedVlans() []uint32 {
	if m != nil {
		return m.AllocatedVlans
	}
	return nil
}

// Reload msg
type ReloadMsg struct {
	// API Response for the node
	ApiResponse   *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	NodeMsg       *NodeMsg         `protobuf:"bytes,2,opt,name=node_msg,json=nodeMsg" json:"node_msg,omitempty"`
	SkipRestore   bool             `protobuf:"varint,3,opt,name=skip_restore,json=skipRestore,proto3" json:"skip_restore,omitempty"`
	RestartMethod string           `protobuf:"bytes,4,opt,name=restart_method,json=restartMethod,proto3" json:"restart_method,omitempty"`
	UseNcsi       bool             `protobuf:"varint,5,opt,name=use_ncsi,json=useNcsi,proto3" json:"use_ncsi,omitempty"`
}

func (m *ReloadMsg) Reset()                    { *m = ReloadMsg{} }
func (m *ReloadMsg) String() string            { return proto.CompactTextString(m) }
func (*ReloadMsg) ProtoMessage()               {}
func (*ReloadMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{1} }

func (m *ReloadMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *ReloadMsg) GetNodeMsg() *NodeMsg {
	if m != nil {
		return m.NodeMsg
	}
	return nil
}

func (m *ReloadMsg) GetSkipRestore() bool {
	if m != nil {
		return m.SkipRestore
	}
	return false
}

func (m *ReloadMsg) GetRestartMethod() string {
	if m != nil {
		return m.RestartMethod
	}
	return ""
}

func (m *ReloadMsg) GetUseNcsi() bool {
	if m != nil {
		return m.UseNcsi
	}
	return false
}

type Entity struct {
	// Entity type
	Type EntityType `protobuf:"varint,1,opt,name=type,proto3,enum=iotamodel.EntityType" json:"type,omitempty"`
	// Entity name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{2} }

func (m *Entity) GetType() EntityType {
	if m != nil {
		return m.Type
	}
	return EntityType_ENTITY_TYPE_NONE
}

func (m *Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VmwareESXConfig struct {
	// User name of ESX
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password of ESX
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// IP address of esx
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// ssl thumbprint
	SslThumbprint string `protobuf:"bytes,4,opt,name=ssl_thumbprint,json=sslThumbprint,proto3" json:"ssl_thumbprint,omitempty"`
	// name of esx node
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VmwareESXConfig) Reset()                    { *m = VmwareESXConfig{} }
func (m *VmwareESXConfig) String() string            { return proto.CompactTextString(m) }
func (*VmwareESXConfig) ProtoMessage()               {}
func (*VmwareESXConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{3} }

func (m *VmwareESXConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *VmwareESXConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *VmwareESXConfig) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VmwareESXConfig) GetSslThumbprint() string {
	if m != nil {
		return m.SslThumbprint
	}
	return ""
}

func (m *VmwareESXConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type VcenterConfig struct {
	EsxConfigs        []*VmwareESXConfig `protobuf:"bytes,1,rep,name=esx_configs,json=esxConfigs" json:"esx_configs,omitempty"`
	DcName            string             `protobuf:"bytes,2,opt,name=dc_name,json=dcName,proto3" json:"dc_name,omitempty"`
	ClusterName       string             `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	DistributedSwitch string             `protobuf:"bytes,4,opt,name=distributed_switch,json=distributedSwitch,proto3" json:"distributed_switch,omitempty"`
	PvlanStart        uint32             `protobuf:"varint,5,opt,name=pvlan_start,json=pvlanStart,proto3" json:"pvlan_start,omitempty"`
	PvlanEnd          uint32             `protobuf:"varint,6,opt,name=pvlan_end,json=pvlanEnd,proto3" json:"pvlan_end,omitempty"`
}

func (m *VcenterConfig) Reset()                    { *m = VcenterConfig{} }
func (m *VcenterConfig) String() string            { return proto.CompactTextString(m) }
func (*VcenterConfig) ProtoMessage()               {}
func (*VcenterConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{4} }

func (m *VcenterConfig) GetEsxConfigs() []*VmwareESXConfig {
	if m != nil {
		return m.EsxConfigs
	}
	return nil
}

func (m *VcenterConfig) GetDcName() string {
	if m != nil {
		return m.DcName
	}
	return ""
}

func (m *VcenterConfig) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *VcenterConfig) GetDistributedSwitch() string {
	if m != nil {
		return m.DistributedSwitch
	}
	return ""
}

func (m *VcenterConfig) GetPvlanStart() uint32 {
	if m != nil {
		return m.PvlanStart
	}
	return 0
}

func (m *VcenterConfig) GetPvlanEnd() uint32 {
	if m != nil {
		return m.PvlanEnd
	}
	return 0
}

type NaplesSimInfo struct {
	NodeUuid  string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (m *NaplesSimInfo) Reset()                    { *m = NaplesSimInfo{} }
func (m *NaplesSimInfo) String() string            { return proto.CompactTextString(m) }
func (*NaplesSimInfo) ProtoMessage()               {}
func (*NaplesSimInfo) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{5} }

func (m *NaplesSimInfo) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *NaplesSimInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NaplesSimInfo) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

// Node captures personality details of an E2E node
type Node struct {
	// PersonalityType captures the node personality. naples node, venice node or qemu
	Type PersonalityType `protobuf:"varint,1,opt,name=type,proto3,enum=iotamodel.PersonalityType" json:"type,omitempty"`
	// Image captures the the built artifacts that need to be loaded on the node depending on the personality type
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// IP Address of the node
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Node identifier
	Name     string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Entities []*Entity `protobuf:"bytes,5,rep,name=entities" json:"entities,omitempty"`
	// Node specific configs
	//
	// Types that are valid to be assigned to NodeInfo:
	//	*Node_NaplesConfigs
	//	*Node_VeniceConfig
	//	*Node_ThirdPartyNicConfig
	//	*Node_NaplesMultiSimConfig
	//	*Node_NaplesControlSimConfig
	//	*Node_VcenterConfig
	NodeInfo isNode_NodeInfo `protobuf_oneof:"node_info"`
	// NodeStatus captures the details of the node action
	NodeStatus *IotaAPIResponse `protobuf:"bytes,12,opt,name=node_status,json=nodeStatus" json:"node_status,omitempty"`
	// Optionally run a start up script during add or reload.
	StartupScript string `protobuf:"bytes,14,opt,name=startup_script,json=startupScript,proto3" json:"startup_script,omitempty"`
	// ESX configuration if node type is esx
	EsxConfig *VmwareESXConfig `protobuf:"bytes,15,opt,name=esx_config,json=esxConfig" json:"esx_config,omitempty"`
	// Node OS
	Os TestBedNodeOs `protobuf:"varint,16,opt,name=os,proto3,enum=iotamodel.TestBedNodeOs" json:"os,omitempty"`
	// Flag to indicate that node is being reload from saved config
	Reload        bool   `protobuf:"varint,17,opt,name=reload,proto3" json:"reload,omitempty"`
	RestartMethod string `protobuf:"bytes,19,opt,name=RestartMethod,proto3" json:"RestartMethod,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{6} }

type isNode_NodeInfo interface {
	isNode_NodeInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Node_NaplesConfigs struct {
	NaplesConfigs *NaplesConfigs `protobuf:"bytes,6,opt,name=naples_configs,json=naplesConfigs,oneof"`
}
type Node_VeniceConfig struct {
	VeniceConfig *VeniceConfig `protobuf:"bytes,7,opt,name=venice_config,json=veniceConfig,oneof"`
}
type Node_ThirdPartyNicConfig struct {
	ThirdPartyNicConfig *ThirdPartyNicConfig `protobuf:"bytes,8,opt,name=third_party_nic_config,json=thirdPartyNicConfig,oneof"`
}
type Node_NaplesMultiSimConfig struct {
	NaplesMultiSimConfig *NaplesMultiSimConfig `protobuf:"bytes,9,opt,name=naples_multi_sim_config,json=naplesMultiSimConfig,oneof"`
}
type Node_NaplesControlSimConfig struct {
	NaplesControlSimConfig *NaplesControlSimConfig `protobuf:"bytes,10,opt,name=naples_control_sim_config,json=naplesControlSimConfig,oneof"`
}
type Node_VcenterConfig struct {
	VcenterConfig *VcenterConfig `protobuf:"bytes,11,opt,name=vcenter_config,json=vcenterConfig,oneof"`
}

func (*Node_NaplesConfigs) isNode_NodeInfo()          {}
func (*Node_VeniceConfig) isNode_NodeInfo()           {}
func (*Node_ThirdPartyNicConfig) isNode_NodeInfo()    {}
func (*Node_NaplesMultiSimConfig) isNode_NodeInfo()   {}
func (*Node_NaplesControlSimConfig) isNode_NodeInfo() {}
func (*Node_VcenterConfig) isNode_NodeInfo()          {}

func (m *Node) GetNodeInfo() isNode_NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *Node) GetType() PersonalityType {
	if m != nil {
		return m.Type
	}
	return PersonalityType_PERSONALITY_NONE
}

func (m *Node) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Node) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Node) GetNaplesConfigs() *NaplesConfigs {
	if x, ok := m.GetNodeInfo().(*Node_NaplesConfigs); ok {
		return x.NaplesConfigs
	}
	return nil
}

func (m *Node) GetVeniceConfig() *VeniceConfig {
	if x, ok := m.GetNodeInfo().(*Node_VeniceConfig); ok {
		return x.VeniceConfig
	}
	return nil
}

func (m *Node) GetThirdPartyNicConfig() *ThirdPartyNicConfig {
	if x, ok := m.GetNodeInfo().(*Node_ThirdPartyNicConfig); ok {
		return x.ThirdPartyNicConfig
	}
	return nil
}

func (m *Node) GetNaplesMultiSimConfig() *NaplesMultiSimConfig {
	if x, ok := m.GetNodeInfo().(*Node_NaplesMultiSimConfig); ok {
		return x.NaplesMultiSimConfig
	}
	return nil
}

func (m *Node) GetNaplesControlSimConfig() *NaplesControlSimConfig {
	if x, ok := m.GetNodeInfo().(*Node_NaplesControlSimConfig); ok {
		return x.NaplesControlSimConfig
	}
	return nil
}

func (m *Node) GetVcenterConfig() *VcenterConfig {
	if x, ok := m.GetNodeInfo().(*Node_VcenterConfig); ok {
		return x.VcenterConfig
	}
	return nil
}

func (m *Node) GetNodeStatus() *IotaAPIResponse {
	if m != nil {
		return m.NodeStatus
	}
	return nil
}

func (m *Node) GetStartupScript() string {
	if m != nil {
		return m.StartupScript
	}
	return ""
}

func (m *Node) GetEsxConfig() *VmwareESXConfig {
	if m != nil {
		return m.EsxConfig
	}
	return nil
}

func (m *Node) GetOs() TestBedNodeOs {
	if m != nil {
		return m.Os
	}
	return TestBedNodeOs_TESTBED_NODE_OS_LINUX
}

func (m *Node) GetReload() bool {
	if m != nil {
		return m.Reload
	}
	return false
}

func (m *Node) GetRestartMethod() string {
	if m != nil {
		return m.RestartMethod
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_NaplesConfigs)(nil),
		(*Node_VeniceConfig)(nil),
		(*Node_ThirdPartyNicConfig)(nil),
		(*Node_NaplesMultiSimConfig)(nil),
		(*Node_NaplesControlSimConfig)(nil),
		(*Node_VcenterConfig)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// node_info
	switch x := m.NodeInfo.(type) {
	case *Node_NaplesConfigs:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NaplesConfigs); err != nil {
			return err
		}
	case *Node_VeniceConfig:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VeniceConfig); err != nil {
			return err
		}
	case *Node_ThirdPartyNicConfig:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ThirdPartyNicConfig); err != nil {
			return err
		}
	case *Node_NaplesMultiSimConfig:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NaplesMultiSimConfig); err != nil {
			return err
		}
	case *Node_NaplesControlSimConfig:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NaplesControlSimConfig); err != nil {
			return err
		}
	case *Node_VcenterConfig:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VcenterConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.NodeInfo has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 6: // node_info.naples_configs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NaplesConfigs)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_NaplesConfigs{msg}
		return true, err
	case 7: // node_info.venice_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VeniceConfig)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_VeniceConfig{msg}
		return true, err
	case 8: // node_info.third_party_nic_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ThirdPartyNicConfig)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_ThirdPartyNicConfig{msg}
		return true, err
	case 9: // node_info.naples_multi_sim_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NaplesMultiSimConfig)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_NaplesMultiSimConfig{msg}
		return true, err
	case 10: // node_info.naples_control_sim_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NaplesControlSimConfig)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_NaplesControlSimConfig{msg}
		return true, err
	case 11: // node_info.vcenter_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VcenterConfig)
		err := b.DecodeMessage(msg)
		m.NodeInfo = &Node_VcenterConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// node_info
	switch x := m.NodeInfo.(type) {
	case *Node_NaplesConfigs:
		s := proto.Size(x.NaplesConfigs)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_VeniceConfig:
		s := proto.Size(x.VeniceConfig)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_ThirdPartyNicConfig:
		s := proto.Size(x.ThirdPartyNicConfig)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_NaplesMultiSimConfig:
		s := proto.Size(x.NaplesMultiSimConfig)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_NaplesControlSimConfig:
		s := proto.Size(x.NaplesControlSimConfig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_VcenterConfig:
		s := proto.Size(x.VcenterConfig)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ApcInfo struct {
	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *ApcInfo) Reset()                    { *m = ApcInfo{} }
func (m *ApcInfo) String() string            { return proto.CompactTextString(m) }
func (*ApcInfo) ProtoMessage()               {}
func (*ApcInfo) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{7} }

func (m *ApcInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ApcInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ApcInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ApcInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NaplesMultiSimConfig struct {
	// Number of sim instances
	NumInstances uint32 `protobuf:"varint,1,opt,name=num_instances,json=numInstances,proto3" json:"num_instances,omitempty"`
	// Subnet to be used for naples Instances
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// gateway to be used for naples Instances
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// x
	IpAddrRange string `protobuf:"bytes,4,opt,name=ip_addr_range,json=ipAddrRange,proto3" json:"ip_addr_range,omitempty"`
	// parent network to be used.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// either nic type or parent interface
	NicType string `protobuf:"bytes,6,opt,name=nic_type,json=nicType,proto3" json:"nic_type,omitempty"`
	// Venice IPs to use, if specified agent will come up im managed mode.
	VeniceIps []string `protobuf:"bytes,7,rep,name=venice_ips,json=veniceIps" json:"venice_ips,omitempty"`
	// Sim infos
	SimsInfo []*NaplesSimInfo `protobuf:"bytes,8,rep,name=sims_info,json=simsInfo" json:"sims_info,omitempty"`
}

func (m *NaplesMultiSimConfig) Reset()                    { *m = NaplesMultiSimConfig{} }
func (m *NaplesMultiSimConfig) String() string            { return proto.CompactTextString(m) }
func (*NaplesMultiSimConfig) ProtoMessage()               {}
func (*NaplesMultiSimConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{8} }

func (m *NaplesMultiSimConfig) GetNumInstances() uint32 {
	if m != nil {
		return m.NumInstances
	}
	return 0
}

func (m *NaplesMultiSimConfig) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *NaplesMultiSimConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *NaplesMultiSimConfig) GetIpAddrRange() string {
	if m != nil {
		return m.IpAddrRange
	}
	return ""
}

func (m *NaplesMultiSimConfig) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *NaplesMultiSimConfig) GetNicType() string {
	if m != nil {
		return m.NicType
	}
	return ""
}

func (m *NaplesMultiSimConfig) GetVeniceIps() []string {
	if m != nil {
		return m.VeniceIps
	}
	return nil
}

func (m *NaplesMultiSimConfig) GetSimsInfo() []*NaplesSimInfo {
	if m != nil {
		return m.SimsInfo
	}
	return nil
}

type NaplesControlSimConfig struct {
	// parent network to be used.
	ControlIntf string `protobuf:"bytes,1,opt,name=control_intf,json=controlIntf,proto3" json:"control_intf,omitempty"`
	// Venice IPs to use, if specified agent will come up im managed mode.
	VeniceIps []string `protobuf:"bytes,2,rep,name=venice_ips,json=veniceIps" json:"venice_ips,omitempty"`
	// control IP of the sim
	ControlIp string `protobuf:"bytes,3,opt,name=control_ip,json=controlIp,proto3" json:"control_ip,omitempty"`
	// node uuid
	NodeUuid string `protobuf:"bytes,4,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
}

func (m *NaplesControlSimConfig) Reset()                    { *m = NaplesControlSimConfig{} }
func (m *NaplesControlSimConfig) String() string            { return proto.CompactTextString(m) }
func (*NaplesControlSimConfig) ProtoMessage()               {}
func (*NaplesControlSimConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{9} }

func (m *NaplesControlSimConfig) GetControlIntf() string {
	if m != nil {
		return m.ControlIntf
	}
	return ""
}

func (m *NaplesControlSimConfig) GetVeniceIps() []string {
	if m != nil {
		return m.VeniceIps
	}
	return nil
}

func (m *NaplesControlSimConfig) GetControlIp() string {
	if m != nil {
		return m.ControlIp
	}
	return ""
}

func (m *NaplesControlSimConfig) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

type NaplesConfig struct {
	// Control interface to use
	ControlIntf string `protobuf:"bytes,1,opt,name=control_intf,json=controlIntf,proto3" json:"control_intf,omitempty"`
	// Control ip to use
	ControlIp string `protobuf:"bytes,2,opt,name=control_ip,json=controlIp,proto3" json:"control_ip,omitempty"`
	// Data interfaces to use
	DataIntfs []string `protobuf:"bytes,3,rep,name=data_intfs,json=dataIntfs" json:"data_intfs,omitempty"`
	// Venice IPs to use, if specified agent will come up im managed mode.
	VeniceIps []string `protobuf:"bytes,4,rep,name=venice_ips,json=veniceIps" json:"venice_ips,omitempty"`
	// host intfs , returned as part of add node
	HostIntfs []string `protobuf:"bytes,5,rep,name=host_intfs,json=hostIntfs" json:"host_intfs,omitempty"`
	// Naples IP in hw mode.
	NaplesIpAddress string `protobuf:"bytes,6,opt,name=naples_ip_address,json=naplesIpAddress,proto3" json:"naples_ip_address,omitempty"`
	// Naples IP in hw mode.
	NaplesSecondaryIpAddress string `protobuf:"bytes,7,opt,name=naples_secondary_ip_address,json=naplesSecondaryIpAddress,proto3" json:"naples_secondary_ip_address,omitempty"`
	// Naples username in hw mode.
	NaplesUsername string `protobuf:"bytes,8,opt,name=naples_username,json=naplesUsername,proto3" json:"naples_username,omitempty"`
	// Naples username in hw mode.
	NaplesPassword string `protobuf:"bytes,9,opt,name=naples_password,json=naplesPassword,proto3" json:"naples_password,omitempty"`
	// Nic type
	NicType string `protobuf:"bytes,10,opt,name=nic_type,json=nicType,proto3" json:"nic_type,omitempty"`
	// hint, if there are more than 1 naples in system
	NicHint string `protobuf:"bytes,11,opt,name=nic_hint,json=nicHint,proto3" json:"nic_hint,omitempty"`
	// nodeuuid return as part read
	NodeUuid string `protobuf:"bytes,12,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	// unique Identifier
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *NaplesConfig) Reset()                    { *m = NaplesConfig{} }
func (m *NaplesConfig) String() string            { return proto.CompactTextString(m) }
func (*NaplesConfig) ProtoMessage()               {}
func (*NaplesConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{10} }

func (m *NaplesConfig) GetControlIntf() string {
	if m != nil {
		return m.ControlIntf
	}
	return ""
}

func (m *NaplesConfig) GetControlIp() string {
	if m != nil {
		return m.ControlIp
	}
	return ""
}

func (m *NaplesConfig) GetDataIntfs() []string {
	if m != nil {
		return m.DataIntfs
	}
	return nil
}

func (m *NaplesConfig) GetVeniceIps() []string {
	if m != nil {
		return m.VeniceIps
	}
	return nil
}

func (m *NaplesConfig) GetHostIntfs() []string {
	if m != nil {
		return m.HostIntfs
	}
	return nil
}

func (m *NaplesConfig) GetNaplesIpAddress() string {
	if m != nil {
		return m.NaplesIpAddress
	}
	return ""
}

func (m *NaplesConfig) GetNaplesSecondaryIpAddress() string {
	if m != nil {
		return m.NaplesSecondaryIpAddress
	}
	return ""
}

func (m *NaplesConfig) GetNaplesUsername() string {
	if m != nil {
		return m.NaplesUsername
	}
	return ""
}

func (m *NaplesConfig) GetNaplesPassword() string {
	if m != nil {
		return m.NaplesPassword
	}
	return ""
}

func (m *NaplesConfig) GetNicType() string {
	if m != nil {
		return m.NicType
	}
	return ""
}

func (m *NaplesConfig) GetNicHint() string {
	if m != nil {
		return m.NicHint
	}
	return ""
}

func (m *NaplesConfig) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *NaplesConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NaplesConfigs struct {
	Configs []*NaplesConfig `protobuf:"bytes,2,rep,name=configs" json:"configs,omitempty"`
}

func (m *NaplesConfigs) Reset()                    { *m = NaplesConfigs{} }
func (m *NaplesConfigs) String() string            { return proto.CompactTextString(m) }
func (*NaplesConfigs) ProtoMessage()               {}
func (*NaplesConfigs) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{11} }

func (m *NaplesConfigs) GetConfigs() []*NaplesConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type ThirdPartyNicConfig struct {
	// nic type
	NicType string `protobuf:"bytes,1,opt,name=nic_type,json=nicType,proto3" json:"nic_type,omitempty"`
	// host intfs , returned as part of add node
	HostIntfs []string `protobuf:"bytes,2,rep,name=host_intfs,json=hostIntfs" json:"host_intfs,omitempty"`
}

func (m *ThirdPartyNicConfig) Reset()                    { *m = ThirdPartyNicConfig{} }
func (m *ThirdPartyNicConfig) String() string            { return proto.CompactTextString(m) }
func (*ThirdPartyNicConfig) ProtoMessage()               {}
func (*ThirdPartyNicConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{12} }

func (m *ThirdPartyNicConfig) GetNicType() string {
	if m != nil {
		return m.NicType
	}
	return ""
}

func (m *ThirdPartyNicConfig) GetHostIntfs() []string {
	if m != nil {
		return m.HostIntfs
	}
	return nil
}

type MellanoxConfig struct {
	// host intfs , returned as part of add node
	HostIntfs []string `protobuf:"bytes,5,rep,name=host_intfs,json=hostIntfs" json:"host_intfs,omitempty"`
}

func (m *MellanoxConfig) Reset()                    { *m = MellanoxConfig{} }
func (m *MellanoxConfig) String() string            { return proto.CompactTextString(m) }
func (*MellanoxConfig) ProtoMessage()               {}
func (*MellanoxConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{13} }

func (m *MellanoxConfig) GetHostIntfs() []string {
	if m != nil {
		return m.HostIntfs
	}
	return nil
}

type BroadcomConfig struct {
	// host intfs , returned as part of add node
	HostIntfs []string `protobuf:"bytes,5,rep,name=host_intfs,json=hostIntfs" json:"host_intfs,omitempty"`
}

func (m *BroadcomConfig) Reset()                    { *m = BroadcomConfig{} }
func (m *BroadcomConfig) String() string            { return proto.CompactTextString(m) }
func (*BroadcomConfig) ProtoMessage()               {}
func (*BroadcomConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{14} }

func (m *BroadcomConfig) GetHostIntfs() []string {
	if m != nil {
		return m.HostIntfs
	}
	return nil
}

type IntelConfig struct {
	// host intfs , returned as part of add node
	HostIntfs []string `protobuf:"bytes,5,rep,name=host_intfs,json=hostIntfs" json:"host_intfs,omitempty"`
}

func (m *IntelConfig) Reset()                    { *m = IntelConfig{} }
func (m *IntelConfig) String() string            { return proto.CompactTextString(m) }
func (*IntelConfig) ProtoMessage()               {}
func (*IntelConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{15} }

func (m *IntelConfig) GetHostIntfs() []string {
	if m != nil {
		return m.HostIntfs
	}
	return nil
}

type VenicePeer struct {
	// hostname of peer node
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// ip of the peer node
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (m *VenicePeer) Reset()                    { *m = VenicePeer{} }
func (m *VenicePeer) String() string            { return proto.CompactTextString(m) }
func (*VenicePeer) ProtoMessage()               {}
func (*VenicePeer) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{16} }

func (m *VenicePeer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *VenicePeer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type VeniceConfig struct {
	// Control interface to use
	ControlIntf string `protobuf:"bytes,1,opt,name=control_intf,json=controlIntf,proto3" json:"control_intf,omitempty"`
	// Control ip to use
	ControlIp string `protobuf:"bytes,2,opt,name=control_ip,json=controlIp,proto3" json:"control_ip,omitempty"`
	// Peers to add host name entries.
	VenicePeers []*VenicePeer `protobuf:"bytes,3,rep,name=venice_peers,json=venicePeers" json:"venice_peers,omitempty"`
}

func (m *VeniceConfig) Reset()                    { *m = VeniceConfig{} }
func (m *VeniceConfig) String() string            { return proto.CompactTextString(m) }
func (*VeniceConfig) ProtoMessage()               {}
func (*VeniceConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{17} }

func (m *VeniceConfig) GetControlIntf() string {
	if m != nil {
		return m.ControlIntf
	}
	return ""
}

func (m *VeniceConfig) GetControlIp() string {
	if m != nil {
		return m.ControlIp
	}
	return ""
}

func (m *VeniceConfig) GetVenicePeers() []*VenicePeer {
	if m != nil {
		return m.VenicePeers
	}
	return nil
}

type WorkloadMsg struct {
	// API Response
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Workload Operation Type
	WorkloadOp Op `protobuf:"varint,2,opt,name=workload_op,json=workloadOp,proto3,enum=iotamodel.Op" json:"workload_op,omitempty"`
	// List of workloads
	Workloads []*Workload `protobuf:"bytes,3,rep,name=workloads" json:"workloads,omitempty"`
}

func (m *WorkloadMsg) Reset()                    { *m = WorkloadMsg{} }
func (m *WorkloadMsg) String() string            { return proto.CompactTextString(m) }
func (*WorkloadMsg) ProtoMessage()               {}
func (*WorkloadMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{18} }

func (m *WorkloadMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *WorkloadMsg) GetWorkloadOp() Op {
	if m != nil {
		return m.WorkloadOp
	}
	return Op_NONE
}

func (m *WorkloadMsg) GetWorkloads() []*Workload {
	if m != nil {
		return m.Workloads
	}
	return nil
}

type DvsInfo struct {
	// switch name
	SwitchName string `protobuf:"bytes,1,opt,name=switch_name,json=switchName,proto3" json:"switch_name,omitempty"`
	// network name
	NetworkName string `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (m *DvsInfo) Reset()                    { *m = DvsInfo{} }
func (m *DvsInfo) String() string            { return proto.CompactTextString(m) }
func (*DvsInfo) ProtoMessage()               {}
func (*DvsInfo) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{19} }

func (m *DvsInfo) GetSwitchName() string {
	if m != nil {
		return m.SwitchName
	}
	return ""
}

func (m *DvsInfo) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

type ExposedPorts struct {
	Port  string `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Proto string `protobuf:"bytes,2,opt,name=Proto,proto3" json:"Proto,omitempty"`
}

func (m *ExposedPorts) Reset()                    { *m = ExposedPorts{} }
func (m *ExposedPorts) String() string            { return proto.CompactTextString(m) }
func (*ExposedPorts) ProtoMessage()               {}
func (*ExposedPorts) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{20} }

func (m *ExposedPorts) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ExposedPorts) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

type Workload struct {
	// Workload Identifier
	WorkloadName string `protobuf:"bytes,1,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`
	// Workload Type
	WorkloadType WorkloadType `protobuf:"varint,2,opt,name=workload_type,json=workloadType,proto3,enum=iotamodel.WorkloadType" json:"workload_type,omitempty"`
	// Workload image
	WorkloadImage string `protobuf:"bytes,3,opt,name=workload_image,json=workloadImage,proto3" json:"workload_image,omitempty"`
	// Node on which this needs to be spun up
	NodeName string `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Data VLAN for the workload
	EncapVlan uint32 `protobuf:"varint,5,opt,name=encap_vlan,json=encapVlan,proto3" json:"encap_vlan,omitempty"`
	// Data VLAN for the workload
	SecondaryEncapVlan uint32 `protobuf:"varint,6,opt,name=secondary_encap_vlan,json=secondaryEncapVlan,proto3" json:"secondary_encap_vlan,omitempty"`
	// IPAddress of the workload. Represent this as a CIDR block. 10.0.0.1/16 will be
	// interpreted as 10.0.0.1 is the IP of the workload container and it belongs to a /16 subnet.
	IpPrefix   string `protobuf:"bytes,7,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	Ipv6Prefix string `protobuf:"bytes,8,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	// MAC Address of the workload
	MacAddress string `protobuf:"bytes,9,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Interface to which workload needs to be attached.
	Interface string `protobuf:"bytes,10,opt,name=interface,proto3" json:"interface,omitempty"`
	// Parent Interface for classic workload
	ParentInterface string        `protobuf:"bytes,11,opt,name=parent_interface,json=parentInterface,proto3" json:"parent_interface,omitempty"`
	InterfaceType   InterfaceType `protobuf:"varint,12,opt,name=interface_type,json=interfaceType,proto3,enum=iotamodel.InterfaceType" json:"interface_type,omitempty"`
	// Interface to which workload needs to be attached.
	PinnedPort uint32 `protobuf:"varint,13,opt,name=pinned_port,json=pinnedPort,proto3" json:"pinned_port,omitempty"`
	// uplink vlan for the traffic going outside node.
	UplinkVlan uint32 `protobuf:"varint,14,opt,name=uplink_vlan,json=uplinkVlan,proto3" json:"uplink_vlan,omitempty"`
	// Workload Status
	WorkloadStatus *IotaAPIResponse `protobuf:"bytes,15,opt,name=workload_status,json=workloadStatus" json:"workload_status,omitempty"`
	// Secondary IPv4 addresses
	SecIpPrefix []string `protobuf:"bytes,16,rep,name=sec_ip_prefix,json=secIpPrefix" json:"sec_ip_prefix,omitempty"`
	// Secondary IPv6 addresses
	SecIpv6Prefix []string `protobuf:"bytes,17,rep,name=sec_ipv6_prefix,json=secIpv6Prefix" json:"sec_ipv6_prefix,omitempty"`
	// number of CPUs to be dedicated.
	Cpus uint32 `protobuf:"varint,18,opt,name=cpus,proto3" json:"cpus,omitempty"`
	// Memory allocated
	Memory uint32 `protobuf:"varint,19,opt,name=memory,proto3" json:"memory,omitempty"`
	// Management IP of the workload if VM
	MgmtIp string `protobuf:"bytes,21,opt,name=mgmt_ip,json=mgmtIp,proto3" json:"mgmt_ip,omitempty"`
	// If interface type is DVS
	Dvs          *DvsInfo        `protobuf:"bytes,22,opt,name=dvs" json:"dvs,omitempty"`
	SwitchName   string          `protobuf:"bytes,23,opt,name=switch_name,json=switchName,proto3" json:"switch_name,omitempty"`
	NetworkName  string          `protobuf:"bytes,24,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	ExposedPorts []*ExposedPorts `protobuf:"bytes,25,rep,name=exposed_ports,json=exposedPorts" json:"exposed_ports,omitempty"`
}

func (m *Workload) Reset()                    { *m = Workload{} }
func (m *Workload) String() string            { return proto.CompactTextString(m) }
func (*Workload) ProtoMessage()               {}
func (*Workload) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{21} }

func (m *Workload) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *Workload) GetWorkloadType() WorkloadType {
	if m != nil {
		return m.WorkloadType
	}
	return WorkloadType_WORKLOAD_TYPE_NONE
}

func (m *Workload) GetWorkloadImage() string {
	if m != nil {
		return m.WorkloadImage
	}
	return ""
}

func (m *Workload) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Workload) GetEncapVlan() uint32 {
	if m != nil {
		return m.EncapVlan
	}
	return 0
}

func (m *Workload) GetSecondaryEncapVlan() uint32 {
	if m != nil {
		return m.SecondaryEncapVlan
	}
	return 0
}

func (m *Workload) GetIpPrefix() string {
	if m != nil {
		return m.IpPrefix
	}
	return ""
}

func (m *Workload) GetIpv6Prefix() string {
	if m != nil {
		return m.Ipv6Prefix
	}
	return ""
}

func (m *Workload) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Workload) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Workload) GetParentInterface() string {
	if m != nil {
		return m.ParentInterface
	}
	return ""
}

func (m *Workload) GetInterfaceType() InterfaceType {
	if m != nil {
		return m.InterfaceType
	}
	return InterfaceType_INTERFACE_TYPE_NONE
}

func (m *Workload) GetPinnedPort() uint32 {
	if m != nil {
		return m.PinnedPort
	}
	return 0
}

func (m *Workload) GetUplinkVlan() uint32 {
	if m != nil {
		return m.UplinkVlan
	}
	return 0
}

func (m *Workload) GetWorkloadStatus() *IotaAPIResponse {
	if m != nil {
		return m.WorkloadStatus
	}
	return nil
}

func (m *Workload) GetSecIpPrefix() []string {
	if m != nil {
		return m.SecIpPrefix
	}
	return nil
}

func (m *Workload) GetSecIpv6Prefix() []string {
	if m != nil {
		return m.SecIpv6Prefix
	}
	return nil
}

func (m *Workload) GetCpus() uint32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *Workload) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Workload) GetMgmtIp() string {
	if m != nil {
		return m.MgmtIp
	}
	return ""
}

func (m *Workload) GetDvs() *DvsInfo {
	if m != nil {
		return m.Dvs
	}
	return nil
}

func (m *Workload) GetSwitchName() string {
	if m != nil {
		return m.SwitchName
	}
	return ""
}

func (m *Workload) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *Workload) GetExposedPorts() []*ExposedPorts {
	if m != nil {
		return m.ExposedPorts
	}
	return nil
}

type TriggerMsg struct {
	// API Status
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Type of the trigger operation
	TriggerOp TriggerOp `protobuf:"varint,2,opt,name=trigger_op,json=triggerOp,proto3,enum=iotamodel.TriggerOp" json:"trigger_op,omitempty"`
	// Trigger mode specifies whether commands have to be
	// executed serially or in parallel
	TriggerMode TriggerMode `protobuf:"varint,3,opt,name=trigger_mode,json=triggerMode,proto3,enum=iotamodel.TriggerMode" json:"trigger_mode,omitempty"`
	// Command Request params
	Commands []*Command `protobuf:"bytes,4,rep,name=commands" json:"commands,omitempty"`
}

func (m *TriggerMsg) Reset()                    { *m = TriggerMsg{} }
func (m *TriggerMsg) String() string            { return proto.CompactTextString(m) }
func (*TriggerMsg) ProtoMessage()               {}
func (*TriggerMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{22} }

func (m *TriggerMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *TriggerMsg) GetTriggerOp() TriggerOp {
	if m != nil {
		return m.TriggerOp
	}
	return TriggerOp_TYPE_NONE
}

func (m *TriggerMsg) GetTriggerMode() TriggerMode {
	if m != nil {
		return m.TriggerMode
	}
	return TriggerMode_MODE_NONE
}

func (m *TriggerMsg) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

type Command struct {
	// Whether to run the command in foreground or background
	Mode CommandMode `protobuf:"varint,1,opt,name=mode,proto3,enum=iotamodel.CommandMode" json:"mode,omitempty"`
	// Fully qualified command line that needs to be called
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Node on which trigger needs to be executed
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// entity name to run command on
	EntityName string `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	// foreground command timeout
	ForegroundTimeout uint32 `protobuf:"varint,5,opt,name=foreground_timeout,json=foregroundTimeout,proto3" json:"foreground_timeout,omitempty"`
	// running directory relative to entity dir to run command
	RunningDir string `protobuf:"bytes,6,opt,name=running_dir,json=runningDir,proto3" json:"running_dir,omitempty"`
	// ================ Output Parameters ===================
	// StdOut of the comamnd
	Stdout string `protobuf:"bytes,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// StdErr of the command
	Stderr string `protobuf:"bytes,8,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Exit code of the command
	ExitCode int32 `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// command handle. Useful only for background commands
	Handle string `protobuf:"bytes,10,opt,name=handle,proto3" json:"handle,omitempty"`
	// Whehther command timed out
	TimedOut bool `protobuf:"varint,11,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	// Copy Stderr on error only
	StdoutOnErr bool `protobuf:"varint,12,opt,name=stdout_on_err,json=stdoutOnErr,proto3" json:"stdout_on_err,omitempty"`
	// Copy Stderr on error only
	StderrOnErr bool `protobuf:"varint,13,opt,name=stderr_on_err,json=stderrOnErr,proto3" json:"stderr_on_err,omitempty"`
	// retries on failure, for unreliable commands
	RetriesOnFailure uint32 `protobuf:"varint,14,opt,name=retries_on_failure,json=retriesOnFailure,proto3" json:"retries_on_failure,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{23} }

func (m *Command) GetMode() CommandMode {
	if m != nil {
		return m.Mode
	}
	return CommandMode_COMMAND_NONE
}

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Command) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *Command) GetForegroundTimeout() uint32 {
	if m != nil {
		return m.ForegroundTimeout
	}
	return 0
}

func (m *Command) GetRunningDir() string {
	if m != nil {
		return m.RunningDir
	}
	return ""
}

func (m *Command) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Command) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *Command) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *Command) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *Command) GetTimedOut() bool {
	if m != nil {
		return m.TimedOut
	}
	return false
}

func (m *Command) GetStdoutOnErr() bool {
	if m != nil {
		return m.StdoutOnErr
	}
	return false
}

func (m *Command) GetStderrOnErr() bool {
	if m != nil {
		return m.StderrOnErr
	}
	return false
}

func (m *Command) GetRetriesOnFailure() uint32 {
	if m != nil {
		return m.RetriesOnFailure
	}
	return 0
}

type WorkloadMove struct {
	// workload move type
	Type WorkloadMoveType `protobuf:"varint,1,opt,name=type,proto3,enum=iotamodel.WorkloadMoveType" json:"type,omitempty"`
	// src node name
	SrcNodeName string `protobuf:"bytes,2,opt,name=src_node_name,json=srcNodeName,proto3" json:"src_node_name,omitempty"`
	// dst node name
	DstNodeName string `protobuf:"bytes,3,opt,name=dst_node_name,json=dstNodeName,proto3" json:"dst_node_name,omitempty"`
	// entity name to run command on
	WorkloadName string `protobuf:"bytes,4,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`
	// override vlan after vmotion if set
	VlanOverride uint32 `protobuf:"varint,5,opt,name=vlan_override,json=vlanOverride,proto3" json:"vlan_override,omitempty"`
	// current vlan if we want to override after move
	CurrentVlan uint32 `protobuf:"varint,6,opt,name=current_vlan,json=currentVlan,proto3" json:"current_vlan,omitempty"`
	// Switch name for vlan override
	SwitchName string `protobuf:"bytes,7,opt,name=switch_name,json=switchName,proto3" json:"switch_name,omitempty"`
	// workload move response
	ApiResponse *IotaAPIResponse `protobuf:"bytes,8,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
}

func (m *WorkloadMove) Reset()                    { *m = WorkloadMove{} }
func (m *WorkloadMove) String() string            { return proto.CompactTextString(m) }
func (*WorkloadMove) ProtoMessage()               {}
func (*WorkloadMove) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{24} }

func (m *WorkloadMove) GetType() WorkloadMoveType {
	if m != nil {
		return m.Type
	}
	return WorkloadMoveType_WORKLOAD_MOVE_TYPE_DEFAULT
}

func (m *WorkloadMove) GetSrcNodeName() string {
	if m != nil {
		return m.SrcNodeName
	}
	return ""
}

func (m *WorkloadMove) GetDstNodeName() string {
	if m != nil {
		return m.DstNodeName
	}
	return ""
}

func (m *WorkloadMove) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *WorkloadMove) GetVlanOverride() uint32 {
	if m != nil {
		return m.VlanOverride
	}
	return 0
}

func (m *WorkloadMove) GetCurrentVlan() uint32 {
	if m != nil {
		return m.CurrentVlan
	}
	return 0
}

func (m *WorkloadMove) GetSwitchName() string {
	if m != nil {
		return m.SwitchName
	}
	return ""
}

func (m *WorkloadMove) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

// WorkloadMoveMsg move workloads
type WorkloadMoveMsg struct {
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// List of workload moves
	WorkloadMoves []*WorkloadMove `protobuf:"bytes,2,rep,name=workload_moves,json=workloadMoves" json:"workload_moves,omitempty"`
	// Orchestrator node
	OrchestratorNode string `protobuf:"bytes,3,opt,name=orchestrator_node,json=orchestratorNode,proto3" json:"orchestrator_node,omitempty"`
}

func (m *WorkloadMoveMsg) Reset()                    { *m = WorkloadMoveMsg{} }
func (m *WorkloadMoveMsg) String() string            { return proto.CompactTextString(m) }
func (*WorkloadMoveMsg) ProtoMessage()               {}
func (*WorkloadMoveMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{25} }

func (m *WorkloadMoveMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *WorkloadMoveMsg) GetWorkloadMoves() []*WorkloadMove {
	if m != nil {
		return m.WorkloadMoves
	}
	return nil
}

func (m *WorkloadMoveMsg) GetOrchestratorNode() string {
	if m != nil {
		return m.OrchestratorNode
	}
	return ""
}

type Network struct {
	Type NetworkType `protobuf:"varint,1,opt,name=Type,proto3,enum=iotamodel.NetworkType" json:"Type,omitempty"`
	// Network name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Vlan uint32 `protobuf:"varint,3,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// nodes that network has to be on
	Nodes   []string `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
	Cluster string   `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Dhcp    bool     `protobuf:"varint,6,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{26} }

func (m *Network) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORK_TYPE_DEFAULT
}

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *Network) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Network) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Network) GetDhcp() bool {
	if m != nil {
		return m.Dhcp
	}
	return false
}

// NetworksMsg
type NetworksMsg struct {
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// List of workload moves
	Network []*Network `protobuf:"bytes,2,rep,name=Network" json:"Network,omitempty"`
	Switch  string     `protobuf:"bytes,3,opt,name=switch,proto3" json:"switch,omitempty"`
	// Orchestrator node
	OrchestratorNode string `protobuf:"bytes,4,opt,name=orchestrator_node,json=orchestratorNode,proto3" json:"orchestrator_node,omitempty"`
}

func (m *NetworksMsg) Reset()                    { *m = NetworksMsg{} }
func (m *NetworksMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworksMsg) ProtoMessage()               {}
func (*NetworksMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{27} }

func (m *NetworksMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *NetworksMsg) GetNetwork() []*Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *NetworksMsg) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *NetworksMsg) GetOrchestratorNode() string {
	if m != nil {
		return m.OrchestratorNode
	}
	return ""
}

// Captures the overall health of the e2e cluster
type ClusterHealthMsg struct {
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Individual node health statuses
	Health []*NodeHealth `protobuf:"bytes,2,rep,name=health" json:"health,omitempty"`
}

func (m *ClusterHealthMsg) Reset()                    { *m = ClusterHealthMsg{} }
func (m *ClusterHealthMsg) String() string            { return proto.CompactTextString(m) }
func (*ClusterHealthMsg) ProtoMessage()               {}
func (*ClusterHealthMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{28} }

func (m *ClusterHealthMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *ClusterHealthMsg) GetHealth() []*NodeHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

type NodeHealth struct {
	// Name of the node
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Cluster is complete or not (Could by used by other nodes to check their admission status for health check)
	ClusterDone bool `protobuf:"varint,2,opt,name=cluster_done,json=clusterDone,proto3" json:"cluster_done,omitempty"`
	// Health code of the node
	HealthCode NodeHealth_HealthCode `protobuf:"varint,3,opt,name=health_code,json=healthCode,proto3,enum=iotamodel.NodeHealth_HealthCode" json:"health_code,omitempty"`
}

func (m *NodeHealth) Reset()                    { *m = NodeHealth{} }
func (m *NodeHealth) String() string            { return proto.CompactTextString(m) }
func (*NodeHealth) ProtoMessage()               {}
func (*NodeHealth) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{29} }

func (m *NodeHealth) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeHealth) GetClusterDone() bool {
	if m != nil {
		return m.ClusterDone
	}
	return false
}

func (m *NodeHealth) GetHealthCode() NodeHealth_HealthCode {
	if m != nil {
		return m.HealthCode
	}
	return NodeHealth_HEALTH_OK
}

type NetworkQosClass struct {
	// name of qos
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MTU size to be set
	Mtu uint32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// pause pfc qos
	PausePfcCos uint32 `protobuf:"varint,3,opt,name=pause_pfc_cos,json=pausePfcCos,proto3" json:"pause_pfc_cos,omitempty"`
}

func (m *NetworkQosClass) Reset()                    { *m = NetworkQosClass{} }
func (m *NetworkQosClass) String() string            { return proto.CompactTextString(m) }
func (*NetworkQosClass) ProtoMessage()               {}
func (*NetworkQosClass) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{30} }

func (m *NetworkQosClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkQosClass) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *NetworkQosClass) GetPausePfcCos() uint32 {
	if m != nil {
		return m.PausePfcCos
	}
	return 0
}

type NetworkPolicyQos struct {
	// Name of network policy qos
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QosClasses []*NetworkQosClass `protobuf:"bytes,2,rep,name=qos_classes,json=qosClasses" json:"qos_classes,omitempty"`
}

func (m *NetworkPolicyQos) Reset()                    { *m = NetworkPolicyQos{} }
func (m *NetworkPolicyQos) String() string            { return proto.CompactTextString(m) }
func (*NetworkPolicyQos) ProtoMessage()               {}
func (*NetworkPolicyQos) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{31} }

func (m *NetworkPolicyQos) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkPolicyQos) GetQosClasses() []*NetworkQosClass {
	if m != nil {
		return m.QosClasses
	}
	return nil
}

type NetworkDscpClass struct {
	// name of qos
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// dscp to be set
	Dscp string `protobuf:"bytes,2,opt,name=dscp,proto3" json:"dscp,omitempty"`
	// cos
	Cos uint32 `protobuf:"varint,3,opt,name=cos,proto3" json:"cos,omitempty"`
}

func (m *NetworkDscpClass) Reset()                    { *m = NetworkDscpClass{} }
func (m *NetworkDscpClass) String() string            { return proto.CompactTextString(m) }
func (*NetworkDscpClass) ProtoMessage()               {}
func (*NetworkDscpClass) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{32} }

func (m *NetworkDscpClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkDscpClass) GetDscp() string {
	if m != nil {
		return m.Dscp
	}
	return ""
}

func (m *NetworkDscpClass) GetCos() uint32 {
	if m != nil {
		return m.Cos
	}
	return 0
}

type NetworkDscpPolicy struct {
	// Name of network dscp
	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DscpClasses []*NetworkDscpClass `protobuf:"bytes,2,rep,name=dscp_classes,json=dscpClasses" json:"dscp_classes,omitempty"`
}

func (m *NetworkDscpPolicy) Reset()                    { *m = NetworkDscpPolicy{} }
func (m *NetworkDscpPolicy) String() string            { return proto.CompactTextString(m) }
func (*NetworkDscpPolicy) ProtoMessage()               {}
func (*NetworkDscpPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{33} }

func (m *NetworkDscpPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkDscpPolicy) GetDscpClasses() []*NetworkDscpClass {
	if m != nil {
		return m.DscpClasses
	}
	return nil
}

type NetworkQueueClass struct {
	// name of queue
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// dscp to be set
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// bandwidth remaining percent
	Percent uint32 `protobuf:"varint,3,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (m *NetworkQueueClass) Reset()                    { *m = NetworkQueueClass{} }
func (m *NetworkQueueClass) String() string            { return proto.CompactTextString(m) }
func (*NetworkQueueClass) ProtoMessage()               {}
func (*NetworkQueueClass) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{34} }

func (m *NetworkQueueClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkQueueClass) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *NetworkQueueClass) GetPercent() uint32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type NetworkQueuePolicy struct {
	// Name of network queue policy
	Name         string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	QueueClasses []*NetworkQueueClass `protobuf:"bytes,2,rep,name=queue_classes,json=queueClasses" json:"queue_classes,omitempty"`
}

func (m *NetworkQueuePolicy) Reset()                    { *m = NetworkQueuePolicy{} }
func (m *NetworkQueuePolicy) String() string            { return proto.CompactTextString(m) }
func (*NetworkQueuePolicy) ProtoMessage()               {}
func (*NetworkQueuePolicy) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{35} }

func (m *NetworkQueuePolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkQueuePolicy) GetQueueClasses() []*NetworkQueueClass {
	if m != nil {
		return m.QueueClasses
	}
	return nil
}

type DataSwitch struct {
	// IP address of the switch
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Username of the switch
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password of the switch
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// switch ports used
	Ports []string `protobuf:"bytes,4,rep,name=ports" json:"ports,omitempty"`
	// Speed of each port
	Speed DataSwitch_Speed `protobuf:"varint,5,opt,name=speed,proto3,enum=iotamodel.DataSwitch_Speed" json:"speed,omitempty"`
	// MTU size to be set
	Mtu uint32 `protobuf:"varint,6,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Flow Control Receive  enabled/disabled
	FlowControlReceive bool `protobuf:"varint,7,opt,name=flow_control_receive,json=flowControlReceive,proto3" json:"flow_control_receive,omitempty"`
	// Flow Control Send enabled/disabled
	FlowControlSend bool `protobuf:"varint,8,opt,name=flow_control_send,json=flowControlSend,proto3" json:"flow_control_send,omitempty"`
	// Network Qos to be used.
	Qos *NetworkPolicyQos `protobuf:"bytes,9,opt,name=qos" json:"qos,omitempty"`
	// disable igmp
	IgmpDisabled bool `protobuf:"varint,10,opt,name=igmp_disabled,json=igmpDisabled,proto3" json:"igmp_disabled,omitempty"`
	// Network dscp to be used.
	Dscp *NetworkDscpPolicy `protobuf:"bytes,11,opt,name=dscp" json:"dscp,omitempty"`
	// Network queue to be used.
	Queue *NetworkQueuePolicy `protobuf:"bytes,12,opt,name=queue" json:"queue,omitempty"`
}

func (m *DataSwitch) Reset()                    { *m = DataSwitch{} }
func (m *DataSwitch) String() string            { return proto.CompactTextString(m) }
func (*DataSwitch) ProtoMessage()               {}
func (*DataSwitch) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{36} }

func (m *DataSwitch) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DataSwitch) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DataSwitch) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DataSwitch) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *DataSwitch) GetSpeed() DataSwitch_Speed {
	if m != nil {
		return m.Speed
	}
	return DataSwitch_Speed_100G
}

func (m *DataSwitch) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *DataSwitch) GetFlowControlReceive() bool {
	if m != nil {
		return m.FlowControlReceive
	}
	return false
}

func (m *DataSwitch) GetFlowControlSend() bool {
	if m != nil {
		return m.FlowControlSend
	}
	return false
}

func (m *DataSwitch) GetQos() *NetworkPolicyQos {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *DataSwitch) GetIgmpDisabled() bool {
	if m != nil {
		return m.IgmpDisabled
	}
	return false
}

func (m *DataSwitch) GetDscp() *NetworkDscpPolicy {
	if m != nil {
		return m.Dscp
	}
	return nil
}

func (m *DataSwitch) GetQueue() *NetworkQueuePolicy {
	if m != nil {
		return m.Queue
	}
	return nil
}

type License struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *License) Reset()                    { *m = License{} }
func (m *License) String() string            { return proto.CompactTextString(m) }
func (*License) ProtoMessage()               {}
func (*License) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{37} }

func (m *License) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *License) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *License) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *License) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type TestBedMsg struct {
	// API Response
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// NAPLES tarball to copy on the remote nodes
	NaplesSimImage string `protobuf:"bytes,2,opt,name=naples_sim_image,json=naplesSimImage,proto3" json:"naples_sim_image,omitempty"`
	// NAPLES tarball to copy on the remote nodes
	NaplesImage string `protobuf:"bytes,3,opt,name=naples_image,json=naplesImage,proto3" json:"naples_image,omitempty"`
	// Venice tarball to copy on the remote nodes
	VeniceImage string `protobuf:"bytes,4,opt,name=venice_image,json=veniceImage,proto3" json:"venice_image,omitempty"`
	// Driver sources to copy on the remote nodes
	DriverSources string `protobuf:"bytes,5,opt,name=driver_sources,json=driverSources,proto3" json:"driver_sources,omitempty"`
	// Allocated vlans based off of the port id
	// First one will always be native vlan
	AllocatedVlans []uint32 `protobuf:"varint,6,rep,packed,name=allocated_vlans,json=allocatedVlans" json:"allocated_vlans,omitempty"`
	// Native vlan for the testbed
	NativeVlan uint32 `protobuf:"varint,7,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	// List of node IP addresses
	Nodes []*TestBedNode `protobuf:"bytes,8,rep,name=nodes" json:"nodes,omitempty"`
	// Node username
	Username string `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty"`
	// Node password
	Password string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	// Testbed ID
	TestbedId uint32 `protobuf:"varint,11,opt,name=testbed_id,json=testbedId,proto3" json:"testbed_id,omitempty"`
	// DataSwitch
	DataSwitches []*DataSwitch `protobuf:"bytes,12,rep,name=data_switches,json=dataSwitches" json:"data_switches,omitempty"`
	// Reboot Nodes
	RebootNodes bool `protobuf:"varint,13,opt,name=reboot_nodes,json=rebootNodes,proto3" json:"reboot_nodes,omitempty"`
	// global licenses
	Licenses []*License `protobuf:"bytes,14,rep,name=licenses" json:"licenses,omitempty"`
	// Testbed Jobc/testbed json file
	TestbedJsonFile string `protobuf:"bytes,15,opt,name=testbed_json_file,json=testbedJsonFile,proto3" json:"testbed_json_file,omitempty"`
}

func (m *TestBedMsg) Reset()                    { *m = TestBedMsg{} }
func (m *TestBedMsg) String() string            { return proto.CompactTextString(m) }
func (*TestBedMsg) ProtoMessage()               {}
func (*TestBedMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{38} }

func (m *TestBedMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *TestBedMsg) GetNaplesSimImage() string {
	if m != nil {
		return m.NaplesSimImage
	}
	return ""
}

func (m *TestBedMsg) GetNaplesImage() string {
	if m != nil {
		return m.NaplesImage
	}
	return ""
}

func (m *TestBedMsg) GetVeniceImage() string {
	if m != nil {
		return m.VeniceImage
	}
	return ""
}

func (m *TestBedMsg) GetDriverSources() string {
	if m != nil {
		return m.DriverSources
	}
	return ""
}

func (m *TestBedMsg) GetAllocatedVlans() []uint32 {
	if m != nil {
		return m.AllocatedVlans
	}
	return nil
}

func (m *TestBedMsg) GetNativeVlan() uint32 {
	if m != nil {
		return m.NativeVlan
	}
	return 0
}

func (m *TestBedMsg) GetNodes() []*TestBedNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *TestBedMsg) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TestBedMsg) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TestBedMsg) GetTestbedId() uint32 {
	if m != nil {
		return m.TestbedId
	}
	return 0
}

func (m *TestBedMsg) GetDataSwitches() []*DataSwitch {
	if m != nil {
		return m.DataSwitches
	}
	return nil
}

func (m *TestBedMsg) GetRebootNodes() bool {
	if m != nil {
		return m.RebootNodes
	}
	return false
}

func (m *TestBedMsg) GetLicenses() []*License {
	if m != nil {
		return m.Licenses
	}
	return nil
}

func (m *TestBedMsg) GetTestbedJsonFile() string {
	if m != nil {
		return m.TestbedJsonFile
	}
	return ""
}

type TestNodesMsg struct {
	// API Response
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// List of node IP addresses
	Nodes []*TestBedNode `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	// Node username
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Node password
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Reboot Nodes
	RebootNodes bool `protobuf:"varint,5,opt,name=reboot_nodes,json=rebootNodes,proto3" json:"reboot_nodes,omitempty"`
	// global licenses
	Licenses []*License `protobuf:"bytes,13,rep,name=licenses" json:"licenses,omitempty"`
}

func (m *TestNodesMsg) Reset()                    { *m = TestNodesMsg{} }
func (m *TestNodesMsg) String() string            { return proto.CompactTextString(m) }
func (*TestNodesMsg) ProtoMessage()               {}
func (*TestNodesMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{39} }

func (m *TestNodesMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *TestNodesMsg) GetNodes() []*TestBedNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *TestNodesMsg) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TestNodesMsg) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TestNodesMsg) GetRebootNodes() bool {
	if m != nil {
		return m.RebootNodes
	}
	return false
}

func (m *TestNodesMsg) GetLicenses() []*License {
	if m != nil {
		return m.Licenses
	}
	return nil
}

type VlanConfig struct {
	// unset specified vlans
	Unset      bool   `protobuf:"varint,1,opt,name=unset,proto3" json:"unset,omitempty"`
	VlanRange  string `protobuf:"bytes,2,opt,name=vlan_range,json=vlanRange,proto3" json:"vlan_range,omitempty"`
	NativeVlan uint32 `protobuf:"varint,3,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
}

func (m *VlanConfig) Reset()                    { *m = VlanConfig{} }
func (m *VlanConfig) String() string            { return proto.CompactTextString(m) }
func (*VlanConfig) ProtoMessage()               {}
func (*VlanConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{40} }

func (m *VlanConfig) GetUnset() bool {
	if m != nil {
		return m.Unset
	}
	return false
}

func (m *VlanConfig) GetVlanRange() string {
	if m != nil {
		return m.VlanRange
	}
	return ""
}

func (m *VlanConfig) GetNativeVlan() uint32 {
	if m != nil {
		return m.NativeVlan
	}
	return 0
}

type SwitchFlapInfo struct {
	// how many times to flap
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// flap interval
	Interval uint32 `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// how long link should be down
	DownTime uint32 `protobuf:"varint,3,opt,name=down_time,json=downTime,proto3" json:"down_time,omitempty"`
}

func (m *SwitchFlapInfo) Reset()                    { *m = SwitchFlapInfo{} }
func (m *SwitchFlapInfo) String() string            { return proto.CompactTextString(m) }
func (*SwitchFlapInfo) ProtoMessage()               {}
func (*SwitchFlapInfo) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{41} }

func (m *SwitchFlapInfo) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SwitchFlapInfo) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *SwitchFlapInfo) GetDownTime() uint32 {
	if m != nil {
		return m.DownTime
	}
	return 0
}

type PortPauseConfig struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *PortPauseConfig) Reset()                    { *m = PortPauseConfig{} }
func (m *PortPauseConfig) String() string            { return proto.CompactTextString(m) }
func (*PortPauseConfig) ProtoMessage()               {}
func (*PortPauseConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{42} }

func (m *PortPauseConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type PortPfcConfig struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *PortPfcConfig) Reset()                    { *m = PortPfcConfig{} }
func (m *PortPfcConfig) String() string            { return proto.CompactTextString(m) }
func (*PortPfcConfig) ProtoMessage()               {}
func (*PortPfcConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{43} }

func (m *PortPfcConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type PortQosConfig struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *PortQosConfig) Reset()                    { *m = PortQosConfig{} }
func (m *PortQosConfig) String() string            { return proto.CompactTextString(m) }
func (*PortQosConfig) ProtoMessage()               {}
func (*PortQosConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{44} }

func (m *PortQosConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *PortQosConfig) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type PortQueuingConfig struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *PortQueuingConfig) Reset()                    { *m = PortQueuingConfig{} }
func (m *PortQueuingConfig) String() string            { return proto.CompactTextString(m) }
func (*PortQueuingConfig) ProtoMessage()               {}
func (*PortQueuingConfig) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{45} }

func (m *PortQueuingConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *PortQueuingConfig) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type SwitchMsg struct {
	// API Response
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	Op          SwitchOp         `protobuf:"varint,2,opt,name=op,proto3,enum=iotamodel.SwitchOp" json:"op,omitempty"`
	// operation info
	//
	// Types that are valid to be assigned to OpInfo:
	//	*SwitchMsg_FlapInfo
	OpInfo isSwitchMsg_OpInfo `protobuf_oneof:"op_info"`
	// DataSwitch
	DataSwitches []*DataSwitch `protobuf:"bytes,4,rep,name=data_switches,json=dataSwitches" json:"data_switches,omitempty"`
	// Node specific configs
	//
	// Types that are valid to be assigned to SwitchInfo:
	//	*SwitchMsg_VlanConfig
	SwitchInfo isSwitchMsg_SwitchInfo `protobuf_oneof:"switch_info"`
	// Types that are valid to be assigned to PauseInfo:
	//	*SwitchMsg_PortPause
	PauseInfo isSwitchMsg_PauseInfo `protobuf_oneof:"pause_info"`
	// Types that are valid to be assigned to PfcInfo:
	//	*SwitchMsg_PortPfc
	PfcInfo isSwitchMsg_PfcInfo `protobuf_oneof:"pfc_info"`
	// Types that are valid to be assigned to PortQosInfo:
	//	*SwitchMsg_PortQos
	PortQosInfo isSwitchMsg_PortQosInfo `protobuf_oneof:"port_qos_info"`
	// Types that are valid to be assigned to PortQueuingInfo:
	//	*SwitchMsg_PortQueuing
	PortQueuingInfo isSwitchMsg_PortQueuingInfo `protobuf_oneof:"port_queuing_info"`
}

func (m *SwitchMsg) Reset()                    { *m = SwitchMsg{} }
func (m *SwitchMsg) String() string            { return proto.CompactTextString(m) }
func (*SwitchMsg) ProtoMessage()               {}
func (*SwitchMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{46} }

type isSwitchMsg_OpInfo interface {
	isSwitchMsg_OpInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwitchMsg_SwitchInfo interface {
	isSwitchMsg_SwitchInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwitchMsg_PauseInfo interface {
	isSwitchMsg_PauseInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwitchMsg_PfcInfo interface {
	isSwitchMsg_PfcInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwitchMsg_PortQosInfo interface {
	isSwitchMsg_PortQosInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSwitchMsg_PortQueuingInfo interface {
	isSwitchMsg_PortQueuingInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SwitchMsg_FlapInfo struct {
	FlapInfo *SwitchFlapInfo `protobuf:"bytes,3,opt,name=flap_info,json=flapInfo,oneof"`
}
type SwitchMsg_VlanConfig struct {
	VlanConfig *VlanConfig `protobuf:"bytes,5,opt,name=vlan_config,json=vlanConfig,oneof"`
}
type SwitchMsg_PortPause struct {
	PortPause *PortPauseConfig `protobuf:"bytes,6,opt,name=port_pause,json=portPause,oneof"`
}
type SwitchMsg_PortPfc struct {
	PortPfc *PortPfcConfig `protobuf:"bytes,7,opt,name=port_pfc,json=portPfc,oneof"`
}
type SwitchMsg_PortQos struct {
	PortQos *PortQosConfig `protobuf:"bytes,8,opt,name=port_qos,json=portQos,oneof"`
}
type SwitchMsg_PortQueuing struct {
	PortQueuing *PortQueuingConfig `protobuf:"bytes,9,opt,name=port_queuing,json=portQueuing,oneof"`
}

func (*SwitchMsg_FlapInfo) isSwitchMsg_OpInfo()             {}
func (*SwitchMsg_VlanConfig) isSwitchMsg_SwitchInfo()       {}
func (*SwitchMsg_PortPause) isSwitchMsg_PauseInfo()         {}
func (*SwitchMsg_PortPfc) isSwitchMsg_PfcInfo()             {}
func (*SwitchMsg_PortQos) isSwitchMsg_PortQosInfo()         {}
func (*SwitchMsg_PortQueuing) isSwitchMsg_PortQueuingInfo() {}

func (m *SwitchMsg) GetOpInfo() isSwitchMsg_OpInfo {
	if m != nil {
		return m.OpInfo
	}
	return nil
}
func (m *SwitchMsg) GetSwitchInfo() isSwitchMsg_SwitchInfo {
	if m != nil {
		return m.SwitchInfo
	}
	return nil
}
func (m *SwitchMsg) GetPauseInfo() isSwitchMsg_PauseInfo {
	if m != nil {
		return m.PauseInfo
	}
	return nil
}
func (m *SwitchMsg) GetPfcInfo() isSwitchMsg_PfcInfo {
	if m != nil {
		return m.PfcInfo
	}
	return nil
}
func (m *SwitchMsg) GetPortQosInfo() isSwitchMsg_PortQosInfo {
	if m != nil {
		return m.PortQosInfo
	}
	return nil
}
func (m *SwitchMsg) GetPortQueuingInfo() isSwitchMsg_PortQueuingInfo {
	if m != nil {
		return m.PortQueuingInfo
	}
	return nil
}

func (m *SwitchMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *SwitchMsg) GetOp() SwitchOp {
	if m != nil {
		return m.Op
	}
	return SwitchOp_OP_NONE
}

func (m *SwitchMsg) GetFlapInfo() *SwitchFlapInfo {
	if x, ok := m.GetOpInfo().(*SwitchMsg_FlapInfo); ok {
		return x.FlapInfo
	}
	return nil
}

func (m *SwitchMsg) GetDataSwitches() []*DataSwitch {
	if m != nil {
		return m.DataSwitches
	}
	return nil
}

func (m *SwitchMsg) GetVlanConfig() *VlanConfig {
	if x, ok := m.GetSwitchInfo().(*SwitchMsg_VlanConfig); ok {
		return x.VlanConfig
	}
	return nil
}

func (m *SwitchMsg) GetPortPause() *PortPauseConfig {
	if x, ok := m.GetPauseInfo().(*SwitchMsg_PortPause); ok {
		return x.PortPause
	}
	return nil
}

func (m *SwitchMsg) GetPortPfc() *PortPfcConfig {
	if x, ok := m.GetPfcInfo().(*SwitchMsg_PortPfc); ok {
		return x.PortPfc
	}
	return nil
}

func (m *SwitchMsg) GetPortQos() *PortQosConfig {
	if x, ok := m.GetPortQosInfo().(*SwitchMsg_PortQos); ok {
		return x.PortQos
	}
	return nil
}

func (m *SwitchMsg) GetPortQueuing() *PortQueuingConfig {
	if x, ok := m.GetPortQueuingInfo().(*SwitchMsg_PortQueuing); ok {
		return x.PortQueuing
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SwitchMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SwitchMsg_OneofMarshaler, _SwitchMsg_OneofUnmarshaler, _SwitchMsg_OneofSizer, []interface{}{
		(*SwitchMsg_FlapInfo)(nil),
		(*SwitchMsg_VlanConfig)(nil),
		(*SwitchMsg_PortPause)(nil),
		(*SwitchMsg_PortPfc)(nil),
		(*SwitchMsg_PortQos)(nil),
		(*SwitchMsg_PortQueuing)(nil),
	}
}

func _SwitchMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SwitchMsg)
	// op_info
	switch x := m.OpInfo.(type) {
	case *SwitchMsg_FlapInfo:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlapInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.OpInfo has unexpected type %T", x)
	}
	// switch_info
	switch x := m.SwitchInfo.(type) {
	case *SwitchMsg_VlanConfig:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VlanConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.SwitchInfo has unexpected type %T", x)
	}
	// pause_info
	switch x := m.PauseInfo.(type) {
	case *SwitchMsg_PortPause:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortPause); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.PauseInfo has unexpected type %T", x)
	}
	// pfc_info
	switch x := m.PfcInfo.(type) {
	case *SwitchMsg_PortPfc:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortPfc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.PfcInfo has unexpected type %T", x)
	}
	// port_qos_info
	switch x := m.PortQosInfo.(type) {
	case *SwitchMsg_PortQos:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortQos); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.PortQosInfo has unexpected type %T", x)
	}
	// port_queuing_info
	switch x := m.PortQueuingInfo.(type) {
	case *SwitchMsg_PortQueuing:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortQueuing); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SwitchMsg.PortQueuingInfo has unexpected type %T", x)
	}
	return nil
}

func _SwitchMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SwitchMsg)
	switch tag {
	case 3: // op_info.flap_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SwitchFlapInfo)
		err := b.DecodeMessage(msg)
		m.OpInfo = &SwitchMsg_FlapInfo{msg}
		return true, err
	case 5: // switch_info.vlan_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VlanConfig)
		err := b.DecodeMessage(msg)
		m.SwitchInfo = &SwitchMsg_VlanConfig{msg}
		return true, err
	case 6: // pause_info.port_pause
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortPauseConfig)
		err := b.DecodeMessage(msg)
		m.PauseInfo = &SwitchMsg_PortPause{msg}
		return true, err
	case 7: // pfc_info.port_pfc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortPfcConfig)
		err := b.DecodeMessage(msg)
		m.PfcInfo = &SwitchMsg_PortPfc{msg}
		return true, err
	case 8: // port_qos_info.port_qos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortQosConfig)
		err := b.DecodeMessage(msg)
		m.PortQosInfo = &SwitchMsg_PortQos{msg}
		return true, err
	case 9: // port_queuing_info.port_queuing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortQueuingConfig)
		err := b.DecodeMessage(msg)
		m.PortQueuingInfo = &SwitchMsg_PortQueuing{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SwitchMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SwitchMsg)
	// op_info
	switch x := m.OpInfo.(type) {
	case *SwitchMsg_FlapInfo:
		s := proto.Size(x.FlapInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// switch_info
	switch x := m.SwitchInfo.(type) {
	case *SwitchMsg_VlanConfig:
		s := proto.Size(x.VlanConfig)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// pause_info
	switch x := m.PauseInfo.(type) {
	case *SwitchMsg_PortPause:
		s := proto.Size(x.PortPause)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// pfc_info
	switch x := m.PfcInfo.(type) {
	case *SwitchMsg_PortPfc:
		s := proto.Size(x.PortPfc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// port_qos_info
	switch x := m.PortQosInfo.(type) {
	case *SwitchMsg_PortQos:
		s := proto.Size(x.PortQos)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// port_queuing_info
	switch x := m.PortQueuingInfo.(type) {
	case *SwitchMsg_PortQueuing:
		s := proto.Size(x.PortQueuing)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TestBedNode struct {
	Type TestBedNodeType `protobuf:"varint,1,opt,name=type,proto3,enum=iotamodel.TestBedNodeType" json:"type,omitempty"`
	// Node Management IP Address
	IpAddress     string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	CimcIpAddress string `protobuf:"bytes,3,opt,name=cimc_ip_address,json=cimcIpAddress,proto3" json:"cimc_ip_address,omitempty"`
	// Node CIMC username
	CimcUsername string `protobuf:"bytes,4,opt,name=cimc_username,json=cimcUsername,proto3" json:"cimc_username,omitempty"`
	// Node CIMC password
	CimcPassword string `protobuf:"bytes,5,opt,name=cimc_password,json=cimcPassword,proto3" json:"cimc_password,omitempty"`
	// Node CIMC username
	EsxUsername string `protobuf:"bytes,6,opt,name=esx_username,json=esxUsername,proto3" json:"esx_username,omitempty"`
	// Node CIMC password
	EsxPassword  string `protobuf:"bytes,7,opt,name=esx_password,json=esxPassword,proto3" json:"esx_password,omitempty"`
	NicIpAddress string `protobuf:"bytes,8,opt,name=nic_ip_address,json=nicIpAddress,proto3" json:"nic_ip_address,omitempty"`
	// NIC Console ip address
	NicConsoleIpAddress string `protobuf:"bytes,9,opt,name=nic_console_ip_address,json=nicConsoleIpAddress,proto3" json:"nic_console_ip_address,omitempty"`
	// NIC Console port
	NicConsolePort string `protobuf:"bytes,10,opt,name=nic_console_port,json=nicConsolePort,proto3" json:"nic_console_port,omitempty"`
	// NIC Console username
	NicConsoleUsername string `protobuf:"bytes,11,opt,name=nic_console_username,json=nicConsoleUsername,proto3" json:"nic_console_username,omitempty"`
	// NIC Console password
	NicConsolePassword string `protobuf:"bytes,12,opt,name=nic_console_password,json=nicConsolePassword,proto3" json:"nic_console_password,omitempty"`
	// NIC username
	NicUsername string `protobuf:"bytes,13,opt,name=nic_username,json=nicUsername,proto3" json:"nic_username,omitempty"`
	// NIC password
	NicPassword string `protobuf:"bytes,14,opt,name=nic_password,json=nicPassword,proto3" json:"nic_password,omitempty"`
	// Initialization script - used for HW
	InitScript string `protobuf:"bytes,15,opt,name=init_script,json=initScript,proto3" json:"init_script,omitempty"`
	// Control interface for this node.
	ControlIntf string `protobuf:"bytes,16,opt,name=control_intf,json=controlIntf,proto3" json:"control_intf,omitempty"`
	// Switch ports for this node.
	SwitchPortIds []uint32 `protobuf:"varint,17,rep,packed,name=switch_port_ids,json=switchPortIds" json:"switch_port_ids,omitempty"`
	// Node OS
	Os TestBedNodeOs `protobuf:"varint,18,opt,name=os,proto3,enum=iotamodel.TestBedNodeOs" json:"os,omitempty"`
	// IP address of ESX control vm
	EsxCtrlNodeIpAddress string `protobuf:"bytes,19,opt,name=esx_ctrl_node_ip_address,json=esxCtrlNodeIpAddress,proto3" json:"esx_ctrl_node_ip_address,omitempty"`
	// NIC uuid
	NicUuid string `protobuf:"bytes,20,opt,name=nic_uuid,json=nicUuid,proto3" json:"nic_uuid,omitempty"`
	// node name
	NodeName string `protobuf:"bytes,21,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// server type
	ServerType string `protobuf:"bytes,22,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	// license
	License string   `protobuf:"bytes,23,opt,name=license,proto3" json:"license,omitempty"`
	ApcInfo *ApcInfo `protobuf:"bytes,24,opt,name=apc_info,json=apcInfo" json:"apc_info,omitempty"`
	// mgmt intf
	MgmtIntf string `protobuf:"bytes,25,opt,name=mgmt_intf,json=mgmtIntf,proto3" json:"mgmt_intf,omitempty"`
	DcName   string `protobuf:"bytes,26,opt,name=dc_name,json=dcName,proto3" json:"dc_name,omitempty"`
	Switch   string `protobuf:"bytes,27,opt,name=switch,proto3" json:"switch,omitempty"`
	// Don't setup mgmt on naples
	NoMgmt     bool   `protobuf:"varint,28,opt,name=no_mgmt,json=noMgmt,proto3" json:"no_mgmt,omitempty"`
	CimcNcsiIp string `protobuf:"bytes,29,opt,name=cimc_ncsi_ip,json=cimcNcsiIp,proto3" json:"cimc_ncsi_ip,omitempty"`
	// auto discover on install
	AutoDiscoverOnInstall bool `protobuf:"varint,30,opt,name=auto_discover_on_install,json=autoDiscoverOnInstall,proto3" json:"auto_discover_on_install,omitempty"`
	// warmd instance name
	InstanceName string `protobuf:"bytes,31,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
}

func (m *TestBedNode) Reset()                    { *m = TestBedNode{} }
func (m *TestBedNode) String() string            { return proto.CompactTextString(m) }
func (*TestBedNode) ProtoMessage()               {}
func (*TestBedNode) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{47} }

func (m *TestBedNode) GetType() TestBedNodeType {
	if m != nil {
		return m.Type
	}
	return TestBedNodeType_TESTBED_NODE_TYPE_NONE
}

func (m *TestBedNode) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *TestBedNode) GetCimcIpAddress() string {
	if m != nil {
		return m.CimcIpAddress
	}
	return ""
}

func (m *TestBedNode) GetCimcUsername() string {
	if m != nil {
		return m.CimcUsername
	}
	return ""
}

func (m *TestBedNode) GetCimcPassword() string {
	if m != nil {
		return m.CimcPassword
	}
	return ""
}

func (m *TestBedNode) GetEsxUsername() string {
	if m != nil {
		return m.EsxUsername
	}
	return ""
}

func (m *TestBedNode) GetEsxPassword() string {
	if m != nil {
		return m.EsxPassword
	}
	return ""
}

func (m *TestBedNode) GetNicIpAddress() string {
	if m != nil {
		return m.NicIpAddress
	}
	return ""
}

func (m *TestBedNode) GetNicConsoleIpAddress() string {
	if m != nil {
		return m.NicConsoleIpAddress
	}
	return ""
}

func (m *TestBedNode) GetNicConsolePort() string {
	if m != nil {
		return m.NicConsolePort
	}
	return ""
}

func (m *TestBedNode) GetNicConsoleUsername() string {
	if m != nil {
		return m.NicConsoleUsername
	}
	return ""
}

func (m *TestBedNode) GetNicConsolePassword() string {
	if m != nil {
		return m.NicConsolePassword
	}
	return ""
}

func (m *TestBedNode) GetNicUsername() string {
	if m != nil {
		return m.NicUsername
	}
	return ""
}

func (m *TestBedNode) GetNicPassword() string {
	if m != nil {
		return m.NicPassword
	}
	return ""
}

func (m *TestBedNode) GetInitScript() string {
	if m != nil {
		return m.InitScript
	}
	return ""
}

func (m *TestBedNode) GetControlIntf() string {
	if m != nil {
		return m.ControlIntf
	}
	return ""
}

func (m *TestBedNode) GetSwitchPortIds() []uint32 {
	if m != nil {
		return m.SwitchPortIds
	}
	return nil
}

func (m *TestBedNode) GetOs() TestBedNodeOs {
	if m != nil {
		return m.Os
	}
	return TestBedNodeOs_TESTBED_NODE_OS_LINUX
}

func (m *TestBedNode) GetEsxCtrlNodeIpAddress() string {
	if m != nil {
		return m.EsxCtrlNodeIpAddress
	}
	return ""
}

func (m *TestBedNode) GetNicUuid() string {
	if m != nil {
		return m.NicUuid
	}
	return ""
}

func (m *TestBedNode) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *TestBedNode) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func (m *TestBedNode) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *TestBedNode) GetApcInfo() *ApcInfo {
	if m != nil {
		return m.ApcInfo
	}
	return nil
}

func (m *TestBedNode) GetMgmtIntf() string {
	if m != nil {
		return m.MgmtIntf
	}
	return ""
}

func (m *TestBedNode) GetDcName() string {
	if m != nil {
		return m.DcName
	}
	return ""
}

func (m *TestBedNode) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *TestBedNode) GetNoMgmt() bool {
	if m != nil {
		return m.NoMgmt
	}
	return false
}

func (m *TestBedNode) GetCimcNcsiIp() string {
	if m != nil {
		return m.CimcNcsiIp
	}
	return ""
}

func (m *TestBedNode) GetAutoDiscoverOnInstall() bool {
	if m != nil {
		return m.AutoDiscoverOnInstall
	}
	return false
}

func (m *TestBedNode) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

// EntityCopyMsg takes care of copying to entity.
// If copy in to entity, destination will be prefixed with entity directory on iota node.
// if copy out from entity, files will be prefixed with entity directory on iota node.
type EntityCopyMsg struct {
	// API Response for the copy operation
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Copy Direction.
	Direction CopyDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=iotamodel.CopyDirection" json:"direction,omitempty"`
	// Node to do copy operation
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// workload context to do copy operation
	EntityName string `protobuf:"bytes,4,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	// list of files that needs to be copied
	Files []string `protobuf:"bytes,5,rep,name=files" json:"files,omitempty"`
	// destination directory
	DestDir string `protobuf:"bytes,6,opt,name=dest_dir,json=destDir,proto3" json:"dest_dir,omitempty"`
}

func (m *EntityCopyMsg) Reset()                    { *m = EntityCopyMsg{} }
func (m *EntityCopyMsg) String() string            { return proto.CompactTextString(m) }
func (*EntityCopyMsg) ProtoMessage()               {}
func (*EntityCopyMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{48} }

func (m *EntityCopyMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *EntityCopyMsg) GetDirection() CopyDirection {
	if m != nil {
		return m.Direction
	}
	return CopyDirection_DIR_NONE
}

func (m *EntityCopyMsg) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *EntityCopyMsg) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *EntityCopyMsg) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *EntityCopyMsg) GetDestDir() string {
	if m != nil {
		return m.DestDir
	}
	return ""
}

type DownloadAssetsMsg struct {
	// API Response for the download operatin
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// Asset Name
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// Release Version
	ReleaseVersion string `protobuf:"bytes,3,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"`
	// parent folder to download
	ParentDir string `protobuf:"bytes,4,opt,name=parent_dir,json=parentDir,proto3" json:"parent_dir,omitempty"`
}

func (m *DownloadAssetsMsg) Reset()                    { *m = DownloadAssetsMsg{} }
func (m *DownloadAssetsMsg) String() string            { return proto.CompactTextString(m) }
func (*DownloadAssetsMsg) ProtoMessage()               {}
func (*DownloadAssetsMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{49} }

func (m *DownloadAssetsMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *DownloadAssetsMsg) GetAssetName() string {
	if m != nil {
		return m.AssetName
	}
	return ""
}

func (m *DownloadAssetsMsg) GetReleaseVersion() string {
	if m != nil {
		return m.ReleaseVersion
	}
	return ""
}

func (m *DownloadAssetsMsg) GetParentDir() string {
	if m != nil {
		return m.ParentDir
	}
	return ""
}

type PrepareWorkspaceMsg struct {
	// API Response for the prepare operatin
	ApiResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=api_response,json=apiResponse" json:"api_response,omitempty"`
	// FW Version
	FwVersion string `protobuf:"bytes,2,opt,name=fw_version,json=fwVersion,proto3" json:"fw_version,omitempty"`
	// Driver Version
	DriverVersion string `protobuf:"bytes,3,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`
	// Venice Version
	VeniceVersion string `protobuf:"bytes,4,opt,name=venice_version,json=veniceVersion,proto3" json:"venice_version,omitempty"`
	// parent folder to retrieve
	ParentDir string `protobuf:"bytes,5,opt,name=parent_dir,json=parentDir,proto3" json:"parent_dir,omitempty"`
}

func (m *PrepareWorkspaceMsg) Reset()                    { *m = PrepareWorkspaceMsg{} }
func (m *PrepareWorkspaceMsg) String() string            { return proto.CompactTextString(m) }
func (*PrepareWorkspaceMsg) ProtoMessage()               {}
func (*PrepareWorkspaceMsg) Descriptor() ([]byte, []int) { return fileDescriptorTopoSvc, []int{50} }

func (m *PrepareWorkspaceMsg) GetApiResponse() *IotaAPIResponse {
	if m != nil {
		return m.ApiResponse
	}
	return nil
}

func (m *PrepareWorkspaceMsg) GetFwVersion() string {
	if m != nil {
		return m.FwVersion
	}
	return ""
}

func (m *PrepareWorkspaceMsg) GetDriverVersion() string {
	if m != nil {
		return m.DriverVersion
	}
	return ""
}

func (m *PrepareWorkspaceMsg) GetVeniceVersion() string {
	if m != nil {
		return m.VeniceVersion
	}
	return ""
}

func (m *PrepareWorkspaceMsg) GetParentDir() string {
	if m != nil {
		return m.ParentDir
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeMsg)(nil), "iotamodel.NodeMsg")
	proto.RegisterType((*ReloadMsg)(nil), "iotamodel.ReloadMsg")
	proto.RegisterType((*Entity)(nil), "iotamodel.Entity")
	proto.RegisterType((*VmwareESXConfig)(nil), "iotamodel.VmwareESXConfig")
	proto.RegisterType((*VcenterConfig)(nil), "iotamodel.VcenterConfig")
	proto.RegisterType((*NaplesSimInfo)(nil), "iotamodel.NaplesSimInfo")
	proto.RegisterType((*Node)(nil), "iotamodel.Node")
	proto.RegisterType((*ApcInfo)(nil), "iotamodel.ApcInfo")
	proto.RegisterType((*NaplesMultiSimConfig)(nil), "iotamodel.NaplesMultiSimConfig")
	proto.RegisterType((*NaplesControlSimConfig)(nil), "iotamodel.NaplesControlSimConfig")
	proto.RegisterType((*NaplesConfig)(nil), "iotamodel.NaplesConfig")
	proto.RegisterType((*NaplesConfigs)(nil), "iotamodel.NaplesConfigs")
	proto.RegisterType((*ThirdPartyNicConfig)(nil), "iotamodel.ThirdPartyNicConfig")
	proto.RegisterType((*MellanoxConfig)(nil), "iotamodel.MellanoxConfig")
	proto.RegisterType((*BroadcomConfig)(nil), "iotamodel.BroadcomConfig")
	proto.RegisterType((*IntelConfig)(nil), "iotamodel.IntelConfig")
	proto.RegisterType((*VenicePeer)(nil), "iotamodel.VenicePeer")
	proto.RegisterType((*VeniceConfig)(nil), "iotamodel.VeniceConfig")
	proto.RegisterType((*WorkloadMsg)(nil), "iotamodel.WorkloadMsg")
	proto.RegisterType((*DvsInfo)(nil), "iotamodel.DvsInfo")
	proto.RegisterType((*ExposedPorts)(nil), "iotamodel.ExposedPorts")
	proto.RegisterType((*Workload)(nil), "iotamodel.Workload")
	proto.RegisterType((*TriggerMsg)(nil), "iotamodel.TriggerMsg")
	proto.RegisterType((*Command)(nil), "iotamodel.Command")
	proto.RegisterType((*WorkloadMove)(nil), "iotamodel.WorkloadMove")
	proto.RegisterType((*WorkloadMoveMsg)(nil), "iotamodel.WorkloadMoveMsg")
	proto.RegisterType((*Network)(nil), "iotamodel.Network")
	proto.RegisterType((*NetworksMsg)(nil), "iotamodel.NetworksMsg")
	proto.RegisterType((*ClusterHealthMsg)(nil), "iotamodel.ClusterHealthMsg")
	proto.RegisterType((*NodeHealth)(nil), "iotamodel.NodeHealth")
	proto.RegisterType((*NetworkQosClass)(nil), "iotamodel.NetworkQosClass")
	proto.RegisterType((*NetworkPolicyQos)(nil), "iotamodel.NetworkPolicyQos")
	proto.RegisterType((*NetworkDscpClass)(nil), "iotamodel.NetworkDscpClass")
	proto.RegisterType((*NetworkDscpPolicy)(nil), "iotamodel.NetworkDscpPolicy")
	proto.RegisterType((*NetworkQueueClass)(nil), "iotamodel.NetworkQueueClass")
	proto.RegisterType((*NetworkQueuePolicy)(nil), "iotamodel.NetworkQueuePolicy")
	proto.RegisterType((*DataSwitch)(nil), "iotamodel.DataSwitch")
	proto.RegisterType((*License)(nil), "iotamodel.License")
	proto.RegisterType((*TestBedMsg)(nil), "iotamodel.TestBedMsg")
	proto.RegisterType((*TestNodesMsg)(nil), "iotamodel.TestNodesMsg")
	proto.RegisterType((*VlanConfig)(nil), "iotamodel.VlanConfig")
	proto.RegisterType((*SwitchFlapInfo)(nil), "iotamodel.SwitchFlapInfo")
	proto.RegisterType((*PortPauseConfig)(nil), "iotamodel.PortPauseConfig")
	proto.RegisterType((*PortPfcConfig)(nil), "iotamodel.PortPfcConfig")
	proto.RegisterType((*PortQosConfig)(nil), "iotamodel.PortQosConfig")
	proto.RegisterType((*PortQueuingConfig)(nil), "iotamodel.PortQueuingConfig")
	proto.RegisterType((*SwitchMsg)(nil), "iotamodel.SwitchMsg")
	proto.RegisterType((*TestBedNode)(nil), "iotamodel.TestBedNode")
	proto.RegisterType((*EntityCopyMsg)(nil), "iotamodel.EntityCopyMsg")
	proto.RegisterType((*DownloadAssetsMsg)(nil), "iotamodel.DownloadAssetsMsg")
	proto.RegisterType((*PrepareWorkspaceMsg)(nil), "iotamodel.PrepareWorkspaceMsg")
	proto.RegisterEnum("iotamodel.Op", Op_name, Op_value)
	proto.RegisterEnum("iotamodel.PersonalityType", PersonalityType_name, PersonalityType_value)
	proto.RegisterEnum("iotamodel.EntityType", EntityType_name, EntityType_value)
	proto.RegisterEnum("iotamodel.InterfaceType", InterfaceType_name, InterfaceType_value)
	proto.RegisterEnum("iotamodel.WorkloadType", WorkloadType_name, WorkloadType_value)
	proto.RegisterEnum("iotamodel.TriggerOp", TriggerOp_name, TriggerOp_value)
	proto.RegisterEnum("iotamodel.TriggerMode", TriggerMode_name, TriggerMode_value)
	proto.RegisterEnum("iotamodel.CommandMode", CommandMode_name, CommandMode_value)
	proto.RegisterEnum("iotamodel.WorkloadMoveType", WorkloadMoveType_name, WorkloadMoveType_value)
	proto.RegisterEnum("iotamodel.NetworkType", NetworkType_name, NetworkType_value)
	proto.RegisterEnum("iotamodel.SwitchOp", SwitchOp_name, SwitchOp_value)
	proto.RegisterEnum("iotamodel.TestBedNodeType", TestBedNodeType_name, TestBedNodeType_value)
	proto.RegisterEnum("iotamodel.TestBedNodeOs", TestBedNodeOs_name, TestBedNodeOs_value)
	proto.RegisterEnum("iotamodel.CopyDirection", CopyDirection_name, CopyDirection_value)
	proto.RegisterEnum("iotamodel.NodeHealth_HealthCode", NodeHealth_HealthCode_name, NodeHealth_HealthCode_value)
	proto.RegisterEnum("iotamodel.DataSwitch_Speed", DataSwitch_Speed_name, DataSwitch_Speed_value)
	proto.RegisterEnum("iotamodel.License_Type", License_Type_name, License_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TopologyApi service

type TopologyApiClient interface {
	// InstallImage installs the image on testbed nodes
	InstallImage(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error)
	// InitTestBed Allocate Data VLANs, copy over built artifacts and starts IOTA Agent on all the nodes
	InitTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error)
	// GetTestBed get the information about the testbed (maily to get allocated vlans)
	GetTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error)
	// CleanUpTestBed will ensure that any state left behind from the previous run is appropriately cleaned up.
	CleanUpTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error)
	// InitNodes initialize the list of nodes specified which might be added on the fly
	InitNodes(ctx context.Context, in *TestNodesMsg, opts ...grpc.CallOption) (*TestNodesMsg, error)
	// CleanNodes removes the nodes from the topology on the fly
	CleanNodes(ctx context.Context, in *TestNodesMsg, opts ...grpc.CallOption) (*TestNodesMsg, error)
	// DoSwitchOperation do switch operation
	DoSwitchOperation(ctx context.Context, in *SwitchMsg, opts ...grpc.CallOption) (*SwitchMsg, error)
	// AddNodes brings up the nodes with their corresponding personalities
	AddNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	// Load Node will save, reboot and load context
	ReloadNodes(ctx context.Context, in *ReloadMsg, opts ...grpc.CallOption) (*ReloadMsg, error)
	IpmiNodeAction(ctx context.Context, in *ReloadMsg, opts ...grpc.CallOption) (*ReloadMsg, error)
	// DeleteNodes removes a node from the e2e cluster
	DeleteNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	// GetNodes returns the topology information of all the nodes.
	GetNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	// SaveNodes saves node and download state from host to runner/localhost
	SaveNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	// Upload node-state from  runner/localhost to remote host/node
	RestoreNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	// AddWorkloads brings up a workload type on a given node
	AddWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error)
	// GetWorkloads gets current list of workloads from iota server
	GetWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error)
	// DeleteWorkloads deletes a given workload
	DeleteWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error)
	// Trigger invokes the workload's trigger. It could be ping, start client/server etc..
	Trigger(ctx context.Context, in *TriggerMsg, opts ...grpc.CallOption) (*TriggerMsg, error)
	// CheckClusterHealth returns the cluster health
	CheckClusterHealth(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*ClusterHealthMsg, error)
	// EntityCopy copies files in/out from entities
	EntityCopy(ctx context.Context, in *EntityCopyMsg, opts ...grpc.CallOption) (*EntityCopyMsg, error)
	// DownloadAssets downloads assets from minio.test.pensando.io
	DownloadAssets(ctx context.Context, in *DownloadAssetsMsg, opts ...grpc.CallOption) (*DownloadAssetsMsg, error)
	// WorkloadMoveMsg moves workloads
	MoveWorkloads(ctx context.Context, in *WorkloadMoveMsg, opts ...grpc.CallOption) (*WorkloadMoveMsg, error)
	// Add  Netowrks
	AddNetworks(ctx context.Context, in *NetworksMsg, opts ...grpc.CallOption) (*NetworksMsg, error)
	// Remove  Netowrks
	RemoveNetworks(ctx context.Context, in *NetworksMsg, opts ...grpc.CallOption) (*NetworksMsg, error)
}

type topologyApiClient struct {
	cc *grpc.ClientConn
}

func NewTopologyApiClient(cc *grpc.ClientConn) TopologyApiClient {
	return &topologyApiClient{cc}
}

func (c *topologyApiClient) InstallImage(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error) {
	out := new(TestBedMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/InstallImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) InitTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error) {
	out := new(TestBedMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/InitTestBed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) GetTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error) {
	out := new(TestBedMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/GetTestBed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) CleanUpTestBed(ctx context.Context, in *TestBedMsg, opts ...grpc.CallOption) (*TestBedMsg, error) {
	out := new(TestBedMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/CleanUpTestBed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) InitNodes(ctx context.Context, in *TestNodesMsg, opts ...grpc.CallOption) (*TestNodesMsg, error) {
	out := new(TestNodesMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/InitNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) CleanNodes(ctx context.Context, in *TestNodesMsg, opts ...grpc.CallOption) (*TestNodesMsg, error) {
	out := new(TestNodesMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/CleanNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) DoSwitchOperation(ctx context.Context, in *SwitchMsg, opts ...grpc.CallOption) (*SwitchMsg, error) {
	out := new(SwitchMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/DoSwitchOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) AddNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/AddNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) ReloadNodes(ctx context.Context, in *ReloadMsg, opts ...grpc.CallOption) (*ReloadMsg, error) {
	out := new(ReloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/ReloadNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) IpmiNodeAction(ctx context.Context, in *ReloadMsg, opts ...grpc.CallOption) (*ReloadMsg, error) {
	out := new(ReloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/IpmiNodeAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) DeleteNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/DeleteNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) GetNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/GetNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) SaveNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/SaveNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) RestoreNodes(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/RestoreNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) AddWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error) {
	out := new(WorkloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/AddWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) GetWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error) {
	out := new(WorkloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/GetWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) DeleteWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error) {
	out := new(WorkloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/DeleteWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) Trigger(ctx context.Context, in *TriggerMsg, opts ...grpc.CallOption) (*TriggerMsg, error) {
	out := new(TriggerMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) CheckClusterHealth(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*ClusterHealthMsg, error) {
	out := new(ClusterHealthMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/CheckClusterHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) EntityCopy(ctx context.Context, in *EntityCopyMsg, opts ...grpc.CallOption) (*EntityCopyMsg, error) {
	out := new(EntityCopyMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/EntityCopy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) DownloadAssets(ctx context.Context, in *DownloadAssetsMsg, opts ...grpc.CallOption) (*DownloadAssetsMsg, error) {
	out := new(DownloadAssetsMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/DownloadAssets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) MoveWorkloads(ctx context.Context, in *WorkloadMoveMsg, opts ...grpc.CallOption) (*WorkloadMoveMsg, error) {
	out := new(WorkloadMoveMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/MoveWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) AddNetworks(ctx context.Context, in *NetworksMsg, opts ...grpc.CallOption) (*NetworksMsg, error) {
	out := new(NetworksMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/AddNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyApiClient) RemoveNetworks(ctx context.Context, in *NetworksMsg, opts ...grpc.CallOption) (*NetworksMsg, error) {
	out := new(NetworksMsg)
	err := grpc.Invoke(ctx, "/iotamodel.TopologyApi/RemoveNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TopologyApi service

type TopologyApiServer interface {
	// InstallImage installs the image on testbed nodes
	InstallImage(context.Context, *TestBedMsg) (*TestBedMsg, error)
	// InitTestBed Allocate Data VLANs, copy over built artifacts and starts IOTA Agent on all the nodes
	InitTestBed(context.Context, *TestBedMsg) (*TestBedMsg, error)
	// GetTestBed get the information about the testbed (maily to get allocated vlans)
	GetTestBed(context.Context, *TestBedMsg) (*TestBedMsg, error)
	// CleanUpTestBed will ensure that any state left behind from the previous run is appropriately cleaned up.
	CleanUpTestBed(context.Context, *TestBedMsg) (*TestBedMsg, error)
	// InitNodes initialize the list of nodes specified which might be added on the fly
	InitNodes(context.Context, *TestNodesMsg) (*TestNodesMsg, error)
	// CleanNodes removes the nodes from the topology on the fly
	CleanNodes(context.Context, *TestNodesMsg) (*TestNodesMsg, error)
	// DoSwitchOperation do switch operation
	DoSwitchOperation(context.Context, *SwitchMsg) (*SwitchMsg, error)
	// AddNodes brings up the nodes with their corresponding personalities
	AddNodes(context.Context, *NodeMsg) (*NodeMsg, error)
	// Load Node will save, reboot and load context
	ReloadNodes(context.Context, *ReloadMsg) (*ReloadMsg, error)
	IpmiNodeAction(context.Context, *ReloadMsg) (*ReloadMsg, error)
	// DeleteNodes removes a node from the e2e cluster
	DeleteNodes(context.Context, *NodeMsg) (*NodeMsg, error)
	// GetNodes returns the topology information of all the nodes.
	GetNodes(context.Context, *NodeMsg) (*NodeMsg, error)
	// SaveNodes saves node and download state from host to runner/localhost
	SaveNodes(context.Context, *NodeMsg) (*NodeMsg, error)
	// Upload node-state from  runner/localhost to remote host/node
	RestoreNodes(context.Context, *NodeMsg) (*NodeMsg, error)
	// AddWorkloads brings up a workload type on a given node
	AddWorkloads(context.Context, *WorkloadMsg) (*WorkloadMsg, error)
	// GetWorkloads gets current list of workloads from iota server
	GetWorkloads(context.Context, *WorkloadMsg) (*WorkloadMsg, error)
	// DeleteWorkloads deletes a given workload
	DeleteWorkloads(context.Context, *WorkloadMsg) (*WorkloadMsg, error)
	// Trigger invokes the workload's trigger. It could be ping, start client/server etc..
	Trigger(context.Context, *TriggerMsg) (*TriggerMsg, error)
	// CheckClusterHealth returns the cluster health
	CheckClusterHealth(context.Context, *NodeMsg) (*ClusterHealthMsg, error)
	// EntityCopy copies files in/out from entities
	EntityCopy(context.Context, *EntityCopyMsg) (*EntityCopyMsg, error)
	// DownloadAssets downloads assets from minio.test.pensando.io
	DownloadAssets(context.Context, *DownloadAssetsMsg) (*DownloadAssetsMsg, error)
	// WorkloadMoveMsg moves workloads
	MoveWorkloads(context.Context, *WorkloadMoveMsg) (*WorkloadMoveMsg, error)
	// Add  Netowrks
	AddNetworks(context.Context, *NetworksMsg) (*NetworksMsg, error)
	// Remove  Netowrks
	RemoveNetworks(context.Context, *NetworksMsg) (*NetworksMsg, error)
}

func RegisterTopologyApiServer(s *grpc.Server, srv TopologyApiServer) {
	s.RegisterService(&_TopologyApi_serviceDesc, srv)
}

func _TopologyApi_InstallImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestBedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).InstallImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/InstallImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).InstallImage(ctx, req.(*TestBedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_InitTestBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestBedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).InitTestBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/InitTestBed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).InitTestBed(ctx, req.(*TestBedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_GetTestBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestBedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).GetTestBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/GetTestBed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).GetTestBed(ctx, req.(*TestBedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_CleanUpTestBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestBedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).CleanUpTestBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/CleanUpTestBed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).CleanUpTestBed(ctx, req.(*TestBedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_InitNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestNodesMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).InitNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/InitNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).InitNodes(ctx, req.(*TestNodesMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_CleanNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestNodesMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).CleanNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/CleanNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).CleanNodes(ctx, req.(*TestNodesMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_DoSwitchOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).DoSwitchOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/DoSwitchOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).DoSwitchOperation(ctx, req.(*SwitchMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_AddNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).AddNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/AddNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).AddNodes(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_ReloadNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).ReloadNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/ReloadNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).ReloadNodes(ctx, req.(*ReloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_IpmiNodeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).IpmiNodeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/IpmiNodeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).IpmiNodeAction(ctx, req.(*ReloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).DeleteNodes(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).GetNodes(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_SaveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).SaveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/SaveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).SaveNodes(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_RestoreNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).RestoreNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/RestoreNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).RestoreNodes(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_AddWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).AddWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/AddWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).AddWorkloads(ctx, req.(*WorkloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_GetWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).GetWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/GetWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).GetWorkloads(ctx, req.(*WorkloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_DeleteWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).DeleteWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/DeleteWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).DeleteWorkloads(ctx, req.(*WorkloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).Trigger(ctx, req.(*TriggerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_CheckClusterHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).CheckClusterHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/CheckClusterHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).CheckClusterHealth(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_EntityCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityCopyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).EntityCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/EntityCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).EntityCopy(ctx, req.(*EntityCopyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_DownloadAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAssetsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).DownloadAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/DownloadAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).DownloadAssets(ctx, req.(*DownloadAssetsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_MoveWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMoveMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).MoveWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/MoveWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).MoveWorkloads(ctx, req.(*WorkloadMoveMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_AddNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworksMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).AddNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/AddNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).AddNetworks(ctx, req.(*NetworksMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyApi_RemoveNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworksMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyApiServer).RemoveNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.TopologyApi/RemoveNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyApiServer).RemoveNetworks(ctx, req.(*NetworksMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopologyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotamodel.TopologyApi",
	HandlerType: (*TopologyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallImage",
			Handler:    _TopologyApi_InstallImage_Handler,
		},
		{
			MethodName: "InitTestBed",
			Handler:    _TopologyApi_InitTestBed_Handler,
		},
		{
			MethodName: "GetTestBed",
			Handler:    _TopologyApi_GetTestBed_Handler,
		},
		{
			MethodName: "CleanUpTestBed",
			Handler:    _TopologyApi_CleanUpTestBed_Handler,
		},
		{
			MethodName: "InitNodes",
			Handler:    _TopologyApi_InitNodes_Handler,
		},
		{
			MethodName: "CleanNodes",
			Handler:    _TopologyApi_CleanNodes_Handler,
		},
		{
			MethodName: "DoSwitchOperation",
			Handler:    _TopologyApi_DoSwitchOperation_Handler,
		},
		{
			MethodName: "AddNodes",
			Handler:    _TopologyApi_AddNodes_Handler,
		},
		{
			MethodName: "ReloadNodes",
			Handler:    _TopologyApi_ReloadNodes_Handler,
		},
		{
			MethodName: "IpmiNodeAction",
			Handler:    _TopologyApi_IpmiNodeAction_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _TopologyApi_DeleteNodes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _TopologyApi_GetNodes_Handler,
		},
		{
			MethodName: "SaveNodes",
			Handler:    _TopologyApi_SaveNodes_Handler,
		},
		{
			MethodName: "RestoreNodes",
			Handler:    _TopologyApi_RestoreNodes_Handler,
		},
		{
			MethodName: "AddWorkloads",
			Handler:    _TopologyApi_AddWorkloads_Handler,
		},
		{
			MethodName: "GetWorkloads",
			Handler:    _TopologyApi_GetWorkloads_Handler,
		},
		{
			MethodName: "DeleteWorkloads",
			Handler:    _TopologyApi_DeleteWorkloads_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _TopologyApi_Trigger_Handler,
		},
		{
			MethodName: "CheckClusterHealth",
			Handler:    _TopologyApi_CheckClusterHealth_Handler,
		},
		{
			MethodName: "EntityCopy",
			Handler:    _TopologyApi_EntityCopy_Handler,
		},
		{
			MethodName: "DownloadAssets",
			Handler:    _TopologyApi_DownloadAssets_Handler,
		},
		{
			MethodName: "MoveWorkloads",
			Handler:    _TopologyApi_MoveWorkloads_Handler,
		},
		{
			MethodName: "AddNetworks",
			Handler:    _TopologyApi_AddNetworks_Handler,
		},
		{
			MethodName: "RemoveNetworks",
			Handler:    _TopologyApi_RemoveNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topo_svc.proto",
}

func (m *NodeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n1, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NodeOp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NodeOp))
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MakeCluster {
		dAtA[i] = 0x20
		i++
		if m.MakeCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClusterDone {
		dAtA[i] = 0x28
		i++
		if m.ClusterDone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AllocatedVlans) > 0 {
		dAtA3 := make([]byte, len(m.AllocatedVlans)*10)
		var j2 int
		for _, num := range m.AllocatedVlans {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ReloadMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReloadMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n4, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.NodeMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NodeMsg.Size()))
		n5, err := m.NodeMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.SkipRestore {
		dAtA[i] = 0x18
		i++
		if m.SkipRestore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RestartMethod) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.RestartMethod)))
		i += copy(dAtA[i:], m.RestartMethod)
	}
	if m.UseNcsi {
		dAtA[i] = 0x28
		i++
		if m.UseNcsi {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *VmwareESXConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmwareESXConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.IpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddress)))
		i += copy(dAtA[i:], m.IpAddress)
	}
	if len(m.SslThumbprint) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.SslThumbprint)))
		i += copy(dAtA[i:], m.SslThumbprint)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *VcenterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VcenterConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EsxConfigs) > 0 {
		for _, msg := range m.EsxConfigs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DcName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DcName)))
		i += copy(dAtA[i:], m.DcName)
	}
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.DistributedSwitch) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DistributedSwitch)))
		i += copy(dAtA[i:], m.DistributedSwitch)
	}
	if m.PvlanStart != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PvlanStart))
	}
	if m.PvlanEnd != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PvlanEnd))
	}
	return i, nil
}

func (m *NaplesSimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesSimInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeUuid)))
		i += copy(dAtA[i:], m.NodeUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.IpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddress)))
		i += copy(dAtA[i:], m.IpAddress)
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.IpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddress)))
		i += copy(dAtA[i:], m.IpAddress)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NodeInfo != nil {
		nn6, err := m.NodeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.NodeStatus != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NodeStatus.Size()))
		n7, err := m.NodeStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.StartupScript) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.StartupScript)))
		i += copy(dAtA[i:], m.StartupScript)
	}
	if m.EsxConfig != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.EsxConfig.Size()))
		n8, err := m.EsxConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Os != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Os))
	}
	if m.Reload {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Reload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RestartMethod) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.RestartMethod)))
		i += copy(dAtA[i:], m.RestartMethod)
	}
	return i, nil
}

func (m *Node_NaplesConfigs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NaplesConfigs != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NaplesConfigs.Size()))
		n9, err := m.NaplesConfigs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Node_VeniceConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VeniceConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.VeniceConfig.Size()))
		n10, err := m.VeniceConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Node_ThirdPartyNicConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ThirdPartyNicConfig != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ThirdPartyNicConfig.Size()))
		n11, err := m.ThirdPartyNicConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Node_NaplesMultiSimConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NaplesMultiSimConfig != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NaplesMultiSimConfig.Size()))
		n12, err := m.NaplesMultiSimConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Node_NaplesControlSimConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NaplesControlSimConfig != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NaplesControlSimConfig.Size()))
		n13, err := m.NaplesControlSimConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Node_VcenterConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VcenterConfig != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.VcenterConfig.Size()))
		n14, err := m.VcenterConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ApcInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApcInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *NaplesMultiSimConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesMultiSimConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumInstances != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NumInstances))
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.IpAddrRange) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddrRange)))
		i += copy(dAtA[i:], m.IpAddrRange)
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.NicType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicType)))
		i += copy(dAtA[i:], m.NicType)
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SimsInfo) > 0 {
		for _, msg := range m.SimsInfo {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NaplesControlSimConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesControlSimConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControlIntf) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIntf)))
		i += copy(dAtA[i:], m.ControlIntf)
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ControlIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIp)))
		i += copy(dAtA[i:], m.ControlIp)
	}
	if len(m.NodeUuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeUuid)))
		i += copy(dAtA[i:], m.NodeUuid)
	}
	return i, nil
}

func (m *NaplesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControlIntf) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIntf)))
		i += copy(dAtA[i:], m.ControlIntf)
	}
	if len(m.ControlIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIp)))
		i += copy(dAtA[i:], m.ControlIp)
	}
	if len(m.DataIntfs) > 0 {
		for _, s := range m.DataIntfs {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NaplesIpAddress) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesIpAddress)))
		i += copy(dAtA[i:], m.NaplesIpAddress)
	}
	if len(m.NaplesSecondaryIpAddress) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesSecondaryIpAddress)))
		i += copy(dAtA[i:], m.NaplesSecondaryIpAddress)
	}
	if len(m.NaplesUsername) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesUsername)))
		i += copy(dAtA[i:], m.NaplesUsername)
	}
	if len(m.NaplesPassword) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesPassword)))
		i += copy(dAtA[i:], m.NaplesPassword)
	}
	if len(m.NicType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicType)))
		i += copy(dAtA[i:], m.NicType)
	}
	if len(m.NicHint) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicHint)))
		i += copy(dAtA[i:], m.NicHint)
	}
	if len(m.NodeUuid) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeUuid)))
		i += copy(dAtA[i:], m.NodeUuid)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *NaplesConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NaplesConfigs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThirdPartyNicConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThirdPartyNicConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NicType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicType)))
		i += copy(dAtA[i:], m.NicType)
	}
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MellanoxConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MellanoxConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *BroadcomConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcomConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *IntelConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntelConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *VenicePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VenicePeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.IpAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddress)))
		i += copy(dAtA[i:], m.IpAddress)
	}
	return i, nil
}

func (m *VeniceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VeniceConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControlIntf) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIntf)))
		i += copy(dAtA[i:], m.ControlIntf)
	}
	if len(m.ControlIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIp)))
		i += copy(dAtA[i:], m.ControlIp)
	}
	if len(m.VenicePeers) > 0 {
		for _, msg := range m.VenicePeers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorkloadMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n15, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.WorkloadOp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.WorkloadOp))
	}
	if len(m.Workloads) > 0 {
		for _, msg := range m.Workloads {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DvsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DvsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SwitchName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.SwitchName)))
		i += copy(dAtA[i:], m.SwitchName)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	return i, nil
}

func (m *ExposedPorts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExposedPorts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Port) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	return i, nil
}

func (m *Workload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkloadName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.WorkloadName)))
		i += copy(dAtA[i:], m.WorkloadName)
	}
	if m.WorkloadType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.WorkloadType))
	}
	if len(m.WorkloadImage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.WorkloadImage)))
		i += copy(dAtA[i:], m.WorkloadImage)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if m.EncapVlan != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.EncapVlan))
	}
	if m.SecondaryEncapVlan != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.SecondaryEncapVlan))
	}
	if len(m.IpPrefix) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpPrefix)))
		i += copy(dAtA[i:], m.IpPrefix)
	}
	if len(m.Ipv6Prefix) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Ipv6Prefix)))
		i += copy(dAtA[i:], m.Ipv6Prefix)
	}
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.Interface) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Interface)))
		i += copy(dAtA[i:], m.Interface)
	}
	if len(m.ParentInterface) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ParentInterface)))
		i += copy(dAtA[i:], m.ParentInterface)
	}
	if m.InterfaceType != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.InterfaceType))
	}
	if m.PinnedPort != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PinnedPort))
	}
	if m.UplinkVlan != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.UplinkVlan))
	}
	if m.WorkloadStatus != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.WorkloadStatus.Size()))
		n16, err := m.WorkloadStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.SecIpPrefix) > 0 {
		for _, s := range m.SecIpPrefix {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SecIpv6Prefix) > 0 {
		for _, s := range m.SecIpv6Prefix {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Cpus != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Cpus))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Memory))
	}
	if len(m.MgmtIp) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.MgmtIp)))
		i += copy(dAtA[i:], m.MgmtIp)
	}
	if m.Dvs != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Dvs.Size()))
		n17, err := m.Dvs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.SwitchName) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.SwitchName)))
		i += copy(dAtA[i:], m.SwitchName)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.ExposedPorts) > 0 {
		for _, msg := range m.ExposedPorts {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TriggerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n18, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.TriggerOp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.TriggerOp))
	}
	if m.TriggerMode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.TriggerMode))
	}
	if len(m.Commands) > 0 {
		for _, msg := range m.Commands {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Mode))
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.EntityName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.EntityName)))
		i += copy(dAtA[i:], m.EntityName)
	}
	if m.ForegroundTimeout != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ForegroundTimeout))
	}
	if len(m.RunningDir) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.RunningDir)))
		i += copy(dAtA[i:], m.RunningDir)
	}
	if len(m.Stdout) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Stdout)))
		i += copy(dAtA[i:], m.Stdout)
	}
	if len(m.Stderr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Stderr)))
		i += copy(dAtA[i:], m.Stderr)
	}
	if m.ExitCode != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ExitCode))
	}
	if len(m.Handle) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	if m.TimedOut {
		dAtA[i] = 0x58
		i++
		if m.TimedOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StdoutOnErr {
		dAtA[i] = 0x60
		i++
		if m.StdoutOnErr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StderrOnErr {
		dAtA[i] = 0x68
		i++
		if m.StderrOnErr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RetriesOnFailure != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.RetriesOnFailure))
	}
	return i, nil
}

func (m *WorkloadMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.SrcNodeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.SrcNodeName)))
		i += copy(dAtA[i:], m.SrcNodeName)
	}
	if len(m.DstNodeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DstNodeName)))
		i += copy(dAtA[i:], m.DstNodeName)
	}
	if len(m.WorkloadName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.WorkloadName)))
		i += copy(dAtA[i:], m.WorkloadName)
	}
	if m.VlanOverride != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.VlanOverride))
	}
	if m.CurrentVlan != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.CurrentVlan))
	}
	if len(m.SwitchName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.SwitchName)))
		i += copy(dAtA[i:], m.SwitchName)
	}
	if m.ApiResponse != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n19, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *WorkloadMoveMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadMoveMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n20, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.WorkloadMoves) > 0 {
		for _, msg := range m.WorkloadMoves {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OrchestratorNode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.OrchestratorNode)))
		i += copy(dAtA[i:], m.OrchestratorNode)
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Vlan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Vlan))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if m.Dhcp {
		dAtA[i] = 0x30
		i++
		if m.Dhcp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NetworksMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworksMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n21, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Network) > 0 {
		for _, msg := range m.Network {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Switch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Switch)))
		i += copy(dAtA[i:], m.Switch)
	}
	if len(m.OrchestratorNode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.OrchestratorNode)))
		i += copy(dAtA[i:], m.OrchestratorNode)
	}
	return i, nil
}

func (m *ClusterHealthMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterHealthMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n22, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Health) > 0 {
		for _, msg := range m.Health {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeHealth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if m.ClusterDone {
		dAtA[i] = 0x10
		i++
		if m.ClusterDone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HealthCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.HealthCode))
	}
	return i, nil
}

func (m *NetworkQosClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkQosClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Mtu))
	}
	if m.PausePfcCos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PausePfcCos))
	}
	return i, nil
}

func (m *NetworkPolicyQos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPolicyQos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.QosClasses) > 0 {
		for _, msg := range m.QosClasses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkDscpClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkDscpClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Dscp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Dscp)))
		i += copy(dAtA[i:], m.Dscp)
	}
	if m.Cos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Cos))
	}
	return i, nil
}

func (m *NetworkDscpPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkDscpPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DscpClasses) > 0 {
		for _, msg := range m.DscpClasses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkQueueClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkQueueClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Priority))
	}
	if m.Percent != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Percent))
	}
	return i, nil
}

func (m *NetworkQueuePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkQueuePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.QueueClasses) > 0 {
		for _, msg := range m.QueueClasses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DataSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSwitch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Speed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Speed))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Mtu))
	}
	if m.FlowControlReceive {
		dAtA[i] = 0x38
		i++
		if m.FlowControlReceive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FlowControlSend {
		dAtA[i] = 0x40
		i++
		if m.FlowControlSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Qos != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Qos.Size()))
		n23, err := m.Qos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.IgmpDisabled {
		dAtA[i] = 0x50
		i++
		if m.IgmpDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dscp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Dscp.Size()))
		n24, err := m.Dscp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.Queue != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Queue.Size()))
		n25, err := m.Queue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *TestBedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestBedMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n26, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.NaplesSimImage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesSimImage)))
		i += copy(dAtA[i:], m.NaplesSimImage)
	}
	if len(m.NaplesImage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NaplesImage)))
		i += copy(dAtA[i:], m.NaplesImage)
	}
	if len(m.VeniceImage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.VeniceImage)))
		i += copy(dAtA[i:], m.VeniceImage)
	}
	if len(m.DriverSources) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DriverSources)))
		i += copy(dAtA[i:], m.DriverSources)
	}
	if len(m.AllocatedVlans) > 0 {
		dAtA28 := make([]byte, len(m.AllocatedVlans)*10)
		var j27 int
		for _, num := range m.AllocatedVlans {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(j27))
		i += copy(dAtA[i:], dAtA28[:j27])
	}
	if m.NativeVlan != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NativeVlan))
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.TestbedId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.TestbedId))
	}
	if len(m.DataSwitches) > 0 {
		for _, msg := range m.DataSwitches {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RebootNodes {
		dAtA[i] = 0x68
		i++
		if m.RebootNodes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Licenses) > 0 {
		for _, msg := range m.Licenses {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TestbedJsonFile) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.TestbedJsonFile)))
		i += copy(dAtA[i:], m.TestbedJsonFile)
	}
	return i, nil
}

func (m *TestNodesMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestNodesMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n29, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.RebootNodes {
		dAtA[i] = 0x28
		i++
		if m.RebootNodes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Licenses) > 0 {
		for _, msg := range m.Licenses {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unset {
		dAtA[i] = 0x8
		i++
		if m.Unset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.VlanRange) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.VlanRange)))
		i += copy(dAtA[i:], m.VlanRange)
	}
	if m.NativeVlan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.NativeVlan))
	}
	return i, nil
}

func (m *SwitchFlapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchFlapInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Count))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Interval))
	}
	if m.DownTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.DownTime))
	}
	return i, nil
}

func (m *PortPauseConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortPauseConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PortPfcConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortPfcConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PortQosConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortQosConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Params) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Params)))
		i += copy(dAtA[i:], m.Params)
	}
	return i, nil
}

func (m *PortQueuingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortQueuingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Params) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Params)))
		i += copy(dAtA[i:], m.Params)
	}
	return i, nil
}

func (m *SwitchMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwitchMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n30, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Op != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Op))
	}
	if m.OpInfo != nil {
		nn31, err := m.OpInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn31
	}
	if len(m.DataSwitches) > 0 {
		for _, msg := range m.DataSwitches {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTopoSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SwitchInfo != nil {
		nn32, err := m.SwitchInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	if m.PauseInfo != nil {
		nn33, err := m.PauseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	if m.PfcInfo != nil {
		nn34, err := m.PfcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	if m.PortQosInfo != nil {
		nn35, err := m.PortQosInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	if m.PortQueuingInfo != nil {
		nn36, err := m.PortQueuingInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	return i, nil
}

func (m *SwitchMsg_FlapInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlapInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.FlapInfo.Size()))
		n37, err := m.FlapInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *SwitchMsg_VlanConfig) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VlanConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.VlanConfig.Size()))
		n38, err := m.VlanConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *SwitchMsg_PortPause) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortPause != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PortPause.Size()))
		n39, err := m.PortPause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *SwitchMsg_PortPfc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortPfc != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PortPfc.Size()))
		n40, err := m.PortPfc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *SwitchMsg_PortQos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortQos != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PortQos.Size()))
		n41, err := m.PortQos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *SwitchMsg_PortQueuing) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortQueuing != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.PortQueuing.Size()))
		n42, err := m.PortQueuing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *TestBedNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestBedNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.IpAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.IpAddress)))
		i += copy(dAtA[i:], m.IpAddress)
	}
	if len(m.CimcIpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.CimcIpAddress)))
		i += copy(dAtA[i:], m.CimcIpAddress)
	}
	if len(m.CimcUsername) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.CimcUsername)))
		i += copy(dAtA[i:], m.CimcUsername)
	}
	if len(m.CimcPassword) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.CimcPassword)))
		i += copy(dAtA[i:], m.CimcPassword)
	}
	if len(m.EsxUsername) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.EsxUsername)))
		i += copy(dAtA[i:], m.EsxUsername)
	}
	if len(m.EsxPassword) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.EsxPassword)))
		i += copy(dAtA[i:], m.EsxPassword)
	}
	if len(m.NicIpAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicIpAddress)))
		i += copy(dAtA[i:], m.NicIpAddress)
	}
	if len(m.NicConsoleIpAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicConsoleIpAddress)))
		i += copy(dAtA[i:], m.NicConsoleIpAddress)
	}
	if len(m.NicConsolePort) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicConsolePort)))
		i += copy(dAtA[i:], m.NicConsolePort)
	}
	if len(m.NicConsoleUsername) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicConsoleUsername)))
		i += copy(dAtA[i:], m.NicConsoleUsername)
	}
	if len(m.NicConsolePassword) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicConsolePassword)))
		i += copy(dAtA[i:], m.NicConsolePassword)
	}
	if len(m.NicUsername) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicUsername)))
		i += copy(dAtA[i:], m.NicUsername)
	}
	if len(m.NicPassword) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicPassword)))
		i += copy(dAtA[i:], m.NicPassword)
	}
	if len(m.InitScript) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.InitScript)))
		i += copy(dAtA[i:], m.InitScript)
	}
	if len(m.ControlIntf) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ControlIntf)))
		i += copy(dAtA[i:], m.ControlIntf)
	}
	if len(m.SwitchPortIds) > 0 {
		dAtA44 := make([]byte, len(m.SwitchPortIds)*10)
		var j43 int
		for _, num := range m.SwitchPortIds {
			for num >= 1<<7 {
				dAtA44[j43] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j43++
			}
			dAtA44[j43] = uint8(num)
			j43++
		}
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(j43))
		i += copy(dAtA[i:], dAtA44[:j43])
	}
	if m.Os != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Os))
	}
	if len(m.EsxCtrlNodeIpAddress) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.EsxCtrlNodeIpAddress)))
		i += copy(dAtA[i:], m.EsxCtrlNodeIpAddress)
	}
	if len(m.NicUuid) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NicUuid)))
		i += copy(dAtA[i:], m.NicUuid)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.ServerType) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ServerType)))
		i += copy(dAtA[i:], m.ServerType)
	}
	if len(m.License) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if m.ApcInfo != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApcInfo.Size()))
		n45, err := m.ApcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if len(m.MgmtIntf) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.MgmtIntf)))
		i += copy(dAtA[i:], m.MgmtIntf)
	}
	if len(m.DcName) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DcName)))
		i += copy(dAtA[i:], m.DcName)
	}
	if len(m.Switch) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.Switch)))
		i += copy(dAtA[i:], m.Switch)
	}
	if m.NoMgmt {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.NoMgmt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CimcNcsiIp) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.CimcNcsiIp)))
		i += copy(dAtA[i:], m.CimcNcsiIp)
	}
	if m.AutoDiscoverOnInstall {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.AutoDiscoverOnInstall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.InstanceName) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.InstanceName)))
		i += copy(dAtA[i:], m.InstanceName)
	}
	return i, nil
}

func (m *EntityCopyMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityCopyMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n46, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.Direction != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.Direction))
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if len(m.EntityName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.EntityName)))
		i += copy(dAtA[i:], m.EntityName)
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DestDir) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DestDir)))
		i += copy(dAtA[i:], m.DestDir)
	}
	return i, nil
}

func (m *DownloadAssetsMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadAssetsMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n47, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if len(m.AssetName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.AssetName)))
		i += copy(dAtA[i:], m.AssetName)
	}
	if len(m.ReleaseVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ReleaseVersion)))
		i += copy(dAtA[i:], m.ReleaseVersion)
	}
	if len(m.ParentDir) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ParentDir)))
		i += copy(dAtA[i:], m.ParentDir)
	}
	return i, nil
}

func (m *PrepareWorkspaceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareWorkspaceMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(m.ApiResponse.Size()))
		n48, err := m.ApiResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if len(m.FwVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.FwVersion)))
		i += copy(dAtA[i:], m.FwVersion)
	}
	if len(m.DriverVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.DriverVersion)))
		i += copy(dAtA[i:], m.DriverVersion)
	}
	if len(m.VeniceVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.VeniceVersion)))
		i += copy(dAtA[i:], m.VeniceVersion)
	}
	if len(m.ParentDir) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTopoSvc(dAtA, i, uint64(len(m.ParentDir)))
		i += copy(dAtA[i:], m.ParentDir)
	}
	return i, nil
}

func encodeVarintTopoSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.NodeOp != 0 {
		n += 1 + sovTopoSvc(uint64(m.NodeOp))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.MakeCluster {
		n += 2
	}
	if m.ClusterDone {
		n += 2
	}
	if len(m.AllocatedVlans) > 0 {
		l = 0
		for _, e := range m.AllocatedVlans {
			l += sovTopoSvc(uint64(e))
		}
		n += 1 + sovTopoSvc(uint64(l)) + l
	}
	return n
}

func (m *ReloadMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.NodeMsg != nil {
		l = m.NodeMsg.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.SkipRestore {
		n += 2
	}
	l = len(m.RestartMethod)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.UseNcsi {
		n += 2
	}
	return n
}

func (m *Entity) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopoSvc(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *VmwareESXConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.SslThumbprint)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *VcenterConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.EsxConfigs) > 0 {
		for _, e := range m.EsxConfigs {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.DcName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.DistributedSwitch)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.PvlanStart != 0 {
		n += 1 + sovTopoSvc(uint64(m.PvlanStart))
	}
	if m.PvlanEnd != 0 {
		n += 1 + sovTopoSvc(uint64(m.PvlanEnd))
	}
	return n
}

func (m *NaplesSimInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeUuid)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopoSvc(uint64(m.Type))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.NodeInfo != nil {
		n += m.NodeInfo.Size()
	}
	if m.NodeStatus != nil {
		l = m.NodeStatus.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.StartupScript)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.EsxConfig != nil {
		l = m.EsxConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Os != 0 {
		n += 2 + sovTopoSvc(uint64(m.Os))
	}
	if m.Reload {
		n += 3
	}
	l = len(m.RestartMethod)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *Node_NaplesConfigs) Size() (n int) {
	var l int
	_ = l
	if m.NaplesConfigs != nil {
		l = m.NaplesConfigs.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *Node_VeniceConfig) Size() (n int) {
	var l int
	_ = l
	if m.VeniceConfig != nil {
		l = m.VeniceConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *Node_ThirdPartyNicConfig) Size() (n int) {
	var l int
	_ = l
	if m.ThirdPartyNicConfig != nil {
		l = m.ThirdPartyNicConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *Node_NaplesMultiSimConfig) Size() (n int) {
	var l int
	_ = l
	if m.NaplesMultiSimConfig != nil {
		l = m.NaplesMultiSimConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *Node_NaplesControlSimConfig) Size() (n int) {
	var l int
	_ = l
	if m.NaplesControlSimConfig != nil {
		l = m.NaplesControlSimConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *Node_VcenterConfig) Size() (n int) {
	var l int
	_ = l
	if m.VcenterConfig != nil {
		l = m.VcenterConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *ApcInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *NaplesMultiSimConfig) Size() (n int) {
	var l int
	_ = l
	if m.NumInstances != 0 {
		n += 1 + sovTopoSvc(uint64(m.NumInstances))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.IpAddrRange)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicType)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if len(m.SimsInfo) > 0 {
		for _, e := range m.SimsInfo {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *NaplesControlSimConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ControlIntf)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.ControlIp)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NodeUuid)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *NaplesConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ControlIntf)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ControlIp)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.DataIntfs) > 0 {
		for _, s := range m.DataIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if len(m.VeniceIps) > 0 {
		for _, s := range m.VeniceIps {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.NaplesIpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NaplesSecondaryIpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NaplesUsername)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NaplesPassword)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicType)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicHint)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NodeUuid)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *NaplesConfigs) Size() (n int) {
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *ThirdPartyNicConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.NicType)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *MellanoxConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *BroadcomConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *IntelConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.HostIntfs) > 0 {
		for _, s := range m.HostIntfs {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *VenicePeer) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *VeniceConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ControlIntf)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ControlIp)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.VenicePeers) > 0 {
		for _, e := range m.VenicePeers {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *WorkloadMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.WorkloadOp != 0 {
		n += 1 + sovTopoSvc(uint64(m.WorkloadOp))
	}
	if len(m.Workloads) > 0 {
		for _, e := range m.Workloads {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *DvsInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.SwitchName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *ExposedPorts) Size() (n int) {
	var l int
	_ = l
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *Workload) Size() (n int) {
	var l int
	_ = l
	l = len(m.WorkloadName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.WorkloadType != 0 {
		n += 1 + sovTopoSvc(uint64(m.WorkloadType))
	}
	l = len(m.WorkloadImage)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.EncapVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.EncapVlan))
	}
	if m.SecondaryEncapVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.SecondaryEncapVlan))
	}
	l = len(m.IpPrefix)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Ipv6Prefix)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Interface)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ParentInterface)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.InterfaceType != 0 {
		n += 1 + sovTopoSvc(uint64(m.InterfaceType))
	}
	if m.PinnedPort != 0 {
		n += 1 + sovTopoSvc(uint64(m.PinnedPort))
	}
	if m.UplinkVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.UplinkVlan))
	}
	if m.WorkloadStatus != nil {
		l = m.WorkloadStatus.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.SecIpPrefix) > 0 {
		for _, s := range m.SecIpPrefix {
			l = len(s)
			n += 2 + l + sovTopoSvc(uint64(l))
		}
	}
	if len(m.SecIpv6Prefix) > 0 {
		for _, s := range m.SecIpv6Prefix {
			l = len(s)
			n += 2 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.Cpus != 0 {
		n += 2 + sovTopoSvc(uint64(m.Cpus))
	}
	if m.Memory != 0 {
		n += 2 + sovTopoSvc(uint64(m.Memory))
	}
	l = len(m.MgmtIp)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if m.Dvs != nil {
		l = m.Dvs.Size()
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.SwitchName)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if len(m.ExposedPorts) > 0 {
		for _, e := range m.ExposedPorts {
			l = e.Size()
			n += 2 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *TriggerMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.TriggerOp != 0 {
		n += 1 + sovTopoSvc(uint64(m.TriggerOp))
	}
	if m.TriggerMode != 0 {
		n += 1 + sovTopoSvc(uint64(m.TriggerMode))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovTopoSvc(uint64(m.Mode))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.EntityName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.ForegroundTimeout != 0 {
		n += 1 + sovTopoSvc(uint64(m.ForegroundTimeout))
	}
	l = len(m.RunningDir)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Stderr)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.ExitCode != 0 {
		n += 1 + sovTopoSvc(uint64(m.ExitCode))
	}
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.TimedOut {
		n += 2
	}
	if m.StdoutOnErr {
		n += 2
	}
	if m.StderrOnErr {
		n += 2
	}
	if m.RetriesOnFailure != 0 {
		n += 1 + sovTopoSvc(uint64(m.RetriesOnFailure))
	}
	return n
}

func (m *WorkloadMove) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopoSvc(uint64(m.Type))
	}
	l = len(m.SrcNodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.DstNodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.WorkloadName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.VlanOverride != 0 {
		n += 1 + sovTopoSvc(uint64(m.VlanOverride))
	}
	if m.CurrentVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.CurrentVlan))
	}
	l = len(m.SwitchName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *WorkloadMoveMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.WorkloadMoves) > 0 {
		for _, e := range m.WorkloadMoves {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.OrchestratorNode)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopoSvc(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Vlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.Vlan))
	}
	if len(m.Nodes) > 0 {
		for _, s := range m.Nodes {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Dhcp {
		n += 2
	}
	return n
}

func (m *NetworksMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Network) > 0 {
		for _, e := range m.Network {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.Switch)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.OrchestratorNode)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *ClusterHealthMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Health) > 0 {
		for _, e := range m.Health {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *NodeHealth) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.ClusterDone {
		n += 2
	}
	if m.HealthCode != 0 {
		n += 1 + sovTopoSvc(uint64(m.HealthCode))
	}
	return n
}

func (m *NetworkQosClass) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Mtu != 0 {
		n += 1 + sovTopoSvc(uint64(m.Mtu))
	}
	if m.PausePfcCos != 0 {
		n += 1 + sovTopoSvc(uint64(m.PausePfcCos))
	}
	return n
}

func (m *NetworkPolicyQos) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.QosClasses) > 0 {
		for _, e := range m.QosClasses {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *NetworkDscpClass) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Dscp)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Cos != 0 {
		n += 1 + sovTopoSvc(uint64(m.Cos))
	}
	return n
}

func (m *NetworkDscpPolicy) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.DscpClasses) > 0 {
		for _, e := range m.DscpClasses {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *NetworkQueueClass) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovTopoSvc(uint64(m.Priority))
	}
	if m.Percent != 0 {
		n += 1 + sovTopoSvc(uint64(m.Percent))
	}
	return n
}

func (m *NetworkQueuePolicy) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.QueueClasses) > 0 {
		for _, e := range m.QueueClasses {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *DataSwitch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.Speed != 0 {
		n += 1 + sovTopoSvc(uint64(m.Speed))
	}
	if m.Mtu != 0 {
		n += 1 + sovTopoSvc(uint64(m.Mtu))
	}
	if m.FlowControlReceive {
		n += 2
	}
	if m.FlowControlSend {
		n += 2
	}
	if m.Qos != nil {
		l = m.Qos.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.IgmpDisabled {
		n += 2
	}
	if m.Dscp != nil {
		l = m.Dscp.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Queue != nil {
		l = m.Queue.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *License) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *TestBedMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NaplesSimImage)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NaplesImage)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.VeniceImage)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.DriverSources)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.AllocatedVlans) > 0 {
		l = 0
		for _, e := range m.AllocatedVlans {
			l += sovTopoSvc(uint64(e))
		}
		n += 1 + sovTopoSvc(uint64(l)) + l
	}
	if m.NativeVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.NativeVlan))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.TestbedId != 0 {
		n += 1 + sovTopoSvc(uint64(m.TestbedId))
	}
	if len(m.DataSwitches) > 0 {
		for _, e := range m.DataSwitches {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.RebootNodes {
		n += 2
	}
	if len(m.Licenses) > 0 {
		for _, e := range m.Licenses {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.TestbedJsonFile)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *TestNodesMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.RebootNodes {
		n += 2
	}
	if len(m.Licenses) > 0 {
		for _, e := range m.Licenses {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	return n
}

func (m *VlanConfig) Size() (n int) {
	var l int
	_ = l
	if m.Unset {
		n += 2
	}
	l = len(m.VlanRange)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.NativeVlan != 0 {
		n += 1 + sovTopoSvc(uint64(m.NativeVlan))
	}
	return n
}

func (m *SwitchFlapInfo) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTopoSvc(uint64(m.Count))
	}
	if m.Interval != 0 {
		n += 1 + sovTopoSvc(uint64(m.Interval))
	}
	if m.DownTime != 0 {
		n += 1 + sovTopoSvc(uint64(m.DownTime))
	}
	return n
}

func (m *PortPauseConfig) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	return n
}

func (m *PortPfcConfig) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	return n
}

func (m *PortQosConfig) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *PortQueuingConfig) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *SwitchMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovTopoSvc(uint64(m.Op))
	}
	if m.OpInfo != nil {
		n += m.OpInfo.Size()
	}
	if len(m.DataSwitches) > 0 {
		for _, e := range m.DataSwitches {
			l = e.Size()
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	if m.SwitchInfo != nil {
		n += m.SwitchInfo.Size()
	}
	if m.PauseInfo != nil {
		n += m.PauseInfo.Size()
	}
	if m.PfcInfo != nil {
		n += m.PfcInfo.Size()
	}
	if m.PortQosInfo != nil {
		n += m.PortQosInfo.Size()
	}
	if m.PortQueuingInfo != nil {
		n += m.PortQueuingInfo.Size()
	}
	return n
}

func (m *SwitchMsg_FlapInfo) Size() (n int) {
	var l int
	_ = l
	if m.FlapInfo != nil {
		l = m.FlapInfo.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *SwitchMsg_VlanConfig) Size() (n int) {
	var l int
	_ = l
	if m.VlanConfig != nil {
		l = m.VlanConfig.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *SwitchMsg_PortPause) Size() (n int) {
	var l int
	_ = l
	if m.PortPause != nil {
		l = m.PortPause.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *SwitchMsg_PortPfc) Size() (n int) {
	var l int
	_ = l
	if m.PortPfc != nil {
		l = m.PortPfc.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *SwitchMsg_PortQos) Size() (n int) {
	var l int
	_ = l
	if m.PortQos != nil {
		l = m.PortQos.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *SwitchMsg_PortQueuing) Size() (n int) {
	var l int
	_ = l
	if m.PortQueuing != nil {
		l = m.PortQueuing.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}
func (m *TestBedNode) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTopoSvc(uint64(m.Type))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.CimcIpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.CimcUsername)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.CimcPassword)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.EsxUsername)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.EsxPassword)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicIpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicConsoleIpAddress)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicConsolePort)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicConsoleUsername)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicConsolePassword)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicUsername)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicPassword)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.InitScript)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ControlIntf)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if len(m.SwitchPortIds) > 0 {
		l = 0
		for _, e := range m.SwitchPortIds {
			l += sovTopoSvc(uint64(e))
		}
		n += 2 + sovTopoSvc(uint64(l)) + l
	}
	if m.Os != 0 {
		n += 2 + sovTopoSvc(uint64(m.Os))
	}
	l = len(m.EsxCtrlNodeIpAddress)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NicUuid)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ServerType)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if m.ApcInfo != nil {
		l = m.ApcInfo.Size()
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.MgmtIntf)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.DcName)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.Switch)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if m.NoMgmt {
		n += 3
	}
	l = len(m.CimcNcsiIp)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	if m.AutoDiscoverOnInstall {
		n += 3
	}
	l = len(m.InstanceName)
	if l > 0 {
		n += 2 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *EntityCopyMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovTopoSvc(uint64(m.Direction))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.EntityName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovTopoSvc(uint64(l))
		}
	}
	l = len(m.DestDir)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *DownloadAssetsMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.AssetName)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ReleaseVersion)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ParentDir)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func (m *PrepareWorkspaceMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiResponse != nil {
		l = m.ApiResponse.Size()
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.FwVersion)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.DriverVersion)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.VeniceVersion)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	l = len(m.ParentDir)
	if l > 0 {
		n += 1 + l + sovTopoSvc(uint64(l))
	}
	return n
}

func sovTopoSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopoSvc(x uint64) (n int) {
	return sovTopoSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOp", wireType)
			}
			m.NodeOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeOp |= (Op(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakeCluster = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClusterDone = bool(v != 0)
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllocatedVlans = append(m.AllocatedVlans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopoSvc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopoSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllocatedVlans = append(m.AllocatedVlans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedVlans", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReloadMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReloadMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReloadMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeMsg == nil {
				m.NodeMsg = &NodeMsg{}
			}
			if err := m.NodeMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipRestore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipRestore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestartMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseNcsi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseNcsi = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmwareESXConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmwareESXConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmwareESXConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SslThumbprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SslThumbprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VcenterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VcenterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VcenterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsxConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EsxConfigs = append(m.EsxConfigs, &VmwareESXConfig{})
			if err := m.EsxConfigs[len(m.EsxConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedSwitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedSwitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvlanStart", wireType)
			}
			m.PvlanStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvlanStart |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvlanEnd", wireType)
			}
			m.PvlanEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PvlanEnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesSimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesSimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesSimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PersonalityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &Entity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NaplesConfigs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_NaplesConfigs{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VeniceConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_VeniceConfig{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyNicConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ThirdPartyNicConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_ThirdPartyNicConfig{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesMultiSimConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NaplesMultiSimConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_NaplesMultiSimConfig{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesControlSimConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NaplesControlSimConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_NaplesControlSimConfig{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcenterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VcenterConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeInfo = &Node_VcenterConfig{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeStatus == nil {
				m.NodeStatus = &IotaAPIResponse{}
			}
			if err := m.NodeStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartupScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsxConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EsxConfig == nil {
				m.EsxConfig = &VmwareESXConfig{}
			}
			if err := m.EsxConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			m.Os = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Os |= (TestBedNodeOs(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reload = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestartMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApcInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApcInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApcInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesMultiSimConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesMultiSimConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesMultiSimConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInstances", wireType)
			}
			m.NumInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInstances |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddrRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddrRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeniceIps = append(m.VeniceIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimsInfo = append(m.SimsInfo, &NaplesSimInfo{})
			if err := m.SimsInfo[len(m.SimsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesControlSimConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesControlSimConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesControlSimConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeniceIps = append(m.VeniceIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataIntfs = append(m.DataIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeniceIps = append(m.VeniceIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIntfs = append(m.HostIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesSecondaryIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesSecondaryIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NaplesConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NaplesConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NaplesConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &NaplesConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThirdPartyNicConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThirdPartyNicConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThirdPartyNicConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIntfs = append(m.HostIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MellanoxConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MellanoxConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MellanoxConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIntfs = append(m.HostIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcomConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcomConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcomConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIntfs = append(m.HostIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntelConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntelConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntelConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIntfs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIntfs = append(m.HostIntfs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VenicePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VenicePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VenicePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VeniceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VeniceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VeniceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VenicePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VenicePeers = append(m.VenicePeers, &VenicePeer{})
			if err := m.VenicePeers[len(m.VenicePeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadOp", wireType)
			}
			m.WorkloadOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadOp |= (Op(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, &Workload{})
			if err := m.Workloads[len(m.Workloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DvsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DvsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DvsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExposedPorts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExposedPorts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExposedPorts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadType", wireType)
			}
			m.WorkloadType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadType |= (WorkloadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapVlan", wireType)
			}
			m.EncapVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncapVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryEncapVlan", wireType)
			}
			m.SecondaryEncapVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryEncapVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv6Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			m.InterfaceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceType |= (InterfaceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedPort", wireType)
			}
			m.PinnedPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PinnedPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkVlan", wireType)
			}
			m.UplinkVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadStatus == nil {
				m.WorkloadStatus = &IotaAPIResponse{}
			}
			if err := m.WorkloadStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecIpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecIpPrefix = append(m.SecIpPrefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecIpv6Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecIpv6Prefix = append(m.SecIpv6Prefix, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			m.Cpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dvs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dvs == nil {
				m.Dvs = &DvsInfo{}
			}
			if err := m.Dvs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExposedPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExposedPorts = append(m.ExposedPorts, &ExposedPorts{})
			if err := m.ExposedPorts[len(m.ExposedPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerOp", wireType)
			}
			m.TriggerOp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerOp |= (TriggerOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerMode", wireType)
			}
			m.TriggerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerMode |= (TriggerMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &Command{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (CommandMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForegroundTimeout", wireType)
			}
			m.ForegroundTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForegroundTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunningDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stderr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stderr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimedOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimedOut = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdoutOnErr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StdoutOnErr = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StderrOnErr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StderrOnErr = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetriesOnFailure", wireType)
			}
			m.RetriesOnFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetriesOnFailure |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WorkloadMoveType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstNodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanOverride", wireType)
			}
			m.VlanOverride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanOverride |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVlan", wireType)
			}
			m.CurrentVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwitchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadMoveMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadMoveMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadMoveMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadMoves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadMoves = append(m.WorkloadMoves, &WorkloadMove{})
			if err := m.WorkloadMoves[len(m.WorkloadMoves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dhcp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dhcp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworksMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworksMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworksMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = append(m.Network, &Network{})
			if err := m.Network[len(m.Network)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Switch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterHealthMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterHealthMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterHealthMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Health = append(m.Health, &NodeHealth{})
			if err := m.Health[len(m.Health)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClusterDone = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCode", wireType)
			}
			m.HealthCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthCode |= (NodeHealth_HealthCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkQosClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkQosClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkQosClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PausePfcCos", wireType)
			}
			m.PausePfcCos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PausePfcCos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPolicyQos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPolicyQos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPolicyQos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QosClasses = append(m.QosClasses, &NetworkQosClass{})
			if err := m.QosClasses[len(m.QosClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkDscpClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkDscpClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkDscpClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dscp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dscp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cos", wireType)
			}
			m.Cos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkDscpPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkDscpPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkDscpPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DscpClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DscpClasses = append(m.DscpClasses, &NetworkDscpClass{})
			if err := m.DscpClasses[len(m.DscpClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkQueueClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkQueueClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkQueueClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			m.Percent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkQueuePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkQueuePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkQueuePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueClasses = append(m.QueueClasses, &NetworkQueueClass{})
			if err := m.QueueClasses[len(m.QueueClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= (DataSwitch_Speed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowControlReceive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowControlReceive = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowControlSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowControlSend = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Qos == nil {
				m.Qos = &NetworkPolicyQos{}
			}
			if err := m.Qos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgmpDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgmpDisabled = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dscp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dscp == nil {
				m.Dscp = &NetworkDscpPolicy{}
			}
			if err := m.Dscp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queue == nil {
				m.Queue = &NetworkQueuePolicy{}
			}
			if err := m.Queue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestBedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestBedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestBedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesSimImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesSimImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaplesImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NaplesImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeniceImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverSources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverSources = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllocatedVlans = append(m.AllocatedVlans, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopoSvc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopoSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllocatedVlans = append(m.AllocatedVlans, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedVlans", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeVlan", wireType)
			}
			m.NativeVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &TestBedNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestbedId", wireType)
			}
			m.TestbedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestbedId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSwitches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSwitches = append(m.DataSwitches, &DataSwitch{})
			if err := m.DataSwitches[len(m.DataSwitches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebootNodes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RebootNodes = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Licenses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Licenses = append(m.Licenses, &License{})
			if err := m.Licenses[len(m.Licenses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestbedJsonFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestbedJsonFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestNodesMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestNodesMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestNodesMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &TestBedNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebootNodes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RebootNodes = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Licenses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Licenses = append(m.Licenses, &License{})
			if err := m.Licenses[len(m.Licenses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unset = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VlanRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeVlan", wireType)
			}
			m.NativeVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchFlapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchFlapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchFlapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownTime", wireType)
			}
			m.DownTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortPauseConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortPauseConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortPauseConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortPfcConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortPfcConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortPfcConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortQosConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortQosConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortQosConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortQueuingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortQueuingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortQueuingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwitchMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwitchMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwitchMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (SwitchOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlapInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SwitchFlapInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.OpInfo = &SwitchMsg_FlapInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSwitches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSwitches = append(m.DataSwitches, &DataSwitch{})
			if err := m.DataSwitches[len(m.DataSwitches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VlanConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SwitchInfo = &SwitchMsg_VlanConfig{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortPause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortPauseConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PauseInfo = &SwitchMsg_PortPause{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortPfc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortPfcConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PfcInfo = &SwitchMsg_PortPfc{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortQos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortQosConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortQosInfo = &SwitchMsg_PortQos{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortQueuing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortQueuingConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PortQueuingInfo = &SwitchMsg_PortQueuing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestBedNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestBedNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestBedNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TestBedNodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CimcIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CimcIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CimcUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CimcUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CimcPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CimcPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsxUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EsxUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsxPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EsxPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicConsoleIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicConsoleIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicConsolePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicConsolePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicConsoleUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicConsoleUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicConsolePassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicConsolePassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SwitchPortIds = append(m.SwitchPortIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTopoSvc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTopoSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SwitchPortIds = append(m.SwitchPortIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchPortIds", wireType)
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			m.Os = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Os |= (TestBedNodeOs(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsxCtrlNodeIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EsxCtrlNodeIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApcInfo == nil {
				m.ApcInfo = &ApcInfo{}
			}
			if err := m.ApcInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtIntf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtIntf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Switch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMgmt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoMgmt = bool(v != 0)
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CimcNcsiIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CimcNcsiIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoDiscoverOnInstall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoDiscoverOnInstall = bool(v != 0)
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityCopyMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityCopyMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityCopyMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= (CopyDirection(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadAssetsMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadAssetsMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadAssetsMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareWorkspaceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareWorkspaceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareWorkspaceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiResponse == nil {
				m.ApiResponse = &IotaAPIResponse{}
			}
			if err := m.ApiResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VeniceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VeniceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopoSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopoSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopoSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopoSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopoSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopoSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTopoSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopoSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopoSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopoSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopoSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("topo_svc.proto", fileDescriptorTopoSvc) }

var fileDescriptorTopoSvc = []byte{
	// 5348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x3b, 0x4b, 0x70, 0xe3, 0xc8,
	0x75, 0xe2, 0x4f, 0x24, 0x1f, 0x7f, 0x50, 0x8f, 0x46, 0xc3, 0xd1, 0x7c, 0x17, 0xfb, 0x1b, 0xcb,
	0xbb, 0xe3, 0xdd, 0x59, 0x7b, 0xbd, 0x8e, 0xed, 0xb5, 0x29, 0x12, 0x23, 0x31, 0x4b, 0x12, 0x5c,
	0x90, 0xd2, 0xac, 0x2b, 0x15, 0xa3, 0x30, 0x40, 0x4b, 0x42, 0x86, 0x04, 0xb0, 0x68, 0x50, 0x33,
	0xba, 0xf9, 0xe4, 0x43, 0x4e, 0x39, 0xb9, 0x12, 0x57, 0x2e, 0x49, 0x8e, 0x39, 0xe4, 0x9c, 0x43,
	0x2a, 0xd7, 0x1c, 0x72, 0x48, 0xaa, 0x92, 0x6b, 0xca, 0xe5, 0x54, 0x25, 0x87, 0xa4, 0x2a, 0x95,
	0x43, 0xee, 0xa9, 0xd7, 0xdd, 0x00, 0xc1, 0x8f, 0x66, 0x76, 0xc6, 0x3a, 0x11, 0xfd, 0xde, 0xeb,
	0xd7, 0xaf, 0x5f, 0xbf, 0xf7, 0xfa, 0xf5, 0xeb, 0x26, 0xd4, 0x23, 0x3f, 0xf0, 0x4d, 0x76, 0x6e,
	0x3f, 0x0c, 0x42, 0x3f, 0xf2, 0x49, 0xd9, 0xf5, 0x23, 0x6b, 0xea, 0x3b, 0x74, 0xb2, 0xab, 0xe0,
	0xa7, 0x19, 0x5d, 0x04, 0x94, 0x09, 0xa4, 0xfa, 0xcb, 0x2c, 0x14, 0x07, 0xbe, 0x43, 0xfb, 0xec,
	0x94, 0xfc, 0x18, 0xaa, 0x56, 0xe0, 0x9a, 0x21, 0x65, 0x81, 0xef, 0x31, 0xda, 0xcc, 0xdc, 0xcf,
	0x3c, 0xa8, 0x3c, 0xda, 0x7d, 0x98, 0xf4, 0x7f, 0xd8, 0xf5, 0x23, 0xab, 0x35, 0xec, 0x1a, 0x92,
	0xc2, 0xa8, 0x58, 0x81, 0x1b, 0x37, 0xc8, 0x7b, 0x50, 0xf4, 0x7c, 0x87, 0x9a, 0x7e, 0xd0, 0xcc,
	0xde, 0xcf, 0x3c, 0xa8, 0x3f, 0xaa, 0xa5, 0x7a, 0xea, 0x81, 0xb1, 0x89, 0x58, 0x3d, 0x20, 0xef,
	0x42, 0x01, 0xbf, 0x58, 0x33, 0x77, 0x3f, 0xf7, 0xa0, 0xf2, 0xa8, 0x91, 0xa2, 0x42, 0x49, 0x0c,
	0x81, 0x25, 0x6f, 0x41, 0x75, 0x6a, 0x3d, 0xa3, 0xa6, 0x3d, 0x99, 0xb1, 0x88, 0x86, 0xcd, 0xfc,
	0xfd, 0xcc, 0x83, 0x92, 0x51, 0x41, 0x58, 0x5b, 0x80, 0x90, 0x44, 0x62, 0x4d, 0xc7, 0xf7, 0x68,
	0xb3, 0x20, 0x48, 0x24, 0xac, 0xe3, 0x7b, 0x94, 0xbc, 0x0f, 0x0d, 0x6b, 0x32, 0xf1, 0x6d, 0x2b,
	0xa2, 0x8e, 0x79, 0x3e, 0xb1, 0x3c, 0xd6, 0xdc, 0xbc, 0x9f, 0x7b, 0x50, 0x33, 0xea, 0x09, 0xf8,
	0x18, 0xa1, 0xea, 0xbf, 0x65, 0xa0, 0x6c, 0xd0, 0x89, 0x6f, 0x39, 0x57, 0xa0, 0x8a, 0x0f, 0xa1,
	0xc4, 0x55, 0x31, 0x65, 0xa7, 0x5c, 0x17, 0x95, 0x47, 0x64, 0x69, 0x96, 0x7d, 0x76, 0x6a, 0x70,
	0x75, 0xe1, 0x68, 0x6f, 0x41, 0x95, 0x3d, 0x73, 0x03, 0x1c, 0x2e, 0xf2, 0x43, 0xda, 0xcc, 0x89,
	0x79, 0x20, 0xcc, 0x10, 0x20, 0xf2, 0x2e, 0xd4, 0x11, 0x6b, 0x85, 0x91, 0x39, 0xa5, 0xd1, 0x99,
	0xef, 0x70, 0x7d, 0x94, 0x8d, 0x9a, 0x84, 0xf6, 0x39, 0x90, 0xdc, 0x84, 0xd2, 0x8c, 0x51, 0xd3,
	0xb3, 0x99, 0x2b, 0xb5, 0x51, 0x9c, 0x31, 0x3a, 0xb0, 0x99, 0xab, 0x1e, 0xc0, 0xa6, 0xe6, 0x45,
	0x6e, 0x74, 0x41, 0xbe, 0x05, 0x79, 0x34, 0x01, 0x3e, 0xa9, 0xfa, 0xa3, 0xeb, 0x29, 0xc9, 0x04,
	0xc1, 0xf8, 0x22, 0xa0, 0x06, 0x27, 0x21, 0x04, 0xf2, 0x9e, 0x35, 0xa5, 0x7c, 0x12, 0x65, 0x83,
	0x7f, 0xab, 0x7f, 0x95, 0x81, 0xc6, 0xf1, 0xf4, 0xb9, 0x15, 0x52, 0x6d, 0xf4, 0x55, 0xdb, 0xf7,
	0x4e, 0xdc, 0x53, 0xb2, 0xcb, 0xc7, 0x0d, 0x39, 0x6d, 0x86, 0xd3, 0x26, 0x6d, 0xc4, 0x05, 0x16,
	0x63, 0xcf, 0xfd, 0xd0, 0x91, 0x7c, 0x92, 0x36, 0xb9, 0x03, 0xe0, 0x06, 0xa6, 0xe5, 0x38, 0x21,
	0x65, 0x8c, 0xcf, 0xbb, 0x6c, 0x94, 0xdd, 0xa0, 0x25, 0x00, 0x38, 0x6b, 0xc6, 0x26, 0x66, 0x74,
	0x36, 0x9b, 0x3e, 0x0d, 0x42, 0xd7, 0x8b, 0xe2, 0x59, 0x33, 0x36, 0x19, 0x27, 0xc0, 0x44, 0xca,
	0x42, 0x4a, 0xca, 0xff, 0xcb, 0x40, 0xed, 0xd8, 0xa6, 0x5e, 0x44, 0x43, 0x29, 0xe3, 0x0f, 0xa1,
	0x42, 0xd9, 0x0b, 0xd3, 0xe6, 0x2d, 0xd6, 0xcc, 0x70, 0xeb, 0x4b, 0x2f, 0xe9, 0xd2, 0xa4, 0x0c,
	0xa0, 0xec, 0x85, 0xf8, 0x64, 0xe4, 0x06, 0x14, 0x1d, 0xdb, 0x4c, 0xe9, 0x62, 0xd3, 0xb1, 0x07,
	0x38, 0xbb, 0x94, 0x0d, 0x72, 0xac, 0x98, 0x43, 0x6c, 0x83, 0x9c, 0xe4, 0x43, 0x20, 0x8e, 0xcb,
	0xa2, 0xd0, 0x7d, 0x3a, 0x43, 0x2b, 0x64, 0xcf, 0xdd, 0xc8, 0x3e, 0x93, 0x33, 0xd9, 0x4a, 0x61,
	0x46, 0x1c, 0x41, 0xee, 0x41, 0x25, 0x40, 0x4b, 0x35, 0xf9, 0xc2, 0xf2, 0x49, 0xd5, 0x0c, 0xe0,
	0xa0, 0x11, 0x42, 0xc8, 0x2d, 0x28, 0x0b, 0x02, 0xea, 0x39, 0xcd, 0x4d, 0x8e, 0x2e, 0x71, 0x80,
	0xe6, 0x39, 0xaa, 0x09, 0xb5, 0x81, 0x15, 0x4c, 0x28, 0x1b, 0xb9, 0xd3, 0xae, 0x77, 0xe2, 0x23,
	0x35, 0xb7, 0xc5, 0xd9, 0xcc, 0x75, 0xe2, 0xb5, 0x41, 0xc0, 0xd1, 0xcc, 0x75, 0xd6, 0xad, 0xef,
	0x2b, 0xd6, 0x44, 0xfd, 0xb3, 0x22, 0xe4, 0xd1, 0x82, 0xc9, 0xc3, 0x05, 0x33, 0x4a, 0x2b, 0x72,
	0x48, 0x43, 0xe6, 0x7b, 0xd6, 0x64, 0xd1, 0x96, 0xb6, 0xa1, 0xe0, 0x4e, 0xad, 0xd3, 0x78, 0x30,
	0xd1, 0x78, 0x95, 0x05, 0xc4, 0x02, 0xe6, 0x53, 0x02, 0x7e, 0x08, 0x25, 0x8a, 0x86, 0xea, 0x52,
	0xd6, 0x2c, 0xf0, 0x55, 0xdc, 0x5a, 0xb1, 0x61, 0x23, 0x21, 0x21, 0x2d, 0xa8, 0x7b, 0x5c, 0x23,
	0xc9, 0xd2, 0x6f, 0x72, 0x97, 0x6c, 0xa6, 0x5d, 0x92, 0x13, 0xc8, 0xc5, 0x3e, 0xdc, 0x30, 0x6a,
	0x5e, 0x1a, 0x40, 0x3e, 0x87, 0xda, 0x39, 0xf5, 0x5c, 0x9b, 0x4a, 0x16, 0xcd, 0x22, 0xe7, 0x70,
	0x23, 0x6d, 0x3c, 0x1c, 0x2f, 0x3a, 0x1c, 0x6e, 0x18, 0xd5, 0xf3, 0x54, 0x9b, 0x1c, 0xc1, 0x4e,
	0x74, 0xe6, 0x86, 0x8e, 0x19, 0x58, 0x61, 0x74, 0x61, 0x7a, 0xae, 0x1d, 0x33, 0x2a, 0x71, 0x46,
	0x77, 0x53, 0x8c, 0xc6, 0x48, 0x38, 0x44, 0xba, 0x81, 0x6b, 0x27, 0xfc, 0xae, 0x45, 0xab, 0x60,
	0xf2, 0x15, 0xdc, 0x90, 0x33, 0x9b, 0xce, 0x26, 0x91, 0x6b, 0x32, 0x77, 0x1a, 0xf3, 0x2d, 0x73,
	0xbe, 0xf7, 0x56, 0xa6, 0xd8, 0x47, 0xc2, 0x91, 0x3b, 0x4d, 0x18, 0x6f, 0x7b, 0x6b, 0xe0, 0xe4,
	0xe7, 0x70, 0x73, 0xae, 0xb3, 0x28, 0xf4, 0x27, 0x69, 0xde, 0xc0, 0x79, 0xbf, 0xb5, 0x4e, 0x7d,
	0x48, 0x9a, 0xe6, 0xbe, 0xe3, 0xad, 0xc5, 0xe0, 0x9a, 0x9c, 0x0b, 0xe7, 0x8c, 0x99, 0x56, 0x56,
	0xd6, 0x64, 0xc1, 0x7b, 0x71, 0x4d, 0xce, 0x97, 0xdd, 0x99, 0xdb, 0x35, 0x8b, 0xac, 0x68, 0xc6,
	0x9a, 0xd5, 0x57, 0x46, 0x68, 0x40, 0xf2, 0x11, 0xa7, 0xe6, 0x81, 0x05, 0x7d, 0x69, 0x16, 0x98,
	0xcc, 0x0e, 0xdd, 0x20, 0x6a, 0xd6, 0x65, 0x60, 0x11, 0xd0, 0x11, 0x07, 0x92, 0x1f, 0x00, 0xcc,
	0x43, 0x46, 0xb3, 0xb1, 0x32, 0xc4, 0x72, 0xc4, 0x28, 0x27, 0x11, 0x83, 0x3c, 0x80, 0xac, 0xcf,
	0x9a, 0x0a, 0xf7, 0x8d, 0xf4, 0xac, 0xc6, 0x94, 0x45, 0xfb, 0xd4, 0x41, 0x0f, 0xd2, 0x99, 0x91,
	0xf5, 0x19, 0xd9, 0x81, 0xcd, 0x90, 0x6f, 0x3c, 0xcd, 0x2d, 0x1e, 0xb1, 0x65, 0x8b, 0xbc, 0x03,
	0x35, 0x23, 0x1d, 0xdc, 0x9b, 0xd7, 0x84, 0x88, 0x0b, 0xc0, 0xfd, 0x8a, 0x74, 0x6f, 0xd7, 0x3b,
	0xf1, 0x55, 0x0a, 0xc5, 0x56, 0x60, 0x73, 0xb7, 0xaf, 0x43, 0xd6, 0x0d, 0xa4, 0xbf, 0x67, 0xdd,
	0x00, 0x1d, 0x29, 0xf0, 0xc3, 0x28, 0xf6, 0x74, 0xfc, 0x5e, 0x88, 0xda, 0xb9, 0x97, 0x44, 0xed,
	0xfc, 0x62, 0xd4, 0x56, 0xff, 0x3c, 0x0b, 0xdb, 0xeb, 0xcc, 0x89, 0xbc, 0x0d, 0x35, 0x6f, 0x36,
	0x35, 0x5d, 0x8f, 0x45, 0x96, 0x67, 0x53, 0xc6, 0xc7, 0xaf, 0x19, 0x55, 0x6f, 0x36, 0xed, 0xc6,
	0x30, 0xd2, 0x84, 0xa2, 0x47, 0xa3, 0xe7, 0x7e, 0xf8, 0x4c, 0x0a, 0x13, 0x37, 0x11, 0x73, 0x6a,
	0x45, 0xf4, 0xb9, 0x75, 0x21, 0xc5, 0x89, 0x9b, 0x44, 0x85, 0x9a, 0x8c, 0x12, 0x66, 0x68, 0x79,
	0xa7, 0x71, 0x3c, 0xa8, 0x88, 0x40, 0x61, 0x20, 0x08, 0xf5, 0x18, 0x58, 0x21, 0xf5, 0x22, 0xb9,
	0x0f, 0xc8, 0x16, 0xee, 0x89, 0xe8, 0x70, 0x3c, 0x56, 0x6d, 0xca, 0x01, 0x5d, 0x1b, 0x03, 0x13,
	0x06, 0x1f, 0xe9, 0xd7, 0x6e, 0xc0, 0x9a, 0xc5, 0xfb, 0x39, 0x0c, 0x3e, 0x02, 0xd2, 0x0d, 0x18,
	0xf9, 0x1e, 0x94, 0x99, 0x3b, 0x65, 0x5c, 0xb7, 0xcd, 0x12, 0x8f, 0x34, 0xab, 0x41, 0x43, 0xc6,
	0x59, 0xa3, 0x84, 0xa4, 0xf8, 0xa5, 0xfe, 0x2a, 0x03, 0x3b, 0xeb, 0x3d, 0x82, 0xef, 0x16, 0xd2,
	0xa1, 0x5c, 0x2f, 0x3a, 0x91, 0xeb, 0x53, 0x91, 0xb0, 0xae, 0x17, 0x9d, 0x2c, 0xc9, 0x94, 0x5d,
	0x96, 0xe9, 0x0e, 0x40, 0xc2, 0x21, 0x88, 0xe3, 0x65, 0xdc, 0x3f, 0x58, 0x8c, 0xf6, 0xf9, 0xc5,
	0x68, 0xaf, 0xfe, 0x73, 0x0e, 0xaa, 0xe9, 0x48, 0xf7, 0x0d, 0xc5, 0x49, 0x8d, 0x97, 0x5d, 0x1e,
	0xef, 0x0e, 0x80, 0x63, 0x45, 0x16, 0xef, 0x2e, 0x32, 0xba, 0xb2, 0x51, 0x46, 0x08, 0x76, 0x66,
	0x4b, 0x93, 0xc9, 0xaf, 0x99, 0xcc, 0x99, 0xcf, 0x22, 0xd9, 0xbb, 0x20, 0xd0, 0x08, 0x11, 0xbd,
	0xf7, 0x60, 0x4b, 0x46, 0xa1, 0xd4, 0x16, 0x21, 0x96, 0xb0, 0x21, 0x10, 0xdd, 0x64, 0xa3, 0xf8,
	0x31, 0xdc, 0x92, 0xb4, 0x8c, 0xda, 0xbe, 0xe7, 0x58, 0xe1, 0x45, 0xba, 0x57, 0x91, 0xf7, 0x6a,
	0x0a, 0x92, 0x51, 0x4c, 0x31, 0xef, 0xfe, 0x3e, 0x48, 0x8e, 0x66, 0xe2, 0x11, 0x25, 0xde, 0x45,
	0xee, 0x1d, 0x47, 0xb1, 0x5f, 0xcc, 0x09, 0x13, 0xf7, 0x28, 0xa7, 0x09, 0x87, 0x71, 0x6a, 0x93,
	0x36, 0x3b, 0x58, 0x34, 0x3b, 0x89, 0x3a, 0xc3, 0x84, 0xa6, 0x92, 0xa0, 0x0e, 0x31, 0x95, 0x59,
	0x58, 0xbf, 0xea, 0x25, 0xbb, 0x75, 0x2d, 0x95, 0xe7, 0xec, 0xc7, 0xfb, 0x7d, 0xbc, 0x57, 0x7d,
	0x0c, 0xc5, 0x78, 0x9f, 0xcb, 0x72, 0x93, 0xbd, 0x71, 0xc9, 0x3e, 0x67, 0xc4, 0x74, 0xaa, 0x0e,
	0xd7, 0xd6, 0xec, 0x3a, 0x0b, 0x33, 0xc8, 0xac, 0x38, 0x4e, 0x6a, 0xe1, 0xb2, 0x4b, 0x0b, 0xa7,
	0x7e, 0x07, 0xea, 0x7d, 0x3a, 0x99, 0x58, 0x9e, 0x1f, 0x87, 0xc3, 0x97, 0xaf, 0x34, 0x76, 0xd8,
	0x0f, 0x7d, 0xcb, 0xb1, 0xfd, 0xe9, 0x37, 0xeb, 0xf0, 0x01, 0x54, 0xba, 0x5e, 0x44, 0x27, 0xdf,
	0x8c, 0xfa, 0x10, 0x40, 0xec, 0xcf, 0x43, 0x4a, 0x43, 0xd4, 0x31, 0x27, 0x4e, 0x67, 0xab, 0x08,
	0x18, 0xac, 0x66, 0x3f, 0xd9, 0xe5, 0xec, 0xe7, 0x8f, 0x33, 0x50, 0x4d, 0x6f, 0xf5, 0x57, 0xe0,
	0x42, 0x9f, 0x81, 0x4c, 0x16, 0xcc, 0x80, 0xd2, 0x30, 0x3e, 0x16, 0x5d, 0x5f, 0xc9, 0x2d, 0x50,
	0x76, 0xa3, 0x72, 0x9e, 0x7c, 0x33, 0xf5, 0x6f, 0x32, 0x50, 0x79, 0xe2, 0x87, 0xcf, 0xae, 0xe8,
	0xd4, 0xf2, 0x10, 0x2a, 0xcf, 0x25, 0xb7, 0x4b, 0x0f, 0x71, 0x10, 0x53, 0xe8, 0x01, 0xf9, 0x18,
	0xca, 0x71, 0x2b, 0x96, 0xfa, 0x5a, 0x8a, 0x3a, 0x96, 0xcc, 0x98, 0x53, 0xa9, 0x7d, 0x28, 0x76,
	0xce, 0x79, 0x94, 0xc4, 0x34, 0x57, 0x64, 0xc2, 0xe9, 0x75, 0x00, 0x01, 0x8a, 0x33, 0x6b, 0xb9,
	0x31, 0xa4, 0xf3, 0xee, 0x8a, 0x84, 0x21, 0x89, 0xfa, 0x19, 0x54, 0xb5, 0x17, 0x81, 0xcf, 0xa8,
	0x33, 0xf4, 0xc3, 0x88, 0x67, 0x8b, 0xf8, 0x21, 0x99, 0xf1, 0x6f, 0x4c, 0x3b, 0x87, 0x78, 0xd4,
	0x8d, 0xd3, 0x4e, 0xde, 0x50, 0xff, 0xba, 0x08, 0xa5, 0x58, 0x40, 0xdc, 0xb6, 0x92, 0x89, 0xa7,
	0x84, 0xa9, 0xc6, 0x40, 0x2e, 0xce, 0x8f, 0x52, 0x44, 0xdc, 0x25, 0x84, 0x7e, 0x6e, 0xac, 0x99,
	0x31, 0x4f, 0x7a, 0x93, 0xde, 0xdc, 0x61, 0xde, 0x85, 0x7a, 0xd2, 0x5b, 0x64, 0xc1, 0x22, 0x74,
	0x27, 0x3c, 0xbb, 0x3c, 0x1b, 0x8e, 0xdd, 0x3f, 0x95, 0xf3, 0x72, 0xf7, 0x8f, 0x4d, 0x93, 0x7a,
	0xb6, 0x15, 0xf0, 0x73, 0xac, 0x3c, 0x17, 0x94, 0x39, 0x04, 0x8f, 0xb0, 0xe4, 0x23, 0xd8, 0x9e,
	0x87, 0xbe, 0x14, 0xa1, 0x38, 0x21, 0x90, 0x04, 0xa7, 0x25, 0x3d, 0x6e, 0x41, 0xd9, 0x0d, 0xcc,
	0x20, 0xa4, 0x27, 0xee, 0x0b, 0x19, 0x21, 0x4b, 0x6e, 0x30, 0xe4, 0x6d, 0x5c, 0x1f, 0x37, 0x38,
	0xff, 0x34, 0x46, 0x8b, 0x68, 0x08, 0x08, 0x9a, 0x13, 0x4c, 0x2d, 0x3b, 0x71, 0x15, 0x11, 0x05,
	0x61, 0x6a, 0xd9, 0x71, 0x4c, 0xbd, 0x0d, 0x65, 0x17, 0x13, 0xb6, 0x13, 0xcb, 0x8e, 0x43, 0xe0,
	0x1c, 0x40, 0xbe, 0x05, 0x8a, 0xd8, 0xa0, 0xcd, 0x39, 0x91, 0x08, 0x86, 0x0d, 0x01, 0xef, 0x26,
	0xa4, 0x3f, 0x81, 0x7a, 0x42, 0x23, 0x74, 0x5f, 0x5d, 0xc9, 0xab, 0x12, 0x6a, 0xae, 0xfc, 0x9a,
	0x9b, 0x6e, 0xf2, 0x23, 0x95, 0xeb, 0x79, 0xd4, 0x31, 0x79, 0x0e, 0x54, 0x93, 0x47, 0x2a, 0x0e,
	0xe2, 0x46, 0x72, 0x0f, 0x2a, 0xb3, 0x60, 0xe2, 0x7a, 0xcf, 0x84, 0xca, 0xea, 0x82, 0x40, 0x80,
	0xb8, 0xaa, 0xda, 0xd0, 0x48, 0xd6, 0x4f, 0x66, 0x9c, 0x8d, 0x57, 0x7a, 0x57, 0xb2, 0xe4, 0x32,
	0xeb, 0x54, 0xa1, 0xc6, 0xa8, 0x6d, 0xce, 0x75, 0xae, 0xf0, 0x40, 0x55, 0x61, 0xd4, 0xee, 0xc6,
	0x6a, 0x7f, 0x0f, 0x1a, 0x82, 0x66, 0xae, 0xfa, 0x2d, 0x4e, 0x55, 0xe3, 0x54, 0x89, 0xf6, 0x09,
	0xe4, 0xed, 0x60, 0xc6, 0x9a, 0x84, 0x8b, 0xca, 0xbf, 0x31, 0x03, 0x9a, 0xd2, 0xa9, 0x1f, 0x5e,
	0xf0, 0x54, 0xb1, 0x66, 0xc8, 0x16, 0x1e, 0x5e, 0xa7, 0xa7, 0xd3, 0x08, 0xa3, 0xcf, 0x75, 0x91,
	0x1a, 0x61, 0xb3, 0x1b, 0x90, 0x77, 0x20, 0xe7, 0x9c, 0xb3, 0xe6, 0xce, 0x4a, 0x89, 0x42, 0x3a,
	0xa9, 0x81, 0xe8, 0x65, 0x4f, 0xbd, 0xf1, 0x4a, 0x4f, 0x6d, 0xae, 0x78, 0x2a, 0x7a, 0x0f, 0x15,
	0x9e, 0xca, 0x97, 0x80, 0x35, 0x6f, 0xae, 0xec, 0x4d, 0x69, 0x4f, 0x36, 0xaa, 0x34, 0xd5, 0x52,
	0xff, 0x2b, 0x03, 0x30, 0x0e, 0xdd, 0xd3, 0x53, 0x1a, 0x5e, 0x41, 0x9c, 0xfb, 0x04, 0x20, 0x12,
	0xcc, 0xe6, 0x61, 0x6e, 0x3b, 0x9d, 0xa2, 0x0b, 0xa4, 0x1e, 0x18, 0xe5, 0x28, 0xfe, 0x24, 0x3f,
	0x80, 0x6a, 0xdc, 0x09, 0xa9, 0xb8, 0xfb, 0xd6, 0x1f, 0xed, 0xac, 0x76, 0xeb, 0xfb, 0x0e, 0x35,
	0x2a, 0xd1, 0xbc, 0x41, 0x1e, 0x42, 0xc9, 0xf6, 0xa7, 0x53, 0xcb, 0x73, 0x44, 0x0a, 0xb4, 0xa8,
	0xea, 0xb6, 0x40, 0x19, 0x09, 0x8d, 0xfa, 0xaf, 0x39, 0x28, 0x4a, 0x28, 0xd9, 0x83, 0x3c, 0x1f,
	0x2e, 0xb3, 0x32, 0x9c, 0xa4, 0xe0, 0xc3, 0x71, 0x1a, 0x4c, 0x9f, 0x25, 0x8f, 0x38, 0xb1, 0x96,
	0xcd, 0xc5, 0xb0, 0x92, 0x5b, 0x0a, 0x2b, 0xf7, 0xa0, 0xc2, 0xcf, 0xca, 0x17, 0xe9, 0xa8, 0x03,
	0x02, 0x14, 0xd7, 0x2f, 0x4e, 0xfc, 0x90, 0x9e, 0x86, 0xfe, 0xcc, 0x73, 0xcc, 0xc8, 0x9d, 0x52,
	0x7f, 0x16, 0xd7, 0x25, 0xb6, 0xe6, 0x98, 0xb1, 0x40, 0x20, 0xbf, 0x70, 0xe6, 0x79, 0xae, 0x77,
	0x6a, 0x3a, 0x6e, 0x28, 0xf3, 0x35, 0x90, 0xa0, 0x8e, 0x1b, 0xa2, 0x99, 0xb2, 0xc8, 0x41, 0x1e,
	0x22, 0xe6, 0xc8, 0x96, 0x84, 0xd3, 0x30, 0x94, 0xc1, 0x46, 0xb6, 0x50, 0x7a, 0xfa, 0xc2, 0x8d,
	0x4c, 0x1b, 0x15, 0x81, 0x61, 0xa6, 0x60, 0x94, 0x10, 0xd0, 0xc6, 0x49, 0xef, 0xc0, 0xe6, 0x99,
	0xe5, 0x39, 0x93, 0x38, 0xc2, 0xc8, 0x16, 0x76, 0x42, 0x49, 0x1d, 0x13, 0xc7, 0xa9, 0xf0, 0x83,
	0x55, 0x89, 0x03, 0xf4, 0x59, 0xc4, 0x1d, 0x91, 0x8f, 0x69, 0xfa, 0x9e, 0x89, 0x03, 0x56, 0x65,
	0xc5, 0x8d, 0x03, 0x75, 0x4f, 0x0b, 0x43, 0x49, 0x43, 0xc3, 0x30, 0xa6, 0xa9, 0x25, 0x34, 0x34,
	0x0c, 0x05, 0xcd, 0x07, 0x40, 0x42, 0x1a, 0x85, 0x2e, 0x65, 0x48, 0x74, 0x62, 0xb9, 0x93, 0x59,
	0x48, 0x65, 0xf4, 0x50, 0x24, 0x46, 0xf7, 0x1e, 0x0b, 0xb8, 0xfa, 0x2f, 0x59, 0xa8, 0x26, 0xdb,
	0xb5, 0x7f, 0x4e, 0xc9, 0x77, 0x16, 0x2a, 0x28, 0xb7, 0xd6, 0xec, 0x24, 0x48, 0x96, 0x2a, 0xa1,
	0xa0, 0x4c, 0xa1, 0x6d, 0xce, 0xd7, 0x52, 0xee, 0x89, 0x2c, 0xb4, 0x07, 0xf1, 0x72, 0xaa, 0x50,
	0x73, 0x30, 0xb9, 0x59, 0x5a, 0xef, 0x8a, 0xc3, 0xa2, 0x84, 0x66, 0x65, 0xc3, 0xcb, 0xaf, 0xd9,
	0xf0, 0xde, 0x86, 0x1a, 0xaf, 0x32, 0xf9, 0xe7, 0x34, 0x0c, 0x5d, 0x87, 0xca, 0x15, 0xaf, 0x22,
	0x50, 0x97, 0x30, 0x9e, 0xfe, 0xcc, 0x42, 0x1e, 0xc6, 0x53, 0x9b, 0x4d, 0x45, 0xc2, 0x78, 0xe8,
	0x5c, 0x0a, 0x1f, 0xc5, 0x95, 0xf0, 0xb1, 0xec, 0xce, 0xa5, 0xd7, 0x72, 0x67, 0xf5, 0xef, 0x32,
	0xd0, 0x48, 0xeb, 0xeb, 0x0a, 0x22, 0xc4, 0xe7, 0xa9, 0xdd, 0x7a, 0xea, 0x9f, 0xd3, 0x75, 0xa9,
	0x74, 0x7a, 0xc8, 0xf9, 0x36, 0x8e, 0x2d, 0x46, 0xbe, 0x0d, 0x5b, 0x7e, 0x68, 0x9f, 0x51, 0x16,
	0x85, 0x56, 0xe4, 0x87, 0x7c, 0x31, 0xe4, 0x3a, 0x28, 0x69, 0x04, 0x2e, 0x88, 0xfa, 0x17, 0x19,
	0x28, 0x0e, 0xe4, 0x09, 0x78, 0x0f, 0xf2, 0xe3, 0xb9, 0x45, 0xa4, 0xdd, 0x5d, 0x52, 0x08, 0x63,
	0x18, 0x5f, 0x52, 0x9b, 0x45, 0x18, 0x5f, 0x86, 0x9c, 0xd8, 0x15, 0xf0, 0x1b, 0x13, 0x20, 0x51,
	0x6f, 0x17, 0xc7, 0x2f, 0x59, 0x5e, 0xc7, 0x60, 0x21, 0x2b, 0xeb, 0x05, 0x19, 0x2c, 0x64, 0x55,
	0x9d, 0x40, 0xde, 0x39, 0xb3, 0x03, 0xbe, 0x94, 0x25, 0x83, 0x7f, 0xab, 0x7f, 0x9f, 0x81, 0x8a,
	0x94, 0x80, 0x5d, 0x81, 0x7e, 0x3f, 0x48, 0x66, 0x2c, 0x15, 0x4b, 0x56, 0x67, 0x6a, 0x24, 0x4a,
	0xc1, 0xb8, 0x20, 0x6a, 0xa6, 0x39, 0x19, 0x17, 0x44, 0xa1, 0x74, 0xad, 0x96, 0xf3, 0x97, 0x68,
	0xf9, 0x17, 0x19, 0x50, 0xe4, 0xbd, 0xc1, 0x21, 0xb5, 0x26, 0xd1, 0xd9, 0x95, 0x94, 0xf9, 0x37,
	0xcf, 0x38, 0x2f, 0x39, 0x8b, 0xeb, 0x4b, 0x45, 0x7e, 0x31, 0x90, 0x21, 0x89, 0xd4, 0xff, 0xc9,
	0x00, 0xcc, 0xc1, 0x8b, 0x41, 0x39, 0xb3, 0x14, 0x94, 0x97, 0xaf, 0x36, 0xb2, 0xab, 0x57, 0x1b,
	0x2d, 0xa8, 0x08, 0xc6, 0x22, 0x30, 0x8a, 0x0d, 0xe9, 0xfe, 0x5a, 0x11, 0x1e, 0x8a, 0x1f, 0x0c,
	0x98, 0x06, 0x9c, 0x25, 0xdf, 0xea, 0xcf, 0x01, 0xe6, 0x18, 0x52, 0x83, 0xf2, 0xa1, 0xd6, 0xea,
	0x8d, 0x0f, 0x4d, 0xfd, 0x0b, 0x65, 0x83, 0x34, 0xa0, 0x32, 0x68, 0x0d, 0x7b, 0xda, 0xc8, 0xec,
	0xe8, 0x4f, 0x06, 0x4a, 0x06, 0xf1, 0x03, 0xbd, 0xa3, 0x89, 0x66, 0x96, 0x54, 0xa1, 0xd4, 0x1a,
	0x0e, 0x45, 0x2b, 0x47, 0xae, 0x41, 0x63, 0xa0, 0x8f, 0xcd, 0xa1, 0xa1, 0x1f, 0x77, 0x47, 0x5d,
	0x7d, 0xa0, 0x75, 0x94, 0xbc, 0xfa, 0x07, 0xd0, 0x90, 0x8b, 0xf8, 0xa5, 0xcf, 0xda, 0x13, 0x2b,
	0x55, 0xd0, 0xcd, 0xa4, 0xac, 0x56, 0x81, 0xdc, 0x34, 0x9a, 0xf1, 0x39, 0xd6, 0x0c, 0xfc, 0xc4,
	0x20, 0x16, 0x58, 0x33, 0x46, 0xcd, 0xe0, 0xc4, 0x36, 0x6d, 0x9f, 0x49, 0x83, 0xae, 0x70, 0xe0,
	0xf0, 0xc4, 0x6e, 0xfb, 0x4c, 0xb5, 0x41, 0x91, 0xcc, 0x87, 0xfe, 0xc4, 0xb5, 0x2f, 0xbe, 0xf4,
	0xd7, 0x73, 0xff, 0x21, 0x54, 0xbe, 0xf6, 0x99, 0x69, 0xe3, 0xf0, 0x89, 0x27, 0xef, 0xae, 0x1a,
	0x5c, 0x2c, 0xa2, 0x01, 0x5f, 0xcb, 0x2f, 0xca, 0xd4, 0x5e, 0x32, 0x48, 0x87, 0xd9, 0xc1, 0xe5,
	0x53, 0x40, 0xa7, 0x61, 0x76, 0x7c, 0xba, 0xe3, 0xdf, 0x38, 0xad, 0xb9, 0xe8, 0xf8, 0xa9, 0x9e,
	0xc2, 0x56, 0x8a, 0x9b, 0x10, 0x7b, 0x2d, 0xbb, 0xcf, 0xa1, 0x8a, 0x2c, 0x96, 0x84, 0xbe, 0xb5,
	0x2a, 0x74, 0x22, 0x15, 0x06, 0x78, 0xf9, 0x49, 0x99, 0xfa, 0x87, 0xc9, 0x40, 0x5f, 0xce, 0xe8,
	0x8c, 0x5e, 0x2e, 0xf7, 0x2e, 0x94, 0x82, 0xd0, 0xf5, 0x43, 0x37, 0xba, 0x90, 0xfa, 0x4f, 0xda,
	0x18, 0x22, 0x02, 0x1a, 0xda, 0xd4, 0x8b, 0xe4, 0x1c, 0xe2, 0xa6, 0xfa, 0x0c, 0x48, 0x9a, 0xfd,
	0x4b, 0x26, 0xd2, 0x82, 0xda, 0xd7, 0x48, 0xb2, 0x34, 0x93, 0xdb, 0x6b, 0xd4, 0x9f, 0x08, 0x6a,
	0x54, 0xbf, 0x4e, 0xbe, 0x29, 0x53, 0x7f, 0x91, 0x07, 0xe8, 0x58, 0x91, 0x25, 0xaf, 0x47, 0x96,
	0x0b, 0x9b, 0xe9, 0x22, 0x66, 0xf6, 0x25, 0x45, 0xcc, 0xdc, 0xd2, 0xd5, 0xd3, 0x36, 0x14, 0x44,
	0x26, 0x2a, 0xc3, 0x22, 0x6f, 0x90, 0x8f, 0xa1, 0xc0, 0x02, 0x4a, 0x1d, 0x1e, 0x14, 0x17, 0xf7,
	0xe4, 0xb9, 0x0c, 0x0f, 0x47, 0x48, 0x62, 0x08, 0xca, 0xd8, 0x7a, 0x37, 0xe7, 0xd6, 0xfb, 0x11,
	0x6c, 0x9f, 0x4c, 0xfc, 0xe7, 0x49, 0xed, 0x3c, 0xa4, 0x36, 0x75, 0xcf, 0xc5, 0xd6, 0x57, 0x32,
	0x08, 0xe2, 0x64, 0x65, 0xd0, 0x10, 0x18, 0xb2, 0x07, 0x5b, 0x0b, 0x3d, 0x18, 0xf5, 0x1c, 0xbe,
	0x0f, 0x96, 0x8c, 0x46, 0x8a, 0x7c, 0x44, 0x3d, 0x87, 0x7c, 0x08, 0xb9, 0xaf, 0x7d, 0x26, 0x2b,
	0xfc, 0x6b, 0x4c, 0x22, 0xf1, 0x06, 0x03, 0xe9, 0x70, 0x1b, 0x77, 0x4f, 0xa7, 0x81, 0xe9, 0xb8,
	0xcc, 0x7a, 0x3a, 0xa1, 0x0e, 0xcf, 0x93, 0x4a, 0x46, 0x15, 0x81, 0x1d, 0x09, 0x23, 0x1f, 0x49,
	0xf3, 0x15, 0x55, 0xf8, 0xdb, 0xeb, 0xed, 0x4c, 0x30, 0x96, 0xc6, 0xfd, 0x09, 0x14, 0xf8, 0x2a,
	0xc9, 0xc2, 0xfb, 0x9d, 0x4b, 0x16, 0x54, 0xf6, 0x11, 0xb4, 0xea, 0xa7, 0x50, 0xe0, 0xaa, 0x23,
	0x75, 0x00, 0xfe, 0x61, 0x7e, 0xfc, 0xd1, 0x47, 0x07, 0xca, 0x06, 0x86, 0x96, 0xb8, 0x7d, 0xa0,
	0x64, 0xe6, 0x68, 0x6b, 0x16, 0xf9, 0x4a, 0x56, 0xfd, 0x55, 0x06, 0x8a, 0x3d, 0xd7, 0xa6, 0x18,
	0x74, 0xdf, 0xf4, 0xaa, 0x51, 0x81, 0xdc, 0x33, 0x1a, 0x17, 0x96, 0xf1, 0x13, 0xed, 0x95, 0xa7,
	0x5f, 0xf2, 0x6e, 0x09, 0xbf, 0xd5, 0x0f, 0xc5, 0x06, 0x4c, 0x14, 0xa8, 0xf6, 0xba, 0x6d, 0x6d,
	0x30, 0xd2, 0xcc, 0x81, 0x3e, 0xd0, 0x94, 0x0d, 0x0c, 0x70, 0x31, 0xe4, 0xb8, 0xad, 0x0d, 0xc6,
	0x9a, 0xa1, 0x64, 0xd4, 0xff, 0xce, 0x03, 0xc8, 0x8a, 0xfe, 0x15, 0xec, 0x27, 0x0f, 0x40, 0x89,
	0x6b, 0x98, 0xee, 0xd4, 0x4c, 0x5f, 0x96, 0xc9, 0xe2, 0xe2, 0xc8, 0x9d, 0x8a, 0x3a, 0x01, 0x9e,
	0xb8, 0x64, 0x65, 0x34, 0x55, 0x4c, 0xa8, 0xc8, 0xa2, 0x68, 0x4c, 0x12, 0x97, 0x5e, 0x39, 0x89,
	0xac, 0x98, 0xcb, 0xe2, 0x2b, 0x27, 0x79, 0x17, 0xea, 0x4e, 0xe8, 0x9e, 0xd3, 0xd0, 0x64, 0xfe,
	0x2c, 0xb4, 0xf9, 0x75, 0x1a, 0x2f, 0x4a, 0x08, 0xe8, 0x48, 0x00, 0xbf, 0xf1, 0x1d, 0x3a, 0x66,
	0x7a, 0x9e, 0x15, 0xb9, 0xe7, 0x54, 0xe4, 0x82, 0x45, 0x71, 0x8a, 0x16, 0x20, 0x9e, 0x0a, 0x7e,
	0x10, 0xa7, 0x22, 0xa2, 0x98, 0xbe, 0xb3, 0xfe, 0x5e, 0x24, 0x4e, 0x51, 0xd2, 0x2b, 0x5d, 0x7e,
	0xc9, 0x4a, 0xc3, 0xea, 0xa5, 0x72, 0x44, 0x59, 0xf4, 0x94, 0x3a, 0xa6, 0xeb, 0x70, 0x93, 0xae,
	0x19, 0x65, 0x09, 0xe9, 0x3a, 0xe4, 0xf7, 0xa0, 0xc6, 0x4b, 0xd6, 0x22, 0x8b, 0xa0, 0xac, 0x59,
	0x5d, 0xd9, 0xbc, 0xe7, 0xae, 0x6e, 0x54, 0x9d, 0xe4, 0x5b, 0x3c, 0x4a, 0x08, 0xe9, 0x53, 0xdf,
	0x17, 0xf9, 0x35, 0x8b, 0xcf, 0x04, 0x02, 0x36, 0xe0, 0x52, 0x3f, 0x84, 0xd2, 0x44, 0x98, 0x2a,
	0x6b, 0xd6, 0x57, 0x92, 0x1b, 0x69, 0xc5, 0x46, 0x42, 0x83, 0xae, 0x1f, 0x4b, 0xfb, 0x47, 0x0c,
	0x4f, 0x11, 0xee, 0x84, 0xf2, 0xda, 0x42, 0xd9, 0x68, 0x48, 0xc4, 0xef, 0x33, 0xdf, 0x7b, 0xec,
	0x4e, 0xa8, 0xfa, 0xcb, 0x2c, 0x54, 0x51, 0x51, 0x7c, 0xa4, 0x2b, 0xc9, 0xc3, 0xe4, 0x7a, 0x64,
	0x5f, 0x77, 0x3d, 0x5e, 0xe3, 0xba, 0x68, 0x45, 0x69, 0x85, 0x97, 0x2b, 0xad, 0xf6, 0x6a, 0xa5,
	0xa9, 0x4f, 0x01, 0xd0, 0xa0, 0x64, 0x0d, 0x76, 0x1b, 0x0a, 0x33, 0x8f, 0x51, 0x51, 0xf7, 0x2b,
	0x19, 0xa2, 0xc1, 0xef, 0x1e, 0xf0, 0xfc, 0x22, 0x2e, 0x8c, 0x64, 0xd9, 0x15, 0x21, 0xe2, 0xba,
	0x68, 0xc9, 0x58, 0x73, 0xcb, 0xc6, 0xaa, 0x9a, 0x50, 0x17, 0xeb, 0xfe, 0x78, 0x62, 0x05, 0xbc,
	0x64, 0xb9, 0x0d, 0x05, 0xdb, 0x9f, 0x79, 0x91, 0xbc, 0xd6, 0x12, 0x0d, 0x9c, 0x3a, 0xaf, 0x36,
	0x9d, 0x5b, 0x93, 0x78, 0x0b, 0x8d, 0xdb, 0x98, 0xe3, 0x39, 0xfe, 0x73, 0x8f, 0x1f, 0x9a, 0xe5,
	0x10, 0x25, 0x04, 0xe0, 0x59, 0x59, 0xfd, 0x16, 0x34, 0x86, 0x7e, 0x18, 0x0d, 0x31, 0xa7, 0x91,
	0x33, 0xd9, 0x81, 0x4d, 0xea, 0x61, 0x48, 0x96, 0x53, 0x91, 0x2d, 0xf5, 0x7d, 0xa8, 0x71, 0xd2,
	0x13, 0xfb, 0x15, 0x84, 0x3f, 0x11, 0x84, 0x98, 0xcb, 0xbc, 0x94, 0x50, 0xde, 0x96, 0x59, 0xd3,
	0xb8, 0xc6, 0x2d, 0x5b, 0x6a, 0x1b, 0xb6, 0x38, 0x83, 0x19, 0x9d, 0xb9, 0xde, 0xe9, 0x1b, 0x32,
	0xf9, 0xcf, 0x3c, 0x94, 0x85, 0xee, 0xae, 0xc0, 0x48, 0xdf, 0x86, 0x6c, 0x52, 0xa6, 0x49, 0xd7,
	0x97, 0xc5, 0x00, 0x7a, 0x60, 0x64, 0xfd, 0x80, 0x7c, 0x06, 0xe5, 0x93, 0x89, 0x15, 0x88, 0xab,
	0xba, 0x1c, 0x1f, 0xe0, 0xe6, 0x0a, 0x6d, 0xbc, 0x90, 0x87, 0x1b, 0x46, 0xe9, 0x24, 0x5e, 0xd4,
	0x95, 0x70, 0x90, 0xff, 0xe6, 0xe1, 0xe0, 0x33, 0xa8, 0x70, 0x13, 0x93, 0x17, 0xc4, 0x05, 0x3e,
	0xee, 0x42, 0xe5, 0x3e, 0x31, 0xd2, 0xc3, 0x8c, 0xc1, 0xcd, 0x31, 0xb9, 0xbd, 0x06, 0x4c, 0x38,
	0x4c, 0x9e, 0xd0, 0xca, 0x07, 0x09, 0x0b, 0x4f, 0x28, 0x16, 0x0d, 0xe3, 0x30, 0x6b, 0x94, 0x83,
	0x18, 0x44, 0xbe, 0x07, 0x25, 0xd1, 0xf9, 0xc4, 0x96, 0x2f, 0x11, 0x9a, 0xcb, 0x5d, 0x63, 0x43,
	0x39, 0xcc, 0x19, 0xc5, 0x40, 0x00, 0x92, 0x6e, 0x98, 0x3d, 0x94, 0xd6, 0x76, 0x4b, 0xcc, 0xe6,
	0x30, 0x2f, 0xba, 0x61, 0x4e, 0xdd, 0x82, 0xaa, 0xe8, 0x26, 0x4c, 0x42, 0x26, 0x1e, 0xb7, 0x97,
	0xbb, 0xa6, 0x0d, 0xe6, 0xb0, 0x60, 0x54, 0x82, 0x39, 0x70, 0xbf, 0x0c, 0x45, 0x5f, 0xac, 0xcd,
	0x7e, 0x2d, 0xa9, 0x06, 0xf0, 0x66, 0x15, 0x40, 0x24, 0xfa, 0xbc, 0x05, 0x50, 0xc2, 0x84, 0x9f,
	0x7f, 0x37, 0xa0, 0x16, 0x4b, 0x2b, 0x00, 0xd7, 0x60, 0x2b, 0x2d, 0x87, 0xb8, 0xf1, 0xfe, 0x75,
	0x19, 0x2a, 0xa9, 0x50, 0xf5, 0x92, 0x47, 0x29, 0x29, 0xaa, 0x54, 0x45, 0xe5, 0xe5, 0xd7, 0x3d,
	0xe4, 0x3d, 0x68, 0xd8, 0xee, 0xd4, 0x36, 0x57, 0x9e, 0xa8, 0xd4, 0x10, 0x3c, 0xbf, 0x3e, 0x7c,
	0x1b, 0x38, 0x60, 0x7e, 0x79, 0x28, 0x0b, 0x2a, 0x08, 0x4c, 0xae, 0x0e, 0x63, 0xa2, 0x24, 0x50,
	0x16, 0xe6, 0x44, 0xc3, 0x54, 0xb0, 0xa4, 0xec, 0xc5, 0x9c, 0x91, 0x28, 0x9f, 0x55, 0x28, 0x7b,
	0x91, 0xf0, 0x91, 0x24, 0x09, 0x9b, 0x62, 0x42, 0x92, 0x70, 0x79, 0x07, 0xea, 0x9e, 0xbb, 0x20,
	0xb6, 0x28, 0xa9, 0x55, 0x3d, 0x37, 0x25, 0xf5, 0x27, 0xb0, 0x23, 0x9f, 0xa2, 0x30, 0x7f, 0x42,
	0xd3, 0xd4, 0x62, 0xbb, 0xbd, 0xe6, 0xf1, 0xbb, 0x40, 0x44, 0xce, 0x3b, 0x61, 0x92, 0x92, 0xea,
	0xc4, 0x0b, 0xea, 0x20, 0x93, 0x94, 0x84, 0x9c, 0x17, 0xd5, 0x3f, 0x82, 0xed, 0x34, 0x65, 0x32,
	0x25, 0x51, 0xe5, 0x27, 0x73, 0xea, 0x64, 0x66, 0x4b, 0x3d, 0x92, 0x19, 0x56, 0x97, 0x7b, 0xa4,
	0xd5, 0x85, 0x3d, 0x12, 0xde, 0x35, 0x99, 0x08, 0xb9, 0x76, 0x5a, 0x5d, 0x48, 0x92, 0x30, 0xab,
	0x27, 0x24, 0x09, 0x97, 0x7b, 0x50, 0x71, 0x3d, 0x37, 0x8a, 0xdf, 0x82, 0x34, 0xe4, 0x5d, 0x87,
	0xe7, 0x46, 0xf2, 0x21, 0xc8, 0xf2, 0x2d, 0x9f, 0xb2, 0x7a, 0xcb, 0xf7, 0x1e, 0x34, 0xa4, 0x61,
	0x73, 0x2b, 0x75, 0x1d, 0xc6, 0x0b, 0xf7, 0x35, 0xa3, 0x26, 0xc0, 0xa8, 0x92, 0xae, 0xc3, 0xe4,
	0xc3, 0x10, 0xf2, 0x0d, 0x1e, 0x86, 0x7c, 0x0a, 0x4d, 0xfe, 0xfa, 0x24, 0x0a, 0x27, 0xa2, 0x9c,
	0x97, 0x5a, 0x20, 0xf1, 0x16, 0x64, 0x9b, 0xb2, 0x17, 0xed, 0x28, 0x9c, 0x60, 0xa7, 0xf9, 0x0a,
	0xc9, 0x7b, 0x5b, 0x7e, 0x85, 0xbc, 0x9d, 0xdc, 0xdb, 0xf2, 0x1b, 0xe4, 0x85, 0x9a, 0xc3, 0xf5,
	0xd5, 0x42, 0x30, 0xa3, 0x21, 0xa6, 0x83, 0xdc, 0x85, 0x76, 0x64, 0xa1, 0x8e, 0x83, 0x78, 0x52,
	0xdc, 0x84, 0xa2, 0xdc, 0x81, 0xe5, 0x25, 0x40, 0xdc, 0x24, 0x1f, 0x42, 0xc9, 0x0a, 0x84, 0xe3,
	0xf2, 0xea, 0xff, 0xe2, 0xfe, 0x2d, 0xdf, 0xa4, 0x18, 0x45, 0x4b, 0x3e, 0x4e, 0xb9, 0x05, 0x65,
	0x71, 0x21, 0x81, 0xba, 0xbc, 0x29, 0xc4, 0xe0, 0x57, 0x12, 0xa8, 0xc8, 0xd4, 0x53, 0xbb, 0xdd,
	0x85, 0xa7, 0x76, 0xf3, 0x3a, 0xd0, 0xad, 0x85, 0x3a, 0xd0, 0x0d, 0x28, 0x7a, 0xbe, 0x89, 0xfd,
	0x9b, 0xb7, 0xc5, 0xf6, 0xe4, 0xf9, 0xfd, 0xd3, 0x69, 0x44, 0xee, 0x03, 0xf7, 0x2d, 0xfe, 0x1c,
	0xd2, 0x74, 0x83, 0xe6, 0x1d, 0x31, 0x23, 0x84, 0x0d, 0x6c, 0xe6, 0x76, 0x03, 0xf2, 0x7d, 0x68,
	0xe2, 0x11, 0x03, 0x0f, 0x47, 0xb6, 0x8f, 0x33, 0xf7, 0x3d, 0xf1, 0x7a, 0x65, 0x32, 0x69, 0xde,
	0xe5, 0xbc, 0xae, 0x23, 0xbe, 0x23, 0xd1, 0xba, 0xd7, 0x15, 0x48, 0x7e, 0xaa, 0x92, 0x2f, 0x5a,
	0x84, 0xa8, 0xf7, 0x84, 0x7f, 0xc5, 0xc0, 0x41, 0xfc, 0x06, 0x51, 0x3c, 0x47, 0x6b, 0xfb, 0xc1,
	0xc5, 0x15, 0x6c, 0x85, 0x9f, 0x42, 0xd9, 0x71, 0x43, 0x6a, 0x47, 0xae, 0xef, 0xc9, 0x1d, 0xb1,
	0xb9, 0x70, 0x25, 0x10, 0x5c, 0x74, 0x62, 0xbc, 0x31, 0x27, 0xfd, 0x1d, 0xeb, 0xff, 0xdb, 0x50,
	0xc0, 0xa4, 0x34, 0xbe, 0x57, 0x17, 0x0d, 0xb4, 0x32, 0x87, 0xb2, 0x28, 0x55, 0xe3, 0x2f, 0x62,
	0xbb, 0xe3, 0x86, 0xea, 0xdf, 0x66, 0x60, 0xab, 0xe3, 0x3f, 0xf7, 0x26, 0xbe, 0xe5, 0xb4, 0x18,
	0xa3, 0xd1, 0x55, 0xe4, 0xaa, 0x77, 0x00, 0x2c, 0xe4, 0x95, 0x2e, 0x7c, 0x97, 0x39, 0x64, 0x20,
	0xdf, 0x65, 0x84, 0x74, 0x42, 0x2d, 0x46, 0xcd, 0x73, 0x1a, 0x32, 0x54, 0x90, 0x98, 0x68, 0x5d,
	0x82, 0x8f, 0x05, 0x14, 0xf9, 0xc8, 0x7b, 0x47, 0x94, 0x5c, 0xcc, 0xb6, 0x2c, 0x20, 0x28, 0xfb,
	0x6f, 0x32, 0x70, 0x6d, 0x18, 0x52, 0x04, 0x3c, 0xf1, 0xc3, 0x67, 0x2c, 0xb0, 0x6c, 0x7a, 0x35,
	0xd2, 0x9f, 0x3c, 0x4f, 0x24, 0x93, 0xd2, 0x9f, 0x3c, 0x8f, 0x85, 0x9a, 0x9f, 0xc4, 0x16, 0x85,
	0x97, 0x27, 0xb1, 0x14, 0x99, 0x3c, 0xd3, 0xc5, 0x64, 0xf2, 0x3d, 0xac, 0x80, 0xae, 0x9f, 0x62,
	0x61, 0x69, 0x8a, 0x7b, 0x6d, 0xc8, 0xea, 0x01, 0x29, 0x41, 0x5e, 0x9e, 0x6c, 0x8b, 0x90, 0x6b,
	0x75, 0x3a, 0x4a, 0x86, 0x00, 0x6c, 0x76, 0xb4, 0x9e, 0x36, 0xd6, 0x94, 0x2c, 0x02, 0x0f, 0xb4,
	0xb1, 0x92, 0x43, 0xba, 0x51, 0xeb, 0x58, 0x53, 0xf2, 0xa4, 0x02, 0x45, 0x43, 0x1b, 0x8d, 0x75,
	0x43, 0x53, 0x0a, 0x7b, 0x7f, 0x99, 0x87, 0xc6, 0xd2, 0x3b, 0x4f, 0xb2, 0x0d, 0xca, 0x50, 0x33,
	0x46, 0xfa, 0xa0, 0xd5, 0xeb, 0x8e, 0x7f, 0x16, 0x1f, 0x9c, 0x77, 0x61, 0x67, 0x01, 0x2a, 0x6a,
	0x8a, 0xa3, 0x6e, 0x5f, 0xc9, 0x90, 0xfb, 0x70, 0x7b, 0x0d, 0xae, 0x7f, 0xd4, 0x1b, 0x77, 0x39,
	0x45, 0x96, 0xa8, 0x70, 0x77, 0x0d, 0x45, 0x5b, 0x1f, 0x8c, 0x0d, 0xbd, 0xc7, 0x69, 0x72, 0x64,
	0x07, 0x48, 0x9a, 0xe6, 0x58, 0x1b, 0x74, 0xdb, 0x28, 0xf0, 0x3b, 0x70, 0x7f, 0xfd, 0xc8, 0xe6,
	0x93, 0xee, 0xf8, 0xd0, 0xfc, 0x52, 0xeb, 0x1f, 0x29, 0x85, 0xe5, 0xde, 0x82, 0x4a, 0xd9, 0x24,
	0xb7, 0xe0, 0xc6, 0x9a, 0xde, 0xfb, 0xdd, 0xf1, 0x13, 0xa5, 0x78, 0x89, 0xe0, 0x88, 0x34, 0x87,
	0x9a, 0xf1, 0x58, 0x29, 0x91, 0x7b, 0x70, 0x2b, 0x4d, 0x31, 0x3e, 0xec, 0x1a, 0x1d, 0x73, 0xd8,
	0x32, 0x90, 0xba, 0xdb, 0x56, 0xca, 0xa4, 0x09, 0xdb, 0x69, 0x82, 0xbe, 0xd6, 0xeb, 0xb5, 0x06,
	0xfa, 0x57, 0x0a, 0x2c, 0x63, 0xf6, 0x0d, 0xbd, 0xd5, 0x69, 0xeb, 0x7d, 0xa5, 0x42, 0xae, 0xc3,
	0x56, 0x1a, 0xd3, 0x1d, 0x8c, 0xb5, 0x9e, 0x52, 0x25, 0xb7, 0xa1, 0x99, 0x06, 0xb7, 0xf5, 0x7e,
	0xbf, 0x35, 0xe8, 0x98, 0x03, 0xbd, 0xa3, 0x29, 0x35, 0x72, 0x13, 0xae, 0xaf, 0xaa, 0xc7, 0xdc,
	0xef, 0x2b, 0xf5, 0xe5, 0x8e, 0xb2, 0xb0, 0x21, 0x3a, 0x36, 0x2e, 0x59, 0xb9, 0xce, 0xf1, 0x48,
	0x51, 0xc8, 0xdb, 0x70, 0xef, 0x25, 0xd3, 0xe3, 0x44, 0x5b, 0x7b, 0x43, 0x80, 0xf9, 0x93, 0x72,
	0x34, 0x0f, 0x6d, 0x30, 0xe6, 0xd4, 0x3f, 0x1b, 0x26, 0x75, 0x95, 0x25, 0xe8, 0xa1, 0x3e, 0x1a,
	0x2b, 0x19, 0x5c, 0x94, 0x05, 0x5a, 0xb1, 0x28, 0xd9, 0xbd, 0x3f, 0xc9, 0x40, 0x6d, 0xe1, 0xaa,
	0x9f, 0xdc, 0x80, 0x6b, 0xa8, 0x06, 0xe3, 0x71, 0xab, 0xad, 0x2d, 0x30, 0xde, 0x01, 0xb2, 0x84,
	0x38, 0x1e, 0x8d, 0x94, 0x0c, 0x6a, 0x77, 0x09, 0x3e, 0x32, 0xba, 0xfa, 0xb1, 0x92, 0x5d, 0xd3,
	0x03, 0xa7, 0x91, 0x43, 0x2d, 0xad, 0xc2, 0xcd, 0xe1, 0x71, 0xaf, 0x35, 0x50, 0xf2, 0x7b, 0xff,
	0x9b, 0x99, 0x5f, 0xeb, 0x71, 0x89, 0x76, 0x80, 0x3c, 0xd1, 0x8d, 0x2f, 0x7a, 0x7a, 0xab, 0xb3,
	0x20, 0xd0, 0x2d, 0xb8, 0xb1, 0x08, 0x47, 0x2b, 0x6e, 0x75, 0x07, 0x9a, 0xa1, 0x64, 0x50, 0x0d,
	0x8b, 0xc8, 0x63, 0xb4, 0xfe, 0xdb, 0xd0, 0x5c, 0x84, 0xee, 0xb7, 0x0c, 0xcd, 0xec, 0x6b, 0xe3,
	0x56, 0x4f, 0xc9, 0x91, 0x77, 0xe1, 0xad, 0xcb, 0xb0, 0x66, 0xbf, 0xd5, 0x36, 0x85, 0x80, 0xe4,
	0xdb, 0xf0, 0xfe, 0x2b, 0xc9, 0x4c, 0x6d, 0xd0, 0x6e, 0x0d, 0x95, 0x02, 0xfa, 0xcc, 0x25, 0x42,
	0xce, 0x59, 0x6e, 0xee, 0x8d, 0xa1, 0x9c, 0xdc, 0x92, 0x93, 0x1a, 0x94, 0xd3, 0xd3, 0xac, 0x41,
	0x59, 0xfb, 0x4a, 0x6b, 0x9b, 0xed, 0x7e, 0x07, 0xd5, 0xbd, 0x05, 0xb5, 0x27, 0xad, 0xee, 0xd8,
	0x7c, 0xac, 0x1b, 0x02, 0xc4, 0xf5, 0x3c, 0xd6, 0x8c, 0x7e, 0x77, 0xd0, 0x1a, 0x6b, 0x66, 0xab,
	0xd7, 0x13, 0xf0, 0xdc, 0x9e, 0x05, 0x95, 0xd4, 0x25, 0x3a, 0x32, 0xea, 0xeb, 0x9d, 0x84, 0x2f,
	0x81, 0xfa, 0xd8, 0xe8, 0x1e, 0x1c, 0x68, 0x86, 0x39, 0xd2, 0x8c, 0x6e, 0xab, 0x27, 0xb4, 0x16,
	0xc3, 0x86, 0x2d, 0xa3, 0xd5, 0xeb, 0x69, 0x3d, 0x25, 0x8b, 0x06, 0x1f, 0x43, 0xf9, 0x85, 0x45,
	0x82, 0xca, 0xed, 0xe9, 0x50, 0x49, 0x5d, 0x9c, 0x13, 0x05, 0xaa, 0x73, 0x67, 0x89, 0xad, 0x26,
	0x86, 0x3c, 0xd6, 0x0d, 0xed, 0xc0, 0xd0, 0x8f, 0x06, 0x1d, 0x61, 0x90, 0x31, 0x7c, 0xbf, 0xd5,
	0xfe, 0x42, 0xc2, 0xb3, 0x7b, 0x8f, 0x40, 0x59, 0xbe, 0xac, 0x25, 0x77, 0x61, 0x37, 0xd1, 0x61,
	0x5f, 0x3f, 0x8e, 0x6d, 0x46, 0x7b, 0xdc, 0x3a, 0xea, 0x8d, 0x95, 0x8d, 0x3d, 0x2d, 0xb9, 0x4c,
	0x93, 0x69, 0xd5, 0xf6, 0x40, 0x1b, 0x63, 0x8f, 0x25, 0x42, 0x5c, 0xfe, 0x05, 0xcc, 0x71, 0xff,
	0x0b, 0xf3, 0xb8, 0xaf, 0x8f, 0xbb, 0xfa, 0x40, 0xc9, 0xec, 0xfd, 0x63, 0x06, 0x4a, 0xf1, 0x21,
	0x18, 0x83, 0xb3, 0x3e, 0x8c, 0x27, 0x51, 0x07, 0x18, 0x1d, 0x1e, 0x8d, 0xcd, 0xa1, 0x6e, 0x8c,
	0xe5, 0x1a, 0x0c, 0x74, 0x33, 0x05, 0xca, 0x22, 0xc9, 0xe3, 0x5e, 0x6b, 0x28, 0xdb, 0x79, 0xd2,
	0x80, 0x0a, 0xb7, 0x83, 0xb6, 0x3e, 0x78, 0xdc, 0x3d, 0x50, 0x0a, 0x3c, 0xd4, 0xe8, 0xc6, 0xd8,
	0x1c, 0xb6, 0x8e, 0x46, 0x5a, 0x0c, 0xde, 0x24, 0xd7, 0xa0, 0x21, 0xc0, 0x8f, 0xdb, 0x31, 0xb0,
	0x98, 0x00, 0xbf, 0xd4, 0x47, 0x31, 0xb0, 0x84, 0x8e, 0x29, 0x80, 0x47, 0xda, 0x51, 0x77, 0x70,
	0x10, 0x23, 0xca, 0xc8, 0xb9, 0x6d, 0x68, 0xb8, 0xf6, 0x29, 0x7a, 0xd8, 0xfb, 0x8f, 0x0c, 0x34,
	0x96, 0x0e, 0x69, 0x18, 0x81, 0xc6, 0xda, 0x68, 0xbc, 0xaf, 0x89, 0x60, 0xb6, 0xe0, 0x4e, 0xb8,
	0xca, 0x2b, 0x38, 0xb1, 0xad, 0x34, 0x61, 0x7b, 0x15, 0x75, 0xf8, 0x44, 0xc9, 0x62, 0x54, 0x5e,
	0xc5, 0xcc, 0xf7, 0x9b, 0xdc, 0x7a, 0x82, 0x79, 0xc8, 0xcc, 0x93, 0x3b, 0x70, 0x73, 0x0d, 0x81,
	0xac, 0x08, 0x17, 0xc8, 0x5b, 0x70, 0x67, 0x15, 0x9d, 0x8a, 0x8e, 0xca, 0xe6, 0xde, 0xaf, 0x33,
	0x50, 0x5b, 0xc8, 0xf6, 0x57, 0xa6, 0xa2, 0x8f, 0xcc, 0x5e, 0x77, 0x70, 0xf4, 0x95, 0x08, 0x1a,
	0xcb, 0xa8, 0xc7, 0x86, 0xa6, 0xed, 0x8f, 0xd0, 0x28, 0x6f, 0xc0, 0xb5, 0x65, 0xa4, 0x36, 0xfa,
	0x4a, 0xc9, 0xae, 0xeb, 0x15, 0x8b, 0x98, 0x5b, 0x87, 0x7c, 0xd2, 0x1d, 0x74, 0xf4, 0x27, 0x23,
	0x25, 0xbf, 0xf7, 0x29, 0xd4, 0x16, 0xd2, 0x48, 0x52, 0x85, 0x52, 0xa7, 0x6b, 0xc4, 0x4a, 0xc7,
	0x14, 0xa1, 0x6b, 0x98, 0xdd, 0x81, 0x92, 0x41, 0x93, 0xc3, 0x6f, 0xfd, 0x68, 0xac, 0x64, 0x1f,
	0xfd, 0xaa, 0x0a, 0x95, 0xb1, 0x1f, 0xf8, 0x13, 0xff, 0xf4, 0xa2, 0x15, 0xb8, 0xe4, 0x73, 0xa8,
	0xca, 0x5c, 0x59, 0xd4, 0x9a, 0xaf, 0xaf, 0x1e, 0x75, 0xfa, 0xec, 0x74, 0x77, 0x3d, 0x58, 0xdd,
	0x20, 0x3f, 0x86, 0x4a, 0xd7, 0x73, 0x23, 0x09, 0x7b, 0xed, 0xee, 0x3f, 0x02, 0x38, 0xa0, 0x6f,
	0xdc, 0xfb, 0xa7, 0x50, 0x6f, 0x4f, 0xa8, 0xe5, 0x1d, 0x05, 0x6f, 0xca, 0xe1, 0x27, 0x50, 0x46,
	0xf1, 0x45, 0x75, 0xf3, 0xc6, 0x12, 0x55, 0x5c, 0xbe, 0xdd, 0xbd, 0x0c, 0xc1, 0x45, 0x00, 0x2e,
	0xc2, 0x9b, 0x73, 0x68, 0x61, 0x12, 0x1e, 0xc7, 0x07, 0x1a, 0x5a, 0x7c, 0x35, 0xb7, 0x57, 0x8a,
	0x62, 0xc8, 0x65, 0x2d, 0x54, 0xdd, 0x20, 0xdf, 0x85, 0x52, 0xcb, 0x71, 0x84, 0x08, 0x6b, 0xfe,
	0xc1, 0xb6, 0xbb, 0x06, 0xa6, 0x6e, 0x90, 0x1f, 0x42, 0x45, 0xfc, 0x93, 0x4e, 0x74, 0x4c, 0x33,
	0x4f, 0xfe, 0x61, 0xb7, 0xbb, 0x16, 0xaa, 0x6e, 0x90, 0xcf, 0xa1, 0xde, 0x0d, 0xa6, 0x2e, 0x76,
	0x6d, 0xd9, 0x2b, 0x22, 0xbf, 0xba, 0xff, 0xf7, 0xa1, 0xd2, 0xa1, 0x13, 0x1a, 0xd1, 0xd7, 0x95,
	0xfa, 0xbb, 0x50, 0x3a, 0xa0, 0xd1, 0xeb, 0xf6, 0xfa, 0x1e, 0x94, 0x47, 0xd6, 0xf9, 0x6b, 0x0f,
	0xf6, 0x19, 0x54, 0xe5, 0x3f, 0xfb, 0x5e, 0xb7, 0xe7, 0x4f, 0xa1, 0xda, 0x72, 0x9c, 0x78, 0xcb,
	0x61, 0x64, 0x67, 0xdd, 0x93, 0x14, 0x76, 0xba, 0x7b, 0x09, 0x5c, 0x70, 0x38, 0xa0, 0xd1, 0xef,
	0xc2, 0xa1, 0x0d, 0x0d, 0xa1, 0xe3, 0xdf, 0x85, 0xc9, 0x0f, 0xa0, 0x28, 0x37, 0xfb, 0x45, 0xe7,
	0x4a, 0x9e, 0xf9, 0xed, 0xae, 0x07, 0xab, 0x1b, 0xe4, 0x00, 0x48, 0xfb, 0x8c, 0xda, 0xcf, 0x16,
	0xde, 0x73, 0xac, 0xd5, 0x61, 0xfa, 0x7a, 0x74, 0xf9, 0xf5, 0x87, 0xba, 0x41, 0xf6, 0xe3, 0xfc,
	0x14, 0x43, 0x1e, 0x69, 0xae, 0xfc, 0x8b, 0x4c, 0x1e, 0xdb, 0x77, 0x2f, 0xc5, 0xa8, 0x1b, 0x64,
	0x00, 0xf5, 0xc5, 0xb3, 0x2e, 0x49, 0x97, 0x46, 0x57, 0x8e, 0xc1, 0xbb, 0x2f, 0xc5, 0xaa, 0x1b,
	0xa4, 0x0b, 0x35, 0x4c, 0x24, 0xe6, 0xaa, 0xdd, 0xbd, 0xe4, 0xd1, 0x11, 0x32, 0x7b, 0x09, 0x8e,
	0x07, 0xa1, 0x0a, 0xba, 0xaf, 0x7c, 0xb7, 0x43, 0xd6, 0x3c, 0x27, 0x62, 0xcb, 0x6b, 0x94, 0x82,
	0x73, 0xfd, 0xd4, 0x0d, 0x3a, 0xf5, 0xcf, 0xe9, 0x9b, 0xf3, 0xd8, 0x57, 0xfe, 0xe1, 0xb7, 0x77,
	0x33, 0xff, 0xf4, 0xdb, 0xbb, 0x99, 0xdf, 0xfc, 0xf6, 0x6e, 0xe6, 0x4f, 0xff, 0xfd, 0xee, 0xc6,
	0xd3, 0x4d, 0xfe, 0xd7, 0xe3, 0x4f, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xc6, 0x6f, 0x4f,
	0xa9, 0x3c, 0x00, 0x00,
}
