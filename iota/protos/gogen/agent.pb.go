// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IotaAgentApi service

type IotaAgentApiClient interface {
	// AddNode brings up the node with the personality
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// DeleteNode, remove the personaltiy set
	DeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// AddWorkloads brings up a workload type on a given node
	AddWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error)
	// DeleteWorkloads deletes workloads specified
	DeleteWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error)
	// Trigger invokes the workload's trigger. It could be ping, start client/server etc..
	Trigger(ctx context.Context, in *TriggerMsg, opts ...grpc.CallOption) (*TriggerMsg, error)
	// CheckClusterHealth returns the cluster health
	CheckHealth(ctx context.Context, in *NodeHealth, opts ...grpc.CallOption) (*NodeHealth, error)
	// Save Node will save context on node for possible node reboot
	SaveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Load Node will save, reboot and load context
	ReloadNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
}

type iotaAgentApiClient struct {
	cc *grpc.ClientConn
}

func NewIotaAgentApiClient(cc *grpc.ClientConn) IotaAgentApiClient {
	return &iotaAgentApiClient{cc}
}

func (c *iotaAgentApiClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) DeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/DeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) AddWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error) {
	out := new(WorkloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/AddWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) DeleteWorkloads(ctx context.Context, in *WorkloadMsg, opts ...grpc.CallOption) (*WorkloadMsg, error) {
	out := new(WorkloadMsg)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/DeleteWorkloads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) Trigger(ctx context.Context, in *TriggerMsg, opts ...grpc.CallOption) (*TriggerMsg, error) {
	out := new(TriggerMsg)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) CheckHealth(ctx context.Context, in *NodeHealth, opts ...grpc.CallOption) (*NodeHealth, error) {
	out := new(NodeHealth)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) SaveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/SaveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotaAgentApiClient) ReloadNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/iotamodel.IotaAgentApi/ReloadNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotaAgentApi service

type IotaAgentApiServer interface {
	// AddNode brings up the node with the personality
	AddNode(context.Context, *Node) (*Node, error)
	// DeleteNode, remove the personaltiy set
	DeleteNode(context.Context, *Node) (*Node, error)
	// AddWorkloads brings up a workload type on a given node
	AddWorkloads(context.Context, *WorkloadMsg) (*WorkloadMsg, error)
	// DeleteWorkloads deletes workloads specified
	DeleteWorkloads(context.Context, *WorkloadMsg) (*WorkloadMsg, error)
	// Trigger invokes the workload's trigger. It could be ping, start client/server etc..
	Trigger(context.Context, *TriggerMsg) (*TriggerMsg, error)
	// CheckClusterHealth returns the cluster health
	CheckHealth(context.Context, *NodeHealth) (*NodeHealth, error)
	// Save Node will save context on node for possible node reboot
	SaveNode(context.Context, *Node) (*Node, error)
	// Load Node will save, reboot and load context
	ReloadNode(context.Context, *Node) (*Node, error)
}

func RegisterIotaAgentApiServer(s *grpc.Server, srv IotaAgentApiServer) {
	s.RegisterService(&_IotaAgentApi_serviceDesc, srv)
}

func _IotaAgentApi_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).DeleteNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_AddWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).AddWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/AddWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).AddWorkloads(ctx, req.(*WorkloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_DeleteWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).DeleteWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/DeleteWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).DeleteWorkloads(ctx, req.(*WorkloadMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).Trigger(ctx, req.(*TriggerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHealth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).CheckHealth(ctx, req.(*NodeHealth))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_SaveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).SaveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/SaveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).SaveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotaAgentApi_ReloadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotaAgentApiServer).ReloadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.IotaAgentApi/ReloadNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotaAgentApiServer).ReloadNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _IotaAgentApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotamodel.IotaAgentApi",
	HandlerType: (*IotaAgentApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _IotaAgentApi_AddNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _IotaAgentApi_DeleteNode_Handler,
		},
		{
			MethodName: "AddWorkloads",
			Handler:    _IotaAgentApi_AddWorkloads_Handler,
		},
		{
			MethodName: "DeleteWorkloads",
			Handler:    _IotaAgentApi_DeleteWorkloads_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _IotaAgentApi_Trigger_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _IotaAgentApi_CheckHealth_Handler,
		},
		{
			MethodName: "SaveNode",
			Handler:    _IotaAgentApi_SaveNode_Handler,
		},
		{
			MethodName: "ReloadNode",
			Handler:    _IotaAgentApi_ReloadNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

func init() { proto.RegisterFile("agent.proto", fileDescriptorAgent) }

var fileDescriptorAgent = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0x4f, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xcc, 0x2f, 0x49, 0xcc, 0xcd, 0x4f,
	0x49, 0xcd, 0x91, 0xe2, 0x2b, 0xc9, 0x2f, 0xc8, 0x8f, 0x2f, 0x2e, 0x4b, 0x86, 0x48, 0x19, 0x5d,
	0x62, 0xe6, 0xe2, 0xf1, 0xcc, 0x2f, 0x49, 0x74, 0x04, 0x29, 0x77, 0x2c, 0xc8, 0x14, 0xd2, 0xe5,
	0x62, 0x77, 0x4c, 0x49, 0xf1, 0xcb, 0x4f, 0x49, 0x15, 0xe2, 0xd7, 0x83, 0xeb, 0xd3, 0x03, 0x09,
	0x48, 0xa1, 0x0b, 0x28, 0x31, 0x08, 0x19, 0x70, 0x71, 0xb9, 0xa4, 0xe6, 0xa4, 0x96, 0xa4, 0x12,
	0xad, 0xc3, 0x81, 0x8b, 0xc7, 0x31, 0x25, 0x25, 0x3c, 0xbf, 0x28, 0x3b, 0x27, 0x3f, 0x31, 0xa5,
	0x58, 0x48, 0x0c, 0x49, 0x09, 0x4c, 0xd4, 0xb7, 0x38, 0x5d, 0x0a, 0x87, 0xb8, 0x12, 0x83, 0x90,
	0x33, 0x17, 0x3f, 0xc4, 0x4e, 0x4a, 0x0c, 0xb1, 0xe4, 0x62, 0x0f, 0x29, 0xca, 0x4c, 0x4f, 0x4f,
	0x2d, 0x12, 0x12, 0x45, 0x52, 0x04, 0x15, 0x03, 0xe9, 0xc5, 0x2e, 0xac, 0xc4, 0x20, 0x64, 0xcb,
	0xc5, 0xed, 0x9c, 0x91, 0x9a, 0x9c, 0xed, 0x91, 0x9a, 0x98, 0x53, 0x92, 0x81, 0xa2, 0x1d, 0xe4,
	0x47, 0x88, 0xb0, 0x14, 0x76, 0x61, 0x25, 0x06, 0x21, 0x3d, 0x2e, 0x8e, 0xe0, 0xc4, 0xb2, 0x54,
	0x52, 0x82, 0x38, 0x28, 0x15, 0xe4, 0x70, 0x62, 0x75, 0x38, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x63,
	0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xb7, 0x66, 0x48, 0x17, 0x02, 0x00, 0x00,
}
