// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iota_types.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type APIResponseType int32

const (
	APIResponseType_API_STATUS_NONE     APIResponseType = 0
	APIResponseType_API_STATUS_OK       APIResponseType = 1
	APIResponseType_API_BAD_REQUEST     APIResponseType = 2
	APIResponseType_API_SERVER_ERROR    APIResponseType = 3
	APIResponseType_API_TESTBED_EXPIRED APIResponseType = 4
)

var APIResponseType_name = map[int32]string{
	0: "API_STATUS_NONE",
	1: "API_STATUS_OK",
	2: "API_BAD_REQUEST",
	3: "API_SERVER_ERROR",
	4: "API_TESTBED_EXPIRED",
}
var APIResponseType_value = map[string]int32{
	"API_STATUS_NONE":     0,
	"API_STATUS_OK":       1,
	"API_BAD_REQUEST":     2,
	"API_SERVER_ERROR":    3,
	"API_TESTBED_EXPIRED": 4,
}

func (x APIResponseType) String() string {
	return proto.EnumName(APIResponseType_name, int32(x))
}
func (APIResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorIotaTypes, []int{0} }

type IotaAPIResponse struct {
	// APIStatus captures call status
	ApiStatus APIResponseType `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=iotamodel.APIResponseType" json:"api_status,omitempty"`
	ErrorMsg  string          `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (m *IotaAPIResponse) Reset()                    { *m = IotaAPIResponse{} }
func (m *IotaAPIResponse) String() string            { return proto.CompactTextString(m) }
func (*IotaAPIResponse) ProtoMessage()               {}
func (*IotaAPIResponse) Descriptor() ([]byte, []int) { return fileDescriptorIotaTypes, []int{0} }

func (m *IotaAPIResponse) GetApiStatus() APIResponseType {
	if m != nil {
		return m.ApiStatus
	}
	return APIResponseType_API_STATUS_NONE
}

func (m *IotaAPIResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*IotaAPIResponse)(nil), "iotamodel.IotaAPIResponse")
	proto.RegisterEnum("iotamodel.APIResponseType", APIResponseType_name, APIResponseType_value)
}
func (m *IotaAPIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IotaAPIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIotaTypes(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIotaTypes(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func encodeVarintIotaTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IotaAPIResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIotaTypes(uint64(m.ApiStatus))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovIotaTypes(uint64(l))
	}
	return n
}

func sovIotaTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIotaTypes(x uint64) (n int) {
	return sovIotaTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IotaAPIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIotaTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IotaAPIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IotaAPIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIotaTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (APIResponseType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIotaTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIotaTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIotaTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIotaTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIotaTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIotaTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIotaTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIotaTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIotaTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIotaTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIotaTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIotaTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIotaTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("iota_types.proto", fileDescriptorIotaTypes) }

var fileDescriptorIotaTypes = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xb1, 0x4a, 0x03, 0x31,
	0x1c, 0xc7, 0xf1, 0xa6, 0x8a, 0x78, 0x01, 0x6d, 0x4c, 0x05, 0x8b, 0xc2, 0x51, 0x9c, 0x8a, 0xc3,
	0x0d, 0x3a, 0x39, 0xde, 0x71, 0xff, 0xe1, 0x10, 0x7b, 0xf5, 0x9f, 0x54, 0xdc, 0x42, 0xc4, 0x50,
	0x0e, 0xac, 0x09, 0x97, 0x38, 0x74, 0xf0, 0x3d, 0x7c, 0x24, 0x47, 0x1f, 0x41, 0xce, 0x17, 0x91,
	0x06, 0x94, 0xc3, 0xf5, 0xc3, 0xf7, 0xb7, 0xfc, 0x28, 0x6b, 0x6c, 0xd0, 0x2a, 0x6c, 0x9c, 0xf1,
	0x99, 0x6b, 0x6d, 0xb0, 0x3c, 0xd9, 0xca, 0xda, 0x3e, 0x99, 0xe7, 0xf3, 0x86, 0x8e, 0x2a, 0x1b,
	0x74, 0xbe, 0xa8, 0xd0, 0x78, 0x67, 0x5f, 0xbc, 0xe1, 0xd7, 0x94, 0x6a, 0xd7, 0x28, 0x1f, 0x74,
	0x78, 0xf5, 0x13, 0x32, 0x25, 0xb3, 0xc3, 0xcb, 0xd3, 0xec, 0x6f, 0x92, 0xf5, 0x5a, 0xb9, 0x71,
	0x06, 0x13, 0xed, 0x1a, 0x11, 0x63, 0x7e, 0x46, 0x13, 0xd3, 0xb6, 0xb6, 0x55, 0x6b, 0xbf, 0x9a,
	0x0c, 0xa7, 0x64, 0x96, 0xe0, 0x7e, 0x84, 0x5b, 0xbf, 0xba, 0x78, 0xa3, 0xa3, 0x7f, 0x53, 0x3e,
	0x8e, 0xa4, 0x84, 0xcc, 0xe5, 0x52, 0xa8, 0x79, 0x3d, 0x07, 0x36, 0xe0, 0x47, 0xf4, 0xa0, 0x87,
	0xf5, 0x0d, 0x23, 0xbf, 0x5d, 0x91, 0x97, 0x0a, 0xe1, 0x6e, 0x09, 0x42, 0xb2, 0x21, 0x3f, 0xa6,
	0x2c, 0x76, 0x80, 0xf7, 0x80, 0x0a, 0x10, 0x6b, 0x64, 0x3b, 0xfc, 0x84, 0x8e, 0xb7, 0x2a, 0x41,
	0xc8, 0x02, 0x4a, 0x05, 0x0f, 0x8b, 0x0a, 0xa1, 0x64, 0xbb, 0x05, 0xfb, 0xe8, 0x52, 0xf2, 0xd9,
	0xa5, 0xe4, 0xab, 0x4b, 0xc9, 0xfb, 0x77, 0x3a, 0x78, 0xdc, 0x8b, 0x6f, 0x5c, 0xfd, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x22, 0xd6, 0x0f, 0xcd, 0x21, 0x01, 0x00, 0x00,
}
