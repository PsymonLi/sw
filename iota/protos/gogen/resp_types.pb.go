// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resp_types.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IotaAPIResponse_APIResponseType int32

const (
	IotaAPIResponse_API_STATUS_OK    IotaAPIResponse_APIResponseType = 0
	IotaAPIResponse_API_BAD_REQUEST  IotaAPIResponse_APIResponseType = 1
	IotaAPIResponse_API_SERVER_ERROR IotaAPIResponse_APIResponseType = 2
	IotaAPIResponse_API_AUTH_FAILURE IotaAPIResponse_APIResponseType = 3
)

var IotaAPIResponse_APIResponseType_name = map[int32]string{
	0: "API_STATUS_OK",
	1: "API_BAD_REQUEST",
	2: "API_SERVER_ERROR",
	3: "API_AUTH_FAILURE",
}
var IotaAPIResponse_APIResponseType_value = map[string]int32{
	"API_STATUS_OK":    0,
	"API_BAD_REQUEST":  1,
	"API_SERVER_ERROR": 2,
	"API_AUTH_FAILURE": 3,
}

func (x IotaAPIResponse_APIResponseType) String() string {
	return proto.EnumName(IotaAPIResponse_APIResponseType_name, int32(x))
}
func (IotaAPIResponse_APIResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRespTypes, []int{0, 0}
}

type NodeStatus_HealthCodeType int32

const (
	NodeStatus_HEALTH_OK   NodeStatus_HealthCodeType = 0
	NodeStatus_NAPLES_DOWN NodeStatus_HealthCodeType = 1
	NodeStatus_NODE_DOWN   NodeStatus_HealthCodeType = 2
	NodeStatus_APP_DOWN    NodeStatus_HealthCodeType = 3
)

var NodeStatus_HealthCodeType_name = map[int32]string{
	0: "HEALTH_OK",
	1: "NAPLES_DOWN",
	2: "NODE_DOWN",
	3: "APP_DOWN",
}
var NodeStatus_HealthCodeType_value = map[string]int32{
	"HEALTH_OK":   0,
	"NAPLES_DOWN": 1,
	"NODE_DOWN":   2,
	"APP_DOWN":    3,
}

func (x NodeStatus_HealthCodeType) String() string {
	return proto.EnumName(NodeStatus_HealthCodeType_name, int32(x))
}
func (NodeStatus_HealthCodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRespTypes, []int{2, 0}
}

type IotaAPIResponse struct {
	// APIStatus captures call status
	APIStatus string `protobuf:"bytes,1,opt,name=APIStatus,proto3" json:"api-status,omitempty"`
}

func (m *IotaAPIResponse) Reset()                    { *m = IotaAPIResponse{} }
func (m *IotaAPIResponse) String() string            { return proto.CompactTextString(m) }
func (*IotaAPIResponse) ProtoMessage()               {}
func (*IotaAPIResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{0} }

func (m *IotaAPIResponse) GetAPIStatus() string {
	if m != nil {
		return m.APIStatus
	}
	return ""
}

// ClusterHealthResponse captures the health of the cluster
type ClusterHealthResponse struct {
	// Status captures the health of the cluster on a per node basis
	Status []*NodeStatus `protobuf:"bytes,1,rep,name=Status" json:"status,omitempty"`
}

func (m *ClusterHealthResponse) Reset()                    { *m = ClusterHealthResponse{} }
func (m *ClusterHealthResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterHealthResponse) ProtoMessage()               {}
func (*ClusterHealthResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{1} }

func (m *ClusterHealthResponse) GetStatus() []*NodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Node status captures the health of an individual node
type NodeStatus struct {
	// API Response
	APIStatus *IotaAPIResponse `protobuf:"bytes,1,opt,name=APIStatus" json:"api-status,omitempty"`
	// Health captures individual node health
	Health string `protobuf:"bytes,2,opt,name=Health,proto3" json:"health,omitempty"`
}

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (m *NodeStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{2} }

func (m *NodeStatus) GetAPIStatus() *IotaAPIResponse {
	if m != nil {
		return m.APIStatus
	}
	return nil
}

func (m *NodeStatus) GetHealth() string {
	if m != nil {
		return m.Health
	}
	return ""
}

// InstantiateApp API Response
type InstantiateAppResponse struct {
	// API Response
	InstantiateAppResponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=InstantiateAppResponse" json:"instantiate-app-response,omitempty"`
}

func (m *InstantiateAppResponse) Reset()                    { *m = InstantiateAppResponse{} }
func (m *InstantiateAppResponse) String() string            { return proto.CompactTextString(m) }
func (*InstantiateAppResponse) ProtoMessage()               {}
func (*InstantiateAppResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{3} }

func (m *InstantiateAppResponse) GetInstantiateAppResponse() *IotaAPIResponse {
	if m != nil {
		return m.InstantiateAppResponse
	}
	return nil
}

// Instantiate Topology API Reponse
type InstantiateTopoResponse struct {
	// API Response
	InstantiateTopoReponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=InstantiateTopoReponse" json:"instantiate-topo-response,omitempty"`
}

func (m *InstantiateTopoResponse) Reset()                    { *m = InstantiateTopoResponse{} }
func (m *InstantiateTopoResponse) String() string            { return proto.CompactTextString(m) }
func (*InstantiateTopoResponse) ProtoMessage()               {}
func (*InstantiateTopoResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{4} }

func (m *InstantiateTopoResponse) GetInstantiateTopoReponse() *IotaAPIResponse {
	if m != nil {
		return m.InstantiateTopoReponse
	}
	return nil
}

// AddNode API Response
type AddNodeResponse struct {
	// API Response
	AddNodeReponse *IotaAPIResponse `protobuf:"bytes,1,opt,name=AddNodeReponse" json:"add-node-response,omitempty"`
}

func (m *AddNodeResponse) Reset()                    { *m = AddNodeResponse{} }
func (m *AddNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*AddNodeResponse) ProtoMessage()               {}
func (*AddNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{5} }

func (m *AddNodeResponse) GetAddNodeReponse() *IotaAPIResponse {
	if m != nil {
		return m.AddNodeReponse
	}
	return nil
}

// Generate Configs API Response
type GeneratedConfigResponse struct {
	APIStatus *IotaAPIResponse `protobuf:"bytes,1,opt,name=APIStatus" json:"api-status,omitemtpy"`
	// Generated Configs
	Configs *ConfigInfo `protobuf:"bytes,2,opt,name=Configs" json:"configs,omitemtpy"`
}

func (m *GeneratedConfigResponse) Reset()                    { *m = GeneratedConfigResponse{} }
func (m *GeneratedConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GeneratedConfigResponse) ProtoMessage()               {}
func (*GeneratedConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{6} }

func (m *GeneratedConfigResponse) GetAPIStatus() *IotaAPIResponse {
	if m != nil {
		return m.APIStatus
	}
	return nil
}

func (m *GeneratedConfigResponse) GetConfigs() *ConfigInfo {
	if m != nil {
		return m.Configs
	}
	return nil
}

// Config Push API Response
type ConfigPushResponse struct {
	APIStatus *IotaAPIResponse `protobuf:"bytes,1,opt,name=APIStatus" json:"api-status,omitemtpy"`
}

func (m *ConfigPushResponse) Reset()                    { *m = ConfigPushResponse{} }
func (m *ConfigPushResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigPushResponse) ProtoMessage()               {}
func (*ConfigPushResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{7} }

func (m *ConfigPushResponse) GetAPIStatus() *IotaAPIResponse {
	if m != nil {
		return m.APIStatus
	}
	return nil
}

// App Trigger API Response
type TriggerAppResponse struct {
	APIStatus *IotaAPIResponse `protobuf:"bytes,1,opt,name=APIStatus" json:"api-status,omitemtpy"`
}

func (m *TriggerAppResponse) Reset()                    { *m = TriggerAppResponse{} }
func (m *TriggerAppResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerAppResponse) ProtoMessage()               {}
func (*TriggerAppResponse) Descriptor() ([]byte, []int) { return fileDescriptorRespTypes, []int{8} }

func (m *TriggerAppResponse) GetAPIStatus() *IotaAPIResponse {
	if m != nil {
		return m.APIStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*IotaAPIResponse)(nil), "iotamodel.IotaAPIResponse")
	proto.RegisterType((*ClusterHealthResponse)(nil), "iotamodel.ClusterHealthResponse")
	proto.RegisterType((*NodeStatus)(nil), "iotamodel.NodeStatus")
	proto.RegisterType((*InstantiateAppResponse)(nil), "iotamodel.InstantiateAppResponse")
	proto.RegisterType((*InstantiateTopoResponse)(nil), "iotamodel.InstantiateTopoResponse")
	proto.RegisterType((*AddNodeResponse)(nil), "iotamodel.AddNodeResponse")
	proto.RegisterType((*GeneratedConfigResponse)(nil), "iotamodel.GeneratedConfigResponse")
	proto.RegisterType((*ConfigPushResponse)(nil), "iotamodel.ConfigPushResponse")
	proto.RegisterType((*TriggerAppResponse)(nil), "iotamodel.TriggerAppResponse")
	proto.RegisterEnum("iotamodel.IotaAPIResponse_APIResponseType", IotaAPIResponse_APIResponseType_name, IotaAPIResponse_APIResponseType_value)
	proto.RegisterEnum("iotamodel.NodeStatus_HealthCodeType", NodeStatus_HealthCodeType_name, NodeStatus_HealthCodeType_value)
}
func (m *IotaAPIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IotaAPIResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.APIStatus) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(len(m.APIStatus)))
		i += copy(dAtA[i:], m.APIStatus)
	}
	return i, nil
}

func (m *ClusterHealthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterHealthResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, msg := range m.Status {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRespTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.APIStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.APIStatus.Size()))
		n1, err := m.APIStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Health) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(len(m.Health)))
		i += copy(dAtA[i:], m.Health)
	}
	return i, nil
}

func (m *InstantiateAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiateAppResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstantiateAppResponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.InstantiateAppResponse.Size()))
		n2, err := m.InstantiateAppResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *InstantiateTopoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantiateTopoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstantiateTopoReponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.InstantiateTopoReponse.Size()))
		n3, err := m.InstantiateTopoReponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AddNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddNodeReponse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.AddNodeReponse.Size()))
		n4, err := m.AddNodeReponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GeneratedConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneratedConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.APIStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.APIStatus.Size()))
		n5, err := m.APIStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Configs != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.Configs.Size()))
		n6, err := m.Configs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ConfigPushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigPushResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.APIStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.APIStatus.Size()))
		n7, err := m.APIStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *TriggerAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerAppResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.APIStatus != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRespTypes(dAtA, i, uint64(m.APIStatus.Size()))
		n8, err := m.APIStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeVarintRespTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IotaAPIResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.APIStatus)
	if l > 0 {
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *ClusterHealthResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovRespTypes(uint64(l))
		}
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	if m.APIStatus != nil {
		l = m.APIStatus.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	l = len(m.Health)
	if l > 0 {
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *InstantiateAppResponse) Size() (n int) {
	var l int
	_ = l
	if m.InstantiateAppResponse != nil {
		l = m.InstantiateAppResponse.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *InstantiateTopoResponse) Size() (n int) {
	var l int
	_ = l
	if m.InstantiateTopoReponse != nil {
		l = m.InstantiateTopoReponse.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *AddNodeResponse) Size() (n int) {
	var l int
	_ = l
	if m.AddNodeReponse != nil {
		l = m.AddNodeReponse.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *GeneratedConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.APIStatus != nil {
		l = m.APIStatus.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	if m.Configs != nil {
		l = m.Configs.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *ConfigPushResponse) Size() (n int) {
	var l int
	_ = l
	if m.APIStatus != nil {
		l = m.APIStatus.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func (m *TriggerAppResponse) Size() (n int) {
	var l int
	_ = l
	if m.APIStatus != nil {
		l = m.APIStatus.Size()
		n += 1 + l + sovRespTypes(uint64(l))
	}
	return n
}

func sovRespTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRespTypes(x uint64) (n int) {
	return sovRespTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IotaAPIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IotaAPIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IotaAPIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterHealthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterHealthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterHealthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &NodeStatus{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.APIStatus == nil {
				m.APIStatus = &IotaAPIResponse{}
			}
			if err := m.APIStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Health = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantiateAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiateAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiateAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiateAppResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiateAppResponse == nil {
				m.InstantiateAppResponse = &IotaAPIResponse{}
			}
			if err := m.InstantiateAppResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantiateTopoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantiateTopoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantiateTopoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiateTopoReponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiateTopoReponse == nil {
				m.InstantiateTopoReponse = &IotaAPIResponse{}
			}
			if err := m.InstantiateTopoReponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNodeReponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddNodeReponse == nil {
				m.AddNodeReponse = &IotaAPIResponse{}
			}
			if err := m.AddNodeReponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneratedConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneratedConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneratedConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.APIStatus == nil {
				m.APIStatus = &IotaAPIResponse{}
			}
			if err := m.APIStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configs == nil {
				m.Configs = &ConfigInfo{}
			}
			if err := m.Configs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigPushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigPushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigPushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.APIStatus == nil {
				m.APIStatus = &IotaAPIResponse{}
			}
			if err := m.APIStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRespTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.APIStatus == nil {
				m.APIStatus = &IotaAPIResponse{}
			}
			if err := m.APIStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRespTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRespTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRespTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRespTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRespTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRespTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRespTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRespTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRespTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRespTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("resp_types.proto", fileDescriptorRespTypes) }

var fileDescriptorRespTypes = []byte{
	// 683 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x53, 0xa9, 0x90, 0xed, 0x4f, 0x5c, 0xd3, 0xd2, 0x36, 0xa0, 0x18, 0x19, 0x09, 0x5a,
	0x89, 0xc4, 0x52, 0xb9, 0x71, 0x73, 0x52, 0x97, 0x58, 0x94, 0xc4, 0x38, 0x0e, 0x5c, 0x90, 0xac,
	0x6d, 0xbc, 0x75, 0x2c, 0xc5, 0xbb, 0x2b, 0x7b, 0x5d, 0x54, 0x38, 0x22, 0xf5, 0x09, 0x10, 0xe2,
	0x19, 0x7a, 0xe7, 0x1d, 0x38, 0xf2, 0x02, 0x44, 0x28, 0xdc, 0xf2, 0x14, 0x28, 0xde, 0xc4, 0x71,
	0x02, 0x15, 0x39, 0xd0, 0xdb, 0xce, 0xcc, 0x37, 0xf3, 0x7d, 0xf3, 0x63, 0x03, 0x31, 0x44, 0x11,
	0x75, 0xd8, 0x05, 0x45, 0x51, 0x85, 0x86, 0x84, 0x11, 0x29, 0xef, 0x13, 0x06, 0x03, 0xe2, 0xa2,
	0x5e, 0xf1, 0xbe, 0x47, 0x88, 0xd7, 0x43, 0x2a, 0xa4, 0xbe, 0x0a, 0x31, 0x26, 0x0c, 0x32, 0x9f,
	0xe0, 0x31, 0xb0, 0x58, 0xf6, 0x7c, 0xd6, 0x8d, 0x4f, 0x2b, 0x1d, 0x12, 0xa8, 0x1e, 0xf1, 0x88,
	0x9a, 0xb8, 0x4f, 0xe3, 0xb3, 0xc4, 0x4a, 0x8c, 0xe4, 0x35, 0x86, 0xeb, 0x19, 0x38, 0x45, 0x38,
	0x82, 0xd8, 0x25, 0x6a, 0xf4, 0x4e, 0x3d, 0x47, 0xd8, 0xef, 0x20, 0x35, 0x66, 0x7e, 0x2f, 0x1a,
	0x31, 0x79, 0x08, 0x67, 0xc9, 0x54, 0x1f, 0x77, 0x7a, 0xb1, 0x3b, 0x91, 0x57, 0x5c, 0xeb, 0x90,
	0x20, 0x20, 0x98, 0x5b, 0xca, 0x0f, 0x01, 0x14, 0x0c, 0xc2, 0xa0, 0x66, 0x1a, 0x16, 0x8a, 0x28,
	0xc1, 0x11, 0x92, 0x3a, 0x20, 0xaf, 0x99, 0x46, 0x8b, 0x41, 0x16, 0x47, 0xbb, 0xc2, 0x03, 0x61,
	0x3f, 0x5f, 0xd5, 0xaf, 0x2e, 0xf7, 0x0e, 0x5a, 0x2c, 0xd4, 0x71, 0x1c, 0xec, 0xcf, 0xe1, 0x2b,
	0x99, 0xb7, 0x7d, 0x41, 0x11, 0x3a, 0x18, 0xf6, 0xe5, 0x2d, 0x48, 0xfd, 0x72, 0x94, 0x94, 0x78,
	0x42, 0x02, 0x9f, 0xa1, 0x80, 0xb2, 0x0b, 0x6b, 0x5a, 0x57, 0x41, 0xa0, 0x30, 0x97, 0x27, 0x6d,
	0x82, 0x75, 0xcd, 0x34, 0x9c, 0x96, 0xad, 0xd9, 0xed, 0x96, 0xd3, 0x7c, 0x21, 0x2e, 0x49, 0x77,
	0x12, 0x94, 0x53, 0xd5, 0x8e, 0x1c, 0x4b, 0x7f, 0xd5, 0xd6, 0x5b, 0xb6, 0x28, 0x48, 0x5b, 0x40,
	0x4c, 0x70, 0xba, 0xf5, 0x5a, 0xb7, 0x1c, 0xdd, 0xb2, 0x9a, 0x96, 0x98, 0x9b, 0x78, 0xb5, 0xb6,
	0x5d, 0x77, 0x8e, 0x35, 0xe3, 0xa4, 0x6d, 0xe9, 0xe2, 0xb2, 0xf2, 0x16, 0x6c, 0xd7, 0x7a, 0x71,
	0xc4, 0x50, 0x58, 0x47, 0xb0, 0xc7, 0xba, 0x69, 0x93, 0x35, 0xb0, 0x92, 0x76, 0xb8, 0xbc, 0xbf,
	0x7a, 0xb8, 0x5d, 0x49, 0xd7, 0x56, 0x69, 0x10, 0x17, 0xf1, 0x60, 0x75, 0x6b, 0xd8, 0x97, 0xc5,
	0x3f, 0xfa, 0x18, 0xa7, 0x2a, 0x1f, 0x73, 0x00, 0x4c, 0xc1, 0x92, 0x35, 0x3f, 0xb8, 0xd5, 0xc3,
	0x62, 0xa6, 0xec, 0xdc, 0xdc, 0xaa, 0xbb, 0x0b, 0xcc, 0x49, 0xb2, 0xc0, 0x0a, 0x57, 0xbe, 0x9b,
	0x4b, 0x36, 0xf1, 0xec, 0xea, 0x72, 0x4f, 0x99, 0x6c, 0x62, 0xca, 0x5d, 0xe1, 0xa0, 0x1a, 0x71,
	0x93, 0x59, 0x8e, 0x56, 0x20, 0x76, 0x13, 0x57, 0x56, 0x36, 0x07, 0x29, 0x2f, 0xc1, 0xc6, 0x2c,
	0x5c, 0x5a, 0x07, 0xf9, 0xba, 0xae, 0x9d, 0xd8, 0x75, 0x3e, 0xf6, 0x02, 0x58, 0x6d, 0x68, 0xe6,
	0x89, 0xde, 0x72, 0x8e, 0x9a, 0x6f, 0x1a, 0xa2, 0x30, 0x8a, 0x37, 0x9a, 0x47, 0x3a, 0x37, 0x73,
	0xd2, 0x1a, 0xb8, 0xad, 0x99, 0x26, 0xb7, 0x96, 0x95, 0x4f, 0x02, 0xb8, 0x6b, 0xe0, 0x88, 0x41,
	0xcc, 0x7c, 0xc8, 0x90, 0x46, 0x69, 0x3a, 0xe5, 0xf7, 0xd7, 0x45, 0x16, 0x18, 0xcf, 0xa3, 0x61,
	0x5f, 0x56, 0xfc, 0x69, 0x76, 0x19, 0x52, 0x5a, 0x0e, 0xc7, 0xd1, 0x4c, 0x57, 0xd7, 0x30, 0x28,
	0x9f, 0x05, 0xb0, 0x93, 0x09, 0xd9, 0x84, 0x92, 0x54, 0xd7, 0x87, 0x19, 0x5d, 0x3c, 0xb4, 0xa8,
	0xae, 0xc7, 0xc3, 0xbe, 0xfc, 0x30, 0xab, 0x8b, 0x11, 0x4a, 0xfe, 0x25, 0x2c, 0x43, 0xa1, 0x9c,
	0x83, 0x82, 0xe6, 0xba, 0xa3, 0xdd, 0x65, 0x3e, 0xb9, 0x8d, 0xd4, 0xb5, 0xa8, 0x0e, 0x79, 0xd8,
	0x97, 0xef, 0x41, 0xd7, 0x2d, 0x63, 0xe2, 0xa2, 0xbf, 0xf1, 0xcf, 0x95, 0x54, 0xbe, 0x0a, 0x60,
	0xe7, 0x39, 0xc2, 0x28, 0x84, 0x0c, 0xb9, 0x35, 0x82, 0xcf, 0x7c, 0x2f, 0x15, 0xf0, 0x5f, 0x4e,
	0x97, 0xd1, 0x99, 0xd3, 0x3d, 0x06, 0xb7, 0x38, 0x4b, 0x94, 0xdc, 0xee, 0xec, 0x37, 0xc6, 0x23,
	0x06, 0x3e, 0x23, 0xd5, 0xed, 0x61, 0x5f, 0xde, 0xec, 0x70, 0x64, 0xa6, 0xd2, 0x24, 0x59, 0xe9,
	0x02, 0x89, 0x3f, 0xcd, 0x38, 0xea, 0xde, 0xa4, 0xe2, 0x11, 0x93, 0x1d, 0xfa, 0x9e, 0x87, 0xc2,
	0xec, 0x11, 0xdf, 0x00, 0x53, 0x55, 0xfc, 0x36, 0x28, 0x09, 0xdf, 0x07, 0x25, 0xe1, 0xe7, 0xa0,
	0x24, 0x7c, 0xf9, 0x55, 0x5a, 0x32, 0x73, 0xa7, 0x2b, 0xc9, 0x2f, 0xf9, 0xe9, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x91, 0x72, 0x8b, 0x53, 0x06, 0x00, 0x00,
}
