// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfg_svc.proto

package iotamodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ConfigTopologyInfo from req_types.proto

// Ignoring public import of App from req_types.proto

// Ignoring public import of Command from req_types.proto

// Ignoring public import of Node from req_types.proto

// Ignoring public import of EntrypointType from req_types.proto

// Ignoring public import of Type from req_types.proto

// Ignoring public import of CmdType from req_types.proto

// Ignoring public import of Type from req_types.proto

// Ignoring public import of IotaAPIResponse from resp_types.proto

// Ignoring public import of ClusterHealthResponse from resp_types.proto

// Ignoring public import of NodeStatus from resp_types.proto

// Ignoring public import of InstantiateAppResponse from resp_types.proto

// Ignoring public import of InstantiateTopoResponse from resp_types.proto

// Ignoring public import of AddNodeResponse from resp_types.proto

// Ignoring public import of GeneratedConfigResponse from resp_types.proto

// Ignoring public import of ConfigPushResponse from resp_types.proto

// Ignoring public import of TriggerAppResponse from resp_types.proto

// Ignoring public import of APIResponseType from resp_types.proto

// Ignoring public import of HealthCodeType from resp_types.proto

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfigMgmtApi service

type ConfigMgmtApiClient interface {
	// GenerateConfigs accepts the topology information and config information and auto generates the config that needs
	// to be pushed. The intent is to support only the user facing objects at NAPLES REST or Venice REST Level.
	// It also pushes the base config either to Venice/NAPLES REST Endpoint
	GenerateAndPushBaseConfigs(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*GeneratedConfigResponse, error)
	// PushConfig pushes a single modified object to the REST Endpoint and returns the push status.
	// This method is expected to be used for test cases that want to modify an individual object during the context of the testcase run
	PushConfig(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*ConfigPushResponse, error)
}

type configMgmtApiClient struct {
	cc *grpc.ClientConn
}

func NewConfigMgmtApiClient(cc *grpc.ClientConn) ConfigMgmtApiClient {
	return &configMgmtApiClient{cc}
}

func (c *configMgmtApiClient) GenerateAndPushBaseConfigs(ctx context.Context, in *ConfigTopologyInfo, opts ...grpc.CallOption) (*GeneratedConfigResponse, error) {
	out := new(GeneratedConfigResponse)
	err := grpc.Invoke(ctx, "/iotamodel.ConfigMgmtApi/GenerateAndPushBaseConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtApiClient) PushConfig(ctx context.Context, in *ConfigObject, opts ...grpc.CallOption) (*ConfigPushResponse, error) {
	out := new(ConfigPushResponse)
	err := grpc.Invoke(ctx, "/iotamodel.ConfigMgmtApi/PushConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigMgmtApi service

type ConfigMgmtApiServer interface {
	// GenerateConfigs accepts the topology information and config information and auto generates the config that needs
	// to be pushed. The intent is to support only the user facing objects at NAPLES REST or Venice REST Level.
	// It also pushes the base config either to Venice/NAPLES REST Endpoint
	GenerateAndPushBaseConfigs(context.Context, *ConfigTopologyInfo) (*GeneratedConfigResponse, error)
	// PushConfig pushes a single modified object to the REST Endpoint and returns the push status.
	// This method is expected to be used for test cases that want to modify an individual object during the context of the testcase run
	PushConfig(context.Context, *ConfigObject) (*ConfigPushResponse, error)
}

func RegisterConfigMgmtApiServer(s *grpc.Server, srv ConfigMgmtApiServer) {
	s.RegisterService(&_ConfigMgmtApi_serviceDesc, srv)
}

func _ConfigMgmtApi_GenerateAndPushBaseConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigTopologyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtApiServer).GenerateAndPushBaseConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.ConfigMgmtApi/GenerateAndPushBaseConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtApiServer).GenerateAndPushBaseConfigs(ctx, req.(*ConfigTopologyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmtApi_PushConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtApiServer).PushConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iotamodel.ConfigMgmtApi/PushConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtApiServer).PushConfig(ctx, req.(*ConfigObject))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMgmtApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iotamodel.ConfigMgmtApi",
	HandlerType: (*ConfigMgmtApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAndPushBaseConfigs",
			Handler:    _ConfigMgmtApi_GenerateAndPushBaseConfigs_Handler,
		},
		{
			MethodName: "PushConfig",
			Handler:    _ConfigMgmtApi_PushConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cfg_svc.proto",
}

func init() { proto.RegisterFile("cfg_svc.proto", fileDescriptorCfgSvc) }

var fileDescriptorCfgSvc = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x57, 0x05, 0xc1, 0xe2, 0x70, 0xf4, 0x46, 0x28, 0xda, 0x8b, 0xdd, 0xdb, 0x82, 0x3e,
	0xc1, 0x26, 0x28, 0x5e, 0x88, 0x45, 0xbc, 0x1f, 0x69, 0x7a, 0x9a, 0x45, 0x9a, 0xfc, 0xb1, 0x49,
	0x85, 0xbd, 0x89, 0xcf, 0xe2, 0x13, 0x78, 0xe9, 0x23, 0x48, 0x7d, 0x11, 0x59, 0xe2, 0xd4, 0xb1,
	0xbb, 0xfc, 0x7f, 0xbe, 0xf3, 0x25, 0x27, 0x1e, 0xf3, 0x46, 0x2c, 0xec, 0x0b, 0xcf, 0x4d, 0x07,
	0x87, 0xe4, 0x50, 0xc2, 0x31, 0x85, 0x9a, 0xda, 0xf4, 0x54, 0x00, 0xa2, 0xa5, 0x82, 0x19, 0x59,
	0x30, 0xad, 0xe1, 0x98, 0x93, 0xd0, 0x36, 0x80, 0xe9, 0xb9, 0x90, 0x6e, 0xd9, 0x57, 0x39, 0x87,
	0x2a, 0x04, 0x04, 0x0a, 0x5f, 0x57, 0x7d, 0xe3, 0x93, 0x0f, 0xfe, 0xf4, 0x83, 0x1f, 0x77, 0xf4,
	0xbc, 0x70, 0x2b, 0x43, 0x9b, 0xf9, 0x49, 0x47, 0xd6, 0x6c, 0x35, 0x47, 0x1c, 0x4a, 0x41, 0x87,
	0x74, 0xf1, 0x16, 0xc5, 0xe3, 0x2b, 0xe8, 0x46, 0x8a, 0x3b, 0xa1, 0xdc, 0xcc, 0xc8, 0x84, 0xc5,
	0xe9, 0x0d, 0x69, 0xea, 0x98, 0xa3, 0x99, 0xae, 0xcb, 0xde, 0x2e, 0xe7, 0xcc, 0x52, 0x60, 0x6c,
	0x72, 0x96, 0xff, 0xfe, 0x3c, 0x0f, 0xdd, 0x23, 0x0c, 0x5a, 0x88, 0xd5, 0xad, 0x6e, 0x90, 0x4e,
	0xff, 0x5d, 0x6f, 0x2c, 0x75, 0xe0, 0x1e, 0xc8, 0x1a, 0x68, 0x4b, 0xd3, 0x51, 0x72, 0x1d, 0xc7,
	0x6b, 0x6f, 0xe8, 0x93, 0x93, 0x1d, 0xe5, 0x7d, 0xf5, 0x44, 0xdc, 0xa5, 0xbb, 0x6f, 0xad, 0xa7,
	0xfe, 0x3c, 0xf3, 0xc9, 0xfb, 0x90, 0x45, 0x1f, 0x43, 0x16, 0x7d, 0x0e, 0x59, 0xf4, 0xfa, 0x95,
	0x8d, 0xca, 0xbd, 0x72, 0xbf, 0x3a, 0xf0, 0x9b, 0x5d, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x50, 0x3f, 0x84, 0x73, 0x01, 0x00, 0x00,
}
