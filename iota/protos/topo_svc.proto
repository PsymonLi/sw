//------------------------------------------------------------------------------
// {C} Copyright 2018 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IO Test Automation Topology Abstraction Service
//------------------------------------------------------------------------------

syntax = "proto3";
package iotamodel;

import "iota_types.proto";

// ---------------------------- Topology API ----------------------------

// Topology Service Methods
service TopologyApi {
    // InstantiateTopology is called by harness which assigns a personality to the node based on the topology.
    // This is a blocking call to the harness, The parallel instantiation across the nodes is handled internally.

    // InitTestBed Allocate Data VLANs, copy over built artifacts and starts IOTA Agent on all the nodes
    rpc InitTestBed (TestBedMsg) returns (TestBedMsg) {};

    // GetTestBed get the information about the testbed (maily to get allocated vlans)
    rpc GetTestBed (TestBedMsg) returns (TestBedMsg) {};

    // CleanUpTestBed will ensure that any state left behind from the previous run is appropriately cleaned up.
    rpc CleanUpTestBed(TestBedMsg) returns (TestBedMsg) {};

    // InitNodes initialize the list of nodes specified which might be added on the fly
    rpc InitNodes (TestNodesMsg) returns (TestNodesMsg) {};

    // CleanNodes removes the nodes from the topology on the fly
    rpc CleanNodes (TestNodesMsg) returns (TestNodesMsg) {};

    // DoSwitchOperation do switch operation
    rpc DoSwitchOperation (SwitchMsg) returns (SwitchMsg) {};

    // AddNodes brings up the nodes with their corresponding personalities
    rpc AddNodes (NodeMsg) returns (NodeMsg) {};

    // Load Node will save, reboot and reload context based on flags set in ReloadMsg
    rpc ReloadNodes (ReloadMsg) returns (ReloadMsg) {};

    // DeleteNodes removes a node from the e2e cluster
    rpc DeleteNodes (NodeMsg) returns (NodeMsg) {};

    // GetNodes returns the topology information of all the nodes.
    rpc GetNodes (NodeMsg) returns (NodeMsg) {};

    // GetNodes returns the topology information of all the nodes.
    rpc ReInitNodes (NodeMsg) returns (NodeMsg) {};

    // SaveNodes saves node and download state from host to runner/localhost
    rpc SaveNodes (NodeMsg) returns (NodeMsg) {};

    // Upload node-state from  runner/localhost to remote host/node
    rpc RestoreNodes (NodeMsg) returns (NodeMsg) {};

    // AddWorkloads brings up a workload type on a given node
    rpc AddWorkloads (WorkloadMsg) returns (WorkloadMsg) {};

    // GetWorkloads gets current list of workloads from iota server
    rpc GetWorkloads (WorkloadMsg) returns (WorkloadMsg) {};

    // DeleteWorkloads deletes a given workload
    rpc DeleteWorkloads (WorkloadMsg) returns (WorkloadMsg) {};

    // Trigger invokes the workload's trigger. It could be ping, start client/server etc..
    rpc Trigger(TriggerMsg) returns (TriggerMsg) {};

    // CheckClusterHealth returns the cluster health
    rpc CheckClusterHealth(NodeMsg) returns  (ClusterHealthMsg) {};

    // EntityCopy copies files in/out from entities
    rpc EntityCopy(EntityCopyMsg) returns  (EntityCopyMsg) {};

    // DownloadAssets downloads assets from minio.test.pensando.io
    rpc DownloadAssets (DownloadAssetsMsg) returns (DownloadAssetsMsg) {};

    // WorkloadMoveMsg moves workloads
    rpc MoveWorkloads(WorkloadMoveMsg) returns  (WorkloadMoveMsg) {};

    //Add Networks
    rpc AddNetworks(NetworksMsg) returns  (NetworksMsg) {};

    //Remove Networks
    rpc RemoveNetworks(NetworksMsg) returns  (NetworksMsg) {};

    //remove breakout interfaces from switch
    rpc UnsetBreakoutInterfaces(UnsetBreakoutMsg) returns  (UnsetBreakoutMsg) {};
}

// Op defines topology operation
enum Op {
        NONE    = 0;
        ADD     = 1;
        DELETE  = 2;
        GET     = 3;
        SAVE    = 4;
        RESTORE = 5;
}

// NodeInfo encapsulates all topology information for a given iota-server invocation
message NodeMsg {
    // API Response for the node
    IotaAPIResponse api_response    = 1;

    // Node operation
    Op node_op                      = 2;

    // List of nodes in the e2e cluster
    repeated Node nodes             = 3;

    // Set this to true during init time. This will essentially brings up the e2e cluster
    bool make_cluster               = 4;

    // Cluster is complete or not (Could by used by other nodes to check their admission status for health check)
    bool cluster_done               = 5;

    //return allocated vlans when doing skip setup
    repeated uint32 allocated_vlans = 6;

}

enum NodeRestartMethod {

    RESTART_METHOD_AUTO         = 0;

    RESTART_METHOD_APC          = 1;

    RESTART_METHOD_IPMI         = 2;

    RESTART_METHOD_REBOOT       = 3;

    RESTART_METHOD_REDFISH      = 4;
}

// Reload msg
message ReloadMsg {

    // API Response for the node
    IotaAPIResponse api_response        = 1;

    NodeMsg node_msg                    = 2;

    NodeRestartMethod restart_method    = 3;

    string method_args                  = 4;

    bool use_ncsi                       = 5;

    bool skip_restore                   = 6;

    // If request is to power-cycle and not wait for host to come online
    bool skip_agent_init                = 7;
}

enum NaplesOperationMode {
    // Naples in regular mode ( 2 host interfaces)
    NAPLES_MODE_CLASSIC                 = 0;

    // Naples in bitw mode (no hostintf)
    NAPLES_MODE_BITW                    = 1;
}

enum PersonalityType {
    PERSONALITY_NONE                    = 0;
    PERSONALITY_NAPLES_SIM              = 1;
    //No datapath, just spin up multiple naples-sim for scale.
    PERSONALITY_NAPLES_MULTI_SIM        = 2;

    //naples sim just running control path
    PERSONALITY_NAPLES_CONTROL_SIM      = 3;

    PERSONALITY_VENICE                  = 4;
    PERSONALITY_NAPLES_SIM_WITH_QEMU    = 5;
    // Naples Hardware
    PERSONALITY_NAPLES                  = 6;
    PERSONALITY_THIRD_PARTY_NIC         = 9;
    PERSONALITY_MELLANOX                = 10;
    PERSONALITY_BROADCOM                = 11;
    PERSONALITY_INTEL                   = 12;
    // Node just run commands
    PERSONALITY_COMMAND_NODE            = 13;
    PERSONALITY_VENICE_BM               = 14;
    PERSONALITY_VCENTER_NODE            = 15;

    // Naples with DVS mode
    PERSONALITY_NAPLES_DVS              = 16;

    PERSONALITY_THIRD_PARTY_NIC_DVS     = 17;

    PERSONALITY_K8S_MASTER              = 18;

    PERSONALITY_NAPLES_BOND             = 19;

}

enum EntityType {
    ENTITY_TYPE_NONE      = 0;
    ENTITY_TYPE_HOST      = 1;
    ENTITY_TYPE_NAPLES    = 2;
}

message Entity {
    // Entity type
    EntityType type  = 1;

    // Entity name
    string name      = 2;
}

message VmwareESXConfig {
    // User name of ESX
    string username   = 1;

    // Password of ESX
    string password   = 2;

    // IP address of esx
    string ip_address = 3;

    // ssl thumbprint
    string ssl_thumbprint = 4;

    // name of esx node
    string name = 5;
}

message DatacenterConfig {
    repeated VmwareESXConfig esx_configs = 1;

    string dc_name                       = 2;

    string cluster_name                  = 3;

    string distributed_switch            = 4;

    uint32 pvlan_start                   = 5;
    
    uint32 pvlan_end                     = 6;

    bool   enable_vmotion_over_mgmt      = 7;
}

message VcenterConfig {
    repeated DatacenterConfig  dc_configs           = 1;

    repeated string            workload_images      = 2;
}

message BondConfig {
    string bond_interface_name          = 1;

    // Teaming Mode
    string teaming_mode                 = 2;

    // Load Balancing Algorithm
    string load_balancing_algorithm     = 3;

    // vlan (subinterface)
    repeated string vlans               = 4;

    // hint, if there are more than 1 naples in system
    repeated string nic_hints           = 5;
}

message BondConfigs {
    repeated BondConfig configs = 1;
}

message NaplesSimInfo {

    string              node_uuid       = 1;

    string              name            = 2;

    string              ip_address         = 3;
}

message K8sMasterConfig {
    // k8s master IP - not used for master node
    string k8s_master_ip        = 1;

    // k8s master token
    string k8s_master_token     = 2;
}

// Node captures personality details of an E2E node
message Node {
    // PersonalityType captures the node personality. naples node, venice node or qemu
    PersonalityType     type            = 1;

    // Image captures the the built artifacts that need to be loaded on the node depending on the personality type
    string              image           = 2;

    // IP Address of the node
    string              ip_address      = 3;

    // Node identifier
    string              name            = 4;

    repeated Entity     entities        = 5;

    // Node specific configs
    oneof node_info {
        // naples
        NaplesConfigs   naples_configs              = 6;

        VeniceConfig    venice_config               = 7;

        ThirdPartyNicConfig third_party_nic_config  = 8;

        // naples multiple sim on same node
        NaplesMultiSimConfig    naples_multi_sim_config    = 9;

        // naples multiple sim on same node
        NaplesControlSimConfig    naples_control_sim_config    = 10;

        VcenterConfig           vcenter_config = 11;

        // kubernetes master config
        K8sMasterConfig         kube_config    = 12;
    }

    // NodeStatus captures the details of the node action
    IotaAPIResponse     node_status     = 13;

    // Optionally run a start up script during add or reload.
    string              startup_script  = 14;

    // ESX configuration if node type is esx
    VmwareESXConfig     esx_config      = 15;

    // Node OS
    TestBedNodeOs       os              = 16;

    // Flag to indicate that node is being reload from saved config
    bool                reload          = 17;


    string              RestartMethod   = 19;

    oneof overlay_configs {
        BondConfigs     bond_configs    = 20;
    }

    // node install information
    InstallInfo       install_info      =  21;
 }

message ApcInfo {
    string ip = 1;
    string port = 2;
    string username = 3;
    string password = 4;
}

message NaplesMultiSimConfig {

    // Number of sim instances
    uint32  num_instances         = 1;

    // Subnet to be used for naples Instances
    string network                = 2;

    // gateway to be used for naples Instances
    string gateway                = 3;

    // x
    string ip_addr_range          = 4;

    // parent network to be used.
    string parent                 = 5;

    // either nic type or parent interface
    string          nic_type      = 6;

    // Venice IPs to use, if specified agent will come up im managed mode.
    repeated string venice_ips    = 7;

    // Sim infos
    repeated NaplesSimInfo sims_info = 8;

    //start of the mac-address if specified
    string          mac_address_start = 9;
}

message NaplesControlSimConfig {

    // parent network to be used.
    string control_intf           = 1;

    // Venice IPs to use, if specified agent will come up im managed mode.
    repeated string venice_ips    = 2;

    // control IP of the sim
    string control_ip             = 3;

    //node uuid
    string node_uuid              = 4;
}

message NaplesConfig {

    // Control interface to use
    string control_intf          = 1;

    // Control ip to use
    string control_ip            = 2;

    // Data interfaces to use
    repeated string data_intfs   = 3;

    // Venice IPs to use, if specified agent will come up im managed mode.
    repeated string venice_ips   = 4;

    // device-intfs , returned as part of add node
    repeated Interfaces  host_intfs   = 5;

    // Naples IP in hw mode.
    string naples_ip_address     = 6;

    // Naples IP in hw mode.
    string naples_secondary_ip_address  = 7;

    // Naples username in hw mode.
    string naples_username       = 8;

    // Naples username in hw mode.
    string naples_password       = 9;

    // Nic type
    string nic_type              = 10;

    // hint, if there are more than 1 naples in system
    string nic_hint             = 11;

    // nodeuuid return as part read
    string node_uuid            = 12;

    // unique Identifier
    string name                 = 13;

    NaplesOperationMode naples_mode     = 14;
    // k8s master info
    K8sMasterConfig kubeInfo    = 15;

    // if not internal mgmt
    bool     no_mgmt = 16;

    // set to true if workloads should not share switch
    bool     no_switch_share = 17;
}

message NaplesConfigs {
    repeated NaplesConfig configs = 1;
}

message ThirdPartyNicConfig {

    // nic type
    string          nic_type     = 1;
    // host intfs , returned as part of add node
    repeated string host_intfs   = 2;
}

message MellanoxConfig {

    // host intfs , returned as part of add node
    repeated string host_intfs   = 5;
}

message BroadcomConfig {

    // host intfs , returned as part of add node
    repeated string host_intfs   = 5;
}

message IntelConfig {

    // host intfs , returned as part of add node
    repeated string host_intfs   = 5;
}

message VenicePeer {

    // hostname of peer node
    string  host_name   = 1;

    // ip of the peer node
    string  ip_address  = 2;
}

message VeniceClusterInfo {
    //license for cluster
    repeated string licenses          = 1; 
}


message VeniceConfig {

    // Control interface to use
    string control_intf               = 1;

    // Control ip to use
    string control_ip                 = 2;

    // Peers to add host name entries.
    repeated VenicePeer venice_peers  = 3;

    VeniceClusterInfo cluster_info    = 4;

}


message WorkloadMsg{
    // API Response
    IotaAPIResponse api_response        = 1;

    // Workload Operation Type
    Op workload_op                      = 2;

    // List of workloads
    repeated Workload workloads         = 3;

}


enum InterfaceType {
    INTERFACE_TYPE_NONE       = 0;
    INTERFACE_TYPE_NATIVE     = 1;
    INTERFACE_TYPE_VSS        = 2;
    INTERFACE_TYPE_SRIOV      = 3;
    INTERFACE_TYPE_DVS        = 4;
    INTERFACE_TYPE_DVS_PVLAN  = 5;
    INTERFACE_TYPE_BOND       = 6;
    INTERFACE_TYPE_MGMT       = 7;
}

enum WorkloadType {
    WORKLOAD_TYPE_NONE                       = 0;
    WORKLOAD_TYPE_CONTAINER                  = 1;
    WORKLOAD_TYPE_VM                         = 2;
    WORKLOAD_TYPE_BARE_METAL                 = 3;
    WORKLOAD_TYPE_BARE_METAL_MAC_VLAN        = 4;
    WORKLOAD_TYPE_BARE_METAL_MAC_VLAN_ENCAP  = 5;
    WORKLOAD_TYPE_CONTAINER_MAC_VLAN         = 6;
}

message DvsInfo {
    // switch name 
    string switch_name                      = 1;

    // network name
    string network_name                    = 2;
}

message ExposedPorts {
    string  Port    = 1;
    
    string  Proto   = 2;
}

message Interfaces {
    
    InterfaceType       type            = 1;

    repeated string     interfaces      = 2;

    string              parent          = 3;
}

message Interface {
   
    // IPAddress of the workload. Represent this as a CIDR block. 10.0.0.1/16 will be
    // interpreted as 10.0.0.1 is the IP of the workload container and it belongs to a /16 subnet.
    string ip_prefix                        = 1;

    string ipv6_prefix                      = 2;

    // MAC Address of the workload
    string mac_address                      = 3;

    // Interface to which workload needs to be attached.
    string interface                        = 4;

    // Parent Interface for classic workload
    string parent_interface                 = 5;

    InterfaceType interface_type            = 6;

    // Interface to which workload needs to be attached.
    uint32 pinned_port                      = 7;

    // uplink vlan for the traffic going outside node.
    uint32 uplink_vlan                      = 8;

    // Secondary IPv4 addresses
    repeated string sec_ip_prefix           = 9;

    // Secondary IPv6 addresses
    repeated string sec_ipv6_prefix         = 10;

    // Data VLAN for the workload
    uint32 encap_vlan                       = 11;

    // Data VLAN for the workload
    uint32 secondary_encap_vlan             = 12;

        //If interface type is DVS
     DvsInfo  dvs                           = 13;

     string   switch_name                   = 14;
    
     string   network_name                  = 15;

    uint32    interface_index               = 16;

     // device hosting parent interface
     string   device_name                   = 17;
}

message Workload {
    // Workload Identifier
    string workload_name                    = 1;

    // Workload Type
    WorkloadType workload_type              = 2;

    // Workload image
    string workload_image                   = 3;

    // Node on which this needs to be spun up
    string node_name                        = 4;

    // Workload Status
    IotaAPIResponse workload_status         = 5;

    repeated Interface interfaces           = 6;

    uint32 cpus                             = 7;

    // Memory allocated
    uint32 memory                           = 8;

    // Management IP of the workload if VM
    string mgmt_ip                          = 9;

    repeated ExposedPorts exposed_ports     = 10;
}

enum TriggerOp {
    TYPE_NONE           = 0;
    EXEC_CMDS           = 1;
    WAIT_FOR_CMDS       = 2;
    TERMINATE_ALL_CMDS  = 3;
}

enum TriggerMode {
    MODE_NONE                 = 0;
    TRIGGER_SERIAL            = 1;
    TRIGGER_PARALLEL          = 2;
    //Run commands on node in parallel.
    TRIGGER_NODE_PARALLEL     = 3;
}


message TriggerMsg {
    //API Status
    IotaAPIResponse api_response            = 1;

    // Type of the trigger operation
    TriggerOp trigger_op                    = 2;

    // Trigger mode specifies whether commands have to be
    // executed serially or in parallel
    TriggerMode trigger_mode                = 3;

    // Command Request params
    repeated Command    commands            = 4;
}

enum CommandMode {
    COMMAND_NONE        = 0;
    COMMAND_FOREGROUND  = 1;
    COMMAND_BACKGROUND  = 2;
}
message Command {
    // Whether to run the command in foreground or background
    CommandMode     mode               = 1;

    // Fully qualified command line that needs to be called
    string          command            = 2;

    // Node on which trigger needs to be executed
    string          node_name          = 3;

    // entity name to run command on
    string          entity_name         = 4;

    // foreground command timeout
    uint32          foreground_timeout  = 5;

    // running directory relative to entity dir to run command
    string          running_dir         = 6;

    // ================ Output Parameters ===================
    // StdOut of the comamnd
    string          stdout              = 7;

    // StdErr of the command
    string          stderr              = 8;

    // Exit code of the command
    int32          exit_code            = 9;

    // command handle. Useful only for background commands
    string          handle              = 10;

    // Whehther command timed out
    bool            timed_out           = 11;

    // Copy Stderr on error only
    bool            stdout_on_err       = 12;

    // Copy Stderr on error only
    bool            stderr_on_err       = 13;

    //retries on failure, for unreliable commands
    uint32          retries_on_failure  = 14;
}


enum WorkloadMoveType {
    WORKLOAD_MOVE_TYPE_DEFAULT = 0;
}

message WorkloadMove {

    // workload move type
    WorkloadMoveType     type            = 1;

   // src node name
   string              src_dc_name       = 2;

   // dst node name
   string              dst_dc_name       = 3;

    // src node name
    string              src_node_name    = 4;

    // dst node name
    string              dst_node_name    = 5;

    // entity name to run command on
    string              workload_name    = 6;

    //override vlan after vmotion if set
    uint32              vlan_override    = 7;

    //current vlan if we want to override after move
    uint32              current_vlan     = 8;

    //Switch name for vlan override
    string              switch_name      = 9;

    //Abort Workload Move after time in sec (if non-zero)
    uint32              abort_time       = 10;

    // workload move response
    IotaAPIResponse     api_response     = 11;
}

// WorkloadMoveMsg move workloads 
message WorkloadMoveMsg {
    IotaAPIResponse api_response          = 1;

    // List of workload moves
    repeated WorkloadMove workload_moves  = 2;

    //Orchestrator node 
    string orchestrator_node              = 3;

    // number of parallel moves
    uint32 num_parallel_moves             = 4;
}

enum NetworkType {
    NETWORK_TYPE_DEFAULT      = 0;

    //Vmotion network
    NETWORK_TYPE_VMK_VMOTION  = 1;
}

message Network {
    NetworkType          Type      = 1;
    //Network name
    string               name      = 2;

    uint32               vlan      = 3;

    //nodes that network has to be on
    string               node     = 4; 


    bool                 dhcp      =  6;

    string               mac_address =  7;
}


// NetworksMsg 
message NetworksMsg {
    IotaAPIResponse api_response     = 1;

    // List of workload moves
    repeated Network Network         = 2;

    string    dc                     = 3;

    string    cluster                = 4;
   
    string    switch                 = 5;
  
    //Orchestrator node 
    string orchestrator_node         = 6;
}



// Captures the overall health of the e2e cluster
message ClusterHealthMsg {
    IotaAPIResponse api_response    = 1;
    // Individual node health statuses
    repeated NodeHealth health      = 2;
}


message NodeHealth {
    enum HealthCode {
        HEALTH_OK       = 0;
        NAPLES_DOWN     = 1;
        NODE_DOWN       = 2;
        APP_DOWN        = 3;
        NOT_PROVISIONED = 4;
    }
    // Name of the node
    string  node_name        = 1;

    // Cluster is complete or not (Could by used by other nodes to check their admission status for health check)
    bool cluster_done        = 2;

    // Health code of the node
    HealthCode health_code   = 3;

    // optionally set the message to indicate exactly why node health is bad
    string message = 4;
}

message NetworkQosClass {
    //name of qos
    string name = 1;

    //MTU size to be set
    uint32 mtu = 2;

    //pause pfc qos
    uint32 pause_pfc_cos = 3;
}

message NetworkPolicyQos {

    //Name of network policy qos
    string name = 1;

    repeated NetworkQosClass qos_classes = 2;

}

message NetworkDscpClass {
    //name of qos
    string name = 1;

    //dscp to be set
    string dscp = 2;

    //cos
    uint32 cos = 3;
}

message NetworkDscpPolicy {

    //Name of network dscp
    string name = 1;

    repeated NetworkDscpClass dscp_classes = 2;
}

message NetworkQueueClass {
    //name of queue
    string name = 1;

    //dscp to be set
    uint32 priority = 2;

    //bandwidth remaining percent
    uint32 percent = 3;
}

message NetworkQueuePolicy {

    //Name of network queue policy
    string name = 1;

    repeated NetworkQueueClass queue_classes = 2;
}

message PortChannelConfig {

    // switch ip
    string switch_ip = 1;

    // Name of the port-channel
    string ch_number            = 2;

    // member ports
    repeated string ports       = 3;
}

message PortChannelConfigs {

    repeated PortChannelConfig configs = 1;
}

message DataSwitch {

    enum Speed {
        Speed_100G           = 0;
        Speed_50G            = 1;
        Speed_10G            = 2;
        Speed_auto           = 3;
    }
    // IP address of the switch
    string ip = 1;

    // Username of the switch
    string username = 2;

    // Password of the switch
    string password = 3;

    // switch ports used
    repeated string ports = 4;

    // Speed of each port
    Speed speed = 5;

    //MTU size to be set
    uint32 mtu = 6;

    //Flow Control Receive  enabled/disabled
    bool flow_control_receive = 7;

    //Flow Control Send enabled/disabled
    bool flow_control_send = 8;

    //Network Qos to be used.
    NetworkPolicyQos qos = 9;

    //disable igmp
    bool igmp_disabled = 10;

    //Network dscp to be used.
    NetworkDscpPolicy dscp = 11;

    //Network queue to be used.
    NetworkQueuePolicy queue = 12;
}

message License {
    enum Type {
        LICENSE_NONE          = 0;
        LICENSE_VCENTER       = 1;
    }

    string username = 1;

    string password = 2;

    string key      = 3;

    string type     = 4;
}

message TestBedMsg {
    // API Response
    IotaAPIResponse api_response        = 1;

    // Allocated vlans based off of the port id
    // First one will always be native vlan
    repeated uint32 allocated_vlans     = 2;

    // Native vlan for the testbed
    uint32  native_vlan                 = 3;

    // List of node IP addresses
    repeated TestBedNode nodes          = 4;

    // Node username
    string username                     = 5;

    // Node password
    string password                     = 6;

    // Testbed ID
    uint32 testbed_id                   = 7;

    // DataSwitch
    repeated DataSwitch data_switches   = 8;

    // Reboot Nodes
    bool reboot_nodes                   = 9;

    // global licenses
    repeated License licenses           = 10;
   
    // Testbed Jobc/testbed json file
    string testbed_json_file            = 11;

    //reset nodes, don't install new image
    bool only_reset                     = 12;

    //Testbed InstanceID
    string testbed_inst_id              = 13;
}

message InstallInfo {
    TestBedNode       node                   =  1;

    //reset nodes, don't install new image
    bool              only_reset             =  2;

    repeated string   images                 =  3;

    string            testbed_json_file      =  4;

}

message TestNodesMsg {
    // API Response
    IotaAPIResponse api_response        = 1;

    // List of node IP addresses
    repeated TestBedNode nodes          = 2;

    // Node username
    string username                     = 3;

    // Node password
    string password                     = 4;

    // Reboot Nodes
    bool reboot_nodes                   = 5;

    // global licenses
    repeated License licenses           = 13;
}



enum SwitchOp {
    OP_NONE             = 0;
    SHUT_PORTS          = 1;
    NO_SHUT_PORTS       = 2;
    FLAP_PORTS          = 4;
    VLAN_CONFIG         = 5;
    PORT_PAUSE_CONFIG   = 6;
    PORT_PFC_CONFIG     = 7;
    PORT_QOS_CONFIG     = 8;
    PORT_QUEUING_CONFIG = 9;
    CREATE_QOS_CONFIG   = 10;
    CREATE_PORT_CHANNEL = 11;
    DELETE_PORT_CHANNEL = 12;
    LLDP_INFO_GET       = 13;
}

message VlanConfig {

    //unset specified vlans
    bool             unset = 1;

    string           vlan_range = 2;

    uint32           native_vlan = 3;
}

message SwitchFlapInfo {

    //how many times to flap
    uint32 count     = 1;

    //flap interval
    uint32  interval = 2;

    //how long link should be down
    uint32  down_time = 3;
}

message PortPauseConfig {
	bool enable	= 1;
}

message PortPfcConfig {
	bool enable	= 1;
}

message PortQosConfig {
	bool enable	    = 1;
	string params	= 2;
}

message PortQueuingConfig {
	bool enable 	= 1;
	string params	= 2;
}

message PortLLDPInfo {
    string  mgmt_addr  = 1;
    string  port_desc  = 2;
    string  sys_desc   = 3;
    string  sys_name   = 4;
    string  port       = 5;
    string  switch     = 6;
}

message LLDPInfo {
    repeated PortLLDPInfo ports_lldp_info = 1;
}

message SwitchMsg {
    // API Response
    IotaAPIResponse api_response        = 1;

    SwitchOp            op              = 2;

    // operation info
    oneof op_info {
        SwitchFlapInfo flap_info          = 3;
    }
    // DataSwitch
    repeated DataSwitch data_switches    = 4;

    // Node specific configs
    oneof switch_info {
        // naples
        VlanConfig    vlan_config        = 5;
    }

	oneof pause_info {
		PortPauseConfig port_pause  	= 6;
	}

	oneof pfc_info {
		PortPfcConfig port_pfc  		= 7;
	}

	oneof port_qos_info {
		PortQosConfig port_qos       	= 8;
	}

	oneof port_queuing_info {
		PortQueuingConfig port_queuing	= 9;
    }
    

    PortChannelConfigs  port_channel_configs = 10;

    LLDPInfo        lldp_info                = 11;
}

enum TestBedNodeType {
    TESTBED_NODE_TYPE_NONE       = 0;
    TESTBED_NODE_TYPE_SIM        = 1;
    TESTBED_NODE_TYPE_HW         = 2;
    //Run multiple sim on HW
    TESTBED_NODE_TYPE_MULTI_SIM  = 3;
    TESTBED_NODE_TYPE_VENICE_BM  = 4;
    //Vcenter node
    TESTBED_NODE_TYPE_VCENTER     = 5;

    TESTBED_NODE_TYPE_THIRD_PARTY = 6;
    TESTBED_NODE_TYPE_K8S_MASTER  = 7;
}

enum TestBedNodeOs {
    TESTBED_NODE_OS_LINUX   = 0;
    TESTBED_NODE_OS_FREEBSD = 1;
    TESTBED_NODE_OS_ESX     = 2;
    TESTBED_NODE_OS_VCENTER = 3;
    TESTBED_NODE_OS_WINDOWS = 4;
}

message TestBedNode {
    TestBedNodeType type            = 1;
    // Node Management IP Address
    string ip_address               = 2;
    // Node CIMC IP Address

    string cimc_ip_address          = 3;
    // Node CIMC username
    string cimc_username            = 4;
    // Node CIMC password
    string cimc_password            = 5;
    // NIC Management IP Address

    // Node CIMC username
    string esx_username             = 6;
    // Node CIMC password
    string esx_password             = 7;
    // NIC Management IP Address

    string nic_ip_address           = 8;
    // NIC Console ip address
    string nic_console_ip_address   = 9;
    // NIC Console port
    string nic_console_port         = 10;
    // NIC Console username
    string nic_console_username     = 11;
    // NIC Console password
    string nic_console_password     = 12;
    // NIC username
    string nic_username             = 13;
    // NIC password
    string nic_password             = 14;
    // Initialization script - used for HW
    string init_script              = 15;
    // Control interface for this node.
    string control_intf             = 16;
    // Switch ports for this node.
    repeated uint32 switch_port_ids = 17;
    // Node OS
    TestBedNodeOs os = 18;

    // IP address of ESX control vm
    string esx_ctrl_node_ip_address = 19;

    // NIC uuid
    string nic_uuid                 = 20;
    // node name
    string node_name                = 21;

    //server type
    string server_type              = 22;

    //license
    string license                  = 23;

    ApcInfo apc_info                = 24;

    //mgmt intf
    string mgmt_intf                = 25;

    //Don't setup mgmt on naples
    bool no_mgmt                    = 26;

    string cimc_ncsi_ip             = 27;

    //auto discover on install
    bool auto_discover_on_install   = 28;

    // warmd instance name
    string instance_name            = 29;
}

// CopyDirection defines direction whether to copy in or copy out
enum CopyDirection {
        DIR_NONE    = 0;
        DIR_IN      = 1;
        DIR_OUT     = 2;
}


// EntityCopyMsg takes care of copying to entity.
// If copy in to entity, destination will be prefixed with entity directory on iota node.
// if copy out from entity, files will be prefixed with entity directory on iota node.
message EntityCopyMsg {
    // API Response for the copy operation
    IotaAPIResponse api_response    = 1;

    // Copy Direction.
    CopyDirection direction         = 2;

    // Node to do copy operation
    string node_name                = 3;

    // workload context to do copy operation
    string entity_name              = 4;

    // list of files that needs to be copied
    repeated string files           = 5;

    // destination directory
    string dest_dir                 = 6;
}

message DownloadAssetsMsg {
    // API Response for the download operatin
    IotaAPIResponse api_response    = 1;

    // Asset Name
    string  asset_name              = 2;

    // Release Version
    string release_version          = 3;

    // parent folder to download
    string parent_dir               = 4;
}

message PrepareWorkspaceMsg {
    // API Response for the prepare operatin
    IotaAPIResponse api_response    = 1;

    // FW Version
    string fw_version               = 2;

    // Driver Version
    string driver_version           = 3;

    // Venice Version
    string venice_version           = 4;

    // parent folder to retrieve
    string parent_dir               = 5;
}

message UnsetBreakoutMsg {
    // API Response
    IotaAPIResponse api_response        = 1;

    // DataSwitch
    repeated DataSwitch data_switches   = 2;
}

