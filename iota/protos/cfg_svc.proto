//------------------------------------------------------------------------------
// {C} Copyright 2018 Pensando Systems Inc. All rights reserved
//
// protobuf specification for IO Test Automation Config Management Service
//------------------------------------------------------------------------------

syntax = "proto3";
package iotamodel;

import "types.proto";

// ---------------------------- Config API ----------------------------
// Config Management Service
service ConfigMgmtApi {

    // MakeCluster brings up a Venice Cluster
    rpc MakeCluster(MakeClusterMsg) returns (MakeClusterMsg) {};

    // ConfigureAuth will perform the following actions:
    // Create an admin role, assign super admin privileges, log in and return the JWT Token back
    rpc ConfigureAuth(AuthMsg) returns (AuthMsg) {};

    rpc InitCfgService(InitConfigMsg) returns (InitConfigMsg) {};

    // GenerateConfigs accepts the topology information and config information and auto generates the config that needs
    // to be pushed. The intent is to support only the user facing objects at NAPLES REST or Venice REST Level.
    // It also pushes the base config either to Venice/NAPLES REST Endpoint
    rpc GenerateConfigs (GenerateConfigMsg) returns (ConfigMsg) {};

    rpc PushConfig (ConfigMsg) returns (ConfigMsg) {};

    // Query API queries the base config to match any parameters
    rpc QueryConfig(ConfigQueryMsg) returns (ConfigMsg) {};
}

message AuthMsg {
    string AuthToken                    = 1;
    IotaAPIResponse api_response        = 2;
}

message MakeClusterMsg {
    string endpoint                     = 1;
    string health_endpoint              = 2;
    string config                       = 3;
    IotaAPIResponse api_response        = 4;
}

enum EntrypointType {
    ENTRYPOINT_NONE    = 0;
    NAPLES_REST        = 1;
    VENICE_REST        = 2;
}
message InitConfigMsg{
    // ConfigEntrypoint captures what object model configs to generate for a given testbed.
    // Could either be venice object model or Agent object model
    IotaAPIResponse api_response        = 1;
    EntrypointType  entry_point_type    = 2;

    repeated string endpoints           = 3;

    repeated uint32 vlans               = 4;

    repeated string endpoint_status     = 5;

}
message GenerateConfigMsg {
    repeated string naples_uuids    = 1;
    IotaAPIResponse api_response    = 2;
}

message ConfigMsg {
    repeated ConfigObject configs   = 1;
    string AuthToken                = 2;
    IotaAPIResponse api_response    = 3;
}

enum CfgMethodType {
    CFG_METHOD_NONE     = 0;
    CFG_METHOD_CREATE   = 1;
    CFG_METHOD_UPDATE   = 2;
    CFG_METHOD_DELETE   = 3;
}
message ConfigObject {
    // Method indicates the REST method to call on the object.
    CfgMethodType       method = 1;

    // Config captures the Marshaled JSON object
    string Config = 2;
}

enum CfgDbView {
    CFG_DB_VIEW_NONE    = 0;
    CFG_DB_VIEW_CFG_SVC = 1;
    CFG_DB_VIEW_TESTBED = 2;
}
message ConfigQueryMsg {
    IotaAPIResponse         api_response    = 1;
    // View on which this query should operate
    CfgDbView               view            = 2;
    // Object Kind
    string                  kind            = 3;

    // MatchSelector accepts a multiple key value pair, with a default AND between them
    repeated MatchSelector  selectors       = 4;
}

// Key Value pairs.
message MatchSelector {
    string key = 1;
    string value = 2;
}
