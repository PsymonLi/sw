# Crypto Asym API DoL support routines
import pdb
import copy
import binascii

import types_pb2                as types_pb2

from config.store               import Store
from infra.common.objects       import ObjectDatabase as ObjectDatabase
from infra.common.logging       import logger
from infra.common.glopts        import GlobalOptions
import infra.config.base        as base
import config.hal.defs          as haldefs
import config.hal.api           as halapi
import crypto_apis_pb2          as crypto_apis_pb2

'''
    ECC Tests
'''
# ECC P256
# Domain Parameters

p = \
    b'\xFF\xFF\xFF\xFF\x00\x00\x00\x01' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\xFF\xFF\xFF\xFF' \
    b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF'
a = \
    b'\xFF\xFF\xFF\xFF\x00\x00\x00\x01' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\xFF\xFF\xFF\xFF' \
    b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC'
b = \
    b'\x5A\xC6\x35\xD8\xAA\x3A\x93\xE7' \
    b'\xB3\xEB\xBD\x55\x76\x98\x86\xBC' \
    b'\x65\x1D\x06\xB0\xCC\x53\xB0\xF6' \
    b'\x3B\xCE\x3C\x3E\x27\xD2\x60\x4B'
Gx = \
    b'\x6B\x17\xD1\xF2\xE1\x2C\x42\x47' \
    b'\xF8\xBC\xE6\xE5\x63\xA4\x40\xF2' \
    b'\x77\x03\x7D\x81\x2D\xEB\x33\xA0' \
    b'\xF4\xA1\x39\x45\xD8\x98\xC2\x96'
Gy = \
    b'\x4F\xE3\x42\xE2\xFE\x1A\x7F\x9B' \
    b'\x8E\xE7\xEB\x4A\x7C\x0F\x9E\x16' \
    b'\x2B\xCE\x33\x57\x6B\x31\x5E\xCE' \
    b'\xCB\xB6\x40\x68\x37\xBF\x51\xF5'
n = \
    b'\xFF\xFF\xFF\xFF\x00\x00\x00\x00' \
    b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF' \
    b'\xBC\xE6\xFA\xAD\xA7\x17\x9E\x84' \
    b'\xF3\xB9\xCA\xC2\xFC\x63\x25\x51'



# ECC Point Multiplication test

def ecc_point_mul_p256(p, n, a, b, gx, gy, k):

    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_ECC_POINT_MUL_FP
    req_spec.ecc_point_mul_fp.ecc_domain_params.KeySize = 32
    req_spec.ecc_point_mul_fp.ecc_domain_params.p = p
    req_spec.ecc_point_mul_fp.ecc_domain_params.a = a
    req_spec.ecc_point_mul_fp.ecc_domain_params.b = b
    req_spec.ecc_point_mul_fp.ecc_domain_params.G.x = gx
    req_spec.ecc_point_mul_fp.ecc_domain_params.G.y = gy
    req_spec.ecc_point_mul_fp.ecc_domain_params.n = n

    req_spec.ecc_point_mul_fp.ecc_point.x = gx
    req_spec.ecc_point_mul_fp.ecc_point.y = gy

    req_spec.ecc_point_mul_fp.k = k

    print("Invoking CryptoAPI: ECC Point Multiplication P-256");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.ecc_point_mul_fp.Q.x, \
        resp_spec.ecc_point_mul_fp.Q.y
    else:
        print ("API Failed")
        return resp_spec.api_status, 0, 0

def ecc_point_mul_p256_test():
    global p
    global a
    global b
    global Gx
    global Gy
    global n

    k = \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x09'
    exp_qx = \
            b'\xEA\x68\xD7\xB6\xFE\xDF\x0B\x71' \
            b'\x87\x89\x38\xD5\x1D\x71\xF8\x72' \
            b'\x9E\x0A\xCB\x8C\x2C\x6D\xF8\xB3' \
            b'\xD7\x9E\x8A\x4B\x90\x94\x9E\xE0'
    exp_qy = \
            b'\x2A\x27\x44\xC9\x72\xC9\xFC\xE7' \
            b'\x87\x01\x4A\x96\x4A\x8E\xA0\xC8' \
            b'\x4D\x71\x4F\xEA\xA4\xDE\x82\x3F' \
            b'\xE8\x5A\x22\x4A\x4D\xD0\x48\xFA'
    computed_qx = 0
    computed_qy = 0

    ret, computed_qx, computed_qy  = ecc_point_mul_p256(p, n, a, b, Gx, Gy, k)

    if (ret != types_pb2.API_STATUS_OK):
        print("API ecc_point_mul_p256 failed with error")
        return False

    if (computed_qx == exp_qx) and (computed_qy == exp_qy):
        print ("Response Matched:")
        print("Qx: %s" % binascii.hexlify(computed_qx))
        print("Qy: %s" % binascii.hexlify(computed_qy))
        return True
    else:
        return False

# ECDSA Signature Generate test

def ecdsa_p256_sig_gen(key_idx, p, n, a, b, gx, gy, da, k, h):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_ECDSA_SIG_GEN_FP
    req_spec.ecdsa_sig_gen_fp.key_idx = key_idx
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.KeySize = 32
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.p = p
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.a = a
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.b = b
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.G.x = gx
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.G.y = gy
    req_spec.ecdsa_sig_gen_fp.ecc_domain_params.n = n

    req_spec.ecdsa_sig_gen_fp.da = da
    req_spec.ecdsa_sig_gen_fp.k = k
    req_spec.ecdsa_sig_gen_fp.h = h

    print("Invoking CryptoAPI: ECDSA Signature Generate P-256");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.ecdsa_sig_gen_fp.r, \
        resp_spec.ecdsa_sig_gen_fp.s
    else:
        print ("API Failed")
        return resp_spec.api_status, 0, 0


def ecdsa_p256_sig_gen_test():
    global p
    global a
    global b
    global Gx
    global Gy
    global n

    k = \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x00' \
            b'\x00\x00\x00\x00\x00\x00\x00\x09'
    r = 0
    s = 0

    ret, r, s = ecdsa_p256_sig_gen(-1, p, n, a, b, Gx, Gy, k, k, n)
    if (ret != types_pb2.API_STATUS_OK):
        print("API ecdsa_p256_sig_gen failed with error")
        return False
    else:
        print("Not validating outputs r and s due to overridden k at model/openssl")
        print("r: %s" % binascii.hexlify(r))
        print("s: %s" % binascii.hexlify(s))
        return True


# ECDSA Signature Verify test
def ecdsa_p256_sig_verify(p, n, a, b, gx, gy, qx, qy, r, s, h):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_ECDSA_SIG_VERIFY_FP
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.KeySize = 32
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.p = p
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.a = a
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.b = b
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.G.x = gx
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.G.y = gy
    req_spec.ecdsa_sig_verify_fp.ecc_domain_params.n = n

    req_spec.ecdsa_sig_verify_fp.Q.x = qx
    req_spec.ecdsa_sig_verify_fp.Q.y = qy
    req_spec.ecdsa_sig_verify_fp.r = r
    req_spec.ecdsa_sig_verify_fp.s = s
    req_spec.ecdsa_sig_verify_fp.h = h

    print("Invoking CryptoAPI: ECDSA Signature Verify P-256");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status != types_pb2.API_STATUS_OK:
        print ("API Failed")

    return resp_spec.api_status


def ecdsa_p256_sig_verify_test():
    global p
    global a
    global b
    global Gx
    global Gy
    global n

    r = \
            b'\xa9\xc0\xbe\xa4\xb0\x64\xc6\x20' \
            b'\xdb\x60\x16\x72\x41\x41\xfb\x55' \
            b'\x22\xca\x97\x4d\x48\x3f\x19\x26' \
            b'\x54\xbb\x21\xd1\xcb\xb4\xa4\x8f'
    s = \
            b'\xed\x5e\x31\x00\xeb\x28\x40\xac' \
            b'\xe3\xed\xe4\xdc\x12\xd9\xa6\x1e' \
            b'\x1a\x7c\xa4\xb8\x26\x10\xe9\xb0' \
            b'\x9e\x7b\x93\x58\x19\xf8\xbd\x52'
    qx = \
            b'\xEA\x68\xD7\xB6\xFE\xDF\x0B\x71' \
            b'\x87\x89\x38\xD5\x1D\x71\xF8\x72' \
            b'\x9E\x0A\xCB\x8C\x2C\x6D\xF8\xB3' \
            b'\xD7\x9E\x8A\x4B\x90\x94\x9E\xE0'
    qy = \
            b'\x2A\x27\x44\xC9\x72\xC9\xFC\xE7' \
            b'\x87\x01\x4A\x96\x4A\x8E\xA0\xC8' \
            b'\x4D\x71\x4F\xEA\xA4\xDE\x82\x3F' \
            b'\xE8\x5A\x22\x4A\x4D\xD0\x48\xFA'

    ret = ecdsa_p256_sig_verify(p, n, a, b, Gx, Gy, qx, qy, r, s, n)
    if (ret != types_pb2.API_STATUS_OK):
        print("API ecdsa_p256_sig_verify_test failed with error")
        return False
    else:
        print("API ecdsa_p256_sig_verify_test succeeded")
        return True



'''
    RSA tests
'''

# Test Vectors
mod_n = \
    b'\xb2\x5b\x74\x04\x4e\x0b\xd1\xc0' \
    b'\x36\x3f\x75\xb1\x77\x0d\xa7\xbf' \
    b'\x0b\x5d\x1a\x2a\x3d\x2b\xe0\xb9' \
    b'\xb7\xb3\x7b\xd2\x0b\x9c\x3e\xf1' \
    b'\xbb\x80\x66\xe2\x51\x31\xd9\xcb' \
    b'\x03\x61\x5d\xad\x44\xbf\x11\x8a' \
    b'\x41\xdd\x2b\x08\x07\xbb\xb1\xa5' \
    b'\x03\x99\x14\x82\xe1\x41\xe7\x4d' \
    b'\x4c\x69\x7e\x28\x40\xfe\xe6\xba' \
    b'\xe7\x2f\xd7\x5c\x9e\xd6\x43\x06' \
    b'\x4a\x57\x7a\x48\x05\xf7\x13\x7e' \
    b'\xdb\x97\x43\x25\x4d\xa6\x89\xe7' \
    b'\x67\xb4\x47\x87\x9a\x18\xe5\xa6' \
    b'\x9c\x63\x97\x53\x1a\x61\xcf\x7f' \
    b'\xe7\xe5\x8a\xb4\x23\x08\x52\xf0' \
    b'\x61\xf2\x19\xe9\x5c\x35\xb6\x98' \
    b'\x7d\x72\x8d\x24\x48\xc7\xe0\x8a' \
    b'\x5d\xc7\xe3\xb3\x3b\x30\xde\x5a' \
    b'\x63\x63\x5e\x0b\x36\x7a\x11\xf8' \
    b'\x9b\x85\x9c\xac\xf9\xb0\x5f\xaf' \
    b'\xbd\xc1\xab\xbe\x78\x92\x29\x44' \
    b'\x76\x82\x42\x68\x6a\xde\xdc\x9e' \
    b'\x52\x7c\xe1\xe8\xc8\x81\xb8\x17' \
    b'\xaf\xc4\xe0\xbc\x93\x97\xce\x5d' \
    b'\x0b\xbf\x04\xc7\xfa\x03\x65\x60' \
    b'\x6f\xcb\x59\x51\x73\x54\x82\xad' \
    b'\xf0\x26\xe3\x62\xe8\xda\xe2\xd0' \
    b'\xf7\x5c\x77\xed\x22\xe3\x13\x0c' \
    b'\x1a\xd0\xcc\xb0\xaa\x4f\xfe\x7b' \
    b'\x20\x83\xf1\xaf\x93\xfc\xa8\x7f' \
    b'\x14\x1f\x82\x30\x2c\xfe\x4e\x1b' \
    b'\x0e\xf0\x00\xbe\x20\x0e\xdf\x81'

e = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x01\x00\x01'

plain_text = \
    b'\x01\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x01'

rsa_p = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\xed\x9b\xb0\x9f\x30\x83\xc4\x84' \
    b'\xfb\x0e\xe2\xc7\x33\xbf\xe9\x0a' \
    b'\x49\x20\x96\x5a\x2e\x56\x8c\xb2' \
    b'\x7e\x74\x14\x24\xce\x90\x22\x1f' \
    b'\x74\xbe\x73\xae\xbf\x81\x5b\x0f' \
    b'\xbb\xac\x90\xf7\xe2\xa5\x98\x23' \
    b'\x55\x80\x8e\x97\x91\x56\x5a\xfa' \
    b'\xc0\x2c\x54\x47\x7d\xa1\x2f\x61' \
    b'\x91\xae\x4c\x9f\xb0\x2d\x26\x12' \
    b'\x9e\x2a\xcf\x54\xa2\x3f\x1e\x6b' \
    b'\x90\xca\x6f\x7b\x62\xd6\x17\xf4' \
    b'\x04\xfb\x5d\x39\x9b\xd9\x3d\xf6' \
    b'\xc3\x0e\xfa\x9a\x60\xf4\x41\x35' \
    b'\xad\xcd\x46\x56\xa9\x30\x53\x47' \
    b'\xd5\xf8\x4b\x43\xd7\xd9\x90\x03' \
    b'\xe6\x6b\xc5\x1e\xf3\xc9\xd4\x3f'

rsa_q = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\xc0\x29\xae\x20\x1c\xb8\x25\xe2' \
    b'\xcf\xd9\xab\xc4\x3e\xbb\x6f\x9a' \
    b'\x43\x6c\xf9\x49\x4e\xd7\x64\x3e' \
    b'\x95\xb8\xa0\x27\x88\x81\x98\x97' \
    b'\x98\x13\xaf\x37\xf4\x7d\x8d\xac' \
    b'\xc2\xfa\x8a\xda\xaa\x7f\xe8\x5b' \
    b'\xd0\x65\x3a\x46\xdc\x18\x1a\xb7' \
    b'\x55\x2d\x2a\xac\x68\x53\xb1\xe0' \
    b'\x8d\x30\x4a\x5e\x30\x56\x13\x64' \
    b'\x0e\xe0\x5b\xae\x38\x65\x4c\x1d' \
    b'\x43\x03\xa8\xf3\x2b\x9b\x9d\x4b' \
    b'\x17\xdd\xf1\x4c\xc8\x7b\x2c\x77' \
    b'\xba\xd7\x1e\xf8\x6b\xb0\xda\xd7' \
    b'\xd5\xa7\x03\xe4\x95\x26\xe2\x21' \
    b'\x7b\xcb\x92\x38\x5b\x60\x25\xbe' \
    b'\x42\xe0\x1b\x6d\x4b\xa3\x5c\x3f'

rsa_d = \
    b'\x72\x37\xb0\xbf\x44\xff\xba\xae' \
    b'\x1d\xcf\x5b\xde\x6f\x00\x56\xa9' \
    b'\x38\x6c\xc1\xe1\xc4\xd4\xc1\x90' \
    b'\x0d\x3d\x2a\x91\x23\x90\x46\x9a' \
    b'\xe5\x59\x60\x09\x94\xb7\x98\xe2' \
    b'\xb2\x62\x7a\xec\x07\xf7\x58\x13' \
    b'\x33\x04\xa0\x96\xfe\xe4\xca\xe9' \
    b'\x82\xb9\x58\x72\x4c\x30\xb9\x20' \
    b'\x3e\x4b\xdc\x57\x88\xef\xf3\xf0' \
    b'\x43\x36\xd6\xf2\xe0\x61\x14\x01' \
    b'\x06\x40\xa8\xf5\x50\xa4\x9e\x5e' \
    b'\x81\xdf\x87\x47\x6f\x47\xb4\x4e' \
    b'\x75\x91\xf4\xb0\xb9\x15\x32\x94' \
    b'\x14\xd8\x8e\x42\xd0\xc5\x4c\x6d' \
    b'\x7b\xa2\xfa\xc5\x4b\x1d\xfc\x87' \
    b'\x26\x22\x35\x47\xc5\x1e\x3c\xb4' \
    b'\xad\x80\x19\x12\xe0\x28\x0c\x52' \
    b'\xad\xbd\xc9\xb9\xb5\x85\xd1\x7f' \
    b'\xd6\x79\x8b\x39\xcf\x67\x1a\x4b' \
    b'\xc8\xf8\x3d\xb0\x0c\xd4\x0d\x8f' \
    b'\x99\x37\x7c\x69\xb8\xe0\x17\xd6' \
    b'\x3a\xfa\xa3\xe6\x1b\x5c\xa5\xca' \
    b'\xec\xf2\x42\x3d\xe8\x7f\x17\xe9' \
    b'\x1b\x0f\xa3\x4a\x31\x30\x02\x29' \
    b'\x59\x02\x8c\x2c\x7d\x52\x20\x4d' \
    b'\x0d\xc3\xa6\xa3\xfc\x91\xe0\x94' \
    b'\x7b\x67\xbd\x68\xe8\x31\x2c\xd6' \
    b'\x97\x99\xa1\x3c\xc3\xd1\x75\xd7' \
    b'\xa1\x72\x87\x8c\x1b\xb5\x60\x55' \
    b'\x93\xdc\x3f\x7f\x77\x8d\x81\x7a' \
    b'\xb0\xc1\xa1\x63\x04\x13\x4b\x00' \
    b'\xba\xe6\xf5\x1b\x1b\xe0\x4e\xc5'

rsa_dp = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x1a\xb7\x7b\xd7\x9a\x73\xe6\x7f' \
    b'\xf1\x5e\xce\x1f\x09\xf1\x95\x39' \
    b'\x83\xd9\x77\x2e\x72\xb1\x66\xa6' \
    b'\x97\x53\x64\x04\x73\x79\x7f\x6c' \
    b'\xbc\x0a\xc2\x25\x2f\x01\x53\x84' \
    b'\xe4\x5c\x55\xfc\x99\x6e\x77\x39' \
    b'\xd9\xde\x57\xaa\x31\x3c\x5d\x84' \
    b'\x7e\x61\x3d\xa4\xc0\x3a\x84\x82' \
    b'\x5b\x08\x17\x33\x89\x72\xba\x2a' \
    b'\x33\xc0\xaa\x89\x60\xa8\xea\x39' \
    b'\xbc\x11\x17\x11\xef\x9e\x15\x19' \
    b'\x6a\x09\xfd\x84\x81\xc2\x9e\x96' \
    b'\x05\x7e\xc4\xac\xe1\x23\xf5\xc5' \
    b'\x1c\x62\xcd\x7a\xe7\x11\x38\xfc' \
    b'\x05\xd2\x22\x5c\x61\x83\xe4\x0e' \
    b'\x9c\x35\x17\xf8\x0f\xff\x6c\xaf'

rsa_dq = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x14\x66\xd8\x73\xd4\x58\xc0\xbc' \
    b'\xf9\xf0\x54\x4a\x3b\x96\xce\xdc' \
    b'\x83\xf8\x17\xe7\x6e\x95\x73\xb1' \
    b'\x29\x58\x36\xb8\xbb\xc7\x76\x99' \
    b'\xf1\xad\x75\x56\xed\x80\x3f\x00' \
    b'\x6e\x9b\x07\x0e\xfc\x37\x24\x46' \
    b'\x4b\x33\xd4\x22\x1d\xcf\xf9\x56' \
    b'\x29\x96\xe8\x06\xf1\xf4\xa0\xd8' \
    b'\x04\x65\x72\x1f\xd9\xe5\xe9\x9d' \
    b'\x1f\xef\x36\x0c\xa3\x34\x2e\x06' \
    b'\x95\x4c\xd8\x2d\x29\x1e\x16\x6f' \
    b'\x18\x93\x99\xc0\xdb\x30\x28\xa2' \
    b'\x75\x95\xcd\x55\xf6\xa9\x0a\x33' \
    b'\x0c\x1d\xf5\x4d\xd9\x80\x0d\x56' \
    b'\x1c\xbc\x9a\x43\x9d\x7f\xf1\xc1' \
    b'\xe7\x7b\xbf\xad\xb4\xf0\x1d\x25'

rsa_qinv = \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x00\x00\x00\x00\x00\x00\x00\x00' \
    b'\x5e\x5d\x41\x73\xdb\xc4\x12\xc3' \
    b'\x7f\xac\x73\xd0\x8e\x76\xfe\x1d' \
    b'\x9d\xd0\x88\xa6\x4c\x67\x3a\x68' \
    b'\x98\x04\x7b\xe6\xe8\x71\x0b\x5f' \
    b'\x79\xa9\xe4\xc1\xa1\x5f\xa9\x28' \
    b'\xe1\x98\xc6\x27\x70\x7f\x52\x1e' \
    b'\xfe\x56\xd6\x3c\x42\x0f\x7d\x73' \
    b'\xeb\x25\x3b\xb7\x01\xc9\x09\x6f' \
    b'\x98\x6a\x60\x73\xe9\xe4\x6e\x71' \
    b'\xa2\x66\x27\xd8\xb9\x56\x44\x5f' \
    b'\xd4\x97\x35\x67\x94\x28\xbf\xaa' \
    b'\xcd\x2d\x8a\xf3\x7a\xd0\x15\x80' \
    b'\x73\x12\xce\x0b\x9d\x53\x8f\x66' \
    b'\xcd\x9c\x37\x1b\x41\xf2\x3b\x8b' \
    b'\xa6\x8d\xa4\xb8\x3e\xf7\xc9\xaf' \
    b'\xca\x5a\xf2\xd5\x35\x6c\x2d\x65'

cipher_text  = \
    b'\x83\x12\x59\xe9\x73\x7d\x11\x6e' \
    b'\xad\xbe\x6e\xcc\xdc\x53\x9a\x0f' \
    b'\x5a\xfd\x5b\x47\xb3\xda\x1b\xab' \
    b'\xb9\xf2\x52\xd0\x3a\xe9\x6b\xa8' \
    b'\xf6\x72\x0b\xaa\x71\xa3\xc9\x4d' \
    b'\x83\x74\x4a\x7c\x9c\x6e\xe4\x1e' \
    b'\x39\xfc\x6c\x7f\x36\x80\xd6\x34' \
    b'\xc0\x8d\x4d\xaa\x46\x64\xd8\x5f' \
    b'\xf5\xe4\x98\xc8\xc3\xdf\x88\x55' \
    b'\x86\xc6\x3f\xa8\x73\x61\x54\x18' \
    b'\x09\xda\x49\x82\x90\x96\x59\xa6' \
    b'\x3f\xb0\xbb\x12\x8f\x17\x74\xd7' \
    b'\xcc\x39\xd5\x16\xfb\x2a\x1d\xa9' \
    b'\x2b\x61\xa3\x5a\x11\x64\xcb\xa1' \
    b'\x09\x65\xa3\xd3\x99\xa5\x4f\x79' \
    b'\x76\x85\x6e\x2f\x73\xa3\xd8\xc9' \
    b'\xc4\x57\x68\x42\x3e\xcc\xd1\x6b' \
    b'\x54\xec\x7f\xca\xfe\xf3\xd5\xe7' \
    b'\x8d\x49\xf3\x43\xb6\xe5\xe0\x87' \
    b'\x80\x06\x3a\x96\x16\x8c\x2e\x85' \
    b'\x0d\x91\x39\xb5\x70\x83\x12\xe6' \
    b'\x14\x8f\x3a\xec\xee\x51\x91\xd3' \
    b'\x14\xa8\x90\x30\x90\x4a\xda\x07' \
    b'\x7e\xa2\x60\x7f\x34\xb4\xfb\x18' \
    b'\xea\xeb\xb2\xe5\xfa\x35\x19\xdf' \
    b'\x14\xba\x9f\xca\xa8\xab\x10\xd4' \
    b'\x94\x0f\x3a\x74\xc4\x45\x61\xa7' \
    b'\xa9\x17\xff\xdb\xc9\x80\xb7\xd7' \
    b'\x0f\xfa\x60\x1b\xd3\xad\x56\x3e' \
    b'\x6a\xbf\x5d\x92\x63\x2c\x50\x02' \
    b'\xbf\xc2\xeb\x9c\xa6\x87\x4c\xb2' \
    b'\xef\x6f\x21\x73\xb8\x1c\x91\xbd'

rsa_sig = \
    b'\x27\x55\xc9\x1d\x87\x7f\x8e\x62' \
    b'\xc9\x11\x4c\x47\xcc\xec\x01\x19' \
    b'\x30\x7e\xc1\xf8\xb9\xf1\xab\x97' \
    b'\x4e\x58\x16\xa7\x35\x02\xf0\x01' \
    b'\x07\x03\x22\x61\xd5\x58\xf7\xb6' \
    b'\x6f\x3f\x53\x74\xf6\x50\xad\x48' \
    b'\xe6\x2a\x9f\x73\x82\x8a\x3a\xb1' \
    b'\xaf\xd7\xe2\xb5\x15\x75\x42\x92' \
    b'\xe9\x4f\x30\xa8\xff\x83\x93\xf3' \
    b'\xc5\x91\x6f\xb8\xa8\x01\x4e\xfc' \
    b'\x1a\x3f\x25\x2a\x89\x83\x48\xcb' \
    b'\x85\xd6\x1a\x33\x0b\x26\x8d\x02' \
    b'\x97\xbd\x17\x98\xaf\x36\xe5\x62' \
    b'\xc3\xab\xd6\xee\xcb\x06\x3c\x56' \
    b'\x58\x5f\x54\x47\xbb\x09\x3c\xa0' \
    b'\x96\xba\x38\x4e\xd0\x56\xfe\xd5' \
    b'\x17\x8f\x81\x6d\x70\xc4\xe7\x69' \
    b'\xda\xd6\x2d\xcb\xad\x52\x04\x8d' \
    b'\x25\x6a\xf4\x3e\x18\xec\x8d\x04' \
    b'\xb5\xfc\x96\x5f\xe3\x9a\x52\xa4' \
    b'\x50\xeb\xe4\x5b\xb6\xc9\x54\xdc' \
    b'\xca\x3c\xc6\x56\x9e\x2a\x45\x3b' \
    b'\xc2\x70\x74\x8e\xd7\xed\x8d\xe4' \
    b'\xf9\xa3\xd0\x35\x51\x9e\x94\xed' \
    b'\xed\xa6\x00\xf9\xcf\xab\xc9\x23' \
    b'\x97\xd8\x26\xb5\x2f\x05\xfa\x0f' \
    b'\x8f\x02\xa2\x04\xa7\x49\x64\x0c' \
    b'\x7b\xb4\x4d\x3c\x19\x72\xaa\x5b' \
    b'\xb0\x48\x2d\xa4\x5c\x71\x51\x28' \
    b'\x49\xf7\x32\xd2\x6e\x37\x49\x93' \
    b'\x25\x49\xe2\x6d\x09\x75\xae\xdb' \
    b'\x12\x52\xfe\x39\xe3\xd6\x59\xd2'

# RSA 2K Encrypt
def rsa2k_encrypt(mod_n, e, plain_text):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_RSA_ENCRYPT
    req_spec.rsa_encrypt.KeySize = 256
    req_spec.rsa_encrypt.mod_n = mod_n
    req_spec.rsa_encrypt.e = e
    req_spec.rsa_encrypt.plain_text = plain_text
    req_spec.rsa_encrypt.async_en = False
    
    print("Invoking CryptoAPI: RSA 2K Encrypt");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.rsa_encrypt.cipher_text
    else:
        print ("API Failed")
        return resp_spec.api_status, 0


def rsa2k_encrypt_test():
    global mod_n
    global e
    global plain_text
    global cipher_text


    ret, computed_cipher_text = rsa2k_encrypt(mod_n, e, plain_text)
    if (ret != types_pb2.API_STATUS_OK):
        print("API rsa2k_encrypt failed with error")
        return False
    else:
        print("API rsa2k_encrypt succeeded")
        if (computed_cipher_text != cipher_text):
            return False
        else:
            print("Cipher text as expected: %s" % \
                    binascii.hexlify(computed_cipher_text))
            return True

# RSA 2K Decrypt
def rsa2k_decrypt(mod_n, d, cipher_text):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_RSA_DECRYPT
    req_spec.rsa_decrypt.KeySize = 256
    req_spec.rsa_decrypt.mod_n = mod_n
    req_spec.rsa_decrypt.d = d
    req_spec.rsa_decrypt.cipher_text = cipher_text

    print("Invoking CryptoAPI: RSA 2K Decrypt");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.rsa_decrypt.plain_text
    else:
        print ("API Failed")
        return resp_spec.api_status, 0


def rsa2k_decrypt_test():
    global mod_n
    global rsa_d
    global plain_text
    global cipher_text


    ret, computed_plain_text = rsa2k_decrypt(mod_n, rsa_d, cipher_text)
    if (ret != types_pb2.API_STATUS_OK):
        print("API rsa2k_decrypt failed with error")
        return False
    else:
        print("API rsa2k_decrypt succeeded")
        if (computed_plain_text != plain_text):
            return False
        else:
            print("Plain text as expected: %s" % \
                    binascii.hexlify(computed_plain_text))
            return True

# RSA 2K CRT Decrypt
def rsa2k_crt_decrypt(key_idx, rsa_p, rsa_q, rsa_dp, rsa_dq, rsa_qinv, cipher_text):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_RSA_CRT_DECRYPT
    req_spec.rsa_crt_decrypt.KeySize = 256
    req_spec.rsa_crt_decrypt.key_idx = key_idx
    req_spec.rsa_crt_decrypt.p = rsa_p
    req_spec.rsa_crt_decrypt.q = rsa_q
    req_spec.rsa_crt_decrypt.dp = rsa_dp
    req_spec.rsa_crt_decrypt.dq = rsa_dq
    req_spec.rsa_crt_decrypt.qinv  = rsa_qinv
    req_spec.rsa_crt_decrypt.cipher_text = cipher_text

    print("Invoking CryptoAPI: RSA 2K CRT Decrypt");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.rsa_crt_decrypt.plain_text
    else:
        print ("API Failed")
        return resp_spec.api_status, 0


def rsa2k_crt_decrypt_test():
    global rsa_p
    global rsa_q
    global rsa_dp
    global rsa_dq
    global rsa_qinv
    global plain_text
    global cipher_text


    ret, computed_plain_text = rsa2k_crt_decrypt(-1, rsa_p, rsa_q, rsa_dp,\
            rsa_dq, rsa_qinv, cipher_text)
    if (ret != types_pb2.API_STATUS_OK):
        print("API rsa2k_crt_decrypt failed with error")
        return False
    else:
        print("API rsa2k_crt_decrypt succeeded")
        if (computed_plain_text != plain_text):
            return False
        else:
            print("Plain text as expected: %s" % \
                    binascii.hexlify(computed_plain_text))
            return True

# RSA 2K Signature Generation
def rsa2k_sig_gen(key_idx, mod_n, d, h):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_RSA_SIG_GEN
    req_spec.rsa_sig_gen.key_idx = key_idx
    req_spec.rsa_sig_gen.KeySize = 256
    req_spec.rsa_sig_gen.mod_n = mod_n
    req_spec.rsa_sig_gen.d = d
    req_spec.rsa_sig_gen.h = h

    print("Invoking CryptoAPI: RSA 2K Signature Gen");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status, resp_spec.rsa_sig_gen.s
    else:
        print ("API Failed")
        return resp_spec.api_status, 0


def rsa2k_sig_gen_test():
    global mod_n
    global rsa_d
    global plain_text

    ret, computed_sig = rsa2k_sig_gen(-1, mod_n, rsa_d, plain_text)
    if (ret != types_pb2.API_STATUS_OK):
        print("API rsa2k_sig_gen failed with error")
        return False
    else:
        print("API rsa2k_sig_gen succeeded")
        if (computed_sig != rsa_sig):
            return False
        else:
            print("Sig as expected: %s" % \
                    binascii.hexlify(computed_sig))
            return True

# RSA 2K Signature Verification
def rsa2k_sig_verify(mod_n, e, h, s):
    stub = crypto_apis_pb2.CryptoApisStub(halapi.HalChannel)
    req_msg = crypto_apis_pb2.CryptoApiRequestMsg()
    req_spec = req_msg.request.add()

    req_spec.api_type = crypto_apis_pb2.ASYMAPI_RSA_SIG_VERIFY
    req_spec.rsa_sig_verify.KeySize = 256
    req_spec.rsa_sig_verify.mod_n = mod_n
    req_spec.rsa_sig_verify.e = e
    req_spec.rsa_sig_verify.h = h
    req_spec.rsa_sig_verify.s = s

    print("Invoking CryptoAPI: RSA 2K Signature Verify");
    resp_msg = stub.CryptoApiInvoke(req_msg)

    num_resp_specs = len(resp_msg.response)
    if num_resp_specs != 1:
        assert(0)

    resp_spec = resp_msg.response[0]

    if resp_spec.api_status == types_pb2.API_STATUS_OK:
        return resp_spec.api_status
    else:
        print ("API Failed")
        return resp_spec.api_status


def rsa2k_sig_verify_test():
    global mod_n
    global e
    global plain_text
    global rsa_sig

    ret = rsa2k_sig_verify(mod_n, e, plain_text, rsa_sig)
    if (ret != types_pb2.API_STATUS_OK):
        print("API rsa2k_sig_verify failed with error")
        return False
    else:
        print("API rsa2k_sig_verify succeeded")
        return True
