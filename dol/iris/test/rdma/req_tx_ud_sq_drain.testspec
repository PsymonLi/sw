# Test Spec
selectors:
#    src:
#        tenant      : filter://overlay=VLAN,type=TENANT
#        segment     : filter://any
#        endpoint    : filter://remote=False
#        interface   : filter://any
#    dst:
#        tenant      : filter://overlay=VLAN,type=TENANT
#        segment     : filter://any
#        endpoint    : filter://remote=True
#        interface   : filter://any
#    flow            : filter://fwtype=L2,type=IPV4,dport=4791,proto=UDP,label=RDMA
    rdmasession     :
        lqp         : filter://svc=3
        rqp         : filter://svc=3
#    maxflows    : 1
#    maxrdmasessions     : 1

packets:
    - packet:
        id          : SEND_ONLY1_PAYLOAD # Base packet
        payloadsize : 428
        template    : ref://factory/packets/id=PAYLOAD
        headers     :
            payload:
                data    : pattern-random://0/255/1

    - packet:
        id          : SEND_ONLY2_PAYLOAD # Base packet
        payloadsize : 532
        template    : ref://factory/packets/id=PAYLOAD
        headers     :
            payload:
                data    : pattern-random://0/255/1


    - packet:
        id          : SEND_ONLY1 # Base packet
        payloadsize : ref://testcase/packets/id=SEND_ONLY1_PAYLOAD/payloadsize
        template    : callback://rdma/rdma/PickPktTemplate/v4=ETH_IPV4_UDP_BTH_DETH,v6=ETH_IPV6_UDP_BTH_DETH
        icrc        : True
        encaps      :
            - ref://factory/packets/id=ENCAP_QTAG
        headers     :
            # Add all possible headers, the final headers will be selected
            # based on the Flow.
            eth:
                src     : ref://testcase/config/rdmasession/session/initiator/ep/macaddr
                dst     : ref://testcase/config/rdmasession/session/responder/ep/macaddr
            qtag:
                vlan    : ref://testcase/config/rdmasession/session/initiator/ep/segment/vlan_id
            ipv4:
                src     : ref://testcase/config/rdmasession/session/initiator/addr
                dst     : ref://testcase/config/rdmasession/session/responder/addr
                ttl     : 64
            ipv6:
                src     : ref://testcase/config/rdmasession/session/initiator/addr
                dst     : ref://testcase/config/rdmasession/session/responder/addr
                hlim    : 64
            udp:
                sport   : ref://testcase/config/rdmasession/session/iflow/sport
                dport   : ref://testcase/config/rdmasession/session/iflow/dport
            bth:
                opcode  : 100 # RDMA SEND Only
                destqp  : ref://testcase/config/rdmasession/rqp/id
                psn     : callback://rdma/rdma/GetPktTxPsn/pkt_num=0
            deth:
                qkey    : ref://testcase/pvtdata/q_key
                srcqp   : ref://testcase/config/rdmasession/lqp/id
            payload:
                data    : ref://testcase/packets/id=SEND_ONLY1_PAYLOAD/rawbytes

    - packet:
        id          : SEND_ONLY2 # Base packet
        payloadsize : ref://testcase/packets/id=SEND_ONLY2_PAYLOAD/payloadsize
        template    : callback://rdma/rdma/PickPktTemplate/v4=ETH_IPV4_UDP_BTH_DETH,v6=ETH_IPV6_UDP_BTH_DETH
        icrc        : True
        encaps      :
            - ref://factory/packets/id=ENCAP_QTAG
        headers     :
            # Add all possible headers, the final headers will be selected
            # based on the Flow.
            eth:
                src     : ref://testcase/config/rdmasession/session/initiator/ep/macaddr
                dst     : ref://testcase/config/rdmasession/session/responder/ep/macaddr
            qtag:
                vlan    : ref://testcase/config/rdmasession/session/initiator/ep/segment/vlan_id
            ipv4:
                src     : ref://testcase/config/rdmasession/session/initiator/addr
                dst     : ref://testcase/config/rdmasession/session/responder/addr
                ttl     : 64
            ipv6:
                src     : ref://testcase/config/rdmasession/session/initiator/addr
                dst     : ref://testcase/config/rdmasession/session/responder/addr
                hlim    : 64
            udp:
                sport   : ref://testcase/config/rdmasession/session/iflow/sport
                dport   : ref://testcase/config/rdmasession/session/iflow/dport
            bth:
                opcode  : 100 # RDMA SEND Only
                destqp  : ref://testcase/config/rdmasession/rqp/id
                psn     : callback://rdma/rdma/GetPktTxPsn/pkt_num=1
            deth:
                qkey    : ref://testcase/pvtdata/q_key
                srcqp   : ref://testcase/config/rdmasession/lqp/id
            payload:
                data    : ref://testcase/packets/id=SEND_ONLY2_PAYLOAD/rawbytes

buffers:
    - buffer:
        id      : SEND_BUF1
        template: ref://factory/templates/id=RDMA_BUFFER
        fields:
           slab    : callback://rdma/rdma/GetNewSlab
           offset  : 0
           segments:
               - size    : ref://testcase/packets/id=SEND_ONLY1_PAYLOAD/size
                 data    : ref://testcase/packets/id=SEND_ONLY1_PAYLOAD/rawbytes

    - buffer:
        id      : SEND_BUF2
        template: ref://factory/templates/id=RDMA_BUFFER
        fields:
           slab    : callback://rdma/rdma/GetNewSlab
           offset  : 0
           segments:
               - size    : ref://testcase/packets/id=SEND_ONLY2_PAYLOAD/size
                 data    : ref://testcase/packets/id=SEND_ONLY2_PAYLOAD/rawbytes

descriptors:
    - descriptor:
        id      : SEND_DESC1
        template: ref://factory/templates/id=DESC_RDMA_SQ
        fields:
            op_type : 0  # OP_TYPE_SEND
            wrid    : 6
            num_sges: 1

            ud_send    :
                len       : ref://testcase/buffers/id=SEND_BUF1/size
                q_key     : ref://testcase/pvtdata/q_key
                dst_qp    : ref://testcase/pvtdata/dst_qp
                ah_handle : ref://testcase/pvtdata/ah_handle


            sges:
                - va  : ref://testcase/buffers/id=SEND_BUF1/address
                  len : ref://testcase/buffers/id=SEND_BUF1/size
                  l_key: callback://rdma/rdma/GetMrSlabLkey/id=SEND_BUF1

    - descriptor:
        id      : SEND_DESC2
        template: ref://factory/templates/id=DESC_RDMA_SQ
        fields:
            op_type : 0  # OP_TYPE_SEND
            wrid    : 7
            num_sges: 1

            ud_send    :
                len       : ref://testcase/buffers/id=SEND_BUF2/size
                q_key     : ref://testcase/pvtdata/q_key
                dst_qp    : ref://testcase/pvtdata/dst_qp
                ah_handle : ref://testcase/pvtdata/ah_handle

            sges:
                - va  : ref://testcase/buffers/id=SEND_BUF2/address
                  len : ref://testcase/buffers/id=SEND_BUF2/size
                  l_key: callback://rdma/rdma/GetMrSlabLkey/id=SEND_BUF2

    - descriptor:
        id      : EXP_CQ_DESC1
        template: ref://factory/templates/id=DESC_RDMA_CQ_SEND
        fields:
            wrid:  ref://testcase/descriptors/id=SEND_DESC1/wrid
            qid: ref://testcase/config/rdmasession/lqp/id
            #op_type: 0  # OP_TYPE_SEND
            status : 0  # CQ_STATUS_SUCCESS
            color  : callback://rdma/rdma/GetReqRxCQExpColor/cq_wqe_num=0
            error  : 0
            type   : 3 #CQE_TYPE_SEND_NPG

    - descriptor:
        id      : EXP_CQ_DESC2
        template: ref://factory/templates/id=DESC_RDMA_CQ_SEND
        fields:
            wrid:  ref://testcase/descriptors/id=SEND_DESC2/wrid
            qid: ref://testcase/config/rdmasession/lqp/id
            #op_type: 0  # OP_TYPE_SEND
            status : 0  # CQ_STATUS_SUCCESS
            color  : callback://rdma/rdma/GetReqRxCQExpColor/cq_wqe_num=1
            error  : 0
            type   : 3 #CQE_TYPE_SEND_NPG

    - descriptor:
        id      : EXP_EQ_DESC
        template: ref://factory/templates/id=DESC_RDMA_EQ
        fields:
            qid    : ref://testcase/config/rdmasession/lqp/id
            type   : callback://rdma/rdma/GetEQEtypeQP
            code   : callback://rdma/rdma/GetEQEcodeSQDrain
            color  : callback://rdma/rdma/GetAsyncEQExpColor

session:
    - step:
        trigger:
            descriptors:
                - descriptor:
                    object  : ref://testcase/descriptors/id=SEND_DESC1
                    ring    : ref://testcase/config/rdmasession/lqp/sq/rings/id=SQ

            doorbell:
                object: ref://testcase/config/rdmasession/lqp/sq/rings/id=SQ/doorbell
                fields:
                    upd : 0x9 # PI from DB data and DB_SCHED_EVAL

        expect:
            packets:
                - packet:
                    object  : ref://testcase/packets/id=SEND_ONLY1
                    port    : ref://testcase/config/rdmasession/session/responder/ep/intf/ports

            descriptors:
                - descriptor:
                    object  : ref://testcase/descriptors/id=EXP_CQ_DESC1
                    ring    : ref://testcase/config/rdmasession/lqp/sq_cq/rings/id=CQ

    - step:
        trigger:
            #trigger is also in .py file to change SQCB state to QP_STATE_SQD
            descriptors:
                - descriptor:
                    object  : ref://testcase/descriptors/id=SEND_DESC2
                    ring    : ref://testcase/config/rdmasession/lqp/sq/rings/id=SQ

            doorbell:
                object: ref://testcase/config/rdmasession/lqp/sq/rings/id=SQ/doorbell
                fields:
                    upd : 0x9 # PI from DB data and DB_SCHED_EVAL

        expect:
            descriptors:
               - descriptor:
                    object  : ref://testcase/descriptors/id=EXP_EQ_DESC
                    ring    : ref://testcase/config/rdmasession/lqp/pd/ep/intf/lif/async_eq/rings/id=EQ
            #SEND_DESC2 is not processed as SQ is in drain QP_STATE_SQD state

    - step:
        trigger:
            #trigger is in .py file to change SQ state back to QP_STATE_RTS
            #
            # Upon processing modify QP to change state to QP_STATE_RTS, schedule
            # SQ so that if there are wqes posted after state change to SQD, they'll
            # get processed
            doorbell:
                object: ref://testcase/config/rdmasession/lqp/sq/rings/id=SQ/doorbell
                fields:
                    upd : 0x9 # PI from DB data and DB_SCHED_EVAL

        expect:
            packets:
                - packet:
                    object  : ref://testcase/packets/id=SEND_ONLY2
                    port    : ref://testcase/config/rdmasession/session/responder/ep/intf/ports

            descriptors:
                - descriptor:
                    object  : ref://testcase/descriptors/id=EXP_CQ_DESC2
                    ring    : ref://testcase/config/rdmasession/lqp/sq_cq/rings/id=CQ

    #set CI for CQ ring to that of proxy CI in DB data
    - step:

        trigger:
            doorbell:
                object: ref://testcase/config/rdmasession/lqp/sq_cq/rings/id=CQ/doorbell
                fields:
                    upd : 0x4 #Set CI

        expect:
