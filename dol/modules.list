# This file contains the list of DOL test modules.
modules:
    - module:
        name    : IN_ORDER_PKT_NOT_TO_SERQ_V4
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : IN_ORDER_FLOWS_NOT_TO_SERQ_V4
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 2
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : IN_ORDER_PKT_NOT_TO_SERQ_V6
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV6

    - module:
        name    : IN_ORDER_FLOWS_NOT_TO_SERQ_V6
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 2
        iterate :
            - flow: filter://type=IPV6

    - module:
        name    : IN_ORDER_PKT_NOT_TO_SERQ_VXLAN
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt_vxlan.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : IN_ORDER_FLOWS_NOT_TO_SERQ_VXLAN
        enable  : True
        package : test.tcp_tls_proxy
        module  : in_order
        spec    : one_pkt_vxlan.testspec
        ignore  : False
        args    :
            maxflows: 2
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_SERQ_V4
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_serq
        spec    : one_pkt.testspec 
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : FLOWS_TO_SERQ_V4
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_serq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 2
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_SERQ_V6
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_serq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV6

    - module:
        name    : MULTIPLE_PKTS_TO_SERQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : multiple_pkts_to_serq
        spec    : multiple_pkts_to_serq.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_SERQ_ATOMIC_STATS
        enable  : False
        package : test.tcp_tls_proxy
        module  : pkt_to_serq_atomic_stats
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_BRQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_brq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : FLOWS_TO_BRQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_brq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 2
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_BSQ
        enable  : False
        package : test.tcp_tls_proxy
        module  : pkt_to_bsq
        spec    : one_pkt.testspec
        ignore  : True
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_BSQ_DECRYPT
        enable  : False
        package : test.tcp_tls_proxy
        module  : pkt_to_bsq_decrypt
        spec    : one_pkt.testspec
        ignore  : True
        args    :
            flow: filter://type=IPV4,proto=TCP

    - module:
        name    : PROXY_UPLINK_TO_UPLINK_BYPASS_BARCO
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_tcp_tx_to_p4_bypass_barco
        spec    : uplink_to_uplink.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PROXY_UPLINK_TO_HOST_BYPASS_BARCO
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_tcp_tx_to_p4_bypass_barco
        spec    : uplink_to_host.testspec
        ignore  : False
        args    :
            flow: filter://type=IPV4,proto=TCP

    - module:
        name    : PKT_TO_SESQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_sesq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_ARQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_arq
        spec    : pkt_to_arq.testspec
        ignore  : False
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_ARQ_TO_UPLINK
        enable  : True
        package : test.tcp_tls_proxy
        module  : pkt_to_arq_to_uplink
        spec    : pkt_to_arq_to_uplink.testspec
        ignore  : False
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : SYN_ACK_TO_ARQ
        enable  : True
        package : test.tcp_tls_proxy
        module  : syn_ack_to_arq
        spec    : one_pkt.testspec
        ignore  : False
        args    :
            maxflows: 1
        iterate :
            - flow: filter://type=IPV4

    - module:
        name    : PKT_TO_IPSECCBQ
        enable  : False
        package : test.ipsec-proxy
        module  : pkt_to_ipseccbq
        spec    : pkt_to_ipseccbq.testspec
        ignore  : True
        iterate :
            - flow: filter://type=IPV4,proto=TCP

    - module:
        name    : RDMA_TX_SEND_ONLY
        enable  : True
        package : test.rdma
        module  : req_tx_send_only
        spec    : req_tx_send_only.testspec
        ignore  : False

    - module:
        name    : RDMA_TX_SEND_ONLY_2SGES
        enable  : True
        package : test.rdma
        module  : req_tx_send_only_2sges
        spec    : req_tx_send_only_2sges.testspec
        ignore  : False

    - module:
        name    : RDMA_TX_SEND_FIRST_LAST
        enable  : True
        package : test.rdma
        module  : req_tx_send_first_last
        spec    : req_tx_send_first_last.testspec
        ignore  : False

    - module:
        name    : RDMA_TX_SEND_FIRST_LAST_2SGES
        enable  : True
        package : test.rdma
        module  : req_tx_send_first_last_2sges
        spec    : req_tx_send_first_last_2sges.testspec
        ignore  : False

    - module:
        name    : RDMA_TX_WRITE_ONLY
        enable  : True
        package : test.rdma
        module  : req_tx_write_only
        spec    : req_tx_write_only.testspec
        ignore  : False

    - module:
        name    : RDMA_TX_WRITE_ONLY_IMM
        enable  : True
        package : test.rdma
        module  : req_tx_write_only_imm
        spec    : req_tx_write_only_imm.testspec
        ignore  : False

    - module:
        name    : RDMA_RX_SEND_ONLY
        enable  : True
        package : test.rdma
        module  : resp_rx_send_only
        spec    : resp_rx_send_only.testspec
        ignore  : False

    - module:
        name    : RDMA_RX_SEND_ONLY_2SGES
        enable  : True
        package : test.rdma
        module  : resp_rx_send_only_2sges
        spec    : resp_rx_send_only_2sges.testspec
        ignore  : False

    - module:
        name    : RDMA_RX_SEND_FIRST_LAST
        enable  : True
        package : test.rdma
        module  : resp_rx_send_first_last
        spec    : resp_rx_send_first_last.testspec
        ignore  : False

    #- module:
    #    name    : RDMA_RX_SEND_FIRST_LAST_PMTU_ERR
    #    enable  : True
    #    package : test.rdma
    #    module  : resp_rx_send_first_last_pmtu_err
    #    spec    : resp_rx_send_first_last_pmtu_err.testspec
    #    ignore  : False

    - module:
        name    : ACL_NONIP_SUP_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_nonip_sup_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_SMAC_ACTION_SUP_REDIRECT
            - id        : ACL_SMAC_ETYPE_ACTION_SUP_REDIRECT
            - id        : ACL_DMAC_ACTION_SUP_REDIRECT
            - id        : ACL_ETYPE_ACTION_SUP_REDIRECT

    - module:
        name    : ACL_NONIP_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_nonip_drop.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_SMAC_DMAC_ETYPE_ACTION_DROP
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_SEGMENT_ACTION_DROP
              srcseg    : filter://native=False
            - id        : ACL_SEGMENT_ACTION_DROP
              srcseg    : filter://native=True
            - id        : ACL_DIF_ACTION_DROP
            - id        : ACL_SIF_ACTION_DROP

    - module:
        name    : ACL_NONIP_VXLAN_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_nonip_vxlan_drop.testspec
        args    : 
            maxflows: 1
        iterate:
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_VNID_ACTION_DROP
            - id        : ACL_DIF_ACTION_DROP
            - id        : ACL_SIF_ACTION_DROP

    - module:
        name    : ACL_NONIP_FLOW_MISS_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_nonip_flow_miss_drop.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_SMAC_DMAC_ETYPE_FLOW_MISS_ACTION_DROP

    - module:
        name    : ACL_IP_SUP_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_sup_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_IPV4_DIP_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV4
            - id        : ACL_TCP_DPORT_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV4,proto=TCP
            - id        : ACL_UDP_DPORT_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV4,proto=UDP
            - id        : ACL_IPV6_DIP_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV6
            - id        : ACL_TCP_DPORT_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV6,proto=TCP
            - id        : ACL_UDP_DPORT_ACTION_SUP_REDIRECT
              flow      : filter://type=IPV6,proto=UDP

    - module:
        name    : ACL_IP_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_DIF_ACTION_REDIRECT
              flow      : filter://type=IPV4
            - id        : ACL_DIF_ACTION_REDIRECT
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_TUNNEL_UPLINK_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_tunnel_uplink_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_DIF_ACTION_REDIRECT
              flow      : filter://type=IPV4
            - id        : ACL_DIF_ACTION_REDIRECT
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_UPLINK_TUNNEL_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_uplink_tunnel_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_DIF_ACTION_TUNNEL_REDIRECT
              flow      : filter://type=IPV4
            - id        : ACL_DIF_ACTION_TUNNEL_REDIRECT
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_TUNNEL_REDIRECT
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_tunnel_redirect.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_DIF_ACTION_TUNNEL_REDIRECT
              flow      : filter://type=IPV4
            - id        : ACL_DIF_ACTION_TUNNEL_REDIRECT
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_drop.testspec
        args    :
            maxflows: 1
        iterate:
            # IPV4 specific cases
            - id        : ACL_IPV4_SIP_DIP_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_IPV4_DIP_TCP_DPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=TCP
            - id        : ACL_IPV4_DIP_UDP_DPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=UDP
            - id        : ACL_IPV4_DIP_PREFIX_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_IPV4_PROTO_ACTION_DROP
              flow      : filter://type=IPV4
#            - id       : ACL_IPV4_OPTIONS_ACTION_DROP
#              flow     : filter://type=IPV4
#           # IPV6 specific cases
            - id        : ACL_IPV6_SIP_DIP_ACTION_DROP
              flow      : filter://type=IPV6
            - id        : ACL_IPV6_DIP_TCP_DPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=TCP
            - id        : ACL_IPV6_DIP_UDP_DPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=UDP
            - id        : ACL_IPV6_DIP_PREFIX_ACTION_DROP
              flow      : filter://type=IPV6
            - id        : ACL_IPV6_PROTO_ACTION_DROP
              flow      : filter://type=IPV6
#            - id       : ACL_IPV6_OPTIONS_ACTION_DROP
#              flow     : filter://type=IPV6
#           # IPV4/V6 L4 based cases
            - id        : ACL_TCP_SPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=TCP
            - id        : ACL_TCP_DPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=TCP
#            - id       : ACL_TCP_OPTIONS_ACTION_DROP
#              flow     : filter://type=IPV4,proto=TCP
            - id        : ACL_TCP_FLAGS_ACTION_DROP
              flow      : filter://type=IPV4,proto=TCP
            - id        : ACL_UDP_SPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=UDP
            - id        : ACL_UDP_DPORT_ACTION_DROP
              flow      : filter://type=IPV4,proto=UDP
            - id        : ACL_TCP_SPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=TCP
            - id        : ACL_TCP_DPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=TCP
#            - id       : ACL_TCP_OPTIONS_ACTION_DROP
#              flow     : filter://type=IPV6,proto=TCP
            - id        : ACL_TCP_FLAGS_ACTION_DROP
              flow      : filter://type=IPV6,proto=TCP
            - id        : ACL_UDP_SPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=UDP
            - id        : ACL_UDP_DPORT_ACTION_DROP
              flow      : filter://type=IPV6,proto=UDP
            - id        : ACL_ICMP_ACTION_DROP
              flow      : filter://type=IPV4,proto=ICMP
            - id        : ACL_ICMPV6_ACTION_DROP
              flow      : filter://type=IPV6,proto=ICMPV6
#           # IPV4 segment,tenant etc cases
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_SEGMENT_ACTION_DROP
              flow      : filter://type=IPV4
              srcseg    : filter://native=False
            - id        : ACL_SEGMENT_ACTION_DROP
              flow      : filter://type=IPV4
              srcseg    : filter://native=True
            - id        : ACL_DIF_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_SIF_ACTION_DROP
              flow      : filter://type=IPV4
#           # IPV6 segment,tenant etc cases
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_SEGMENT_ACTION_DROP
              flow      : filter://type=IPV6
              srcseg    : filter://native=False
            - id        : ACL_SEGMENT_ACTION_DROP
              flow      : filter://type=IPV6
              srcseg    : filter://native=True
            - id        : ACL_DIF_ACTION_DROP
              flow      : filter://type=IPV6
            - id        : ACL_SIF_ACTION_DROP
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_VXLAN_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_vxlan_drop.testspec
        args    : 
            maxflows: 1
        iterate:
#           # IPV4 segment,tenant etc cases
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_VNID_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_DIF_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_SIF_ACTION_DROP
              flow      : filter://type=IPV4
#           # IPV6 segment,tenant etc cases
            - id        : ACL_TENANT_ACTION_DROP
            - id        : ACL_VNID_ACTION_DROP
              flow      : filter://type=IPV6
            - id        : ACL_DIF_ACTION_DROP
              flow      : filter://type=IPV6
            - id        : ACL_SIF_ACTION_DROP
              flow      : filter://type=IPV6

    - module:
        name    : ACL_IP_FLOW_MISS_DROP
        enable  : True
        package : test.acl
        module  : acl
        spec    : acl_ip_flow_miss_drop.testspec
        args    :
            maxflows: 1
        iterate:
            - id        : ACL_IPV4_SIP_DIP_FLOW_MISS_ACTION_DROP
              flow      : filter://type=IPV4
            - id        : ACL_IPV6_SIP_DIP_FLOW_MISS_ACTION_DROP
              flow      : filter://type=IPV6

    - module:
        name    : SFW_IN_SEQUENCE
        enable  : True
        package : test.firewall
        module  : sfw_in_sequence
        spec    : sfw_in_sequence.testspec
        ignore  : false

    - module:
        name    : TELEMETRY_FP
        enable  : True
        package : test.telemetry
        module  : telemetry
        spec    : firstpacket.testspec
        ignore  : false
        iterate:
            - SPAN_LOCAL_INGRESS_UPLINK
            - SPAN_LOCAL_IGRESS_PC
            - SPAN_LOCAL_INGRESS_MULTIPLE_UPLINK
            - SPAN_LOCAL_INGRESS_MULTIPLE_UPLINK_PC
            - RSPAN_LOCAL_INGRESS_UPLINK
            - RSPAN_LOCAL_IGRESS_PC
            - RSPAN_LOCAL_INGRESS_MULTIPLE_UPLINK
            - RSPAN_LOCAL_INGRESS_MULTIPLE_UPLINK_PC
            - SPAN_RSPAN_LOCAL_INGRESS_UPLINK
            - SPAN_RSPAN_LOCAL_IGRESS_PC
            - RSPAN_SPAN_LOCAL_IGRESS_PC

    - module:
        name    : L4LB_BRIDGED_FLOWS
        enable  : True
        package : test.l4lb
        module  : l4lb
        spec    : l4lb_l2.testspec
        ignore  : False

    - module:
        name    : L4LB_ROUTED_FLOWS
        enable  : True
        package : test.l4lb
        module  : l4lb
        spec    : l4lb_l3.testspec
        ignore  : False

    - module:
        name    : ETH_TX # L2UC_IP cases
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx.testspec
        ignore  : False
        args    :
            maxflows : 4
        iterate:
            # Untagged Flows
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment : filter://native=False
            # Tagged Flows
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment : filter://native=True
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment : filter://native=True
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment : filter://native=True

    - module:
        name    : ETH_TX_L2UC_IP_GFT_DROP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx.testspec
        ignore  : False
        args    :
            maxflows : 1
        iterate:
            # Tagged Flows
            - flow    : filter://type=IPV4,proto=UDP,label=GFT_DROP
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=TCP,label=GFT_DROP
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=TCP,label=GFT_DROP
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=UDP,label=GFT_DROP
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=ICMP,label=GFT_DROP
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=ICMPV6,label=GFT_DROP
              segment : filter://native=False
            # Untagged Flows
            - flow    : filter://type=IPV4,proto=UDP,label=GFT_DROP
              segment : filter://native=True
            - flow    : filter://type=IPV4,proto=TCP,label=GFT_DROP
              segment : filter://native=True
            - flow    : filter://type=IPV4,proto=ICMP,label=GFT_DROP
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=UDP,label=GFT_DROP
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=TCP,label=GFT_DROP
              segment : filter://native=True
            - flow    : filter://type=IPV6,proto=ICMPV6,label=GFT_DROP
              segment : filter://native=False

    - module:
        name    : ETH_TX_L3UC # L3UC_IP cases
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_l3.testspec
        ignore  : False
        args    :
            maxflows : 4
        iterate:
            # Untagged Flows
            - flow  : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg: filter://native=False
            - flow  : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg: filter://native=False
            - flow  : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg: filter://native=False
            # Tagged Flows
            - flow  : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg: filter://native=True
            - flow  : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg: filter://native=True
            - flow  : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg: filter://native=True

    - module:
        name    : ETH_TX_L3UC_GFT_DROP # L3UC_IP cases
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_l3.testspec
        ignore  : False
        args    :
            maxflows : 4
        iterate:
            # Untagged Flows
            - flow  : filter://type=IPV4,proto=UDP,label=GFT_DROP
              srcseg: filter://native=False
            - flow  : filter://type=IPV4,proto=TCP,label=GFT_DROP
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=TCP,label=GFT_DROP
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=UDP,label=GFT_DROP
              srcseg: filter://native=False
            - flow  : filter://type=IPV4,proto=ICMP,label=GFT_DROP
              srcseg: filter://native=False
            - flow  : filter://type=IPV6,proto=ICMPV6,label=GFT_DROP
              srcseg: filter://native=False
            # Tagged Flows
            - flow  : filter://type=IPV4,proto=UDP,label=GFT_DROP
              srcseg: filter://native=True
            - flow  : filter://type=IPV4,proto=TCP,label=GFT_DROP
              srcseg: filter://native=True
            - flow  : filter://type=IPV4,proto=ICMP,label=GFT_DROP
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=UDP,label=GFT_DROP
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=TCP,label=GFT_DROP
              srcseg: filter://native=True
            - flow  : filter://type=IPV6,proto=ICMPV6,label=GFT_DROP
              srcseg: filter://native=True

    - module:
        name    : ETH_TX_L2UC_NONIP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_nonip.testspec
        ignore  : False
        args    :
            maxflows : 4
        iterate:
            # Tagged Flows
            - segment: filter://native=False
              flow   : filter://label=NETWORKING
            # Untagged Flows
            - segment: filter://native=True
              flow   : filter://label=NETWORKING

    - module:
        name    : ETH_TX_L2UC_NONIP_GFT_DROP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_nonip.testspec
        ignore  : False
        args    :
            maxflows : 1
        iterate:
            # Tagged Flows
            - segment: filter://native=False
              flow   : filter://label=GFT_DROP
            # Untagged Flows
            - segment: filter://native=True
              flow   : filter://label=GFT_DROP

    - module:
        name    : ETH_TX_ARP_RARP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_arp.testspec
        ignore  : False
        args    :
            maxflows: 4
        iterate :
            # Priority Tag Cases
            - type      : ARP_REQ_UC
              segment   : filter://native=False
            - type      : ARP_RESP
              segment   : filter://native=False
            - type      : RARP_REQ_UC
              segment   : filter://native=False
            - type      : RARP_RESP
              segment   : filter://native=False
            # Untagged Cases
            - type      : ARP_REQ_UC
              segment   : filter://native=True
            - type      : ARP_RESP
              segment   : filter://native=True
            - type      : RARP_REQ_UC
              segment   : filter://native=True
            - type      : RARP_RESP
              segment   : filter://native=True

    - module:
        name    : ETH_RX
        enable  : True
        package : test.eth
        module  : eth
        spec    : rx.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            # Tagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment   : filter://native=False
            # Untagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment   : filter://native=True
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment   : filter://native=True
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment   : filter://native=True
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment   : filter://native=True
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment   : filter://native=True
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment   : filter://native=True
            # Priority Tagged Cases
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment   : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment   : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment   : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment   : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment   : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment   : filter://native=True
              priotag   : True

    - module:
        name    : ETH_RX_VXLAN
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : rx_vxlan.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            # Tagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment   : filter://native=False

    - module:
        name    : ETH_RX_L3UC
        enable  : True
        package : test.eth
        module  : eth
        spec    : rx_l3.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            # Tagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg    : filter://native=False
            # Untagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg    : filter://native=True
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg    : filter://native=True
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg    : filter://native=True
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg    : filter://native=True
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg    : filter://native=True
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg    : filter://native=True
            # Priority Tagged Cases
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg    : filter://native=True
              priotag   : True

    - module:
        name    : ETH_RX_VXLAN_L3UC
        enable  : False
        package : test.eth
        module  : ethvxlan
        spec    : rx_vxlan_l3.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            # Tagged Flows
            - flow      : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg    : filter://native=False
            - flow      : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg    : filter://native=False

    - module:
        name    : ETH_RX_ARP
        enable  : True
        package : test.eth
        module  : eth
        spec    : rx_arp.testspec
        ignore  : False
        args:
            maxflows: 1
        iterate:
            # Tagged Flows
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : ARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : ARP_RESP
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : RARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : RARP_RESP
            # Untagged Flows
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : ARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=True
              type      : ARP_RESP
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=True
              type      : RARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=True
              type      : RARP_RESP

    - module:
        name    : ETH_RX_VXLAN_ARP
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : rx_vxlan_arp.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            # Tagged Flows
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : ARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : ARP_RESP
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : RARP_REQ_UC
            - flow      : filter://type=MAC,label=ARP
              segment   : filter://native=False
              type      : RARP_RESP

    - module:
        name    : ETH_RX_NON_IP
        enable  : True
        package : test.eth
        module  : eth
        spec    : rx_non_ip.testspec
        ignore  : False
        args:
            maxflows: 1
        iterate:
            - flow      : filter://type=MAC,label=NETWORKING
              segment   : filter://native=False
            - flow      : filter://type=MAC,label=NETWORKING
              segment   : filter://native=True

    - module:
        name    : ETH_RX_VXLAN_NON_IP
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : rx_vxlan_non_ip.testspec
        ignore  : False
        args:
            maxflows: 4
        iterate:
            - flow      : filter://type=MAC,label=NETWORKING
              segment   : filter://native=False

    - module:
        name    : NVME
        enable  : True
        package : test.storage
        module  : nvme
        spec    : nvme.testspec
        ignore  : False
        iterate :
            - TESTCASE1
            - TESTCASE2

    - module:
        name    : VMOTION
        # Disabling till step callback support is available
        enable  : False
        package : test.vmotion
        module  : vmotion 
        spec    : vmotion.testspec
        ignore  : False
        maxflows: 1
        iterate :
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
            - step    : FLOW_NORMAL
              flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
            - step    : FLOW_DROP
              flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
            - step    : FLOW_VM_TUNNEL
              flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING

    - module:
        name    : L3UC_EDGE_VXLAN
        enable  : True
        package : test.networking
        module  : vxlan
        spec    : l3uc_edge_vxlan.testspec
        ignore  : False
        iterate :
            # Encap Cases
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg  : filter://fabencap=VLAN
              dstseg  : filter://fabencap=VXLAN
            # Decap Cases
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              srcseg  : filter://fabencap=VXLAN
              dstseg  : filter://fabencap=VLAN

    - module:
        name    : ETH_TX_VXLAN # L2UC_IP VXLAN cases
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : tx_vxlan.testspec
        ignore  : False
        iterate:
            # Tagged Flows
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING

    - module:
        name    : ETH_TX_VXLAN_ARP_RARP
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : tx_vxlan_arp.testspec
        ignore  : False
        iterate :
            - type      : ARP_REQ_UC
            - type      : ARP_RESP
            - type      : RARP_REQ_UC
            - type      : RARP_RESP

    - module:
        name    : ETH_TX_VXLAN_L2UC_NONIP
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : tx_vxlan_nonip.testspec
        ignore  : False

    - module:
        name    : ETH_TX_VXLAN_L3UC # L3UC_IP cases
        enable  : True
        package : test.eth
        module  : ethvxlan
        spec    : tx_vxlan_l3.testspec
        ignore  : False
        iterate:
            # Tagged Flows
            - flow: filter://type=IPV4,proto=UDP,label=NETWORKING
            - flow: filter://type=IPV4,proto=TCP,label=NETWORKING
            - flow: filter://type=IPV4,proto=ICMP,label=NETWORKING
            - flow: filter://type=IPV6,proto=UDP,label=NETWORKING
            - flow: filter://type=IPV6,proto=TCP,label=NETWORKING
            - flow: filter://type=IPV6,proto=ICMPV6,label=NETWORKING

    - module:
        name    : L2MC
        enable  : True
        package : test.networking
        module  : multicast
        spec    : l2mc.testspec
        ignore  : False
        iterate :
            - flow: filter://type=IPV4,proto=UDP,label=NETWORKING

    - module:
        name    : ETH_TX_RX # Host to Host case
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_rx.testspec
        ignore  : True
        args    :
            maxflows : 4
        iterate:
            - flow    : filter://type=IPV4,proto=UDP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=TCP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV4,proto=ICMP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=TCP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=UDP,label=NETWORKING
              segment : filter://native=False
            - flow    : filter://type=IPV6,proto=ICMPV6,label=NETWORKING
              segment : filter://native=False

    - module:
        name    : ETH_TX_RX_ARP_RARP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_rx_arp.testspec
        ignore  : True
        args    :
            maxflows: 4
        iterate :
            - type      : ARP_REQ_UC
              segment   : filter://native=False
            - type      : ARP_RESP
              segment   : filter://native=False
            - type      : RARP_REQ_UC
              segment   : filter://native=False
            - type      : RARP_RESP
              segment   : filter://native=False

    - module:
        name    : ETH_TX_RX_L2UC_NONIP
        enable  : True
        package : test.eth
        module  : eth
        spec    : tx_rx_nonip.testspec
        ignore  : True
        args    :
            maxflows : 4
        iterate:
            - segment: filter://native=False
              flow   : filter://label=NETWORKING


    - module:
        name    : L2UC_VXLAN_GFT_DROP
        enable  : True
        package : test.networking
        module  : vxlan
        spec    : l2uc_vxlan.testspec
        ignore  : False
        iterate :
            - flow: filter://type=IPV4,proto=UDP,label=GFT_DROP
            - flow: filter://type=IPV4,proto=TCP,label=GFT_DROP
            - flow: filter://type=IPV4,proto=ICMP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=UDP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=TCP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=ICMPV6,label=GFT_DROP

    - module:
        name    : L3UC_VXLAN_GFT_DROP
        enable  : True
        package : test.networking
        module  : vxlan
        spec    : l3uc_vxlan.testspec
        ignore  : False
        iterate :
            - flow: filter://type=IPV4,proto=UDP,label=GFT_DROP
            - flow: filter://type=IPV4,proto=TCP,label=GFT_DROP
            - flow: filter://type=IPV4,proto=ICMP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=UDP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=TCP,label=GFT_DROP
            - flow: filter://type=IPV6,proto=ICMPV6,label=GFT_DROP

    - module:
        name    : L2UC_VXLAN_NONIP_GFT_DROP
        enable  : True
        package : test.networking
        module  : vxlan
        spec    : l2uc_nonip_vxlan.testspec
        ignore  : False
        iterate :
            - flow: filter://fwtype=L2,type=MAC,label=GFT_DROP

