// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package eventtypes is a auto generated package.
Input file: github.com/pensando/sw/events/protos/eventtypes.proto
*/

package eventtypes

import "sort"

// EventTypeAttributes attributes belong to each event type
type EventTypeAttributes struct {
	EType    string
	Category string
	Severity string
	Desc     string
}

// EventDetails contains all the attributes of an events
type EventDetails struct {
	Name     string `json:name`
	Severity string `json:severity`
	Desc     string `json:desc`
}

// map containing the list of all event types and it's associated attributes
var eventTypes map[EventType]*EventTypeAttributes

// map containing the list of all events grouped by category
var eventTypesByCategory map[string][]*EventDetails

func init() {
	eventTypes = map[EventType]*EventTypeAttributes{}

	eventTypes[ELECTION_STARTED] = &EventTypeAttributes{
		EType:    "ELECTION_STARTED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Leader election started in the cluster"}

	eventTypes[ELECTION_CANCELLED] = &EventTypeAttributes{
		EType:    "ELECTION_CANCELLED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Leader election cancelled"}

	eventTypes[ELECTION_NOTIFICATION_FAILED] = &EventTypeAttributes{
		EType:    "ELECTION_NOTIFICATION_FAILED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Failed to send leader election notification"}

	eventTypes[ELECTION_STOPPED] = &EventTypeAttributes{
		EType:    "ELECTION_STOPPED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Leader election stopped"}

	eventTypes[LEADER_ELECTED] = &EventTypeAttributes{
		EType:    "LEADER_ELECTED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Leader elected for the cluster"}

	eventTypes[LEADER_LOST] = &EventTypeAttributes{
		EType:    "LEADER_LOST",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Node lost leadership during the election"}

	eventTypes[LEADER_CHANGED] = &EventTypeAttributes{
		EType:    "LEADER_CHANGED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Leader changed in the election"}

	eventTypes[NODE_JOINED] = &EventTypeAttributes{
		EType:    "NODE_JOINED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Node joined the cluster"}

	eventTypes[NODE_DISJOINED] = &EventTypeAttributes{
		EType:    "NODE_DISJOINED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Node disjoined from the cluster"}

	eventTypes[NODE_HEALTHY] = &EventTypeAttributes{
		EType:    "NODE_HEALTHY",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Node is healthy"}

	eventTypes[NODE_UNREACHABLE] = &EventTypeAttributes{
		EType:    "NODE_UNREACHABLE",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "Node is unreachable"}

	eventTypes[QUORUM_MEMBER_ADD] = &EventTypeAttributes{
		EType:    "QUORUM_MEMBER_ADD",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Added member to quorum"}

	eventTypes[QUORUM_MEMBER_REMOVE] = &EventTypeAttributes{
		EType:    "QUORUM_MEMBER_REMOVE",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Removed member from quorum"}

	eventTypes[QUORUM_MEMBER_HEALTHY] = &EventTypeAttributes{
		EType:    "QUORUM_MEMBER_HEALTHY",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "Quorum member is now healthy"}

	eventTypes[QUORUM_MEMBER_UNHEALTHY] = &EventTypeAttributes{
		EType:    "QUORUM_MEMBER_UNHEALTHY",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "Quorum member is now unhealthy"}

	eventTypes[UNSUPPORTED_QUORUM_SIZE] = &EventTypeAttributes{
		EType:    "UNSUPPORTED_QUORUM_SIZE",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "Quorum size is below supported minimum"}

	eventTypes[QUORUM_UNHEALTHY] = &EventTypeAttributes{
		EType:    "QUORUM_UNHEALTHY",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "Quorum does not have enough healthy members"}

	eventTypes[MODULE_CREATION_FAILED] = &EventTypeAttributes{
		EType:    "MODULE_CREATION_FAILED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Module creation for diagnostics failed"}

	eventTypes[NIC_ADMITTED] = &EventTypeAttributes{
		EType:    "NIC_ADMITTED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "NIC admitted to the cluster"}

	eventTypes[NIC_REJECTED] = &EventTypeAttributes{
		EType:    "NIC_REJECTED",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "A SmartNIC admission request was rejected"}

	eventTypes[NIC_UNREACHABLE] = &EventTypeAttributes{
		EType:    "NIC_UNREACHABLE",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "NIC is unreachable"}

	eventTypes[NIC_HEALTHY] = &EventTypeAttributes{
		EType:    "NIC_HEALTHY",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "NIC health transitioned to 'true'"}

	eventTypes[NIC_UNHEALTHY] = &EventTypeAttributes{
		EType:    "NIC_UNHEALTHY",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "NIC health transitioned to 'false'"}

	eventTypes[HOST_SMART_NIC_SPEC_CONFLICT] = &EventTypeAttributes{
		EType:    "HOST_SMART_NIC_SPEC_CONFLICT",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "The system has detected a conflict between the SmartNIC specifications of different Host objects"}

	eventTypes[AUTO_GENERATED_TLS_CERT] = &EventTypeAttributes{
		EType:    "AUTO_GENERATED_TLS_CERT",
		Severity: "WARN",
		Category: "Cluster",
		Desc:     "Auto generated certificate is being used for API Gateway TLS"}

	eventTypes[LOGIN_FAILED] = &EventTypeAttributes{
		EType:    "LOGIN_FAILED",
		Severity: "INFO",
		Category: "Cluster",
		Desc:     "User login failed"}

	eventTypes[AUDITING_FAILED] = &EventTypeAttributes{
		EType:    "AUDITING_FAILED",
		Severity: "CRITICAL",
		Category: "Cluster",
		Desc:     "Writing of AuditEvent failed"}

	eventTypes[LINK_UP] = &EventTypeAttributes{
		EType:    "LINK_UP",
		Severity: "INFO",
		Category: "Network",
		Desc:     "Port is linked up"}

	eventTypes[LINK_DOWN] = &EventTypeAttributes{
		EType:    "LINK_DOWN",
		Severity: "WARN",
		Category: "Network",
		Desc:     "Port link status is down"}

	eventTypes[SERVICE_STARTED] = &EventTypeAttributes{
		EType:    "SERVICE_STARTED",
		Severity: "DEBUG",
		Category: "System",
		Desc:     "Service started"}

	eventTypes[SERVICE_STOPPED] = &EventTypeAttributes{
		EType:    "SERVICE_STOPPED",
		Severity: "WARN",
		Category: "System",
		Desc:     "Service stopped"}

	eventTypes[NAPLES_SERVICE_STOPPED] = &EventTypeAttributes{
		EType:    "NAPLES_SERVICE_STOPPED",
		Severity: "CRITICAL",
		Category: "System",
		Desc:     "Naples service stopped"}

	eventTypes[SERVICE_PENDING] = &EventTypeAttributes{
		EType:    "SERVICE_PENDING",
		Severity: "DEBUG",
		Category: "System",
		Desc:     "Service pending"}

	eventTypes[SERVICE_RUNNING] = &EventTypeAttributes{
		EType:    "SERVICE_RUNNING",
		Severity: "DEBUG",
		Category: "System",
		Desc:     "Service running"}

	eventTypes[SERVICE_UNRESPONSIVE] = &EventTypeAttributes{
		EType:    "SERVICE_UNRESPONSIVE",
		Severity: "CRITICAL",
		Category: "System",
		Desc:     "Service unresponsive due to lack of system resources"}

	eventTypes[SYSTEM_COLDBOOT] = &EventTypeAttributes{
		EType:    "SYSTEM_COLDBOOT",
		Severity: "WARN",
		Category: "System",
		Desc:     "System cold booted"}

	eventTypes[ROLLOUT_STARTED] = &EventTypeAttributes{
		EType:    "ROLLOUT_STARTED",
		Severity: "INFO",
		Category: "Rollout",
		Desc:     "Rollout initiated"}

	eventTypes[ROLLOUT_SUCCESS] = &EventTypeAttributes{
		EType:    "ROLLOUT_SUCCESS",
		Severity: "INFO",
		Category: "Rollout",
		Desc:     "Rollout successfully completed"}

	eventTypes[ROLLOUT_FAILED] = &EventTypeAttributes{
		EType:    "ROLLOUT_FAILED",
		Severity: "CRITICAL",
		Category: "Rollout",
		Desc:     "Rollout failed"}

	eventTypes[ROLLOUT_SUSPENDED] = &EventTypeAttributes{
		EType:    "ROLLOUT_SUSPENDED",
		Severity: "INFO",
		Category: "Rollout",
		Desc:     "Rollout suspended"}

}

func GetEventTypeAttrs(eType EventType) *EventTypeAttributes {
	if attrs, ok := eventTypes[eType]; ok {
		return attrs
	}

	return nil
}

func GetEventsByCategory() map[string][]*EventDetails {
	var eTypes []string
	for _, eType := range eventTypes {
		eTypes = append(eTypes, eType.EType)
	}
	sort.Strings(eTypes)

	eventTypesByCategory = map[string][]*EventDetails{}
	for _, eTypeStr := range eTypes {
		eType, ok := EventType_value[eTypeStr]
		if ok {
			eAttrs := eventTypes[EventType(eType)]
			eventTypesByCategory[eAttrs.Category] = append(eventTypesByCategory[eAttrs.Category],
				&EventDetails{Name: eAttrs.EType, Desc: eAttrs.Desc, Severity: eAttrs.Severity})
		}
	}

	return eventTypesByCategory
}
