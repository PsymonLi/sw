// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: selector.proto

/*
	Package fields is a generated protocol buffer package.

	It is generated from these files:
		selector.proto

	It has these top-level messages:
		Selector
		Requirement
*/
package fields

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Operator defines the supported operators for each Requirement.
type Operator int32

const (
	Operator_equals    Operator = 0
	Operator_notEquals Operator = 1
	Operator_in        Operator = 2
	Operator_notIn     Operator = 3
	Operator_gt        Operator = 4
	Operator_gte       Operator = 5
	Operator_lt        Operator = 6
	Operator_lte       Operator = 7
)

var Operator_name = map[int32]string{
	0: "equals",
	1: "notEquals",
	2: "in",
	3: "notIn",
	4: "gt",
	5: "gte",
	6: "lt",
	7: "lte",
}
var Operator_value = map[string]int32{
	"equals":    0,
	"notEquals": 1,
	"in":        2,
	"notIn":     3,
	"gt":        4,
	"gte":       5,
	"lt":        6,
	"lte":       7,
}

func (x Operator) String() string {
	return proto.EnumName(Operator_name, int32(x))
}
func (Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptorSelector, []int{0} }

// Selector is used to select objects by fields. Requirements in the selector are ANDed.
// A selector with no Requirements does not select anything.
type Selector struct {
	// Requirements are ANDed.
	Requirements []*Requirement `protobuf:"bytes,1,rep,name=Requirements" json:"requirements,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptorSelector, []int{0} }

func (m *Selector) GetRequirements() []*Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// Requirement defines a single matching condition for a selector.
type Requirement struct {
	// The label key that the condition applies to.
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"key"`
	// Condition checked for the key.
	Operator string `protobuf:"bytes,2,opt,name=Operator,proto3" json:"operator"`
	// Values contains one or more values corresponding to the label key. "equals" and
	// "notEquals" operators need a single Value. "in" and "notIn" operators can have
	// one or more values.
	Values []string `protobuf:"bytes,3,rep,name=Values" json:"values"`
}

func (m *Requirement) Reset()                    { *m = Requirement{} }
func (m *Requirement) String() string            { return proto.CompactTextString(m) }
func (*Requirement) ProtoMessage()               {}
func (*Requirement) Descriptor() ([]byte, []int) { return fileDescriptorSelector, []int{1} }

func (m *Requirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Requirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Requirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Selector)(nil), "fields.Selector")
	proto.RegisterType((*Requirement)(nil), "fields.Requirement")
	proto.RegisterEnum("fields.Operator", Operator_name, Operator_value)
}
func (m *Selector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Selector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requirements) > 0 {
		for _, msg := range m.Requirements {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSelector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Requirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Requirement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSelector(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSelector(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSelector(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Selector) Size() (n int) {
	var l int
	_ = l
	if len(m.Requirements) > 0 {
		for _, e := range m.Requirements {
			l = e.Size()
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	return n
}

func (m *Requirement) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSelector(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovSelector(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	return n
}

func sovSelector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSelector(x uint64) (n int) {
	return sovSelector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Selector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Selector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Selector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requirements = append(m.Requirements, &Requirement{})
			if err := m.Requirements[len(m.Requirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Requirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Requirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Requirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSelector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSelector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSelector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSelector(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSelector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSelector   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("selector.proto", fileDescriptorSelector) }

var fileDescriptorSelector = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xd7, 0x0d, 0x9b, 0xb6, 0x5e, 0x40, 0xc6, 0x48, 0xa8, 0xdb, 0x43, 0x52, 0x7a, 0x0a,
	0x08, 0x62, 0x09, 0xce, 0x5c, 0x22, 0xf5, 0x80, 0x38, 0x80, 0x52, 0x89, 0x03, 0x17, 0x94, 0xa6,
	0xb3, 0xc1, 0xc2, 0xb1, 0xb3, 0xf1, 0x78, 0x51, 0x5f, 0x80, 0x0b, 0x2f, 0xc0, 0x33, 0xf0, 0x24,
	0x1c, 0x79, 0x82, 0x08, 0x95, 0x5b, 0x9e, 0x02, 0x25, 0x29, 0x10, 0x6e, 0xfe, 0xbf, 0x6f, 0x66,
	0x3c, 0x1a, 0x7a, 0xd7, 0x82, 0x82, 0x1c, 0x4d, 0x1d, 0x57, 0xb5, 0x41, 0xc3, 0xfd, 0x2b, 0x09,
	0x6a, 0x6f, 0x97, 0x4f, 0x0b, 0x89, 0x1f, 0xdc, 0x2e, 0xce, 0x4d, 0x29, 0x0a, 0x53, 0x18, 0xd1,
	0xeb, 0x9d, 0xbb, 0xea, 0x53, 0x1f, 0xfa, 0xd7, 0xd0, 0xb6, 0xdc, 0x8c, 0xca, 0x2b, 0xd0, 0x36,
	0xd3, 0x7b, 0x23, 0xec, 0x27, 0x71, 0x03, 0x5a, 0xe6, 0x20, 0x1c, 0x4a, 0x65, 0x45, 0x56, 0xc9,
	0x02, 0xb4, 0xc8, 0xb4, 0x36, 0x98, 0xa1, 0x34, 0xda, 0x0a, 0xa9, 0x73, 0xe5, 0xf6, 0x60, 0x87,
	0x31, 0xeb, 0xf7, 0x74, 0xb6, 0x3d, 0xed, 0xc3, 0xb7, 0xf4, 0x76, 0x0a, 0xd7, 0x4e, 0xd6, 0x50,
	0x82, 0x46, 0xbb, 0x20, 0x2b, 0x2f, 0xba, 0x78, 0x76, 0x3f, 0x1e, 0x16, 0x8c, 0x47, 0x2e, 0x59,
	0xb6, 0x4d, 0xf8, 0xa0, 0x1e, 0x15, 0x3f, 0x31, 0xa5, 0x44, 0x28, 0x2b, 0x3c, 0xa4, 0xff, 0x0d,
	0x59, 0x7f, 0x21, 0xf4, 0x62, 0x04, 0xf8, 0x25, 0xf5, 0x5e, 0xc1, 0x61, 0x41, 0x56, 0x24, 0x9a,
	0x27, 0xd3, 0xb6, 0x09, 0xbd, 0x8f, 0x70, 0x48, 0x3b, 0xc6, 0x5f, 0xd0, 0xd9, 0xeb, 0x0a, 0xea,
	0x0c, 0x4d, 0xbd, 0x98, 0xf4, 0xfe, 0xe1, 0xb7, 0xcf, 0x97, 0xf7, 0xb6, 0x58, 0x6f, 0xb4, 0x2b,
	0xa3, 0x3f, 0xee, 0x51, 0xdb, 0x84, 0x33, 0x73, 0x0a, 0xe9, 0xdf, 0x16, 0xbe, 0xa6, 0xfe, 0xdb,
	0x4c, 0x39, 0xb0, 0x0b, 0x6f, 0xe5, 0x45, 0xf3, 0x84, 0xb6, 0x4d, 0xe8, 0xdf, 0xf4, 0x24, 0x3d,
	0x99, 0xc7, 0xef, 0xfe, 0x7d, 0xc1, 0x29, 0xf5, 0xe1, 0xda, 0x65, 0xca, 0xb2, 0x33, 0x7e, 0x87,
	0xce, 0xb5, 0xc1, 0xcd, 0x10, 0x09, 0xf7, 0xe9, 0x44, 0x6a, 0x36, 0xe1, 0x73, 0x7a, 0xae, 0x0d,
	0xbe, 0xd4, 0xcc, 0xeb, 0x50, 0x81, 0xec, 0x16, 0x9f, 0x52, 0xaf, 0x40, 0x60, 0xe7, 0x1d, 0x50,
	0xc8, 0xfc, 0x0e, 0x28, 0x04, 0x36, 0x4d, 0xd8, 0xf7, 0x63, 0x40, 0x7e, 0x1c, 0x03, 0xf2, 0xf3,
	0x18, 0x90, 0xaf, 0xbf, 0x82, 0xb3, 0x37, 0x64, 0xe7, 0xf7, 0x57, 0x7e, 0xfe, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x52, 0x59, 0x48, 0xf5, 0x01, 0x00, 0x00,
}
