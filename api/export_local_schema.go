// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package apiApiServer is a auto generated package.
Input file: export.proto
*/
package api

import "reflect"

var typesMapExport = map[string]*Struct{

	"api.ExportConfig": &Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(ExportConfig{}) },
		Fields: map[string]Field{
			"Destination": Field{Name: "Destination", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "destination", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"Transport": Field{Name: "Transport", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "transport", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"Credentials": Field{Name: "Credentials", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "credentials", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "api.ExternalCred"},
		},
	},
	"api.ExternalCred": &Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(ExternalCred{}) },
		Fields: map[string]Field{
			"UserName": Field{Name: "UserName", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "username", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"Password": Field{Name: "Password", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "password", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"BearerToken": Field{Name: "BearerToken", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "bearer-token", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"CertData": Field{Name: "CertData", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "cert-data", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BYTES"},

			"KeyData": Field{Name: "KeyData", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "key-data", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BYTES"},

			"CaData": Field{Name: "CaData", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "ca-data", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_BYTES"},
		},
	},
	"api.SyslogExportConfig": &Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SyslogExportConfig{}) },
		Fields: map[string]Field{
			"FacilityOverride": Field{Name: "FacilityOverride", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "facility-override", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},

			"Prefix": Field{Name: "Prefix", CLITag: CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "prefix", Pointer: true, Slice: false, Map: false, Inline: false, FromInline: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
}

func init() {
	schema_init_once.Do(init_schema_map)
	for k, v := range typesMapExport {
		local_schema[k] = v
	}
}
