// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package cmd;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// --------------------------------- CLUSTER ---------------------------------------------
//
// Cluster represents a full cluster venice and workload nodes
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o NetOps-admin
//              - initial cluster creation
//      Modify:
//          o NetOps-admin
//              - update spec attributes
//          o CMD
//              - update status attributes
//      Delete:
//          o NetOps-admin
//              - TBD
//
message Cluster {

    option (venice.objectPrefix) = {Collection: "cluster"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the cluster.
    ClusterSpec Spec     = 3 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the cluster.
    ClusterStatus Status = 4 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "status,omitempty"];
}

// ClusterSpec contains the configuration of the cluster.
message ClusterSpec {

    // QuorumNodes contains the list of hostnames for nodes configured to be quorum
    // nodes in the cluster.
    repeated string QuorumNodes = 1 [(gogoproto.jsontag) = "quorum-nodes,omitempty"];

    // VirtualIP is the IP address for managing the cluster. It will be hosted by
    // the winner of election between quorum nodes.
    string VirtualIP            = 2 [(gogoproto.jsontag) = "virtual-ip,omitempty"];

    // NTPServers contains the list of NTP servers for the cluster.
    repeated string NTPServers  = 3 [(gogoproto.jsontag) = "ntp-servers,omitempty"];

    // DNSSubDomain is the DNS subdomain for the default tenant.
    string DNSSubDomain         = 4 [(gogoproto.jsontag) = "dns-subdomain,omitempty"];

    // AutoAdmitNICs when enabled auto-admits NICs that are validated
    // into Venice Cluster. When it is disabled, NICs validated by CMD are
    // set to Pending state and it requires Manual approval to be admitted
    // into the cluster.
    bool AutoAdmitNICs          = 5 [(gogoproto.jsontag) = "auto-admit-nics,omitempty"];
}

// ClusterStatus contains the current state of the Cluster.
message ClusterStatus {

    // Leader contains the node name of the cluster leader.
    string Leader   = 1 [(gogoproto.jsontag) = "leader,omitempty"];
    // LastLeaderTransitionTime is when the leadership changed last time
    api.Timestamp LastLeaderTransitionTime = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "last-leader-transition-time,omitempty"];
}

//---------------------------------- NODE -------------------------------------------
//
// Node is representation of a single node in the system.
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o NetOps-admin
//              - initial node creation for Baremetal node
//          o CMD
//              - auto created when Hypervisor Node and NIC are
//                discovered via Orchestrator interface, NIC registration
//      Modify:
//          o NetOps-admin
//              - update spec for Baremetal node
//          o CMD
//              - update spec attributes for Hypervisor node
//              - update status attributes
//      Delete:
//          o NetOps-admin
//              - when Baremetal node is decommissioned
//          o CMD
//              - TBD
//
message Node {

    option (venice.objectPrefix) = {Collection: "nodes"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the node.
    NodeSpec Spec       = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the node.
    NodeStatus Status   = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// NodeSpec contains the configuration of the node.
message NodeSpec {

    // NodeRole Type
    enum NodeRole {
        CONTROLLER  = 0x0;  // Node which is part of Venice cluster
        WORKLOAD    = 0x1;  // Node which runs workloads
        QUORUM      = 0x2;  // Node which is part of quorum in Venice cluster
    }

    // Roles is of list of roles a node can be configured with.
    repeated string Roles = 1 [(gogoproto.nullable) = true,
                              (venice.check) = "StrEnum(NodeSpec.NodeRole)",
                              (gogoproto.jsontag) = "roles,omitempty"];
}

// NodeStatus contains the current state of the node.
message NodeStatus {

    // Various phases in lifecycle of a Node
    enum NodePhase {
        UNKNOWN    = 0; // Unknown status
        PENDING    = 1; // Node is waiting to join the venice cluster
        JOINED     = 2; // Node is part of the venice cluster
        FAILED     = 3; // Node failed to join the venice cluster
    }

    // Current lifecycle phase of the node.
    string Phase                        = 1 [(gogoproto.nullable) = true,
                                            (venice.check) = "StrEnum(NodeStatus.NodePhase)",
                                            (gogoproto.jsontag) = "phase,omitempty"];

    // List of current node conditions
    repeated NodeCondition Conditions   = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "conditions,omitempty"];

    // Nics holds a list of Mac addresses each uniquely identifying
    // a SmartNIC subsystem that is part of the Node
    repeated string Nics                = 3 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "nics,omitempty"];
}



// NodeCondition describes the state of a Node at a certain point.
message NodeCondition {

    // These are valid conditions of a Node
    enum ConditionType {
        LEADER  = 0; // Node is the elected leader in Venice cluster
    }

    // Type indicates a certain node condition
    string Type                 = 1 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(NodeCondition.ConditionType)",
                                    (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status               = 2 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(ConditionStatus)",
                                    (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime   = 3 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason               = 4 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message              = 5 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "message,omitempty"];
}

// These are valid condition statuses.
enum ConditionStatus {
    UNKNOWN   = 0; // Condition is unknown
    TRUE      = 1; // Condition is met
    FALSE     = 2; // Condition is not met
}

//------------------------------------ SMART NIC  -------------------------------------------
//
// SmartNIC represents the Naples I/O subsystem
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o CMD
//              - created as part of NIC registration, Admittance
//      Modify:
//          o CMD
//              - update spec attributes
//              - update status attributes
//      Delete:
//          o CMD
//              - aging out stale or rejected NICs (TBD)
//          o NetOps, SecOps
//              - Decomission a NIC (TBD)
//
message SmartNIC {

    option (venice.objectPrefix) = {Collection: "smartnics"};

    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];

    //Object name is Serial-Number of the SmartNIC
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // SmartNICSpec contains the configuration of the network adapter.
    SmartNICSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // SmartNICStatus contains the current state of the network adapter.
    SmartNICStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

// SmartNICSpec contains configuration of the SmartNIC (Naples I/O subsystem)
message SmartNICSpec {

    // Various phases in lifecycle of a SmartNIC
    enum SmartNICPhase {
        UNKNOWN      = 0; // Unknown status, initial state.
        REGISTERING  = 1; // NIC registration is in progress, set when Naples initiated registration
        REJECTED     = 2; // NIC is rejected, due to invalid cert
        PENDING      = 3; // NIC is validated but waiting for manual approval
        ADMITTED     = 4; // NIC is validated and admitted
    }

    // Current phase of the SmartNIC.
    // When auto-admission is enabled, Phase will be set to NIC_ADMITTED
    // by CMD for validated NICs.
    // When auto-admission is not enabled, Phase will be set to NIC_PENDING
    // by CMD for validated NICs since it requires manual approval.
    // To admit the NIC as a part of manual admission, user is expected to
    // set the Phase to NIC_ADMITTED for the NICs that are in NIC_PENDING
    // state. Note : Whitelist mode is not supported yet.
    string Phase            = 1 [(gogoproto.nullable) = true,
                                (venice.check) = "StrEnum(SmartNICSpec.SmartNICPhase)",
                                (gogoproto.jsontag) = "phase,omitempty"];

    // Management IP address of the naples node
    string MgmtIp           = 2 [(gogoproto.nullable) = true,
                                (venice.check) = "HostAddr()",
                                (gogoproto.jsontag) = "mgmt-ip,omitempty"];

    // Workload node or Controller node.
    string NodeName         = 3 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "node-name,omitempty"];

    // Ports holds a list of Port Specs
    repeated PortSpec Ports = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "ports,omitempty"];
}

// SmartNICStatus contains current status of a SmartNIC
message SmartNICStatus {

    // List of current NIC conditions
    repeated SmartNICCondition Conditions   = 1 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "conditions,omitempty"];

    // Serial number
    string SerialNum                        = 2 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "serial-num,omitempty"];

    // Primary MAC address, which is MAC address of the primary PF exposed by SmartNIC
    string PrimaryMacAddress                = 3 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "primary-mac-address,omitempty"];

    // Ports holds a list of PortStatus
    repeated PortStatus Ports               = 5 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "ports,omitempty"];
}

// SmartNICCondition describes the state of a SmartNIC at a certain point.
message SmartNICCondition {

    // These are valid conditions of a SmartNIC
    enum ConditionType {
        HEALTHY     = 0; // NIC is healthy
        UNREACHABLE = 1; // NIC is not reachable from Venice cluster
    }

    // Type indicates a certain NIC condition
    string Type                     = 1 [(gogoproto.nullable) = true,
                                        (venice.check) = "StrEnum(SmartNICCondition.ConditionType)",
                                        (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status                   = 2 [(gogoproto.nullable) = true,
                                        (venice.check) = "StrEnum(ConditionStatus)",
                                        (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime       = 3 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason                   = 4 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message                  = 5 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "message,omitempty"];
}

// PortSpec contains configuration of a port in SmartNIC
message PortSpec {

    // Mac address of the Port, which is key identifier of the port
    string MacAddress   = 1 [(gogoproto.nullable) = true,
                            (gogoproto.jsontag) = "mac-address,omitempty"];

}

// PortStatus contains current status of a Port
message PortStatus {

    // Mac address of the Port, which is key identifier of the port
    string MacAddress                   = 1 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "mac-address,omitempty"];

    // LinkSpeed of the Port
    string LinkSpeed                    = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "link-speed,omitempty"];

    // List of current Port conditions
    repeated PortCondition Conditions   = 3 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "conditions,omitempty"];
}

// PortCondition describes the state of a Port at a certain point.
message PortCondition {

    // These are valid conditions of a Port
    enum ConditionType {
        PORT_UP     = 0; // Port is Up
    }

    // Type indicates a certain Port condition
    string Type                 = 1 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(PortCondition.ConditionType)",
                                    (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status				= 2 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(ConditionStatus)",
                                    (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime   = 3 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason               = 4 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message              = 5 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "message,omitempty"];
}

//-------------------------------- R E S T  A P I ----------------------------------------------------

service CmdV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "cmd";
    // API Version.
    option (venice.apiVersion) = "v1";

    option(venice.apiGrpcCrudService) = "Cluster";
    option(venice.apiGrpcCrudService) = "Node";
    option(venice.apiGrpcCrudService) = "SmartNIC";

    option(venice.apiRestService) = {
        Object: "Cluster"
        Method: ["put", "get", "delete", "list"]
    };

    option(venice.apiRestService) = {
        Object: "Node"
        Method: ["put", "get", "delete", "post", "list"]
    };

    option(venice.apiRestService) = {
        Object: "SmartNIC"
        Method: ["put", "get", "delete", "post", "list"]
    };
}
