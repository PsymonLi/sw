// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package cluster;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// --------------------------------- CLUSTER ---------------------------------------------
//
// Cluster represents a full cluster venice and workload nodes
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o NetOps-admin
//              - initial cluster creation
//      Modify:
//          o NetOps-admin
//              - update spec attributes
//          o CMD
//              - update status attributes
//      Delete:
//          o NetOps-admin
//              - TBD
//
message Cluster {

    option (venice.objectPrefix) = {Singleton: "cluster"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the cluster.
    ClusterSpec Spec     = 3 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the cluster.
    ClusterStatus Status = 4 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "status,omitempty"];
}

// ClusterSpec contains the configuration of the cluster.
message ClusterSpec {

    // QuorumNodes contains the list of hostnames for nodes configured to be quorum
    // nodes in the cluster.
    repeated string QuorumNodes = 1 [(gogoproto.jsontag) = "quorum-nodes,omitempty"];

    // VirtualIP is the IP address for managing the cluster. It will be hosted by
    // the winner of election between quorum nodes.
    string VirtualIP            = 2 [(gogoproto.jsontag) = "virtual-ip,omitempty"];

    // NTPServers contains the list of NTP servers for the cluster.
    repeated string NTPServers  = 3 [(gogoproto.jsontag) = "ntp-servers,omitempty"];

    // DNSSubDomain is the DNS subdomain for the default tenant.
    string DNSSubDomain         = 4 [(gogoproto.jsontag) = "dns-subdomain,omitempty"];

    // AutoAdmitNICs when enabled auto-admits NICs that are validated
    // into Venice Cluster. When it is disabled, NICs validated by CMD are
    // set to Pending state and it requires Manual approval to be admitted
    // into the cluster.
    bool AutoAdmitNICs          = 5 [(gogoproto.jsontag) = "auto-admit-nics,omitempty"];
}

// ClusterStatus contains the current state of the Cluster.
message ClusterStatus {
    // Leader contains the node name of the cluster leader.
    string Leader                           = 1 [(gogoproto.jsontag) = "leader,omitempty"];
    // LastLeaderTransitionTime is when the leadership changed last time
    api.Timestamp LastLeaderTransitionTime  = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "last-leader-transition-time,omitempty"];
    // Human friendly build version
    string BuildVersion                     = 3 [(gogoproto.jsontag) = "build-version,omitempty"];
    // Representation of ommit in version control system - e.g: hash in git
    string VCSCommit                        = 4 [(gogoproto.jsontag) = "vcs-commit,omitempty"];
    // Date and Time at which the source code was built
    string BuildDate                        = 5 [(gogoproto.jsontag) = "build-date,omitempty"];
    // AuthBootstrapped when set to true indicates that auth has been bootstrapped in cluster
    bool AuthBootstrapped                   = 6 [(gogoproto.jsontag) = "auth-bootstrapped,omitempty"];
}

// ClusterAuthBootstrapRequest is to set auth bootstrap flag in cluster
message ClusterAuthBootstrapRequest {
    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];
    option (venice.objectPrefix) = {Singleton: "cluster"};
}

//---------------------------------- NODE -------------------------------------------
//
// Node is representation of a single Venice node in the system.
//
message Node {

    option (venice.objectPrefix) = {Collection: "nodes"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the node.
    NodeSpec Spec       = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the node.
    NodeStatus Status   = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// NodeSpec contains the configuration of the node.
message NodeSpec {
}

// NodeStatus contains the current state of the node.
message NodeStatus {

    // Various phases in lifecycle of a Node
    enum NodePhase {
        // ui-hint: Unknown
        UNKNOWN    = 0; // Unknown status
        // ui-hint: Pending
        PENDING    = 1; // Node is waiting to join the venice cluster
        // ui-hint: Joined
        JOINED     = 2; // Node is part of the venice cluster
        // ui-hint: Failed
        FAILED     = 3; // Node failed to join the venice cluster
    }

    // Current lifecycle phase of the node.
    string Phase                        = 1 [(gogoproto.nullable) = true,
                                            (venice.check) = "StrEnum(NodeStatus.NodePhase)",
                                            (gogoproto.jsontag) = "phase,omitempty"];


    // Quorum node or not.
    bool Quorum                         = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "quorum,omitempty"];

    // List of current node conditions
    repeated NodeCondition Conditions   = 3 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "conditions,omitempty"];
}

// NodeCondition describes the state of a Node at a certain point.
message NodeCondition {

    // These are valid conditions of a Node
    enum ConditionType {
        // ui-hint: Leader
        LEADER  = 0; // Node is the elected leader in Venice cluster
    }

    // Type indicates a certain node condition
    string Type                 = 1 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(NodeCondition.ConditionType)",
                                    (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status               = 2 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(ConditionStatus)",
                                    (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime   = 3 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason               = 4 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message              = 5 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "message,omitempty"];
}

// These are valid condition statuses.
enum ConditionStatus {
    // ui-hint: Unknown
    UNKNOWN   = 0; // Condition is unknown
    // ui-hint: True
    TRUE      = 1; // Condition is met
    // ui-hint: False
    FALSE     = 2; // Condition is not met
}

//---------------------------------- HOST ------------------------------------
//
// Host represents a Baremetal or Hypervisor server.
//
message Host {

    option (venice.objectPrefix) = {Collection: "hosts"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the host.
    HostSpec Spec       = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the host.
    HostStatus Status   = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// HostSpec contains the configuration of the Host.
message HostSpec {

    // Spec of all interfaces in the Host identified by Primary MAC
    map<string, HostIntfSpec> Interfaces    = 1 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "interfaces,omitempty"];
}

// HostStatus contains the current state of the Host.
message HostStatus {

    // Type of Host
    enum HostType {
        UNKNOWN     = 0; // Unknown type
        BAREMETAL   = 1; // Baremetal server
        HYPERVISOR  = 2; // Hypervisor (virtualized) server
    }

    // Type of the host
    string Type                             = 1 [(gogoproto.nullable) = true,
                                                (venice.check) = "StrEnum(HostStatus.HostType)",
                                                (gogoproto.jsontag) = "type,omitempty"];

    // Operating system info - name of OS with version, eg: "Linux 3.10.0.xyz"
    string OperatingSystem                  = 2 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "operating-system,omitempty"];

    // Orchestrator is the name of associated Compute controller
    // (like VCenter) managing this host.
    string Orchestrator                     = 3 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "orchestrator,omitempty"];

    // Status of all interfaces in the Host identified by Primary MAC
    map<string, HostIntfStatus> Interfaces  = 4 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "interfaces,omitempty"];
}

// Spec of a Host interface
message HostIntfSpec {

    // List of all MAC addresses configured and discovered on a Host Interface
    repeated string MacAddrs = 1 [(gogoproto.jsontag) = "mac-addrs,omitempty"];
}

// Status of a Host interface
message HostIntfStatus {

    // List of all IP addresses configured on a Host Interface
    repeated string IpAddrs = 1 [(gogoproto.jsontag) = "ip-addrs,omitempty"];
}

//------------------------------------ SMART NIC  -------------------------------------------
//
// SmartNIC represents the Naples I/O subsystem
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o CMD
//              - created as part of NIC registration, Admittance
//      Modify:
//          o CMD
//              - update spec attributes
//              - update status attributes
//      Delete:
//          o CMD
//              - aging out stale or rejected NICs (TBD)
//          o NetOps, SecOps
//              - Decomission a NIC (TBD)
//
message SmartNIC {

    option (venice.objectPrefix) = {Collection: "smartnics"};

    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];

    //Object name is Serial-Number of the SmartNIC
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // SmartNICSpec contains the configuration of the network adapter.
    SmartNICSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // SmartNICStatus contains the current state of the network adapter.
    SmartNICStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

// SmartNICSpec contains configuration of the SmartNIC (Naples I/O subsystem)
message SmartNICSpec {

    // Various phases in lifecycle of a SmartNIC
    enum SmartNICPhase {
        // ui-hint: Unknown
        UNKNOWN      = 0; // Unknown status, initial state.
        // ui-hint: Registering
        REGISTERING  = 1; // NIC registration is in progress, set when Naples initiated registration
        // ui-hint: Rejected
        REJECTED     = 2; // NIC is rejected, due to invalid cert
        // ui-hint: Pending
        PENDING      = 3; // NIC is validated but waiting for manual approval
        // ui-hint: Admitted
        ADMITTED     = 4; // NIC is validated and admitted
    }

    // Current phase of the SmartNIC.
    // When auto-admission is enabled, Phase will be set to NIC_ADMITTED
    // by CMD for validated NICs.
    // When auto-admission is not enabled, Phase will be set to NIC_PENDING
    // by CMD for validated NICs since it requires manual approval.
    // To admit the NIC as a part of manual admission, user is expected to
    // set the Phase to NIC_ADMITTED for the NICs that are in NIC_PENDING
    // state. Note : Whitelist mode is not supported yet.
    string Phase            = 1 [(gogoproto.nullable) = true,
                                (venice.check) = "StrEnum(SmartNICSpec.SmartNICPhase)",
                                (gogoproto.jsontag) = "phase,omitempty"];

    // Management IP address of the naples node
    string MgmtIp           = 2 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "mgmt-ip,omitempty"];

    // Host name
    string HostName         = 3 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "host-name,omitempty"];

    // Ports holds a list of Port Specs
    repeated PortSpec Ports = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "ports,omitempty"];
}

// SmartNICStatus contains current status of a SmartNIC
message SmartNICStatus {

    // List of current NIC conditions
    repeated SmartNICCondition Conditions   = 1 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "conditions,omitempty"];

    // Serial number
    string SerialNum                        = 2 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "serial-num,omitempty"];

    // Primary MAC address, which is MAC address of the primary PF exposed by SmartNIC
    string PrimaryMacAddress                = 3 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "primary-mac-address,omitempty"];

    // Ports holds a list of PortStatus
    repeated PortStatus Ports               = 4 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "ports,omitempty"];
}

// SmartNICCondition describes the state of a SmartNIC at a certain point.
message SmartNICCondition {

    // These are valid conditions of a SmartNIC
    enum ConditionType {
        // ui-hint: Healthy
        HEALTHY     = 0; // NIC is healthy
        // ui-hint: Not Reachable
        UNREACHABLE = 1; // NIC is not reachable from Venice cluster
    }

    // Type indicates a certain NIC condition
    string Type                     = 1 [(gogoproto.nullable) = true,
                                        (venice.check) = "StrEnum(SmartNICCondition.ConditionType)",
                                        (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status                   = 2 [(gogoproto.nullable) = true,
                                        (venice.check) = "StrEnum(ConditionStatus)",
                                        (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime       = 3 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason                   = 4 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message                  = 5 [(gogoproto.nullable) = true,
                                        (gogoproto.jsontag) = "message,omitempty"];
}

// PortSpec contains configuration of a port in SmartNIC
message PortSpec {

    // Primary Mac address of the Port, which is key identifier of the port
    string MacAddress   = 1 [(gogoproto.nullable) = true,
                            (gogoproto.jsontag) = "mac-address,omitempty"];

}

// PortStatus contains current status of a Port
message PortStatus {

    // List of all Mac addresses of the Port
    repeated string MacAddrs            = 1 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "mac-addrs,omitempty"];

    // LinkSpeed of the Port
    string LinkSpeed                    = 2 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "link-speed,omitempty"];

    // List of current Port conditions
    repeated PortCondition Conditions   = 3 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "conditions,omitempty"];
}

// PortCondition describes the state of a Port at a certain point.
message PortCondition {

    // These are valid conditions of a Port
    enum ConditionType {
        // ui-hint: Up
        PORT_UP     = 0; // Port is Up
    }

    // Type indicates a certain Port condition
    string Type                 = 1 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(PortCondition.ConditionType)",
                                    (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status				= 2 [(gogoproto.nullable) = true,
                                    (venice.check) = "StrEnum(ConditionStatus)",
                                    (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime   = 3 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason               = 4 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message              = 5 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "message,omitempty"];
}
