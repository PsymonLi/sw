// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package telemetry_query;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";

// TSDBFunctionType specifies an operation to perform on metrics
enum TsdbFunctionType {
    NONE = 0; // none
    MEAN = 1; // returns average of the fields
    MAX  = 2; // returns maximum of the fields
}

enum SortOrder {
    Ascending = 0;
    Descending = 1;
}

// PaginationSpec specifies how many results to include
message PaginationSpec {
    // Offset specifies the starting point when using Count
    int32 Offset = 1 [(gogoproto.jsontag) = "offset,omitempty", (venice.check)="IntMin(0)", (venice.default)="0"];
    // Count specifies the number of points to include
    int32 Count = 2 [(gogoproto.jsontag) = "count,omitempty", (venice.check)="IntMin(1)"];
}

// MetricsQuerySpec requires a structured body consisting of:
//     -  Object Selector (selects one more more objects of same Kind)
//     -  Time Range (for the time series)
//     -  A set of Metric Specs
//     -  A pagination spec
message MetricsQuerySpec {
    api.TypeMeta T            = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    // Name is the name of the API object.
    string Name               = 2 [(gogoproto.jsontag) = "name,omitempty", (venice.check) = "EmptyOr(RegExp(name))"];
    fields.Selector Selector  = 3 [(gogoproto.jsontag) = "selector,omitempty"];
    // Fields select the metric fields to be included in the result
    // Empty will include all fields, must contain at least one non-tag field
    repeated string Fields    = 4 [(gogoproto.jsontag) = "fields,omitempty", (venice.check)="EmptyOr(RegExp(name))"];
    // Functions specify an operation function to be applied, example mean()/max()
    string Function           = 5 [(gogoproto.jsontag) = "function,omitempty", (venice.check) = "StrEnum(TsdbFunctionType)"];
    // StartTime selects all metrics with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
    api.Timestamp StartTime   = 6 [(gogoproto.jsontag) = "start-time,omitempty"];
    // EndTime selects all metrics with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
    api.Timestamp EndTime     = 7 [(gogoproto.jsontag) = "end-time,omitempty"];
    // GroupbyTime groups series based on the interval specified
    string GroupbyTime        = 8 [(gogoproto.jsontag) = "group-by-time,omitempty", (venice.check)="EmptyOr(Duration(0,0))"];
    // GroupbyField groups series based on the field specified
    string GroupbyField       = 9 [(gogoproto.jsontag) = "group-by-field,omitempty", (venice.check)="EmptyOr(RegExp(name))"];
    // PaginationSpec specifies the number of series to include
    PaginationSpec Pagination = 10 [(gogoproto.jsontag) = "pagination,omitempty"];
    // SortOrder specifies time ordering of results
    string SortOrder          = 11 [(gogoproto.jsontag) = "sort-order,omitempty",
                                     (venice.check) = "StrEnum(SortOrder)"];
}

// MetricsQueryList contains a list of queries to execute
message MetricsQueryList {
    // Tenant for the request
    string Tenant     = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Namespace for the request
    string Namespace  = 2 [(gogoproto.jsontag) = "namespace,omitempty"];
    // List of queries to execute
    repeated MetricsQuerySpec Queries = 3 [(gogoproto.jsontag) = "queries,omitempty"];
}


// Enums for the response
enum FwlogActions {
    // ui-hint: Allow
    allow = 0;
    // ui-hint: Deny
    deny = 1;
    // ui-hint: Reject
    reject = 2;
}

enum FwlogDirections {
    // ui-hint: From Host
    from_host = 0;
    // ui-hint: From Uplink
    from_uplink = 1;
}


message Fwlog {
    // Tenant
    string Tenant      = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Source IP, 
    string Src         = 2 [(gogoproto.jsontag) = "source,omitempty"];
    // Destination IP
    string Dest        = 3 [(gogoproto.jsontag) = "destination,omitempty"];
    // Source Port
    uint32 SrcPort     = 4 [(gogoproto.jsontag) = "source-port,omitempty"];
    // Destination Port
    uint32 DestPort    = 5 [(gogoproto.jsontag) = "destination-port,omitempty"];
    // Protocol, 
    string Protocol    = 6 [(gogoproto.jsontag) = "protocol,omitempty"];
    // Action 
    string Action      = 7 [(gogoproto.jsontag) = "action,omitempty", (venice.check)="StrEnum(FwlogActions)"];
    // Flow Direction
    string Direction   = 8 [(gogoproto.jsontag) = "direction,omitempty", (venice.check)="StrEnum(FwlogDirections)"];
    // Rule ID
    string RuleID      = 9 [(gogoproto.jsontag) = "rule-id,omitempty"];
    // Session ID
    string SessionID   = 10 [(gogoproto.jsontag) = "session-id,omitempty"];
    // Session state
    string SessionState= 11 [(gogoproto.jsontag) = "session-state,omitempty"];
    //policy name
    string PolicyName  = 12 [(gogoproto.jsontag) = "policy-name,omitempty"];
    // Reporter ID
    string ReporterID  = 13 [(gogoproto.jsontag) = "reporter-id,omitempty"];
    // Time the log was created
    api.Timestamp Time = 14 [(gogoproto.jsontag) = "time,omitempty"];
}

// FwlogsQuerySpec allows selecting logs by all attributes
// All fields are ANDed together
message FwlogsQuerySpec {
    // OR of sources IPs to be matched
    repeated string SourceIPs = 1 [(gogoproto.jsontag) = "source-ips,omitempty", (venice.check)="IPAddr()"];
    // OR of dest IPs to be matched
    repeated string DestIPs = 2 [(gogoproto.jsontag) = "dest-ips,omitempty", (venice.check)="IPAddr()"];
    // OR of source ports to be matched
    repeated uint32 SourcePorts = 3 [(gogoproto.jsontag) = "source-ports,omitempty", (venice.check)="IntRange(0, 65535)"];
    // OR of dest ports to be matched
    repeated uint32 DestPorts = 4 [(gogoproto.jsontag) = "dest-ports,omitempty", (venice.check)="IntRange(0, 65535)"];
    // OR of protocols to be matched
    repeated string Protocols = 5 [(gogoproto.jsontag) = "protocols,omitempty"];
    // OR of actions to be matched
    repeated string Actions = 6 [(gogoproto.jsontag) = "actions,omitempty", (venice.check)="StrEnum(FwlogActions)"];
    // OR of directions to be matched
    repeated string Directions = 7 [(gogoproto.jsontag) = "directions,omitempty", (venice.check)="StrEnum(FwlogDirections)"];
    // OR of ruleID to be matched
    repeated string RuleIDs = 8 [(gogoproto.jsontag) = "rule-ids,omitempty"];
    // OR of policy names to be matched
    repeated string PolicyNames = 9 [(gogoproto.jsontag) = "policy-names,omitempty"];
    // OR of reporter names to be matched
    repeated string ReporterIDs = 10 [(gogoproto.jsontag) = "reporter-ids,omitempty"];
    // StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
    api.Timestamp StartTime   = 11 [(gogoproto.jsontag) = "start-time,omitempty"];
    // EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
    api.Timestamp EndTime     = 12 [(gogoproto.jsontag) = "end-time,omitempty"];
    // PaginationSpec specifies the number of series to include
    PaginationSpec Pagination = 13 [(gogoproto.jsontag) = "pagination,omitempty"];
    // SortOrder specifies time ordering of results
    string SortOrder          = 14 [(gogoproto.jsontag) = "sort-order,omitempty",
                                     (venice.check) = "StrEnum(SortOrder)",
                                     (venice.default) = "Descending"];
}

// FwlogsQueryList contains a list of queries to execute
message FwlogsQueryList {
    // Tenant for the request
    string Tenant     = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Namespace for the request
    string Namespace  = 2 [(gogoproto.jsontag) = "namespace,omitempty"];
    // List of queries to execute
    repeated FwlogsQuerySpec Queries = 3 [(gogoproto.jsontag) = "queries,omitempty"];
}

//
message ResultSeries {
    // Name of the series
    string Name = 1 [(gogoproto.jsontag) = "name,omitempty"];
    // Tags are the TSDB tags in the query response
    map <string, string> Tags = 2 [(gogoproto.jsontag) = "tags,omitempty"];
    // columns list all available fields in tsdb
    repeated string Columns = 3 [(gogoproto.jsontag) = "columns,omitempty"];
    // values contain field values received frpm tsdb, it is in the form of [][]interface{}
    repeated api.InterfaceSlice Values = 4 [(gogoproto.jsontag) = "values"];
}

// MetricsQueryResult contains tsdb series from a metrics query
message MetricsQueryResult {
    int32 StatementID = 1 [(gogoproto.jsontag) = "statement_id"];
    repeated ResultSeries Series = 2 [(gogoproto.jsontag) = "series,omitempty"];
}

// MetricsQueryResponse is the response for Metrics Query
message MetricsQueryResponse {
    // Tenant for the request
    string Tenant     = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Namespace for the request
    string Namespace  = 2 [(gogoproto.jsontag) = "namespace,omitempty"];
   repeated MetricsQueryResult Results = 3 [(gogoproto.jsontag) = "results,omitempty"];
}

// FwlogsQueryResult contains fwlogs returned from a fwlogQuery
message FwlogsQueryResult {
    int32 StatementID = 1 [(gogoproto.jsontag) = "statement_id"];
    repeated Fwlog Logs = 2 [(gogoproto.jsontag) = "logs,omitempty"];
}

// FwlogsQueryResponse is the response for Fwlogs Query
message FwlogsQueryResponse {
    // Tenant for the request
    string Tenant     = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Namespace for the request
    string Namespace  = 2 [(gogoproto.jsontag) = "namespace,omitempty"];
   repeated FwlogsQueryResult Results = 3 [(gogoproto.jsontag) = "results,omitempty"];
}