// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package bookstore;

// Mandatory imports.
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/pensando/sw/api/meta.proto";


message StoreSpec {
  string Contact = 1;
}

message StoreStatus {
  repeated string CurrentOutages = 1;
}

message Store {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = {Singleton: "store"};

  StoreSpec Spec = 3 [(gogoproto.nullable) = false];
  StoreStatus Status = 4 [(gogoproto.nullable) = false];
}

message Publisher {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  // Option to define writing to KV store and the prefix for the object. The option could also be
  // specified with dynamic parameters in {..} (for example tenant, namespace etc.) as needed.
  option (venice.objectPrefix) = {Collection: "publishers"};

  PublisherSpec Spec = 3 [(gogoproto.nullable) = false];
}

message PublisherSpec {
    string Id  = 2;
    string Address = 3;
    string WebAddr = 4 [(venice.check) = "URI()", (venice.check) = "StrLen(6,256)"];
}

message Book {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = {Collection: "books"};

  BookSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec"];
  BookStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status"];
}

message BookSpec {
  enum  BookCategories{
    ChildrensLit = 0;
    YoungAdult = 1;
    Fiction = 2;
    NonFiction = 3;
  }
  string ISBNId = 2;
  string Author = 3;
  // Added in  version 2 of the API.
  string IdProvider = 4[(venice.default) = "v1:TestProvider"];
  string Category = 5 [(venice.check) = "StrEnum(BookSpec.BookCategories)", (venice.default) = "v1:ChildrensLit", (venice.default) = "YoungAdult"];
  // Used for performance monitoring tests
  api.Timestamp UpdateTimestamp = 6;
  bool Terminate = 7;
  map<string, BookEdition> Editions = 8 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "editions"];
}

message BookEdition {
  string Errata = 1[(venice.default) = "None", (gogoproto.jsontag) = "errata"];
  string Year = 2 [(gogoproto.jsontag) = "year", (venice.check) = "StrLen(4,4)"];
  map<string, BookReview> Reviews = 3[(gogoproto.jsontag) = "reviews"];
}

message BookReview {
    api.Timestamp Date = 1 [(gogoproto.jsontag) = "date"];
    string Review = 2 [(gogoproto.jsontag) = "review"];
}

message BookStatus {
    int32 Inventory = 1;
}

message Order {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = {Collection: "orders"};

  // Spec is not allowed to be Null hence disabling nullable.
  OrderSpec Spec = 3 [(gogoproto.nullable) = false];
  OrderStatus Status = 4 [(gogoproto.nullable) = false];
}

message OrderSpec {
  string Id = 1 [(venice.default) = "unknown order", (gogoproto.jsontag) = ",omitempty"];
  repeated OrderItem Order = 2;
}

message OrderItem {
  string ISBNId = 1 [(venice.check) = "StrLen(3,10)"];
  uint32 Quantity = 2 [(venice.check) = "IntRange(1,30)"];
}

message OrderStatus {
  enum OrderStatus {
    CREATED = 0;
    PROCESSING = 1;
    FILLED = 2;
    SHIPPED = 3;
    COMPLETED = 4;
    DISCOUNTED = 5;
  }
  string Status = 3 [(venice.check) = "StrEnum(OrderStatus.OrderStatus)"];
  repeated OrderSpec Filled = 4;
  string Message = 5;
}

message Coupon {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];
  option (venice.objectPrefix) = {Collection: "Coupon"};
  string DiscountCode = 3;
}

message CustomerPersonalInfo {
  string SSN = 1 [(venice.storageTransformer) = "Secret()", (venice.storageTransformer) = "Secret()", // super secret encrypted twice!
                  (gogoproto.jsontag) = "ssn,omitempty"];
  string MotherMaidenName = 2 [(venice.storageTransformer) = "Secret()", (gogoproto.jsontag) = "mother-maiden-name,omitempty"];
}

message CustomerSpec {
  string Address = 1;
  repeated string CreditCardNumbers = 2 [(venice.storageTransformer) = "Secret()", (venice.check) = "StrLen(3,16)"];
  bytes Password = 3 [(venice.storageTransformer) = "Secret()"];
  CustomerPersonalInfo PasswordRecoveryInfo = 4 [(gogoproto.nullable) = false];
}

message CustomerStatus {
}

message Customer {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = {Collection: "customers"};

  CustomerSpec Spec = 3 [(gogoproto.nullable) = false];
  CustomerStatus Status = 4 [(gogoproto.nullable) = false];
}

message ApplyDiscountReq {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];
  option (venice.objectPrefix) = {Collection: "orders"};
  string Coupon = 3;
}

message OutageRequest {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];
  option (venice.objectPrefix) = {Collection: "Store"};
  string Reason = 3;
}

message RestockRequest {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];
  option (venice.objectPrefix) = {Collection: "Book"};
  string Reason = 3;
}

message RestockResponse {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];
  option (venice.objectPrefix) = {Collection: "Book"};
  repeated string Books = 3;
  int32 Count = 4;
}
service BookstoreV1 {
  // ---- Service level parameters ----//
  // Prefix for all resources served by this service.
  option (venice.apiPrefix) = "bookstore";
  // API Version.
  option (venice.apiVersion) = "v1";
  // The apiCrudService Option generates CRUD + List, Watch APIs for the specified message.
  option (venice.apiGrpcCrudService) = "Order";
  option (venice.apiGrpcCrudService) = "Book";
  option (venice.apiGrpcCrudService) = "Publisher";
  option (venice.apiGrpcCrudService) = "Store";
  option (venice.apiGrpcCrudService) = "Coupon";
  option (venice.apiGrpcCrudService) = "Customer";

  // REST resources exposed by the service. The Option specifies
  //   Object  - The resource
  //   Method  - REST methods allowed on the resource
  //   Pattern - Pattern for the URI
  option (venice.apiRestService) = {
        Object: "Book"
        Method: [ "get", "put" ]
     };

  option (venice.apiRestService) = {
        Object: "Order"
        Method: [ "put", "get", "delete", "post", "list" ]
     };

  option (venice.apiRestService) = {
        Object: "Store"
        Method: [ "put", "get", "post", "delete" ]
     };

  option (venice.apiRestService) = {
        Object: "Customer"
        Method: [ "put", "get", "delete", "post", "list" ]
     };

  // Action on a Object
  option (venice.apiAction) = {
      Object: "Order"
      Action: "applydiscount"
      Request: "ApplyDiscountReq"
      Response: "Order"
     };
  // Multiple actions on the same object
  option (venice.apiAction) = {
      Object: "Order"
      Action: "cleardiscount"
      Request: "ApplyDiscountReq"
      Response: "Order"
     };
  // Action on a Singleton
  option (venice.apiAction) = {
     Object: "Store"
     Action: "AddOutage"
     Request: "OutageRequest"
     Response: "Store"
    };
  // Action on a collection
  option (venice.apiAction) = {
       Collection: "Book"
       Action: "Restock"
       Request: "RestockRequest"
       Response: "RestockResponse"
    };
}
