syntax = "proto3";
// Service name
package bookstore;

// Mandatory imports.
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/pensando/sw/api/meta.proto";

message Publisher {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  // Option to define writing to KV store and the prefix for the object. The option could also be
  // specified with dynamic parameters in {..} (for example tenant, namespace etc.) as needed.
  option (venice.objectPrefix) = "publishers";

  PublisherSpec Spec = 3 [(gogoproto.nullable) = false];
}

message PublisherSpec {
    string Id  = 2;
    string Address = 3;
    string WebAddr = 4 [(venice.check) = "URI()", (venice.check) = "StrLen(6,256)"];
}

message Book {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = "books";

  BookSpec Spec = 3 [(gogoproto.nullable) = false];
  BookStatus Status = 4 [(gogoproto.nullable) = false];
}

message BookSpec {
  enum  BookCategories{
    ChildrensLit = 0;
    YoungAdult = 1;
    Fiction = 2;
    NonFiction = 3;
  }
  string ISBNId = 2;
  string Author = 3;
  // Added in  version 2 of the API.
  string IdProvider = 4;
  string Category = 5 [(venice.check) = "StrEnum(BookSpec.BookCategories)"];
}

message BookStatus {
    int32 Inventory = 1;
}

message Order {
  api.TypeMeta T = 1  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O = 2  [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,inline"];

  option (venice.objectPrefix) = "orders";

  // Spec is not allowed to be Null hence disabling nullable.
  OrderSpec Spec = 3 [(gogoproto.nullable) = false];
  OrderStatus Status = 4 [(gogoproto.nullable) = false];
}

message OrderSpec {
  string Id = 1;
  repeated OrderItem Order = 2;
}

message OrderItem {
  string ISBNId = 1 [(venice.check) = "StrLen(3,10)"];
  uint32 Quantity = 2 [(venice.check) = "IntRange(2,30)"];
}

message OrderStatus {
  enum OrderStatus {
    CREATED = 0;
    PROCESSING = 1;
    FILLED = 2;
    SHIPPED = 3;
    COMPLETED = 4;
  }
  string Status = 3 [(venice.check) = "StrEnum(OrderStatus.OrderStatus)"];
  repeated OrderSpec Filled = 4;
}

service BookstoreV1 {
  // ---- Service level parameters ----//    
  // Prefix for all resources served by this service.
  option (venice.apiPrefix) = "bookstore";
  // API Version.
  option (venice.apiVersion) = "v1";
  // The apiCrudService Option generates CRUD + List, Watch APIs for the specified message.
  option (venice.apiGrpcCrudService) = "Order";
  option (venice.apiGrpcCrudService) = "Book";
  option (venice.apiGrpcCrudService) = "Publisher";

  // REST resources exposed by the service. The Option specifies
  //   Object  - The resource
  //   Method  - REST methods allowed on the resource
  //   Pattern - Pattern for the URI
  option (venice.apiRestService) = {
        Object: "Book"
        Method: [ "get" ]
        Pattern: "/books/{O.Name}"
     };
  option (venice.apiRestService) = {
      Object: "Book"
      Method: [ "put" ]
      Pattern: "/books/{O.Name}"
     };

  option (venice.apiRestService) = {
        Object: "Order"
        Method: [ "put", "get", "delete" ]
        Pattern: "/orders/{O.Name}"
     };
  option (venice.apiRestService) = {
        Object: "Order"
        Method: [ "post", "list" ]
        Pattern: "/orders"
     };
}
