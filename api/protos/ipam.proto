// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";

package network;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";

// DHCPServer specifies details about each server.
message DHCPServer {
    // IP Address of the server.
    string IPAddress = 1 [(gogoproto.jsontag) = "ip-address,omitempty", (venice.check) = "IPAddr()"];
    // Destination VRF where the server is connected. An empty value specifies that the server is reachable in the same vrf as the one where the policy is attached.
    string VirtualRouter = 2 [(gogoproto.jsontag) = "virtual-router,omitempty", (venice.objRelation) = {Type: "NamedRef", To: "network/VirtualRouter"}];
}

message DHCPRelayPolicy {
    repeated DHCPServer Servers = 1 [(gogoproto.jsontag) = "relay-servers,omitempty"];
}

message IPAMPolicySpec {
    enum IPAMType {
        DHCP_Relay = 0 [(venice.enumValueStr) = "dhcp-relay"];
    }

    string Type = 1 [(gogoproto.jsontag) = "type,omitempty", (venice.check) = "StrEnum(IPAMPolicySpec.IPAMType)"];
    DHCPRelayPolicy DHCPRelay = 2  [(gogoproto.jsontag) = "dhcp-relay,omitempty"];
}

message IPAMPolicyStatus {
    // Empty
}

message IPAMPolicy {
    option (venice.objectPrefix) = { Collection: "ipam-policies", Path: "/{O.Tenant}"};
    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration for the IPAM service.
    IPAMPolicySpec Spec       = 3 [(gogoproto.nullable) = false,
                                        (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the IPAM service.
    IPAMPolicyStatus Status   = 4 [(gogoproto.nullable) = false,
                                        (gogoproto.jsontag) = "status,omitempty"];
}