// {C} Copyright 2020 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package fwlog;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";

// Enums for the response
enum FwLogActions {
    // ui-hint: Allow
    allow = 0;
    // ui-hint: Deny
    deny = 1;
    // ui-hint: Reject
    reject = 2;
    // ui-hint: Implicit-deny
    implicit_deny = 3;
    // ui-hint: None
    none = 4;
}

enum FwLogDirections {
    // ui-hint: From Host
    from_host = 0 [(venice.enumValueStr) = "from-host"];
    // ui-hint: From Uplink
    from_uplink = 1  [(venice.enumValueStr) = "from-uplink"];
}

message FwLog {
    api.TypeMeta T      = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Source VRF,
    uint64 SrcVRF       = 3 [(gogoproto.jsontag) = "source-vrf,omitempty"];
    // Destination VRF,
    uint64 DestVRF      = 4 [(gogoproto.jsontag) = "destination-vrf,omitempty"];
    // Source IP,
    string SrcIP        = 5 [(gogoproto.jsontag) = "source-ip,omitempty"];
    // Destination IP
    string DestIP       = 6 [(gogoproto.jsontag) = "destination-ip,omitempty"];
    // Source Port
    uint32 SrcPort      = 7 [(gogoproto.jsontag) = "source-port,omitempty"];
    // Destination Port
    uint32 DestPort     = 8 [(gogoproto.jsontag) = "destination-port,omitempty"];
    // Protocol,
    string Protocol     = 9 [(gogoproto.jsontag) = "protocol,omitempty"];
    // Action
    string Action       = 10 [(gogoproto.jsontag) = "action,omitempty", (venice.check)="StrEnum(FwLogActions)"];
    // Flow Direction
    string Direction    = 11 [(gogoproto.jsontag) = "direction,omitempty", (venice.check)="StrEnum(FwLogDirections)"];
    // Rule ID
    string RuleID       = 12 [(gogoproto.jsontag) = "rule-id,omitempty"];
    // Session ID
    string SessionID    = 13 [(gogoproto.jsontag) = "session-id,omitempty"];
    // Application ID
    string AppID        = 14 [(gogoproto.jsontag) = "app-id,omitempty"];
    //policy name
    string PolicyName   = 15 [(gogoproto.jsontag) = "policy-name,omitempty"];
    // Reporter ID
    string ReporterID   = 16 [(gogoproto.jsontag) = "reporter-id,omitempty"];
    // Flow action
    string FlowAction   = 17 [(gogoproto.jsontag) = "flow-action,omitempty"];
    // icmp type
    uint32 IcmpType     = 18 [(gogoproto.jsontag) = "icmp-type,omitempty"];
    // icmp code
    uint32 IcmpCode     = 19 [(gogoproto.jsontag) = "icmp-code,omitempty"];
    // icmp ID
    uint32 IcmpID       = 20 [(gogoproto.jsontag) = "icmp-id,omitempty"];
    // Appliction Layer Gateway
    string ALG          = 21 [(gogoproto.jsontag) = "alg,omitempty"];
}

// list of fw logs
message FwLogList {
    api.TypeMeta T        = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
    api.ListMeta ListMeta = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = "list-meta,omitempty"];
    repeated FwLog Items  = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "items,omitempty"];
}

enum SortOrder {
    Ascending  = 0;
    Descending = 1;
}

// FwLogQuery allows selecting logs by all attributes
// All fields are ANDed together
message FwLogQuery {
    // OR of sources IPs to be matched. Only one source IP is allowed
    repeated string SourceIPs   = 1 [(gogoproto.jsontag) = "source-ips,omitempty", (venice.check)="IPAddr()"];
    // OR of destination IPs to be matched. Only one destination IP is allowed
    repeated string DestIPs     = 2 [(gogoproto.jsontag) = "destination-ips,omitempty", (venice.check)="IPAddr()"];
    // OR of source ports to be matched. Only one port can be specified and if present, source IP must also be specified
    repeated uint32 SourcePorts = 3 [(gogoproto.jsontag) = "source-ports,omitempty", (venice.check)="IntRange(0, 65535)"];
    // OR of destination ports to be matched. Only one port can be specified and if present, destination IP must also be specified
    repeated uint32 DestPorts   = 4 [(gogoproto.jsontag) = "destination-ports,omitempty", (venice.check)="IntRange(0, 65535)"];
    // OR of protocols to be matched. Only one protocol can be specified and can only be specified if either source IP or destination IP is present
    repeated string Protocols   = 5 [(gogoproto.jsontag) = "protocols,omitempty"];
    // OR of actions to be matched. Only one action can be specified and can only be specified if either source IP or destination IP is present
    repeated string Actions     = 6 [(gogoproto.jsontag) = "actions,omitempty", (venice.check)="StrEnum(FwLogActions)"];
    // OR of reporter names to be matched. Only one reporter ID can be specified
    repeated string ReporterIDs = 7 [(gogoproto.jsontag) = "reporter-ids,omitempty"];
    // StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
    api.Timestamp StartTime     = 8 [(gogoproto.jsontag) = "start-time,omitempty"];
    // EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
    api.Timestamp EndTime       = 9 [(gogoproto.jsontag) = "end-time,omitempty"];
    // SortOrder specifies time ordering of results
    string SortOrder            = 10 [(gogoproto.jsontag) = "sort-order,omitempty", (venice.check) = "StrEnum(SortOrder)", (venice.default) = "descending"];
    // MaxResults is the max-count of search results
    // Default value is 50 and valid range is 0..8192
    int32 MaxResults            = 11 [(venice.default) = "50", (venice.check) = "IntRange(0,8192)", (gogoproto.jsontag) = "max-results,omitempty"];
    // OR of tenants within the scope of which search needs to be performed. If not specified, it will be set to tenant
    // of the logged in user. Also users in non default tenant can search fwlogs in their tenant scope only.
    repeated string Tenants     = 12 [(gogoproto.jsontag) = "tenants,omitempty"];
}
