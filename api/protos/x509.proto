// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package security;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- Certificate  Object -----------------------------
// Represents an x509 certificate uploaded by the user or generated by the system
// to be used by a workload for TLS. Certificates are always scoped within a tenant.

message CertificateSpec {
    // --- Local defs --- //
    enum UsageValues {
      Server = 0;
      Client = 1;
      TrustRoot = 2;
    }

    // Description of the purpose of this certificate
    string Description = 1 [(gogoproto.jsontag) = "description,omitempty"];

    // Usage can be "client", "server" or "trust-root" in any combination.
    // A "server" certificate is used by a server to authenticate itself to the client
    // A "client" certificate is used by a client to authenticate itself to a server
    // A "trust-root" certificate is self-signed and is only used to validate
    // certificates presented by peers.
    // "client" and "server" certificates are always accompanied by a private key,
    // whereas "trust-root"-only certificates are not.
    repeated string Usages = 2 [(gogoproto.jsontag) = "usages,omitempty",
                                (venice.check) = "StrEnum(CertificateSpec.UsageValues)"];

    // Body of the certificate in PEM encoding
    string Body = 3 [(gogoproto.jsontag) = "body,omitempty"];

    // Trust chain of the certificate in PEM encoding.
    // These certificates are treated opaquely. We do not process them in any way
    // other than decoding them for informational purposes.
    string TrustChain = 4 [(gogoproto.jsontag) = "trust-chain,omitempty"];
}

message CertificateStatus {
    // --- Local defs --- //
    enum ValidityValues {
      Unknown = 0;
      Valid = 1;
      Invalid = 2;
      Expired = 3;
    }

    // --- Operational fields  --- //

    // Status of the certificate: "valid", "invalid", "expired"
    // "invalid" means that the signature of the certificate does not match or
    // there are inconsistencies in the trust chain.
    string Validity = 1 [(gogoproto.jsontag) = "validity,omitempty",
                         (venice.check) = "StrEnum(CertificateStatus.ValidityValues)"];

    // The workloads where this certificate has been deployed
    repeated string Workloads = 2 [(gogoproto.jsontag) = "workloads,omitempty"];
}

// Certificate represents a certificate with associated chain of trust
message Certificate {
     option (venice.objectPrefix) = {Collection: "certificates", Path: "/{O.Tenant}"};

     api.TypeMeta T = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

     api.ObjectMeta O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the certificate.
     CertificateSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the certificate.
     CertificateStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
