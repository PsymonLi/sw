// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package cluster;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// --------------------------------- CLUSTER ---------------------------------------------
//
// Cluster represents a full cluster venice and workload nodes
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o NetOps-admin
//              - initial cluster creation
//      Modify:
//          o NetOps-admin
//              - update spec attributes
//          o CMD
//              - update status attributes
//      Delete:
//          o NetOps-admin
//              - TBD
//
message Cluster {

    option (venice.objectPrefix) = {Singleton: "cluster"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the cluster.
    ClusterSpec Spec     = 3 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the cluster.
    ClusterStatus Status = 4 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "status,omitempty"];
}

// ClusterSpec contains the configuration of the cluster.
message ClusterSpec {

    // QuorumNodes contains the list of hostnames for nodes configured to be quorum
    // nodes in the cluster.
    repeated string QuorumNodes = 1 [(gogoproto.jsontag) = "quorum-nodes,omitempty",
                                     (venice.mutable) = false];

    // VirtualIP is the IP address for managing the cluster. It will be hosted by
    // the winner of election between quorum nodes.
    string VirtualIP            = 2 [(gogoproto.jsontag) = "virtual-ip,omitempty",
                                     (venice.mutable) = false];

    // NTPServers contains the list of NTP servers for the cluster.
    repeated string NTPServers  = 3 [(gogoproto.jsontag) = "ntp-servers,omitempty"];

    // AutoAdmitDSCs when enabled auto-admits DSCs that are validated
    // into Venice Cluster. When it is disabled, DSCs validated by CMD are
    // set to Pending state and it requires Manual approval to be admitted
    // into the cluster.
    bool AutoAdmitDSCs          = 4 [(gogoproto.jsontag) = "auto-admit-dscs"];

    // Certs is the pem encoded certificate bundle used for API Gateway TLS
    string Certs                = 5 [(gogoproto.jsontag) = "certs,omitempty"];

    // Key is the pem encoded private key used for API Gateway TLS. We support RSA or ECDSA
    string Key                  = 6 [(venice.storageTransformer) = "Secret()", (gogoproto.jsontag) = "key,omitempty"];
}

// QuorumMemberCondition represents conditions that can affect quorum members
message QuorumMemberCondition {
    enum ConditionType {
        // ui-hint: Healthy
        HEALTHY = 0; // Quorum member is alive and voting on transactions
    }
    // Type indicates a certain node condition
    string Type                        = 1 [(venice.check) = "StrEnum(QuorumMemberCondition.ConditionType)",
                                           (gogoproto.jsontag) = "type,omitempty"];
    // Condition Status
    string Status                      = 2 [(venice.check) = "StrEnum(ConditionStatus)",
                                           (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    api.Timestamp LastTransitionTime   = 3 [(gogoproto.jsontag) = "last-transition-time,omitempty"];
}

// QuorumMemberStatus represents the overall status of a quorum member
message QuorumMemberStatus {
    // A unique identifier for this quorum member
    string ID                                 = 1 [(gogoproto.jsontag) = "id,omitempty"];

    // The name of the quorum member, matching the node name
    string Name                               = 2 [(gogoproto.jsontag) = "name,omitempty"];

    // "Started" if the member succesfully joined the quorum, "Unstarted" otherwise
    string Status                             = 3 [(gogoproto.jsontag) = "status,omitempty"];

    // The last election term this member has participated in
    string Term                               = 4 [(gogoproto.jsontag) = "term,omitempty"];

    // Conditions reported by the quorum member
    repeated QuorumMemberCondition Conditions = 5 [(gogoproto.jsontag) = "conditions,omitempty"];
}

// QuorumStatus contains the current state of the quorum, including registered members and health
message QuorumStatus {
    repeated QuorumMemberStatus Members = 1 [(gogoproto.jsontag) = "members,omitempty"];
}

// ClusterStatus contains the current state of the Cluster.
message ClusterStatus {
    // Leader contains the node name of the cluster leader.
    string Leader                           = 1 [(gogoproto.jsontag) = "leader,omitempty"];

    // LastLeaderTransitionTime is when the leadership changed last time
    api.Timestamp LastLeaderTransitionTime  = 2 [(gogoproto.jsontag) = "last-leader-transition-time,omitempty"];

    // AuthBootstrapped indicates whether the Cluster has Completed BootStrap of Auth
    bool AuthBootstrapped                   = 3 [(gogoproto.jsontag) = "auth-bootstrapped"];

    // List of current cluster conditions
    repeated ClusterCondition Conditions    = 7 [(gogoproto.nullable) = false,
                                                 (gogoproto.jsontag) = "conditions,omitempty"];
    // Quorum represents the current state of the quorum, including registered members and health
    QuorumStatus QuorumStatus               = 4 [(gogoproto.jsontag) = "quorum-status"];
}

// ClusterCondition describes the state of a cluster at a certain point.
message ClusterCondition {

    // These are valid conditions of a Cluster
    enum ConditionType {
        // ui-hint: Healthy
        HEALTHY     = 0; // Cluster is healthy
    }

    // Type indicates a certain DSC condition
    string Type                     = 1 [(venice.check) = "StrEnum(ClusterCondition.ConditionType)",
                                        (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status                   = 2 [(venice.check) = "StrEnum(ConditionStatus)",
                                        (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime       = 3 [(gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason                   = 4 [(gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message                  = 5 [(gogoproto.jsontag) = "message,omitempty"];
}


// Version is public accessible object that holds build information.
message Version {
    option (venice.objectPrefix) = {Singleton: "version"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];
    // Spec contains the configuration of the cluster.
    VersionSpec Spec     = 3 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "spec,omitempty"];
    // Status contains the current state of the Version.
    VersionStatus Status = 4 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "status,omitempty"];
}

// VersionSpec contains the configuration of the Version.
message VersionSpec {

}

// VersionStatus contains the current state of the Version.
message VersionStatus {
    // Human friendly build version
    string BuildVersion                     = 1 [(gogoproto.jsontag) = "build-version,omitempty"];
    // Representation of ommit in version control system - e.g: hash in git
    string VCSCommit                        = 2 [(gogoproto.jsontag) = "vcs-commit,omitempty"];
    // Date and Time at which the source code was built
    string BuildDate                        = 3 [(gogoproto.jsontag) = "build-date,omitempty"];
    // RolloutBuildVersion shows in progress rollout version
    string RolloutBuildVersion             = 4 [(gogoproto.jsontag) = "rollout-build-version"];
}

// ClusterAuthBootstrapRequest is to set auth bootstrap flag in cluster
message ClusterAuthBootstrapRequest {
    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];
    option (venice.objectPrefix) = {Singleton: "cluster"};
}

// UpdateTLSConfigRequest is to update certs and key for API Gateway TLS
message UpdateTLSConfigRequest {
    option (venice.objectPrefix) = {Singleton: "cluster"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Certs is the pem encoded certificate bundle used for API Gateway TLS
    string Certs        = 3 [(gogoproto.jsontag) = "certs,omitempty"];

    // Key is the pem encoded private key used for API Gateway TLS. We support RSA or ECDSA
    string Key          = 4 [(gogoproto.jsontag) = "key,omitempty"];
}

//---------------------------------- NODE -------------------------------------------
//
// Node is representation of a single Venice node in the system.
//
message Node {

    option (venice.objectPrefix) = {Collection: "nodes"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the node.
    NodeSpec Spec       = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the node.
    NodeStatus Status   = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// NodeSpec contains the configuration of the node.
message NodeSpec {
    // RoutingConfig the routing configuration
    string RoutingConfig            = 1 [(gogoproto.jsontag) = "routing-config,omitempty"];
}

// NodeStatus contains the current state of the node.
message NodeStatus {

    // Various phases in lifecycle of a Node
    enum NodePhase {
        // ui-hint: Unknown
        UNKNOWN    = 0; // Unknown status
        // ui-hint: Pending
        PENDING    = 1; // Node is waiting to join the venice cluster
        // ui-hint: Joined
        JOINED     = 2; // Node is part of the venice cluster
        // ui-hint: Failed
        FAILED     = 3; // Node failed to join the venice cluster
    }

    // Current lifecycle phase of the node.
    string Phase                        = 1 [(venice.check) = "StrEnum(NodeStatus.NodePhase)",
                                            (gogoproto.jsontag) = "phase,omitempty"];


    // Quorum node or not.
    bool Quorum                         = 2 [(gogoproto.jsontag) = "quorum,omitempty"];

    // List of current node conditions
    repeated NodeCondition Conditions   = 3 [(gogoproto.nullable) = false,
                                            (gogoproto.jsontag) = "conditions,omitempty"];
}

// NodeCondition describes the state of a Node at a certain point.
message NodeCondition {

    // These are valid conditions of a Node
    enum ConditionType {
        // ui-hint: Leader
        LEADER      = 0; // Node is the elected leader in Venice cluster
        // ui-hint: Healthy
        HEALTHY     = 1; // Node is alive and sending heartbeats
    }

    // Type indicates a certain node condition
    string Type                 = 1 [(venice.check) = "StrEnum(NodeCondition.ConditionType)",
                                    (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status               = 2 [(venice.check) = "StrEnum(ConditionStatus)",
                                    (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime   = 3 [(gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason               = 4 [(gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message              = 5 [(gogoproto.jsontag) = "message,omitempty"];
}

// These are valid condition statuses.
enum ConditionStatus {
    // ui-hint: Unknown
    UNKNOWN   = 0; // Condition is unknown
    // ui-hint: True
    TRUE      = 1; // Condition is met
    // ui-hint: False
    FALSE     = 2; // Condition is not met
}

// Venice Node system information
message NodeInfo {

    // OS details
    OsInfo OsInfo           = 1 [(gogoproto.jsontag) = "os-info,omitempty"];

    // Docker (container runtime) details
    DockerInfo DockerInfo   = 2 [(gogoproto.jsontag) = "docker-info,omitempty"];

    // CPU details
    CPUInfo CpuInfo         = 3 [(gogoproto.jsontag) = "cpu-info,omitempty"];

    // RAM/Memory details
    MemInfo MemoryInfo      = 4 [(gogoproto.jsontag) = "memory-info,omitempty"];

    // Storage details
    StorageInfo StorageInfo = 5 [(gogoproto.jsontag) = "storage-info,omitempty"];

    // Network details
    NetworkInfo NetworkInfo = 6 [(gogoproto.jsontag) = "network-info,omitempty"];
}

// OS information
message OsInfo {

    // OS Name
    // Eg: GNU/Linux
    string Name             = 1 [(gogoproto.jsontag) = "type,omitempty"];

    // Kernel release
    // Eg: 3.10.0-514.10.2.el7.x86_64
    string KernelRelease    = 2 [(gogoproto.jsontag) = "kernel-release,omitempty"];

    // Kernel version
    // Eg: #1 SMP Fri Mar 3 00:04:05 UTC 2017
    string Version          = 3 [(gogoproto.jsontag) = "kernel-version,omitempty"];

    // Processor Info
    // Eg: x86_64
    string Processor        = 4 [(gogoproto.jsontag) = "processor,omitempty"];

    // TODO: Add more details such as "Uptime", "Last-reload-reason"
}

// Docker information
message DockerInfo {

    // Docker version
    string DockerVersion    = 1 [(gogoproto.jsontag) = "docker-version,omitempty"];
}

// CPU information
message CPUInfo {

    // CPU speed per core, eg: 2099998101
    string Speed        = 1 [(gogoproto.jsontag) = "speed,omitempty"];

    // Number of CPU sockets, eg: 2, 4
    int32 NumSockets    = 2 [(gogoproto.jsontag) = "num-sockets,omitempty"];

    // Number of physical CPU cores per socket, eg: 36
    int32 NumCores      = 3 [(gogoproto.jsontag) = "num-cores,omitempty"];

    // Number of threads per core, eg: 2
    int32 NumThreads    = 4 [(gogoproto.jsontag) = "num-threads,omitempty"];
}

// Memory/RAM information
message MemInfo {

    // Type of Memory
    enum MemType {
        UNKNOWN = 0; // Unknown type
        HBM     = 1; // High Bandwidth Memory (used in Naples-1)
        DDR     = 2; // DDR SDRAM (used in Naples-2)
    }
    
    // Type
    string Type     = 1 [(venice.check) = "StrEnum(MemInfo.MemType)",
                        (gogoproto.jsontag) = "type,omitempty"];

    // Memory size in bytes, eg: 274760318976
    string Size     = 2 [(gogoproto.jsontag) = "size,omitempty"];
}

// Storage information
message StorageInfo {

    // List of storage devices
    repeated StorageDeviceInfo Devices = 1 [(gogoproto.nullable) = false,
                                            (gogoproto.jsontag) = "devices,omitempty"];
}

// Storage device information
message StorageDeviceInfo {
    // Serial Number
    string SerialNumber = 1 [(gogoproto.jsontag) = "serial-num,omitempty"];

    // Storage Type (TBD for Naples)
    // Eg: SATA, SCSI, NVMe  or HDD, SSD, NVMe
    string Type         = 2 [(gogoproto.jsontag) = "type,omitempty"];

    // Vendor info
    string Vendor       = 3 [(gogoproto.jsontag) = "vendor,omitempty"];

    // Capacity in bytes
    string Capacity     = 4 [(gogoproto.jsontag) = "capacity,omitempty"];

    // Used life in percentage
    int32 TypeAPercentLifeUsed     = 5 [(gogoproto.jsontag) = "percent-life-used-A,omitempty"];
    int32 TypeBPercentLifeUsed     = 6 [(gogoproto.jsontag) = "percent-life-used-B,omitempty"];
}

// Network information
message NetworkInfo {

    // List of interfaces or ports
    repeated InterfaceInfo Interfaces = 1 [(gogoproto.nullable) = false,
                                          (gogoproto.jsontag) = "interfaces,omitempty"];
}

// Interface information
message InterfaceInfo {

    // Name, eg: vmnic0, eth0
    string Name             = 1 [(gogoproto.jsontag) = "name,omitempty"];

    // Type
    string Type             = 2 [(gogoproto.jsontag) = "type,omitempty"];

    // Vendor info
    string Vendor           = 3 [(gogoproto.jsontag) = "vendor,omitempty"];

    // Link Speed in Bits per second
    string LinkSpeed        = 4 [(gogoproto.jsontag) = "link-speed,omitempty"];

    // MAC address
    string MacAddr          = 5 [(gogoproto.jsontag) = "mac-addr,omitempty", (venice.check) = "EmptyOr(MacAddr())"];

    // List of Ip addresses
    repeated string IpAddrs = 6 [(gogoproto.jsontag) = "ip-addrs,omitempty"];
}

//---------------------------------- HOST ------------------------------------
//
// Host represents a Baremetal or Hypervisor server.
//
message Host {

    option (venice.objectPrefix) = {Collection: "hosts"};

    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the host.
    HostSpec Spec       = 3 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the host.
    HostStatus Status   = 4 [(gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "status,omitempty"];
}

// HostSpec contains the configuration of the Host.
message HostSpec {

    // DSCs contains the information about all DistributedServiceCards on a host
    repeated DistributedServiceCardID DSCs    = 1 [(gogoproto.nullable) = false,
                                         (gogoproto.jsontag) = "dscs,omitempty"];
}

// DistributedServiceCardID contains the identifying information of a DistributedServiceCard
message DistributedServiceCardID {

    // Name contains the name of the DistributedServiceCard on a host
    string ID = 1 [(gogoproto.jsontag) = "id,omitempty"];

    // MACAddress contains the primary MAC address of a DistributedServiceCard
    string MACAddress = 2 [(gogoproto.jsontag) = "mac-address,omitempty",
                            (venice.check) = "EmptyOr(MacAddr())"];
}

// HostStatus contains the current state of the Host.
message HostStatus {

    // AdmittedDSCs contains a list of admitted DistributedServiceCards that are on this host
    repeated string AdmittedDSCs         = 1 [(gogoproto.jsontag) = "admitted-dscs,omitempty"];
}
