// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";

// Authentication and Authorization related APIs.
package auth;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";
import "auth.proto";

// list of V1 event types supported by the auth service
enum EventTypesV1 {
    LoginFailed = 0; // User login failed
}

// Auth REST API
service AuthV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "auth";
    // API Version.
    option (venice.apiVersion) = "v1";
    option (venice.apiGrpcCrudService) = "User";
    option (venice.apiGrpcCrudService) = "AuthenticationPolicy";
    option (venice.apiGrpcCrudService) = "Role";
    option (venice.apiGrpcCrudService) = "RoleBinding";

    option (venice.apiRestService) = {
        Object: "User"
        Method: [ "get", "put", "delete", "post", "list", "watch" ]
    };
    // Action to change user password
    option (venice.apiAction) = {
        Object: "User"
        Action: "PasswordChange"
        Request: "PasswordChangeRequest"
        Response: "User"
    };
    // Action to reset user password
    option (venice.apiAction) = {
        Object: "User"
        Action: "PasswordReset"
        Request: "PasswordResetRequest"
        Response: "User"
    };
    // Action to check user authorization
    option (venice.apiAction) = {
        Object: "User"
        Action: "IsAuthorized"
        Request: "SubjectAccessReviewRequest"
        Response: "User"
    };
    option (venice.apiRestService) = {
        Object: "AuthenticationPolicy"
        Method: [ "get", "put", "post", "watch" ]
    };
    // Action to test ldap connection with the passed in AuthenticationPolicy object. It doesn't test ldap config in AuthenticationPolicy
    // already saved in API server. If user wants to test saved config, then user will have to fetch it first and use it with this action.
    option (venice.apiAction) = {
        Object: "AuthenticationPolicy"
        Action: "LdapConnectionCheck"
        Request: "AuthenticationPolicy"
        Response: "AuthenticationPolicy"
    };
    // Action to test ldap bind with the passed in AuthenticationPolicy object. It doesn't test ldap config  in AuthenticationPolicy
    // already saved in API server. If user wants to test saved config, then user will have to fetch it first and use it with this action.
    option (venice.apiAction) = {
        Object: "AuthenticationPolicy"
        Action: "LdapBindCheck"
        Request: "AuthenticationPolicy"
        Response: "AuthenticationPolicy"
    };
    option (venice.apiRestService) = {
        Object: "Role"
        Method: [ "get", "put", "delete", "post", "list", "watch" ]
    };
    option (venice.apiRestService) = {
        Object: "RoleBinding"
        Method: [ "get", "put", "delete", "post", "list", "watch" ]
    };

    // name of enums containing event types.
    // e.g: V2 can include "EventTypesV1" and "EventTypesV2" in this list.
    option(venice.eventTypes) = "EventTypesV1";
}
