// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
package monitoring;

// Mandatory imports.
import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

enum ExportAuthType {
    // ui-hint: None
    AUTHTYPE_NONE = 0;
    // ui-hint: Username/Password
    AUTHTYPE_USERNAMEPASSWORD = 1;
    // ui-hint: Token
    AUTHTYPE_TOKEN = 2;
    // ui-hint: Certs
    AUTHTYPE_CERTS = 3;
}

// ----------------------------- Export Config -----------------------------
// Export Config specifies server address and user credentials
message ExportConfig {
    // IP address or URL of the collector/entity to which the data is to be exported
    string Destination = 1 [(gogoproto.jsontag) = "destination,omitempty", (venice.check)="StrLen(1,2048)"];

    // protocol and Port number where an external collector is gathering the data
    // example "TCP/2055"
    string Transport = 2 [(gogoproto.jsontag) = "transport,omitempty", (venice.check)="EmptyOr(ProtoPort())"];

    // Credentials provide secure access to the collector
    ExternalCred Credentials = 3 [(gogoproto.jsontag) = "credentials,omitempty"];
}

// ------------------------ ExternalCred Object ----------------------------
// ExternalCred defines credentials required to access an external entity, such as
// a stats collector, compute orchestration entity, or a syslog server.
// External entity may support a variety of methods, like username/password,
// TLS Client authentication, or Bearer Token based authentication. User is
// expected to configure one of the methods
message ExternalCred {
    // AuthType is the authentication type used in this config
    string AuthType = 1 [(gogoproto.jsontag) = "auth-type", (venice.check) = "StrEnum(ExportAuthType)"];

    // UserName is the login id to be used towards the external entity
    string UserName = 2 [(gogoproto.jsontag) = "username,omitempty"];

    // Password is one time specified, not visibile on read operations
    // Only valid when UserName is defined
    // TBD: need to add (venice.secret) = "true" support for this
    string Password = 3 [(gogoproto.jsontag) = "password,omitempty"];

    // External entity supports bearer tokens for authentication and authorization
    // Token refresh is not supported using OAuth2
    // TBD: need to add (venice.secret) = "true" support for this
    string BearerToken = 4 [(gogoproto.jsontag) = "bearer-token,omitempty"];

    // CertData holds PEM-encoded bytes (typically read from a client certificate file).
    bytes CertData = 5 [(gogoproto.jsontag) = "cert-data,omitempty"];

    // KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
    // TBD: need to add (venice.secret) = "true" support for this
    bytes KeyData = 6 [(gogoproto.jsontag) = "key-data,omitempty"];

    // CaData holds PEM-encoded bytes (typically read from a root certificates bundle).
    bytes CaData = 7 [(gogoproto.jsontag) = "ca-data,omitempty"];
}

enum SyslogFacility {
    // kernel messages
    // ui-hint: Kernel
    LOG_KERN = 0;

    // user-level messages
    // ui-hint: User
    LOG_USER = 8;

    // mail system
    // ui-hint: Mail
    LOG_MAIL = 16;

    // system daemons
    // ui-hint: Daemon
    LOG_DAEMON = 24;

    // security/authorization messages
    // ui-hint: Auth
    LOG_AUTH = 32;

    // messages generated internally by syslogd
    // ui-hint: Syslog
    LOG_SYSLOG = 40;

    // line printer subsystem
    // ui-hint: LPR
    LOG_LPR	= 48;

    // network news subsystem
    // ui-hint: News
    LOG_NEWS = 56;

    // UUCP subsystem
    // ui-hint: UUCP
    LOG_UUCP = 64;

    // clock daemon
    // ui-hint: CRON
    LOG_CRON = 72;

    // security/authorization messages (private)
    // ui-hint: Private Auth
    LOG_AUTHPRIV = 80;

    // ui-hint: FTP
    LOG_FTP = 88;

    /* other codes through 15 reserved for system use */
    // reserved for local use
    // ui-hint: local 0
    LOG_LOCAL0 = 128;

    // reserved for local use
    // ui-hint: local 1
    LOG_LOCAL1 = 136;

    // reserved for local use
    // ui-hint: local 2
    LOG_LOCAL2 = 144;

    // reserved for local use
    // ui-hint: local 3
    LOG_LOCAL3 = 152;

    // reserved for local use
    // ui-hint: local 4
    LOG_LOCAL4 = 160;

    // reserved for local use
    // ui-hint: local 5
    LOG_LOCAL5 = 168;

    // reserved for local use
    // ui-hint: local 6
    LOG_LOCAL6 = 176;

    // reserved for local use
    // ui-hint: local 7
    LOG_LOCAL7 = 184;
}

// syslog export configurations
message  SyslogExportConfig {
    // override default facility with this in exported logs
    string FacilityOverride = 1 [(gogoproto.jsontag) = "facility-override,omitempty", (venice.check) = "StrEnum(SyslogFacility)", (venice.default)="LOG_USER"];
    // add prefix in exported logs
    string Prefix = 2 [(gogoproto.jsontag) = "prefix,omitempty"];
}

// --------------------------------------- SNMP server config --------------------------------------

// AuthConfig contains the configuration for SNMP Trap authentication.
message AuthConfig {
  // Algos contains the authentication algorithm to be used when SecurityMethod
  // has AUTH.
  enum Algos {
    MD5    = 0;
    SHA1   = 1;
  }
  string Algo     = 1 [(gogoproto.nullable) = true,
                       (venice.check) = "StrEnum(AuthConfig.Algos)",
                       (gogoproto.jsontag) = "algo, omitempty"];

  // Password contains the authentication password.
  string Password = 2 [(gogoproto.nullable) = true,
                       (gogoproto.jsontag) = "password, omitempty"];
}

// PrivacyConfig contains the configuration for SNMP Trap encryption.
message PrivacyConfig {
  // Algos contains the encryption algorithm to be used when SecurityMethod
  // has PRIVACY.
  enum Algos {
    DES56  = 0;
    AES128 = 1;
  }
  string Algo     = 1 [(gogoproto.nullable) = true,
                       (venice.check) = "StrEnum(PrivacyConfig.Algos)",
                       (gogoproto.jsontag) = "algo, omitempty"];

  // Password contains the privacy password.
  string Password = 2 [(gogoproto.nullable) = true,
                       (gogoproto.jsontag) = "password, omitempty"];
}

// SNMPTrapServer contains the configuration for sending SNMP traps to a receiver.
message SNMPTrapServer {
  // Host where the trap needs to be sent.
  string Host                 = 1 [(gogoproto.jsontag) = "host, omitempty"];

  // Port on the Host where the trap needs to be sent, default is 162.
  string Port                 = 2 [(venice.default) = "162",
                                   (gogoproto.nullable) = true,
                                   (gogoproto.jsontag) = "port, omitempty"];

  // Version of SNMP to use to send the traps (v1 is not supported).
  enum SNMPVersions {
    V2C = 0;
    V3  = 1;
  }
  string Version              = 3 [(gogoproto.nullable) = true,
                                   (venice.check) = "StrEnum(SNMPTrapServer.SNMPVersions)",
                                   (gogoproto.jsontag) = "version, omitempty"];

  // CommunityOrUser contains community string for v2c, user for v3.
  string CommunityOrUser      = 4 [(gogoproto.nullable) = true,
                                   (gogoproto.jsontag) = "community-or-user, omitempty"];

  // AuthConfig contains the configuration for authentication, valid only for v3.
  AuthConfig AuthConfig       = 5 [(gogoproto.nullable) = true,
                                   (gogoproto.jsontag) = "auth-config, omitempty"];

  // PrivacyConfig contains the configuration for encryption, valid only for v3.
  PrivacyConfig PrivacyConfig = 6 [(gogoproto.nullable) = true,
                                   (gogoproto.jsontag) = "privacy-config, omitempty"];
}
