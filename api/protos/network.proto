// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package network;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

// ----------------------------- Tenant Object -----------------------------

// spec part of tenant object
message TenantSpec {
    // Tenant admin user
    string AdminUser = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "admin-user,omitempty"];
}

// status part of tenant object
message TenantStatus {

}

// Tenant represents an org or a tenant
message Tenant {
     option (venice.objectPrefix) = {Collection: "tenants"};
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the tenant.
     TenantSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the tenant.
     TenantStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// Tenant REST API
service TenantV1 {
     // Prefix for all resources served by this service.
     option (venice.apiPrefix) = "tenants";
     // API Version.
     option (venice.apiVersion) = "v1";
     option (venice.apiGrpcCrudService) = "Tenant";
     option (venice.apiRestService) = {
         Object: "Tenant"
         Method: [ "get", "put", "delete", "post", "list" ]
     };
}

// ----------------------------- Network Object -----------------------------

// spec part of network object
message NetworkSpec {
    // type of network. (vlan/vxlan/routed etc)
    string Type    = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "type,omitempty"];
    // IPv4 subnet CIDR
    string IPv4Subnet  = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-subnet,omitempty"];
    // IPv4 gateway for this subnet
    string IPv4Gateway = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-gateway,omitempty"];
    // IPv6 subnet CIDR
    string IPv6Subnet  = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-subnet,omitempty"];
    // IPv6 gateway
    string IPv6Gateway = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-gateway,omitempty"];
    // Vlan ID for the network
    uint32 VlanID      = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "vlan-id,omitempty"];
    // Vxlan VNI for the network
    uint32 VxlanVNI    = 7 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "vxlan-vni,omitempty"];
}

// status part of network object
message NetworkStatus {
    // list of all workloads in this network
    repeated string Workloads = 1 [(gogoproto.jsontag) = "workloads,omitempty"];
    // allocated IPv4 addresses (bitmap)
    bytes AllocatedIPv4Addrs = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "allocated-ipv4-addrs,omitempty", (gogoproto.moretags)="venice:\"sskip\""];
}

// Network represents a subnet
message Network {
     option (venice.objectPrefix) = {Collection: "networks", Path: "/{O.Tenant}"};
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the network.
     NetworkSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the network.
     NetworkStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// Network REST API
service NetworkV1 {
     // Prefix for all resources served by this service.
     option (venice.apiPrefix) = "networks";
     // API Version.
     option (venice.apiVersion) = "v1";

     option (venice.apiGrpcCrudService) = "Network";
     option (venice.apiRestService) = {
         Object: "Network"
         Method: [ "get", "put", "delete", "post", "list" ]
     };
 }

 // ----------------------------- SecurityGroup Object -----------------------------

// security group configuration
message SecurityGroupSpec {
    // FIXME: need to change or remove ServiceSelector
    // map<string, string> ServiceSelector  = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "service-labels,omitempty"];

    // Workload selector (list of labels)
    labels.Selector WorkloadSelector = 1 [(gogoproto.jsontag) = "workload-selector,omitempty"];
    // Service object selector
    repeated string ServiceSelector  = 2 [(gogoproto.jsontag) = "service-labels,omitempty"];
    // list of CIDRs that are part of this security group
    repeated string MatchPrefixes    = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "match-prefixes,omitempty"];
}

// security group status
message SecurityGroupStatus {
    // list of workloads that are part of this security group
    repeated string Workloads = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workloads,omitempty"];
    // list of all policies attached to this security group
    repeated string Policies = 2;
}

// SecurityGroup represents a security zone or domain
message SecurityGroup {
  option (venice.objectPrefix) = {Collection: "security-groups", Path: "/{O.Tenant}"};
  api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
  api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

  // Spec contains the configuration of the security group.
  SecurityGroupSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the security group.
  SecurityGroupStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// SecurityGroup REST API
service SecurityGroupV1 {
  // Prefix for all resources served by this service.
  option (venice.apiPrefix) = "security-groups";
  // API Version.
  option (venice.apiVersion) = "v1";

  option (venice.apiGrpcCrudService) = "SecurityGroup";
  option (venice.apiRestService) = {
    Object: "SecurityGroup"
    Method: [ "get", "put", "delete", "post", "list" ]
  };
}

// ----------------------------- SgPolicy Object -----------------------------

message SGRule {
    // match ports for the rule
    string Ports     = 1 [(gogoproto.jsontag) = "ports,omitempty"];
    // Rule action (allow/deny/log/train)
    string Action    = 2 [(gogoproto.jsontag) = "action,omitempty"];
    // Peer group for the rule (from/to group depending on direction)
    string PeerGroup = 3 [(gogoproto.jsontag) = "peer-group,omitempty"];
    // List of Apps to match for the rule
    repeated string Apps = 4 [(gogoproto.jsontag) = "apps,omitempty"];
    // AppUser or AppUserGroup to match for the rule
    // AppUser is derived from application payload such as database login or
    // other application authentication mechanisms
    // FIXME: oneof does not translate well in golang - will enforce via validation
    // Used when policy is applied on a single user
    string AppUser = 5 [(gogoproto.jsontag) = "app-user,omitempty"];
    // Used when policy is applied on a group of users
    string AppUserGrp = 6 [(gogoproto.jsontag) = "app-user-group,omitempty"];
}

message SgpolicySpec {
    // list of security groups this policy is attached to
    repeated string AttachGroups = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-groups,omitempty"];
    // Incoming rules
    repeated SGRule InRules      = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "in-rules,omitempty"];
    // Outgoing rules
    repeated SGRule OutRules     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "out-rules,omitempty"];
}

message SgpolicyStatus {
    // list of workloads in this group
    repeated string Workloads = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workloads,omitempty"];
}


// Sgpolicy represents a security policy for security groups
message Sgpolicy {
    option (venice.objectPrefix) = {Collection: "sgpolicy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the sgpolicy.
    SgpolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the sgpolicy.
    SgpolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// Sgpolicy REST API
service SgpolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "sgpolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "Sgpolicy";
    option (venice.apiRestService) = {
        Object: "Sgpolicy"
        Method: [ "get", "put", "delete", "post", "list" ]
    };
}


// ----------------------------- Service Object -----------------------------

// The Service TLS configuration for inbound connections.
// It is used on all ports specified in the Service spec.
// Multiple Service objects can select the same workload and provide different
// server TLS configurations for disjoint sets of ports.
message TLSServerPolicySpec {
    enum ClientAuthTypes {
      Mandatory = 0;
      Optional = 1;
      None = 2;
    }

    // List of names of certificates to present to clients.
    // The certificates "usage" field must contain "server".
    // If multiple certificates names are provided, system tries to choose the
    // correct one using SNI, otherwise it picks the first one in the list.
    repeated string Certificates = 1 [(gogoproto.jsontag) = "tls-server-certificates,omitempty"];

    // Client authentication
    // "None" means that server does not request and will not validate a client certificate.
    // "Mandatory" means that server requests and validates client certificate.
    // "Optional" means that server requests client certificate but proceeds even
    // if client does not present it.
    // Default is "Mandatory".
    string ClientAuthentication = 2 [(venice.check) = "StrEnum(TLSServerPolicySpec.ClientAuthTypes)",
                                     (gogoproto.jsontag) = "client-authentication,omitempty"];

    // The list of root certificates used to validate a trust chain presented by client.
    // If the list is empty, all roots certificates in the tenant scope are considered.
    repeated string TrustRoots = 3 [(gogoproto.jsontag) = "tls-server-trust-roots,omitempty"];

    // Valid DNS names or IP addresses that must appear in the client certificate
    // SubjAltName or Common Name (if SAN is not specified).
    // If client auth is enabled and AllowedPeerId is not specified, server accepts any
    // client certificate as long as it is valid  (not expired and with a valid trust chain).
    repeated string AllowedPeerId = 4 [(gogoproto.jsontag) = "tls-server-allowed-peer-id,omitempty"];
}

// Service TLS configuration for connections initiated by the workload towards
// destinations inside or outside the cluster.
message TLSClientPolicySpec {
    // A map containing the certificate to use for a set of destinations.
    // The key is a selector for workloads that exist either inside or
    // outside the cluster. It can be based on labels, hostnames or "IP:port" pairs.
    // The value is the name of the certificate to use for the selected destinations.
    // The certificates "usage" field must contain "client".
    // TODO: replace the first "string" type with proper selector type when available.
    // A single "default" certificate which matches all destinations is allowed.
    // If a destination matches multiple non-default map keys, an error is returned.
    // If a destination does not match any map key (and there is no default),
    // the outbound connection is initiated without TLS.
    map<string, string> CertificatesSelector = 1 [(gogoproto.jsontag) = "tls-client-certificates-selector,omitempty"];

    // The list of root certificates used to validate a trust chain presented by a server.
    // If the list is empty, all roots certificates in the tenant scope are considered.
    repeated string TrustRoots = 2 [(gogoproto.jsontag) = "tls-client-trust-roots,omitempty"];

    // Valid DNS names or IP addresses that must appear in the server certificate
    // SubjAltName or Common Name (if SAN is not specified). If not specified,
    // client validates the IP address of the server.
    repeated string AllowedPeerId = 3 [(gogoproto.jsontag) = "tls-client-allowed-peer-id,omitempty"];
}

// spec part of service object
message ServiceSpec {
    // FIXME: maps are not working. change this after its fixed
    // map<string, string> WorkloadSelector  = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-labels,omitempty"];
    // workload selector for the service (list of labels to match)
    repeated string WorkloadSelector     = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-labels,omitempty"];
    // Virtual IP of the load balancer
    string VirtualIp                     = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "virtual-ip,omitempty"];
    // load balancer port
    string Ports                         = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ports,omitempty"];
    // load balancing policy (reference to LbPolicy object)
    string LBPolicy                      = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "lb-policy,omitempty"];
    // TLS configuration for inbound connections
    TLSServerPolicySpec TLSServerPolicy  = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tls-server-policy,omitempty"];
    // TLS configuration for outbound connections
    TLSClientPolicySpec TLSClientPolicy  = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tls-client-policy,omitempty"];
}

// status part of service object
message ServiceStatus {
    // list of workloads that are backends of this service
    repeated string Workloads = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workloads,omitempty"];
}

// Service represents a group of identical endpoints, such as servers in an app tier
message Service {
    option (venice.objectPrefix) =  {Collection: "services", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the Service.
    ServiceSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the Service.
    ServiceStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// Service REST API
service ServiceV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "services";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "Service";
    option (venice.apiRestService) = {
        Object: "Service"
        Method: [ "get", "put", "delete", "post", "list" ]
    };
}

// ----------------------------- LbPolicy Object -----------------------------

message HealthCheckSpec {
    // Health check interval
    uint32    Interval            = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "interval,omitempty"];
    // # of probes per interval
    uint32    ProbesPerInterval   = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "probes-per-interval,omitempty"];
    // probe URL
    string    ProbePortOrUrl      = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "probe-port-or-url,omitempty"];
    // timeout for declaring backend down
    uint32    MaxTimeouts         = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "max-timeouts,omitempty"];
    // # of successful probes before we declare the backend back up
    uint32    DeclareHealthyCount = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "declare-healthy-count,omitempty"];
}

message LbPolicySpec {
    // load balancing type
    string Type                      = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "type,omitempty"];
    // load balancing algorithm
    string Algorithm                 = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "algorithm,omitempty"];
    // session affinity
    string SessionAffinity           = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "session-affinity,omitempty"];
    // health check policy
    HealthCheckSpec HealthCheck      = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "health-check,omitempty"];
}

message LbPolicyStatus {
    // list of service objects referring this lb-policy
    repeated string Services = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "type,omitempty"];
}

// LbPolicy represents a load balancer policy
message LbPolicy {
    option (venice.objectPrefix) = {Collection: "lb-policy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the LbPolicy.
    LbPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the LbPolicy.
    LbPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// LbPolicy REST API
service LbPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "lb-policy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "LbPolicy";
    option (venice.apiRestService) = {
        Object: "LbPolicy"
        Method: [ "get", "put", "delete", "post", "list" ]
    };
}

// ----------------------------- Endpoint Object -----------------------------

// spec part of Endpoint object
message EndpointSpec {
    // empty
}

// status part of Endpoint object
message EndpointStatus {
    // endpoint UUID
    string EndpointUUID   = 1  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "endpoint-uuid,omitempty"];
    // VM or container UUID
    string WorkloadUUID   = 2  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-uuid,omitempty"];
    // VM or container name
    string WorkloadName   = 3  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-name,omitempty"];
    // network this endpoint belogs to
    string Network        = 4  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "network,omitempty"];
    // host address of the host where this endpoint exists
    string HomingHostAddr = 5  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "homing-host-addr,omitempty"];
    // host name of the host where this endpoint exists
    string HomingHostName = 6  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "homing-host-name,omitempty"];
    // IPv4 address of the endpoint
    string IPv4Address    = 7  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-address,omitempty"];
    // IPv4 gateway for the endpoint
    string IPv4Gateway    = 8  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-gateway,omitempty"];
    // IPv6 address for the endpoint
    string IPv6Address    = 9  [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-address,omitempty"];
    // IPv6 gateway
    string IPv6Gateway    = 10 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-gateway,omitempty"];
    // Mac address of the endpoint
    string MacAddress     = 11 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "mac-address,omitempty"];
    // homing host's UUID
    string NodeUUID       = 12 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "node-uuid,omitempty"];
    // endpoint FSM state
    string EndpointState  = 13;
    // security groups
    repeated string SecurityGroups = 14;
    // micro-segment VLAN
    uint32 MicroSegmentVlan = 15 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "micro-segment-vlan,omitempty"];
    // VM or container attribute/labels
    map<string, string> WorkloadAttributes  = 16 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-attributes,omitempty"];
}

// Endpoint represents a network endpoint
message Endpoint {
    option (venice.objectPrefix) = { Collection: "endpoints", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the Endpoint.
    EndpointSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the Endpoint.
    EndpointStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// endpoint REST API
service EndpointV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "endpoints";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "Endpoint";
    option (venice.apiRestService) = {
        Object: "Endpoint"
        Method: [ "get", "put", "delete", "post", "list" ]
    };
}
