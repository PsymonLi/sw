// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package network;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

import "github.com/pensando/sw/api/protos/orchestration.proto";
import "tenant.proto";
import "route.proto";
import "smartnic.proto";


// ----------------------------- Network Object -----------------------------

enum NetworkType {
    Bridged    = 0;
    Routed     = 1;
}

// spec part of network object
message NetworkSpec {
    // type of network. (vlan/vxlan/routed etc)
    string Type    = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "type,omitempty", (venice.check) = "StrEnum(NetworkType)"];
    // IPv4 subnet CIDR
    string IPv4Subnet  = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-subnet,omitempty"];
    // IPv4 gateway for this subnet
    string IPv4Gateway = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv4-gateway,omitempty"];
    // IPv6 subnet CIDR
    string IPv6Subnet  = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-subnet,omitempty"];
    // IPv6 gateway
    string IPv6Gateway = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ipv6-gateway,omitempty"];
    // Vlan ID for the network
    uint32 VlanID      = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "vlan-id,omitempty"];
    // Vxlan VNI for the network
    uint32 VxlanVNI    = 7 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "vxlan-vni,omitempty"];
    // VirtualRouter specifies the VRF this network belongs to
    string VirtualRouter = 8 [(gogoproto.jsontag) = "virtual-router,omitempty", (venice.objRelation) = {Type: "NamedRef", To: "network/VirtualRouter"}];
    // Relay Configuration if any
    string IPAMPolicy = 9 [(gogoproto.jsontag) = "ipam-policy,omitempty", (venice.objRelation) = {Type: "NamedRef", To: "network/IPAMPolicy"}];
    // RouteImportExport specifies what routes will be imported to this Router and how routes are tagged when exported.
    RDSpec RouteImportExport  = 10 [(gogoproto.jsontag) = "route-imoport-export,omitempty"];
    // If supplied, this network will only be applied to the orchestrators specified.
    repeated OrchestratorInfo Orchestrators = 11 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "orchestrators,omitempty"];
}

message OrchestratorInfo {
    // Name of Orchestrator object to which this network should be applied to
    string Name      = 1 [(gogoproto.jsontag) = "orchestrator-name, omitempty",
                                 (venice.objRelation) = {Type: "NamedRef", To: "orchestration/Orchestrator"}];
    // Namespace in the orchestrator in which this network should be created in.
    string Namespace = 2 [(gogoproto.jsontag) = "namespace, omitempty"];
}

// status part of network object
message NetworkStatus {
    // list of all workloads in this network
    repeated string Workloads = 1 [(gogoproto.jsontag) = "workloads,omitempty"];
    // allocated IPv4 addresses (bitmap)
    bytes AllocatedIPv4Addrs = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "allocated-ipv4-addrs,omitempty", (gogoproto.moretags)="venice:\"sskip\""];
    // Handle is the internal Handle allocated to this network
    uint64 Handle = 3 [(gogoproto.jsontag) = "id,omitempty"];
}

// Network represents a subnet
message Network {
     option (venice.objectPrefix) = {Collection: "networks", Path: "/{O.Tenant}"};
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the network.
     NetworkSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the network.
     NetworkStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
