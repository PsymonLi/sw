// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package collection;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- Collection Policy -----------------------------
// Collection Policy specifies attributes for collection, filters, triggers, and aggregation

// Specifies start or stop triggers for collecting data
message CollectionTrigger {
    // ConditionalTrigger allows start data collection when count exceeds
    // If the trigger is not met, the collection is discarded
    // It is a map of attribute (string name of the field) to a condition "> 2000" or "== true", etc.
    // dependng on the type of the field
    map <string, string> ConditionalTrigger = 1 [(gogoproto.jsontag) = "conditional-trigger,omitempty"];

    // TimeTrigger specifies the time when data should be collected, text strings as
    // "7pm", "8am-12am", etc. format TBD
    string TimeTrigger = 2 [(gogoproto.jsontag) = "time-trigger,omitempty"];
}

message CollectionPolicySpec {
    // Attributes are a set of field names that needs to be collected
    // User is expected to define a set of parameters to be collected as templates that
    // are attached to specific workloads, etc. e.g. user may want to collect smaller set
    // of parameters on normal basis except for certain critical traffic
    repeated string Attributes = 1 [(gogoproto.jsontag) = "attributes,omitempty"];

    // Collection Trigger specifies start or stop triggers for data collection
    repeated CollectionTrigger Triggers = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "triggers,omitempty"];
}

message CollectionPolicyStatus {
    // list of monitoring policies that refer to this collection policy
    repeated string MonitoringPolicies = 1 [(gogoproto.jsontag) = "monitoring-policies,omitempty"];
}

message CollectionPolicy {
    option (venice.objectPrefix) = "collectionPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the collection policy.
    CollectionPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the collection policy.
    CollectionPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// CollectionPolicy REST API
service CollectionPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "collectionPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "CollectionPolicy";

    option (venice.apiRestService) = {
        Object: "CollectionPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/collectionPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "CollectionPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/collectionPolicy"
    };
}