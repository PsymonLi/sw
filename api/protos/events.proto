// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package events;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// -------------------------- Event Policy -----------------------------
// Event Policy represents the policy definition for Events.
// Event Client module will be consumer of this policy.
message EventPolicy {

    option (venice.objectPrefix) = "eventPolicy";
    api.TypeMeta T              = 1 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O            = 2 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of an event policy.
    EventPolicySpec Spec        = 3 [(gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of an event policy.
    EventPolicyStatus Status    = 4 [(gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "status,omitempty"];
}

// EventPolicySpec is the specification of an Event Policy,
// It consists of Retention and Export policies.
message EventPolicySpec {

    // Name of the export policies that defines the location, frequency and format of data to an external collector
    repeated string ExportPolicies  = 1 [(gogoproto.jsontag) = "export-policies,omitempty"];

    // MaxRetentionTime defines for how long to keep the data before it is deleted
    // The value is specified as a string format e.g. 30d (30 days)
    string MaxRetentionTime         = 2 [(gogoproto.jsontag) = "max-retention-time,omitempty"];
}

// EventPolicyStatus
message EventPolicyStatus {
}

// EventPolicy REST API
service EventPolicyV1 {

    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "eventPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "EventPolicy";

    option (venice.apiRestService) = {
        Object: "EventPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/eventPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "EventPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/eventPolicy"
    };
}


// -------------------------- Event -----------------------------
// Severity Level of an event
enum SeverityLevel {
    INFO        = 0; // no action needed
    WARNING     = 1; // can cause problems in the future, no immediate action required
    CRITICAL    = 2; // immediate attention required
}

// Event is a system notification of a fault, condition or configuration
// that should be user visible. These objects are created internally by
// Event client and persisted in EventDB.
message Event {
    api.TypeMeta T              = 1 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ", inline"];

    // ObjectMeta.Name will be the UUID for an event object.
    // TODO: Should there be a predefined list of labels or keep it free form ?
    api.ObjectMeta O            = 2 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "meta, omitempty"];

    // Attributes contains the attributes of an event.
    EventAttributes Attributes  = 3 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ", inline"];
}

// EventAttributes contains all the event attributes
message EventAttributes {

    // Severity represents the criticality level of an event
    string Severity         = 1 [(venice.check) = "StrEnum(SeverityLevel)",
                                (gogoproto.jsontag) = "severity, omitempty"];

    // Type represents the type of an event. e.g. NICAdmittedEvent, NodeJoined
    string Type             = 2 [(gogoproto.jsontag) = "type, omitempty"];

    // Message represents the human readable description of an event
    string Message          = 3  [(gogoproto.jsontag) = "message, omitempty"];

    // ObjectRef is the reference to the object associated with an event
    api.ObjectRef ObjectRef = 4 [(gogoproto.jsontag) = "object-ref, omitempty"];

    // Source is the component and host/node which generated an event
    EventSource Source      = 5 [(gogoproto.jsontag) = "source, omitempty"];

    // Number of occurrence of this event in the active interval
    uint32 Count            = 6 [(gogoproto.jsontag) = "count, omitempty"];

    // Timestamp of the first occurrence of this event in the active interval
    string FirstTimestamp   = 7 [(gogoproto.jsontag) = "first-timestamp, omitempty"];

    // Timestamp of the last occurrence of this event in the active interval
    string LastTimestamp    = 8 [(gogoproto.jsontag) = "last-timestamp, omitempty"];
}


// EventSource has info about the component and
// host/node that generated the event
message EventSource {

    // Component from which the event is generated.
    string Component    = 1 [(gogoproto.jsontag) = "component,omitempty"];

    // Host of the venice or workload node which is generating the event.
    string Host         = 2 [(gogoproto.jsontag) = "host,omitempty"];
}

// Event object REST API definition
// Events are internally created by the venice and naples sub-system
// Users are only allowed to GET & LIST events
service EventV1 {

    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "events";
    // API Version.
    option (venice.apiVersion) = "v1";

    // GET and LIST calls are handled by API gateway -> Query processor -> elastic DB(or events manager)
    option(venice.apiRestService) = {
        Object: "Event"
        Method: ["get"]
        Pattern: "/{O.Tenant}/events/{O.Name}"
    };
    option(venice.apiRestService) = {
        Object: "Event"
        Method: ["list"]
        Pattern: "/{O.Tenant}/events"
    };
}
