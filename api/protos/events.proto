// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package events;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";

// -------------------------------- Event ---------------------------------
// Severity Level of an event
enum SeverityLevel {
    // ui-hint: Informational
    INFO        = 0; // no action needed
    // ui-hint: Warning
    WARNING     = 1; // can cause problems in the future, no immediate action required
    // ui-hint: Critical
    CRITICAL    = 2; // immediate attention required
}

// Event is a system notification of a fault, condition or configuration
// that should be user visible. These objects are created internally by
// Event client and persisted in EventDB.
message Event {
    api.TypeMeta T              = 1 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ",inline"];

    // ObjectMeta.Name will be the UUID for an event object.
    // TODO: Should there be a predefined list of labels or keep it free form ?
    api.ObjectMeta O            = 2 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "meta,omitempty"];

    // Attributes contains the attributes of an event.
    EventAttributes Attributes  = 3 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ",inline"];
}

// EventAttributes contains all the event attributes
message EventAttributes {
    // Severity represents the criticality level of an event
    string Severity         = 1 [(venice.check) = "StrEnum(SeverityLevel)",
                                (gogoproto.jsontag) = "severity,omitempty"];

    // Type represents the type of an event. e.g. NICAdmittedEvent, NodeJoined
    string Type             = 2 [(gogoproto.jsontag) = "type,omitempty"];

    // Message represents the human readable description of an event
    string Message          = 3  [(gogoproto.jsontag) = "message,omitempty"];

    // ObjectRef is the reference to the object associated with an event
    api.ObjectRef ObjectRef = 4 [(gogoproto.jsontag) = "object-ref,omitempty"];

    // Source is the component and host/node which generated an event
    EventSource Source      = 5 [(gogoproto.jsontag) = "source,omitempty"];

    // Number of occurrence of this event in the active interval
    uint32 Count            = 6 [(gogoproto.jsontag) = "count,omitempty"];
}

// EventSource has info about the component and
// host/node that generated the event
message EventSource {
    // Component from which the event is generated.
    string Component    = 1 [(gogoproto.jsontag) = "component,omitempty"];

    // Name of the venice or workload node which is generating the event.
    string NodeName     = 2 [(gogoproto.jsontag) = "node-name,omitempty"];
}

// list of events
message EventList {
  api.TypeMeta T        = 1 [(gogoproto.nullable) = false,
                             (gogoproto.embed) = true];
  api.ListMeta ListMeta = 2 [(gogoproto.nullable) = false,
                             (gogoproto.embed) = true];
  repeated Event Items  = 3 [(gogoproto.nullable) = true,
                             (gogoproto.jsontag) = "items,omitempty"];
}
