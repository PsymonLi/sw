// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package telemetry;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- Monitoring  Policy -----------------------------
// Monitoring  Policy associates a specific set of workloads to a monitoring policy
// It is expected that multiple monitoring policies are active within a given tenant
// and specifies the unique requirements for collecting, exporting the data differently
// The policy defines when, how and what to collect and retain

message MonitoringPolicySpec {
    enum Areas{
      FwLogs = 0;
      FlowData = 1; 
      ObjectStats = 2;
    }
    // Area describes an area for which the monitoring policy is specified
    repeated string Area = 1 [(venice.check) = "StrEnum(MonitoringPolicySpec.Areas)"];

    // object selector for the service (list of object kind/namespace/instance to match)
    // TBD: this would need to be replaced by a generic definition of an object selector
    map <string, string> ObjectSelector  = 2 [(gogoproto.jsontag) = "object-selector,omitempty"];

    // CollectionPolicy specifies parameters to collect, how often and aggregation performed on this
    string CollectionPolicy  = 3 [(gogoproto.jsontag) = "collection-policy,omitempty"];

    // RetentionPolicy specifies for how long the data is kept
    string RetentionPolicy  = 4 [(gogoproto.jsontag) = "retention-policy,omitempty"];

    // ExportPolicies defines the location, frequency and format of data to an external collector
    repeated string ExportPolicies  = 5 [(gogoproto.jsontag) = "export-policy,omitempty"];
}

message MonitoringPolicyStatus {
    // list of workloads to be monitored for the policy
    repeated string Workloads = 1 [(gogoproto.jsontag) = "workloads,omitempty"];
}

message MonitoringPolicy {
    option (venice.objectPrefix) = "monitoringPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the monitoring policy.
    MonitoringPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the monitoring policy.
    MonitoringPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// MonitoringPolicy REST API
service MonitoringPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "monitoringPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "MonitoringPolicy";

    option (venice.apiRestService) = {
        Object: "MonitoringPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/monitoringPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "MonitoringPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/monitoringPolicy"
    };
}
