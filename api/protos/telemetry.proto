syntax = "proto3";
// Service name
package telemetry;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- Monitoring  Policy -----------------------------
// Monitoring  Policy associates a specific set of workloads to a monitoring policy
// It is expected that multiple monitoring policies are active within a given tenant
// and specifies the unique requirements for collecting, exporting the data differently
// The policy defines when, how and what to collect and retain

message MonitoringPolicySpec {
    enum Areas{
      FwLogs = 0;
      FlowData = 1; 
      ObjectStats = 2;
    }
    // Area describes an area for which the monitoring policy is specified
    repeated string Area = 1 [(venice.check) = "StrEnum(MonitoringPolicySpec.Areas)"];

    // object selector for the service (list of object kind/namespace/instance to match)
    // TBD: this would need to be replaced by a generic definition of an object selector
    map <string, string> ObjectSelector  = 2 [(gogoproto.jsontag) = "object-selector,omitempty"];

    // CollectionPolicy specifies parameters to collect, how often and aggregation performed on this
    string CollectionPolicy  = 3 [(gogoproto.jsontag) = "collection-policy,omitempty"];

    // RetentionPolicy specifies for how long the data is kept
    string RetentionPolicy  = 4 [(gogoproto.jsontag) = "retention-policy,omitempty"];

    // ExportPolicies defines the location, frequency and format of data to an external collector
    repeated string ExportPolicies  = 5 [(gogoproto.jsontag) = "export-policy,omitempty"];
}

message MonitoringPolicyStatus {
    // list of workloads to be monitored for the policy
    repeated string Workloads = 1 [(gogoproto.jsontag) = "workloads,omitempty"];
}

message MonitoringPolicy {
    option (venice.objectPrefix) = "monitoringPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the monitoring policy.
    MonitoringPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the monitoring policy.
    MonitoringPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// MonitoringPolicy REST API
service MonitoringPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "monitoringPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "MonitoringPolicy";

    option (venice.apiRestService) = {
        Object: "MonitoringPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/monitoringPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "MonitoringPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/monitoringPolicy"
    };
}

// ----------------------------- Retention Policy -----------------------------
// Retention Policy specifies data retention policy for specific workloads

message RetentionPolicySpec {
    // Compaction Interval is the time in minutes, hours or days before compaction starts on the data
    // Compaction results into data granularity loss, therefore this period is kept to be as high as space permits
    // for how much data is being collected
    string CompactionInterval  = 1 [(gogoproto.jsontag) = "compaction-interval ,omitempty"];

    // Compaction Method specifies the method to be used for aggregation i.e. 'linear', 'exponential'
    // When compaction method is is unspecified system defaults to exponential aggregation over the period of time
    string CompactionMethod  = 2 [(gogoproto.jsontag) = "compaction-method,omitempty"];

    // MaxRetentionTime defines for how long to keep the data before it is deleted
    // The value is specified as a string format to be hours, days, or hours etc.
    // e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
    string MaxRetentionTime = 3 [(gogoproto.jsontag) = "max-retention-time,omitempty"];
}

message RetentionPolicyStatus {
     // list of monitoring policies that refer to this collection policy
     repeated string MonitoringPolicies = 1 [(gogoproto.jsontag) = "monitoring-policies,omitempty"];
}

message RetentionPolicy {
     option (venice.objectPrefix) = "retentionPolicy";
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the retention policy.
     RetentionPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the retention policy.
     RetentionPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// RetentionPolicy REST API
service RetentionPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "retentionPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "RetentionPolicy";

    option (venice.apiRestService) = {
        Object: "RetentionPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/retentionPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "RetentionPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/retentionPolicy"
    };
}

// ------------------------ ExternalCred Object ----------------------------
// ExternalCred defines credentails required to access an external entity, such as
// a stats collector, compute orchestration entity, or a syslog server.
// External entity may support a variety of methods, like username/password,
// TLS Client authentication, or Bearer Token based authentication. User is
// expected to configure one of the methods
message ExternalCred {
    // UserName is the login id to be used towards the external entity
    string UserName = 1 [(gogoproto.jsontag) = "username,omitempty"];

    // Password is one time specified, not visibile on read operations
    // Only valid when UserName is defined
    // TBD: need to add (venice.secret) = "true" support for this
    string Password = 2 [(gogoproto.jsontag) = "password,omitempty"];

    // External entity supports bearer tokens for authentication and authorization
    // Token refresh is not supported using OAuth2
    // TBD: need to add (venice.secret) = "true" support for this
    string BearerToken = 3 [(gogoproto.jsontag) = "bearer-token,omitempty"];

    // CertData holds PEM-encoded bytes (typically read from a client certificate file).
    bytes CertData = 4 [(gogoproto.jsontag) = "cert-data,omitempty"];

    // KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
    // TBD: need to add (venice.secret) = "true" support for this
    bytes KeyData = 5 [(gogoproto.jsontag) = "key-data,omitempty"];

    // CaData holds PEM-encoded bytes (typically read from a root certificates bundle).
    bytes CaData = 6 [(gogoproto.jsontag) = "ca-data,omitempty"];
}

// ----------------------------- Export Policy -----------------------------
// Export Policy specifies where to export, how often to export and the export format

message ExportPolicySpec {
    // Export Interval defines how often to push the records to an external or internal collector
    // The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
    string ExportInterval = 1 [(gogoproto.jsontag) = "export-interval,omitempty"];

    enum Formats {
      Netflow = 0;
      Kafka = 1; 
      // TBD: Collectd, Elastic?
    }
    // Area describes an area for which the monitoring policy is specified
    string Format = 2 [(gogoproto.jsontag) = "format,omitempty", (venice.check) = "StrEnum(ExportPolicySpec.Formats)"];

    // IP address or DNS address of the collector/entity to which the data is to be exported
    // When unspecified this is assumed tobe Venice
    string CollectorIpAddress = 3 [(gogoproto.jsontag) = "collector-ip-address,omitempty"];

    // Protocol and Port number where an external collector is gathering the data
    string CollectorPort = 4 [(gogoproto.jsontag) = "collector-port,omitempty"];

    // Credentials provide secure access to the collector
    ExternalCred Credentials = 5 [(gogoproto.jsontag) = "credentials,omitempty"];
}

message ExportPolicyStatus {
     // list of monitoring policies that refer to this collection policy
     repeated string MonitoringPolicies = 1 [(gogoproto.jsontag) = "monitoring-policies,omitempty"];
}

message ExportPolicy {
     option (venice.objectPrefix) = "exportPolicy";
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the export policy.
     ExportPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the export policy.
     ExportPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// ExportPolicy REST API
service ExportPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "exportPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "ExportPolicy";

    option (venice.apiRestService) = {
        Object: "ExportPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/exportPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "ExportPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/exportPolicy"
    };
}

// ----------------------------- Collection Policy -----------------------------
// Collection Policy specifics attributes for collection, filters, triggers, and aggregation 

// Specifies start or stop triggers for collecting data
message CollectionTrigger {
    // ConditionalTrigger allows start data collection when count exceeds
    // If the trigger is not met, the collection is discarded
    // It is a map of attribute (string name of the field) to a condition "> 2000" or "== true", etc.
    // dependng on the type of the field
    map <string, string> ConditionalTrigger = 1 [(gogoproto.jsontag) = "conditional-trigger,omitempty"];

    // TimeTrigger specifies the time when data should be collected, text strings as
    // "7pm", "8am-12am", etc. format TBD
    string TimeTrigger = 2 [(gogoproto.jsontag) = "time-trigger,omitempty"];
}

message CollectionPolicySpec {
    // Attributes are a set of field names that needs to be collected
    // User is expected to define a set of parameters to be collected as templates that
    // are attached to specific workloads, etc. e.g. user may want to collect smaller set
    // of parameters on normal basis except for certain critical traffic
    repeated string Attributes = 1 [(gogoproto.jsontag) = "attributes,omitempty"];

    // Collection Trigger specifies start or stop triggers for data collection
    repeated CollectionTrigger Triggers = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "triggers,omitempty"];
}

message CollectionPolicyStatus {
     // list of monitoring policies that refer to this collection policy
     repeated string MonitoringPolicies = 1 [(gogoproto.jsontag) = "monitoring-policies,omitempty"];
}

message CollectionPolicy {
     option (venice.objectPrefix) = "collectionPolicy";
     api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
     api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

     // Spec contains the configuration of the collection policy.
     CollectionPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

     // Status contains the current state of the collection policy.
     CollectionPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// CollectionPolicy REST API
service CollectionPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "collectionPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "CollectionPolicy";

    option (venice.apiRestService) = {
        Object: "CollectionPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/collectionPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "CollectionPolicy"
        Method: [ "post" ]
        Pattern: "/{O.Tenant}/collectionPolicy"
    };
}
