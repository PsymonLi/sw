// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package telemetry;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/export.proto";

// telemetry policies:
//-------------------------------------------------------------------------------
// policy name         |  intended for        |     description                 |
//-------------------------------------------------------------------------------
// stats               |  sys admins          |    for all stats other than     |
//                     |                      |    fwlog/netflow.               |
//                     |                      |    includes retention,compaction|
//-------------------------------------------------------------------------------
// fwlog               |  security admins     |    firewall log policy          |
//                     |                      |    includes retention,          |
//                     |                      |    export parameters            |
//-------------------------------------------------------------------------------
//                     |                      |                                 |
// flowexport          |  network admins      |    netflow export policy        |
//                     |                      |    includes interval,           |
//                     |                      |    export parameters            |
//-------------------------------------------------------------------------------
//
//=========================================================================================
//  stats policy
//=========================================================================================
message StatsStatus {

}

// compaction method will be selected by Venice based on the mesaurement/table
// collection interval will be selected by Venice based on workloads
message StatsSpec {
     // Compaction Interval is the down sampling interval in minutes, hours or days
     // this would be mapped to GROUP BY TIME() in influxdb CQ
     // example: SELECT MAX(*) INTO downsampled_xxx FROM xxx GROUP BY time(CompactionInterval),host
     string CompactionInterval  = 1 [(gogoproto.jsontag) = "compaction-interval ,omitempty"];

     // RetentionTime defines for how long to keep the stats data before it is deleted
     // The value is specified as a string format to be hours, days, or months etc.
     // e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
     string RetentionTime = 2 [(gogoproto.jsontag) = "retention-time,omitempty"];

     // DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted
     // The value is specified as a string format to be hours, days, or months etc.
     // e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
     string DownSampleRetentionTime = 3 [(gogoproto.jsontag) = "downsample-retention-time,omitempty"];
}

message StatsPolicy {
    option (venice.objectPrefix) = "StatsPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    StatsSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the policy.
    StatsStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// StatsPolicy REST API
service StatsPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "statsPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "StatsPolicy";

    option (venice.apiRestService) = {
        Object: "StatsPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/statsPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "StatsPolicy"
        Method: [ "post", "list" ]
        Pattern: "/{O.Tenant}/statsPolicy"
    };
}

//=========================================================================================
//  firewall log policy
//=========================================================================================

message FwlogStatus {
}

// Firewall logs are managed like syslog.
// Venice collects fwlog irrespective of the export config
message FwlogSpec {
    // RetentionTime defines for how long to keep the fwlog before it is deleted
    string RetentionTime = 1 [(gogoproto.jsontag) = "retention-time,omitempty"];

    // Export contains the export config
    repeated api.ExportConfig Exports = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "exports,omitempty"];
}

message FwlogPolicy {
    option (venice.objectPrefix) = "FwlogPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    FwlogSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the policy.
    FwlogStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// FwlogPolicy REST API
service FwlogPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "fwlogPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "FwlogPolicy";

    option (venice.apiRestService) = {
        Object: "FwlogPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/fwlogPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "FwlogPolicy"
        Method: [ "post", "list" ]
        Pattern: "/{O.Tenant}/fwlogPolicy"
    };
}

//========================================================================================
//  flow export policy
//========================================================================================
message FlowExportStatus {
}

message FlowExportTarget {
    enum Formats {
        Ipfix = 0;
    }
    // Interval defines how often to push the records to an external or internal collector
    // The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
    string Interval = 1 [(gogoproto.jsontag) = "interval,omitempty"];

    string Format = 2 [(gogoproto.jsontag) = "format,omitempty", (venice.check) = "StrEnum(FlowExportTarget.Formats)"];

    // Export contains export parameters.
    repeated api.ExportConfig Exports = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "exports,omitempty"];

}

message FlowExportSpec {
    repeated FlowExportTarget Targets = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "targets,omitempty"];
}

message FlowExportPolicy {
    option (venice.objectPrefix) = "flowExportPolicy";
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    FlowExportSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the export policy.
    FlowExportStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// FlowExportPolicyV1 REST API
service FlowExportPolicyV1 {
    // Prefix for all resources served by this service.
    option (venice.apiPrefix) = "flowExportPolicy";
    // API Version.
    option (venice.apiVersion) = "v1";

    option (venice.apiGrpcCrudService) = "FlowExportPolicy";

    option (venice.apiRestService) = {
        Object: "FlowExportPolicy"
        Method: [ "get", "put", "delete" ]
        Pattern: "/{O.Tenant}/flowExportPolicy/{O.Name}"
    };
    option (venice.apiRestService) = {
        Object: "FlowExportPolicy"
        Method: [ "post", "list" ]
        Pattern: "/{O.Tenant}/flowExportPolicy"
    };
}