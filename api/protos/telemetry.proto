// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package monitoring;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "export.proto";
import "mirror.proto";

// telemetry policies:
//-------------------------------------------------------------------------------
// policy name         |  intended for        |     description                 |
//-------------------------------------------------------------------------------
// stats               |  sys admins          |    for all stats other than     |
//                     |                      |    fwlog/netflow.               |
//                     |                      |    includes retention,compaction|
//-------------------------------------------------------------------------------
// fwlog               |  security admins     |    firewall log policy          |
//                     |                      |    includes retention,          |
//                     |                      |    export parameters            |
//-------------------------------------------------------------------------------
//                     |                      |                                 |
// flowexport          |  network admins      |    netflow export policy        |
//                     |                      |    includes interval,           |
//                     |                      |    export parameters            |
//-------------------------------------------------------------------------------
//
//=========================================================================================
//  stats policy
//=========================================================================================
message StatsPolicyStatus {

}

// compaction method will be selected by Venice based on the mesaurement/table
// collection interval will be selected by Venice based on workloads
message StatsPolicySpec {
     // RetentionTime defines for how long to keep the stats data before it is deleted
     // The value is specified as a string format to be hours, days, or months etc.
     // e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
     // Default is 48h.
     string RetentionTime = 1 [(gogoproto.jsontag) = "retention-time,omitempty", (venice.check)="Duration(0,0)", (venice.default)="48h"];

     // DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted
     // The value is specified as a string format to be hours, days, or months etc.
     // e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
     // Default is 168h
     string DownSampleRetentionTime = 2 [(gogoproto.jsontag) = "downsample-retention-time,omitempty", (venice.check)="Duration(0,0)", (venice.default)="168h"];
}

message StatsPolicy {
    option (venice.objectPrefix) = {Collection: "statsPolicy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    StatsPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the policy.
    StatsPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}



//=========================================================================================
//  firewall log policy
//=========================================================================================

message FwlogPolicyStatus {
}

enum FwlogFilter {
    // ui-hint: No Logs
    FIREWALL_ACTION_NONE = 0;
    // ui-hint: Allow Logs
    FIREWALL_ACTION_ALLOW = 1;
    // ui-hint: Deny Logs
    FIREWALL_ACTION_DENY= 2;
    // ui-hint: Reject Logs
    FIREWALL_ACTION_REJECT = 3;
    // ui-hint: All Logs
    FIREWALL_ACTION_ALL = 4;
}

// Venice collects fwlog irrespective of the export config
message FwlogPolicySpec {
    //  VrfName specifies the name of the VRF that the current Firewall Log Policy belongs to
    string VrfName                  = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];
    // Target contains ip/port/protocol
    repeated ExportConfig Targets   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "targets,omitempty"];

     // fwlog format, SYSLOG_BSD default
    string Format                   = 3 [(gogoproto.jsontag) = "format,omitempty", (venice.check) = "StrEnum(MonitoringExportFormat)"];

    // filter firewall logs, FWLOG_ALL default
    repeated string Filter          = 4 [(gogoproto.jsontag) = "filter,omitempty", (venice.check) = "StrEnum(FwlogFilter)", (venice.default)="FIREWALL_ACTION_ALL"];

    // configuration to use for syslog format
    // default facility is set to "local4", can be overridden with FacilityOverride
    // fwlog severity is set to "Informational"
    SyslogExportConfig Config       = 5 [(gogoproto.jsontag) = "config,omitempty"];
}

message FwlogPolicy {
    option (venice.objectPrefix) = {Collection: "fwlogPolicy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    FwlogPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the policy.
    FwlogPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


//========================================================================================
//  flow export policy
//========================================================================================
message FlowExportPolicyStatus {
}

message FlowExportPolicySpec {
    enum Formats {
        Ipfix = 0;
    }

    // VrfName specifies the name of the VRF that the current flow export Policy belongs to
    string VrfName                  = 1 [(gogoproto.jsontag) = "vrf-name,omitempty"];

    // Interval defines how often to push the records to an external collector
    // The value is specified as a string format, '10s', '20m'
    string Interval                 = 2 [(gogoproto.jsontag) = "interval,omitempty", (venice.default)="10s", (venice.check)="Duration(1s,24h)"];

    // TemplateInterval defines how often to send ipfix templates to an external collector
    // The value is specified as a string format, '1m', '10m'
    string TemplateInterval         = 3 [(gogoproto.jsontag) = "template-interval,omitempty", (venice.default)="5m", (venice.check)="Duration(1m,30m)"];

    string Format                   = 4 [(gogoproto.jsontag) = "format,omitempty", (venice.check) = "StrEnum(FlowExportPolicySpec.Formats)"];

    repeated MatchRule  MatchRules  = 5 [(gogoproto.jsontag) = "match-rules,omitempty"];

    // Export contains export parameters.
    repeated ExportConfig Exports   = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "exports,omitempty"];
}

message FlowExportPolicy {
    option (venice.objectPrefix) = {Collection: "flowExportPolicy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    FlowExportPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the export policy.
    FlowExportPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
