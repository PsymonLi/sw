
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package workload;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

import "cluster.proto";
import "sgpolicy.proto";

// ----------------------------- Workload Object -----------------------------

// Workload represents a VM, container/pod or Baremetal.
message Workload {
    option (venice.objectPrefix) = { Collection: "workloads", Path: "/{O.Tenant}"};
    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the Workload.
    WorkloadSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the Workload.
    WorkloadStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

// Spec part of Workload object
message WorkloadSpec {

    // Hostname of the server where the workload should be running.
    // cli-help: Host name where the workload runs
    string HostName                         = 1 [(venice.objRelation) = {Type: "NamedRef", To: "cluster/Host"},
                                                (venice.check) = "HostAddr()",
                                                (gogoproto.jsontag) = "host-name"];

    // Spec of all interfaces in the Workload identified by Primary MAC
    repeated WorkloadIntfSpec Interfaces    = 2 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "interfaces,omitempty"];

    string MigrationTimeout                 = 3 [(gogoproto.jsontag) = "migration-timeout,omitempty", (venice.default)="3m", (venice.check) = "EmptyOr(Duration(0,0))"];
}

// Status part of Workload object
message WorkloadStatus {
    // The status of the configuration propagation to the Naples
    security.PropagationStatus PropagationStatus = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "propagation-status"];

    // Status of all interfaces in the Workload identified by Primary MAC
    repeated WorkloadIntfStatus Interfaces       = 2 [(gogoproto.nullable) = false,
                                                     (gogoproto.jsontag) = "interfaces,omitempty"];
    // Hostname of the server where the workload is currently running.
    string HostName                              = 3 [(gogoproto.jsontag) = "host-name,omitempty"];

    // Status of workload migration when migration is in process
    WorkloadMigrationStatus MigrationStatus      = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "migration-status,omitempty"];
}

// Spec of a Workload interface
message WorkloadIntfSpec {

    // MACAddress contains the MAC address of the interface as seen by the workload
    // cli-help: MAC address of the interface as seen by the workload
    string MACAddress           = 1 [(gogoproto.jsontag) = "mac-address,omitempty", (venice.check) = "EmptyOr(MacAddr())"];

    // Micro-segmentation vlan assigned for this interface
    // cli-help: Vlan identifying host unique vlan id
    uint32 MicroSegVlan         = 2 [(gogoproto.jsontag) = "micro-seg-vlan,omitempty",
                                     (venice.check) = "IntRange(1,4095)"];

    // External vlan assigned for this interface
    // cli-help: External vlan associated with the workload
    uint32 ExternalVlan         = 3 [(gogoproto.jsontag) = "external-vlan",
                                     (venice.check) = "IntRange(0,4095)"];

    // List of all IP addresses configured on a Workload Interface
    repeated string IpAddresses = 4 [(gogoproto.jsontag) = "ip-addresses,omitempty"];

    // Network this interface will belong to
    // cli-help: Network this interface will belong to
    string Network              = 5  [(venice.objRelation) = {Type: "NamedRef", To: "network/Network"}, (gogoproto.jsontag) = "network,omitempty"];
}

// Status of a Workload interface
message WorkloadIntfStatus {

    // List of all IP addresses configured and discovered on a Workload Interface
    repeated string IpAddresses = 1 [(gogoproto.jsontag) = "ip-addresses,omitempty"];

    // Endpoint associated with this Workload interface
    string Endpoint             = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "endpoint,omitempty"];

    // Micro-segmentation vlan used by this interface
    uint32 MicroSegVlan         = 3 [(gogoproto.jsontag) = "micro-seg-vlan,omitempty"];

    // MACAddress contains the MAC address of the interface as seen by the workload
    string MACAddress           = 4 [(gogoproto.jsontag) = "mac-address,omitempty"];

    // External vlan assigned for this interface
    uint32 ExternalVlan         = 5 [(gogoproto.jsontag) = "external-vlan, omitempty"];

    // Network this interface belongs to
    string Network              = 6  [(gogoproto.jsontag) = "network,omitempty"];
}

message WorkloadMigrationStatus {
    // migration stage
    enum MigrationStage {
        MIGRATION_NONE            = 0 [(venice.enumValueStr) = "migration-none"];
        MIGRATION_START           = 1 [(venice.enumValueStr) = "migration-start"];
        MIGRATION_DONE            = 2 [(venice.enumValueStr) = "migration-done"];
        MIGRATION_ABORT           = 3 [(venice.enumValueStr) = "migration-abort"];
    }

    enum DataplaneStatus {
        NONE      = 0 [(venice.enumValueStr) = "none"];
        STARTED   = 1 [(venice.enumValueStr) = "started"];
        DONE      = 2 [(venice.enumValueStr) = "done"];
        FAILED    = 3 [(venice.enumValueStr) = "failed"];
        TIMED_OUT = 4 [(venice.enumValueStr) = "timed-out"];
    }
    // Controller's migration stage
    string Stage              = 1 [(gogoproto.jsontag) = "stage", (venice.check) = "StrEnum(WorkloadMigrationStatus.MigrationStage)"];
    // migration start time
    api.Timestamp StartedAt   = 2 [(gogoproto.jsontag) = "started-at"];
    // The status from the dataplane performing migration
    string Status             = 3 [(gogoproto.jsontag) = "status", (venice.check) = "StrEnum(WorkloadMigrationStatus.DataplaneStatus)"];
    // migration completion time
    api.Timestamp CompletedAt = 4 [(gogoproto.jsontag) = "completed-at"];
}
