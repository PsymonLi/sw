
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package workload;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/cluster.proto";
import "github.com/pensando/sw/api/protos/sgpolicy.proto";

// ----------------------------- Workload Object -----------------------------
//
// Workload represents a VM, container/pod or Baremetal.
//
message Workload {
    option (venice.objectPrefix) = { Collection: "workloads", Path: "/{O.Tenant}"};
    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the Workload.
    WorkloadSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the Workload.
    WorkloadStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

// Spec part of Workload object
message WorkloadSpec {

    // Hostname of the server where the workload is running.
    // cli-help: Host name where the workload runs
    string HostName                         = 1 [(venice.objRelation) = {Type: "NamedRef", To: "cluster/Host"},
                                                (venice.check) = "HostAddr()",
                                                (gogoproto.jsontag) = "host-name"];

    // Spec of all interfaces in the Workload identified by Primary MAC
    repeated WorkloadIntfSpec Interfaces    = 2 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "interfaces,omitempty"];
}

// Status part of Workload object
message WorkloadStatus {
    // The status of the configuration propagation to the Naples
    security.PropagationStatus PropagationStatus = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "propagation-status"];

    // Status of all interfaces in the Workload identified by Primary MAC
    repeated WorkloadIntfStatus Interfaces  = 2 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "interfaces,omitempty"];

    // Status of Migration of the workload
    WorkloadMigrationStatus Migration = 3 [(gogoproto.nullable) = true, 
                                          (gogoproto.jsontag) = "migration,omitempty"];
}

// Spec of a Workload interface
message WorkloadIntfSpec {

    // MACAddress contains the MAC address of the interface as seen by the workload
    // cli-help: MAC address of the interface as seen by the workload
    string MACAddress           = 1 [(gogoproto.jsontag) = "mac-address,omitempty", (venice.check) = "EmptyOr(MacAddr())"];

    // Micro-segmentation vlan assigned for this interface
    // cli-help: Vlan identifying host unique vlan id
    uint32 MicroSegVlan         = 2 [(gogoproto.jsontag) = "micro-seg-vlan,omitempty",
                                     (venice.check) = "IntRange(1,4095)"];

    // External vlan assigned for this interface
    // cli-help: External vlan associated with the workload
    uint32 ExternalVlan         = 3 [(gogoproto.jsontag) = "external-vlan,omitempty",
                                     (venice.check) = "IntRange(0,4095)"];

    // List of all IP addresses configured on a Workload Interface
    repeated string IpAddresses = 4 [(gogoproto.jsontag) = "ip-addresses,omitempty"];
}

// Status of a Workload interface
message WorkloadIntfStatus {

    // List of all IP addresses configured and discovered on a Workload Interface
    repeated string IpAddresses = 1 [(gogoproto.jsontag) = "ip-addresses,omitempty"];

    // Endpoint associated with this Workload interface
    string Endpoint             = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "endpoint,omitempty"];
}

message WorkloadMigrationStatus {
    // State
    enum State {
        // ui-hint: None
        NONE    = 0; // No Migration is in progress
        // ui-hint: Started
        STARTED = 1; // Start migration
        // ui-hint: In Progress
        INPROGRESS = 2; // Migration in progress
        // ui-hint: Success
        SUCCESS = 3; // Migration is successful
        // ui-hint: Failed
        FAILED = 4; // Migration Failure
        // ui-hint: Aborted
        ABORTED = 5; // Migration aborted
    }

    // Status of migration
    string Status                 = 1 [(venice.check) = "StrEnum(WorkloadMigrationStatus.State)",
                                        (gogoproto.jsontag) = "status,omitempty"];

    // Start time of the migration operation
    api.Timestamp StartTime = 2 [(gogoproto.jsontag) = "start-time,omitempty"];

    // End time of the migration operation
    api.Timestamp EndTime = 3 [(gogoproto.jsontag) = "end-time,omitempty"];

    // Source Hostname derived from the workload to host to DSC association
    string SourceHost = 4 [(gogoproto.jsontag) = "source-host,omitempty"];

    // Destination Hostname where the new workload will be migrated to
    string DestinationHost = 5 [(gogoproto.jsontag) = "destination-host,omitempty"];
   
    // Reason field is populated if some failures are encountered while migrating a workload
    string Reason = 6 [(gogoproto.jsontag) = "reason,omitempty"];
}

