// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package metrics_query;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

// ObjectSelector selects one or more objects of the same Kind
// for the metrics query
message ObjectSelector {
    // Name is the name of the API object.
    string Name         = 2 [(gogoproto.jsontag) = "name,omitempty"];
    // Tenant the object belongs to.
    string Tenant       = 3 [(gogoproto.jsontag) = "tenant,omitempty"];
    // Namespace the object belongs to.
    string Namespace    = 4 [(gogoproto.jsontag) = "namespace,omitempty"];
    // Selector is an expression that selects one or more points
    labels.Selector Selector   = 5 [(gogoproto.jsontag) = "selector,omitempty"];
}

// TimeRange specifies a begin and end timestamp for the series.
// The timestamp may be specified as an absolute
// rfc3339_date_time_string or as a relative now() - x
message TimeRange {
	api.Timestamp Begin = 1 [(gogoproto.jsontag) = "begin,omitempty"];
	api.Timestamp End = 2 [(gogoproto.jsontag) = "end,omitempty"];
}

// TSDBFunctionType specifies an operation to perform on metrics
enum TsdbFunctionType {
    NONE = 0; // none
    MEAN = 1; // returns average of the fields
}

// MetricSpec specifies a selector for metrics within the selected
// objects. It consists of a tag selector, list of fields, ordered
// list of aggregator functions and a FilterSpec
message MetricSpec {
    // Tags select a metric based on tags attached to the metric.
    labels.Selector Tags = 1 [(gogoproto.jsontag) = "tags,omitempty"];
    // Fields select the metric fields to be included in the result
    // Empty will include all fields, must contain at least one non-tag field
    repeated string Fields = 2 [(gogoproto.jsontag) = "fields,omitempty"];
    // Functions specify an operation function to be applied, example mean()/min()/max()
    string Function   = 3 [(gogoproto.jsontag) = "function,omitempty", (venice.check) = "StrEnum(TsdbFunctionType)"];
}

// PaginationSpec specifies how many metrics instances to include
// in the result.
message PaginationSpec {
    // Offset specifies the starting point
    int32 Offset = 1 [(gogoproto.jsontag) = "offset,omitempty"];
    // Count specifies the number of series to include
    int32 Count = 2 [(gogoproto.jsontag) = "count,omitempty"];
}

// QuerySpec requires a structured body consisting of:
//     -  Object Selector (selects one more more objects of same Kind)
//     -  Time Range (for the time series)
//     -  A set of Metric Specs
//     -  A pagination spec
message QuerySpec {
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    // ObjectSelectot selects one or more objects of the same kind for query
    ObjectSelector O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    // TimeRange specifies the time interval for the query
    TimeRange Time = 3 [(gogoproto.jsontag) = "time,omitempty"];
    // MetricSpec specifies the metrics within the selected objects
    MetricSpec Metrics = 4 [(gogoproto.jsontag) = "metrics,omitempty"];
    // PaginatioSpec specifies the number of series to include
    PaginationSpec Pagination = 5 [(gogoproto.jsontag) = "pagination,omitempty"];
}

//
message ResultSeries {
    string Name = 1 [(gogoproto.jsontag) = "name,omitempty"];
    // columns list all available fields in tsdb
    repeated string Columns = 2 [(gogoproto.jsontag) = "columns,omitempty"];
    // values contain field values received frpm tsdb, it is in the form of [][]interface{}
    repeated api.InterfaceSlice Values = 3 [(gogoproto.jsontag) = "values"];
}


// QueryResult contains tsdb series from citadel query
message QueryResult {
    int32 StatementId = 1 [(gogoproto.jsontag) = "statement_id"];
    repeated ResultSeries Series = 2 [(gogoproto.jsontag) = "series,omitempty"];
}

// QueryResponse is the response send out
message QueryResponse {
   repeated QueryResult Results = 1 [(gogoproto.jsontag) = "results,omitempty"];
}
