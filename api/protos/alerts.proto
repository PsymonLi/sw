// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";

// Service name
package monitoring;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";
import "export.proto";

// -------------------------- Alert Object -------------------------------------
// Alert is a notification to a user of a fault or condition that needs
// user attention. Alerts are persisted by API Server and are objects.

// Possible alert states
enum AlertState {
    //ui-hint: Open
    OPEN         = 0;
    //ui-hint: Resolved
    RESOLVED     = 1;
    //ui-hint: Acknowledged
    ACKNOWLEDGED = 2;
}

// Severity Level of an alert
enum AlertSeverity {
    INFO        = 0; // no action needed
    WARN        = 1; // can cause problems in the future, no immediate action required
    CRITICAL    = 2; // immediate attention required
}

// Source of an alert; for alerts generated from events, it maps to event.Source
message AlertSource {
  string Component    = 1 [(gogoproto.jsontag) = "component, omitempty"];
  string NodeName     = 2 [(gogoproto.jsontag) = "node-name, omitempty"];
}

// One of the requirement from the expression that was met
message MatchedRequirement {
  // Requirement from the alert rule that was met
  fields.Requirement Requirement  = 1 [(gogoproto.embed) = true,
                                       (gogoproto.jsontag) = ",inline"];

  // The value at which the requirement was met.
  // same as Requirement.value for operator `Equals` but could vary for other operators
  // e.g. requirement - CPU;Gt;90 could have a matching value 96
  string ObservedValue            = 2 [(gogoproto.jsontag) = "observed-value, omitempty"];
}

// AlertReason captures all the requirements with matched value from the alert policy rule
// at the time of creating an alert.
// e.g. "matched-requirements": [{"field": "cpu", "operator": "Gt", "values": [90], "observed-value": 95}]
message AlertReason {
  // List of requirements from the alert policy with it's matched value
  repeated MatchedRequirement MatchedRequirements = 1 [(gogoproto.nullable) = true,
                                                       (gogoproto.jsontag) = "matched-requirements, omitempty"];

  // Alert Policy ID that matched
  string PolicyID                                 = 2 [(gogoproto.jsontag) = "alert-policy-id, omitempty"];
}


// AuditInfo captures the user performed the action and the time at which the
// action was performed.
message AuditInfo {
  // Name of the user performed some action.
  string User               = 1 [(gogoproto.jsontag) = "user, omitempty"];

  // Time at which the action was performed.
  api.Timestamp Time        = 2 [(gogoproto.nullable) = true,
                                 (gogoproto.jsontag) = "time, omitempty"];
}

// User can change the state of the alert by changing the spec
message AlertSpec {
  string State        = 1 [(venice.check) = "StrEnum(AlertState)",
                           (gogoproto.jsontag) = "state, omitempty"];
}
// Status part of the alert object
message AlertStatus {
  // Severity of an alert
  string Severity                 = 1 [(venice.check) = "StrEnum(AlertSeverity)",
                                       (gogoproto.jsontag) = "severity, omitempty"];

  // Alert source or origin
  AlertSource Source              = 2 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "source, omitempty"];

  // Event that triggered the alert
  string EventURI                 = 3 [(gogoproto.jsontag) = "event-uri, omitempty"];

  // Affected object
  api.ObjectRef ObjectRef         = 4 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "object-ref, omitempty"];

  // Message from the alert rule that triggered the alert
  string Message                  = 5 [(gogoproto.jsontag) = "message, omitempty"];

  // Captures all the requirements from the alert policy rule with matched value.
  // All these requirements must be cleared to auto-resolve an alert.
  AlertReason Reason              = 6 [(gogoproto.nullable) = false,
                                       (gogoproto.jsontag) = "reason, omitempty"];

  // Username and time at which the alert was acknowledged
  AuditInfo Acknowledged          = 7 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "acknowledged, omitempty"];

  // Username and time at which the alert was resolved
  AuditInfo Resolved              = 8 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "resolved, omitempty"];

  // TotalHits on this alert, If there is an exisiting alert for the condition, we do not re-create the
  // alert instead we update this counter
  int32 TotalHits                 = 9 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "total-hits, omitempty"];

}

// Alert defines an alert object
message Alert {
  // KV store prefix
  option (venice.objectPrefix) =  {Collection: "alerts", Path: "/{O.Tenant}"};

  api.TypeMeta T        = 1 [(gogoproto.embed) = true,
                             (gogoproto.nullable) = false,
                             (gogoproto.jsontag) = ",inline"];

  api.ObjectMeta O      = 2 [(gogoproto.embed) = true,
                             (gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "meta, omitempty"];

  AlertSpec Spec        = 3 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "spec, omitempty"];

  AlertStatus Status    = 4 [(gogoproto.nullable) = false,
                             (gogoproto.jsontag) = "status, omitempty"];
}


// -------------------------- Alert Policy Object --------------------------------
// Alert Policy is a user-defined or system-defined policy to generate alerts
// based on the given rule. Users have the ability to select target objects or metrics
// using the `resource` field. Based on the given resource, the rules within the
// policy gets interpreted differently.
//
// -----------------------------------------------------------------------------------------------------------------------
// |  Type         |  Intended for     |     Example alert rule                                                          |
// -----------------------------------------------------------------------------------------------------------------------
// |   Object      |  alerts on the    | Alert unhealthy node status                                                     |
// |               |  managed object   | { ...                                                                           |
// |               |  model            |  "spec": {                                                                      |
// |               |                   |    "resource": "Node",                                                          |
// |               |                   |    "severity": "CRITICAL",                                                      |
// |               |                   |    "message": "Unhealthy node status",                                          |
// |               |                   |    "requirements":[{                                                            |
// |               |                   |      "key": "Spec.AdminState",                                                  |
// |               |                   |      "operator": "Equals",                                                      |
// |               |                   |      "values": ["Healthy"]                                                      |
// |               |                   |    },{                                                                          |
// |               |                   |      "key": "Status.Conditions.OperState",                                      |
// |               |                   |      "operator": "Equals",                                                      |
// |               |                   |      "values": ["Bad"]                                                          |
// |               |                   |    }],                                                                          |
// |               |                   |    "persistence-duration": 60s,                                                 |
// |               |                   |    "clear-duration": 60s,                                                       |
// |               |                   |    "enable": true,                                                              |
// |               |                   |    "auto-resolve": true,                                                        |
// |               |                   |    "destinations": ["email-system-admins"] #name of the alert destinations      |
// |               |                   |  }                                                                              |
// |               |                   | ...                                                                             |
// |               |                   | }                                                                               |
// -----------------------------------------------------------------------------------------------------------------------
// |   Event       |  alert on event   | Convert all node critical events on node to critical alert.                     |
// |               |  object           | Message will be derived from the event.                                         |
// |               |                   | { ...                                                                           |
// |               |                   |  "spec": {                                                                      |
// |               |                   |    "resource": "Event",                                                         |
// |               |                   |    "severity": "CRITICAL",                                                      |
// |               |                   |    "requirements": [{                                                           |
// |               |                   |      "key": "Severity",                                                         |
// |               |                   |      "operator": "Equals",                                                      |
// |               |                   |      "values": ["CRITICAL"]                                                     |
// |               |                   |    }, {                                                                         |
// |               |                   |      "key": "ObjRef.Kind",                                                      |
// |               |                   |      "operator": "Equals",                                                      |
// |               |                   |      "values": ["Node"]                                                         |
// |               |                   |    }],                                                                          |
// |               |                   |    "enable": true,                                                              |
// |               |                   |    "auto-resolve": true,                                                        |
// |               |                   |    "destinations": ["email-system-admins"]  #name of the alert destinations     |
// |               |                   |  }                                                                              |
// |               |                   | ...                                                                             |
// |               |                   | }                                                                               |
// -----------------------------------------------------------------------------------------------------------------------
// | Metric /      |  alerts on the    | Trigger a WARN alert when CPS exceeds 100 and CRITICAL alert when               |
// | Threshold     |  metrics          | CPS exceeds 120.                                                                |
// |               |                   | { ...                                                                           |
// |               |                   |  "spec": {                                                                      |
// |               |                   |    "metric": {                                                                  |
// |               |                   |      "group": "ftestats",                                                       |
// |               |                   |      "kind": "FteCPSMetrics",             // CPS Statistics, table              |
// |               |                   |      "field-name": "ConnectionsPerSecond" // CPS; table field                   |
// |               |                   |    },                                                                           |
// |               |                   |    "measurement-criteria": {                                                    |
// |               |                   |      "window": "10m",    // enum of fixed intervals (5m,10m,30m,1h)             |
// |               |                   |      "function": "max"   // enum of aggregate functions                         |
// |               |                   |    },                                                                           |
// |               |                   |    "thresholds": {                                                              |
// |               |                   |      "operator": "greater_or_equal_than",                                       |
// |               |                   |      "values": [{                                                               |
// |               |                   |        "severity": "critical",                                                  |
// |               |                   |        "raise-value": 110                                                       |
// |               |                   |      },                                                                         |
// |               |                   |      {                                                                          |
// |               |                   |        "severity": "warn",                                                      |
// |               |                   |        "raise-value": 100                                                       |
// |               |                   |      }]                                                                         |
// |               |                   |      },                                                                         |
// |               |                   |    },                                                                           |
// |               |                   |    "enable": true // enable or disable the policy                               |
// |               |                   |    "destinations": ["syslog-export-1"]  #name of the alert destinations         |
// |               |                   |  }                                                                              |
// |               |                   | ...                                                                             |
// |               |                   | }                                                                               |
// -----------------------------------------------------------------------------------------------------------------------
//

message AlertPolicySpec {
  // Resource type - target resource to run this policy.
  // e.g. Network, Endpoint - object based alert policy
  //      Event - event based alert policy
  //      EndpointMetrics - metric based alert policy
  // based on the resource type, the policy gets interpreted.
  string Resource                           = 1 [(gogoproto.jsontag) = "resource, omitempty"];

  // Severity to be set for an alert that gets triggered from this rule
  string Severity                           = 2 [(venice.check) = "StrEnum(AlertSeverity)",
                                                 (gogoproto.jsontag) = "severity, omitempty"];

  // Message to be used while generating the alert
  // XXX: Event based alerts should not carry a message. It will be derived from the event.
  string Message                            = 3 [(gogoproto.jsontag) = "message, omitempty"];

  // List of requirements that needs to be met to trigger an alert
  repeated fields.Requirement Requirements  = 4 [(gogoproto.jsontag) = "requirements, omitempty"];

  // Met rule (requirements) needs to sustain for the given duration to qualify to be an alert
  string PersistenceDuration                = 5 [(gogoproto.jsontag) = "persistence-duration, omitempty"];

  // Met rule (requirements) needs to be cleared for the given duration to resolve an alert
  string ClearDuration                      = 6 [(gogoproto.jsontag) = "clear-duration, omitempty"];


  // User can disable the policy by setting this field.
  // Disabled policies will not generate any more alerts but the outstanding ones will remain as is.
  bool Enable                               = 7 [(venice.default) = "true",
                                                 (gogoproto.jsontag) = "enable, omitempty"];

  // If set, the underlying alert will be auto-resolved if the rule that
  // triggered the alert is cleared
  bool AutoResolve                          = 8 [(gogoproto.jsontag) = "auto-resolve, omitempty"];

  // name of the alert destinations to be used to send out notification when an alert
  // gets generated.
  repeated string Destinations              = 9 [(gogoproto.jsontag) = "destinations, omitempty",
                                                 (venice.objRelation) = {Type: "NamedRef", To: "monitoring/AlertDestination"}];
}

message AlertPolicyStatus {
  // Total hits on this policy
  int32 TotalHits            = 1 [(gogoproto.jsontag) = "total-hits, omitempty"];

  // Open alerts based on this policy
  int32 OpenAlerts           = 2 [(gogoproto.jsontag) = "open-alerts, omitempty"];

  // Acknowledged alerts based on this policy
  int32 AcknowledgedAlerts   = 3 [(gogoproto.jsontag) = "acknowledged-alerts, omitempty"];

}

// AlertPolicy - tenant scoped
message AlertPolicy {
  // KV store prefix
  option (venice.objectPrefix) = {Collection: "alertPolicies", Path: "/{O.Tenant}"};

  api.TypeMeta      T          = 1 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = ",inline"];

  api.ObjectMeta    O          = 2 [(gogoproto.embed) = true,
                                    (gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "meta, omitempty"];

  AlertPolicySpec   Spec       = 3 [(gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "spec, omitempty"];

  AlertPolicyStatus Status     = 4 [(gogoproto.nullable) = false,
                                    (gogoproto.jsontag) = "status, omitempty"];
}

// ------------------------------------- Stats/Threshold Alert Policy Object ---------------------------------------
// Possible measurement.function values
enum MeasurementFunction {
  MIN         = 0;
  MAX         = 1;
  MEAN        = 2;
  DIFFERENCE  = 3;
}

// Possible threshold.operator values
enum Operator {
  LESS_OR_EQUAL_THAN    = 0;
  GREATER_OR_EQUAL_THAN = 1;
}

// MetricIdentifier - uniquely identifies an metric that needs to be monitored as part of the policy
message MetricIdentifier {
  // Metric group - e.g. ftestats, flowstats, etc.
  string Group        = 1 [(gogoproto.jsontag) = "group, omitempty"];

  // Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets
  string Kind         = 2 [(gogoproto.jsontag) = "kind, omitempty"];

  // Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored
  // and alerts will be created/resolved based on the thresholds.
  string FieldName    = 3 [(gogoproto.jsontag) = "field-name, omitempty"];
}

// Measurement window and function to be used for monitoring the metric.
// nil `measurement` indicates that the policy will act on the instantaneous value of the metric that gets reported
// every 30s.
message MeasurementCriteria {
  // The length of time the metric will be monitored/observed before running the values against thresholds
  // for alert creation/resolution.
  //ui-hint: Allowed values - 5m, 10m, 30m, 1h
  string Window     = 1 [(gogoproto.jsontag) = "window, omitempty"];

  // Aggregate function to be applied on the metric values that were monitored over a window/interval.
  string Function   = 2 [(gogoproto.jsontag) = "function, omitempty",
                         (venice.check)      = "StrEnum(MeasurementFunction)"];
}

// Threshold represents the threshold value of a metric against different severities.
message Threshold {
    // Severity of the alert to be created
    string Severity      = 1 [(gogoproto.jsontag) = "severity, omitempty",
                              (venice.check)      = "StrEnum(AlertSeverity)"];

    // Raise/Create an alert when the threshold reaches this value
    string RaiseValue    = 2 [(gogoproto.jsontag) = "raise-value, omitempty"];
}

// List of threshold values
message Thresholds {
  // Operator to be applied when comparing metric values against the threshold values.
  string Operator               = 1 [(gogoproto.jsontag) = "operator, omitempty",
                                     (venice.check)      = "StrEnum(Operator)"];

  // List of threshold values to be acted against. Key should be one of the alert severity.
  repeated Threshold Values     = 4 [(gogoproto.nullable) = false,
                                     (gogoproto.jsontag) = "values, omitempty"];
}


message StatsAlertPolicySpec {
  // Details about the metric that needs to be monitored.
  MetricIdentifier Metric                 = 1 [(gogoproto.nullable) = false,
                                               (gogoproto.jsontag)  = "metric, omitempty"];

  // Measurement window and function to be applied while monitoring the metric.
  MeasurementCriteria MeasurementCriteria = 2 [(gogoproto.nullable) = true,
                                               (gogoproto.jsontag)  = "measurement-criteria, omitempty"];

  // Threshold values with varying severity.
  Thresholds Thresholds                   = 3 [(gogoproto.nullable) = false,
                                               (gogoproto.jsontag)  = "thresholds, omitempty"];

  // User can disable the policy by setting this field.
  // Disabled policies will not generate any more alerts but the outstanding ones will remain as is.
  bool Enable                             = 4 [(venice.default)    = "true",
                                               (gogoproto.jsontag) = "enable, omitempty"];

  // name of the alert destinations to be used to send out notification when an alert
  // gets generated.
  repeated string Destinations            = 5 [(gogoproto.jsontag) = "destinations, omitempty",
                                               (venice.objRelation) = {Type: "NamedRef", To: "monitoring/AlertDestination"}];
}

message StatsAlertPolicyStatus {
  // Total hits on this policy
  int32 TotalHits            = 1 [(gogoproto.jsontag) = "total-hits, omitempty"];

  // Open alerts based on this policy
  int32 OpenAlerts           = 2 [(gogoproto.jsontag) = "open-alerts, omitempty"];

  // Acknowledged alerts based on this policy
  int32 AcknowledgedAlerts   = 3 [(gogoproto.jsontag) = "acknowledged-alerts, omitempty"];

}

// StatsAlertPolicy - tenant scoped
message StatsAlertPolicy {
  // KV store prefix
  option (venice.objectPrefix) = {Collection: "statsAlertPolicies", Path: "/{O.Tenant}"};

  api.TypeMeta      T            = 1 [(gogoproto.embed)    = true,
                                      (gogoproto.nullable) = false,
                                      (gogoproto.jsontag)  = ",inline"];

  api.ObjectMeta    O            = 2 [(gogoproto.embed)    = true,
                                      (gogoproto.nullable) = false,
                                      (gogoproto.jsontag)  = "meta, omitempty"];

  StatsAlertPolicySpec Spec      = 3 [(gogoproto.nullable) = false,
                                      (gogoproto.jsontag)  = "spec, omitempty"];

  StatsAlertPolicyStatus Status  = 4 [(gogoproto.nullable) = false,
                                      (gogoproto.jsontag)  = "status, omitempty"];
}

// -------------------------- Alert Destination Object ------------------------
// Alert Destination is a user-defined object which captures the details of all
// the allowed notification mechanisms (Email, SNMP, etc.). These are reusable
// objects in the system and can be used by any of the alert policies.

// Syslog export configuration
message SyslogExport {
    // event export format, SYSLOG_BSD default
    string Format                   = 1 [(venice.check) = "StrEnum(MonitoringExportFormat)",
                                         (gogoproto.jsontag) = "format, omitempty"];

    // export target ip/port/protocol
    repeated ExportConfig Targets    = 2 [(gogoproto.jsontag) = "targets, omitempty"];

    // syslog specific configuration; one of the supported configs
    SyslogExportConfig Config       = 3 [(gogoproto.jsontag) = "config, omitempty"];
}

message SNMPExport {
  // TODO:  format, config
  // SNMP trap destination(s)
  repeated SNMPTrapServer SNMPTrapServers = 1 [(gogoproto.jsontag) = "snmp-trap-servers, omitempty"];
}

message EmailExport {
  // TODO:  format, config, SMTP config
  repeated string EmailList = 1 [(gogoproto.jsontag) = "email-list, omitempty"];
}

message AlertDestinationSpec {
  // export alerts matched by the selector
  fields.Selector Selector      = 1 [(gogoproto.nullable) = true,
                                     (gogoproto.jsontag) = "selector,omitempty"];

  // Email notification
  EmailExport EmailExport       = 2 [(gogoproto.nullable) = true,
                                     (gogoproto.jsontag) = "email-export, omitempty"];

  // SNMP trap destination(s)
  SNMPExport SNMPExport         = 3 [(gogoproto.nullable) = true,
                                     (gogoproto.jsontag) = "snmp-export, omitempty"];

  SyslogExport SyslogExport     = 4 [(gogoproto.nullable) = true,
                                     (gogoproto.jsontag) = "syslog-export, omitempty"];
}

message AlertDestinationStatus {
  // total number of notifications sent using this notification mechanism
  int32 totalNotificationsSent    = 1 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "total-notifications-sent, omitempty"];
}

// AlertDestination - tenant scoped
message AlertDestination {
  // KV store prefix
  option (venice.objectPrefix)   = {Collection: "alertDestinations", Path: "/{O.Tenant}"};

  api.TypeMeta      T            = 1 [(gogoproto.embed) = true,
                                      (gogoproto.nullable) = false,
                                      (gogoproto.jsontag) = ",inline"];

  api.ObjectMeta    O            = 2 [(gogoproto.embed) = true,
                                      (gogoproto.nullable) = false,
                                      (gogoproto.jsontag) = "meta, omitempty"];

  AlertDestinationSpec   Spec    = 3 [(gogoproto.nullable) = false,
                                      (gogoproto.jsontag) = "spec, omitempty"];

  AlertDestinationStatus Status  = 4 [(gogoproto.nullable) = false,
                                      (gogoproto.jsontag) = "status, omitempty"];
}
