// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package cluster;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

import "cluster.proto";

option (venice.filterImport) = "route.proto";
import "route.proto";

//------------------------------------ Distributed Service Card  -------------------------------------------
//
// DistributedServiceCard represents the Naples I/O subsystem
//
// Entity responsible & scenarios involved in managing this object:
//
//      Create:
//          o CMD
//              - created as part of NIC registration, Admittance
//      Modify:
//          o CMD
//              - update spec attributes
//              - update status attributes
//      Delete:
//          o CMD
//              - aging out stale or rejected NICs (TBD)
//          o NetOps, SecOps
//              - Decomission a NIC (TBD)
//
message DistributedServiceCard {

    option (venice.objectPrefix) = {Collection: "distributedservicecards"};

    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];

    //Object name is Serial-Number of the DistributedServiceCard
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // DistributedServiceCardSpec contains the configuration of the network adapter.
    DistributedServiceCardSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // DistributedServiceCardStatus contains the current state of the network adapter.
    DistributedServiceCardStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

// DistributedServiceCardSpec contains configuration of the DistributedServiceCard (Naples I/O subsystem)
message DistributedServiceCardSpec {

    // Admit allows a DistributedServiceCard to join the cluster
    bool Admit                      = 1 [(gogoproto.jsontag) = "admit,omitempty"];

    // ID is used as a user friendly identifier in logs/events
    string ID                 = 2 [(gogoproto.jsontag) = "id,omitempty"];

    // IPConfig defines the static IP configuration. If not specified, DHCP will be attempted
    IPConfig IPConfig               = 3 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // MgmtModes defines the valid management modes
    enum MgmtModes {
        // ui-hint: Host
        HOST    = 0; // Host manages DistributedServiceCard
        // ui-hint: Network
        NETWORK = 1; // Network controller manages DistributedServiceCard
    }

    // MgmtMode defines the management mode of the DistributedServiceCard
    string MgmtMode                 = 4 [(venice.check) = "StrEnum(DistributedServiceCardSpec.MgmtModes)",
                                        (gogoproto.jsontag) = "mgmt-mode,omitempty"];

    // NetworkModes - is only applicable if the MgmtMode is NETWORK
    enum NetworkModes {
        // ui-hint: Out of Band
        OOB     = 0;
        // ui-hint: Inband
        INBAND  = 1;
    }

    // MgmtMode defines the management mode of the DistributedServiceCard
    string NetworkMode              = 5 [(venice.check) = "StrEnum(DistributedServiceCardSpec.NetworkModes)",
                                        (gogoproto.jsontag) = "network-mode,omitempty"];


    // MgmtVlan defines the vlan to be used in network managed mode. The default of 0
    // means we use untagged-vlan for doing inband management
    uint32 MgmtVlan                 = 6 [(venice.check) = "IntRange(0,4095)",
                                        (gogoproto.jsontag) = "mgmt-vlan,omitempty"];

    // Controllers contains the list of remote controllers IP addresses or hostnames
    repeated string Controllers     = 7 [(gogoproto.jsontag) = "controllers,omitempty"];

    // RoutingConfig is the routing configuration for the underlay routed network that this DSC participates in.
    string RoutingConfig            = 8 [(gogoproto.jsontag) = "routing-config,omitempty", (venice.objRelation) = {Type: "NamedRef", To: "network/RoutingConfig"}];

    string DSCProfile               = 9 [(venice.objRelation) = {Type: "NamedRef", To: "cluster/DSCProfile"}, (gogoproto.jsontag) = "dscprofile, omitempty"];
}

// IPConfig defines the static IP configuration for a DistributedServiceCard
message IPConfig {
    // IPAddress contains the Management IP address of the DistributedServiceCard in CIDR format
    string IPAddress            = 1 [(gogoproto.jsontag) = "ip-address,omitempty", (venice.check) = "EmptyOr(CIDR())"];

    // DefaultGW contains the default gateway's IP address
    string DefaultGW            = 2 [(gogoproto.jsontag) = "default-gw,omitempty", (venice.check) = "EmptyOr(IPAddr())"];

    // DNSServers contains a list of DNS Servers that can be used on DistributedServiceCard
    repeated string DNSServers  = 3 [(gogoproto.jsontag) = "dns-servers,omitempty"];
}

// DistributedServiceCardStatus contains current status of a DistributedServiceCard
message DistributedServiceCardStatus {

    // Various phases in lifecycle of a DistributedServiceCard
    enum Phase {
        // ui-hint: Unknown
        UNKNOWN        = 0; // Unknown status, initial state.
        // ui-hint: Registering
        REGISTERING    = 1; // NIC registration is in progress, set when Naples initiated registration
        // ui-hint: Rejected
        REJECTED       = 2; // NIC is rejected, due to invalid credentials or misconfiguration
        // ui-hint: Pending
        PENDING        = 3; // NIC is validated but waiting for manual approval
        // ui-hint: Admitted
        ADMITTED       = 4; // NIC is validated and admitted
        // ui-hint: Decommissioned
        DECOMMISSIONED = 5; // NIC has been removed from the cluster
   }
    
    // Current admission phase of the DistributedServiceCard.
    // When auto-admission is enabled, AdmissionPhase will be set to NIC_ADMITTED
    // by CMD for validated NICs.
    // When auto-admission is not enabled, AdmissionPhase will be set to NIC_PENDING
    // by CMD for validated NICs since it requires manual approval.
    // To admit the NIC as a part of manual admission, user is expected to
    // set Spec.Admit to true for the NICs that are in NIC_PENDING
    // state. Note : Whitelist mode is not supported yet.
    string AdmissionPhase                   = 1 [(venice.check) = "StrEnum(DistributedServiceCardStatus.Phase)",
                                                (gogoproto.jsontag) = "admission-phase,omitempty"];
    
    // List of current NIC conditions
    repeated DSCCondition Conditions   = 2 [(gogoproto.nullable) = false,
                                                (gogoproto.jsontag) = "conditions,omitempty"];

    // Serial number
    string SerialNum                        = 3 [(gogoproto.jsontag) = "serial-num,omitempty"];

    // PrimaryMAC is the MAC address of the primary PF exposed by DistributedServiceCard
    string PrimaryMAC                       = 4 [(gogoproto.jsontag) = "primary-mac,omitempty", (venice.check) = "EmptyOr(MacAddr())"];

    // IPConfig is the ip address related configuration obtained from DHCP
    IPConfig IPConfig                       = 5 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // Distributed service card system info
    DSCInfo SystemInfo                 = 6 [(gogoproto.jsontag) = "system-info,omitempty"];

    // Network Interfaces
    repeated string Interfaces              = 7 [(gogoproto.jsontag) = "interfaces,omitempty"];

    // DSC Version 
    string DSCVersion                  = 8 [(gogoproto.jsontag) = "DSCVersion,omitempty"];

    // DSC SKU
    string DSCSku                      = 9 [(gogoproto.jsontag) = "DSCSku,omitempty"];

    // The name of the host this DistributedServiceCard is plugged into
    string Host                             = 10 [(gogoproto.jsontag) = "host,omitempty"];

    // The reason why the DistributedServiceCard is not in ADMITTED state
    string AdmissionPhaseReason             = 11 [(gogoproto.jsontag) = "adm-phase-reason,omitempty"];

    // Set to true if venice and dsc versions are incompatible
    bool VersionMismatch             = 12 [(gogoproto.jsontag) = "version-mismatch,omitempty"];
}

// DSCCondition describes the state of a DistributedServiceCard at a certain point.
message DSCCondition {

    // These are valid conditions of a DistributedServiceCard
    enum ConditionType {
        // ui-hint: Healthy
        HEALTHY             = 0; // NIC is healthy
        // ui-hint: Not Reachable
        NIC_HEALTH_UNKNOWN  = 1; // NIC is not reachable from Venice cluster
	// ui-hint: Reboot needed
	REBOOT_NEEDED = 2; // NIC requires reboot, either because of disruptive firmware upgrade or mode change
    }

    // Type indicates a certain NIC condition
    string Type                     = 1 [(venice.check) = "StrEnum(DSCCondition.ConditionType)",
                                        (gogoproto.jsontag) = "type,omitempty"];

    // Condition Status
    string Status                   = 2 [(venice.check) = "StrEnum(ConditionStatus)",
                                        (gogoproto.jsontag) = "status,omitempty"];

    // The last time the condition transitioned
    string LastTransitionTime       = 3 [(gogoproto.jsontag) = "last-transition-time,omitempty"];

    // The reason for the condition's last transition
    string Reason                   = 4 [(gogoproto.jsontag) = "reason,omitempty"];

    // A detailed message indicating details about the transition.
    string Message                  = 5 [(gogoproto.jsontag) = "message,omitempty"];
}

// MAC address Range
message MacRange {
    string Start    = 1 [(venice.check) = "EmptyOr(MacAddr())",
                        (gogoproto.jsontag) = "mac-start,omitempty"];
    string End      = 2 [(venice.check) = "EmptyOr(MacAddr())",
                        (gogoproto.jsontag) = "mac-end,omitempty"];
}

// Distributed service card (DSC) subsystem information
message DSCInfo {

    // BIOS details
    BiosInfo BiosInfo       = 1 [(gogoproto.jsontag) = "bios-info,omitempty"];

    // OS details
    OsInfo OsInfo           = 2 [(gogoproto.jsontag) = "os-info,omitempty"];

    // CPU details
    CPUInfo CpuInfo         = 3 [(gogoproto.jsontag) = "cpu-info,omitempty"];

    // RAM/Memory details
    MemInfo MemoryInfo      = 4 [(gogoproto.jsontag) = "memory-info,omitempty"];

    // Storage details
    StorageInfo StorageInfo = 5 [(gogoproto.jsontag) = "storage-info,omitempty"];

    // TODO : Add Board Info specifics
    // (version, other peripherals, PCIe version, #lanes, 
    // Maximum HBM memory - not the one just available to the OS)
}

// BIOS information
message BiosInfo {

    // Vendor name
    string Vendor           = 1 [(gogoproto.jsontag) = "vendor,omitempty"];

    // BIOS version
    string Version          = 2 [(gogoproto.jsontag) = "version,omitempty"];

    // Firmware major release info
    string FwMajorVersion   = 3 [(gogoproto.jsontag) = "fw-major-ver,omitempty"];

    // Firmware minor release info
    string FwMinorVersion   = 4 [(gogoproto.jsontag) = "fw-minor-ver,omitempty"];
}
