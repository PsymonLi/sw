// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Search API to search configuration policies, events etc.
package search;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";

import "search.proto";

// fileGrpcDest is the gRPC destination for this service
option (venice.fileGrpcDest) = "pen-spyglass";
option (venice.fileCategory) = "search";

// fileApiServerBacked should be set to false to indicate that the set of services defined in this
// file are not backed by the API server.
option (venice.fileApiServerBacked) = false;

// Search service API
service SearchV1 {
    option (venice.apiPrefix) = "";

    // API Version.
    option (venice.apiVersion) = "v1";

    // In the example below a query like
    //    http://<...>/venice/v1/search/query?QueryString=XXXXX&MaxResults=100
    //  generates a RPC call Query with the parameter as
    //  SearchRequest{ QueryString: "XXXXX", MaxResults:100}
    rpc Query (SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            post: "/query"
            body: "*"
            additional_bindings {
                get: "/query"
            }
		};
    }

    // Security Policy Query
    rpc PolicyQuery (PolicySearchRequest) returns (PolicySearchResponse) {
        option (google.api.http) = {
            // TBD: Decide whether we should have Tenant in URI path
            post: "/policy-query"
            body: "*"
            additional_bindings {
                // TBD: Decide whether we should have Tenant URI path
                get: "/policy-query"
            }
        };
    }
}
