// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package network;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

import "vrf.proto";
import "smartnic.proto";

// NetworkInterface represents a VF, PF or an Uplink within an I/O subsystem
// Each NetworkInterface is uniquely prepended by I/O subsystem to provide unique name
// Create/Delete: by the system as VFs, PFs and Uplinks are detected by the system
// Update: by user to change the admin status (shut/no-shut)
// List: by user to look at the operational status

message NetworkInterface {

    option (venice.objectPrefix) = {Collection: "networkinterfaces"};

    api.TypeMeta T          = 1 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = ",inline"];

    //Object name is Serial-Number of the DSC
    api.ObjectMeta O        = 2 [(gogoproto.embed) = true,
                                (gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "meta,omitempty"];

    // NetworkInterfaceSpec contains the configuration of the network adapter.
    NetworkInterfaceSpec Spec       = 3 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "spec,omitempty"];

    // NetworkInterfaceStatus contains the current state of the network adapter.
    NetworkInterfaceStatus Status   = 4 [(gogoproto.nullable) = false,
                                (gogoproto.jsontag) = "status,omitempty"];
}

enum IFStatus {
    UP                = 0;
    DOWN              = 1;
}

// PortSpeed specifies the speed of the port
/*enum PortSpeed {
    AUTO  = 0;     // port speed set to auto
    25G   = 1;     // port speed is 25Gbps
    40G   = 2;     // port speed is 40Gbps
    50G   = 3;     // port speed is 50Gbps
    100G  = 4;     // port speed is 100Gbps
}*/

enum PauseType {
    DISABLE    = 0;   // Disable Pause
    LINK       = 1;   // Link level pause
    PRIORITY   = 2;   // PFC
}

message PauseSpec {
    //Pause type
    string Type               = 1 [(venice.check) = "StrEnum(PauseType)",(gogoproto.jsontag) = "type,omitempty"];

    // TX Pause enabled    
    bool  TxPauseEnabled     = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tx-pause-enabled,omitempty"];

    // RX Pause enabled    
    bool  RxPauseEnabled     = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "rx-pause-enabled,omitempty"];

}

enum IFType {
    NONE              = 0;
    HOST_PF           = 1 [(venice.enumValueStr) = "host-pf"];
    UPLINK_ETH        = 3 [(venice.enumValueStr) = "uplink-eth"];
    UPLINK_MGMT       = 4 [(venice.enumValueStr) = "uplink-mgmt"];
    LOOPBACK_TEP      = 5 [(venice.enumValueStr) = "loopback-tep"];
}

enum IPAllocTypes {
    None    = 0;
    Static  = 1;
    DHCP    = 2;
}

// NetworkInterfaceSpec
message NetworkInterfaceSpec {
    //desired Admin state of the port
    string AdminStatus         = 1 [(venice.check) = "StrEnum(IFStatus)",
                                    (gogoproto.jsontag) = "admin-status,omitempty"];

    //Intefaae speed
    string Speed                = 2 [(gogoproto.jsontag) = "speed,omitempty"];

    //Mtu of the interface
    uint32 MTU                  = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "mtu,omitempty"];

    //Pause Spec
    PauseSpec Pause             = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "pause,omitempty"];

    // Type specifies the type of interface
    string Type             = 5 [(venice.check) = "StrEnum(IFType)",
                                (gogoproto.jsontag) = "type,omitempty"];

    string AttachTenant     = 6 [(gogoproto.jsontag) = "attach-tenant,omitempty"];

    // AttachNetwork associates the interface with a Network. This is only valid for HOST_PF type.
    string AttachNetwork    = 7 [(venice.objRelation) = {Type: "NamedRef", To: "network/Network", UseTenant: "AttachTenant"},
                                (gogoproto.jsontag) = "attach-network,omitempty"];

    string IPAllocType      = 8 [(venice.check) = "StrEnum(IPAllocTypes)",
                            (gogoproto.jsontag) = "ip-alloc-type,omitempty"];

    // Interface IP Configuration if any.
    cluster.IPConfig IPConfig       = 9 [(gogoproto.jsontag) = "ip-config,omitempty"];

    // Override system allocated MAC address
    string MACAddress       = 10 [(venice.check) = "EmptyOr(MacAddr())", (gogoproto.jsontag) = "mac-address,omitempty"];

    // Future: Breakout Config, CDP, LLDP, LACP, configuration would come here
    // Future: A lot of above configuration would be driven by profile when available
}

// NetworkInterfaceStatus
message NetworkInterfaceStatus {
    enum IFType {
        NONE              = 0;
        HOST_PF           = 1 [(venice.enumValueStr) = "host-pf"];
        UPLINK_ETH        = 3 [(venice.enumValueStr) = "uplink-eth"];
        UPLINK_MGMT       = 4 [(venice.enumValueStr) = "uplink-mgmt"];
        LOOPBACK_TEP      = 5 [(venice.enumValueStr) = "loopback-tep"];
        // TB Added for SR-IOV: HOST_VF
    }

    string Name                                 = 1 [(gogoproto.jsontag) = "name,omitempty"];
    string DSC                                  = 2 [(gogoproto.jsontag) = "dsc,omitempty"];
    string Type                                 = 3 [(venice.check) = "StrEnum(NetworkInterfaceStatus.IFType)",
                                                   (gogoproto.jsontag) = "type,omitempty"];
    string OperStatus                           = 4 [(venice.check) = "StrEnum(IFStatus)",
                                                   (gogoproto.jsontag) = "oper-status,omitempty"];
    string PrimaryMac                           = 5 [(venice.check) = "EmptyOr(MacAddr())",
                                                   (gogoproto.jsontag) = "primary-mac,omitempty"];
    NetworkInterfaceHostStatus IFHostStatus     = 6 [(gogoproto.jsontag) = "if-host-status,omitempty"]; 
    NetworkInterfaceUplinkStatus IFUplinkStatus = 7 [(gogoproto.jsontag) = "if-uplink-status,omitempty"];

    repeated string MirroSessions               = 8 [(gogoproto.jsontag) = "mirror-sessions"];
    
    // Set only if interface is on Venice Node.
    string ClusterNode                          = 9 [(gogoproto.jsontag) = "cluster-node,omitempty"];
    string DSCID                                = 10 [(gogoproto.jsontag) = "dsc-id,omitempty"];
}

// NetworkInterfaceHostStatus is populated for PF and VF
message NetworkInterfaceHostStatus {
    // interface name seen by the host driver.
    string HostIfName   = 1 [(gogoproto.jsontag) = "host-ifname,omitempty"];

    // PCIE Device ID.
    string DeviceID     = 2 [(gogoproto.jsontag) = "device-id,omitempty"];

    // mac address of the interface.
    string MACAddress   = 3 [(gogoproto.jsontag) = "mac-address,omitempty"]; 
}


message TransceiverStatus {

    enum State {
        STATE_NA             = 0;
        STATE_REMOVED        = 1;
        STATE_INSERTED       = 2;
        STATE_PENDING        = 3;
        STATE_SPROM_READ     = 4;
        STATE_SPROM_READ_ERR = 5;
    }

    enum CableType {
        NONE   = 0;
        COPPER = 1;
        FIBER  = 2;
    }

    enum Pid {
       UNKNOWN           = 0;
       // CU
       QSFP_100G_CR4     = 1;
       QSFP_40GBASE_CR4  = 2;
       SFP_25GBASE_CR_S  = 3;
       SFP_25GBASE_CR_L  = 4;
       SFP_25GBASE_CR_N  = 5;
      
        // Fiber, grouping all together
       QSFP_100G_AOC    = 50;
       QSFP_100G_ACC    = 51;
       QSFP_100G_SR4    = 52;
       QSFP_100G_LR4    = 53;
       QSFP_100G_ER4    = 54;
       QSFP_40GBASE_ER4 = 55;
       QSFP_40GBASE_SR4 = 56;
       QSFP_40GBASE_LR4 = 57;
       QSFP_40GBASE_AOC = 58;
       SFP_25GBASE_SR   = 59;
       SFP_25GBASE_LR   = 60;
       SFP_25GBASE_ER   = 61;
       SFP_25GBASE_AOC  = 62;
       SFP_10GBASE_SR   = 63;
       SFP_10GBASE_LR   = 64;
       SFP_10GBASE_LRM  = 65;
       SFP_10GBASE_ER   = 66;
       SFP_10GBASE_AOC  = 67;
       SFP_10GBASE_CU   = 68;
       QSFP_100G_CWDM4  = 69;
       QSFP_100G_PSM4   = 70;


       PID_NA           = 1000; //For host intefaces
    }

    string TransceiverState     = 1 [(venice.check) = "StrEnum(TransceiverStatus.State)",
                            (gogoproto.jsontag) = "state,omitempty"];

    string TranceiverCableType  = 2 [(venice.check) = "StrEnum(TransceiverStatus.CableType)",
                            (gogoproto.jsontag) = "cable-type,omitempty"];

    string TranceiverPid        = 3 [(venice.check) = "StrEnum(TransceiverStatus.Pid)",
                            (gogoproto.jsontag) = "pid,omitempty"];

}


message NetworkInterfaceUplinkStatus {

    // LinkSpeed auto-negotiated
    string LinkSpeed                    = 1 [(gogoproto.jsontag) = "link-speed,omitempty"];

    TransceiverStatus TransceiverStatus = 2 [(gogoproto.jsontag) = "transceiver-status,omitempty"];

    // Future: BFD, CDP, LLDP, LACP, Breakout status appears here

    // Interface IP Configuration if any.
    cluster.IPConfig IPConfig           = 3 [(gogoproto.jsontag) = "ip-config,omitempty"];
}
