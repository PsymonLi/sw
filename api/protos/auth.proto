// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package auth;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- User Object -----------------------------------------------

// spec part of user object
message UserSpec {
    //User could be local or external like in LDAP
    enum UserType {
        // ui-hint: Local
        Local    = 0; //User managed locally
        // ui-hint: External
        External = 1; //User external to Venice like in LDAP, SAML
    }

    string Fullname = 1 [(gogoproto.jsontag) = "fullname,omitempty"];
    string Email    = 2 [(gogoproto.jsontag) = "email,omitempty"];
    string Password = 3 [(venice.storageTransformer) = "Secret()", (gogoproto.jsontag) = "password,omitempty"];
    string Type     = 4 [(venice.check) = "StrEnum(UserSpec.UserType)", (gogoproto.jsontag) = "type,omitempty"];
}

// status part of user object
message UserStatus {
    // Roles assigned to user
    repeated string Roles             = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "roles,omitempty"];
    // Groups that external user belongs to
    repeated string UserGroups        = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user-groups,omitempty"];
    // Last successful login time
    api.Timestamp LastSuccessfulLogin = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "last-successful-login,omitempty"];
    // Authenticators used for last successful login
    repeated string Authenticators    = 4 [(venice.check) = "StrEnum(Authenticators.AuthenticatorType)", (gogoproto.jsontag) = "authenticators,omitempty"];
}

// User could be local or external
message User {
    option (venice.objectPrefix) = { Collection: "users", Path: "/{O.Tenant}"};
    api.TypeMeta T    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the user.
    UserSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role binding.
    UserStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// ----------------------------- Authentication Policy Object ------------------------------

// spec part of authentication policy object
message AuthenticationPolicySpec {
    Authenticators Authenticators = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "authenticators,omitempty"];
    // Secret used to sign JWT token
    bytes Secret                  = 2 [(venice.storageTransformer) = "Secret()", (gogoproto.jsontag) = "secret,omitempty"];
}

message Authenticators {
    enum AuthenticatorType {
        LOCAL  = 0; // ui-hint: Local
        LDAP   = 1;
        RADIUS = 2;
    }

    // Order in which authenticators are applied. If an authenticator returns success, others are skipped
    repeated string AuthenticatorOrder = 1 [(gogoproto.nullable) = true, (venice.check) = "StrEnum(Authenticators.AuthenticatorType)", (gogoproto.jsontag) = "authenticator-order,omitempty"];
    Ldap Ldap                          = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ldap,omitempty"];
    Local Local                        = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "local,omitempty"];
    Radius Radius                      = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "radius,omitempty"];
}

message Ldap {
    bool Enabled                          = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
    string BaseDN                         = 2 [(gogoproto.jsontag) = "base-dn,omitempty"];
    string BindDN                         = 3 [(gogoproto.jsontag) = "bind-dn,omitempty"];
    string BindPassword                   = 4 [(gogoproto.jsontag) = "bind-password,omitempty"];
    LdapAttributeMapping AttributeMapping = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attribute-mapping,omitempty"];

    // Servers is a list that lets you configure multiple LDAP servers for high availability
    repeated LdapServer Servers           = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "servers,omitempty"];
}

message LdapServer {
    string Url                            = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "url,omitempty"];
    TLSOptions TLSOptions                 = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tls-options,omitempty"];
}

message TLSOptions {
    // StartTLS determines if ldap connection uses TLS
    bool StartTLS                   = 1 [(gogoproto.jsontag) = "start-tls,omitempty"];

    // SkipServerCertVerification controls whether a client verifies the server's certificate chain and host name.
    // If SkipServerCertVerification is true, TLS accepts any certificate presented by the server and any host name in that certificate.
    // In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.
    bool SkipServerCertVerification = 2 [(gogoproto.jsontag) = "skip-server-cert-verification,omitempty"];

    // ServerName is used to verify the hostname on the returned certificates unless SkipServerCertVerification is true.
    string ServerName               = 3 [(gogoproto.jsontag) = "server-name,omitempty"];

    // TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates.
    string TrustedCerts             = 4 [(gogoproto.jsontag) = "trusted-certs,omitempty"];
}

message LdapAttributeMapping {
    string User             = 1 [(gogoproto.jsontag) = "user,omitempty"];

    // UserObjectClass is the STRUCTURAL object class for user entry in LDAP. It is used as a filter for user search
    string UserObjectClass  = 2 [(gogoproto.jsontag) = "user-object-class,omitempty"];

    string Tenant           = 3 [(gogoproto.jsontag) = "tenant,omitempty"];
    string Group            = 4 [(gogoproto.jsontag) = "group,omitempty"];

    // GroupObjectClass is the STRUCTURAL object class for group entry in LDAP. It is used as a filter for group search
    string GroupObjectClass = 5 [(gogoproto.jsontag) = "group-object-class,omitempty"];

    string Email            = 6 [(gogoproto.jsontag) = "email,omitempty"];
    string Fullname         = 7 [(gogoproto.jsontag) = "fullname,omitempty"];
}

message LdapServerStatus {
    enum LdapResult {
        Connect_Success = 0;
        Connect_Failure = 1;
        Bind_Success    = 2;
        Bind_Failure    = 3;
    }
    // Result indicates if ldap check was successful
    string Result     = 1 [(venice.check) = "StrEnum(LdapServerStatus.LdapResult)", (gogoproto.jsontag) = "result,omitempty"];
    // Message contains error message in case of failed check or a success message
    string Message    = 2 [(gogoproto.jsontag) = "message,inline"];
    // LdapServer contains the ldap server configuration that was checked
    LdapServer Server = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "server,omitempty"];
}

message Local {
    bool Enabled = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
}

message Radius {
    // RadiusAuthMethod describes how the communication between API Gw and RADIUS server is secured. These auth methods are not for end user
    // authentication. Currently only PAP is supported.
    enum AuthMethod {
        // PAP is password auth protocol with only password attribute encrypted
        PAP           = 0;
        // PEAP_MSCHAPv2 sends user credentials using TLS tunnel
        PEAP_MSCHAPv2 = 1;
        // EAP_TTLS sends user credentials using TLS tunnel
        EAP_TTLS_PAP  = 2;
    }
    bool Enabled                  = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
    // NasID is a string identifying the NAS(API Gw) originating the Access-Request
    string NasID                  = 2 [(gogoproto.jsontag) = "nas-id,omitempty"];
    repeated RadiusServer Servers = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "servers,omitempty"];
}

message RadiusServer {
    // <IP address>:<Port> of the RADIUS server
    string Url          = 1 [(gogoproto.jsontag) = "url,omitempty"];
    // Secret is the shared secret between API Gw and RADIUS server
    string Secret       = 2 [(gogoproto.jsontag) = "secret,omitempty"];
    // AuthMethod is authentication method to use with the RADIUS server
    string AuthMethod   = 3 [(venice.check) = "StrEnum(Radius.AuthMethod)", (gogoproto.jsontag) = "auth-method,omitempty"];
    // TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates. It is
    // used in PEAP and EAP_TTLS auth methods
    string TrustedCerts = 4 [(gogoproto.jsontag) = "trusted-certs,omitempty"];
}

message RadiusServerStatus {
    enum RadiusResult {
        Connect_Success = 0;
        Connect_Failure = 1;
    }
    // Result indicates if radius check was successful
    string Result       = 1 [(venice.check) = "StrEnum(RadiusServerStatus.RadiusResult)", (gogoproto.jsontag) = "result,omitempty"];
    // Message contains error message in case of failed check or a success message
    string Message      = 2 [(gogoproto.jsontag) = "message,inline"];
    // RadiusServer contains the radius server configuration that was checked
    RadiusServer Server = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "server,omitempty"];
}

// status part of authentication policy object
message AuthenticationPolicyStatus {
    repeated LdapServerStatus LdapServers     = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ldap-servers,omitempty"];
    repeated RadiusServerStatus RadiusServers = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "radius-servers,omitempty"];
}

// AuthenticationPolicy defines various authentication mechanisms available and order in which they are used
message AuthenticationPolicy {
    option (venice.objectPrefix) = { Singleton: "authn-policy" };
    api.TypeMeta T                    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O                  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains configuration of authentication mechanisms.
    AuthenticationPolicySpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the authentication policy.
    AuthenticationPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// ----------------------------- Role Object -----------------------------------------------

// Permission defines if actions are allowed on resource group, resource type, resource name or arbitrary API endpoints.
message Permission {
    // ResourceKind is a resource kind for which permission is defined
    enum ResrcKind {
        // Arbitrary API endpoint as a resource
        APIEndpoint      = 0; // ui-hint: API Endpoint
        // Search
        Search           = 1; // ui-hint: Search
        // Events
        Event            = 2; // ui-hint: Events
        // Metrics
        MetricsQuery     = 3; // ui-hint: MetricsQuery
    }

    // ActionType is an action on a resource that a permission allows
    enum ActionType {
        // Reserved keyword to imply all action types
        AllActions = 0; // ui-hint: All Actions
        Create     = 1; // ui-hint: Create
        Read       = 2; // ui-hint: Read
        Update     = 3; // ui-hint: Update
        Delete     = 4; // ui-hint: Delete
        // Commit action on staging buffer
        Commit     = 5; // ui-hint: Commit Config
        // Clear action on staging buffer
        Clear      = 6; // ui-hint: Clear Config
    }

    // ResourceTenant is the tenant to which resource belongs. For tenant scoped roles it will be automatically set to the tenant
    // to which role object belongs. Exception are roles in "default" tenant. Role in "default" tenant can include permissions for resources in other tenants.
    // Specifying "_All_" will match all tenants.
    string ResourceTenant         = 1 [(venice.default) = "default", (gogoproto.jsontag) = "resource-tenant,omitempty"];

    // ResourceGroup is grouping of resource types for which a permission is defined. It is empty for Search, Event, MetricsQuery and non-api server endpoint.
    // Specifying "_All_" will match all api groups including empty group for non-api server endpoints like those defined in ResrcKind enum.
    string ResourceGroup          = 2 [(gogoproto.jsontag) = "resource-group,omitempty"];

    // ResourceKind is a resource kind for which permission is defined. It can be an API Server object kind or kinds defined in
    // ResrcKind enum. Specifying "_All_" will match all resource kinds.
    string ResourceKind           = 3 [(gogoproto.jsontag) = "resource-kind,omitempty"];

    // ResourceNamespace is a namespace to which a resource (API Server object) belongs. Default value is "default". Specifying "_All_"
    // will match all namespaces.
    string ResourceNamespace      = 4 [(venice.default) = "default", (gogoproto.jsontag) = "resource-namespace,omitempty"];

    // ResourceNames identify specific objects on which this permission applies. If resource name is not specified in permission then
    // it implies all resources of the specified kind
    repeated string ResourceNames = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "resource-names,omitempty"];

    // Actions are actions on a resource that a permission allows
    repeated string Actions       = 6 [(gogoproto.nullable) = true, (venice.check) = "StrEnum(Permission.ActionType)", (gogoproto.jsontag) = "actions,omitempty"];
}

// spec part of role object
message RoleSpec {
    // Permissions define actions allowed on resources. A resource can be an API Server object or an arbitrary API endpoint
    repeated Permission Permissions = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "permissions,omitempty"];
}

// status part of role object
message RoleStatus {
}

// Role is a collection of permissions
message Role {
    option (venice.objectPrefix) = { Collection: "roles", Path: "/{O.Tenant}"};
    api.TypeMeta T    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the role.
    RoleSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role.
    RoleStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// ----------------------------- RoleBinding Object -----------------------------

// spec part of role binding object
message RoleBindingSpec {
    repeated string Users      = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "users,omitempty"];
    repeated string UserGroups = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user-groups,omitempty"];
    string Role                = 3 [(gogoproto.jsontag) = "role,omitempty"];
}

// status part of role binding object
message RoleBindingStatus {
}

// RoleBinding is an assignment of a role to users or groups
message RoleBinding {
    option (venice.objectPrefix) = { Collection: "role-bindings", Path: "/{O.Tenant}"};
    api.TypeMeta T           = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O         = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the role binding.
    RoleBindingSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role binding.
    RoleBindingStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// PasswordCredential is user credential to login to Venice. It consists of username, password and tenant.
message PasswordCredential {
    string Username = 1 [(gogoproto.jsontag) = "username,omitempty"];
    string Password = 2 [(gogoproto.jsontag) = "password,omitempty"];
    string Tenant   = 3 [(gogoproto.jsontag) = "tenant,omitempty"];
}

// PasswordChangeRequest is for user to change his password
message PasswordChangeRequest {
    api.TypeMeta T     = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O   = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    string OldPassword = 3 [(gogoproto.jsontag) = "old-password,omitempty"];

    string NewPassword = 4 [(gogoproto.jsontag) = "new-password,omitempty"];

    option (venice.objectPrefix) = {Collection: "users", Path: "/{O.Tenant}"};
}

// PasswordResetRequest is for user to reset password
message PasswordResetRequest {
    api.TypeMeta T   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    option (venice.objectPrefix) = {Collection: "users", Path: "/{O.Tenant}"};
}