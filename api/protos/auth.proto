// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package auth;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ----------------------------- User Object -----------------------------

// spec part of user object
message UserSpec {
    //User could be local or external like in LDAP
    enum UserType {
        LOCAL    = 0; //User managed locally
        EXTERNAL = 1; //User external to Venice like in LDAP, SAML
    }

    string Fullname = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "fullname,omitempty"];
    string Email    = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "email,omitempty"];
    string Password = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "password,omitempty"];
    string Type     = 4 [(gogoproto.nullable) = true, (venice.check) = "StrEnum(UserSpec.UserType)", (gogoproto.jsontag) = "type,omitempty"];
}

// status part of user object
message UserStatus {
    repeated string Roles             = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "roles,omitempty"];
    repeated string UserGroups        = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user-groups,omitempty"];
    api.Timestamp LastSuccessfulLogin = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "last-successful-login,omitempty"];
}

// User could be local or external
message User {
    option (venice.objectPrefix) = { Collection: "users", Path: "/{O.Tenant}"};
    api.TypeMeta T    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the user.
    UserSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role binding.
    UserStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// ----------------------------- Authentication Policy Object -----------------------------

// spec part of authentication policy object
message AuthenticationPolicySpec {
    Authenticators Authenticators = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "authenticators,omitempty"];
    // Secret used to sign JWT token
    bytes Secret                  = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "secret,omitempty"];
}

message Authenticators {
    enum AuthenticatorType {
        LOCAL  = 0;
        LDAP   = 1;
        RADIUS = 2;
    }

    Ldap Ldap                          = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ldap,omitempty"];
    Local Local                        = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "local,omitempty"];
    Radius Radius                      = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "radius,omitempty"];

    //Order in which authenticators are applied. If an authenticator returns success, others are skipped
    repeated string AuthenticatorOrder = 9 [(gogoproto.nullable) = true, (venice.check) = "StrEnum(Authenticators.AuthenticatorType)", (gogoproto.jsontag) = "authenticator-order,omitempty"];
}

message Ldap {
    bool Enabled                          = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
    string Url                            = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "url,omitempty"];
    TLSOptions TLSOptions                 = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tls-options,omitempty"];
    string BaseDN                         = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "base-dn,omitempty"];
    string BindDN                         = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "bind-dn,omitempty"];
    string BindPassword                   = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "bind-password,omitempty"];
    LdapAttributeMapping AttributeMapping = 7 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attribute-mapping,omitempty"];
}

message TLSOptions {
    // StartTLS determines if ldap connection uses TLS
    bool StartTLS                   = 1 [(gogoproto.jsontag) = "start-tls,omitempty"];

    // SkipServerCertVerification controls whether a client verifies the server's certificate chain and host name.
    // If SkipServerCertVerification is true, TLS accepts any certificate presented by the server and any host name in that certificate.
    // In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.
    bool SkipServerCertVerification = 2 [(gogoproto.jsontag) = "skip-server-cert-verification,omitempty"];

    // ServerName is used to verify the hostname on the returned certificates unless SkipServerCertVerification is true.
    string ServerName               = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "server-name,omitempty"];

    // TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates.
    string TrustedCerts             = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "trusted-certs,omitempty"];
}

message LdapAttributeMapping {
    string User             = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user,omitempty"];

    // UserObjectClass is the STRUCTURAL object class for user entry in LDAP. It is used as a filter for user search
    string UserObjectClass  = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user-object-class,omitempty"];

    string Tenant           = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "tenant,omitempty"];
    string Group            = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "group,omitempty"];

    // GroupObjectClass is the STRUCTURAL object class for group entry in LDAP. It is used as a filter for group search
    string GroupObjectClass = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "group-object-class,omitempty"];

    string Email            = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "email,omitempty"];
    string Fullname         = 7 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "fullname,omitempty"];
}

message Local {
    bool Enabled = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
}

message Radius {
    bool Enabled  = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
    string Ip     = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "ip,omitempty"];
    string Port   = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "port,omitempty"];
    string NasIp  = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "nas-ip,omitempty"];
    string Secret = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "secret,omitempty"];
}

// status part of authentication policy object
message AuthenticationPolicyStatus {
}

// AuthenticationPolicy defines various authentication mechanisms available and order in which they are used
message AuthenticationPolicy {
    option (venice.objectPrefix) = { Collection: "authn-policy" };
    api.TypeMeta T                    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O                  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains configuration of authentication mechanisms.
    AuthenticationPolicySpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the authentication policy.
    AuthenticationPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// ----------------------------- Role Object -----------------------------

// Permission defines if actions are allowed on resource group, resource type, resource name or arbitrary API endpoints.
message Permission {
    // ResourceKind is a resource kind for which permission is defined
    enum ResrcKind {
        // Reserved keyword to imply all resources
        ALL_RESOURCE_KINDS = 0;

        // Cluster wide resources
        TENANT             = 1;
        CLUSTER            = 2;
        NODE               = 3;
        SMARTNIC           = 4;
        CERTIFICATE        = 5;

        // Network related resources
        NETWORK            = 6;
        SERVICE            = 7;
        LBPOLICY           = 8;

        // Workload
        ENDPOINT           = 9;

        // Security related resources
        SECURITYGROUP      = 10;
        SGPOLICY           = 11;
        APP                = 12;
        ENCRYPTIONPOLICY   = 13;

        // Monitoring related resources
        ALERT              = 14;
        ALERTPOLICY        = 15;
        ALERTDESTINATION   = 16;
        EVENTPOLICY        = 17;
        STATSPOLICY        = 18;
        FWLOGPOLICY        = 19;
        FLOWEXPORTPOLICY   = 20;

        // User management related resources
        USER               = 21;
        AUTHPOLICY         = 22;
        ROLE               = 23;
        ROLEBINDING        = 24;

        // Arbitrary API endpoint as a resource
        APIENDPOINT        = 25;
    }

    // ActionType is an action on a resource that a permission allows
    enum ActionType {
        // Reserved keyword to imply all action types
        ALL_ACTIONS = 0;
        CREATE      = 1;
        READ        = 2;
        UPDATE      = 3;
        DELETE      = 4;
        // Commit action on staging buffer
        COMMIT      = 5;
    }

    // ResourceTenant is the tenant to which resource belongs. For tenant scoped roles it will be automatically set to the tenant
    // to which role object belongs. For cluster roles, if specified will give permission for resource belonging to that tenant.
    string ResourceTenant         = 1 [(gogoproto.jsontag) = "resource-tenant,omitempty"];

    // ResourceGroup is grouping of resource types for which a permission is defined
    string ResourceGroup          = 2 [(gogoproto.jsontag) = "resource-group,omitempty"];

    // ResourceKind is a resource kind for which permission is defined. It can be an API Server object or an arbitrary API endpoint
    string ResourceKind           = 3 [(venice.check) = "StrEnum(Permission.ResrcKind)", (gogoproto.jsontag) = "resource-kind,omitempty"];

    // ResourceNamespace is a namespace to which a resource (API Server object) belongs
    string ResourceNamespace      = 4 [(gogoproto.jsontag) = "resource-namespace,omitempty"];

    // ResourceNames identify specific objects on which this permission applies.
    repeated string ResourceNames = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "resource-names,omitempty"];

    // Actions are actions on a resource that a permission allows
    repeated string Actions       = 6 [(gogoproto.nullable) = true, (venice.check) = "StrEnum(Permission.ActionType)", (gogoproto.jsontag) = "actions,omitempty"];
}

// spec part of role object
message RoleSpec {
    // Permissions define actions allowed on resources. A resource can be an API Server object or an arbitrary API endpoint
    repeated Permission Permissions = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "permissions,omitempty"];
}

// status part of role object
message RoleStatus {
}

// Role is a collection of permissions
message Role {
    option (venice.objectPrefix) = { Collection: "roles", Path: "/{O.Tenant}"};
    api.TypeMeta T    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the role.
    RoleSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role.
    RoleStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// ----------------------------- RoleBinding Object -----------------------------

// spec part of role binding object
message RoleBindingSpec {
    repeated string Users      = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "users,omitempty"];
    repeated string UserGroups = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "user-groups,omitempty"];
    string Role                = 3 [(gogoproto.jsontag) = "role,omitempty"];
}

// status part of role binding object
message RoleBindingStatus {
}

// RoleBinding is an assignment of a role to users or groups
message RoleBinding {
    option (venice.objectPrefix) = { Collection: "role-bindings", Path: "/{O.Tenant}"};
    api.TypeMeta T           = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O         = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the role binding.
    RoleBindingSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the role binding.
    RoleBindingStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
