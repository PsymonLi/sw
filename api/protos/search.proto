// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package search;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/fields/selector.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/sgpolicy.proto";

// API-groups and associated Kinds as defined in api/protos
//
// Cluster
//        Cluster
//        Node
//        Host
//        SmartNIC
//        Rollout
//        Tenant
//
// Workload
//        Workload
//        Endpoint
//
// Security
//        SecurityGroup
//        Sgpolicy
//        App
//        AppUser
//        AppUserGrp
//        Certificate
//        TrafficEncryptionPolicy
//
// Auth
//        User
//        AuthenticationPolicy
//        Role
//        RoleBinding
//        
// Network
//        Network
//        Service
//        LbPolicy
//
// Monitoring
//        Alert
//        AlertDestination
//        AlertPolicy
//        Event
//        EventPolicy
//        StatsPolicy
//        FlowExportPolicy
//        FwlogPolicy
//        MirrorSession
//        MetricObjects (TBD ??)

// List of search categories, specified via "category" modifier
// TODO: generate these enums if possible and use it for validation
message Category {
    enum Type {
        // api-groups
        Cluster     = 0;
        Workload    = 1;
        Security    = 2;
        Auth        = 3;
        Network     = 4;
        Monitoring  = 5;

        // Additional categories
        // granular categories
        Telemetry   = 6;
        Events      = 7;
        Alerts      = 8;

        // special categories
        AuditTrail  = 9;
   }
}

// List of all allowed Kinds in search, specified via "kind" modifier
// TODO: Define a list/map of Kinds per Category
// TODO: generate these enums if possible and use it for validation per Category
//       This is a placeholder enum until we have a way to auto-generate list
//       of all kinds
message Kind {
    enum Type {
        Cluster                 = 0;
        Node                    = 1;
        SmartNIC                = 2;
        Rollout                 = 3;
        Tenant                  = 4;
        Endpoint                = 5;
        SecurityGroup           = 6;
        SGPolicy                = 7;
        App                     = 8;
        AppUser                 = 9;
        AppUserGrp              = 10;
        Certificate             = 11;
        TrafficEncryptionPolicy = 12;
        User                    = 13;
        AuthenticationPolicy    = 14;
        Role                    = 15;
        RoleBinding             = 16;
        Network                 = 17;
        Service                 = 18;
        LbPolicy                = 19;
        Alert                   = 20;
        AlertDestination        = 21;
        AlertPolicy             = 22;
        Event                   = 23;
        EventPolicy             = 24;
        StatsPolicy             = 25;
        FlowExportPolicy        = 26;
        FwlogPolicy             = 27;
        MirrorSession           = 28;
        Workload                = 29;
        Host                    = 30;
        AuditEvent              = 31;
    }
}

// TextRequirement is AND of text-strings in the list
// It is comprised of words or phrases for text search support.
// If a text-string has space separated multi-word, it will be
// interpreted as a phrase.
//
// In the example below :
// - "link down" will be a phrase query
// - network, production, staging will be a word query
//
// For eg:
//    network                      (match network)
//    link down                    (match "link down" phrase)
//    network,production           (match network AND production)
//    network,link down,staging    (match network AND "link down" AND staging)
//
message TextRequirement {

  // AND of words or phrases to be matched
  // The max text-string length is 256 bytes
  repeated string Text = 1 [(gogoproto.jsontag) = "text,omitempty",
                            (venice.check) = "EmptyOr(StrLen(0,256))"];
}

// SearchQuery contains various search clauses, modifiers and its associated requirements.
// This is intended to be used in advanced query use-cases, specified in a GET/POST Body.
// All the clauses & modifiers (words, phrases, category, kind, field, label) at top level
// specified here are AND'ed by default.
//
// Currently we don't plan to support exclude option on Words, Phrases, Categories & Kinds.
// If there is a customer ask, we can add this support using the "-" prefix that is commonly
// used for exclusion.
//
// Texts:
//      production staging                     (match production OR staging)
//      "link down"                            (match the phrase "link down")
//      network                                (match network)
// Categories:
//      category:category1 category:category2  (match category1 OR category2)
//      category:category1,category2           (match category1 OR category2)
// Kinds: are scoped within the Categories, if specified
//      kind:kind1 kind:kind2                  (match kind1 OR kind2)
//      kind:kind1,kind2                       (match kind1 OR kind2)
// Field selector: scoped within the Kind modifier, if specified
//      field:x=a,y=b,z!=c      (match on field selector requirements)
// Label selector: scoped within Kinds, Categories if specified in that order
//      label:x in (a,b)        (match on label selector requirements)

message SearchQuery {

  // OR of Text-requirements to be matched, Exclude is not supported for Text search
  repeated TextRequirement Texts    = 1 [(gogoproto.jsontag) = "texts,omitempty"];


  // OR of Categories to be matched, AND and Exclude are not supported for this type
  // The max category string length is 64 bytes
  repeated string Categories        = 2 [(venice.check) = "StrEnum(Category.Type)",
                                         (venice.check) = "EmptyOr(StrLen(0,64))",
                                         (gogoproto.jsontag) = "categories,omitempty"];

  // OR of Kinds to be matched, AND and Exclude are not supported for this type
  // The max kind string length is 64 bytes
  repeated string Kinds             = 3 [(venice.check) = "StrEnum(Kind.Type)",
                                         (venice.check) = "EmptyOr(StrLen(0,64))",
                                         (gogoproto.jsontag) = "kinds,omitempty"];

  // Field Selector is AND of field.Requirements
  fields.Selector Fields            = 4 [(gogoproto.jsontag) = "fields,omitempty"];

  // Label Selector is AND of label.Requirememts
  labels.Selector Labels            = 5 [(gogoproto.jsontag) = "labels,omitempty"];
}

// Error contains the error code, description and
// associated details
message Error {

    // Type of error
    string Type     = 1 [(gogoproto.jsontag) = "type,omitempty"];
    // Reason or description of the failure
    string Reason   = 2 [(gogoproto.jsontag) = "reason,omitempty"];
}

// ConfigEntry represent a single search result entry
// for config objects
message ConfigEntry {

    // For Config (i.e policy) objects, the result will have
    // have all the metadata with self-link to get the
    // entire object next if needed
    api.TypeMeta T      = 1 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O    = 2 [(gogoproto.embed) = true,
                            (gogoproto.nullable) = false,
                            (gogoproto.jsontag) = "meta,omitempty"];
}

// Entry represent a single search result entry and contents
// of this entity vary based on Kind.
// For Events and Alerts Kind, the result will be entire
// object respectively.
// For rest of the configs objects, the result will be ConfigEntry
// with only the type & object meta data fields.
message Entry {

    // TODO: Right now our api codegen does not support
    // nested inline and hence this attribute cannot be 
    // be made embedded/inline. api.Any is already had
    // embededed attribute Any. Once infra supports nested
    // inline or an alternative, this attribute should be 
    // embedded and made inline to make json response user
    // friendly for search.
    api.Any Object = 1 [(gogoproto.nullable) = true,
                        (gogoproto.jsontag) = "object,omitempty"];
}

// EntryList is list of search result entries
message EntryList {
    repeated Entry Entries  = 1 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "entries,omitempty"];
}

// KindAggregation contains map of search result
// entries grouped by Kind.
message KindAggregation {
    map <string, EntryList> Kinds = 1 [(gogoproto.nullable) = true,
                                       (gogoproto.jsontag) = "kinds,omitempty"];
}

// CategoryAggregation contains map of search result entries
// grouped by two levels: first by Category and then by Kind.
message CategoryAggregation {
    map <string, KindAggregation> Categories = 1 [(gogoproto.nullable) = true,
                                                  (gogoproto.jsontag) = "categories,omitempty"];
}

// TenantAggregation contains map of search result entries
// grouped by three levels: first by Tenant, second by Category 
// and finally by Kind.
message TenantAggregation {
    map <string, CategoryAggregation> Tenants = 1 [(gogoproto.nullable) = true,
                                                   (gogoproto.jsontag) = "tenants,omitempty"];
}

// KindPreview contains map of search summary (#hits) grouped by Kind.
message KindPreview {
    map <string, int64> Kinds = 1 [(gogoproto.nullable) = true,
                                  (gogoproto.jsontag) = "kinds,omitempty"];
}

// CategoryPreview contains map of search summary (#hits)
// grouped by two levels: first by Category and then by Kind.
message CategoryPreview {
    map <string, KindPreview> Categories = 1 [(gogoproto.nullable) = true,
                                             (gogoproto.jsontag) = "categories,omitempty"];
}

// TenantPreview contains map of search summary (#hits)
// grouped by three levels: first by Tenant, second by Category 
// and finally by Kind.
message TenantPreview {
    map <string, CategoryPreview> Tenants = 1 [(gogoproto.nullable) = true,
                                              (gogoproto.jsontag) = "tenants,omitempty"];
}

// SearchRequest is the input to the search API
//
// Simple queries can be specified as URI param using "QueryString".
// For advanced queries, it is recommended to use the "SearchQuery" structure
// and specify them in BODY of the GET/POST method.
//
// Examples of search query in query-string format:
//
//  1. Find all occurrences matching text “Network”
//     Network
//  2. Find all occurrences matching phrase “link down”
//     “link down”
//  3. Find all occurrences matching text production OR "staging"
//     production staging
//  4. Find all occurrences matching text “Network” AND "link down"
//     Network,"link down"
//     Network AND "link down"
//  5. Find all config objects with label1=foo
//     category:config label:label1=foo
//  6. Find all objects created on or after certain date+time
//     category:config field:meta.created-time>=”date-time-string”
//  7. Find all Network objects with type=vlan
//     kind:Network field:spec.type=vlan
//  8. Find all Naples nodes with admission-phase = pending or rejected
//     kind:SmartNIC field:spec.phase in (pending, rejected)
//  9. Find all events with text matching “disconnected”
//     category:events disconnected
// 10. Find all Critical events for Network objects
//     category:events kind:Network field:severity=CRITICAL
// 11. Find all Alerts generated from Naples MAC1
//     category:alerts field:status.source.node=MAC1
//     category:alerts MAC1
// 12. Find all Naples nodes with metric filter : mem>90 && cpu>90
//     category:metrics kind:SmartNIC field:metric.mem>90,metric.cpu>90
// 13. Find all Endpoints with label Tier=Web with counter1>=100
//     category:metrics kind:Endpoint label:Tier=Web field:metric.counter1 > 100
// 14. Find all Endpoints objects with label target=prod with crc-error-count != 0
//     category:metrics kind:Endpoint label:target=prod field:status.crc-error-count!=0
// 15. Find all occurences matching the words and phrase in a certain category & kinds with certain field and label match
//     production "status down" category:Network kind:Network,Service field:spec.service-type=external label:tier=web
//
message SearchRequest {

    // Search Request Mode
    enum RequestMode {
        // In full mode, full results comprising of Object Meta 
        // grouped by Tenant->Category->Kind is returned. This
        // is the default mode.
        Full    = 0;
        // In preview mode, only the search summary (i.e number of hits)
        // grouped by Tenant->Category->Kind is returned 
        Preview = 1;
    }

    enum SortOrderEnum {
        Ascending = 0;
        Descending = 1;
    }

    // Simple query string
    // This can be specified as URI parameter.
    // For advanced query cases, Users should use specify SearchQuery
    // and pass the SearchRequest in a GET/POST Body
    // The max query-string length is 256 bytes
    string QueryString          = 1 [(gogoproto.jsontag) = "query-string,omitempty",
                                     (venice.check) = "EmptyOr(StrLen(0,256))"];

    // From represents the start offset (zero based), used in paginated search requests
    // The results returned would be in the range [From ... From+MaxResults-1]
    // This can be specified as URI parameter. 
    // Default value is 0 and valid range is 0..1023
    int32 From                  = 2 [(gogoproto.jsontag) = "from,omitempty",
                                     (venice.check) = "IntRange(0,1023)"];

    // MaxResults is the max-count of search results
    // This can be specified as URI parameter.
    // Default value is 50 and valid range is 0..8192
    int32 MaxResults            = 3 [(venice.default) = "50",
                                     (venice.check) = "IntRange(0,8192)",
                                     (gogoproto.jsontag) = "max-results,omitempty"];

    // SortyBy is an optional parameter and contains the field name 
    // to be sorted by, For eg: "meta.name"
    // This can be specified as URI parameter.
    string SortBy               = 4 [(gogoproto.jsontag) = "sort-by,omitempty",
                                     (venice.check) = "EmptyOr(StrLen(0,256))"];

    // SortOrder is an optional parameter and contains whether to sort ascending
    // or descending
    // This can be specified as URI parameter.
    string SortOrder            = 5 [(gogoproto.jsontag) = "sort-order,omitempty",
                                     (venice.check) = "StrEnum(SearchRequest.SortOrderEnum)"];

    // Query Mode 
    string Mode                 = 6 [(venice.check) = "StrEnum(SearchRequest.RequestMode)",
                                    (venice.default) = "Full",
                                    (gogoproto.jsontag) = "mode,omitempty"];

    // Search query contains the search requirements
    // This is intended for advanced query use cases involving
    // boolean query, structured term query and supports various
    // combinations of text, phrase strings and search modifiers
    // for specific categories, kinds, fields and labels.
    // This cannot be specified as URI parameter.
    SearchQuery Query           = 7 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "query,omitempty"];

    // OR of tenants within the scope of which search needs to be performed. If not specified, it will be set to tenant
    // of the logged in user
    repeated string Tenants     = 8 [(gogoproto.jsontag) = "tenants,omitempty"];
}

// SearchResponse is the output provided by the search API
// Based on the search request, search results would be part
// of one of the entities : Entries or NestedAggregation.
// In case of failures, Error would indicate the error status and
// description.
message SearchResponse {

    // TotalHits indicates total number of hits matched
    int64 TotalHits                     = 3 [(gogoproto.jsontag) = "total-hits,omitempty"];

    // ActualHits indicates the actual hits returned in this response
    int64 ActualHits                    = 4 [(gogoproto.jsontag) = "actual-hits,omitempty"];

    // TimeTakenMsecs is the time taken for search response in millisecs
    int64 TimeTakenMsecs                = 5 [(gogoproto.jsontag) = "time-taken-msecs,omitempty"];

    // Error status for failures
    Error Error                         = 6 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "error,omitempty"];

    // EntryList is list of all search results with no grouping.
    // This attribute is populated and valid only in Full request-mode
    repeated Entry Entries              = 7 [(gogoproto.nullable) = true,
                                             (gogoproto.jsontag) = "entries,omitempty"];

    // PreviewEntries is a three level grouping of search summary (#hits),
    // grouped by tenant, category and kind in that order. This attribute
    // is populated and valid only in Preview request-mode
    TenantPreview PreviewEntries        = 8 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "preview-entries,omitempty"];

    // AggregatedEntries is a three level grouping of full search results,
    // Grouped by tenant, category and kind in that order. This attribute
    // is populated and valid only in Full request-mode
    TenantAggregation AggregatedEntries = 9 [(gogoproto.nullable) = true,
                                            (gogoproto.jsontag) = "aggregated-entries,omitempty"];
}

// PolicySearchRequest is input to the security/firewall policy search request
message PolicySearchRequest {

    // Tenant Name, to perform query within a Tenant's scope.
    // The default tenant is "default". In the backend
    // this field gets auto-filled & validated by apigw-hook
    // based on user login context.
    string Tenant               = 1 [(gogoproto.nullable) = true,
                                     (venice.default) = "default",
                                     (gogoproto.jsontag) = "tenant,omitempty"];

    // Namespace is optional. If provided policy-search will
    // be limited to the specified namespace.
    string Namespace            = 2 [(gogoproto.nullable) = true,
                                     (venice.default) = "default",
                                     (gogoproto.jsontag) = "namespace,omitempty"];

    // SGPolicy name is optional. If provided policy-search will
    // be limited to the specified SGpolicy object name.
    string SGPolicy             = 3 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "sg-policy,omitempty"];

    // App specification,  predefined apps and alg config
    string App                  = 4 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "app,omitempty"];

    // Protocol eg: tcp, udp, icmp
    string Protocol             = 5 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "protocol,omitempty"];

    // TCP or UDP Port number 
    string Port                 = 6 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "port,omitempty"];

    // Inbound ip-address, use any to refer to all ipaddresses
    // eg: 10.1.1.1, any
    string FromIPAddress        = 7 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "from-ip-address,omitempty"];

    // Outbound ip-address, use any to refer to all ipaddresses
    // eg: 20.1.1.1, any
    string ToIPAddress          = 8 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "to-ip-address,omitempty"];

    // Inbound security group
    string FromSecurityGroup    = 9 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "from-security-group,omitempty"];

    // Outbound security group
    string ToSecurityGroup      = 10 [(gogoproto.nullable) = true,
                                    (gogoproto.jsontag) = "to-security-group,omitempty"];
}

// PolicyMatchEntry contains the matching SGrule and Index
// within the SGPolicy ruleset.
message PolicyMatchEntry {

    // Matching SGRule
    security.SGRule Rule    = 1 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "rule,omitempty"];

    // Index of the matching SG rule
    uint32 Index            = 2 [(gogoproto.nullable) = true,
                                (gogoproto.jsontag) = "index"];
}

// PolicySearchResponse is response to the security/firewall policy search request
message PolicySearchResponse {

    enum MatchStatus
    {
        MATCH  = 0; // Matching rule found
        MISS   = 1; // No matching rule found
    }

    // Status of firewall policy search
    string Status                           = 1 [(venice.check) = "StrEnum(PolicySearchResponse.MatchStatus)",
                                                 (gogoproto.jsontag) = "status,omitempty"];

    // Result is Map of <SGPolicy object name, PolicyMatch Entry>. 
    map <string, PolicyMatchEntry> Results = 2 [(gogoproto.nullable) = true,
                                                (gogoproto.jsontag) = "results,omitempty"];
}
