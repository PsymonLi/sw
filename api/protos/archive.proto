// {C} Copyright 2019 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package monitoring;

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/fields/selector.proto";
import "search.proto";

// ArchiveQuery is to archive audit logs, events and firewall logs based on time window, field values
message ArchiveQuery {
    // OR of Text-requirements to be matched, Exclude is not supported for Text search
    repeated search.TextRequirement Texts = 1 [(gogoproto.jsontag) = "texts,omitempty"];
    // Field Selector is AND of field.Requirements
    fields.Selector Fields                = 2 [(gogoproto.jsontag) = "fields,omitempty"];
    // Label Selector is AND of label.Requirememts
    labels.Selector Labels                = 3 [(gogoproto.jsontag) = "labels,omitempty"];
    // StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
    api.Timestamp StartTime               = 4 [(gogoproto.jsontag) = "start-time,omitempty"];
    // EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
    api.Timestamp EndTime                 = 5 [(gogoproto.jsontag) = "end-time,omitempty"];
    // OR of tenants within the scope of which archive needs to be performed. If not specified, it will be set to tenant
    // of the logged in user. Also users in non default tenant can archive logs in their tenant scope only.
    repeated string Tenants               = 6 [(gogoproto.jsontag) = "tenants,omitempty"];
}

message ArchiveRequestSpec {
    enum LogType {
        Event      = 0;
        AuditEvent = 1;
        FwLog      = 2;
    }
    string Type        = 1 [(venice.check) = "StrEnum(ArchiveRequestSpec.LogType)", (gogoproto.jsontag) = "type"];
    ArchiveQuery Query = 2 [(gogoproto.jsontag) = "query"];
}


message ArchiveRequestStatus {
    enum ArchiveJobStatus {
        Scheduled = 0;
        Running   = 1;
        Completed = 2;
        Failed    = 3;
        TimeOut   = 4;
        Canceled  = 5;
    }
    string Status = 1 [(gogoproto.jsontag) = "status,omitempty", (venice.check) = "StrEnum(ArchiveRequestStatus.ArchiveJobStatus)"];
    string Reason = 2 [(gogoproto.jsontag) = "reason,omitempty"];
    string URI    = 3 [(gogoproto.jsontag) = "uri,omitempty"];
}

// ArchiveRequest is to asynchronously archive audit logs, events and firewall logs
message ArchiveRequest {
    // KV store prefix
    option (venice.objectPrefix) = {Collection: "archive-requests", Path: "/{O.Tenant}"};
    api.TypeMeta T              = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O            = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    ArchiveRequestSpec Spec     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    ArchiveRequestStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// CancelArchiveRequest is to cancel archive request that is in scheduled or running state
message CancelArchiveRequest {
    api.TypeMeta T   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    api.ObjectMeta O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    option (venice.objectPrefix) = {Collection: "archive-requests", Path: "/{O.Tenant}"};
}
