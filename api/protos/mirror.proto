// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package monitoring;

import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";

//========================================================================================
// Packet Mirroring
//========================================================================================

// MirrorSessionSpec
message MirrorSessionSpec {
    // PacketSize: Max size of a mirrored packet, range 64-2048 or 0 for no check on mirrored packet
    uint32                  PacketSize      = 1 [(gogoproto.jsontag) = "packet-size,omitempty",  (venice.check)="IntRangeOrZero(64, 2048)"];

    // StartConditions
    MirrorStartConditions   StartConditions = 2 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "start-condition,inline"];

    // Mirrored packet collectors
    repeated MirrorCollector Collectors     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collectors,inline"];

    // Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
    repeated MatchRule      MatchRules      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "match-rules,inline"];

    // Filter selected packets further - mirror only those packets that match atleast one of the PacketFilers
    enum MirrorPacketFilter {
        // ui-hint: All Packets
        ALL_PKTS                = 0 [(venice.enumValueStr) = "all-packets"];
        // ui-hint: All Drops
        ALL_DROPS               = 1 [(venice.enumValueStr) = "all-drops"];
        // ui-hint: Network Policy Drops
        NETWORK_POLICY_DROP     = 2 [(venice.enumValueStr) = "network-policy-drop"];
        // ui-hint: Firewall Policy Drops
        FIREWALL_POLICY_DROP    = 3 [(venice.enumValueStr) = "firewall-policy-drop"];
    }
    repeated string PacketFilters          = 5 [(gogoproto.jsontag) = "packet-filters,omitempty", (venice.check) = "StrEnum(MirrorSessionSpec.MirrorPacketFilter)"];

    // If specified, will pick up interface matching the selector
    InterfaceMirror Interfaces             = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "interfaces,omitempty"];
}

enum Direction {
    // ui-hint: Both
    BOTH        = 0 [(venice.enumValueStr) = "both"];
    // ui-hint: Tx
    TX          = 1 [(venice.enumValueStr) = "tx"];
    // ui-hint: Rx
    RX          = 2 [(venice.enumValueStr) = "rx"];
}

message InterfaceMirror {

    string                    Direction  = 1 [(gogoproto.jsontag) = "direction,omitempty", (venice.check) = "StrEnum(Direction)"];

    repeated labels.Selector  Selectors   = 2 [(gogoproto.jsontag) = "selectors,omitempty"];
}


// MirrorStartConditions - Conditions to start mirroring
message MirrorStartConditions {
    api.Timestamp   ScheduleTime    = 1 [(gogoproto.jsontag) = "schedule-time,omitempty"];
}

enum PacketCollectorType {
    // ui-hint: ERSPAN Type 3
    ERSPAN_TYPE_3     = 0;    // external packet capture using ERSPAN type 3 format
    // ui-hint: ERSPAN Type 2
    ERSPAN_TYPE_2     = 1;    // external packet capture using ERSPAN type 2 format
}

message MirrorExportConfig {
    // IP address of the collector/entity to which the data is to be exported
    string Destination = 1 [(gogoproto.jsontag) = "destination,omitempty", (venice.check) = "IPv4()"];

    // IP address of the gateway to reach the collector.
    string Gateway     = 2 [(gogoproto.jsontag) = "gateway,omitempty"];
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
message MirrorCollector {
    // Type of Collector
    string              Type          = 1 [(gogoproto.jsontag) = "type,omitempty", (venice.default)="erspan_type_3", (venice.check) = "StrEnum(PacketCollectorType)"];

    // When collector type is Venice, collector export information is not required
    MirrorExportConfig    ExportCfg   = 2 [(gogoproto.nullable)=true, (gogoproto.jsontag) = "export-config,omitempty"];
   // remove vlan from mirror packet
    bool               StripVlanHdr   = 3 [(gogoproto.jsontag) = "strip-vlan-hdr,omitempty" ];
}

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
message MatchSelector {
    // Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
    repeated string IPAddresses     = 1 [(gogoproto.jsontag) = "ip-addresses,omitempty"];
    // List of MacAddresses - "aabb.ccdd.eeff", "0001.0203.0405"
    repeated string MACAddresses    = 2 [(gogoproto.jsontag) = "mac-addresses,omitempty", (venice.check) = "EmptyOr(MacAddr())"];
}

// Application/protocol selector
message AppProtoSelector {
    // ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
    repeated string ProtoPorts   = 1 [(gogoproto.jsontag) = "proto-ports,omitempty", (venice.check)="EmptyOr(ProtoPortRange())"];
    // Apps - E.g. ["Redis"]
    repeated string Apps         = 2 [(gogoproto.jsontag) = "applications,omitempty"];
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
message MatchRule {
    // Either Src or Dst or both must be specified, both cannot be *
    // Src = * when not specified
    // When Src is specified and resides on Pensando DSC, matching pkts to/from src will be mirrored
    MatchSelector       Src         = 1 [(gogoproto.jsontag) = "source,omitempty"];
    // Dst = * when not specified
    // When Dst is specified and resides on Pensando DSC, matching pkts to/from dst will be mirrored
    MatchSelector       Dst         = 2 [(gogoproto.jsontag) = "destination,omitempty"];;
    // App = * when not specified
    AppProtoSelector   AppProtoSel  = 3 [(gogoproto.jsontag) = "app-protocol-selectors,omitempty"];;
}

// MirrorSessionState
enum MirrorSessionState {
    // ui-hint: None
    NONE                    = 0;    // Mirror session is not processed
    // ui-hint: Active
    ACTIVE                  = 1;    // active i.e. capturing packets
    // ui-hint: Stopped
    STOPPED                 = 2;    // stop condition met
    // ui-hint: Scheduled
    SCHEDULED               = 3;    // Waiting on start condition
    // ui-hint: Max Mirror Sessions Exceeded
    ERR_NO_MIRROR_SESSION   = 4 [(venice.enumValueStr) = "error-no-mirror-session"];
}

// MirrorSessionStatus
message MirrorSessionStatus {
    string ScheduleState            = 1 [(gogoproto.jsontag) = "schedule-state,inline", (venice.check) = "StrEnum(MirrorSessionState)"];
    api.Timestamp StartedAt = 2 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "started-at,inline"];
}

// MirrorSession
message MirrorSession {
    option (venice.objectPrefix) = {Collection: "MirrorSession", Path: "/{O.Tenant}"}; // ??? Tenant -> ??
    api.TypeMeta            T       = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta          O       = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    MirrorSessionSpec       Spec    = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,inline"];
    MirrorSessionStatus     Status  = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
