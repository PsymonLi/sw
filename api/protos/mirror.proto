// {C} Copyright 2018 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package monitoring;

import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "export.proto";

//========================================================================================
// Packet Mirroring
//========================================================================================
//-----------------------
//---- MirrorSessionSpec
//-----------------------
message MirrorSessionSpec {
    // PacketSize: Max size of a mirrored packet.
    // PacketSize = 0 indicates complete packet is mirrored, except when mirrored packets are sent to Venice.
    // For packets mirrored to Venice, max mirror packet size allowed is 256 B
    uint32                  PacketSize      = 1 [(gogoproto.jsontag) = "packet-size,omitempty"];

    // StartConditions
    MirrorStartConditions   StartConditions = 2 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "start-condition,inline"];

    MirrorStopConditions    StopConditions  = 3 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "stop-condition,inline"];

    // Mirrored packet collectors
    repeated MirrorCollector Collectors     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "collectors,inline"];

    // Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
    repeated MatchRule      MatchRules      = 5 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "match-rules,inline"];

    // Filter selected packets further - mirror only those packets that match atleast one of the PacketFilers
    enum MirrorPacketFilter {
        // ui-hint: All Packets
        ALL_PKTS                = 0;
        // ui-hint: All Drops
        ALL_DROPS               = 1;
        // ui-hint: Network Policy Drops
        NETWORK_POLICY_DROP     = 2;
        // ui-hint: Firewall Policy Drops
        FIREWALL_POLICY_DROP    = 3;
    }
    repeated string PacketFilters           = 6 [(gogoproto.jsontag) = "packet-filters,omitempty", (venice.check) = "StrEnum(MirrorSessionSpec.MirrorPacketFilter)"];
}

// MirrorStartConditions - Conditions to start mirroring
message MirrorStartConditions {
    api.Timestamp   ScheduleTime    = 1 [(gogoproto.jsontag) = "schedule-time,omitempty"];
}

// MirrorStopConditions - A MirrorSession will stop mirroring after this condition is met
message MirrorStopConditions {
    // Stop after capturing specified number of packets
    uint32          MaxPacketCount  = 1 [(gogoproto.jsontag) = "max-packets,omitempty"];
    // Stop after specified amount of time. E.g. 1h, 20min
    // When ExpiryDuration is not specified, Default is "2h"
    string          ExpiryDuration  = 2 [(gogoproto.jsontag) = "expiry-duration,omitempty", (venice.check)="Duration()"];
}

enum PacketCollectorType {
    // ui-hint: Venice
    VENICE     = 0;    // captured on venice
    ERSPAN     = 1;    // external packet capture using ERSPAN format
}
// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
message MirrorCollector {
    string              Type        = 1 [(gogoproto.jsontag) = "type,omitempty", (venice.check) = "StrEnum(PacketCollectorType)"];

    // When collector type is Venice, collector export information is not required
    ExportConfig    ExportCfg   = 3 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "export-config,omitempty"];
}

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
message MatchSelector {
    // Any one of the following match selector can be specified to select a packet from mirroring
    repeated string Endpoints       = 1 [(gogoproto.jsontag) = "endpoints,omitempty"];
    // Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
    repeated string IPAddresses     = 2 [(gogoproto.jsontag) = "ip-addresses,omitempty"];
    // List of MacAddresses - "aa:bb:cc:dd:ee:ff", "00:01:02:03:04:05"
    repeated string MACAddresses    = 3 [(gogoproto.jsontag) = "mac-addresses,omitempty"];
}

// Application/protocol selector
message AppProtoSelector {
    // ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
    repeated string Ports   = 1 [(gogoproto.jsontag) = "ports,omitempty", (venice.check)="ProtoPort()"];
    // Apps - E.g. ["Redis"]
    repeated string Apps    = 2 [(gogoproto.jsontag) = "applications,omitempty"];
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
message MatchRule {
    // Either Src or Dst or both must be specified, both cannot be *
    // Src = * when not specified
    // When Src is specified and resides on Pesnsando SmartNIC, matching pkts to/from src will be mirrored
    MatchSelector       Src         = 1 [(gogoproto.jsontag) = "source,omitempty"];
    // Dst = * when not specified
    // When Dst is specified and resides on Pesnsando SmartNIC, matching pkts to/from dst will be mirrored
    MatchSelector       Dst         = 2 [(gogoproto.jsontag) = "destination,omitempty"];;
    // App = * when not specified
    AppProtoSelector   AppProtoSel  = 3 [(gogoproto.jsontag) = "app-protocol-selectors,omitempty"];;
}

//-------------------------
//---- MirrorSessionStatus
//-------------------------
enum MirrorSessionState {
    // ui-hint: None
    NONE                    = 0;    // Mirror session is not processed
    // ui-hint: Running
    RUNNING                 = 1;    // active i.e. capturing packets
    // ui-hint: Stopped
    STOPPED                 = 2;    // stop condition met
    // ui-hint: Scheduled
    SCHEDULED               = 3;    // Waiting on start condition
    // ui-hint: Max Mirror Sessions Exceeded
    ERR_NO_MIRROR_SESSION   = 4;
}

message MirrorSessionStatus {
    string State            = 1 [(gogoproto.jsontag) = "oper-state,inline", (venice.check) = "StrEnum(MirrorSessionState)"];
    string PcapFileURL      = 2 [(gogoproto.jsontag) = "pcap-file-url,inline)"];
    api.Timestamp StartedAt = 3 [(gogoproto.nullable)=false, (gogoproto.jsontag) = "started-at,inline"];
}

//------------------
//---- MirrorSession
//------------------
message MirrorSession {
    option (venice.objectPrefix) = {Collection: "MirrorSession", Path: "/{O.Tenant}"}; // ??? Tenant -> ??
    api.TypeMeta            T       = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta          O       = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    MirrorSessionSpec       Spec    = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mirror-session-spec,inline"];
    MirrorSessionStatus     Status  = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
