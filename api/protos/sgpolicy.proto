// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package security;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";


// ----------------------------- NetworkSecurityPolicy Object -----------------------------

message ProtoPort {
    // protocol is ip (v4/v6) protocol name/number; names can be: tcp, udp, igmp, icmp, gre, esp, etc.
    string Protocol = 1 [(gogoproto.jsontag) = "protocol,omitempty"];

    // TCP or UDP port number(s): comma separate port numbers, or dash separate port range
    string Ports    = 2 [(gogoproto.jsontag) = "ports, omitempty"];
}

message SGRule {
    enum PolicyAction
    {
        // ui-hint: Permit
        PERMIT  = 0;  // permit traffic flow
        // ui-hint: Deny
        DENY    = 1;  // drop traffic without any response to the client
        // ui-hint: Reject
        REJECT  = 2;  // drop traffic and report unreachable to client
    }

    // list of apps objects to which the rule applies to
    repeated string Apps                = 1 [(venice.objRelation) = {Type: "NamedRef", To: "security/App"}, (gogoproto.jsontag) = "apps,omitempty"];

    // list of (protocol, ports) pairs to which the rule applies to, in addition to apps
    repeated ProtoPort ProtoPorts       = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "proto-ports,omitempty"];

    // SGRule action, either PERMIT, DENY or REJECT
    string Action                       = 3 [(venice.check) = "StrEnum(SGRule.PolicyAction)",
                                             (gogoproto.nullable) =  true, (gogoproto.jsontag) = "action,omitempty"];

    // inbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
    // cli-tags: id=from-ip
    repeated string FromIPAddresses     = 4 [(gogoproto.jsontag) = "from-ip-addresses,omitempty"];

    // outbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
    // cli-tags: id=to-ip
    repeated string ToIPAddresses       = 5 [(gogoproto.jsontag) = "to-ip-addresses,omitempty"];

    // inbound rule from a given security group
    repeated string FromSecurityGroups  = 6 [(venice.objRelation) = {Type: "NamedRef", To: "security/SecurityGroup"}, (gogoproto.jsontag) = "from-security-groups,omitempty"];

    // outbound rule from a given security group
    repeated string ToSecurityGroups    = 7 [(venice.objRelation) = {Type: "NamedRef", To: "security/SecurityGroup"}, (gogoproto.jsontag) = "to-security-groups,omitempty"];
}

message NetworkSecurityPolicySpec {
    // list of security groups this policy is attached to
    repeated string AttachGroups = 1 [(venice.objRelation) = {Type: "NamedRef", To: "security/SecurityGroup"}, (gogoproto.jsontag) = "attach-groups,omitempty"];

    // specifies if the set of rules need to be attached globally to a tenant
    bool AttachTenant           = 2 [(gogoproto.jsontag) = "attach-tenant,omitempty"];

    // list of rules
    repeated SGRule Rules       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "rules,omitempty"];
}

message PropagationStatus {
    // The Generation ID this status is for
    string GenerationID = 1 [(gogoproto.jsontag) = "generation-id"];
    // The number of Naples that this version has already been pushed to
    int32 Updated = 2 [(gogoproto.jsontag) = "updated"];
    // Number of Naples pending. If this is 0 it can be assumed that everything is up to date.
    int32 Pending = 3 [(gogoproto.jsontag) = "pending"];
    // The Version running on the slowest Naples
    string MinVersion = 4 [(gogoproto.jsontag) = "min-version"];
    // Textual description of propagation status
    string Status = 5 [(gogoproto.jsontag) = "status"];
    // list of smartnics where propagation did not complete
    repeated string PendingNaples = 6 [(gogoproto.jsontag) = "pending-dscs"];
}

message SGRuleStatus {
    string RuleHash = 1 [(gogoproto.jsontag) = "rule-hash"];
}

message NetworkSecurityPolicyStatus {
    // The status of the configuration propagation to the Naples
    PropagationStatus PropagationStatus         = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "propagation-status"];
    repeated SGRuleStatus RuleStatus            = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "rule-status,omitempty"];
}

// NetworkSecurityPolicy represents a security policy for security groups
message NetworkSecurityPolicy {
    option (venice.objectPrefix) = {Collection: "networksecuritypolicies", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the Network Security Policy.
    NetworkSecurityPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the Network Security Policy.
    NetworkSecurityPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
