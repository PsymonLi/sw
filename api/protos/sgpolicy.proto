// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package security;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";


// ----------------------------- SgPolicy Object -----------------------------

message SGRule {
    // match ports for the rule
    string Ports     = 1 [(gogoproto.jsontag) = "ports,omitempty"];
    // Rule action (allow/deny/log/train)
    string Action    = 2 [(gogoproto.jsontag) = "action,omitempty"];
    // Peer group for the rule (from/to group depending on direction)
    string PeerGroup = 3 [(gogoproto.jsontag) = "peer-group,omitempty"];
    // List of Apps to match for the rule
    repeated string Apps = 4 [(gogoproto.jsontag) = "apps,omitempty"];
    // AppUser or AppUserGroup to match for the rule
    // AppUser is derived from application payload such as database login or
    // other application authentication mechanisms
    // FIXME: oneof does not translate well in golang - will enforce via validation
    // Used when policy is applied on a single user
    string AppUser = 5 [(gogoproto.jsontag) = "app-user,omitempty"];
    // Used when policy is applied on a group of users
    string AppUserGrp = 6 [(gogoproto.jsontag) = "app-user-group,omitempty"];
}

message SgpolicySpec {
    // list of security groups this policy is attached to
    repeated string AttachGroups = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-groups,omitempty"];
    // Incoming rules
    repeated SGRule InRules      = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "in-rules,omitempty"];
    // Outgoing rules
    repeated SGRule OutRules     = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "out-rules,omitempty"];
}

message SgpolicyStatus {
    // list of workloads in this group
    repeated string Workloads = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workloads,omitempty"];
}


// Sgpolicy represents a security policy for security groups
message Sgpolicy {
    option (venice.objectPrefix) = {Collection: "sgpolicy", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the sgpolicy.
    SgpolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the sgpolicy.
    SgpolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
