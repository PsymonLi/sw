// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package security;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/labels/selector.proto";
import "github.com/pensando/sw/api/protos/tenant.proto";


// ----------------------------- SgPolicy Object -----------------------------

message SGRule {
    enum PolicyAction
    {
        PERMIT  = 0;  // permit traffic flow
        DENY    = 1;  // drop traffic without any response to the client
        REJECT  = 2;  // drop traffic and report unreachable to client
    }

    // list of apps. proto/port format, or predefined apps and alg config
    repeated string Apps                = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "apps,omitempty"];

    // SGRule action, either PERMIT, DENY or REJECT
    string Action                       = 2 [(venice.check) = "StrEnum(SGRule.PolicyAction)",
                                             (gogoproto.nullable) =  true, (gogoproto.jsontag) = "action,omitempty"];

    // inbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
    repeated string FromIPAddresses     = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "from-ip-addresses,omitempty"];

    // outbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
    repeated string ToIPAddresses       = 4 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "to-ip-addresses,omitempty"];

    // inbound rule from a given security group
    repeated string FromSecurityGroups  = 5 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "from-security-groups,omitempty"];

    // outbound rule from a given security group
    repeated string ToSecurityGroups    = 6 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "to-security-groups,omitempty"];

}

message SGPolicySpec {
    // list of security groups this policy is attached to
    repeated string AttachGroups = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-groups,omitempty"];

    // specifies if the set of rules need to be attached globally to a tenant
    bool AttachTenant           = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "attach-tenant,omitempty"];

    // list of rules
    repeated SGRule Rules       = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "rules,omitempty"];
}

message SGPolicyPropagationStatus {
    // The Generation ID this status is for
    string GenerationID = 1 [(gogoproto.jsontag) = "generation-id"];
    // The number of Naples that this version has already been pushed to
    int32 Updated = 2 [(gogoproto.jsontag) = "updated"];
    // Number of Naples pending. If this is 0 it can be assumed that everything is up to date.
    int32 Pending = 3 [(gogoproto.jsontag) = "pending"];
    // The Version running on the slowest Naples
    string MinVersion = 4 [(gogoproto.jsontag) = "min-version"];
}

message SGPolicyStatus {
    // list of workloads in this group
    repeated string Workloads = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workloads,omitempty"];

    // The status of the configuration propagation to the Naples
    SGPolicyPropagationStatus PropagationStatus = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "propagation-status"];
}

// Sgpolicy represents a security policy for security groups
message SGPolicy {
    option (venice.objectPrefix) = {Collection: "sgpolicies", Path: "/{O.Tenant}"};
    api.TypeMeta T =1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O =2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the sgpolicy.
    SGPolicySpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];

    // Status contains the current state of the sgpolicy.
    SGPolicyStatus Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}
