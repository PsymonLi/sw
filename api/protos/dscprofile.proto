// {C} Copyright 2020 Pensando Systems Inc. All rights reserved

syntax = "proto3";
package cluster;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ------------------------------------- Profile Object ---------------------------

// ProfileSpec - Spec applicable to DSC
message DSCProfileSpec {
    enum Fwd_Mode 
    {
       // ui-hint: Transparent
       TRANSPARENT = 0; //Transparent Packet forwarding mode
       // ui-hint: Insertion
       INSERTION   = 1; //MicroSeg mode where DSC attracts traffic
    }
    enum FlowPolicy_Mode
    {
       // ui-hint: BaseNet
       BASENET   = 0; // Basic networking mode.
       // ui-hint: FlowAware
       FLOWAWARE = 1; // Flows are learnt in this mode
       // ui-hint: Enforced
       ENFORCED  = 2; // Flows are learnt and policy enforced
    }
    string FwdMode    = 1 [(venice.check) = "StrEnum(DSCProfileSpec.Fwd_Mode)",
                             (gogoproto.nullable) = true, (gogoproto.jsontag) = "fwd-mode"];
    string FlowPolicyMode = 2 [(venice.check) = "StrEnum(DSCProfileSpec.FlowPolicy_Mode)",(gogoproto.nullable) = true, (gogoproto.jsontag)= "policy-mode"];
}

message DSCProfileStatus {

}
// Profile
message DSCProfile {
    option (venice.objectPrefix) = {Collection: "dscprofiles"};
    api.TypeMeta          T      = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta        O      = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    DSCProfileSpec        Spec   = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,inline"];
    DSCProfileStatus      Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


