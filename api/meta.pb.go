// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Watch event types
type EventType int32

const (
	//
	EventType_CreateEvent EventType = 0
	//
	EventType_UpdateEvent EventType = 1
	//
	EventType_DeleteEvent EventType = 2
)

var EventType_name = map[int32]string{
	0: "CreateEvent",
	1: "UpdateEvent",
	2: "DeleteEvent",
}
var EventType_value = map[string]int32{
	"CreateEvent": 0,
	"UpdateEvent": 1,
	"DeleteEvent": 2,
}

func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

//
type ListWatchOptions_SortOrders int32

const (
	//
	ListWatchOptions_None ListWatchOptions_SortOrders = 0
	//
	ListWatchOptions_ByName ListWatchOptions_SortOrders = 1
	//
	ListWatchOptions_ByNameReverse ListWatchOptions_SortOrders = 2
	//
	ListWatchOptions_ByVersion ListWatchOptions_SortOrders = 3
	//
	ListWatchOptions_ByVersionReverse ListWatchOptions_SortOrders = 4
	//
	ListWatchOptions_ByCreationTime ListWatchOptions_SortOrders = 5
	//
	ListWatchOptions_ByCreationTimeReverse ListWatchOptions_SortOrders = 6
	//
	ListWatchOptions_ByModTime ListWatchOptions_SortOrders = 7
	//
	ListWatchOptions_ByModTimeReverse ListWatchOptions_SortOrders = 8
)

var ListWatchOptions_SortOrders_name = map[int32]string{
	0: "None",
	1: "ByName",
	2: "ByNameReverse",
	3: "ByVersion",
	4: "ByVersionReverse",
	5: "ByCreationTime",
	6: "ByCreationTimeReverse",
	7: "ByModTime",
	8: "ByModTimeReverse",
}
var ListWatchOptions_SortOrders_value = map[string]int32{
	"None":                  0,
	"ByName":                1,
	"ByNameReverse":         2,
	"ByVersion":             3,
	"ByVersionReverse":      4,
	"ByCreationTime":        5,
	"ByCreationTimeReverse": 6,
	"ByModTime":             7,
	"ByModTimeReverse":      8,
}

func (ListWatchOptions_SortOrders) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMeta, []int{8, 0}
}

//
type AggWatchOptions struct {
	//
	ObjectMeta `protobuf:"bytes,1,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	WatchOptions []KindWatchOptions `protobuf:"bytes,2,rep,name=WatchOptions,json=watch-options,omitempty" json:"watch-options,omitempty"`
}

func (m *AggWatchOptions) Reset()                    { *m = AggWatchOptions{} }
func (m *AggWatchOptions) String() string            { return proto.CompactTextString(m) }
func (*AggWatchOptions) ProtoMessage()               {}
func (*AggWatchOptions) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

func (m *AggWatchOptions) GetWatchOptions() []KindWatchOptions {
	if m != nil {
		return m.WatchOptions
	}
	return nil
}

// Any is wrapper around the proto Any object.
type Any struct {
	//
	google_protobuf2.Any `protobuf:"bytes,1,opt,name=Object,embedded=Object" json:"Object"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

//
type BgpAsn struct {
	//
	ASNumber uint32 `protobuf:"varint,1,opt,name=ASNumber,proto3" json:"ASNumber,omitempty"`
}

func (m *BgpAsn) Reset()                    { *m = BgpAsn{} }
func (m *BgpAsn) String() string            { return proto.CompactTextString(m) }
func (*BgpAsn) ProtoMessage()               {}
func (*BgpAsn) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

func (m *BgpAsn) GetASNumber() uint32 {
	if m != nil {
		return m.ASNumber
	}
	return 0
}

//
type Interface struct {
	// Types that are valid to be assigned to Value:
	//	*Interface_Str
	//	*Interface_Int64
	//	*Interface_Bool
	//	*Interface_Float
	//	*Interface_Interfaces
	Value isInterface_Value `protobuf_oneof:"Value"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{3} }

type isInterface_Value interface {
	isInterface_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Interface_Str struct {
	Str string `protobuf:"bytes,1,opt,name=Str,proto3,oneof"`
}
type Interface_Int64 struct {
	Int64 int64 `protobuf:"varint,2,opt,name=Int64,proto3,oneof"`
}
type Interface_Bool struct {
	Bool bool `protobuf:"varint,3,opt,name=Bool,proto3,oneof"`
}
type Interface_Float struct {
	Float float64 `protobuf:"fixed64,4,opt,name=Float,proto3,oneof"`
}
type Interface_Interfaces struct {
	Interfaces *InterfaceSlice `protobuf:"bytes,5,opt,name=Interfaces,oneof"`
}

func (*Interface_Str) isInterface_Value()        {}
func (*Interface_Int64) isInterface_Value()      {}
func (*Interface_Bool) isInterface_Value()       {}
func (*Interface_Float) isInterface_Value()      {}
func (*Interface_Interfaces) isInterface_Value() {}

func (m *Interface) GetValue() isInterface_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Interface) GetStr() string {
	if x, ok := m.GetValue().(*Interface_Str); ok {
		return x.Str
	}
	return ""
}

func (m *Interface) GetInt64() int64 {
	if x, ok := m.GetValue().(*Interface_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *Interface) GetBool() bool {
	if x, ok := m.GetValue().(*Interface_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Interface) GetFloat() float64 {
	if x, ok := m.GetValue().(*Interface_Float); ok {
		return x.Float
	}
	return 0
}

func (m *Interface) GetInterfaces() *InterfaceSlice {
	if x, ok := m.GetValue().(*Interface_Interfaces); ok {
		return x.Interfaces
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Interface) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Interface_OneofMarshaler, _Interface_OneofUnmarshaler, _Interface_OneofSizer, []interface{}{
		(*Interface_Str)(nil),
		(*Interface_Int64)(nil),
		(*Interface_Bool)(nil),
		(*Interface_Float)(nil),
		(*Interface_Interfaces)(nil),
	}
}

func _Interface_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Interface)
	// Value
	switch x := m.Value.(type) {
	case *Interface_Str:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Str)
	case *Interface_Int64:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64))
	case *Interface_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Interface_Float:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Float))
	case *Interface_Interfaces:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Interfaces); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Interface.Value has unexpected type %T", x)
	}
	return nil
}

func _Interface_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Interface)
	switch tag {
	case 1: // Value.Str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Interface_Str{x}
		return true, err
	case 2: // Value.Int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Interface_Int64{int64(x)}
		return true, err
	case 3: // Value.Bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Interface_Bool{x != 0}
		return true, err
	case 4: // Value.Float
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Interface_Float{math.Float64frombits(x)}
		return true, err
	case 5: // Value.Interfaces
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InterfaceSlice)
		err := b.DecodeMessage(msg)
		m.Value = &Interface_Interfaces{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Interface_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Interface)
	// Value
	switch x := m.Value.(type) {
	case *Interface_Str:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Str)))
		n += len(x.Str)
	case *Interface_Int64:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64))
	case *Interface_Bool:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *Interface_Float:
		n += proto.SizeVarint(4<<3 | proto.WireFixed64)
		n += 8
	case *Interface_Interfaces:
		s := proto.Size(x.Interfaces)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//
type InterfaceSlice struct {
	//
	Values []*Interface `protobuf:"bytes,1,rep,name=Values" json:"Values,omitempty"`
}

func (m *InterfaceSlice) Reset()                    { *m = InterfaceSlice{} }
func (m *InterfaceSlice) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSlice) ProtoMessage()               {}
func (*InterfaceSlice) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{4} }

func (m *InterfaceSlice) GetValues() []*Interface {
	if m != nil {
		return m.Values
	}
	return nil
}

//
type KindWatchOptions struct {
	//
	Group string `protobuf:"bytes,2,opt,name=Group,json=group,omitempty,proto3" json:"group,omitempty"`
	//
	Kind string `protobuf:"bytes,3,opt,name=Kind,json=kind,omitempty,proto3" json:"kind,omitempty"`
	//
	Options ListWatchOptions `protobuf:"bytes,4,opt,name=Options,json=options,omitempty" json:"options,omitempty"`
}

func (m *KindWatchOptions) Reset()                    { *m = KindWatchOptions{} }
func (m *KindWatchOptions) String() string            { return proto.CompactTextString(m) }
func (*KindWatchOptions) ProtoMessage()               {}
func (*KindWatchOptions) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{5} }

func (m *KindWatchOptions) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *KindWatchOptions) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KindWatchOptions) GetOptions() ListWatchOptions {
	if m != nil {
		return m.Options
	}
	return ListWatchOptions{}
}

// Label is the input for label operations
type Label struct {
	//
	TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	ObjectMeta `protobuf:"bytes,2,opt,name=O,json=,inline,embedded=O" json:",inline"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{6} }

// ListMeta contains the metadata for list of objects.
type ListMeta struct {
	// Resource version of object store at the time of list generation.
	ResourceVersion string `protobuf:"bytes,1,opt,name=ResourceVersion,json=resource-version,omitempty,proto3" json:"resource-version,omitempty"`
	// TotalCount is the total count of results (non paginated) that the server holds
	TotalCount int32 `protobuf:"varint,2,opt,name=TotalCount,json=total-count,omitempty,proto3" json:"total-count,omitempty"`
}

func (m *ListMeta) Reset()                    { *m = ListMeta{} }
func (m *ListMeta) String() string            { return proto.CompactTextString(m) }
func (*ListMeta) ProtoMessage()               {}
func (*ListMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{7} }

func (m *ListMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ListMeta) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

//
type ListWatchOptions struct {
	//
	ObjectMeta `protobuf:"bytes,1,opt,name=O,embedded=O" json:""`
	// LabelSelector to select on labels in list or watch results.
	LabelSelector string `protobuf:"bytes,2,opt,name=LabelSelector,json=label-selector,omitempty,proto3" json:"label-selector,omitempty"`
	// FieldSelector to select on field values in list or watch results
	FieldSelector string `protobuf:"bytes,3,opt,name=FieldSelector,json=field-selector,omitempty,proto3" json:"field-selector,omitempty"`
	// FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.
	FieldChangeSelector []string `protobuf:"bytes,5,rep,name=FieldChangeSelector,json=field-change-selector,omitempty" json:"field-change-selector,omitempty"`
	// From represents the start index number (1 based - first object starts from index 1), of the results list.
	// The results returned would be in the range [from ... (from + (max-results - 1))].
	// If From = 0, the server will attempt to return all the results in the list without pagination
	From int32 `protobuf:"varint,6,opt,name=From,json=from,omitempty,proto3" json:"from,omitempty"`
	// MaxResults is the maximum number of results to be returned as part of the response, per page
	// If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err
	// If MaxResults is 0, the server will return all the results without pagination
	MaxResults int32 `protobuf:"varint,7,opt,name=MaxResults,json=max-results,omitempty,proto3" json:"max-results,omitempty"`
	// order to sort List results in.
	SortOrder string `protobuf:"bytes,8,opt,name=SortOrder,json=sort-order,omitempty,proto3" json:"sort-order,omitempty"`
}

func (m *ListWatchOptions) Reset()                    { *m = ListWatchOptions{} }
func (m *ListWatchOptions) String() string            { return proto.CompactTextString(m) }
func (*ListWatchOptions) ProtoMessage()               {}
func (*ListWatchOptions) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{8} }

func (m *ListWatchOptions) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

func (m *ListWatchOptions) GetFieldSelector() string {
	if m != nil {
		return m.FieldSelector
	}
	return ""
}

func (m *ListWatchOptions) GetFieldChangeSelector() []string {
	if m != nil {
		return m.FieldChangeSelector
	}
	return nil
}

func (m *ListWatchOptions) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ListWatchOptions) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *ListWatchOptions) GetSortOrder() string {
	if m != nil {
		return m.SortOrder
	}
	return ""
}

// ObjectMeta contains metadata that all objects stored in kvstore must have.
type ObjectMeta struct {
	// title: Name of the object, unique within a Namespace for scoped objects.
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name"`
	// title: Tenant to which the object belongs to.
	// This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to.
	Tenant string `protobuf:"bytes,2,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace of the object, for scoped objects.
	Namespace string `protobuf:"bytes,3,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// title: GenerationID is the generation Id for the object.
	// This is incremented anytime there is an update to the user intent, including Spec update
	// and any update to ObjectMeta. System generated and updated, not updatable by user.
	GenerationID string `protobuf:"bytes,4,opt,name=GenerationID,json=generation-id,proto3" json:"generation-id"`
	// title: Resource version in the object store.
	// This is updated anytime there is any change to the object.
	// System generated and updated, not updatable by user.
	ResourceVersion string `protobuf:"bytes,5,opt,name=ResourceVersion,json=resource-version,omitempty,proto3" json:"resource-version,omitempty"`
	// title: UUID is the unique identifier for the object.
	// This is generated on creation of the object.
	// System generated, not updatable by user.
	UUID string `protobuf:"bytes,6,opt,name=UUID,json=uuid,omitempty,proto3" json:"uuid,omitempty"`
	// title: Labels are arbitrary (key,value) pairs associated with any object.
	Labels map[string]string `protobuf:"bytes,7,rep,name=Labels,json=labels,omitempty" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// title: CreationTime is the creation time of the object
	//  System generated and updated, not updatable by user.
	CreationTime Timestamp `protobuf:"bytes,8,opt,name=CreationTime,json=creation-time,omitempty" json:"creation-time,omitempty"`
	// title: ModTime is the Last Modification time of the object
	//  System generated and updated, not updatable by user.
	ModTime Timestamp `protobuf:"bytes,9,opt,name=ModTime,json=mod-time,omitempty" json:"mod-time,omitempty"`
	// title: SelfLink is a link for accessing this object.
	// When the object is served from the API-GW it is the
	//  URI path. Example:
	//    - "/v1/tenants/tenants/tenant2"
	//  System generated and updated, not updatable by user.
	SelfLink string `protobuf:"bytes,10,opt,name=SelfLink,json=self-link,omitempty,proto3" json:"self-link,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{9} }

func (m *ObjectMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectMeta) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectMeta) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectMeta) GetGenerationID() string {
	if m != nil {
		return m.GenerationID
	}
	return ""
}

func (m *ObjectMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ObjectMeta) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ObjectMeta) GetCreationTime() Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return Timestamp{}
}

func (m *ObjectMeta) GetModTime() Timestamp {
	if m != nil {
		return m.ModTime
	}
	return Timestamp{}
}

func (m *ObjectMeta) GetSelfLink() string {
	if m != nil {
		return m.SelfLink
	}
	return ""
}

// ObjectRef contains identifying information about an object.
type ObjectRef struct {
	// Tenant of the object.
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace of the object, for scoped objects.
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// Kind represents the type of the API object.
	Kind string `protobuf:"bytes,3,opt,name=Kind,json=kind,omitempty,proto3" json:"kind,omitempty"`
	// Name of the object, unique within a Namespace for scoped objects.
	Name string `protobuf:"bytes,4,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
	// URI is a link to accessing the referenced object.
	URI string `protobuf:"bytes,5,opt,name=URI,json=uri,omitempty,proto3" json:"uri,omitempty"`
}

func (m *ObjectRef) Reset()                    { *m = ObjectRef{} }
func (m *ObjectRef) String() string            { return proto.CompactTextString(m) }
func (*ObjectRef) ProtoMessage()               {}
func (*ObjectRef) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{10} }

func (m *ObjectRef) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ObjectRef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ObjectRef) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *ObjectRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectRef) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

//
type RDAdminValue struct {
	//
	Format string `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	//
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *RDAdminValue) Reset()                    { *m = RDAdminValue{} }
func (m *RDAdminValue) String() string            { return proto.CompactTextString(m) }
func (*RDAdminValue) ProtoMessage()               {}
func (*RDAdminValue) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{11} }

func (m *RDAdminValue) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *RDAdminValue) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Status is returned for calls that dont return objects.
type Status struct {
	//
	TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:""`
	// Result contains the status of the operation, success or failure.
	Result StatusResult `protobuf:"bytes,2,opt,name=Result,json=result,omitempty" json:"result,omitempty"`
	// Message contains human readable form of the error.
	Message []string `protobuf:"bytes,3,rep,name=Message,json=message,omitempty" json:"message,omitempty"`
	// Code is the HTTP status code.
	Code int32 `protobuf:"varint,4,opt,name=Code,json=code,omitempty,proto3" json:"code,omitempty"`
	// Reference to the object (optional) for which this status is being sent.
	Ref *ObjectRef `protobuf:"bytes,5,opt,name=Ref,json=object-ref,omitempty" json:"object-ref,omitempty"`
	// IsTemporary flag is used to distinguish between recoverable and unrecoverable errors
	IsTemporary bool `protobuf:"varint,6,opt,name=IsTemporary,json=-,proto3" json:"-"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{12} }

func (m *Status) GetResult() StatusResult {
	if m != nil {
		return m.Result
	}
	return StatusResult{}
}

func (m *Status) GetMessage() []string {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetRef() *ObjectRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Status) GetIsTemporary() bool {
	if m != nil {
		return m.IsTemporary
	}
	return false
}

// StatusResult contains possible statuses for a NIC.
type StatusResult struct {
	//
	Str string `protobuf:"bytes,1,opt,name=Str,proto3" json:"Str,omitempty"`
}

func (m *StatusResult) Reset()                    { *m = StatusResult{} }
func (m *StatusResult) String() string            { return proto.CompactTextString(m) }
func (*StatusResult) ProtoMessage()               {}
func (*StatusResult) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{13} }

func (m *StatusResult) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

//
type Timestamp struct {
	//
	google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=Time,embedded=Time" json:"Time"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{14} }

// TypeMeta contains the metadata about kind and version for all API objects.
type TypeMeta struct {
	// Kind represents the type of the API object.
	Kind string `protobuf:"bytes,1,opt,name=Kind,json=kind,proto3" json:"kind"`
	// APIVersion defines the version of the API object. This can only be set by the server
	APIVersion string `protobuf:"bytes,2,opt,name=APIVersion,json=api-version,omitempty,proto3" json:"api-version,omitempty"`
}

func (m *TypeMeta) Reset()                    { *m = TypeMeta{} }
func (m *TypeMeta) String() string            { return proto.CompactTextString(m) }
func (*TypeMeta) ProtoMessage()               {}
func (*TypeMeta) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{15} }

func (m *TypeMeta) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *TypeMeta) GetAPIVersion() string {
	if m != nil {
		return m.APIVersion
	}
	return ""
}

//
type WatchEvent struct {
	//
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	//
	Object *google_protobuf2.Any `protobuf:"bytes,2,opt,name=Object,json=object,omitempty" json:"object,omitempty"`
}

func (m *WatchEvent) Reset()                    { *m = WatchEvent{} }
func (m *WatchEvent) String() string            { return proto.CompactTextString(m) }
func (*WatchEvent) ProtoMessage()               {}
func (*WatchEvent) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{16} }

func (m *WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WatchEvent) GetObject() *google_protobuf2.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

//
type WatchEventList struct {
	//
	Events []*WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events,omitempty" json:"events,omitempty"`
}

func (m *WatchEventList) Reset()                    { *m = WatchEventList{} }
func (m *WatchEventList) String() string            { return proto.CompactTextString(m) }
func (*WatchEventList) ProtoMessage()               {}
func (*WatchEventList) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{17} }

func (m *WatchEventList) GetEvents() []*WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*AggWatchOptions)(nil), "api.AggWatchOptions")
	proto.RegisterType((*Any)(nil), "api.Any")
	proto.RegisterType((*BgpAsn)(nil), "api.BgpAsn")
	proto.RegisterType((*Interface)(nil), "api.Interface")
	proto.RegisterType((*InterfaceSlice)(nil), "api.InterfaceSlice")
	proto.RegisterType((*KindWatchOptions)(nil), "api.KindWatchOptions")
	proto.RegisterType((*Label)(nil), "api.Label")
	proto.RegisterType((*ListMeta)(nil), "api.ListMeta")
	proto.RegisterType((*ListWatchOptions)(nil), "api.ListWatchOptions")
	proto.RegisterType((*ObjectMeta)(nil), "api.ObjectMeta")
	proto.RegisterType((*ObjectRef)(nil), "api.ObjectRef")
	proto.RegisterType((*RDAdminValue)(nil), "api.RDAdminValue")
	proto.RegisterType((*Status)(nil), "api.Status")
	proto.RegisterType((*StatusResult)(nil), "api.StatusResult")
	proto.RegisterType((*Timestamp)(nil), "api.Timestamp")
	proto.RegisterType((*TypeMeta)(nil), "api.TypeMeta")
	proto.RegisterType((*WatchEvent)(nil), "api.WatchEvent")
	proto.RegisterType((*WatchEventList)(nil), "api.WatchEventList")
	proto.RegisterEnum("api.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("api.ListWatchOptions_SortOrders", ListWatchOptions_SortOrders_name, ListWatchOptions_SortOrders_value)
}
func (m *AggWatchOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggWatchOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.ObjectMeta.Size()))
	n1, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.WatchOptions) > 0 {
		for _, msg := range m.WatchOptions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.Any.Size()))
	n2, err := m.Any.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *BgpAsn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BgpAsn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ASNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ASNumber))
	}
	return i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Interface_Str) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(len(m.Str)))
	i += copy(dAtA[i:], m.Str)
	return i, nil
}
func (m *Interface_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.Int64))
	return i, nil
}
func (m *Interface_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Interface_Float) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float))))
	i += 8
	return i, nil
}
func (m *Interface_Interfaces) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Interfaces != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Interfaces.Size()))
		n4, err := m.Interfaces.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *InterfaceSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KindWatchOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KindWatchOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if len(m.Kind) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.Options.Size()))
	n5, err := m.Options.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Label) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *ListMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ResourceVersion)))
		i += copy(dAtA[i:], m.ResourceVersion)
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.TotalCount))
	}
	return i, nil
}

func (m *ListWatchOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWatchOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.LabelSelector) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.LabelSelector)))
		i += copy(dAtA[i:], m.LabelSelector)
	}
	if len(m.FieldSelector) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.FieldSelector)))
		i += copy(dAtA[i:], m.FieldSelector)
	}
	if len(m.FieldChangeSelector) > 0 {
		for _, s := range m.FieldChangeSelector {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.From != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.From))
	}
	if m.MaxResults != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.MaxResults))
	}
	if len(m.SortOrder) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SortOrder)))
		i += copy(dAtA[i:], m.SortOrder)
	}
	return i, nil
}

func (m *ObjectMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.GenerationID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.GenerationID)))
		i += copy(dAtA[i:], m.GenerationID)
	}
	if len(m.ResourceVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ResourceVersion)))
		i += copy(dAtA[i:], m.ResourceVersion)
	}
	if len(m.UUID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x3a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovMeta(uint64(len(k))) + 1 + len(v) + sovMeta(uint64(len(v)))
			i = encodeVarintMeta(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeta(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMeta(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.CreationTime.Size()))
	n9, err := m.CreationTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x4a
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.ModTime.Size()))
	n10, err := m.ModTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.SelfLink) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SelfLink)))
		i += copy(dAtA[i:], m.SelfLink)
	}
	return i, nil
}

func (m *ObjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Kind) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *RDAdminValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDAdminValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Format) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.Result.Size()))
	n12, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.Message) > 0 {
		for _, s := range m.Message {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Code != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Code))
	}
	if m.Ref != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Ref.Size()))
		n13, err := m.Ref.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.IsTemporary {
		dAtA[i] = 0x30
		i++
		if m.IsTemporary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StatusResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	return i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.Timestamp.Size()))
	n14, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *TypeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.APIVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.APIVersion)))
		i += copy(dAtA[i:], m.APIVersion)
	}
	return i, nil
}

func (m *WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Object.Size()))
		n15, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *WatchEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AggWatchOptions) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMeta(uint64(l))
	if len(m.WatchOptions) > 0 {
		for _, e := range m.WatchOptions {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func (m *Any) Size() (n int) {
	var l int
	_ = l
	l = m.Any.Size()
	n += 1 + l + sovMeta(uint64(l))
	return n
}

func (m *BgpAsn) Size() (n int) {
	var l int
	_ = l
	if m.ASNumber != 0 {
		n += 1 + sovMeta(uint64(m.ASNumber))
	}
	return n
}

func (m *Interface) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Interface_Str) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovMeta(uint64(l))
	return n
}
func (m *Interface_Int64) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMeta(uint64(m.Int64))
	return n
}
func (m *Interface_Bool) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *Interface_Float) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Interface_Interfaces) Size() (n int) {
	var l int
	_ = l
	if m.Interfaces != nil {
		l = m.Interfaces.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}
func (m *InterfaceSlice) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func (m *KindWatchOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = m.Options.Size()
	n += 1 + l + sovMeta(uint64(l))
	return n
}

func (m *Label) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMeta(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMeta(uint64(l))
	return n
}

func (m *ListMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovMeta(uint64(m.TotalCount))
	}
	return n
}

func (m *ListWatchOptions) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMeta(uint64(l))
	l = len(m.LabelSelector)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.FieldSelector)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if len(m.FieldChangeSelector) > 0 {
		for _, s := range m.FieldChangeSelector {
			l = len(s)
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if m.From != 0 {
		n += 1 + sovMeta(uint64(m.From))
	}
	if m.MaxResults != 0 {
		n += 1 + sovMeta(uint64(m.MaxResults))
	}
	l = len(m.SortOrder)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *ObjectMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.GenerationID)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeta(uint64(len(k))) + 1 + len(v) + sovMeta(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeta(uint64(mapEntrySize))
		}
	}
	l = m.CreationTime.Size()
	n += 1 + l + sovMeta(uint64(l))
	l = m.ModTime.Size()
	n += 1 + l + sovMeta(uint64(l))
	l = len(m.SelfLink)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *ObjectRef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *RDAdminValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovMeta(uint64(m.Value))
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMeta(uint64(l))
	l = m.Result.Size()
	n += 1 + l + sovMeta(uint64(l))
	if len(m.Message) > 0 {
		for _, s := range m.Message {
			l = len(s)
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if m.Code != 0 {
		n += 1 + sovMeta(uint64(m.Code))
	}
	if m.Ref != nil {
		l = m.Ref.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.IsTemporary {
		n += 2
	}
	return n
}

func (m *StatusResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	var l int
	_ = l
	l = m.Timestamp.Size()
	n += 1 + l + sovMeta(uint64(l))
	return n
}

func (m *TypeMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.APIVersion)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *WatchEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggWatchOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggWatchOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggWatchOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WatchOptions = append(m.WatchOptions, KindWatchOptions{})
			if err := m.WatchOptions[len(m.WatchOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Any.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BgpAsn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BgpAsn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BgpAsn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ASNumber", wireType)
			}
			m.ASNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ASNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Interface_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Interface_Int64{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &Interface_Bool{b}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &Interface_Float{float64(math.Float64frombits(v))}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceSlice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Interface_Interfaces{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Interface{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KindWatchOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KindWatchOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KindWatchOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWatchOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWatchOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWatchOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldChangeSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldChangeSelector = append(m.FieldChangeSelector, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResults", wireType)
			}
			m.MaxResults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxResults |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenerationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeta
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeta
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeta
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeta(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMeta
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ModTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelfLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDAdminValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDAdminValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDAdminValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ref == nil {
				m.Ref = &ObjectRef{}
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTemporary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTemporary = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &google_protobuf2.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 1766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4b, 0x6f, 0x1b, 0xc9,
	0x11, 0xe6, 0xf0, 0x25, 0xb2, 0xf4, 0xa2, 0x5b, 0x92, 0x4d, 0x32, 0x5e, 0x51, 0x61, 0x16, 0x01,
	0xbd, 0xd0, 0x50, 0x8e, 0xd7, 0x51, 0xb4, 0xc1, 0xe6, 0xa1, 0xd1, 0xc3, 0x56, 0x56, 0xb2, 0x82,
	0xa1, 0xec, 0x20, 0x97, 0x00, 0x43, 0xb2, 0x49, 0x4f, 0x3c, 0xd3, 0x3d, 0x98, 0x69, 0x7a, 0x3d,
	0x7f, 0xc0, 0xe0, 0x21, 0xf7, 0xfc, 0x82, 0x5c, 0xfc, 0x2b, 0x72, 0xdc, 0x5b, 0xf6, 0x94, 0x43,
	0x0e, 0x44, 0xc0, 0x4b, 0x02, 0xfe, 0x85, 0x5c, 0x82, 0x7e, 0x0c, 0xd9, 0xa4, 0x28, 0x67, 0x83,
	0xbd, 0x10, 0xac, 0x47, 0x7f, 0xd3, 0x5d, 0xf5, 0x55, 0x75, 0x35, 0x80, 0x8f, 0x99, 0xd3, 0x0c,
	0x42, 0xca, 0x28, 0xca, 0x38, 0x81, 0x5b, 0x7d, 0xd8, 0xa7, 0xb4, 0xef, 0xe1, 0x03, 0x27, 0x70,
	0x0f, 0x1c, 0x42, 0x28, 0x73, 0x98, 0x4b, 0x49, 0x24, 0x5d, 0xaa, 0x27, 0x7d, 0x97, 0xbd, 0x1e,
	0xb4, 0x9b, 0x1d, 0xea, 0x1f, 0x04, 0x98, 0x44, 0x0e, 0xe9, 0xd2, 0x83, 0xe8, 0xeb, 0x83, 0xb7,
	0x98, 0xb8, 0x1d, 0x7c, 0x30, 0x60, 0xae, 0x17, 0xf1, 0xa5, 0x7d, 0x4c, 0xf4, 0xd5, 0xca, 0xae,
	0x40, 0x4c, 0x0d, 0xa4, 0x4f, 0xfb, 0xf4, 0x40, 0xa8, 0xdb, 0x83, 0x9e, 0x90, 0x84, 0x20, 0xfe,
	0x29, 0xf7, 0x9a, 0xda, 0xd1, 0xd4, 0x8b, 0xb9, 0x3e, 0x8e, 0x98, 0xe3, 0x07, 0xca, 0xa1, 0xb2,
	0xe8, 0xe0, 0x90, 0x58, 0x9a, 0xea, 0x7f, 0x35, 0x60, 0xf3, 0xb8, 0xdf, 0xff, 0x9d, 0xc3, 0x3a,
	0xaf, 0xaf, 0x03, 0xb1, 0x17, 0x74, 0x0e, 0xc6, 0x75, 0xd9, 0xd8, 0x33, 0x1a, 0xab, 0x4f, 0x36,
	0x9b, 0x4e, 0xe0, 0x36, 0xaf, 0xdb, 0x7f, 0xc4, 0x1d, 0x76, 0x85, 0x99, 0x63, 0x55, 0xbf, 0x19,
	0xd5, 0x52, 0xdf, 0x8e, 0x6a, 0xc6, 0x64, 0x54, 0xdb, 0xe0, 0xa1, 0xd9, 0xa7, 0xbe, 0xcb, 0xb0,
	0x1f, 0xb0, 0xd8, 0x5e, 0x90, 0x11, 0x86, 0x35, 0x1d, 0xb7, 0x9c, 0xde, 0xcb, 0x34, 0x56, 0x9f,
	0xec, 0x08, 0xc8, 0xaf, 0x5c, 0xd2, 0xd5, 0x8d, 0x56, 0x8d, 0x03, 0x4f, 0x46, 0xb5, 0x07, 0x5f,
	0x73, 0xad, 0x49, 0xa5, 0x5a, 0x43, 0xbf, 0xcb, 0x50, 0xff, 0x05, 0x64, 0x8e, 0x49, 0x8c, 0x0e,
	0x21, 0x2f, 0xf7, 0xa9, 0xb6, 0xbe, 0xdd, 0x94, 0xa7, 0x6e, 0x26, 0xa7, 0x6e, 0x1e, 0x93, 0xd8,
	0x2a, 0x24, 0xfb, 0xb7, 0x95, 0x77, 0xfd, 0x53, 0xc8, 0x5b, 0xfd, 0xe0, 0x38, 0x22, 0xa8, 0x0a,
	0x85, 0xe3, 0xd6, 0x8b, 0x81, 0xdf, 0xc6, 0xa1, 0xc0, 0x58, 0xb7, 0xa7, 0x72, 0xfd, 0x2f, 0x06,
	0x14, 0x2f, 0x08, 0xc3, 0x61, 0xcf, 0xe9, 0x60, 0x84, 0x20, 0xd3, 0x62, 0xd2, 0xa9, 0xf8, 0x3c,
	0x65, 0x73, 0x01, 0xdd, 0x87, 0xdc, 0x05, 0x61, 0x87, 0x4f, 0xcb, 0xe9, 0x3d, 0xa3, 0x91, 0x79,
	0x9e, 0xb2, 0xa5, 0x88, 0xb6, 0x21, 0x6b, 0x51, 0xea, 0x95, 0x33, 0x7b, 0x46, 0xa3, 0xf0, 0x3c,
	0x65, 0x0b, 0x89, 0x7b, 0x9f, 0x7b, 0xd4, 0x61, 0xe5, 0xec, 0x9e, 0xd1, 0x30, 0xb8, 0xb7, 0x10,
	0xd1, 0x4f, 0x01, 0xa6, 0x9f, 0x89, 0xca, 0x39, 0x71, 0x92, 0x2d, 0x11, 0xb1, 0xa9, 0xba, 0xe5,
	0xb9, 0x1d, 0xfc, 0x3c, 0x65, 0x6b, 0x8e, 0xd6, 0x0a, 0xe4, 0x5e, 0x39, 0xde, 0x00, 0xd7, 0x8f,
	0x60, 0x63, 0xde, 0x11, 0xfd, 0x18, 0xf2, 0xc2, 0x14, 0x95, 0x0d, 0x11, 0xff, 0x8d, 0x79, 0x34,
	0x5b, 0x59, 0xeb, 0x7f, 0x33, 0xa0, 0xb4, 0x98, 0x15, 0xf4, 0x39, 0xe4, 0x9e, 0x85, 0x74, 0x10,
	0x88, 0x43, 0x15, 0xad, 0xad, 0xc9, 0xa8, 0xb6, 0xd9, 0xe7, 0x0a, 0x2d, 0x31, 0x8b, 0x0a, 0xf4,
	0x18, 0xb2, 0x1c, 0x48, 0x9c, 0xb8, 0x68, 0x21, 0xce, 0x94, 0x37, 0x2e, 0xe9, 0xea, 0x4c, 0x99,
	0x97, 0xd1, 0x0d, 0xac, 0x24, 0x24, 0xc9, 0x8a, 0x23, 0x4b, 0x92, 0x5c, 0xba, 0x11, 0x9b, 0x23,
	0x49, 0x45, 0x91, 0xe4, 0xde, 0x6d, 0x7a, 0xdc, 0x56, 0xd5, 0x63, 0xc8, 0x5d, 0x3a, 0x6d, 0xec,
	0xa1, 0x43, 0x30, 0x6e, 0x14, 0x2b, 0xd6, 0x05, 0xf0, 0x4d, 0x1c, 0x60, 0x41, 0xe7, 0x2d, 0x8d,
	0xce, 0x2b, 0xfb, 0x2e, 0xf1, 0x5c, 0x82, 0xed, 0xe4, 0x0f, 0x3a, 0xe2, 0x85, 0x90, 0x5e, 0x5e,
	0x08, 0x1f, 0x5d, 0xc9, 0xe9, 0x52, 0xe0, 0xbb, 0xe7, 0xae, 0xa8, 0x05, 0x9b, 0x36, 0x8e, 0xe8,
	0x20, 0xec, 0xe0, 0x57, 0x38, 0x8c, 0x5c, 0x4a, 0x24, 0x73, 0xac, 0xdd, 0xc9, 0xa8, 0x56, 0x0d,
	0x95, 0xc9, 0x7c, 0x2b, 0x6d, 0xda, 0x99, 0x3e, 0x62, 0x43, 0xa7, 0x00, 0x37, 0x94, 0x39, 0xde,
	0x09, 0x1d, 0x10, 0x26, 0x36, 0x99, 0xb3, 0x2a, 0x93, 0x51, 0x6d, 0x87, 0x71, 0xad, 0xd9, 0xe1,
	0x6a, 0x0d, 0x6a, 0xb9, 0xba, 0xfe, 0x9f, 0x3c, 0x94, 0x16, 0xa3, 0x8c, 0x3e, 0xfb, 0x48, 0xfd,
	0xaf, 0x69, 0xc7, 0x4e, 0xd9, 0x29, 0x74, 0x05, 0xeb, 0x22, 0xc6, 0x2d, 0xec, 0xe1, 0x0e, 0xa3,
	0xa1, 0x22, 0xca, 0xc3, 0xc9, 0xa8, 0x56, 0xf6, 0xb8, 0xc1, 0x8c, 0x94, 0x45, 0xdb, 0xcc, 0x9d,
	0x16, 0x0e, 0x77, 0xee, 0x62, 0xaf, 0x3b, 0x85, 0xcb, 0xcc, 0xe0, 0x7a, 0xdc, 0xb0, 0x14, 0xee,
	0x2e, 0x0b, 0x72, 0x60, 0x4b, 0xc0, 0x9d, 0xbc, 0x76, 0x48, 0x1f, 0x4f, 0x41, 0x73, 0x7b, 0x99,
	0x46, 0xd1, 0xfa, 0xd1, 0x64, 0x54, 0xab, 0xc9, 0xa5, 0x1d, 0x61, 0x5f, 0x86, 0xfd, 0xbf, 0x1c,
	0x38, 0xd9, 0xcf, 0x43, 0xea, 0x97, 0xf3, 0x22, 0x03, 0x82, 0xec, 0xbd, 0x90, 0xfa, 0x3a, 0xd9,
	0xe7, 0x65, 0x9e, 0xb9, 0x2b, 0xe7, 0x9d, 0x8d, 0xa3, 0x81, 0xc7, 0xa2, 0xf2, 0xca, 0x2c, 0x73,
	0xbe, 0xf3, 0xce, 0x0c, 0xa5, 0x5a, 0xcf, 0xdc, 0x52, 0x35, 0x72, 0xa1, 0xd8, 0xa2, 0x21, 0xbb,
	0x0e, 0xbb, 0x38, 0x2c, 0x17, 0x44, 0x94, 0x7e, 0xfd, 0xe1, 0x7d, 0xe5, 0xd3, 0x16, 0x0b, 0xcf,
	0xc8, 0xc0, 0x6f, 0x2c, 0x66, 0xb5, 0x39, 0xf5, 0x8e, 0x1e, 0x4d, 0x46, 0xb5, 0xed, 0x88, 0x86,
	0xcc, 0xa4, 0x5c, 0xd6, 0xbe, 0xb5, 0x54, 0x5b, 0xff, 0x7b, 0x1a, 0x60, 0xb6, 0x1a, 0x15, 0x20,
	0xfb, 0x82, 0x12, 0x5c, 0x4a, 0xa1, 0x07, 0x90, 0xb7, 0xe2, 0x17, 0x8e, 0x8f, 0x4b, 0x46, 0x75,
	0x75, 0x3c, 0xac, 0xac, 0xb4, 0x63, 0x93, 0x38, 0x3e, 0xef, 0x39, 0xeb, 0xd2, 0x60, 0x63, 0xce,
	0x5c, 0x5c, 0x4a, 0x57, 0xb7, 0xc6, 0xc3, 0xca, 0xa6, 0xb2, 0x9b, 0xa1, 0x54, 0xa3, 0x4f, 0xa0,
	0x68, 0xc5, 0xaa, 0x26, 0x4a, 0x99, 0xea, 0xc6, 0x78, 0x58, 0x81, 0x76, 0x9c, 0xb0, 0x1d, 0xed,
	0x43, 0x69, 0x6a, 0x4e, 0x90, 0xb2, 0xd5, 0xfb, 0xe3, 0x61, 0x05, 0xcd, 0xbc, 0xa6, 0x60, 0x0d,
	0xd8, 0xb0, 0xe2, 0x93, 0x10, 0x8b, 0x1b, 0xf5, 0xc6, 0xf5, 0x71, 0x29, 0x57, 0xdd, 0x1e, 0x0f,
	0x2b, 0xa5, 0x76, 0x6c, 0x76, 0x94, 0xda, 0xe4, 0x57, 0x23, 0xfa, 0x19, 0xec, 0xcc, 0x7b, 0x26,
	0xe0, 0xf9, 0xea, 0xc3, 0xf1, 0xb0, 0x52, 0x5e, 0x5c, 0x30, 0xfd, 0xc4, 0x2e, 0xdf, 0xef, 0x15,
	0xed, 0x0a, 0xf4, 0x95, 0xea, 0xe6, 0x78, 0x58, 0x59, 0x6d, 0xc7, 0xa6, 0x4f, 0xbb, 0x12, 0xd8,
	0xe4, 0x1b, 0x56, 0xf6, 0x04, 0xb3, 0x50, 0x7d, 0x30, 0x1e, 0x56, 0xb6, 0x34, 0xb7, 0x04, 0xae,
	0xfe, 0xaf, 0x3c, 0xc0, 0xac, 0xb6, 0xd0, 0x97, 0x90, 0xe5, 0x31, 0x53, 0xcd, 0xa1, 0xf1, 0xe1,
	0x7d, 0x65, 0xcd, 0xc6, 0xfd, 0xb3, 0x77, 0x41, 0x83, 0x07, 0xed, 0x11, 0x97, 0x5b, 0x2c, 0xbc,
	0xc4, 0xa4, 0xf1, 0x64, 0xff, 0xf0, 0x29, 0xcf, 0x62, 0x96, 0x1b, 0x6c, 0xf1, 0x8b, 0x3c, 0xc8,
	0xdf, 0x60, 0xe2, 0xa8, 0x66, 0x50, 0xb4, 0x7e, 0xf3, 0xe1, 0x7d, 0xa5, 0x72, 0xc6, 0x13, 0x78,
	0x1d, 0x36, 0x14, 0x8e, 0xe3, 0x05, 0xaf, 0x1d, 0x32, 0xf0, 0x1f, 0x71, 0xb0, 0x9d, 0xc4, 0xa8,
	0x40, 0x7f, 0xb2, 0xff, 0xf4, 0xe8, 0x11, 0x47, 0x2d, 0x31, 0x81, 0xa3, 0xf1, 0xe2, 0x96, 0x06,
	0xf9, 0x50, 0xe4, 0x7b, 0x8d, 0x02, 0xa7, 0x83, 0x55, 0x91, 0x9e, 0x7d, 0x78, 0x5f, 0xd9, 0x52,
	0x98, 0x0b, 0xfb, 0x4e, 0xd4, 0x0b, 0xdb, 0xdf, 0x22, 0x09, 0x84, 0xf6, 0xad, 0x65, 0x4a, 0x74,
	0x08, 0x6b, 0xcf, 0x30, 0xc1, 0xa1, 0xc8, 0xc9, 0xc5, 0xa9, 0xb8, 0x25, 0x8a, 0xd6, 0xbd, 0xc9,
	0xa8, 0xb6, 0xde, 0x9f, 0xea, 0x4d, 0xb7, 0x6b, 0xcf, 0x8b, 0xcb, 0x5a, 0x6f, 0xee, 0x7b, 0xb7,
	0xde, 0xc7, 0x90, 0x7d, 0xf9, 0xf2, 0xe2, 0x54, 0x94, 0xbc, 0xba, 0xdf, 0x06, 0x03, 0x77, 0xee,
	0x7e, 0x9b, 0x97, 0x51, 0x0b, 0xf2, 0xa2, 0x4b, 0xf2, 0x72, 0xe7, 0x77, 0xf0, 0x0f, 0x16, 0xda,
	0x6a, 0x53, 0x5a, 0xcf, 0x08, 0x0b, 0x63, 0x6b, 0x9b, 0xa7, 0x40, 0x74, 0x48, 0xbd, 0x0d, 0xdc,
	0xd2, 0xa0, 0x3f, 0xc0, 0x9a, 0xce, 0x61, 0xd1, 0x04, 0x92, 0xeb, 0xfd, 0x26, 0x99, 0x00, 0x67,
	0x73, 0xd5, 0x1c, 0xa3, 0xf5, 0xb9, 0xea, 0x0e, 0x03, 0xba, 0x86, 0x15, 0x45, 0xe5, 0x72, 0x71,
	0x29, 0x74, 0x55, 0x41, 0xa3, 0x84, 0xd8, 0x1a, 0xea, 0x12, 0x1d, 0xfa, 0x25, 0x14, 0x5a, 0xd8,
	0xeb, 0x5d, 0xba, 0xe4, 0x4d, 0x19, 0x44, 0xec, 0x1e, 0x70, 0x12, 0x44, 0xd8, 0xeb, 0x99, 0x9e,
	0x4b, 0xde, 0xe8, 0x24, 0x58, 0xa2, 0xac, 0x7e, 0x01, 0xab, 0x5a, 0x9c, 0x50, 0x09, 0x32, 0x6f,
	0x70, 0x2c, 0xab, 0xc5, 0xe6, 0x7f, 0xd1, 0x36, 0xe4, 0xde, 0xf2, 0x61, 0x46, 0x56, 0x80, 0x2d,
	0x85, 0x9f, 0xa7, 0x8f, 0x8c, 0xfa, 0x9f, 0xd3, 0x50, 0x94, 0xe1, 0xb6, 0x71, 0x8f, 0x8f, 0x8a,
	0xaa, 0x54, 0x64, 0xa9, 0x6d, 0x7f, 0x47, 0xd2, 0xff, 0x4a, 0x27, 0x7d, 0x7a, 0x76, 0x82, 0xef,
	0x4c, 0xe3, 0xff, 0x7f, 0x32, 0x7a, 0xac, 0x7a, 0x42, 0x76, 0xb6, 0x82, 0x03, 0xeb, 0x2b, 0xe6,
	0x65, 0x64, 0x42, 0xe6, 0xa5, 0x7d, 0xa1, 0x68, 0x2e, 0x2a, 0x64, 0x10, 0xba, 0x9a, 0xff, 0xbc,
	0x58, 0xff, 0x12, 0xd6, 0xec, 0xd3, 0xe3, 0xae, 0xef, 0x12, 0x31, 0x07, 0xa2, 0xfb, 0x90, 0x3f,
	0xa7, 0xa1, 0xef, 0xa8, 0xd8, 0xd8, 0x4a, 0xe2, 0xb1, 0x7d, 0x35, 0x8d, 0xed, 0xba, 0xad, 0xc6,
	0xcd, 0x7f, 0xa4, 0x21, 0xdf, 0x62, 0x0e, 0x1b, 0x44, 0xa8, 0x71, 0xe7, 0x90, 0x75, 0x7b, 0x66,
	0xc8, 0xcb, 0xdb, 0x4f, 0xcd, 0x56, 0xf7, 0x84, 0xbb, 0x84, 0x91, 0x06, 0xab, 0xac, 0xa8, 0x55,
	0x92, 0x17, 0x9f, 0x9e, 0x95, 0x45, 0x0d, 0xfa, 0x02, 0x56, 0xae, 0x70, 0x14, 0x39, 0x7d, 0xde,
	0x88, 0xf8, 0xc5, 0xbe, 0xc3, 0x27, 0x44, 0x5f, 0xaa, 0xf4, 0x09, 0xf1, 0x96, 0x8a, 0x47, 0xf7,
	0x84, 0x76, 0x65, 0x74, 0xd5, 0xe5, 0xdd, 0xa1, 0xdd, 0xb9, 0xe8, 0xce, 0xcb, 0xe8, 0x2b, 0xc8,
	0xd8, 0xb8, 0xa7, 0x06, 0xf3, 0x0d, 0xad, 0x8c, 0x6d, 0xdc, 0xb3, 0xca, 0xfc, 0x62, 0xa5, 0x42,
	0x34, 0x43, 0xdc, 0xd3, 0x2f, 0xd6, 0x65, 0x5a, 0xf4, 0x09, 0xac, 0x5e, 0x44, 0x37, 0xd8, 0x0f,
	0x68, 0xe8, 0x84, 0xb1, 0xe8, 0x27, 0x05, 0x2b, 0x37, 0x19, 0xd5, 0x0c, 0xd3, 0x36, 0xcc, 0xfa,
	0x1e, 0xac, 0xe9, 0x41, 0xe1, 0x84, 0x9f, 0xbe, 0x3a, 0xc4, 0x9b, 0xa3, 0x7e, 0x06, 0xc5, 0x69,
	0x39, 0xa2, 0x23, 0xc8, 0x8a, 0x62, 0x95, 0x39, 0xa8, 0xde, 0x7a, 0xfe, 0xcc, 0x0a, 0x77, 0xf6,
	0x08, 0x12, 0x2b, 0xea, 0x04, 0x0a, 0x49, 0xb2, 0xd0, 0x43, 0x45, 0x51, 0x59, 0x19, 0x05, 0x7e,
	0xc9, 0x70, 0x4a, 0xda, 0xe2, 0x97, 0xcf, 0x2e, 0xc7, 0xbf, 0xbd, 0x48, 0x5a, 0xa9, 0x2c, 0x01,
	0x31, 0xbb, 0x38, 0x81, 0xbb, 0xa4, 0x8b, 0x2e, 0x57, 0xd7, 0xff, 0x64, 0x00, 0x88, 0xd9, 0xe4,
	0xec, 0x2d, 0x26, 0x8c, 0x67, 0x81, 0x7f, 0x5e, 0x7d, 0x52, 0x64, 0x81, 0xc5, 0xc1, 0x5c, 0x16,
	0xe6, 0x65, 0x74, 0x39, 0x7d, 0xeb, 0xa5, 0x3f, 0xf2, 0xd6, 0x13, 0x65, 0x2d, 0x03, 0xaf, 0x13,
	0x68, 0x51, 0x53, 0xff, 0x3d, 0x6c, 0xcc, 0x76, 0xc3, 0xe7, 0x26, 0xf4, 0x0c, 0xf2, 0x42, 0x48,
	0xde, 0x4c, 0x72, 0x0c, 0x9e, 0x39, 0x49, 0x68, 0x2c, 0x5c, 0x74, 0xe8, 0x45, 0xcd, 0x67, 0x0c,
	0x8a, 0x62, 0x01, 0x3f, 0x1f, 0xfa, 0x21, 0xac, 0x8a, 0x86, 0x8d, 0x85, 0xaa, 0x94, 0xaa, 0x96,
	0xc6, 0xc3, 0xca, 0x9a, 0x68, 0xbf, 0xd8, 0x14, 0x4b, 0xb9, 0xcb, 0xcb, 0xa0, 0x3b, 0x75, 0x31,
	0xa4, 0xcb, 0x40, 0xa8, 0x66, 0x2e, 0xa7, 0xd8, 0xc3, 0x89, 0x4b, 0x5a, 0xba, 0x74, 0x85, 0x4a,
	0xba, 0x58, 0xa5, 0x6f, 0xc6, 0xbb, 0xc6, 0xb7, 0xe3, 0x5d, 0xe3, 0x9f, 0xe3, 0x5d, 0xe3, 0xdf,
	0xe3, 0xdd, 0x54, 0x3b, 0x2f, 0x02, 0xf3, 0xf9, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x83, 0xec,
	0x0e, 0xab, 0xce, 0x10, 0x00, 0x00,
}
