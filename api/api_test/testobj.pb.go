// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testobj.proto

/*
	Package apitest is a generated protocol buffer package.

	Service name

	It is generated from these files:
		testobj.proto

	It has these top-level messages:
		TestObj
		TestObjList
*/
package apitest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type TestObj struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec string `protobuf:"bytes,3,opt,name=Spec,proto3" json:"Spec,omitempty"`
	//
	Status string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *TestObj) Reset()                    { *m = TestObj{} }
func (m *TestObj) String() string            { return proto.CompactTextString(m) }
func (*TestObj) ProtoMessage()               {}
func (*TestObj) Descriptor() ([]byte, []int) { return fileDescriptorTestobj, []int{0} }

func (m *TestObj) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *TestObj) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

//
type TestObjList struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Items []*TestObj `protobuf:"bytes,3,rep,name=Items" json:"Items,omitempty"`
}

func (m *TestObjList) Reset()                    { *m = TestObjList{} }
func (m *TestObjList) String() string            { return proto.CompactTextString(m) }
func (*TestObjList) ProtoMessage()               {}
func (*TestObjList) Descriptor() ([]byte, []int) { return fileDescriptorTestobj, []int{1} }

func (m *TestObjList) GetItems() []*TestObj {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*TestObj)(nil), "apitest.TestObj")
	proto.RegisterType((*TestObjList)(nil), "apitest.TestObjList")
}
func (m *TestObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTestobj(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTestobj(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Spec) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTestobj(dAtA, i, uint64(len(m.Spec)))
		i += copy(dAtA[i:], m.Spec)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTestobj(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *TestObjList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestObjList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTestobj(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintTestobj(dAtA, i, uint64(m.ObjectMeta.Size()))
	n4, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTestobj(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTestobj(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestObj) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTestobj(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTestobj(uint64(l))
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovTestobj(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTestobj(uint64(l))
	}
	return n
}

func (m *TestObjList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTestobj(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTestobj(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTestobj(uint64(l))
		}
	}
	return n
}

func sovTestobj(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTestobj(x uint64) (n int) {
	return sovTestobj(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestobj
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestobj(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestobj
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestObjList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestobj
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestObjList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestObjList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestobj
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TestObj{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestobj(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestobj
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestobj(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestobj
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestobj
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTestobj
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTestobj
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTestobj(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTestobj = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestobj   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("testobj.proto", fileDescriptorTestobj) }

var fileDescriptorTestobj = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x1b, 0x5b, 0x5b, 0xcc, 0x5a, 0x94, 0x08, 0xba, 0xf4, 0xd0, 0x16, 0x41, 0xe9, 0x41,
	0x12, 0xa8, 0xe0, 0x59, 0x0a, 0x1e, 0x04, 0xa5, 0xd2, 0xf6, 0x05, 0xb2, 0xdb, 0xa1, 0x4e, 0x69,
	0x93, 0x60, 0x66, 0x15, 0x9f, 0xca, 0xd7, 0xe8, 0xb1, 0x4f, 0x50, 0xa4, 0x47, 0x9f, 0x42, 0x36,
	0xbb, 0x85, 0x5e, 0x3c, 0x7b, 0x9b, 0x99, 0xe4, 0xfb, 0xf3, 0x91, 0xe1, 0x4d, 0x02, 0x4f, 0x36,
	0x99, 0x4b, 0xf7, 0x66, 0xc9, 0x8a, 0x86, 0x76, 0x98, 0x4f, 0x5a, 0x0f, 0x33, 0xa4, 0xd7, 0x2c,
	0x91, 0xa9, 0x5d, 0x2a, 0x07, 0xc6, 0x6b, 0x33, 0xb5, 0xca, 0x7f, 0xa8, 0x77, 0x30, 0x98, 0x82,
	0xca, 0x08, 0x17, 0x5e, 0x69, 0x87, 0x33, 0x30, 0x4a, 0x1b, 0x63, 0x49, 0x13, 0x5a, 0xe3, 0x15,
	0x9a, 0x74, 0x91, 0x4d, 0xc1, 0x17, 0x79, 0xad, 0xab, 0x3f, 0x62, 0xb4, 0x43, 0xb5, 0x04, 0xd2,
	0xc5, 0xb5, 0xcb, 0x2f, 0xc6, 0x1b, 0x13, 0xf0, 0x34, 0x4c, 0xe6, 0xe2, 0x8e, 0xb3, 0x49, 0xcc,
	0xba, 0xac, 0x17, 0xf5, 0x9b, 0x52, 0x3b, 0x94, 0x93, 0x4f, 0x07, 0xcf, 0x40, 0x7a, 0x70, 0xb6,
	0xda, 0x74, 0x2a, 0xeb, 0x4d, 0x87, 0xfd, 0x6c, 0x3a, 0x8d, 0x1b, 0x34, 0x0b, 0x34, 0x30, 0xda,
	0x15, 0xe2, 0x9e, 0xb3, 0x61, 0x7c, 0x10, 0xb8, 0x93, 0xc0, 0x0d, 0x93, 0x39, 0xa4, 0x14, 0xc8,
	0x8b, 0x3d, 0x32, 0xca, 0xdf, 0xdd, 0xd1, 0xfb, 0x8d, 0x10, 0xbc, 0x36, 0x76, 0x90, 0xc6, 0xd5,
	0x2e, 0xeb, 0x1d, 0x8d, 0x42, 0x2d, 0xce, 0x79, 0x7d, 0x4c, 0x9a, 0x32, 0x1f, 0xd7, 0xc2, 0xb4,
	0xec, 0x72, 0xe3, 0xa8, 0x34, 0x7e, 0x42, 0x4f, 0xff, 0x68, 0x7d, 0xcd, 0x0f, 0x1f, 0x09, 0x96,
	0x3e, 0xae, 0x76, 0xab, 0xbd, 0xa8, 0x7f, 0x2a, 0xcb, 0x15, 0xca, 0x52, 0x6f, 0x54, 0x1c, 0x0f,
	0x8e, 0x57, 0xdb, 0x36, 0x5b, 0x6f, 0xdb, 0xec, 0x7b, 0xdb, 0x66, 0x2f, 0x95, 0xa4, 0x1e, 0xbe,
	0xfe, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x93, 0x68, 0x9b, 0x1b, 0x02, 0x02, 0x00, 0x00,
}
