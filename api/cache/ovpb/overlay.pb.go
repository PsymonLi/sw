// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: overlay.proto

/*
	Package overlaypb is a generated protocol buffer package.

	Service name

	It is generated from these files:
		overlay.proto

	It has these top-level messages:
		BufferItem
		BufferItemList
*/
package overlaypb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"
import google_protobuf2 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// BufferItem is used to persist contents of the staging buffer in KV store.
// This is sperate from the user visible staging Buffer. This is an internal
// object used by the API Server
type BufferItem struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	ItemId *BufferItem_Id `protobuf:"bytes,3,opt,name=ItemId" json:"ItemId,omitempty"`
	//
	Object *google_protobuf2.Any `protobuf:"bytes,4,opt,name=Object" json:"Object,omitempty"`
}

func (m *BufferItem) Reset()                    { *m = BufferItem{} }
func (m *BufferItem) String() string            { return proto.CompactTextString(m) }
func (*BufferItem) ProtoMessage()               {}
func (*BufferItem) Descriptor() ([]byte, []int) { return fileDescriptorOverlay, []int{0} }

func (m *BufferItem) GetItemId() *BufferItem_Id {
	if m != nil {
		return m.ItemId
	}
	return nil
}

func (m *BufferItem) GetObject() *google_protobuf2.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

type BufferItem_Id struct {
	Kind      string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	URI       string `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
	Operation string `protobuf:"bytes,3,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Service   string `protobuf:"bytes,4,opt,name=Service,proto3" json:"Service,omitempty"`
	Method    string `protobuf:"bytes,5,opt,name=Method,proto3" json:"Method,omitempty"`
}

func (m *BufferItem_Id) Reset()                    { *m = BufferItem_Id{} }
func (m *BufferItem_Id) String() string            { return proto.CompactTextString(m) }
func (*BufferItem_Id) ProtoMessage()               {}
func (*BufferItem_Id) Descriptor() ([]byte, []int) { return fileDescriptorOverlay, []int{0, 0} }

func (m *BufferItem_Id) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *BufferItem_Id) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *BufferItem_Id) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *BufferItem_Id) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *BufferItem_Id) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// BufferItemList is collection fo BufferItems
type BufferItemList struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ListMeta `protobuf:"bytes,2,opt,name=L,json=,inline,embedded=L" json:",inline"`
	//
	Items []*BufferItem `protobuf:"bytes,3,rep,name=Items" json:"Items,omitempty"`
}

func (m *BufferItemList) Reset()                    { *m = BufferItemList{} }
func (m *BufferItemList) String() string            { return proto.CompactTextString(m) }
func (*BufferItemList) ProtoMessage()               {}
func (*BufferItemList) Descriptor() ([]byte, []int) { return fileDescriptorOverlay, []int{1} }

func (m *BufferItemList) GetItems() []*BufferItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*BufferItem)(nil), "overlaypb.BufferItem")
	proto.RegisterType((*BufferItem_Id)(nil), "overlaypb.BufferItem.Id")
	proto.RegisterType((*BufferItemList)(nil), "overlaypb.BufferItemList")
}
func (m *BufferItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOverlay(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintOverlay(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.ItemId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(m.ItemId.Size()))
		n3, err := m.ItemId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Object != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *BufferItem_Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferItem_Id) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if len(m.Operation) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(len(m.Operation)))
		i += copy(dAtA[i:], m.Operation)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOverlay(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *BufferItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOverlay(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintOverlay(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintOverlay(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOverlay(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BufferItem) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovOverlay(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovOverlay(uint64(l))
	if m.ItemId != nil {
		l = m.ItemId.Size()
		n += 1 + l + sovOverlay(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovOverlay(uint64(l))
	}
	return n
}

func (m *BufferItem_Id) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovOverlay(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovOverlay(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovOverlay(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovOverlay(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovOverlay(uint64(l))
	}
	return n
}

func (m *BufferItemList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovOverlay(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovOverlay(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOverlay(uint64(l))
		}
	}
	return n
}

func sovOverlay(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOverlay(x uint64) (n int) {
	return sovOverlay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BufferItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOverlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemId == nil {
				m.ItemId = &BufferItem_Id{}
			}
			if err := m.ItemId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &google_protobuf2.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOverlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOverlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferItem_Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOverlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOverlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOverlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOverlay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOverlay
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BufferItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOverlay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOverlay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOverlay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOverlay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOverlay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOverlay
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOverlay
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOverlay(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOverlay = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOverlay   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("overlay.proto", fileDescriptorOverlay) }

var fileDescriptorOverlay = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0x3b, 0x49, 0x9b, 0xb2, 0x27, 0x56, 0x65, 0xfc, 0x37, 0x06, 0x49, 0x4a, 0x41, 0x28,
	0x58, 0x66, 0xa4, 0x42, 0xaf, 0x35, 0xe0, 0xc5, 0x62, 0x4b, 0x64, 0xac, 0x0f, 0x30, 0xbb, 0x7b,
	0x92, 0x8e, 0x6c, 0x66, 0x86, 0xdd, 0xd9, 0x48, 0x7c, 0x27, 0xdf, 0xa3, 0x97, 0x7d, 0x82, 0x20,
	0xb9, 0xf4, 0x29, 0x64, 0x67, 0x37, 0x26, 0x17, 0x0a, 0xe2, 0xdd, 0xf9, 0x66, 0xce, 0xef, 0x9c,
	0xef, 0x7c, 0x70, 0x64, 0x17, 0x58, 0xe4, 0x6a, 0xc9, 0x5d, 0x61, 0xbd, 0xa5, 0x51, 0x2b, 0x5d,
	0x32, 0x78, 0x3f, 0xd3, 0xfe, 0xa6, 0x4a, 0x78, 0x6a, 0xe7, 0xc2, 0xa1, 0x29, 0x95, 0xc9, 0xac,
	0x28, 0xbf, 0x8a, 0x05, 0x1a, 0x9d, 0xa2, 0xa8, 0xbc, 0xce, 0x4b, 0xa1, 0x9c, 0x9e, 0xa1, 0x11,
	0xca, 0x18, 0xeb, 0x95, 0xd7, 0xd6, 0x94, 0x42, 0x9b, 0x34, 0xaf, 0x32, 0x2c, 0x9b, 0x89, 0x83,
	0x97, 0x7f, 0x19, 0xa3, 0x9c, 0x16, 0x73, 0xf4, 0xaa, 0x6d, 0x7b, 0x3e, 0xb3, 0x76, 0x96, 0xa3,
	0x08, 0x2a, 0xa9, 0xa6, 0x42, 0x99, 0xd6, 0xd3, 0xc9, 0xba, 0x03, 0x30, 0xae, 0xa6, 0x53, 0x2c,
	0x62, 0x8f, 0x73, 0x7a, 0x01, 0xe4, 0x9a, 0x91, 0x63, 0x72, 0xda, 0x3f, 0x3f, 0xe2, 0xca, 0x69,
	0x7e, 0xbd, 0x74, 0x78, 0x85, 0x5e, 0x8d, 0x1f, 0xdd, 0xae, 0x46, 0x7b, 0x77, 0xab, 0x11, 0xf9,
	0xb9, 0x1a, 0x1d, 0x9e, 0x69, 0x93, 0x6b, 0x83, 0x72, 0x53, 0xd0, 0xb7, 0x40, 0x26, 0xac, 0x13,
	0xb8, 0x07, 0x81, 0x9b, 0x24, 0x5f, 0x30, 0xf5, 0x81, 0x7c, 0xb6, 0x43, 0xf6, 0x6b, 0x57, 0x1b,
	0x7a, 0x57, 0xd0, 0xd7, 0xd0, 0xab, 0x1d, 0xc4, 0x19, 0xeb, 0x86, 0x31, 0x8c, 0xff, 0x4e, 0x8b,
	0x6f, 0x0d, 0xf2, 0x38, 0x93, 0x6d, 0x1f, 0x3d, 0x83, 0x5e, 0xb3, 0x85, 0xed, 0x07, 0xe2, 0x31,
	0x6f, 0xce, 0xe4, 0x9b, 0x33, 0xf9, 0x3b, 0xb3, 0x94, 0x6d, 0xcf, 0xe0, 0x1b, 0x74, 0xe2, 0x8c,
	0x52, 0xd8, 0xff, 0xa0, 0x4d, 0x16, 0x4e, 0x8c, 0x64, 0xa8, 0xe9, 0x43, 0xe8, 0x7e, 0x96, 0x71,
	0x70, 0x1f, 0xc9, 0xba, 0xa4, 0x2f, 0x20, 0x9a, 0x38, 0x2c, 0x42, 0xe6, 0xc1, 0x4e, 0x24, 0xb7,
	0x0f, 0x94, 0xc1, 0xe1, 0x27, 0x2c, 0x16, 0x3a, 0xc5, 0xb0, 0x38, 0x92, 0x1b, 0x49, 0x9f, 0x42,
	0xef, 0x0a, 0xfd, 0x8d, 0xcd, 0xd8, 0x41, 0xf8, 0x68, 0xd5, 0xc9, 0x77, 0x02, 0xf7, 0xb7, 0x37,
	0x5c, 0xea, 0xd2, 0xff, 0x77, 0xd0, 0x17, 0x40, 0x2e, 0xdb, 0xa0, 0x1b, 0xae, 0x9e, 0xf6, 0x0f,
	0xdc, 0x2b, 0x38, 0xa8, 0x77, 0x97, 0xac, 0x7b, 0xdc, 0x3d, 0xed, 0x9f, 0x3f, 0xf9, 0x63, 0xba,
	0xb2, 0xe9, 0x19, 0xdf, 0xbb, 0x5d, 0x0f, 0xc9, 0xdd, 0x7a, 0x48, 0x7e, 0xac, 0x87, 0xe4, 0xe3,
	0x5e, 0xd2, 0x0b, 0x89, 0xbe, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x34, 0xa2, 0x73, 0xd0,
	0x02, 0x00, 0x00,
}
