// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package x509 is a auto generated package.
Input file: protos/x509.proto
*/
package x509

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareCertificateV1Client add middleware to the client
type MiddlewareCertificateV1Client func(ServiceCertificateV1Client) ServiceCertificateV1Client

// EndpointsCertificateV1Client is the endpoints for the client
type EndpointsCertificateV1Client struct {
	Client CertificateV1Client

	AutoAddCertificateEndpoint    endpoint.Endpoint
	AutoDeleteCertificateEndpoint endpoint.Endpoint
	AutoGetCertificateEndpoint    endpoint.Endpoint
	AutoListCertificateEndpoint   endpoint.Endpoint
	AutoUpdateCertificateEndpoint endpoint.Endpoint
}

// EndpointsCertificateV1RestClient is the REST client
type EndpointsCertificateV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddCertificateEndpoint    endpoint.Endpoint
	AutoDeleteCertificateEndpoint endpoint.Endpoint
	AutoGetCertificateEndpoint    endpoint.Endpoint
	AutoListCertificateEndpoint   endpoint.Endpoint
	AutoUpdateCertificateEndpoint endpoint.Endpoint
	AutoWatchCertificateEndpoint  endpoint.Endpoint
}

// MiddlewareCertificateV1Server adds middle ware to the server
type MiddlewareCertificateV1Server func(ServiceCertificateV1Server) ServiceCertificateV1Server

// EndpointsCertificateV1Server is the server endpoints
type EndpointsCertificateV1Server struct {
	AutoAddCertificateEndpoint    endpoint.Endpoint
	AutoDeleteCertificateEndpoint endpoint.Endpoint
	AutoGetCertificateEndpoint    endpoint.Endpoint
	AutoListCertificateEndpoint   endpoint.Endpoint
	AutoUpdateCertificateEndpoint endpoint.Endpoint

	watchHandlerCertificate func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddCertificate is endpoint for AutoAddCertificate
func (e EndpointsCertificateV1Client) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respCertificateV1AutoAddCertificate struct {
	V   Certificate
	Err error
}

// AutoDeleteCertificate is endpoint for AutoDeleteCertificate
func (e EndpointsCertificateV1Client) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respCertificateV1AutoDeleteCertificate struct {
	V   Certificate
	Err error
}

// AutoGetCertificate is endpoint for AutoGetCertificate
func (e EndpointsCertificateV1Client) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respCertificateV1AutoGetCertificate struct {
	V   Certificate
	Err error
}

// AutoListCertificate is endpoint for AutoListCertificate
func (e EndpointsCertificateV1Client) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (*CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return &CertificateList{}, err
	}
	return resp.(*CertificateList), nil
}

type respCertificateV1AutoListCertificate struct {
	V   CertificateList
	Err error
}

// AutoUpdateCertificate is endpoint for AutoUpdateCertificate
func (e EndpointsCertificateV1Client) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respCertificateV1AutoUpdateCertificate struct {
	V   Certificate
	Err error
}

// AutoWatchCertificate performs Watch for Certificate
func (e EndpointsCertificateV1Client) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (CertificateV1_AutoWatchCertificateClient, error) {
	return e.Client.AutoWatchCertificate(ctx, in)
}

// AutoAddCertificate implementation on server Endpoint
func (e EndpointsCertificateV1Server) AutoAddCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeCertificateV1AutoAddCertificateEndpoint creates  AutoAddCertificate endpoints for the service
func MakeCertificateV1AutoAddCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoAddCertificate(ctx, *req)
		return respCertificateV1AutoAddCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("CertificateV1:AutoAddCertificate")(f)
}

// AutoDeleteCertificate implementation on server Endpoint
func (e EndpointsCertificateV1Server) AutoDeleteCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeCertificateV1AutoDeleteCertificateEndpoint creates  AutoDeleteCertificate endpoints for the service
func MakeCertificateV1AutoDeleteCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoDeleteCertificate(ctx, *req)
		return respCertificateV1AutoDeleteCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("CertificateV1:AutoDeleteCertificate")(f)
}

// AutoGetCertificate implementation on server Endpoint
func (e EndpointsCertificateV1Server) AutoGetCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeCertificateV1AutoGetCertificateEndpoint creates  AutoGetCertificate endpoints for the service
func MakeCertificateV1AutoGetCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoGetCertificate(ctx, *req)
		return respCertificateV1AutoGetCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("CertificateV1:AutoGetCertificate")(f)
}

// AutoListCertificate implementation on server Endpoint
func (e EndpointsCertificateV1Server) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return CertificateList{}, err
	}
	return *resp.(*CertificateList), nil
}

// MakeCertificateV1AutoListCertificateEndpoint creates  AutoListCertificate endpoints for the service
func MakeCertificateV1AutoListCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCertificate(ctx, *req)
		return respCertificateV1AutoListCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("CertificateV1:AutoListCertificate")(f)
}

// AutoUpdateCertificate implementation on server Endpoint
func (e EndpointsCertificateV1Server) AutoUpdateCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeCertificateV1AutoUpdateCertificateEndpoint creates  AutoUpdateCertificate endpoints for the service
func MakeCertificateV1AutoUpdateCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoUpdateCertificate(ctx, *req)
		return respCertificateV1AutoUpdateCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("CertificateV1:AutoUpdateCertificate")(f)
}

// AutoWatchCertificate is the watch handler for Certificate on the server side.
func (e EndpointsCertificateV1Server) AutoWatchCertificate(in *api.ListWatchOptions, stream CertificateV1_AutoWatchCertificateServer) error {
	return e.watchHandlerCertificate(in, stream)
}

// MakeAutoWatchCertificateEndpoint creates the Watch endpoint
func MakeAutoWatchCertificateEndpoint(s ServiceCertificateV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(CertificateV1_AutoWatchCertificateServer)
		return s.AutoWatchCertificate(options, wstream)
	}
}

// MakeCertificateV1ServerEndpoints creates server endpoints
func MakeCertificateV1ServerEndpoints(s ServiceCertificateV1Server, logger log.Logger) EndpointsCertificateV1Server {
	return EndpointsCertificateV1Server{

		AutoAddCertificateEndpoint:    MakeCertificateV1AutoAddCertificateEndpoint(s, logger),
		AutoDeleteCertificateEndpoint: MakeCertificateV1AutoDeleteCertificateEndpoint(s, logger),
		AutoGetCertificateEndpoint:    MakeCertificateV1AutoGetCertificateEndpoint(s, logger),
		AutoListCertificateEndpoint:   MakeCertificateV1AutoListCertificateEndpoint(s, logger),
		AutoUpdateCertificateEndpoint: MakeCertificateV1AutoUpdateCertificateEndpoint(s, logger),

		watchHandlerCertificate: MakeAutoWatchCertificateEndpoint(s, logger),
	}
}

// LoggingCertificateV1MiddlewareClient adds middleware for the client
func LoggingCertificateV1MiddlewareClient(logger log.Logger) MiddlewareCertificateV1Client {
	return func(next ServiceCertificateV1Client) ServiceCertificateV1Client {
		return loggingCertificateV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCertificateV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceCertificateV1Client
}

// LoggingCertificateV1MiddlewareServer adds middleware for the client
func LoggingCertificateV1MiddlewareServer(logger log.Logger) MiddlewareCertificateV1Server {
	return func(next ServiceCertificateV1Server) ServiceCertificateV1Server {
		return loggingCertificateV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCertificateV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceCertificateV1Server
}

func (m loggingCertificateV1MiddlewareClient) AutoAddCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareClient) AutoGetCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareClient) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (resp *CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}

func (m loggingCertificateV1MiddlewareClient) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (resp CertificateV1_AutoWatchCertificateClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCertificate(ctx, in)
	return
}

func (m loggingCertificateV1MiddlewareServer) AutoAddCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareServer) AutoDeleteCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareServer) AutoGetCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareServer) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (resp CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingCertificateV1MiddlewareServer) AutoUpdateCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CertificateV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}

func (m loggingCertificateV1MiddlewareServer) AutoWatchCertificate(in *api.ListWatchOptions, stream CertificateV1_AutoWatchCertificateServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "CertificateV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCertificate(in, stream)
	return
}
func (r *EndpointsCertificateV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURICertificateV1AutoAddCertificateCreateOper(in *Certificate) string {
	return fmt.Sprint("/v1/certificate", "/", in.Tenant, "/certificates")
}

//
func makeURICertificateV1AutoDeleteCertificateDeleteOper(in *Certificate) string {
	return fmt.Sprint("/v1/certificate", "/", in.Tenant, "/certificates/", in.Name)
}

//
func makeURICertificateV1AutoGetCertificateGetOper(in *Certificate) string {
	return fmt.Sprint("/v1/certificate", "/", in.Tenant, "/certificates/", in.Name)
}

//
func makeURICertificateV1AutoListCertificateListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/certificate", "/", in.Tenant, "/certificates")
}

//
func makeURICertificateV1AutoUpdateCertificateUpdateOper(in *Certificate) string {
	return fmt.Sprint("/v1/certificate", "/", in.Tenant, "/certificates/", in.Name)
}

// AutoAddCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURICertificateV1AutoAddCertificateCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCertificateV1AutoAddCertificate(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), nil
}

// AutoUpdateCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURICertificateV1AutoUpdateCertificateUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCertificateV1AutoUpdateCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoGetCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURICertificateV1AutoGetCertificateGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCertificateV1AutoGetCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoDeleteCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURICertificateV1AutoDeleteCertificateDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCertificateV1AutoDeleteCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoListCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoListCertificate(ctx context.Context, options *api.ListWatchOptions) (*CertificateList, error) {
	path := makeURICertificateV1AutoListCertificateListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCertificateV1AutoListCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CertificateList), err
}

// AutoWatchCertificate CRUD method for Certificate
func (r *EndpointsCertificateV1RestClient) AutoWatchCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// MakeCertificateV1RestClientEndpoints make REST client endpoints
func MakeCertificateV1RestClientEndpoints(instance string) (EndpointsCertificateV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsCertificateV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
