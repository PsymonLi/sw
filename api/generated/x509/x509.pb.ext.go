// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package x509 is a auto generated package.
Input file: protos/x509.proto
*/
package x509

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapX509 = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Certificate) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "certificates/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *CertificateList) MakeKey(prefix string) string {
	obj := Certificate{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgCertificateWatchHelper) MakeKey(prefix string) string {
	obj := Certificate{}
	return obj.MakeKey(prefix)
}

func (m *AutoMsgCertificateWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgCertificateWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Certificate) Clone(into interface{}) error {
	out, ok := into.(*Certificate)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *CertificateList) Clone(into interface{}) error {
	out, ok := into.(*CertificateList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *CertificateSpec) Clone(into interface{}) error {
	out, ok := into.(*CertificateSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *CertificateStatus) Clone(into interface{}) error {
	out, ok := into.(*CertificateStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *AutoMsgCertificateWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *Certificate) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *CertificateList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *CertificateSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapX509["CertificateSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapX509["CertificateSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *CertificateStatus) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapX509["CertificateStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapX509["CertificateStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	funcMapX509 = make(map[string]map[string][]func(interface{}) bool)

	funcMapX509["CertificateSpec"] = make(map[string][]func(interface{}) bool)
	funcMapX509["CertificateSpec"]["all"] = append(funcMapX509["CertificateSpec"]["all"], func(i interface{}) bool {
		m := i.(*CertificateSpec)

		for _, v := range m.Usages {
			if _, ok := CertificateSpec_UsageValues_value[v]; !ok {
				return false
			}
		}
		return true
	})

	funcMapX509["CertificateStatus"] = make(map[string][]func(interface{}) bool)
	funcMapX509["CertificateStatus"]["all"] = append(funcMapX509["CertificateStatus"]["all"], func(i interface{}) bool {
		m := i.(*CertificateStatus)

		if _, ok := CertificateStatus_ValidityValues_value[m.Validity]; !ok {
			return false
		}
		return true
	})

}
