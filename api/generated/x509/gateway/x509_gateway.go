// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package x509GwService is a auto generated package.
Input file: protos/x509.proto
*/
package x509GwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	x509 "github.com/pensando/sw/api/generated/x509"
	"github.com/pensando/sw/api/generated/x509/grpc/client"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sCertificateV1GwService struct {
	logger log.Logger
}

type adapterCertificateV1 struct {
	conn    *rpckit.RPCClient
	service x509.ServiceCertificateV1Client
}

func (a adapterCertificateV1) AutoAddCertificate(oldctx oldcontext.Context, t *x509.Certificate, options ...grpc.CallOption) (*x509.Certificate, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddCertificate(ctx, t)
}

func (a adapterCertificateV1) AutoDeleteCertificate(oldctx oldcontext.Context, t *x509.Certificate, options ...grpc.CallOption) (*x509.Certificate, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteCertificate(ctx, t)
}

func (a adapterCertificateV1) AutoGetCertificate(oldctx oldcontext.Context, t *x509.Certificate, options ...grpc.CallOption) (*x509.Certificate, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetCertificate(ctx, t)
}

func (a adapterCertificateV1) AutoListCertificate(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*x509.CertificateList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListCertificate(ctx, t)
}

func (a adapterCertificateV1) AutoUpdateCertificate(oldctx oldcontext.Context, t *x509.Certificate, options ...grpc.CallOption) (*x509.Certificate, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateCertificate(ctx, t)
}

func (a adapterCertificateV1) AutoWatchCertificate(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (x509.CertificateV1_AutoWatchCertificateClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchCertificate(ctx, in)
}

func (e *sCertificateV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()

	fileCount++

	if fileCount == 1 {
		err := registerSwaggerDef(m, logger)
		if err != nil {
			logger.ErrorLog("msg", "failed to register swagger spec", "service", "x509.CertificateV1", "error", err)
		}
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = x509.RegisterCertificateV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service x509.CertificateV1")
					m.Handle("/v1/certificate/", http.StripPrefix("/v1/certificate", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "x509.CertificateV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sCertificateV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterCertificateV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient("CertificateV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterCertificateV1{conn: client, service: grpcclient.NewCertificateV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()

	svcCertificateV1 := sCertificateV1GwService{}
	apigw.Register("x509.CertificateV1", "certificate/", &svcCertificateV1)
}
