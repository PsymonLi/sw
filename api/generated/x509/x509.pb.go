// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x509.proto

/*
	Package x509 is a generated protocol buffer package.

	Service name

	It is generated from these files:
		x509.proto

	It has these top-level messages:
		AutoMsgCertificateWatchHelper
		Certificate
		CertificateList
		CertificateSpec
		CertificateStatus
*/
package x509

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CertificateSpec_UsageValues int32

const (
	CertificateSpec_Server    CertificateSpec_UsageValues = 0
	CertificateSpec_Client    CertificateSpec_UsageValues = 1
	CertificateSpec_TrustRoot CertificateSpec_UsageValues = 2
)

var CertificateSpec_UsageValues_name = map[int32]string{
	0: "Server",
	1: "Client",
	2: "TrustRoot",
}
var CertificateSpec_UsageValues_value = map[string]int32{
	"Server":    0,
	"Client":    1,
	"TrustRoot": 2,
}

func (x CertificateSpec_UsageValues) String() string {
	return proto.EnumName(CertificateSpec_UsageValues_name, int32(x))
}
func (CertificateSpec_UsageValues) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorX509, []int{3, 0}
}

type CertificateStatus_ValidityValues int32

const (
	CertificateStatus_Unknown CertificateStatus_ValidityValues = 0
	CertificateStatus_Valid   CertificateStatus_ValidityValues = 1
	CertificateStatus_Invalid CertificateStatus_ValidityValues = 2
	CertificateStatus_Expired CertificateStatus_ValidityValues = 3
)

var CertificateStatus_ValidityValues_name = map[int32]string{
	0: "Unknown",
	1: "Valid",
	2: "Invalid",
	3: "Expired",
}
var CertificateStatus_ValidityValues_value = map[string]int32{
	"Unknown": 0,
	"Valid":   1,
	"Invalid": 2,
	"Expired": 3,
}

func (x CertificateStatus_ValidityValues) String() string {
	return proto.EnumName(CertificateStatus_ValidityValues_name, int32(x))
}
func (CertificateStatus_ValidityValues) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorX509, []int{4, 0}
}

type AutoMsgCertificateWatchHelper struct {
	// Description of the purpose of this certificate
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Usage can be "client", "server" or "trust-root" in any combination.
	// A "server" certificate is used by a server to authenticate itself to the client
	// A "client" certificate is used by a client to authenticate itself to a server
	// A "trust-root" certificate is self-signed and is only used to validate
	// certificates presented by peers.
	// "client" and "server" certificates are always accompanied by a private key,
	// whereas "trust-root"-only certificates are not.
	Object *Certificate `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgCertificateWatchHelper) Reset()         { *m = AutoMsgCertificateWatchHelper{} }
func (m *AutoMsgCertificateWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCertificateWatchHelper) ProtoMessage()    {}
func (*AutoMsgCertificateWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorX509, []int{0}
}

func (m *AutoMsgCertificateWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCertificateWatchHelper) GetObject() *Certificate {
	if m != nil {
		return m.Object
	}
	return nil
}

type Certificate struct {
	// Status of the certificate: "valid", "invalid", "expired"
	// "invalid" means that the signature of the certificate does not match or
	// there are inconsistencies in the trust chain.
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// The workloads where this certificate has been deployed
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           CertificateSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         CertificateStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{1} }

func (m *Certificate) GetSpec() CertificateSpec {
	if m != nil {
		return m.Spec
	}
	return CertificateSpec{}
}

func (m *Certificate) GetStatus() CertificateStatus {
	if m != nil {
		return m.Status
	}
	return CertificateStatus{}
}

// Certificate represents a certificate with associated chain of trust
type CertificateList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the certificate.
	Items []*Certificate `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *CertificateList) Reset()                    { *m = CertificateList{} }
func (m *CertificateList) String() string            { return proto.CompactTextString(m) }
func (*CertificateList) ProtoMessage()               {}
func (*CertificateList) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{2} }

func (m *CertificateList) GetItems() []*Certificate {
	if m != nil {
		return m.Items
	}
	return nil
}

type CertificateSpec struct {
	Description string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"description,omitempty"`
	Usages      []string `protobuf:"bytes,2,rep,name=Usages" json:"usages,omitempty"`
	Body        string   `protobuf:"bytes,3,opt,name=Body,proto3" json:"body,omitempty"`
	TrustChain  string   `protobuf:"bytes,4,opt,name=TrustChain,proto3" json:"trust-chain,omitempty"`
}

func (m *CertificateSpec) Reset()                    { *m = CertificateSpec{} }
func (m *CertificateSpec) String() string            { return proto.CompactTextString(m) }
func (*CertificateSpec) ProtoMessage()               {}
func (*CertificateSpec) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{3} }

func (m *CertificateSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CertificateSpec) GetUsages() []string {
	if m != nil {
		return m.Usages
	}
	return nil
}

func (m *CertificateSpec) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CertificateSpec) GetTrustChain() string {
	if m != nil {
		return m.TrustChain
	}
	return ""
}

type CertificateStatus struct {
	Validity  string   `protobuf:"bytes,1,opt,name=Validity,proto3" json:"validity,omitempty"`
	Workloads []string `protobuf:"bytes,2,rep,name=Workloads" json:"workloads,omitempty"`
}

func (m *CertificateStatus) Reset()                    { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string            { return proto.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()               {}
func (*CertificateStatus) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{4} }

func (m *CertificateStatus) GetValidity() string {
	if m != nil {
		return m.Validity
	}
	return ""
}

func (m *CertificateStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgCertificateWatchHelper)(nil), "x509.AutoMsgCertificateWatchHelper")
	proto.RegisterType((*Certificate)(nil), "x509.Certificate")
	proto.RegisterType((*CertificateList)(nil), "x509.CertificateList")
	proto.RegisterType((*CertificateSpec)(nil), "x509.CertificateSpec")
	proto.RegisterType((*CertificateStatus)(nil), "x509.CertificateStatus")
	proto.RegisterEnum("x509.CertificateSpec_UsageValues", CertificateSpec_UsageValues_name, CertificateSpec_UsageValues_value)
	proto.RegisterEnum("x509.CertificateStatus_ValidityValues", CertificateStatus_ValidityValues_name, CertificateStatus_ValidityValues_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CertificateV1 service

type CertificateV1Client interface {
	AutoAddCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	AutoDeleteCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	AutoGetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	AutoListCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CertificateList, error)
	AutoUpdateCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CertificateV1_AutoWatchCertificateClient, error)
}

type certificateV1Client struct {
	cc *grpc.ClientConn
}

func NewCertificateV1Client(cc *grpc.ClientConn) CertificateV1Client {
	return &certificateV1Client{cc}
}

func (c *certificateV1Client) AutoAddCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/x509.CertificateV1/AutoAddCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateV1Client) AutoDeleteCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/x509.CertificateV1/AutoDeleteCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateV1Client) AutoGetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/x509.CertificateV1/AutoGetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateV1Client) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CertificateList, error) {
	out := new(CertificateList)
	err := grpc.Invoke(ctx, "/x509.CertificateV1/AutoListCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateV1Client) AutoUpdateCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/x509.CertificateV1/AutoUpdateCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateV1Client) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CertificateV1_AutoWatchCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CertificateV1_serviceDesc.Streams[0], c.cc, "/x509.CertificateV1/AutoWatchCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &certificateV1AutoWatchCertificateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CertificateV1_AutoWatchCertificateClient interface {
	Recv() (*AutoMsgCertificateWatchHelper, error)
	grpc.ClientStream
}

type certificateV1AutoWatchCertificateClient struct {
	grpc.ClientStream
}

func (x *certificateV1AutoWatchCertificateClient) Recv() (*AutoMsgCertificateWatchHelper, error) {
	m := new(AutoMsgCertificateWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CertificateV1 service

type CertificateV1Server interface {
	AutoAddCertificate(context.Context, *Certificate) (*Certificate, error)
	AutoDeleteCertificate(context.Context, *Certificate) (*Certificate, error)
	AutoGetCertificate(context.Context, *Certificate) (*Certificate, error)
	AutoListCertificate(context.Context, *api.ListWatchOptions) (*CertificateList, error)
	AutoUpdateCertificate(context.Context, *Certificate) (*Certificate, error)
	AutoWatchCertificate(*api.ListWatchOptions, CertificateV1_AutoWatchCertificateServer) error
}

func RegisterCertificateV1Server(s *grpc.Server, srv CertificateV1Server) {
	s.RegisterService(&_CertificateV1_serviceDesc, srv)
}

func _CertificateV1_AutoAddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateV1Server).AutoAddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x509.CertificateV1/AutoAddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateV1Server).AutoAddCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateV1_AutoDeleteCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateV1Server).AutoDeleteCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x509.CertificateV1/AutoDeleteCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateV1Server).AutoDeleteCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateV1_AutoGetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateV1Server).AutoGetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x509.CertificateV1/AutoGetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateV1Server).AutoGetCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateV1_AutoListCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateV1Server).AutoListCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x509.CertificateV1/AutoListCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateV1Server).AutoListCertificate(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateV1_AutoUpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateV1Server).AutoUpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/x509.CertificateV1/AutoUpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateV1Server).AutoUpdateCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateV1_AutoWatchCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertificateV1Server).AutoWatchCertificate(m, &certificateV1AutoWatchCertificateServer{stream})
}

type CertificateV1_AutoWatchCertificateServer interface {
	Send(*AutoMsgCertificateWatchHelper) error
	grpc.ServerStream
}

type certificateV1AutoWatchCertificateServer struct {
	grpc.ServerStream
}

func (x *certificateV1AutoWatchCertificateServer) Send(m *AutoMsgCertificateWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _CertificateV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "x509.CertificateV1",
	HandlerType: (*CertificateV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddCertificate",
			Handler:    _CertificateV1_AutoAddCertificate_Handler,
		},
		{
			MethodName: "AutoDeleteCertificate",
			Handler:    _CertificateV1_AutoDeleteCertificate_Handler,
		},
		{
			MethodName: "AutoGetCertificate",
			Handler:    _CertificateV1_AutoGetCertificate_Handler,
		},
		{
			MethodName: "AutoListCertificate",
			Handler:    _CertificateV1_AutoListCertificate_Handler,
		},
		{
			MethodName: "AutoUpdateCertificate",
			Handler:    _CertificateV1_AutoUpdateCertificate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchCertificate",
			Handler:       _CertificateV1_AutoWatchCertificate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "x509.proto",
}

func (m *AutoMsgCertificateWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCertificateWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintX509(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CertificateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintX509(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CertificateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Usages) > 0 {
		for _, s := range m.Usages {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.TrustChain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.TrustChain)))
		i += copy(dAtA[i:], m.TrustChain)
	}
	return i, nil
}

func (m *CertificateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Validity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Validity)))
		i += copy(dAtA[i:], m.Validity)
	}
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintX509(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgCertificateWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovX509(uint64(l))
	}
	return n
}

func (m *Certificate) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovX509(uint64(l))
	return n
}

func (m *CertificateList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovX509(uint64(l))
		}
	}
	return n
}

func (m *CertificateSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	if len(m.Usages) > 0 {
		for _, s := range m.Usages {
			l = len(s)
			n += 1 + l + sovX509(uint64(l))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	l = len(m.TrustChain)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	return n
}

func (m *CertificateStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Validity)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovX509(uint64(l))
		}
	}
	return n
}

func sovX509(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozX509(x uint64) (n int) {
	return sovX509(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgCertificateWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCertificateWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCertificateWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Certificate{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Certificate{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usages = append(m.Usages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipX509(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowX509
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowX509
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowX509
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthX509
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowX509
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipX509(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthX509 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowX509   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("x509.proto", fileDescriptorX509) }

var fileDescriptorX509 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0xd8, 0xc6, 0xc1, 0xe3, 0x00, 0xce, 0x00, 0x8d, 0x6d, 0xb5, 0x98, 0x6c, 0x7f, 0x99,
	0x28, 0xf1, 0x12, 0x68, 0xa4, 0x42, 0x72, 0x61, 0x09, 0x6a, 0x91, 0x9a, 0xba, 0x02, 0x43, 0x8e,
	0xd5, 0x78, 0x77, 0x62, 0xa6, 0x59, 0xcf, 0xac, 0x76, 0x66, 0x21, 0x6e, 0x94, 0x4b, 0xdd, 0xe6,
	0x0f, 0x48, 0xb9, 0xb4, 0xb7, 0xf6, 0xc8, 0xb1, 0xf7, 0xde, 0x73, 0x8c, 0xda, 0x4b, 0x95, 0x83,
	0x55, 0xa1, 0x9e, 0xb8, 0xe4, 0x5f, 0xa8, 0x66, 0xbc, 0x8e, 0xc7, 0x35, 0x54, 0x90, 0xdb, 0xee,
	0x9b, 0xf7, 0x7d, 0xdf, 0x7b, 0xdf, 0x9b, 0x1f, 0x10, 0x3e, 0xbe, 0xbd, 0xb8, 0x52, 0x0d, 0x42,
	0x2e, 0x39, 0x4a, 0xab, 0xef, 0xd2, 0xbb, 0x4d, 0xce, 0x9b, 0x3e, 0xb1, 0x71, 0x40, 0x6d, 0xcc,
	0x18, 0x97, 0x58, 0x52, 0xce, 0x44, 0x2f, 0xa7, 0xb4, 0xd1, 0xa4, 0x72, 0x2f, 0x6a, 0x54, 0x5d,
	0xde, 0xb2, 0x03, 0xc2, 0x04, 0x66, 0x1e, 0xb7, 0xc5, 0x81, 0xbd, 0x4f, 0x18, 0x75, 0x89, 0x1d,
	0x49, 0xea, 0x0b, 0x05, 0x6d, 0x12, 0x66, 0xa2, 0x6d, 0xca, 0x5c, 0x3f, 0xf2, 0x48, 0x9f, 0xe6,
	0xa6, 0x41, 0xd3, 0xe4, 0x4d, 0x6e, 0xeb, 0x70, 0x23, 0x7a, 0xa8, 0xff, 0xf4, 0x8f, 0xfe, 0x8a,
	0xd3, 0x3f, 0x3c, 0x43, 0x55, 0xd5, 0xd8, 0x22, 0x12, 0xf7, 0xd2, 0x2c, 0x0c, 0xdf, 0x5b, 0x8b,
	0x24, 0xbf, 0x2f, 0x9a, 0xeb, 0x24, 0x94, 0xf4, 0x21, 0x75, 0xb1, 0x24, 0x0f, 0xb0, 0x74, 0xf7,
	0x3e, 0x27, 0x7e, 0x40, 0x42, 0x74, 0x19, 0xa6, 0xeb, 0xed, 0x80, 0x14, 0xc0, 0x3c, 0xa8, 0x64,
	0xd1, 0x35, 0x98, 0xa9, 0x35, 0xbe, 0x21, 0xae, 0x2c, 0x24, 0xe7, 0x41, 0x25, 0xb7, 0x74, 0xa5,
	0xaa, 0xcd, 0x30, 0xb0, 0xab, 0x53, 0xaf, 0x0e, 0x67, 0x72, 0x07, 0x8a, 0x61, 0x4f, 0x33, 0x58,
	0x3f, 0x25, 0x61, 0xce, 0x48, 0x40, 0x8b, 0x10, 0xd4, 0x35, 0x5d, 0x6e, 0x69, 0xa2, 0x8a, 0x03,
	0x5a, 0x55, 0xfc, 0xf7, 0x89, 0xc4, 0xce, 0xf4, 0x8b, 0x6e, 0x39, 0xf1, 0xb2, 0x5b, 0x06, 0x27,
	0xdd, 0xf2, 0xa5, 0x1b, 0x94, 0xf9, 0x94, 0x91, 0x2d, 0x50, 0x47, 0x2b, 0x10, 0xd4, 0x62, 0xc1,
	0x29, 0x8d, 0xe8, 0xd5, 0xa0, 0x31, 0x25, 0x03, 0x33, 0xa9, 0x1a, 0xbb, 0xc1, 0x5b, 0x54, 0x92,
	0x56, 0x20, 0xdb, 0x5b, 0xa0, 0x86, 0xd6, 0x60, 0x7a, 0x3b, 0x20, 0x6e, 0x21, 0xa5, 0xd1, 0xb3,
	0x23, 0xe5, 0xaa, 0x45, 0xe7, 0x1d, 0xc5, 0xa1, 0xf0, 0x22, 0x20, 0xae, 0x81, 0xd7, 0x50, 0xb4,
	0x09, 0x33, 0xdb, 0x12, 0xcb, 0x48, 0x14, 0xd2, 0x9a, 0xe4, 0xea, 0x28, 0x89, 0x5e, 0x76, 0x0a,
	0x31, 0x4d, 0x5e, 0xe8, 0x7f, 0x83, 0x28, 0x26, 0x58, 0x9d, 0xfa, 0xe3, 0x87, 0x62, 0xce, 0x1d,
	0x00, 0xad, 0xe7, 0x00, 0x4e, 0x19, 0x44, 0x5f, 0x50, 0x21, 0x91, 0xa5, 0xfc, 0x49, 0x9e, 0xe6,
	0xcf, 0x78, 0xbf, 0x57, 0xb4, 0x00, 0xc7, 0x55, 0xae, 0x8a, 0xc6, 0xad, 0xf5, 0x52, 0xfb, 0x41,
	0x23, 0x75, 0x1e, 0x8e, 0x6d, 0x4a, 0xd2, 0x52, 0xd5, 0xa7, 0x4e, 0x9f, 0xd8, 0xe4, 0xab, 0xc3,
	0x19, 0xe8, 0x53, 0x21, 0xe3, 0x81, 0xfd, 0x9e, 0x1c, 0x2a, 0x4a, 0x9b, 0x70, 0x07, 0xe6, 0xee,
	0x11, 0xe1, 0x86, 0x34, 0x50, 0x9b, 0xb3, 0xb7, 0x1b, 0x9c, 0xe2, 0x49, 0xb7, 0x3c, 0xeb, 0x0d,
	0xc2, 0x46, 0xc7, 0x66, 0x36, 0xaa, 0xc3, 0xcc, 0x8e, 0xc0, 0x4d, 0x22, 0x0a, 0xc9, 0xf9, 0x54,
	0x25, 0xeb, 0xdc, 0x3d, 0x7a, 0x56, 0xfc, 0x60, 0x5b, 0x86, 0x1b, 0x2c, 0x6a, 0x55, 0xfe, 0xa3,
	0x54, 0xd5, 0x99, 0xbb, 0xd8, 0x8f, 0x88, 0x58, 0x50, 0x66, 0x46, 0x1a, 0x69, 0x9a, 0xd9, 0xe3,
	0x42, 0x1f, 0xc1, 0xb4, 0xc3, 0xbd, 0xb6, 0xee, 0x3f, 0xeb, 0x20, 0x35, 0xbf, 0x06, 0xf7, 0xda,
	0xe6, 0xfc, 0xd4, 0x3a, 0x5a, 0x81, 0xb0, 0x1e, 0x46, 0x42, 0xae, 0xef, 0x61, 0xca, 0xf4, 0x0c,
	0xe3, 0xca, 0xa5, 0x8a, 0xde, 0x74, 0x55, 0xd8, 0x00, 0x19, 0xc9, 0xd6, 0x27, 0x30, 0x67, 0x94,
	0x83, 0x20, 0xcc, 0x6c, 0x93, 0x70, 0x9f, 0x84, 0xf9, 0x84, 0xfa, 0x5e, 0xf7, 0x29, 0x61, 0x32,
	0x0f, 0xd0, 0x04, 0xcc, 0x6a, 0xd0, 0x16, 0xe7, 0x32, 0x9f, 0xb4, 0x5e, 0x03, 0x78, 0x65, 0x64,
	0x77, 0xa0, 0xaf, 0xe1, 0xf8, 0x2e, 0xf6, 0xa9, 0x47, 0x65, 0x3b, 0xb6, 0x6f, 0xfd, 0xe8, 0x59,
	0x71, 0xe1, 0x34, 0x1b, 0x34, 0xa0, 0xda, 0xcf, 0x1e, 0x78, 0x81, 0xf6, 0xe3, 0x90, 0x51, 0xee,
	0x1b, 0x52, 0x74, 0x1b, 0x66, 0x1f, 0xf0, 0xf0, 0x91, 0xcf, 0xb1, 0xd7, 0x37, 0xfa, 0xea, 0x49,
	0xb7, 0x3c, 0x7d, 0xd0, 0x0f, 0x1a, 0xa8, 0x41, 0xa6, 0xe5, 0xc0, 0xc9, 0x61, 0x25, 0x94, 0x83,
	0x97, 0x76, 0xd8, 0x23, 0xc6, 0x0f, 0x58, 0x3e, 0x81, 0xb2, 0x70, 0x4c, 0x2f, 0xe7, 0x81, 0x8a,
	0x6f, 0x32, 0x5d, 0x42, 0x3e, 0xa9, 0x7e, 0x36, 0x1e, 0x07, 0x34, 0x24, 0x5e, 0x3e, 0xb5, 0xf4,
	0x3a, 0x03, 0x27, 0x8c, 0x06, 0x76, 0x6f, 0x21, 0x0e, 0x91, 0xba, 0x57, 0xd6, 0x3c, 0xcf, 0x3c,
	0xfa, 0xa3, 0x9b, 0xaf, 0x34, 0x1a, 0xb2, 0x96, 0xff, 0x3a, 0x9c, 0x01, 0xbf, 0x7d, 0x5f, 0xcc,
	0xb8, 0x21, 0xc1, 0x92, 0x7c, 0xf7, 0xe7, 0x3f, 0x3f, 0x26, 0xcb, 0x30, 0xb1, 0x0a, 0xae, 0x5b,
	0x05, 0xfb, 0x49, 0xad, 0x5a, 0x27, 0x0c, 0x33, 0xf9, 0xd4, 0x36, 0x0e, 0x92, 0x40, 0xdf, 0xc2,
	0x59, 0x25, 0x78, 0x8f, 0xf8, 0x44, 0x92, 0x8b, 0x6b, 0xde, 0xe9, 0x6b, 0x7a, 0x9a, 0x40, 0x6b,
	0x7e, 0x0c, 0x13, 0xab, 0x89, 0xeb, 0xd7, 0xce, 0x92, 0x54, 0xf1, 0x2f, 0x71, 0x8b, 0x3c, 0x45,
	0xb2, 0xd7, 0xec, 0x67, 0x44, 0x5e, 0x5c, 0xf8, 0xd3, 0x58, 0x38, 0xd5, 0x24, 0x72, 0xa0, 0x8a,
	0xce, 0xa1, 0x1a, 0xc1, 0x69, 0xa5, 0xaa, 0x8e, 0xbc, 0x29, 0x3b, 0xfb, 0xe6, 0x22, 0xd0, 0xd7,
	0x78, 0x4d, 0x1f, 0x41, 0x51, 0x1a, 0xbd, 0xfa, 0x54, 0x8a, 0xb5, 0x18, 0xcb, 0xa7, 0xd5, 0xf9,
	0xd7, 0xfa, 0x73, 0x5a, 0xff, 0x6c, 0xa3, 0x9f, 0xf4, 0x8c, 0xde, 0x09, 0x3c, 0xfc, 0x36, 0x46,
	0xdf, 0xed, 0x1b, 0x1d, 0x69, 0x02, 0x2d, 0x59, 0xd1, 0xc3, 0x2d, 0x9d, 0xa3, 0x67, 0x17, 0xce,
	0x28, 0x71, 0xdd, 0xd9, 0x39, 0x9a, 0x7e, 0xbf, 0xa7, 0xff, 0xbf, 0x2f, 0x9c, 0x35, 0x11, 0x57,
	0x34, 0xa6, 0x1f, 0xad, 0x45, 0x50, 0xfa, 0x05, 0x3c, 0xef, 0x14, 0x93, 0xfb, 0xb7, 0x7e, 0xee,
	0x0c, 0x5d, 0xd6, 0xbf, 0x76, 0x8a, 0xe6, 0x3b, 0x76, 0xd4, 0x29, 0x3a, 0xc3, 0x0f, 0x9b, 0x1a,
	0x21, 0x4a, 0x05, 0x91, 0x44, 0xf1, 0x2e, 0x3a, 0x47, 0x47, 0x47, 0x9d, 0xe2, 0xf2, 0x30, 0x4b,
	0x3a, 0xe0, 0x42, 0x22, 0x3d, 0x8f, 0xd2, 0x99, 0x53, 0x70, 0x2e, 0xbf, 0x38, 0x9e, 0x03, 0x2f,
	0x8f, 0xe7, 0xc0, 0xdf, 0xc7, 0x73, 0xe0, 0x2b, 0xd0, 0xc8, 0xe8, 0xe7, 0x7c, 0xf9, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x63, 0xfa, 0xe0, 0xe9, 0x9d, 0x08, 0x00, 0x00,
}
