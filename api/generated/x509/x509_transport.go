// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package x509 is a auto generated package.
Input file: protos/x509.proto
*/
package x509

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerCertificateV1 struct {
	Endpoints EndpointsCertificateV1Server

	AutoAddCertificateHdlr    grpctransport.Handler
	AutoDeleteCertificateHdlr grpctransport.Handler
	AutoGetCertificateHdlr    grpctransport.Handler
	AutoListCertificateHdlr   grpctransport.Handler
	AutoUpdateCertificateHdlr grpctransport.Handler
}

// MakeGRPCServerCertificateV1 creates a GRPC server for CertificateV1 service
func MakeGRPCServerCertificateV1(ctx context.Context, endpoints EndpointsCertificateV1Server, logger log.Logger) CertificateV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerCertificateV1{
		Endpoints: endpoints,
		AutoAddCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoAddCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCertificate", logger)))...,
		),

		AutoDeleteCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCertificate", logger)))...,
		),

		AutoGetCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoGetCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCertificate", logger)))...,
		),

		AutoListCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoListCertificateEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCertificateList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCertificate", logger)))...,
		),

		AutoUpdateCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCertificate", logger)))...,
		),
	}
}

func (s *grpcServerCertificateV1) AutoAddCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoAddCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCertificateV1AutoAddCertificate).V
	return &r, resp.(respCertificateV1AutoAddCertificate).Err
}

func decodeHTTPrespCertificateV1AutoAddCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCertificateV1) AutoDeleteCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoDeleteCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCertificateV1AutoDeleteCertificate).V
	return &r, resp.(respCertificateV1AutoDeleteCertificate).Err
}

func decodeHTTPrespCertificateV1AutoDeleteCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCertificateV1) AutoGetCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoGetCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCertificateV1AutoGetCertificate).V
	return &r, resp.(respCertificateV1AutoGetCertificate).Err
}

func decodeHTTPrespCertificateV1AutoGetCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCertificateV1) AutoListCertificate(ctx oldcontext.Context, req *api.ListWatchOptions) (*CertificateList, error) {
	_, resp, err := s.AutoListCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCertificateV1AutoListCertificate).V
	return &r, resp.(respCertificateV1AutoListCertificate).Err
}

func decodeHTTPrespCertificateV1AutoListCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CertificateList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCertificateV1) AutoUpdateCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoUpdateCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCertificateV1AutoUpdateCertificate).V
	return &r, resp.(respCertificateV1AutoUpdateCertificate).Err
}

func decodeHTTPrespCertificateV1AutoUpdateCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCertificateV1) AutoWatchCertificate(in *api.ListWatchOptions, stream CertificateV1_AutoWatchCertificateServer) error {
	return s.Endpoints.AutoWatchCertificate(in, stream)
}

func encodeHTTPCertificate(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificate(_ context.Context, r *http.Request) (interface{}, error) {
	var req Certificate
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificate encodes GRPC request
func EncodeGrpcReqCertificate(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Certificate)
	return req, nil
}

// DecodeGrpcReqCertificate decodes GRPC request
func DecodeGrpcReqCertificate(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Certificate)
	return req, nil
}

// EncodeGrpcRespCertificate encodes GRC response
func EncodeGrpcRespCertificate(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificate decodes GRPC response
func DecodeGrpcRespCertificate(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateList encodes GRPC request
func EncodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// DecodeGrpcReqCertificateList decodes GRPC request
func DecodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// EncodeGrpcRespCertificateList endodes the GRPC response
func EncodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateList decodes the GRPC response
func DecodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateSpec encodes GRPC request
func EncodeGrpcReqCertificateSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateSpec)
	return req, nil
}

// DecodeGrpcReqCertificateSpec decodes GRPC request
func DecodeGrpcReqCertificateSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateSpec)
	return req, nil
}

// EncodeGrpcRespCertificateSpec encodes GRC response
func EncodeGrpcRespCertificateSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateSpec decodes GRPC response
func DecodeGrpcRespCertificateSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateStatus encodes GRPC request
func EncodeGrpcReqCertificateStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateStatus)
	return req, nil
}

// DecodeGrpcReqCertificateStatus decodes GRPC request
func DecodeGrpcReqCertificateStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateStatus)
	return req, nil
}

// EncodeGrpcRespCertificateStatus encodes GRC response
func EncodeGrpcRespCertificateStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateStatus decodes GRPC response
func DecodeGrpcRespCertificateStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
