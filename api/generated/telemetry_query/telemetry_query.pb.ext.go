// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry_query is a auto generated package.
Input file: telemetry_query.proto
*/
package telemetry_query

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapTelemetry_query = make(map[string]map[string][]func(string, interface{}) error)

// Clone clones the object into into or creates one of into is nil
func (m *MetricsQueryList) Clone(into interface{}) (interface{}, error) {
	var out *MetricsQueryList
	var ok bool
	if into == nil {
		out = &MetricsQueryList{}
	} else {
		out, ok = into.(*MetricsQueryList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MetricsQueryList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Queries {
		if m.Queries[k] != nil {
			i := m.Queries[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MetricsQueryResponse) Clone(into interface{}) (interface{}, error) {
	var out *MetricsQueryResponse
	var ok bool
	if into == nil {
		out = &MetricsQueryResponse{}
	} else {
		out, ok = into.(*MetricsQueryResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MetricsQueryResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *MetricsQueryResult) Clone(into interface{}) (interface{}, error) {
	var out *MetricsQueryResult
	var ok bool
	if into == nil {
		out = &MetricsQueryResult{}
	} else {
		out, ok = into.(*MetricsQueryResult)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MetricsQueryResult) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *MetricsQuerySpec) Clone(into interface{}) (interface{}, error) {
	var out *MetricsQuerySpec
	var ok bool
	if into == nil {
		out = &MetricsQuerySpec{}
	} else {
		out, ok = into.(*MetricsQuerySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MetricsQuerySpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Function = "NONE"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PaginationSpec) Clone(into interface{}) (interface{}, error) {
	var out *PaginationSpec
	var ok bool
	if into == nil {
		out = &PaginationSpec{}
	} else {
		out, ok = into.(*PaginationSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PaginationSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ResultSeries) Clone(into interface{}) (interface{}, error) {
	var out *ResultSeries
	var ok bool
	if into == nil {
		out = &ResultSeries{}
	} else {
		out, ok = into.(*ResultSeries)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ResultSeries) Defaults(ver string) bool {
	return false
}

// Validators

func (m *MetricsQueryList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Queries {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sQueries[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *MetricsQueryResponse) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *MetricsQueryResult) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *MetricsQuerySpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Selector != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Selector"
		if errs := m.Selector.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapTelemetry_query["MetricsQuerySpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapTelemetry_query["MetricsQuerySpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *PaginationSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ResultSeries) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

	validatorMapTelemetry_query = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapTelemetry_query["MetricsQuerySpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapTelemetry_query["MetricsQuerySpec"]["all"] = append(validatorMapTelemetry_query["MetricsQuerySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MetricsQuerySpec)
		args := make([]string, 0)
		args = append(args, "name")

		for _, v := range m.Fields {
			if !validators.EmptyOrRegExp(v, args) {
				return fmt.Errorf("%v failed validation", path+"."+"Fields")
			}
		}
		return nil
	})

	validatorMapTelemetry_query["MetricsQuerySpec"]["all"] = append(validatorMapTelemetry_query["MetricsQuerySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MetricsQuerySpec)

		if _, ok := TsdbFunctionType_value[m.Function]; !ok {
			return errors.New("MetricsQuerySpec.Function did not match allowed strings")
		}
		return nil
	})

	validatorMapTelemetry_query["MetricsQuerySpec"]["all"] = append(validatorMapTelemetry_query["MetricsQuerySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MetricsQuerySpec)
		args := make([]string, 0)
		args = append(args, "name")

		if !validators.EmptyOrRegExp(m.GroupbyField, args) {
			return fmt.Errorf("%v failed validation", path+"."+"GroupbyField")
		}
		return nil
	})

	validatorMapTelemetry_query["MetricsQuerySpec"]["all"] = append(validatorMapTelemetry_query["MetricsQuerySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MetricsQuerySpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "0")

		if !validators.EmptyOrDuration(m.GroupbyTime, args) {
			return fmt.Errorf("%v failed validation", path+"."+"GroupbyTime")
		}
		return nil
	})

	validatorMapTelemetry_query["MetricsQuerySpec"]["all"] = append(validatorMapTelemetry_query["MetricsQuerySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MetricsQuerySpec)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "100")

		if !validators.StrLen(m.Name, args) {
			return fmt.Errorf("%v failed validation", path+"."+"Name")
		}
		return nil
	})

}
