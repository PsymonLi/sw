// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry_query is a auto generated package.
Input file: telemetry_query.proto
*/
package telemetry_query

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPFwlog(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlog(_ context.Context, r *http.Request) (interface{}, error) {
	var req Fwlog
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlog encodes GRPC request
func EncodeGrpcReqFwlog(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Fwlog)
	return req, nil
}

// DecodeGrpcReqFwlog decodes GRPC request
func DecodeGrpcReqFwlog(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Fwlog)
	return req, nil
}

// EncodeGrpcRespFwlog encodes GRC response
func EncodeGrpcRespFwlog(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlog decodes GRPC response
func DecodeGrpcRespFwlog(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogsQueryList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogsQueryList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogsQueryList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogsQueryList encodes GRPC request
func EncodeGrpcReqFwlogsQueryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryList)
	return req, nil
}

// DecodeGrpcReqFwlogsQueryList decodes GRPC request
func DecodeGrpcReqFwlogsQueryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryList)
	return req, nil
}

// EncodeGrpcRespFwlogsQueryList encodes GRC response
func EncodeGrpcRespFwlogsQueryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogsQueryList decodes GRPC response
func DecodeGrpcRespFwlogsQueryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogsQueryResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogsQueryResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogsQueryResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogsQueryResponse encodes GRPC request
func EncodeGrpcReqFwlogsQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryResponse)
	return req, nil
}

// DecodeGrpcReqFwlogsQueryResponse decodes GRPC request
func DecodeGrpcReqFwlogsQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryResponse)
	return req, nil
}

// EncodeGrpcRespFwlogsQueryResponse encodes GRC response
func EncodeGrpcRespFwlogsQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogsQueryResponse decodes GRPC response
func DecodeGrpcRespFwlogsQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogsQueryResult(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogsQueryResult(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogsQueryResult
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogsQueryResult encodes GRPC request
func EncodeGrpcReqFwlogsQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryResult)
	return req, nil
}

// DecodeGrpcReqFwlogsQueryResult decodes GRPC request
func DecodeGrpcReqFwlogsQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQueryResult)
	return req, nil
}

// EncodeGrpcRespFwlogsQueryResult encodes GRC response
func EncodeGrpcRespFwlogsQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogsQueryResult decodes GRPC response
func DecodeGrpcRespFwlogsQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogsQuerySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogsQuerySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogsQuerySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogsQuerySpec encodes GRPC request
func EncodeGrpcReqFwlogsQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQuerySpec)
	return req, nil
}

// DecodeGrpcReqFwlogsQuerySpec decodes GRPC request
func DecodeGrpcReqFwlogsQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogsQuerySpec)
	return req, nil
}

// EncodeGrpcRespFwlogsQuerySpec encodes GRC response
func EncodeGrpcRespFwlogsQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogsQuerySpec decodes GRPC response
func DecodeGrpcRespFwlogsQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMetricsQueryList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMetricsQueryList(_ context.Context, r *http.Request) (interface{}, error) {
	var req MetricsQueryList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMetricsQueryList encodes GRPC request
func EncodeGrpcReqMetricsQueryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryList)
	return req, nil
}

// DecodeGrpcReqMetricsQueryList decodes GRPC request
func DecodeGrpcReqMetricsQueryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryList)
	return req, nil
}

// EncodeGrpcRespMetricsQueryList encodes GRC response
func EncodeGrpcRespMetricsQueryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMetricsQueryList decodes GRPC response
func DecodeGrpcRespMetricsQueryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMetricsQueryResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMetricsQueryResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req MetricsQueryResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMetricsQueryResponse encodes GRPC request
func EncodeGrpcReqMetricsQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryResponse)
	return req, nil
}

// DecodeGrpcReqMetricsQueryResponse decodes GRPC request
func DecodeGrpcReqMetricsQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryResponse)
	return req, nil
}

// EncodeGrpcRespMetricsQueryResponse encodes GRC response
func EncodeGrpcRespMetricsQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMetricsQueryResponse decodes GRPC response
func DecodeGrpcRespMetricsQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMetricsQueryResult(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMetricsQueryResult(_ context.Context, r *http.Request) (interface{}, error) {
	var req MetricsQueryResult
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMetricsQueryResult encodes GRPC request
func EncodeGrpcReqMetricsQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryResult)
	return req, nil
}

// DecodeGrpcReqMetricsQueryResult decodes GRPC request
func DecodeGrpcReqMetricsQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQueryResult)
	return req, nil
}

// EncodeGrpcRespMetricsQueryResult encodes GRC response
func EncodeGrpcRespMetricsQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMetricsQueryResult decodes GRPC response
func DecodeGrpcRespMetricsQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMetricsQuerySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMetricsQuerySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req MetricsQuerySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMetricsQuerySpec encodes GRPC request
func EncodeGrpcReqMetricsQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQuerySpec)
	return req, nil
}

// DecodeGrpcReqMetricsQuerySpec decodes GRPC request
func DecodeGrpcReqMetricsQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MetricsQuerySpec)
	return req, nil
}

// EncodeGrpcRespMetricsQuerySpec encodes GRC response
func EncodeGrpcRespMetricsQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMetricsQuerySpec decodes GRPC response
func DecodeGrpcRespMetricsQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPaginationSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPaginationSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req PaginationSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPaginationSpec encodes GRPC request
func EncodeGrpcReqPaginationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PaginationSpec)
	return req, nil
}

// DecodeGrpcReqPaginationSpec decodes GRPC request
func DecodeGrpcReqPaginationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PaginationSpec)
	return req, nil
}

// EncodeGrpcRespPaginationSpec encodes GRC response
func EncodeGrpcRespPaginationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPaginationSpec decodes GRPC response
func DecodeGrpcRespPaginationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPResultSeries(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPResultSeries(_ context.Context, r *http.Request) (interface{}, error) {
	var req ResultSeries
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqResultSeries encodes GRPC request
func EncodeGrpcReqResultSeries(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ResultSeries)
	return req, nil
}

// DecodeGrpcReqResultSeries decodes GRPC request
func DecodeGrpcReqResultSeries(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ResultSeries)
	return req, nil
}

// EncodeGrpcRespResultSeries encodes GRC response
func EncodeGrpcRespResultSeries(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespResultSeries decodes GRPC response
func DecodeGrpcRespResultSeries(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
