// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_telemetry_query.proto

/*
	Package telemetry_query is a generated protocol buffer package.

	Service name

	It is generated from these files:
		svc_telemetry_query.proto
		telemetry_query.proto

	It has these top-level messages:
		MetricsQueryList
		MetricsQueryResponse
		MetricsQueryResult
		MetricsQuerySpec
		PaginationSpec
		ResultSeries
*/
package telemetry_query

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TelemetryV1 service

type TelemetryV1Client interface {
	AutoWatchSvcTelemetryV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (TelemetryV1_AutoWatchSvcTelemetryV1Client, error)
	//  telemetry metrics query
	Metrics(ctx context.Context, in *MetricsQueryList, opts ...grpc.CallOption) (*MetricsQueryResponse, error)
}

type telemetryV1Client struct {
	cc *grpc.ClientConn
}

func NewTelemetryV1Client(cc *grpc.ClientConn) TelemetryV1Client {
	return &telemetryV1Client{cc}
}

func (c *telemetryV1Client) AutoWatchSvcTelemetryV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (TelemetryV1_AutoWatchSvcTelemetryV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_TelemetryV1_serviceDesc.Streams[0], c.cc, "/telemetry_query.TelemetryV1/AutoWatchSvcTelemetryV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryV1AutoWatchSvcTelemetryV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryV1_AutoWatchSvcTelemetryV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type telemetryV1AutoWatchSvcTelemetryV1Client struct {
	grpc.ClientStream
}

func (x *telemetryV1AutoWatchSvcTelemetryV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telemetryV1Client) Metrics(ctx context.Context, in *MetricsQueryList, opts ...grpc.CallOption) (*MetricsQueryResponse, error) {
	out := new(MetricsQueryResponse)
	err := grpc.Invoke(ctx, "/telemetry_query.TelemetryV1/Metrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TelemetryV1 service

type TelemetryV1Server interface {
	AutoWatchSvcTelemetryV1(*api.AggWatchOptions, TelemetryV1_AutoWatchSvcTelemetryV1Server) error
	//  telemetry metrics query
	Metrics(context.Context, *MetricsQueryList) (*MetricsQueryResponse, error)
}

func RegisterTelemetryV1Server(s *grpc.Server, srv TelemetryV1Server) {
	s.RegisterService(&_TelemetryV1_serviceDesc, srv)
}

func _TelemetryV1_AutoWatchSvcTelemetryV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.AggWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryV1Server).AutoWatchSvcTelemetryV1(m, &telemetryV1AutoWatchSvcTelemetryV1Server{stream})
}

type TelemetryV1_AutoWatchSvcTelemetryV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type telemetryV1AutoWatchSvcTelemetryV1Server struct {
	grpc.ServerStream
}

func (x *telemetryV1AutoWatchSvcTelemetryV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _TelemetryV1_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsQueryList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryV1Server).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry_query.TelemetryV1/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryV1Server).Metrics(ctx, req.(*MetricsQueryList))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelemetryV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry_query.TelemetryV1",
	HandlerType: (*TelemetryV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metrics",
			Handler:    _TelemetryV1_Metrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcTelemetryV1",
			Handler:       _TelemetryV1_AutoWatchSvcTelemetryV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_telemetry_query.proto",
}

func init() { proto.RegisterFile("svc_telemetry_query.proto", fileDescriptorSvcTelemetryQuery) }

var fileDescriptorSvcTelemetryQuery = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xbd, 0x6a, 0x1b, 0x31,
	0x1c, 0x3f, 0x19, 0xfa, 0x75, 0x1d, 0x8a, 0xaf, 0x2d, 0x45, 0x47, 0xb9, 0x52, 0x83, 0x97, 0x82,
	0x4f, 0x75, 0x0b, 0x1d, 0xba, 0xb9, 0xe0, 0xad, 0xa5, 0x6d, 0x12, 0x12, 0x92, 0xc5, 0xc8, 0xf2,
	0x3f, 0xb2, 0xe0, 0x2c, 0x5d, 0x4e, 0xba, 0x33, 0x5e, 0xcf, 0x7e, 0x82, 0x64, 0xf3, 0x94, 0x39,
	0x63, 0xa6, 0x8c, 0x19, 0x33, 0x06, 0xf2, 0x02, 0xe1, 0xc8, 0x10, 0xf2, 0x14, 0xe1, 0xe4, 0x0f,
	0x8c, 0x49, 0xb2, 0xe9, 0xf7, 0xa9, 0x9f, 0xe4, 0x62, 0x9d, 0xb1, 0x8e, 0x81, 0x08, 0x06, 0x60,
	0x92, 0x51, 0xe7, 0x20, 0x85, 0x64, 0x14, 0xc6, 0x89, 0x32, 0xca, 0x7b, 0xb3, 0x46, 0xfb, 0x1f,
	0xb9, 0x52, 0x3c, 0x02, 0x42, 0x63, 0x41, 0xa8, 0x94, 0xca, 0x50, 0x23, 0x94, 0xd4, 0x33, 0xbb,
	0xdf, 0xe6, 0xc2, 0xf4, 0xd3, 0x6e, 0xc8, 0xd4, 0x80, 0xc4, 0x20, 0x35, 0x95, 0x3d, 0x45, 0xf4,
	0x90, 0x64, 0x20, 0x05, 0x03, 0x92, 0x1a, 0x11, 0xe9, 0x32, 0xca, 0x41, 0xae, 0xa6, 0x89, 0x90,
	0x2c, 0x4a, 0x7b, 0xb0, 0xa8, 0x69, 0xac, 0xd4, 0x70, 0xc5, 0x15, 0xb1, 0x74, 0x37, 0xdd, 0xb7,
	0xc8, 0x02, 0x7b, 0x9a, 0xdb, 0xdf, 0x3f, 0xb8, 0xdd, 0xaf, 0x3f, 0x32, 0xa6, 0x9c, 0x3e, 0x00,
	0x43, 0x67, 0xb6, 0x6f, 0x77, 0xc8, 0x7d, 0xbd, 0xb5, 0x28, 0xd8, 0x6e, 0x7a, 0xbb, 0xee, 0x87,
	0x56, 0x6a, 0xd4, 0x0e, 0x35, 0xac, 0xbf, 0x99, 0xb1, 0x55, 0xe9, 0x5d, 0x48, 0x63, 0x11, 0xb6,
	0x38, 0xb7, 0xe2, 0xdf, 0xd8, 0x8e, 0xf7, 0xdf, 0x5a, 0xd6, 0x52, 0xed, 0x0c, 0xa4, 0xf9, 0x2d,
	0xb4, 0xa9, 0x55, 0x4f, 0x27, 0xf8, 0xd9, 0xb0, 0xe4, 0xce, 0x26, 0x18, 0x9d, 0x4f, 0xb0, 0xf3,
	0x15, 0x79, 0xc6, 0x7d, 0xf1, 0x07, 0x4c, 0x22, 0x98, 0xf6, 0x3e, 0x87, 0xeb, 0xa3, 0xe7, 0xca,
	0xff, 0x12, 0x94, 0x15, 0x7e, 0xfd, 0x49, 0xcb, 0x06, 0xe8, 0x58, 0x49, 0x0d, 0xb5, 0x4f, 0xf9,
	0xd5, 0xcd, 0x51, 0x05, 0xd7, 0x5e, 0x96, 0x8f, 0x2a, 0xe5, 0x9f, 0xe8, 0xcb, 0x9e, 0xeb, 0x2d,
	0xa1, 0xef, 0x1e, 0x8e, 0x71, 0x25, 0x6b, 0x4e, 0xc7, 0xd8, 0xf9, 0xf5, 0x63, 0x9a, 0xe3, 0x6a,
	0x0c, 0xb2, 0xc1, 0x84, 0xa1, 0x3d, 0x88, 0x1a, 0xb6, 0xf8, 0x38, 0xc7, 0xce, 0x49, 0x8e, 0x5f,
	0x2d, 0xef, 0xbb, 0x28, 0x02, 0x74, 0x59, 0x04, 0xe8, 0xba, 0x08, 0xd0, 0x6d, 0x11, 0x38, 0xff,
	0x50, 0xf7, 0xb9, 0xfd, 0xad, 0xef, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0xa7, 0x44, 0xe5,
	0x2d, 0x02, 0x00, 0x00,
}
