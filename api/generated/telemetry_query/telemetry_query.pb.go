// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry_query.proto

package telemetry_query

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/fields"
import labels "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TSDBFunctionType specifies an operation to perform on metrics
type TsdbFunctionType int32

const (
	//
	TsdbFunctionType_NONE TsdbFunctionType = 0
	//
	TsdbFunctionType_MEAN TsdbFunctionType = 1
	//
	TsdbFunctionType_MAX TsdbFunctionType = 2
)

var TsdbFunctionType_name = map[int32]string{
	0: "NONE",
	1: "MEAN",
	2: "MAX",
}
var TsdbFunctionType_value = map[string]int32{
	"NONE": 0,
	"MEAN": 1,
	"MAX":  2,
}

func (x TsdbFunctionType) String() string {
	return proto.EnumName(TsdbFunctionType_name, int32(x))
}
func (TsdbFunctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetryQuery, []int{0}
}

// MetricsQueryList contains a list of queries to execute
type MetricsQueryList struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// List of queries to execute
	Queries []*MetricsQuerySpec `protobuf:"bytes,3,rep,name=Queries,json=queries,omitempty" json:"queries,omitempty"`
}

func (m *MetricsQueryList) Reset()                    { *m = MetricsQueryList{} }
func (m *MetricsQueryList) String() string            { return proto.CompactTextString(m) }
func (*MetricsQueryList) ProtoMessage()               {}
func (*MetricsQueryList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{0} }

func (m *MetricsQueryList) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MetricsQueryList) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MetricsQueryList) GetQueries() []*MetricsQuerySpec {
	if m != nil {
		return m.Queries
	}
	return nil
}

// MetricsQueryResponse is the response send out
type MetricsQueryResponse struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	//
	Results []*MetricsQueryResult `protobuf:"bytes,3,rep,name=Results,json=results,omitempty" json:"results,omitempty"`
}

func (m *MetricsQueryResponse) Reset()         { *m = MetricsQueryResponse{} }
func (m *MetricsQueryResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsQueryResponse) ProtoMessage()    {}
func (*MetricsQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetryQuery, []int{1}
}

func (m *MetricsQueryResponse) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MetricsQueryResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MetricsQueryResponse) GetResults() []*MetricsQueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// MetricsQueryResult contains tsdb series from citadel query
type MetricsQueryResult struct {
	//
	StatementID int32 `protobuf:"varint,1,opt,name=StatementID,json=statement_id,proto3" json:"statement_id"`
	//
	Series []*ResultSeries `protobuf:"bytes,2,rep,name=Series,json=series,omitempty" json:"series,omitempty"`
}

func (m *MetricsQueryResult) Reset()                    { *m = MetricsQueryResult{} }
func (m *MetricsQueryResult) String() string            { return proto.CompactTextString(m) }
func (*MetricsQueryResult) ProtoMessage()               {}
func (*MetricsQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{2} }

func (m *MetricsQueryResult) GetStatementID() int32 {
	if m != nil {
		return m.StatementID
	}
	return 0
}

func (m *MetricsQueryResult) GetSeries() []*ResultSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

// MetricsQuerySpec requires a structured body consisting of:
//     -  Object Selector (selects one more more objects of same Kind)
//     -  Time Range (for the time series)
//     -  A set of Metric Specs
//     -  A pagination spec
type MetricsQuerySpec struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	// Name is the name of the API object.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
	//
	Selector *labels.Selector `protobuf:"bytes,3,opt,name=Selector,json=selector,omitempty" json:"selector,omitempty"`
	// Fields select the metric fields to be included in the result
	// Empty will include all fields, must contain at least one non-tag field
	Fields []string `protobuf:"bytes,4,rep,name=Fields,json=fields,omitempty" json:"fields,omitempty"`
	// Functions specify an operation function to be applied, example mean()/max()
	Function string `protobuf:"bytes,5,opt,name=Function,json=function,omitempty,proto3" json:"function,omitempty"`
	// StartTime selects all metrics with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
	StartTime *api.Timestamp `protobuf:"bytes,6,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// EndTime selects all metrics with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
	EndTime *api.Timestamp `protobuf:"bytes,7,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	// GroupbyTime groups series based on the interval specified
	GroupbyTime string `protobuf:"bytes,8,opt,name=GroupbyTime,json=group-by-time,omitempty,proto3" json:"group-by-time,omitempty"`
	// GroupbyField groups series based on the field specified
	GroupbyField string `protobuf:"bytes,9,opt,name=GroupbyField,json=group-by-field,omitempty,proto3" json:"group-by-field,omitempty"`
	// PaginatioSpec specifies the number of series to include
	Pagination *PaginationSpec `protobuf:"bytes,10,opt,name=Pagination,json=pagination,omitempty" json:"pagination,omitempty"`
}

func (m *MetricsQuerySpec) Reset()                    { *m = MetricsQuerySpec{} }
func (m *MetricsQuerySpec) String() string            { return proto.CompactTextString(m) }
func (*MetricsQuerySpec) ProtoMessage()               {}
func (*MetricsQuerySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{3} }

func (m *MetricsQuerySpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsQuerySpec) GetSelector() *labels.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *MetricsQuerySpec) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetricsQuerySpec) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *MetricsQuerySpec) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MetricsQuerySpec) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *MetricsQuerySpec) GetGroupbyTime() string {
	if m != nil {
		return m.GroupbyTime
	}
	return ""
}

func (m *MetricsQuerySpec) GetGroupbyField() string {
	if m != nil {
		return m.GroupbyField
	}
	return ""
}

func (m *MetricsQuerySpec) GetPagination() *PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// PaginationSpec specifies how many metrics instances to include
// in the result.
type PaginationSpec struct {
	// Offset specifies the starting point
	Offset int32 `protobuf:"varint,1,opt,name=Offset,json=offset,omitempty,proto3" json:"offset,omitempty"`
	// Count specifies the number of series to include
	Count int32 `protobuf:"varint,2,opt,name=Count,json=count,omitempty,proto3" json:"count,omitempty"`
}

func (m *PaginationSpec) Reset()                    { *m = PaginationSpec{} }
func (m *PaginationSpec) String() string            { return proto.CompactTextString(m) }
func (*PaginationSpec) ProtoMessage()               {}
func (*PaginationSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{4} }

func (m *PaginationSpec) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PaginationSpec) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//
type ResultSeries struct {
	// Name of the series
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
	// Tags are the TSDB tags in the query response
	Tags map[string]string `protobuf:"bytes,2,rep,name=Tags,json=tags,omitempty" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// columns list all available fields in tsdb
	Columns []string `protobuf:"bytes,3,rep,name=Columns,json=columns,omitempty" json:"columns,omitempty"`
	// values contain field values received frpm tsdb, it is in the form of [][]interface{}
	Values []*api.InterfaceSlice `protobuf:"bytes,4,rep,name=Values,json=values" json:"values"`
}

func (m *ResultSeries) Reset()                    { *m = ResultSeries{} }
func (m *ResultSeries) String() string            { return proto.CompactTextString(m) }
func (*ResultSeries) ProtoMessage()               {}
func (*ResultSeries) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{5} }

func (m *ResultSeries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResultSeries) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ResultSeries) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *ResultSeries) GetValues() []*api.InterfaceSlice {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsQueryList)(nil), "telemetry_query.MetricsQueryList")
	proto.RegisterType((*MetricsQueryResponse)(nil), "telemetry_query.MetricsQueryResponse")
	proto.RegisterType((*MetricsQueryResult)(nil), "telemetry_query.MetricsQueryResult")
	proto.RegisterType((*MetricsQuerySpec)(nil), "telemetry_query.MetricsQuerySpec")
	proto.RegisterType((*PaginationSpec)(nil), "telemetry_query.PaginationSpec")
	proto.RegisterType((*ResultSeries)(nil), "telemetry_query.ResultSeries")
	proto.RegisterEnum("telemetry_query.TsdbFunctionType", TsdbFunctionType_name, TsdbFunctionType_value)
}
func (m *MetricsQueryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatementID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StatementID))
	}
	if len(m.Series) > 0 {
		for _, msg := range m.Series {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Selector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Selector.Size()))
		n2, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Function) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Function)))
		i += copy(dAtA[i:], m.Function)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StartTime.Size()))
		n3, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EndTime != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.EndTime.Size()))
		n4, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.GroupbyTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.GroupbyTime)))
		i += copy(dAtA[i:], m.GroupbyTime)
	}
	if len(m.GroupbyField) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.GroupbyField)))
		i += copy(dAtA[i:], m.GroupbyField)
	}
	if m.Pagination != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Pagination.Size()))
		n5, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PaginationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginationSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Offset))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ResultSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x12
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovTelemetryQuery(uint64(len(k))) + 1 + len(v) + sovTelemetryQuery(uint64(len(v)))
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTelemetryQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetricsQueryList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQueryResult) Size() (n int) {
	var l int
	_ = l
	if m.StatementID != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.StatementID))
	}
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQuerySpec) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetryQuery(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.GroupbyTime)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.GroupbyField)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	return n
}

func (m *PaginationSpec) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.Count))
	}
	return n
}

func (m *ResultSeries) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetryQuery(uint64(len(k))) + 1 + len(v) + sovTelemetryQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovTelemetryQuery(uint64(mapEntrySize))
		}
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func sovTelemetryQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetryQuery(x uint64) (n int) {
	return sovTelemetryQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsQueryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &MetricsQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &MetricsQueryResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementID", wireType)
			}
			m.StatementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatementID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &ResultSeries{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &labels.Selector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupbyTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupbyTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupbyField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupbyField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &PaginationSpec{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &api.InterfaceSlice{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetryQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetryQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetryQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetryQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetryQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry_query.proto", fileDescriptorTelemetryQuery) }

var fileDescriptorTelemetryQuery = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xaf, 0xe2, 0xc4, 0x8e, 0x37, 0x21, 0x15, 0x9b, 0x94, 0x2a, 0x19, 0x88, 0x82, 0x81, 0xc1,
	0x40, 0x62, 0xa5, 0xc9, 0x4c, 0x0b, 0x5c, 0x98, 0xaa, 0x75, 0x99, 0x0e, 0xb5, 0xd3, 0xda, 0x86,
	0xa1, 0x33, 0x0c, 0x9d, 0xb5, 0xfc, 0x2c, 0x76, 0x90, 0x56, 0xaa, 0xb4, 0x2a, 0xf8, 0xc0, 0x35,
	0x9f, 0x83, 0x73, 0x3e, 0x49, 0x8e, 0xbd, 0x70, 0xd5, 0x30, 0xb9, 0xa1, 0x0b, 0x5f, 0x81, 0xd9,
	0x5d, 0xd9, 0x28, 0xb2, 0x93, 0xe9, 0xad, 0x27, 0xef, 0xfb, 0xed, 0x7b, 0xbf, 0x7d, 0x7f, 0xf4,
	0x7b, 0x46, 0xb7, 0x38, 0x78, 0xe0, 0x03, 0x8f, 0x26, 0x2f, 0x5e, 0x26, 0x10, 0x4d, 0x5a, 0x61,
	0x14, 0xf0, 0x00, 0xdf, 0x2c, 0xc1, 0x3b, 0xef, 0xbb, 0x41, 0xe0, 0x7a, 0x60, 0x91, 0x90, 0x5a,
	0x84, 0xb1, 0x80, 0x13, 0x4e, 0x03, 0x16, 0x2b, 0xf7, 0x9d, 0xb6, 0x4b, 0xf9, 0x2f, 0xc9, 0xb0,
	0xe5, 0x04, 0xbe, 0x15, 0x02, 0x8b, 0x09, 0x1b, 0x05, 0x56, 0xfc, 0x9b, 0xf5, 0x0a, 0x18, 0x75,
	0xc0, 0x4a, 0x38, 0xf5, 0x62, 0x11, 0xea, 0x02, 0x2b, 0x46, 0x5b, 0x94, 0x39, 0x5e, 0x32, 0x82,
	0x29, 0xcd, 0x41, 0x81, 0xc6, 0x0d, 0xdc, 0xc0, 0x92, 0xf0, 0x30, 0x19, 0x4b, 0x4b, 0x1a, 0xf2,
	0x94, 0xbb, 0x7f, 0x72, 0xc5, 0xab, 0x22, 0x47, 0x1f, 0x38, 0xc9, 0xdd, 0x0e, 0xaf, 0x71, 0x1b,
	0x53, 0xf0, 0x46, 0xb1, 0x15, 0x83, 0x07, 0x0e, 0x0f, 0xa2, 0x37, 0x88, 0xf0, 0xc8, 0x10, 0xbc,
	0x72, 0x44, 0xe3, 0x1f, 0x0d, 0xe9, 0x1d, 0xe0, 0x11, 0x75, 0xe2, 0x67, 0xa2, 0x5f, 0x4f, 0x68,
	0xcc, 0xf1, 0x5d, 0x54, 0x1d, 0x00, 0x23, 0x8c, 0x1b, 0xda, 0x9e, 0xd6, 0xac, 0xdb, 0x5b, 0x59,
	0x6a, 0xea, 0x5c, 0x22, 0xfb, 0x81, 0x4f, 0x39, 0xf8, 0x21, 0x9f, 0xf4, 0xe6, 0x10, 0xfc, 0x0d,
	0xaa, 0x77, 0x89, 0x0f, 0x71, 0x48, 0x1c, 0x30, 0x96, 0x64, 0xe8, 0xed, 0x2c, 0x35, 0x37, 0xd9,
	0x14, 0x2c, 0x44, 0x2f, 0x02, 0xf1, 0x4f, 0xa8, 0x26, 0xb2, 0xa0, 0x10, 0x1b, 0x95, 0xbd, 0x4a,
	0x73, 0xed, 0xe8, 0xc3, 0x56, 0x79, 0xcc, 0xc5, 0x64, 0xfb, 0x21, 0x38, 0xf6, 0xad, 0x2c, 0x35,
	0xdf, 0x7d, 0xa9, 0xa2, 0x0a, 0xfc, 0xf3, 0x50, 0xe3, 0x5f, 0x0d, 0x6d, 0x15, 0xc3, 0x7b, 0x10,
	0x87, 0x01, 0x8b, 0xe1, 0xed, 0xd5, 0xfb, 0x33, 0xaa, 0xf5, 0x20, 0x4e, 0x3c, 0x3e, 0xad, 0xf7,
	0xa3, 0x6b, 0xeb, 0x55, 0xbe, 0xaa, 0xe2, 0x48, 0xc5, 0x15, 0x2b, 0x9e, 0x83, 0x1a, 0x7f, 0x6a,
	0x08, 0xcf, 0x13, 0xe0, 0x63, 0xb4, 0xd6, 0xe7, 0x84, 0x83, 0x0f, 0x8c, 0x3f, 0x7e, 0x28, 0x8b,
	0x5e, 0xb1, 0xf5, 0x2c, 0x35, 0xd7, 0xe3, 0x29, 0xfc, 0x82, 0x8e, 0x7a, 0x97, 0x2c, 0xfc, 0x3d,
	0xaa, 0xf6, 0xd5, 0x68, 0x96, 0x64, 0xaa, 0x1f, 0xcc, 0xa5, 0xaa, 0xd8, 0x95, 0x93, 0xea, 0x61,
	0x5c, 0x9e, 0xca, 0x1c, 0xd2, 0xf8, 0xab, 0x7a, 0xf9, 0x03, 0x14, 0x33, 0xc5, 0x77, 0x91, 0x36,
	0x90, 0x69, 0xad, 0x1d, 0xbd, 0xd3, 0x22, 0x21, 0x6d, 0x0d, 0x26, 0x21, 0x74, 0x80, 0x13, 0x7b,
	0xf3, 0x3c, 0x35, 0x6f, 0xbc, 0x4e, 0x4d, 0x2d, 0x4b, 0xcd, 0xda, 0x3e, 0x65, 0x1e, 0x65, 0xd0,
	0x9b, 0x1e, 0xb0, 0x8d, 0x96, 0xc5, 0x40, 0xf2, 0x59, 0x7c, 0x7c, 0x76, 0xba, 0xbd, 0xd1, 0xe7,
	0xd1, 0x13, 0x60, 0xcd, 0x3b, 0xfb, 0x7b, 0x77, 0x0e, 0x0f, 0x3f, 0xcb, 0x52, 0x73, 0x43, 0x0c,
	0xa2, 0x90, 0x52, 0xc9, 0xc6, 0x5d, 0xb4, 0xda, 0xcf, 0x35, 0x62, 0x54, 0x64, 0x0a, 0x7a, 0x4b,
	0x69, 0xa7, 0x35, 0xc5, 0xed, 0xf7, 0xb2, 0xd4, 0xc4, 0x53, 0x25, 0x15, 0xb8, 0x16, 0x60, 0xb8,
	0x83, 0xaa, 0x8f, 0xa4, 0x58, 0x8d, 0xe5, 0xbd, 0x4a, 0xb3, 0x6e, 0x7f, 0x71, 0x76, 0xba, 0xbd,
	0xd9, 0x16, 0x57, 0x27, 0x51, 0x0f, 0xdc, 0xf6, 0xef, 0x61, 0x53, 0x64, 0x20, 0x52, 0xd3, 0x95,
	0xaa, 0x8b, 0xfd, 0x2a, 0x23, 0xf8, 0x39, 0x5a, 0x7d, 0x94, 0x30, 0x47, 0xac, 0x21, 0x63, 0x45,
	0x96, 0x79, 0x7c, 0x76, 0xba, 0xbd, 0xdd, 0xe7, 0x51, 0x9b, 0x25, 0x7e, 0x73, 0x10, 0x8f, 0x86,
	0xd3, 0x7b, 0xd1, 0x34, 0x41, 0x8b, 0xc7, 0x39, 0x50, 0xcc, 0x74, 0x1e, 0xc3, 0xcf, 0x50, 0xbd,
	0xcf, 0x49, 0xc4, 0x07, 0xd4, 0x07, 0xa3, 0x2a, 0x4b, 0xdf, 0x50, 0xdd, 0xa7, 0x3e, 0xc4, 0x9c,
	0xf8, 0xa1, 0x6d, 0x64, 0xa9, 0xb9, 0x15, 0x0b, 0xa7, 0x03, 0x4e, 0x2f, 0xb5, 0x71, 0x21, 0x8a,
	0xbf, 0x43, 0xb5, 0x36, 0x1b, 0x49, 0xc2, 0xda, 0x42, 0x42, 0xd9, 0x49, 0x60, 0xa3, 0x32, 0xdd,
	0x02, 0x0c, 0x13, 0xb4, 0xf6, 0x6d, 0x14, 0x24, 0xe1, 0x70, 0x22, 0x09, 0x57, 0x67, 0xd5, 0x6f,
	0xe5, 0xed, 0x7c, 0x98, 0x44, 0x72, 0x3f, 0x37, 0x0f, 0xf7, 0xe5, 0xa8, 0x6f, 0xbb, 0xc2, 0xfd,
	0x60, 0x38, 0x29, 0xb3, 0x5f, 0x75, 0x81, 0x1d, 0xb4, 0x9e, 0x3f, 0x21, 0x67, 0x66, 0xd4, 0x67,
	0x6f, 0x5c, 0x31, 0x32, 0x63, 0xc6, 0x24, 0x27, 0x55, 0x78, 0xe3, 0xca, 0x1b, 0xec, 0x20, 0xf4,
	0x94, 0xb8, 0x94, 0xc9, 0x5c, 0x0d, 0x24, 0xfb, 0x62, 0xce, 0xa9, 0xe9, 0x7f, 0x17, 0xb9, 0xe6,
	0x64, 0xe7, 0xc3, 0x19, 0x56, 0xec, 0xfc, 0x22, 0xb4, 0xf1, 0x07, 0xda, 0xb8, 0xcc, 0x20, 0xb6,
	0xdc, 0xc9, 0x78, 0x1c, 0x03, 0xcf, 0x05, 0x2f, 0x15, 0x1a, 0x48, 0xa4, 0xf8, 0xc5, 0x95, 0x11,
	0x7c, 0x8c, 0x56, 0x1e, 0x04, 0x09, 0xe3, 0x52, 0x55, 0x2b, 0xf6, 0x66, 0x96, 0x9a, 0x37, 0x1d,
	0x01, 0x14, 0xa2, 0xca, 0x40, 0xe3, 0x7c, 0x09, 0xad, 0x17, 0xf7, 0x01, 0x3e, 0xcc, 0xa5, 0xa9,
	0x36, 0x2c, 0x7e, 0x03, 0x21, 0x3e, 0x47, 0xcb, 0x03, 0xe2, 0x4e, 0xd7, 0xcd, 0xa7, 0xd7, 0xae,
	0x9b, 0x96, 0xf0, 0x6c, 0x33, 0x1e, 0x4d, 0x14, 0x35, 0x27, 0x6e, 0x51, 0x46, 0x25, 0x1b, 0x7f,
	0x85, 0x6a, 0x0f, 0x02, 0x2f, 0xf1, 0x99, 0xda, 0xbb, 0x75, 0xb5, 0x52, 0x1d, 0x05, 0x15, 0x57,
	0xea, 0x1c, 0x84, 0xef, 0xa1, 0xea, 0x0f, 0xc4, 0x4b, 0x40, 0xc9, 0x79, 0xed, 0x68, 0x53, 0x7e,
	0xd0, 0x8f, 0x19, 0x87, 0x68, 0x4c, 0x1c, 0xe8, 0x7b, 0xd4, 0x01, 0x1b, 0x65, 0xa9, 0x59, 0x7d,
	0x25, 0xdd, 0x7a, 0xf9, 0xef, 0xce, 0x3d, 0x54, 0x9f, 0x25, 0x89, 0x75, 0x54, 0xf9, 0x15, 0x26,
	0xaa, 0x19, 0x3d, 0x71, 0xc4, 0x5b, 0x68, 0x45, 0x3a, 0xaa, 0xdd, 0xd5, 0x53, 0xc6, 0xd7, 0x4b,
	0x5f, 0x6a, 0x9f, 0x5b, 0x48, 0x2f, 0xab, 0x1a, 0xaf, 0xa2, 0xe5, 0xee, 0x49, 0xb7, 0xad, 0xdf,
	0x10, 0xa7, 0x4e, 0xfb, 0x7e, 0x57, 0xd7, 0x70, 0x0d, 0x55, 0x3a, 0xf7, 0x7f, 0xd4, 0x97, 0xec,
	0xf5, 0xf3, 0x8b, 0x5d, 0xed, 0xf5, 0xc5, 0xae, 0xf6, 0xf7, 0xc5, 0xae, 0xf6, 0x54, 0x1b, 0x56,
	0xe5, 0x5f, 0xfd, 0xf1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0x7b, 0xf5, 0x43, 0x33, 0x09,
	0x00, 0x00,
}
