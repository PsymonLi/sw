// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry_query.proto

package telemetry_query

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import fields "github.com/pensando/sw/api/fields"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TSDBFunctionType specifies an operation to perform on metrics
type TsdbFunctionType int32

const (
	//
	TsdbFunctionType_NONE TsdbFunctionType = 0
	//
	TsdbFunctionType_MEAN TsdbFunctionType = 1
	//
	TsdbFunctionType_MAX TsdbFunctionType = 2
	//
	TsdbFunctionType_MEDIAN TsdbFunctionType = 3
	//
	TsdbFunctionType_DERIVATIVE TsdbFunctionType = 4
	//
	TsdbFunctionType_DIFFERENCE TsdbFunctionType = 5
	//
	TsdbFunctionType_LAST TsdbFunctionType = 6
)

var TsdbFunctionType_name = map[int32]string{
	0: "NONE",
	1: "MEAN",
	2: "MAX",
	3: "MEDIAN",
	4: "DERIVATIVE",
	5: "DIFFERENCE",
	6: "LAST",
}
var TsdbFunctionType_value = map[string]int32{
	"NONE":       0,
	"MEAN":       1,
	"MAX":        2,
	"MEDIAN":     3,
	"DERIVATIVE": 4,
	"DIFFERENCE": 5,
	"LAST":       6,
}

func (TsdbFunctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetryQuery, []int{0}
}

//
type SortOrder int32

const (
	//
	SortOrder_Ascending SortOrder = 0
	//
	SortOrder_Descending SortOrder = 1
)

var SortOrder_name = map[int32]string{
	0: "Ascending",
	1: "Descending",
}
var SortOrder_value = map[string]int32{
	"Ascending":  0,
	"Descending": 1,
}

func (SortOrder) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{1} }

// Enums for the response
type FwlogActions int32

const (
	// ui-hint: Allow
	FwlogActions_allow FwlogActions = 0
	// ui-hint: Deny
	FwlogActions_deny FwlogActions = 1
	// ui-hint: Reject
	FwlogActions_reject FwlogActions = 2
	// ui-hint: Implicit-deny
	FwlogActions_implicit_deny FwlogActions = 3
)

var FwlogActions_name = map[int32]string{
	0: "allow",
	1: "deny",
	2: "reject",
	3: "implicit_deny",
}
var FwlogActions_value = map[string]int32{
	"allow":         0,
	"deny":          1,
	"reject":        2,
	"implicit_deny": 3,
}

func (FwlogActions) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{2} }

//
type FwlogDirections int32

const (
	// ui-hint: From Host
	FwlogDirections_from_host FwlogDirections = 0
	// ui-hint: From Uplink
	FwlogDirections_from_uplink FwlogDirections = 1
)

var FwlogDirections_name = map[int32]string{
	0: "from_host",
	1: "from_uplink",
}
var FwlogDirections_value = map[string]int32{
	"from_host":   0,
	"from_uplink": 1,
}

func (FwlogDirections) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{3} }

//
type Fwlog struct {
	// Tenant
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Source IP,
	Src string `protobuf:"bytes,2,opt,name=Src,json=source,omitempty,proto3" json:"source,omitempty"`
	// Destination IP
	Dest string `protobuf:"bytes,3,opt,name=Dest,json=destination,omitempty,proto3" json:"destination,omitempty"`
	// Source Port
	SrcPort uint32 `protobuf:"varint,4,opt,name=SrcPort,json=source-port,omitempty,proto3" json:"source-port,omitempty"`
	// Destination Port
	DestPort uint32 `protobuf:"varint,5,opt,name=DestPort,json=destination-port,omitempty,proto3" json:"destination-port,omitempty"`
	// Protocol,
	Protocol string `protobuf:"bytes,6,opt,name=Protocol,json=protocol,omitempty,proto3" json:"protocol,omitempty"`
	// Action
	Action string `protobuf:"bytes,7,opt,name=Action,json=action,omitempty,proto3" json:"action,omitempty"`
	// Flow Direction
	Direction string `protobuf:"bytes,8,opt,name=Direction,json=direction,omitempty,proto3" json:"direction,omitempty"`
	// Rule ID
	RuleID string `protobuf:"bytes,9,opt,name=RuleID,json=rule-id,omitempty,proto3" json:"rule-id,omitempty"`
	// Session ID
	SessionID string `protobuf:"bytes,10,opt,name=SessionID,json=session-id,omitempty,proto3" json:"session-id,omitempty"`
	// Session state
	SessionState string `protobuf:"bytes,11,opt,name=SessionState,json=session-state,omitempty,proto3" json:"session-state,omitempty"`
	// policy name
	PolicyName string `protobuf:"bytes,12,opt,name=PolicyName,json=policy-name,omitempty,proto3" json:"policy-name,omitempty"`
	// Reporter ID
	ReporterID string `protobuf:"bytes,13,opt,name=ReporterID,json=reporter-id,omitempty,proto3" json:"reporter-id,omitempty"`
	// Time the log was created
	Time *api.Timestamp `protobuf:"bytes,14,opt,name=Time,json=time,omitempty" json:"time,omitempty"`
}

func (m *Fwlog) Reset()                    { *m = Fwlog{} }
func (m *Fwlog) String() string            { return proto.CompactTextString(m) }
func (*Fwlog) ProtoMessage()               {}
func (*Fwlog) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{0} }

func (m *Fwlog) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Fwlog) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Fwlog) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *Fwlog) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Fwlog) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *Fwlog) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Fwlog) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Fwlog) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *Fwlog) GetRuleID() string {
	if m != nil {
		return m.RuleID
	}
	return ""
}

func (m *Fwlog) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *Fwlog) GetSessionState() string {
	if m != nil {
		return m.SessionState
	}
	return ""
}

func (m *Fwlog) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *Fwlog) GetReporterID() string {
	if m != nil {
		return m.ReporterID
	}
	return ""
}

func (m *Fwlog) GetTime() *api.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// FwlogsQueryList contains a list of queries to execute
type FwlogsQueryList struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// List of queries to execute
	Queries []*FwlogsQuerySpec `protobuf:"bytes,3,rep,name=Queries,json=queries,omitempty" json:"queries,omitempty"`
}

func (m *FwlogsQueryList) Reset()                    { *m = FwlogsQueryList{} }
func (m *FwlogsQueryList) String() string            { return proto.CompactTextString(m) }
func (*FwlogsQueryList) ProtoMessage()               {}
func (*FwlogsQueryList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{1} }

func (m *FwlogsQueryList) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *FwlogsQueryList) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *FwlogsQueryList) GetQueries() []*FwlogsQuerySpec {
	if m != nil {
		return m.Queries
	}
	return nil
}

// FwlogsQueryResponse is the response for Fwlogs Query
type FwlogsQueryResponse struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	//
	Results []*FwlogsQueryResult `protobuf:"bytes,3,rep,name=Results,json=results,omitempty" json:"results,omitempty"`
}

func (m *FwlogsQueryResponse) Reset()         { *m = FwlogsQueryResponse{} }
func (m *FwlogsQueryResponse) String() string { return proto.CompactTextString(m) }
func (*FwlogsQueryResponse) ProtoMessage()    {}
func (*FwlogsQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetryQuery, []int{2}
}

func (m *FwlogsQueryResponse) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *FwlogsQueryResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *FwlogsQueryResponse) GetResults() []*FwlogsQueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// FwlogsQueryResult contains fwlogs returned from a fwlogQuery
type FwlogsQueryResult struct {
	//
	StatementID int32 `protobuf:"varint,1,opt,name=StatementID,json=statement_id,proto3" json:"statement_id"`
	//
	Logs []*Fwlog `protobuf:"bytes,2,rep,name=Logs,json=logs,omitempty" json:"logs,omitempty"`
}

func (m *FwlogsQueryResult) Reset()                    { *m = FwlogsQueryResult{} }
func (m *FwlogsQueryResult) String() string            { return proto.CompactTextString(m) }
func (*FwlogsQueryResult) ProtoMessage()               {}
func (*FwlogsQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{3} }

func (m *FwlogsQueryResult) GetStatementID() int32 {
	if m != nil {
		return m.StatementID
	}
	return 0
}

func (m *FwlogsQueryResult) GetLogs() []*Fwlog {
	if m != nil {
		return m.Logs
	}
	return nil
}

// FwlogsQuerySpec allows selecting logs by all attributes
// All fields are ANDed together
type FwlogsQuerySpec struct {
	// OR of sources IPs to be matched
	SourceIPs []string `protobuf:"bytes,1,rep,name=SourceIPs,json=source-ips,omitempty" json:"source-ips,omitempty"`
	// OR of dest IPs to be matched
	DestIPs []string `protobuf:"bytes,2,rep,name=DestIPs,json=dest-ips,omitempty" json:"dest-ips,omitempty"`
	// OR of source ports to be matched
	SourcePorts []uint32 `protobuf:"varint,3,rep,packed,name=SourcePorts,json=source-ports,omitempty" json:"source-ports,omitempty"`
	// OR of dest ports to be matched
	DestPorts []uint32 `protobuf:"varint,4,rep,packed,name=DestPorts,json=dest-ports,omitempty" json:"dest-ports,omitempty"`
	// OR of protocols to be matched
	Protocols []string `protobuf:"bytes,5,rep,name=Protocols,json=protocols,omitempty" json:"protocols,omitempty"`
	// OR of actions to be matched
	Actions []string `protobuf:"bytes,6,rep,name=Actions,json=actions,omitempty" json:"actions,omitempty"`
	// OR of directions to be matched
	Directions []string `protobuf:"bytes,7,rep,name=Directions,json=directions,omitempty" json:"directions,omitempty"`
	// OR of ruleID to be matched
	RuleIDs []string `protobuf:"bytes,8,rep,name=RuleIDs,json=rule-ids,omitempty" json:"rule-ids,omitempty"`
	// OR of policy names to be matched
	PolicyNames []string `protobuf:"bytes,9,rep,name=PolicyNames,json=policy-names,omitempty" json:"policy-names,omitempty"`
	// OR of reporter names to be matched
	ReporterIDs []string `protobuf:"bytes,10,rep,name=ReporterIDs,json=reporter-ids,omitempty" json:"reporter-ids,omitempty"`
	// StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
	StartTime *api.Timestamp `protobuf:"bytes,11,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
	EndTime *api.Timestamp `protobuf:"bytes,12,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	// PaginationSpec specifies the number of series to include
	Pagination *PaginationSpec `protobuf:"bytes,13,opt,name=Pagination,json=pagination,omitempty" json:"pagination,omitempty"`
	// SortOrder specifies time ordering of results
	SortOrder string `protobuf:"bytes,14,opt,name=SortOrder,json=sort-order,omitempty,proto3" json:"sort-order,omitempty"`
}

func (m *FwlogsQuerySpec) Reset()                    { *m = FwlogsQuerySpec{} }
func (m *FwlogsQuerySpec) String() string            { return proto.CompactTextString(m) }
func (*FwlogsQuerySpec) ProtoMessage()               {}
func (*FwlogsQuerySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{4} }

func (m *FwlogsQuerySpec) GetSourceIPs() []string {
	if m != nil {
		return m.SourceIPs
	}
	return nil
}

func (m *FwlogsQuerySpec) GetDestIPs() []string {
	if m != nil {
		return m.DestIPs
	}
	return nil
}

func (m *FwlogsQuerySpec) GetSourcePorts() []uint32 {
	if m != nil {
		return m.SourcePorts
	}
	return nil
}

func (m *FwlogsQuerySpec) GetDestPorts() []uint32 {
	if m != nil {
		return m.DestPorts
	}
	return nil
}

func (m *FwlogsQuerySpec) GetProtocols() []string {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *FwlogsQuerySpec) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *FwlogsQuerySpec) GetDirections() []string {
	if m != nil {
		return m.Directions
	}
	return nil
}

func (m *FwlogsQuerySpec) GetRuleIDs() []string {
	if m != nil {
		return m.RuleIDs
	}
	return nil
}

func (m *FwlogsQuerySpec) GetPolicyNames() []string {
	if m != nil {
		return m.PolicyNames
	}
	return nil
}

func (m *FwlogsQuerySpec) GetReporterIDs() []string {
	if m != nil {
		return m.ReporterIDs
	}
	return nil
}

func (m *FwlogsQuerySpec) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *FwlogsQuerySpec) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *FwlogsQuerySpec) GetPagination() *PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *FwlogsQuerySpec) GetSortOrder() string {
	if m != nil {
		return m.SortOrder
	}
	return ""
}

// MetricsQueryList contains a list of queries to execute
type MetricsQueryList struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// List of queries to execute
	Queries []*MetricsQuerySpec `protobuf:"bytes,3,rep,name=Queries,json=queries,omitempty" json:"queries,omitempty"`
}

func (m *MetricsQueryList) Reset()                    { *m = MetricsQueryList{} }
func (m *MetricsQueryList) String() string            { return proto.CompactTextString(m) }
func (*MetricsQueryList) ProtoMessage()               {}
func (*MetricsQueryList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{5} }

func (m *MetricsQueryList) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MetricsQueryList) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MetricsQueryList) GetQueries() []*MetricsQuerySpec {
	if m != nil {
		return m.Queries
	}
	return nil
}

// MetricsQueryResponse is the response for Metrics Query
type MetricsQueryResponse struct {
	// Tenant for the request
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Namespace for the request
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	//
	Results []*MetricsQueryResult `protobuf:"bytes,3,rep,name=Results,json=results,omitempty" json:"results,omitempty"`
}

func (m *MetricsQueryResponse) Reset()         { *m = MetricsQueryResponse{} }
func (m *MetricsQueryResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsQueryResponse) ProtoMessage()    {}
func (*MetricsQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetryQuery, []int{6}
}

func (m *MetricsQueryResponse) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MetricsQueryResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *MetricsQueryResponse) GetResults() []*MetricsQueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// MetricsQueryResult contains tsdb series from a metrics query
type MetricsQueryResult struct {
	//
	StatementID int32 `protobuf:"varint,1,opt,name=StatementID,json=statement_id,proto3" json:"statement_id"`
	//
	Series []*ResultSeries `protobuf:"bytes,2,rep,name=Series,json=series,omitempty" json:"series,omitempty"`
}

func (m *MetricsQueryResult) Reset()                    { *m = MetricsQueryResult{} }
func (m *MetricsQueryResult) String() string            { return proto.CompactTextString(m) }
func (*MetricsQueryResult) ProtoMessage()               {}
func (*MetricsQueryResult) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{7} }

func (m *MetricsQueryResult) GetStatementID() int32 {
	if m != nil {
		return m.StatementID
	}
	return 0
}

func (m *MetricsQueryResult) GetSeries() []*ResultSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

// MetricsQuerySpec requires a structured body consisting of:
//     -  Object Selector (selects one more more objects of same Kind)
//     -  Time Range (for the time series)
//     -  A set of Metric Specs
//     -  A pagination spec
type MetricsQuerySpec struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	// Name is the name of the API object.
	Name string `protobuf:"bytes,2,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
	//
	Selector *fields.Selector `protobuf:"bytes,3,opt,name=Selector,json=selector,omitempty" json:"selector,omitempty"`
	// Fields select the metric fields to be included in the result
	// Empty will include all fields, must contain at least one non-tag field
	Fields []string `protobuf:"bytes,4,rep,name=Fields,json=fields,omitempty" json:"fields,omitempty"`
	// Functions specify an operation function to be applied, example mean()/max()
	Function string `protobuf:"bytes,5,opt,name=Function,json=function,omitempty,proto3" json:"function,omitempty"`
	// StartTime selects all metrics with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z
	StartTime *api.Timestamp `protobuf:"bytes,6,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// EndTime selects all metrics with timestamp less than the EndTime, example 2018-09-18T00:12:00Z
	EndTime *api.Timestamp `protobuf:"bytes,7,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	// GroupbyTime groups series based on the interval specified
	GroupbyTime string `protobuf:"bytes,8,opt,name=GroupbyTime,json=group-by-time,omitempty,proto3" json:"group-by-time,omitempty"`
	// GroupbyField groups series based on the field specified
	GroupbyField string `protobuf:"bytes,9,opt,name=GroupbyField,json=group-by-field,omitempty,proto3" json:"group-by-field,omitempty"`
	// PaginationSpec specifies the number of series to include
	Pagination *PaginationSpec `protobuf:"bytes,10,opt,name=Pagination,json=pagination,omitempty" json:"pagination,omitempty"`
	// SortOrder specifies time ordering of results
	SortOrder string `protobuf:"bytes,11,opt,name=SortOrder,json=sort-order,omitempty,proto3" json:"sort-order,omitempty"`
}

func (m *MetricsQuerySpec) Reset()                    { *m = MetricsQuerySpec{} }
func (m *MetricsQuerySpec) String() string            { return proto.CompactTextString(m) }
func (*MetricsQuerySpec) ProtoMessage()               {}
func (*MetricsQuerySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{8} }

func (m *MetricsQuerySpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsQuerySpec) GetSelector() *fields.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *MetricsQuerySpec) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetricsQuerySpec) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *MetricsQuerySpec) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *MetricsQuerySpec) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *MetricsQuerySpec) GetGroupbyTime() string {
	if m != nil {
		return m.GroupbyTime
	}
	return ""
}

func (m *MetricsQuerySpec) GetGroupbyField() string {
	if m != nil {
		return m.GroupbyField
	}
	return ""
}

func (m *MetricsQuerySpec) GetPagination() *PaginationSpec {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *MetricsQuerySpec) GetSortOrder() string {
	if m != nil {
		return m.SortOrder
	}
	return ""
}

// PaginationSpec specifies how many results to include
type PaginationSpec struct {
	// Offset specifies the starting point when using Count
	Offset int32 `protobuf:"varint,1,opt,name=Offset,json=offset,omitempty,proto3" json:"offset,omitempty"`
	// Count specifies the number of points to include
	Count int32 `protobuf:"varint,2,opt,name=Count,json=count,omitempty,proto3" json:"count,omitempty"`
}

func (m *PaginationSpec) Reset()                    { *m = PaginationSpec{} }
func (m *PaginationSpec) String() string            { return proto.CompactTextString(m) }
func (*PaginationSpec) ProtoMessage()               {}
func (*PaginationSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{9} }

func (m *PaginationSpec) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PaginationSpec) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//
type ResultSeries struct {
	// Name of the series
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
	// Tags are the TSDB tags in the query response
	Tags map[string]string `protobuf:"bytes,2,rep,name=Tags,json=tags,omitempty" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// columns list all available fields in tsdb
	Columns []string `protobuf:"bytes,3,rep,name=Columns,json=columns,omitempty" json:"columns,omitempty"`
	// values contain field values received frpm tsdb, it is in the form of [][]interface{}
	Values []*api.InterfaceSlice `protobuf:"bytes,4,rep,name=Values,json=values" json:"values"`
}

func (m *ResultSeries) Reset()                    { *m = ResultSeries{} }
func (m *ResultSeries) String() string            { return proto.CompactTextString(m) }
func (*ResultSeries) ProtoMessage()               {}
func (*ResultSeries) Descriptor() ([]byte, []int) { return fileDescriptorTelemetryQuery, []int{10} }

func (m *ResultSeries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResultSeries) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ResultSeries) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *ResultSeries) GetValues() []*api.InterfaceSlice {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Fwlog)(nil), "telemetry_query.Fwlog")
	proto.RegisterType((*FwlogsQueryList)(nil), "telemetry_query.FwlogsQueryList")
	proto.RegisterType((*FwlogsQueryResponse)(nil), "telemetry_query.FwlogsQueryResponse")
	proto.RegisterType((*FwlogsQueryResult)(nil), "telemetry_query.FwlogsQueryResult")
	proto.RegisterType((*FwlogsQuerySpec)(nil), "telemetry_query.FwlogsQuerySpec")
	proto.RegisterType((*MetricsQueryList)(nil), "telemetry_query.MetricsQueryList")
	proto.RegisterType((*MetricsQueryResponse)(nil), "telemetry_query.MetricsQueryResponse")
	proto.RegisterType((*MetricsQueryResult)(nil), "telemetry_query.MetricsQueryResult")
	proto.RegisterType((*MetricsQuerySpec)(nil), "telemetry_query.MetricsQuerySpec")
	proto.RegisterType((*PaginationSpec)(nil), "telemetry_query.PaginationSpec")
	proto.RegisterType((*ResultSeries)(nil), "telemetry_query.ResultSeries")
	proto.RegisterEnum("telemetry_query.TsdbFunctionType", TsdbFunctionType_name, TsdbFunctionType_value)
	proto.RegisterEnum("telemetry_query.SortOrder", SortOrder_name, SortOrder_value)
	proto.RegisterEnum("telemetry_query.FwlogActions", FwlogActions_name, FwlogActions_value)
	proto.RegisterEnum("telemetry_query.FwlogDirections", FwlogDirections_name, FwlogDirections_value)
}
func (m *Fwlog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fwlog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Src) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Src)))
		i += copy(dAtA[i:], m.Src)
	}
	if len(m.Dest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Dest)))
		i += copy(dAtA[i:], m.Dest)
	}
	if m.SrcPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.SrcPort))
	}
	if m.DestPort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.DestPort))
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Direction) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Direction)))
		i += copy(dAtA[i:], m.Direction)
	}
	if len(m.RuleID) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.RuleID)))
		i += copy(dAtA[i:], m.RuleID)
	}
	if len(m.SessionID) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if len(m.SessionState) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.SessionState)))
		i += copy(dAtA[i:], m.SessionState)
	}
	if len(m.PolicyName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.PolicyName)))
		i += copy(dAtA[i:], m.PolicyName)
	}
	if len(m.ReporterID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.ReporterID)))
		i += copy(dAtA[i:], m.ReporterID)
	}
	if m.Time != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Time.Size()))
		n1, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FwlogsQueryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogsQueryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogsQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogsQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogsQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogsQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatementID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StatementID))
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogsQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogsQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SourceIPs) > 0 {
		for _, s := range m.SourceIPs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DestIPs) > 0 {
		for _, s := range m.DestIPs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SourcePorts) > 0 {
		dAtA3 := make([]byte, len(m.SourcePorts)*10)
		var j2 int
		for _, num := range m.SourcePorts {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.DestPorts) > 0 {
		dAtA5 := make([]byte, len(m.DestPorts)*10)
		var j4 int
		for _, num := range m.DestPorts {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.Protocols) > 0 {
		for _, s := range m.Protocols {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Directions) > 0 {
		for _, s := range m.Directions {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RuleIDs) > 0 {
		for _, s := range m.RuleIDs {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ReporterIDs) > 0 {
		for _, s := range m.ReporterIDs {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.StartTime != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StartTime.Size()))
		n6, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.EndTime != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.EndTime.Size()))
		n7, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Pagination != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Pagination.Size()))
		n8, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.SortOrder) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.SortOrder)))
		i += copy(dAtA[i:], m.SortOrder)
	}
	return i, nil
}

func (m *MetricsQueryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Queries) > 0 {
		for _, msg := range m.Queries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQueryResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatementID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StatementID))
	}
	if len(m.Series) > 0 {
		for _, msg := range m.Series {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsQuerySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsQuerySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Selector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Selector.Size()))
		n10, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Function) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Function)))
		i += copy(dAtA[i:], m.Function)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.StartTime.Size()))
		n11, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EndTime != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.EndTime.Size()))
		n12, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.GroupbyTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.GroupbyTime)))
		i += copy(dAtA[i:], m.GroupbyTime)
	}
	if len(m.GroupbyField) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.GroupbyField)))
		i += copy(dAtA[i:], m.GroupbyField)
	}
	if m.Pagination != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Pagination.Size()))
		n13, err := m.Pagination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.SortOrder) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.SortOrder)))
		i += copy(dAtA[i:], m.SortOrder)
	}
	return i, nil
}

func (m *PaginationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaginationSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Offset))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ResultSeries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultSeries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x12
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovTelemetryQuery(uint64(len(k))) + 1 + len(v) + sovTelemetryQuery(uint64(len(v)))
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetryQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTelemetryQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Fwlog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Src)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Dest)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.SrcPort != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.SrcPort))
	}
	if m.DestPort != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.DestPort))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.RuleID)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.SessionState)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.PolicyName)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.ReporterID)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	return n
}

func (m *FwlogsQueryList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *FwlogsQueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *FwlogsQueryResult) Size() (n int) {
	var l int
	_ = l
	if m.StatementID != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.StatementID))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *FwlogsQuerySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.SourceIPs) > 0 {
		for _, s := range m.SourceIPs {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.DestIPs) > 0 {
		for _, s := range m.DestIPs {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.SourcePorts) > 0 {
		l = 0
		for _, e := range m.SourcePorts {
			l += sovTelemetryQuery(uint64(e))
		}
		n += 1 + sovTelemetryQuery(uint64(l)) + l
	}
	if len(m.DestPorts) > 0 {
		l = 0
		for _, e := range m.DestPorts {
			l += sovTelemetryQuery(uint64(e))
		}
		n += 1 + sovTelemetryQuery(uint64(l)) + l
	}
	if len(m.Protocols) > 0 {
		for _, s := range m.Protocols {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.Directions) > 0 {
		for _, s := range m.Directions {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.RuleIDs) > 0 {
		for _, s := range m.RuleIDs {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.PolicyNames) > 0 {
		for _, s := range m.PolicyNames {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.ReporterIDs) > 0 {
		for _, s := range m.ReporterIDs {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.SortOrder)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	return n
}

func (m *MetricsQueryList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQueryResult) Size() (n int) {
	var l int
	_ = l
	if m.StatementID != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.StatementID))
	}
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func (m *MetricsQuerySpec) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetryQuery(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.GroupbyTime)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.GroupbyField)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	l = len(m.SortOrder)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	return n
}

func (m *PaginationSpec) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovTelemetryQuery(uint64(m.Count))
	}
	return n
}

func (m *ResultSeries) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTelemetryQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetryQuery(uint64(len(k))) + 1 + len(v) + sovTelemetryQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovTelemetryQuery(uint64(mapEntrySize))
		}
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTelemetryQuery(uint64(l))
		}
	}
	return n
}

func sovTelemetryQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetryQuery(x uint64) (n int) {
	return sovTelemetryQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fwlog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fwlog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fwlog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Src = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			m.SrcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPort", wireType)
			}
			m.DestPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &api.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogsQueryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogsQueryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogsQueryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &FwlogsQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogsQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogsQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogsQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &FwlogsQueryResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogsQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogsQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogsQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementID", wireType)
			}
			m.StatementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatementID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Fwlog{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogsQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogsQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogsQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceIPs = append(m.SourceIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestIPs = append(m.DestIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SourcePorts = append(m.SourcePorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTelemetryQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SourcePorts = append(m.SourcePorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePorts", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DestPorts = append(m.DestPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTelemetryQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DestPorts = append(m.DestPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPorts", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocols = append(m.Protocols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directions = append(m.Directions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleIDs = append(m.RuleIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyNames = append(m.PolicyNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReporterIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReporterIDs = append(m.ReporterIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &PaginationSpec{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQueryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &MetricsQuerySpec{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &MetricsQueryResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementID", wireType)
			}
			m.StatementID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatementID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &ResultSeries{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsQuerySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsQuerySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsQuerySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &fields.Selector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupbyTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupbyTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupbyField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupbyField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &PaginationSpec{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaginationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaginationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaginationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultSeries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSeries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSeries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetryQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTelemetryQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &api.InterfaceSlice{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetryQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetryQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetryQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetryQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetryQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetryQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetryQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetryQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetryQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetryQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry_query.proto", fileDescriptorTelemetryQuery) }

var fileDescriptorTelemetryQuery = []byte{
	// 1824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x73, 0x23, 0x47,
	0x19, 0xf6, 0x58, 0x5f, 0xd6, 0x2b, 0xdb, 0x3b, 0xdb, 0xeb, 0xdd, 0x1d, 0x99, 0x60, 0x09, 0xf1,
	0xa5, 0x35, 0x2b, 0xc9, 0xd8, 0x78, 0x13, 0x20, 0x05, 0x91, 0x56, 0xf2, 0x46, 0xb0, 0xfe, 0x58,
	0xc9, 0x6c, 0x48, 0x85, 0x64, 0x6b, 0x3c, 0x6a, 0x2b, 0x43, 0x46, 0x3d, 0x93, 0xe9, 0x56, 0x16,
	0xfd, 0x01, 0x57, 0xae, 0x70, 0xe6, 0xc0, 0xd9, 0x47, 0xae, 0xfc, 0x81, 0x3d, 0xe6, 0x17, 0xa8,
	0x28, 0x5f, 0x00, 0x55, 0x51, 0xfc, 0x05, 0xaa, 0xbb, 0x47, 0x52, 0xcf, 0x68, 0x6c, 0xd8, 0x54,
	0xa8, 0x70, 0xb2, 0xfa, 0xe9, 0x7e, 0x9f, 0x79, 0xa7, 0xfb, 0xed, 0xe7, 0x99, 0xd7, 0x70, 0x97,
	0x61, 0x07, 0x0f, 0x30, 0xf3, 0x47, 0x2f, 0x3e, 0x1d, 0x62, 0x7f, 0x54, 0xf5, 0x7c, 0x97, 0xb9,
	0xe8, 0x56, 0x04, 0xde, 0x7c, 0xa3, 0xef, 0xba, 0x7d, 0x07, 0xd7, 0x4c, 0xcf, 0xae, 0x99, 0x84,
	0xb8, 0xcc, 0x64, 0xb6, 0x4b, 0xa8, 0x5c, 0xbe, 0xd9, 0xea, 0xdb, 0xec, 0xe3, 0xe1, 0x59, 0xd5,
	0x72, 0x07, 0x35, 0x0f, 0x13, 0x6a, 0x92, 0x9e, 0x5b, 0xa3, 0x2f, 0x6b, 0x9f, 0x61, 0x62, 0x5b,
	0xb8, 0x36, 0x64, 0xb6, 0x43, 0x79, 0x68, 0x1f, 0x13, 0x35, 0xba, 0x66, 0x13, 0xcb, 0x19, 0xf6,
	0xf0, 0x94, 0xa6, 0xa2, 0xd0, 0xf4, 0xdd, 0xbe, 0x5b, 0x13, 0xf0, 0xd9, 0xf0, 0x5c, 0x8c, 0xc4,
	0x40, 0xfc, 0x0a, 0x96, 0x7f, 0xf7, 0x9a, 0xa7, 0xf2, 0x1c, 0x07, 0x98, 0x99, 0xc1, 0xb2, 0x9d,
	0x1b, 0x96, 0x9d, 0xdb, 0xd8, 0xe9, 0xd1, 0x1a, 0xc5, 0x0e, 0xb6, 0x98, 0xeb, 0xcb, 0x88, 0xd2,
	0xab, 0x0c, 0xa4, 0x0e, 0x5e, 0x3a, 0x6e, 0x1f, 0x3d, 0x82, 0xf4, 0x29, 0x26, 0x26, 0x61, 0x86,
	0x56, 0xd4, 0xca, 0xd9, 0xc6, 0xc6, 0x64, 0x5c, 0xd0, 0x99, 0x40, 0x1e, 0xba, 0x03, 0x9b, 0xe1,
	0x81, 0xc7, 0x46, 0x9d, 0x05, 0x04, 0xed, 0x41, 0xa2, 0xeb, 0x5b, 0xc6, 0xf2, 0x3c, 0x88, 0xba,
	0x43, 0xdf, 0xc2, 0x6a, 0x50, 0x14, 0x41, 0x3f, 0x83, 0x64, 0x13, 0x53, 0x66, 0x24, 0x44, 0x54,
	0x7e, 0x32, 0x2e, 0xdc, 0xed, 0x61, 0xca, 0x6c, 0x22, 0x76, 0x4b, 0x09, 0x8d, 0x87, 0x51, 0x1d,
	0x32, 0x5d, 0xdf, 0x3a, 0x71, 0x7d, 0x66, 0x24, 0x8b, 0x5a, 0x79, 0x4d, 0x52, 0xc8, 0xc7, 0x54,
	0x3c, 0xd7, 0x57, 0x53, 0x8e, 0x87, 0xd1, 0x53, 0x58, 0xe1, 0x29, 0x08, 0x8e, 0x94, 0xe0, 0xd8,
	0x9a, 0x8c, 0x0b, 0x9b, 0xca, 0xf3, 0xa2, 0x44, 0x37, 0xcc, 0xa1, 0xb7, 0x61, 0xe5, 0x84, 0x6f,
	0xa8, 0xe5, 0x3a, 0x46, 0x5a, 0xbc, 0xd4, 0xbd, 0xc9, 0xb8, 0x80, 0xbc, 0x00, 0x53, 0x58, 0x62,
	0x30, 0x74, 0x0c, 0xe9, 0xba, 0xc5, 0x69, 0x8d, 0x8c, 0x88, 0xad, 0x5c, 0x5e, 0xe4, 0xef, 0x76,
	0x99, 0xdf, 0x22, 0xc3, 0x41, 0x59, 0x1c, 0x8f, 0x9c, 0xa6, 0x0f, 0xf8, 0xfe, 0x9a, 0x56, 0x64,
	0x93, 0x16, 0x10, 0xf4, 0x01, 0x64, 0x9b, 0xb6, 0x8f, 0x25, 0xe7, 0x8a, 0xe0, 0xdc, 0xbb, 0xbc,
	0xc8, 0x1b, 0x21, 0xce, 0xd9, 0x0a, 0x41, 0x7b, 0xa7, 0x37, 0x1d, 0x2a, 0xcc, 0x71, 0x20, 0x7a,
	0x0b, 0xd2, 0x9d, 0xa1, 0x83, 0xdb, 0x4d, 0x23, 0x2b, 0x98, 0xef, 0x4e, 0xc6, 0x85, 0xdb, 0xfe,
	0xd0, 0xc1, 0x15, 0xbb, 0xa7, 0xc4, 0x2e, 0x42, 0xa8, 0x0e, 0xd9, 0x2e, 0xa6, 0xd4, 0x76, 0x49,
	0xbb, 0x69, 0x80, 0x08, 0x36, 0x26, 0xe3, 0xc2, 0x06, 0x95, 0x60, 0x38, 0x3e, 0x16, 0x45, 0xbf,
	0x80, 0xd5, 0x80, 0xa2, 0xcb, 0x4c, 0x86, 0x8d, 0x9c, 0x60, 0xf9, 0xc6, 0x64, 0x5c, 0xb8, 0x3f,
	0x5d, 0x4f, 0xf9, 0x84, 0x42, 0x74, 0xdd, 0x04, 0x6a, 0x02, 0x9c, 0xb8, 0x8e, 0x6d, 0x8d, 0x8e,
	0xcc, 0x01, 0x36, 0x56, 0xe7, 0xb5, 0xe8, 0x09, 0xb4, 0x42, 0xcc, 0x81, 0xca, 0x13, 0x0f, 0x73,
	0x96, 0x0e, 0xe6, 0xe5, 0x80, 0xfd, 0x76, 0xd3, 0x58, 0x9b, 0xb3, 0xf8, 0x01, 0x1a, 0x7e, 0xad,
	0x78, 0x18, 0xbd, 0x03, 0xc9, 0x53, 0x7b, 0x80, 0x8d, 0xf5, 0xa2, 0x56, 0xce, 0xed, 0xae, 0x57,
	0x4d, 0xcf, 0xae, 0x72, 0x80, 0x32, 0x73, 0xe0, 0x35, 0xd0, 0x64, 0x5c, 0x58, 0x67, 0x76, 0x28,
	0x9d, 0xc8, 0xb8, 0xf4, 0x37, 0x0d, 0x6e, 0x89, 0x73, 0xa5, 0xcf, 0xb8, 0x8e, 0x3d, 0xb5, 0x29,
	0xfb, 0xd2, 0x97, 0xfa, 0xe7, 0x90, 0xe5, 0x7b, 0x42, 0x3d, 0xd3, 0xc2, 0xc1, 0xd5, 0xbe, 0xcf,
	0x6b, 0x84, 0x4c, 0x41, 0xb5, 0x46, 0x62, 0x40, 0xf4, 0x01, 0x64, 0x78, 0x16, 0x36, 0xa6, 0x46,
	0xa2, 0x98, 0x28, 0xe7, 0x76, 0x8b, 0xd5, 0xa8, 0xfc, 0x2a, 0xb9, 0x76, 0x3d, 0x6c, 0xc9, 0x32,
	0xfa, 0x54, 0x06, 0xa9, 0x65, 0xb4, 0x00, 0x95, 0xfe, 0xa9, 0xc1, 0x1d, 0x25, 0xba, 0x83, 0xa9,
	0xe7, 0x12, 0x8a, 0xbf, 0xbe, 0xb7, 0xfd, 0x10, 0x32, 0x1d, 0x4c, 0x87, 0x0e, 0x9b, 0xbe, 0x6d,
	0xe9, 0xa6, 0xb7, 0x95, 0x4b, 0x83, 0x6b, 0x23, 0xc3, 0x42, 0xd7, 0x26, 0x0a, 0x95, 0xfe, 0xa0,
	0xc1, 0xed, 0x85, 0x78, 0xb4, 0x07, 0x39, 0x71, 0x05, 0x06, 0x98, 0xb0, 0x76, 0x53, 0xbc, 0x72,
	0xaa, 0xa1, 0x4f, 0xc6, 0x85, 0x55, 0x3a, 0x85, 0x5f, 0xd8, 0xbd, 0x4e, 0x68, 0x84, 0xde, 0x85,
	0xe4, 0x53, 0xb7, 0x4f, 0x8d, 0x65, 0x91, 0xe6, 0xbd, 0xf8, 0x34, 0x65, 0xb9, 0xf1, 0xe7, 0xa9,
	0xe5, 0x16, 0x1e, 0x97, 0x7e, 0x9f, 0x0d, 0x95, 0x1b, 0x3f, 0x42, 0x74, 0x08, 0xd9, 0xae, 0x10,
	0xdb, 0xf6, 0x09, 0x35, 0xb4, 0x62, 0xa2, 0x9c, 0x6d, 0x7c, 0xe7, 0xf2, 0x22, 0xbf, 0xd2, 0x3e,
	0xa9, 0xf7, 0x7a, 0x7e, 0xf9, 0x81, 0xb8, 0xeb, 0x52, 0x8d, 0x6d, 0x8f, 0x86, 0xee, 0x7a, 0x0c,
	0x8a, 0x9e, 0x40, 0x86, 0x4b, 0x34, 0x27, 0x5b, 0x16, 0x64, 0xa5, 0x08, 0x19, 0xe2, 0x8a, 0x1c,
	0xa1, 0x8a, 0xc1, 0xd0, 0x87, 0x90, 0x93, 0x79, 0x71, 0xb5, 0x97, 0x67, 0xb4, 0xd6, 0xd8, 0xb9,
	0xbc, 0xc8, 0xa3, 0x36, 0x61, 0x1d, 0x93, 0xf4, 0x71, 0x79, 0xe7, 0x61, 0xf1, 0xd1, 0xfe, 0xfe,
	0xde, 0x3e, 0xa7, 0xbd, 0xa7, 0x38, 0x86, 0x4a, 0x7d, 0x0d, 0x8e, 0xde, 0x83, 0xec, 0xd4, 0x4a,
	0xa8, 0x91, 0x14, 0xe4, 0xd5, 0x6b, 0xc9, 0x37, 0x44, 0x7e, 0x51, 0xea, 0x58, 0x94, 0x17, 0xe6,
	0xd4, 0x55, 0xa8, 0x91, 0x12, 0x5b, 0x20, 0x0a, 0x73, 0x6a, 0x21, 0x2a, 0x43, 0x1c, 0x88, 0x3a,
	0x90, 0x09, 0x9c, 0xc3, 0x48, 0x8b, 0xf0, 0xea, 0x4d, 0xce, 0x72, 0x5b, 0xfa, 0x48, 0xa8, 0x1a,
	0x17, 0x20, 0xf4, 0x11, 0xc0, 0xdc, 0x39, 0x8c, 0x8c, 0xa0, 0xfd, 0xd1, 0x7f, 0x30, 0x97, 0x8d,
	0x99, 0x8f, 0x84, 0x5f, 0x3a, 0x06, 0x45, 0x3f, 0x85, 0x8c, 0xb4, 0x17, 0x6a, 0xac, 0x08, 0x72,
	0xe1, 0xa4, 0x81, 0x99, 0x84, 0x4e, 0x7a, 0x11, 0x43, 0x4f, 0x20, 0x37, 0x97, 0x74, 0x6a, 0x64,
	0x05, 0xc1, 0x26, 0x3f, 0x53, 0x45, 0xbc, 0x43, 0x67, 0x1a, 0x8f, 0x73, 0xa2, 0xb9, 0xaa, 0x53,
	0x03, 0xe6, 0x44, 0x8a, 0x7e, 0x87, 0x88, 0xe2, 0x71, 0xf4, 0x0c, 0xb2, 0x5d, 0x66, 0xfa, 0x4c,
	0xa8, 0x7b, 0x2e, 0x56, 0xdd, 0xa5, 0x07, 0xf2, 0x45, 0x95, 0x88, 0xc6, 0xc7, 0xa2, 0xe8, 0x97,
	0x90, 0x69, 0x91, 0x9e, 0x20, 0x5c, 0x8d, 0x25, 0x14, 0x3b, 0x86, 0x49, 0x2f, 0x4a, 0x17, 0x83,
	0x21, 0x0b, 0xe0, 0xc4, 0xec, 0x07, 0x9f, 0x35, 0xc2, 0xbe, 0x72, 0xbb, 0x85, 0x05, 0x5d, 0x98,
	0x2f, 0x11, 0x5a, 0x2d, 0x32, 0xf6, 0x66, 0x98, 0x9a, 0x71, 0x1c, 0x8a, 0x30, 0x17, 0x06, 0x9f,
	0x1d, 0xfb, 0x3d, 0xec, 0x0b, 0x8b, 0xcb, 0x36, 0xde, 0xe6, 0x37, 0x64, 0x5a, 0x32, 0xb3, 0xc9,
	0x07, 0x7f, 0xbe, 0xc8, 0x43, 0x0f, 0x53, 0x0b, 0x93, 0x9e, 0x4d, 0xfa, 0x52, 0x30, 0x7c, 0x56,
	0x71, 0xf9, 0x64, 0x58, 0x30, 0x16, 0xd1, 0xd2, 0x3f, 0x34, 0xd0, 0x0f, 0x31, 0xf3, 0x6d, 0xeb,
	0xff, 0xc1, 0x03, 0x7f, 0x13, 0xf5, 0xc0, 0x6f, 0x2d, 0x6c, 0xab, 0x9a, 0xec, 0x6b, 0x9a, 0xe0,
	0xbf, 0x34, 0xd8, 0x50, 0xc3, 0xbf, 0x7e, 0x17, 0xfc, 0x28, 0xea, 0x82, 0xdf, 0xbe, 0xf1, 0x7d,
	0x5f, 0xdb, 0x06, 0xff, 0xa4, 0x01, 0x5a, 0x24, 0xf8, 0x72, 0x3e, 0xf8, 0x2b, 0x48, 0x77, 0xe5,
	0xd1, 0x48, 0x27, 0xfc, 0xe6, 0x42, 0xaa, 0x92, 0x5d, 0x2e, 0x0a, 0xfa, 0x9a, 0xe8, 0xa9, 0x2c,
	0x20, 0xa5, 0xbf, 0x64, 0xc2, 0x05, 0x28, 0x5c, 0xf1, 0x11, 0x68, 0xa7, 0x22, 0xad, 0xdc, 0xee,
	0x9a, 0xbc, 0xa8, 0x23, 0x0f, 0x1f, 0x62, 0x66, 0x36, 0xee, 0xbc, 0x1a, 0x17, 0x96, 0xbe, 0x18,
	0x17, 0xb4, 0xc9, 0xb8, 0x90, 0x79, 0x68, 0x13, 0xc7, 0x26, 0xb8, 0x33, 0xfd, 0x81, 0xda, 0x90,
	0x14, 0x1f, 0xa6, 0xf2, 0x2c, 0x7e, 0xc0, 0x95, 0xbb, 0xc5, 0x9f, 0x72, 0xec, 0x97, 0x3b, 0xb8,
	0xdf, 0xfa, 0x9d, 0x57, 0xe6, 0xa7, 0xf0, 0x80, 0xeb, 0xeb, 0x7a, 0xe4, 0x53, 0x35, 0x32, 0x46,
	0x47, 0xb0, 0xd2, 0x0d, 0x1a, 0x3f, 0xd1, 0x73, 0xe5, 0x76, 0xf5, 0xaa, 0x6c, 0x08, 0xab, 0x53,
	0x5c, 0x8a, 0xc6, 0xb4, 0x3d, 0x54, 0x45, 0x63, 0x11, 0xe3, 0x0d, 0xcb, 0x81, 0x08, 0x17, 0x76,
	0x17, 0x34, 0x2c, 0xd7, 0x25, 0xa7, 0xcb, 0x27, 0xa9, 0x1b, 0x17, 0x45, 0xd0, 0xfb, 0xb0, 0x72,
	0x30, 0x24, 0xb2, 0x5f, 0x49, 0xcd, 0xfa, 0x95, 0xfc, 0x54, 0x1f, 0x4e, 0x69, 0xef, 0x6c, 0x3a,
	0xcf, 0x77, 0x4f, 0x98, 0xff, 0x79, 0x00, 0xa8, 0xb9, 0x2e, 0x62, 0x61, 0x01, 0x4e, 0x7f, 0xd5,
	0x02, 0x9c, 0xf9, 0x0a, 0x04, 0x38, 0xf7, 0xc4, 0x77, 0x87, 0xde, 0xd9, 0x48, 0x10, 0xca, 0x6e,
	0x6d, 0xff, 0xf2, 0x22, 0x7f, 0x6f, 0xba, 0xa1, 0xcd, 0xa1, 0x2f, 0x04, 0xb5, 0xbc, 0xf3, 0x70,
	0x47, 0xec, 0xe8, 0xfd, 0x3e, 0x0f, 0xa8, 0x9c, 0x8d, 0xa2, 0xfc, 0xd7, 0x4d, 0x20, 0x0c, 0xab,
	0xc1, 0x43, 0xc4, 0xb9, 0x05, 0x9d, 0xdb, 0xfe, 0x4d, 0xc7, 0x66, 0xcc, 0xb8, 0xc4, 0x69, 0x29,
	0x4f, 0xb9, 0x76, 0x26, 0x62, 0x26, 0xf0, 0xbf, 0x31, 0x93, 0xf7, 0x54, 0x33, 0x91, 0xfd, 0x5f,
	0x35, 0xde, 0x4c, 0x5e, 0xd3, 0x3e, 0xfe, 0xa8, 0xc1, 0x7a, 0x38, 0x37, 0xf4, 0x2e, 0xa4, 0x8f,
	0xcf, 0xcf, 0x29, 0x66, 0x81, 0xae, 0x7c, 0xef, 0xf2, 0x22, 0x9f, 0x6d, 0x13, 0x76, 0x68, 0x93,
	0xf2, 0x0e, 0x37, 0x2b, 0x6d, 0x87, 0x57, 0xb8, 0x2b, 0xd6, 0xa8, 0x15, 0x1e, 0x45, 0xd0, 0x3b,
	0x90, 0x7a, 0xec, 0x0e, 0x09, 0x13, 0xd7, 0x39, 0xd5, 0x28, 0x2a, 0x44, 0x3f, 0xe4, 0x89, 0xde,
	0xb2, 0xf8, 0xac, 0x42, 0x11, 0x05, 0x4a, 0xaf, 0x96, 0x61, 0x55, 0x55, 0x25, 0xb4, 0x13, 0x08,
	0x84, 0xd4, 0x79, 0xf4, 0x5f, 0xe8, 0xc0, 0xfb, 0x90, 0x3c, 0x35, 0x67, 0x9f, 0xff, 0xdf, 0xbf,
	0x51, 0xf4, 0xaa, 0x7c, 0x65, 0x8b, 0x30, 0x7f, 0x14, 0xb4, 0x9f, 0x66, 0xb8, 0x1f, 0x08, 0x8f,
	0xd1, 0x8f, 0x21, 0xf3, 0xd8, 0x75, 0x86, 0x03, 0x22, 0xd5, 0x3f, 0xf8, 0xb7, 0x80, 0x25, 0x21,
	0x55, 0xd8, 0x17, 0x20, 0xf4, 0x26, 0xa4, 0x9f, 0x9b, 0xce, 0x10, 0x4b, 0x35, 0xc9, 0xed, 0xde,
	0x11, 0xb7, 0xa9, 0x4d, 0x18, 0xf6, 0xcf, 0x4d, 0x0b, 0x77, 0x1d, 0xdb, 0xc2, 0x0d, 0x98, 0x8c,
	0x0b, 0xe9, 0xcf, 0xc4, 0xb2, 0x4e, 0xf0, 0x77, 0xf3, 0x4d, 0xc8, 0xce, 0x92, 0x44, 0x3a, 0x24,
	0x3e, 0xc1, 0x23, 0xb9, 0x19, 0x1d, 0xfe, 0x13, 0x6d, 0x40, 0x4a, 0x2c, 0x94, 0x0a, 0xda, 0x91,
	0x83, 0x9f, 0x2c, 0xbf, 0xa5, 0x6d, 0x63, 0xd0, 0xa3, 0x92, 0x82, 0x56, 0x20, 0x79, 0x74, 0x7c,
	0xd4, 0xd2, 0x97, 0xf8, 0xaf, 0xc3, 0x56, 0xfd, 0x48, 0xd7, 0x50, 0x06, 0x12, 0x87, 0xf5, 0x5f,
	0xeb, 0xcb, 0x08, 0x20, 0x7d, 0xd8, 0x6a, 0xb6, 0xeb, 0x47, 0x7a, 0x02, 0xad, 0x03, 0x34, 0x5b,
	0x9d, 0xf6, 0xf3, 0xfa, 0x69, 0xfb, 0x79, 0x4b, 0x4f, 0x8a, 0x71, 0xfb, 0xe0, 0xa0, 0xd5, 0x69,
	0x1d, 0x3d, 0x6e, 0xe9, 0x29, 0x1e, 0xfe, 0xb4, 0xde, 0x3d, 0xd5, 0xd3, 0xdb, 0xdb, 0x4a, 0xa5,
	0xa2, 0x35, 0xc8, 0xd6, 0xa7, 0xdf, 0x35, 0xfa, 0x92, 0x88, 0x9a, 0x7d, 0xe7, 0xe8, 0xda, 0x76,
	0x03, 0x56, 0xd5, 0xef, 0x71, 0x94, 0x85, 0x94, 0xe9, 0x38, 0xee, 0x4b, 0x99, 0x4f, 0x0f, 0x93,
	0x91, 0xae, 0xf1, 0x34, 0x7c, 0xfc, 0x5b, 0x6c, 0x31, 0x7d, 0x19, 0xdd, 0x86, 0x35, 0x7b, 0xe0,
	0x39, 0xb6, 0x65, 0xb3, 0x17, 0x62, 0x3a, 0xb1, 0xfd, 0x2c, 0x68, 0xc9, 0xe6, 0x1f, 0xdf, 0xe8,
	0x0d, 0xc8, 0x9e, 0xfb, 0xee, 0xe0, 0xc5, 0xc7, 0x2e, 0x65, 0xfa, 0xd2, 0xe6, 0xda, 0xd5, 0xe7,
	0x79, 0x01, 0x54, 0x38, 0x80, 0x8a, 0x90, 0x13, 0xb3, 0x43, 0xcf, 0xb1, 0xc9, 0x27, 0xba, 0xb6,
	0x79, 0xeb, 0xea, 0xf3, 0xbc, 0x80, 0x2a, 0x12, 0x6a, 0xe8, 0xaf, 0xae, 0xb6, 0xb4, 0x2f, 0xae,
	0xb6, 0xb4, 0xbf, 0x5e, 0x6d, 0x69, 0x7f, 0xbf, 0xda, 0x5a, 0x3a, 0xd1, 0xce, 0xd2, 0xa2, 0xd5,
	0xd8, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0xff, 0x00, 0x74, 0x52, 0x15, 0x00, 0x00,
}
