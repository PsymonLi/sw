// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	telemetry_query "github.com/pensando/sw/api/generated/telemetry_query"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewTelemetryV1 sets up a new client for TelemetryV1
func NewTelemetryV1(conn *grpc.ClientConn, logger log.Logger) telemetry_query.ServiceTelemetryV1Client {

	var lMetricsEndpoint endpoint.Endpoint
	{
		lMetricsEndpoint = grpctransport.NewClient(
			conn,
			"telemetry_query.TelemetryV1",
			"Metrics",
			telemetry_query.EncodeGrpcReqMetricsQueryList,
			telemetry_query.DecodeGrpcRespMetricsQueryResponse,
			&telemetry_query.MetricsQueryResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lMetricsEndpoint = trace.ClientEndPoint("TelemetryV1:Metrics")(lMetricsEndpoint)
	}
	return telemetry_query.EndpointsTelemetryV1Client{
		Client: telemetry_query.NewTelemetryV1Client(conn),

		MetricsEndpoint: lMetricsEndpoint,
	}
}

// NewTelemetryV1Backend creates an instrumented client with middleware
func NewTelemetryV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry_query.ServiceTelemetryV1Client {
	cl := NewTelemetryV1(conn, logger)
	cl = telemetry_query.LoggingTelemetryV1MiddlewareClient(logger)(cl)
	return cl
}
