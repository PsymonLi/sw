// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry_queryApiServer is a auto generated package.
Input file: telemetry_query.proto
*/
package telemetry_queryApiServer

import (
	"context"
	"fmt"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type stelemetry_queryTelemetry_queryBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme
}

func (s *stelemetry_queryTelemetry_queryBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for stelemetry_queryTelemetry_queryBackend")
	s.Messages = map[string]apiserver.Message{

		"telemetry_query.Fwlog":                apisrvpkg.NewMessage("telemetry_query.Fwlog"),
		"telemetry_query.FwlogsQueryList":      apisrvpkg.NewMessage("telemetry_query.FwlogsQueryList"),
		"telemetry_query.FwlogsQueryResponse":  apisrvpkg.NewMessage("telemetry_query.FwlogsQueryResponse"),
		"telemetry_query.FwlogsQueryResult":    apisrvpkg.NewMessage("telemetry_query.FwlogsQueryResult"),
		"telemetry_query.FwlogsQuerySpec":      apisrvpkg.NewMessage("telemetry_query.FwlogsQuerySpec"),
		"telemetry_query.MetricsQueryList":     apisrvpkg.NewMessage("telemetry_query.MetricsQueryList"),
		"telemetry_query.MetricsQueryResponse": apisrvpkg.NewMessage("telemetry_query.MetricsQueryResponse"),
		"telemetry_query.MetricsQueryResult":   apisrvpkg.NewMessage("telemetry_query.MetricsQueryResult"),
		"telemetry_query.MetricsQuerySpec":     apisrvpkg.NewMessage("telemetry_query.MetricsQuerySpec"),
		"telemetry_query.PaginationSpec":       apisrvpkg.NewMessage("telemetry_query.PaginationSpec"),
		"telemetry_query.ResultSeries":         apisrvpkg.NewMessage("telemetry_query.ResultSeries"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("telemetry_query", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *stelemetry_queryTelemetry_queryBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

}

func (s *stelemetry_queryTelemetry_queryBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

}

func (s *stelemetry_queryTelemetry_queryBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *stelemetry_queryTelemetry_queryBackend) Reset() {
	cleanupRegistration()
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := stelemetry_queryTelemetry_queryBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	apisrv.Register("telemetry_query.telemetry_query.proto", &svc)
}
