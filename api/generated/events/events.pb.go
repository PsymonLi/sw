// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

/*
	Package events is a generated protocol buffer package.

	Service name

	It is generated from these files:
		events.proto

	It has these top-level messages:
		AutoMsgEventPolicyWatchHelper
		Event
		EventAttributes
		EventPolicy
		EventPolicyList
		EventPolicySpec
		EventPolicyStatus
		EventSource
*/
package events

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// -------------------------- Event -----------------------------
// Severity Level of an event
type SeverityLevel int32

const (
	SeverityLevel_INFO     SeverityLevel = 0
	SeverityLevel_WARNING  SeverityLevel = 1
	SeverityLevel_CRITICAL SeverityLevel = 2
)

var SeverityLevel_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "CRITICAL",
}
var SeverityLevel_value = map[string]int32{
	"INFO":     0,
	"WARNING":  1,
	"CRITICAL": 2,
}

func (x SeverityLevel) String() string {
	return proto.EnumName(SeverityLevel_name, int32(x))
}
func (SeverityLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

// -------------------------- Event Policy -----------------------------
// Event Policy represents the policy definition for Events.
// Event Client module will be consumer of this policy.
type AutoMsgEventPolicyWatchHelper struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *EventPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgEventPolicyWatchHelper) Reset()         { *m = AutoMsgEventPolicyWatchHelper{} }
func (m *AutoMsgEventPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgEventPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorEvents, []int{0}
}

func (m *AutoMsgEventPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEventPolicyWatchHelper) GetObject() *EventPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// EventPolicySpec is the specification of an Event Policy,
// It consists of Retention and Export policies.
type Event struct {
	// Name of the export policies that defines the location, frequency and format of data to an external collector
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:", inline"`
	// MaxRetentionTime defines for how long to keep the data before it is deleted
	// The value is specified as a string format e.g. 30d (30 days)
	api.ObjectMeta  `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta, omitempty"`
	EventAttributes `protobuf:"bytes,3,opt,name=Attributes,embedded=Attributes" json:", inline"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

// EventPolicyStatus
type EventAttributes struct {
	Severity       string         `protobuf:"bytes,1,opt,name=Severity,proto3" json:"severity, omitempty"`
	Type           string         `protobuf:"bytes,2,opt,name=Type,proto3" json:"type, omitempty"`
	Message        string         `protobuf:"bytes,3,opt,name=Message,proto3" json:"message, omitempty"`
	ObjectRef      *api.ObjectRef `protobuf:"bytes,4,opt,name=ObjectRef" json:"object-ref, omitempty"`
	Source         *EventSource   `protobuf:"bytes,5,opt,name=Source" json:"source, omitempty"`
	Count          uint32         `protobuf:"varint,6,opt,name=Count,proto3" json:"count, omitempty"`
	FirstTimestamp string         `protobuf:"bytes,7,opt,name=FirstTimestamp,proto3" json:"first-timestamp, omitempty"`
	LastTimestamp  string         `protobuf:"bytes,8,opt,name=LastTimestamp,proto3" json:"last-timestamp, omitempty"`
}

func (m *EventAttributes) Reset()                    { *m = EventAttributes{} }
func (m *EventAttributes) String() string            { return proto.CompactTextString(m) }
func (*EventAttributes) ProtoMessage()               {}
func (*EventAttributes) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{2} }

func (m *EventAttributes) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *EventAttributes) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventAttributes) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventAttributes) GetObjectRef() *api.ObjectRef {
	if m != nil {
		return m.ObjectRef
	}
	return nil
}

func (m *EventAttributes) GetSource() *EventSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EventAttributes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EventAttributes) GetFirstTimestamp() string {
	if m != nil {
		return m.FirstTimestamp
	}
	return ""
}

func (m *EventAttributes) GetLastTimestamp() string {
	if m != nil {
		return m.LastTimestamp
	}
	return ""
}

// Event is a system notification of a fault, condition or configuration
// that should be user visible. These objects are created internally by
// Event client and persisted in EventDB.
type EventPolicy struct {
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// ObjectMeta.Name will be the UUID for an event object.
	// TODO: Should there be a predefined list of labels or keep it free form ?
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Attributes contains the attributes of an event.
	Spec   EventPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status EventPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *EventPolicy) Reset()                    { *m = EventPolicy{} }
func (m *EventPolicy) String() string            { return proto.CompactTextString(m) }
func (*EventPolicy) ProtoMessage()               {}
func (*EventPolicy) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{3} }

func (m *EventPolicy) GetSpec() EventPolicySpec {
	if m != nil {
		return m.Spec
	}
	return EventPolicySpec{}
}

func (m *EventPolicy) GetStatus() EventPolicyStatus {
	if m != nil {
		return m.Status
	}
	return EventPolicyStatus{}
}

// EventAttributes contains all the event attributes
type EventPolicyList struct {
	// Severity represents the criticality level of an event
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	// Type represents the type of an event. e.g. NICAdmittedEvent, NodeJoined
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Message represents the human readable description of an event
	Items []*EventPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *EventPolicyList) Reset()                    { *m = EventPolicyList{} }
func (m *EventPolicyList) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyList) ProtoMessage()               {}
func (*EventPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{4} }

func (m *EventPolicyList) GetItems() []*EventPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// EventSource has info about the component and
// host/node that generated the event
type EventPolicySpec struct {
	// Component from which the event is generated.
	ExportPolicies []string `protobuf:"bytes,1,rep,name=ExportPolicies" json:"export-policies,omitempty"`
	// Name of the venice or workload node which is generating the event.
	MaxRetentionTime string `protobuf:"bytes,2,opt,name=MaxRetentionTime,proto3" json:"max-retention-time,omitempty"`
}

func (m *EventPolicySpec) Reset()                    { *m = EventPolicySpec{} }
func (m *EventPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*EventPolicySpec) ProtoMessage()               {}
func (*EventPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{5} }

func (m *EventPolicySpec) GetExportPolicies() []string {
	if m != nil {
		return m.ExportPolicies
	}
	return nil
}

func (m *EventPolicySpec) GetMaxRetentionTime() string {
	if m != nil {
		return m.MaxRetentionTime
	}
	return ""
}

type EventPolicyStatus struct {
}

func (m *EventPolicyStatus) Reset()                    { *m = EventPolicyStatus{} }
func (m *EventPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyStatus) ProtoMessage()               {}
func (*EventPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{6} }

type EventSource struct {
	Component string `protobuf:"bytes,1,opt,name=Component,proto3" json:"component,omitempty"`
	NodeName  string `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"node-name,omitempty"`
}

func (m *EventSource) Reset()                    { *m = EventSource{} }
func (m *EventSource) String() string            { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()               {}
func (*EventSource) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{7} }

func (m *EventSource) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *EventSource) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func init() {
	proto.RegisterType((*AutoMsgEventPolicyWatchHelper)(nil), "events.AutoMsgEventPolicyWatchHelper")
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterType((*EventAttributes)(nil), "events.EventAttributes")
	proto.RegisterType((*EventPolicy)(nil), "events.EventPolicy")
	proto.RegisterType((*EventPolicyList)(nil), "events.EventPolicyList")
	proto.RegisterType((*EventPolicySpec)(nil), "events.EventPolicySpec")
	proto.RegisterType((*EventPolicyStatus)(nil), "events.EventPolicyStatus")
	proto.RegisterType((*EventSource)(nil), "events.EventSource")
	proto.RegisterEnum("events.SeverityLevel", SeverityLevel_name, SeverityLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventPolicyV1 service

type EventPolicyV1Client interface {
	AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error)
	AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EventPolicyV1_AutoWatchEventPolicyClient, error)
}

type eventPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewEventPolicyV1Client(cc *grpc.ClientConn) EventPolicyV1Client {
	return &eventPolicyV1Client{cc}
}

func (c *eventPolicyV1Client) AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/events.EventPolicyV1/AutoAddEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPolicyV1Client) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/events.EventPolicyV1/AutoDeleteEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPolicyV1Client) AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/events.EventPolicyV1/AutoGetEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPolicyV1Client) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error) {
	out := new(EventPolicyList)
	err := grpc.Invoke(ctx, "/events.EventPolicyV1/AutoListEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPolicyV1Client) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/events.EventPolicyV1/AutoUpdateEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPolicyV1Client) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EventPolicyV1_AutoWatchEventPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventPolicyV1_serviceDesc.Streams[0], c.cc, "/events.EventPolicyV1/AutoWatchEventPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventPolicyV1AutoWatchEventPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventPolicyV1_AutoWatchEventPolicyClient interface {
	Recv() (*AutoMsgEventPolicyWatchHelper, error)
	grpc.ClientStream
}

type eventPolicyV1AutoWatchEventPolicyClient struct {
	grpc.ClientStream
}

func (x *eventPolicyV1AutoWatchEventPolicyClient) Recv() (*AutoMsgEventPolicyWatchHelper, error) {
	m := new(AutoMsgEventPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventPolicyV1 service

type EventPolicyV1Server interface {
	AutoAddEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	AutoDeleteEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	AutoGetEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	AutoListEventPolicy(context.Context, *api.ListWatchOptions) (*EventPolicyList, error)
	AutoUpdateEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	AutoWatchEventPolicy(*api.ListWatchOptions, EventPolicyV1_AutoWatchEventPolicyServer) error
}

func RegisterEventPolicyV1Server(s *grpc.Server, srv EventPolicyV1Server) {
	s.RegisterService(&_EventPolicyV1_serviceDesc, srv)
}

func _EventPolicyV1_AutoAddEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPolicyV1Server).AutoAddEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventPolicyV1/AutoAddEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPolicyV1Server).AutoAddEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPolicyV1_AutoDeleteEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPolicyV1Server).AutoDeleteEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventPolicyV1/AutoDeleteEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPolicyV1Server).AutoDeleteEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPolicyV1_AutoGetEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPolicyV1Server).AutoGetEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventPolicyV1/AutoGetEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPolicyV1Server).AutoGetEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPolicyV1_AutoListEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPolicyV1Server).AutoListEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventPolicyV1/AutoListEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPolicyV1Server).AutoListEventPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPolicyV1_AutoUpdateEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPolicyV1Server).AutoUpdateEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.EventPolicyV1/AutoUpdateEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPolicyV1Server).AutoUpdateEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPolicyV1_AutoWatchEventPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventPolicyV1Server).AutoWatchEventPolicy(m, &eventPolicyV1AutoWatchEventPolicyServer{stream})
}

type EventPolicyV1_AutoWatchEventPolicyServer interface {
	Send(*AutoMsgEventPolicyWatchHelper) error
	grpc.ServerStream
}

type eventPolicyV1AutoWatchEventPolicyServer struct {
	grpc.ServerStream
}

func (x *eventPolicyV1AutoWatchEventPolicyServer) Send(m *AutoMsgEventPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _EventPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventPolicyV1",
	HandlerType: (*EventPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddEventPolicy",
			Handler:    _EventPolicyV1_AutoAddEventPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteEventPolicy",
			Handler:    _EventPolicyV1_AutoDeleteEventPolicy_Handler,
		},
		{
			MethodName: "AutoGetEventPolicy",
			Handler:    _EventPolicyV1_AutoGetEventPolicy_Handler,
		},
		{
			MethodName: "AutoListEventPolicy",
			Handler:    _EventPolicyV1_AutoListEventPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateEventPolicy",
			Handler:    _EventPolicyV1_AutoUpdateEventPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchEventPolicy",
			Handler:       _EventPolicyV1_AutoWatchEventPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

// Client API for EventV1 service

type EventV1Client interface {
}

type eventV1Client struct {
	cc *grpc.ClientConn
}

func NewEventV1Client(cc *grpc.ClientConn) EventV1Client {
	return &eventV1Client{cc}
}

// Server API for EventV1 service

type EventV1Server interface {
}

func RegisterEventV1Server(s *grpc.Server, srv EventV1Server) {
	s.RegisterService(&_EventV1_serviceDesc, srv)
}

var _EventV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventV1",
	HandlerType: (*EventV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "events.proto",
}

func (m *AutoMsgEventPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.EventAttributes.Size()))
	n4, err := m.EventAttributes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *EventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Severity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Severity)))
		i += copy(dAtA[i:], m.Severity)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.ObjectRef != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ObjectRef.Size()))
		n5, err := m.ObjectRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Source != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Source.Size()))
		n6, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Count))
	}
	if len(m.FirstTimestamp) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FirstTimestamp)))
		i += copy(dAtA[i:], m.FirstTimestamp)
	}
	if len(m.LastTimestamp) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LastTimestamp)))
		i += copy(dAtA[i:], m.LastTimestamp)
	}
	return i, nil
}

func (m *EventPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *EventPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ListMeta.Size()))
	n12, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MaxRetentionTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MaxRetentionTime)))
		i += copy(dAtA[i:], m.MaxRetentionTime)
	}
	return i, nil
}

func (m *EventPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EventSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Component) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Component)))
		i += copy(dAtA[i:], m.Component)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgEventPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.EventAttributes.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventAttributes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ObjectRef != nil {
		l = m.ObjectRef.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovEvents(uint64(m.Count))
	}
	l = len(m.FirstTimestamp)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LastTimestamp)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.MaxRetentionTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EventSource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Component)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgEventPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &EventPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EventAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectRef == nil {
				m.ObjectRef = &api.ObjectRef{}
			}
			if err := m.ObjectRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &EventSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EventPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportPolicies = append(m.ExportPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 1189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0x67, 0x8d, 0x31, 0x66, 0x8c, 0xc1, 0x19, 0x87, 0xc4, 0xeb, 0x26, 0xb6, 0xb5, 0x15, 0x09,
	0x41, 0xd8, 0xc6, 0xa4, 0x55, 0x55, 0xf7, 0x84, 0x5d, 0xa0, 0xa8, 0x18, 0x47, 0xb6, 0x9b, 0x9c,
	0x97, 0xf5, 0xc3, 0x6c, 0x65, 0xef, 0xac, 0x76, 0x67, 0x01, 0xab, 0xa2, 0x52, 0x0b, 0xe4, 0x03,
	0xb4, 0x3d, 0xf5, 0xd8, 0x43, 0x0f, 0xa8, 0x27, 0x4e, 0xfd, 0x08, 0x39, 0x46, 0xe9, 0x2d, 0x07,
	0x2b, 0x42, 0x3d, 0xf9, 0x53, 0x54, 0x33, 0xbb, 0x6b, 0xc6, 0xc4, 0x4e, 0x2a, 0x6e, 0x3b, 0x6f,
	0x7e, 0xef, 0xf7, 0xfe, 0xcc, 0xef, 0xcd, 0x0e, 0x9a, 0x85, 0x43, 0x30, 0xa8, 0x9d, 0x33, 0x2d,
	0x42, 0x09, 0x0e, 0xb9, 0xab, 0xe4, 0x83, 0x16, 0x21, 0xad, 0x36, 0xe4, 0x55, 0x53, 0xcf, 0xab,
	0x86, 0x41, 0xa8, 0x4a, 0x75, 0x62, 0x78, 0xa8, 0xe4, 0x46, 0x4b, 0xa7, 0x07, 0xce, 0x5e, 0x4e,
	0x23, 0x9d, 0xbc, 0x09, 0x86, 0xad, 0x1a, 0x4d, 0x92, 0xb7, 0x8f, 0xf2, 0x87, 0x60, 0xe8, 0x1a,
	0xe4, 0x1d, 0xaa, 0xb7, 0x6d, 0xe6, 0xda, 0x02, 0x43, 0xf4, 0xce, 0xeb, 0x86, 0xd6, 0x76, 0x9a,
	0xe0, 0xd3, 0x64, 0x05, 0x9a, 0x16, 0x69, 0x91, 0x3c, 0x37, 0xef, 0x39, 0xfb, 0x7c, 0xc5, 0x17,
	0xfc, 0xcb, 0x83, 0x2f, 0x8e, 0x89, 0xca, 0x72, 0xec, 0x00, 0x55, 0x5d, 0x98, 0xa2, 0xa1, 0x87,
	0xeb, 0x0e, 0x25, 0x15, 0xbb, 0xb5, 0xc1, 0x6a, 0x79, 0x46, 0xda, 0xba, 0xd6, 0x7d, 0xa1, 0x52,
	0xed, 0xe0, 0x1b, 0x68, 0x9b, 0x60, 0xe1, 0x59, 0x14, 0x6c, 0x74, 0x4d, 0x48, 0x48, 0x19, 0x69,
	0x69, 0x06, 0x7f, 0x8a, 0x42, 0xd5, 0xbd, 0xef, 0x41, 0xa3, 0x89, 0x40, 0x46, 0x5a, 0x8a, 0xac,
	0xc5, 0x73, 0x5e, 0x43, 0x04, 0xef, 0xe2, 0xfc, 0xdb, 0x73, 0x39, 0x72, 0xc4, 0x38, 0x0e, 0x38,
	0x87, 0xf2, 0x4e, 0x42, 0x53, 0x1c, 0x80, 0x0b, 0x48, 0x6a, 0x70, 0xaa, 0xc8, 0x5a, 0x34, 0xa7,
	0x9a, 0x7a, 0x8e, 0x71, 0x57, 0x80, 0xaa, 0xa5, 0xbb, 0xaf, 0x7a, 0xe9, 0x89, 0xd7, 0xbd, 0xb4,
	0xd4, 0xef, 0xa5, 0xc3, 0x2b, 0x19, 0xdd, 0x68, 0xeb, 0x06, 0xd4, 0xa4, 0x06, 0x2e, 0x22, 0xa9,
	0xea, 0x45, 0x9b, 0xe7, 0x2e, 0x6e, 0x02, 0xdc, 0xe9, 0x13, 0xc1, 0x69, 0x9e, 0x55, 0xb5, 0x92,
	0x21, 0x1d, 0x9d, 0x42, 0xc7, 0xa4, 0xdd, 0x9a, 0x54, 0xc5, 0x15, 0x84, 0xd6, 0x29, 0xb5, 0xf4,
	0x3d, 0x87, 0x82, 0x9d, 0x98, 0xe4, 0x24, 0xf7, 0x87, 0x52, 0xbe, 0xde, 0x1e, 0x93, 0x81, 0x40,
	0x50, 0x94, 0xdf, 0x9c, 0xcb, 0x0b, 0x28, 0x92, 0xff, 0xa1, 0x9a, 0x6b, 0x80, 0xa1, 0x1a, 0xf4,
	0xc4, 0x97, 0x80, 0xf2, 0x53, 0x10, 0xcd, 0xdf, 0x20, 0xc4, 0x15, 0x14, 0xae, 0xc3, 0x21, 0x58,
	0x3a, 0xed, 0xba, 0xed, 0x2b, 0x15, 0x2e, 0x5e, 0xca, 0xf7, 0xea, 0xd4, 0xda, 0x30, 0x9c, 0xce,
	0x92, 0xbf, 0xb7, 0x03, 0x87, 0xd0, 0x7e, 0xd2, 0xef, 0xa5, 0xe3, 0xb6, 0x67, 0x11, 0xab, 0x18,
	0x50, 0xe0, 0xc7, 0xde, 0x49, 0x04, 0x38, 0x55, 0x9c, 0x95, 0x4c, 0xbb, 0x26, 0x88, 0x60, 0x0e,
	0xc0, 0xab, 0x68, 0xba, 0x02, 0xb6, 0xad, 0xb6, 0x80, 0x97, 0x3c, 0x53, 0xba, 0xd7, 0xef, 0xa5,
	0x71, 0xc7, 0x35, 0x89, 0x70, 0x1f, 0x86, 0xb7, 0xd0, 0x8c, 0xdb, 0xd5, 0x1a, 0xec, 0x27, 0x82,
	0xbc, 0x4d, 0x73, 0x42, 0xaf, 0x6b, 0xb0, 0x5f, 0x92, 0xfb, 0xbd, 0xf4, 0x02, 0xe1, 0xcb, 0xac,
	0x05, 0xfb, 0x22, 0xcd, 0xb5, 0x2f, 0x2e, 0xa1, 0x50, 0x9d, 0x38, 0x96, 0x06, 0x89, 0xa9, 0x11,
	0xfa, 0x70, 0xb7, 0x4a, 0x0b, 0xfd, 0x5e, 0xfa, 0x8e, 0xcd, 0xbf, 0x45, 0x1a, 0xcf, 0x13, 0x2f,
	0xa3, 0xa9, 0x32, 0x71, 0x0c, 0x9a, 0x08, 0x65, 0xa4, 0xa5, 0x68, 0xe9, 0x6e, 0xbf, 0x97, 0x8e,
	0x69, 0xcc, 0x20, 0x82, 0x5d, 0x08, 0xde, 0x44, 0x73, 0x9b, 0xba, 0x65, 0xd3, 0x86, 0xde, 0x01,
	0x9b, 0xaa, 0x1d, 0x33, 0x31, 0xcd, 0x2b, 0x4e, 0xf5, 0x7b, 0xe9, 0xe4, 0x3e, 0xdb, 0xc9, 0x52,
	0x7f, 0x4b, 0x74, 0xbf, 0xe1, 0x85, 0xcb, 0x28, 0xba, 0xa3, 0x8a, 0x34, 0x61, 0x4e, 0xf3, 0xb0,
	0xdf, 0x4b, 0xcb, 0x6d, 0x75, 0x1c, 0xcb, 0xb0, 0x8f, 0xf2, 0x57, 0x00, 0x45, 0x84, 0x39, 0xc0,
	0xab, 0x63, 0xc5, 0x1e, 0x17, 0xa4, 0x36, 0xbd, 0x72, 0xad, 0xf5, 0x2f, 0x3f, 0xa0, 0xf5, 0xa4,
	0xe0, 0x33, 0xc7, 0xb5, 0x3e, 0x24, 0xf5, 0x32, 0x0a, 0xd6, 0x4d, 0xd0, 0x46, 0x8a, 0xdc, 0xcd,
	0x87, 0x6d, 0x97, 0xee, 0x31, 0x16, 0xc6, 0x60, 0x9b, 0xa0, 0x09, 0x0c, 0xdc, 0x19, 0x7f, 0x8b,
	0x42, 0x75, 0xaa, 0x52, 0xc7, 0xf6, 0x44, 0x20, 0x8f, 0xa2, 0xe1, 0x80, 0x52, 0xc2, 0x23, 0x8a,
	0xd9, 0x7c, 0xbd, 0x22, 0x9e, 0x23, 0xb7, 0x14, 0x53, 0x6f, 0xce, 0xe5, 0xe4, 0xf0, 0xb4, 0x44,
	0xe0, 0x9a, 0x47, 0xf9, 0x4d, 0xf2, 0x46, 0xc6, 0x5d, 0xef, 0xe8, 0x36, 0xc5, 0x0a, 0x6b, 0x59,
	0x60, 0x54, 0xcb, 0xc2, 0x7e, 0xf9, 0xf8, 0x09, 0x0a, 0x33, 0x2c, 0xb3, 0x7a, 0xd5, 0xba, 0x50,
	0xdf, 0x28, 0x40, 0x15, 0x34, 0xb5, 0x4d, 0xa1, 0xc3, 0xca, 0x99, 0x1c, 0x77, 0x5b, 0xcd, 0xbd,
	0x3d, 0x97, 0x51, 0x5b, 0xb7, 0xa9, 0x77, 0x59, 0xfd, 0x39, 0x9c, 0x16, 0xef, 0xcb, 0x06, 0x9a,
	0xdb, 0x38, 0x36, 0x89, 0xe5, 0xda, 0x74, 0xb0, 0x13, 0x52, 0x66, 0xd2, 0xd7, 0x07, 0xf0, 0x9d,
	0xac, 0xe9, 0x6d, 0x09, 0x9d, 0xb8, 0xe1, 0x84, 0x77, 0x50, 0xac, 0xa2, 0x1e, 0xd7, 0x80, 0x82,
	0xc1, 0xae, 0x78, 0xa6, 0x1c, 0x6f, 0x9a, 0x33, 0xfd, 0x5e, 0xfa, 0x41, 0x47, 0x3d, 0xce, 0x5a,
	0xfe, 0x26, 0x57, 0x9c, 0xc0, 0xf5, 0x9e, 0xa7, 0x12, 0x47, 0x77, 0xde, 0x3b, 0x16, 0xa5, 0xeb,
	0x49, 0xd0, 0x9b, 0xa5, 0xcf, 0xd1, 0x4c, 0x99, 0x74, 0x4c, 0x62, 0x80, 0x41, 0xbd, 0x3b, 0xe8,
	0x3e, 0xbb, 0x69, 0x34, 0xdf, 0x28, 0x44, 0xb8, 0x46, 0xe2, 0xa7, 0x28, 0xbc, 0x4b, 0x9a, 0xb0,
	0xab, 0x0e, 0x12, 0xe4, 0x5e, 0x06, 0x69, 0x42, 0xd6, 0x50, 0x87, 0xf2, 0x1a, 0x00, 0x97, 0x3f,
	0x43, 0xd1, 0xa1, 0x2b, 0x0d, 0x87, 0x51, 0x70, 0x7b, 0x77, 0xb3, 0x1a, 0x9b, 0xc0, 0x11, 0x34,
	0xfd, 0x62, 0xbd, 0xb6, 0xbb, 0xbd, 0xbb, 0x15, 0x93, 0xf0, 0x2c, 0x0a, 0x97, 0x6b, 0xdb, 0x8d,
	0xed, 0xf2, 0xfa, 0x4e, 0x2c, 0xb0, 0xf6, 0x32, 0x84, 0xa2, 0x42, 0x19, 0xcf, 0x0b, 0xd8, 0x42,
	0x98, 0xfd, 0x92, 0xd6, 0x9b, 0x4d, 0x71, 0x98, 0x46, 0x9d, 0x5d, 0x72, 0x94, 0x51, 0x59, 0xbb,
	0x3c, 0x93, 0x43, 0x9a, 0x05, 0x2a, 0x85, 0xbf, 0xcf, 0x64, 0xe9, 0xe7, 0x7f, 0xfe, 0xfd, 0x35,
	0x90, 0x42, 0x13, 0x45, 0x69, 0x59, 0xb9, 0x2f, 0x88, 0x31, 0x2f, 0x68, 0x11, 0x9f, 0xa0, 0x05,
	0x16, 0xf3, 0x6b, 0x68, 0x03, 0x85, 0xdb, 0x85, 0x2d, 0xb2, 0xb0, 0x4d, 0x4e, 0x30, 0x08, 0xfb,
	0x08, 0x4d, 0x14, 0x27, 0x96, 0x33, 0x63, 0xa2, 0x32, 0x33, 0xeb, 0xdc, 0x09, 0x3e, 0x72, 0x4b,
	0xde, 0x02, 0x7a, 0xbb, 0xd8, 0x5f, 0x5c, 0x9e, 0xc9, 0x93, 0x2d, 0xa0, 0xc3, 0x81, 0xf1, 0xc7,
	0x03, 0xd7, 0x51, 0x9c, 0x05, 0x66, 0xa3, 0x23, 0x46, 0x5e, 0x18, 0x0c, 0x14, 0x7f, 0x0a, 0x54,
	0x4d, 0xfe, 0x22, 0x49, 0x8e, 0xba, 0x55, 0x18, 0x48, 0x99, 0xbd, 0x3c, 0x93, 0x83, 0x6c, 0x86,
	0x58, 0x02, 0xf8, 0x47, 0xb7, 0x99, 0xdf, 0x99, 0x4d, 0xf5, 0xb6, 0xcd, 0xfc, 0x8a, 0x35, 0xd3,
	0xe1, 0x04, 0x83, 0x9a, 0x1e, 0xf3, 0x33, 0x4c, 0x7e, 0xbc, 0x28, 0x40, 0x77, 0x59, 0x7c, 0x9e,
	0xfa, 0xff, 0xa8, 0x6a, 0xd1, 0x4f, 0xe0, 0x83, 0x0f, 0x21, 0x25, 0x7a, 0x79, 0x26, 0x4f, 0xf1,
	0x57, 0x0d, 0xcb, 0x68, 0x55, 0x4a, 0x56, 0x7e, 0x39, 0x95, 0x03, 0x87, 0x85, 0xdf, 0x4f, 0x65,
	0xf1, 0x5a, 0xfb, 0xe3, 0x54, 0x16, 0x7f, 0x02, 0x17, 0xa7, 0xf2, 0xe2, 0xf0, 0x5f, 0x81, 0x9d,
	0x13, 0x9e, 0x34, 0x1d, 0x8a, 0x3d, 0xb5, 0xe0, 0xa0, 0x49, 0x6c, 0xba, 0x56, 0x40, 0xd3, 0x1c,
	0xf6, 0xbc, 0x90, 0x7c, 0x34, 0x60, 0xf6, 0x9e, 0x17, 0x17, 0xa7, 0x32, 0xf6, 0x9f, 0x50, 0xdc,
	0x9f, 0x37, 0xbb, 0x34, 0xfb, 0xea, 0x2a, 0x25, 0xbd, 0xbe, 0x4a, 0x49, 0xef, 0xae, 0x52, 0xd2,
	0x33, 0x69, 0x2f, 0xc4, 0xdf, 0x74, 0x4f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x48, 0x10,
	0xe0, 0xa6, 0x0a, 0x00, 0x00,
}
