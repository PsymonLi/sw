// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	events "github.com/pensando/sw/api/generated/events"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewEventPolicyV1 sets up a new client for EventPolicyV1
func NewEventPolicyV1(conn *grpc.ClientConn, logger log.Logger) events.ServiceEventPolicyV1Client {

	var lAutoAddEventPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddEventPolicyEndpoint = grpctransport.NewClient(
			conn,
			"events.EventPolicyV1",
			"AutoAddEventPolicy",
			events.EncodeGrpcReqEventPolicy,
			events.DecodeGrpcRespEventPolicy,
			&events.EventPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddEventPolicyEndpoint = trace.ClientEndPoint("EventPolicyV1:AutoAddEventPolicy")(lAutoAddEventPolicyEndpoint)
	}
	var lAutoDeleteEventPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteEventPolicyEndpoint = grpctransport.NewClient(
			conn,
			"events.EventPolicyV1",
			"AutoDeleteEventPolicy",
			events.EncodeGrpcReqEventPolicy,
			events.DecodeGrpcRespEventPolicy,
			&events.EventPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteEventPolicyEndpoint = trace.ClientEndPoint("EventPolicyV1:AutoDeleteEventPolicy")(lAutoDeleteEventPolicyEndpoint)
	}
	var lAutoGetEventPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetEventPolicyEndpoint = grpctransport.NewClient(
			conn,
			"events.EventPolicyV1",
			"AutoGetEventPolicy",
			events.EncodeGrpcReqEventPolicy,
			events.DecodeGrpcRespEventPolicy,
			&events.EventPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetEventPolicyEndpoint = trace.ClientEndPoint("EventPolicyV1:AutoGetEventPolicy")(lAutoGetEventPolicyEndpoint)
	}
	var lAutoListEventPolicyEndpoint endpoint.Endpoint
	{
		lAutoListEventPolicyEndpoint = grpctransport.NewClient(
			conn,
			"events.EventPolicyV1",
			"AutoListEventPolicy",
			events.EncodeGrpcReqListWatchOptions,
			events.DecodeGrpcRespEventPolicyList,
			&events.EventPolicyList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListEventPolicyEndpoint = trace.ClientEndPoint("EventPolicyV1:AutoListEventPolicy")(lAutoListEventPolicyEndpoint)
	}
	var lAutoUpdateEventPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateEventPolicyEndpoint = grpctransport.NewClient(
			conn,
			"events.EventPolicyV1",
			"AutoUpdateEventPolicy",
			events.EncodeGrpcReqEventPolicy,
			events.DecodeGrpcRespEventPolicy,
			&events.EventPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateEventPolicyEndpoint = trace.ClientEndPoint("EventPolicyV1:AutoUpdateEventPolicy")(lAutoUpdateEventPolicyEndpoint)
	}
	return events.EndpointsEventPolicyV1Client{
		Client: events.NewEventPolicyV1Client(conn),

		AutoAddEventPolicyEndpoint:    lAutoAddEventPolicyEndpoint,
		AutoDeleteEventPolicyEndpoint: lAutoDeleteEventPolicyEndpoint,
		AutoGetEventPolicyEndpoint:    lAutoGetEventPolicyEndpoint,
		AutoListEventPolicyEndpoint:   lAutoListEventPolicyEndpoint,
		AutoUpdateEventPolicyEndpoint: lAutoUpdateEventPolicyEndpoint,
	}
}

// NewEventPolicyV1Backend creates an instrumented client with middleware
func NewEventPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) events.ServiceEventPolicyV1Client {
	cl := NewEventPolicyV1(conn, logger)
	cl = events.LoggingEventPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjEventPolicyV1EventPolicy struct {
	logger log.Logger
	client events.ServiceEventPolicyV1Client
}

func (a *grpcObjEventPolicyV1EventPolicy) Create(ctx context.Context, in *events.EventPolicy) (*events.EventPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddEventPolicy(nctx, in)
}

func (a *grpcObjEventPolicyV1EventPolicy) Update(ctx context.Context, in *events.EventPolicy) (*events.EventPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateEventPolicy(nctx, in)
}

func (a *grpcObjEventPolicyV1EventPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*events.EventPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := events.EventPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetEventPolicy(nctx, &in)
}

func (a *grpcObjEventPolicyV1EventPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*events.EventPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := events.EventPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteEventPolicy(nctx, &in)
}

func (a *grpcObjEventPolicyV1EventPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*events.EventPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListEventPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjEventPolicyV1EventPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "EventPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchEventPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(events.EventPolicyV1_AutoWatchEventPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjEventPolicyV1EventPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjEventPolicyV1EventPolicy struct {
	endpoints events.EndpointsEventPolicyV1RestClient
	instance  string
}

func (a *restObjEventPolicyV1EventPolicy) Create(ctx context.Context, in *events.EventPolicy) (*events.EventPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddEventPolicy(ctx, in)
}

func (a *restObjEventPolicyV1EventPolicy) Update(ctx context.Context, in *events.EventPolicy) (*events.EventPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateEventPolicy(ctx, in)
}

func (a *restObjEventPolicyV1EventPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*events.EventPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := events.EventPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetEventPolicy(ctx, &in)
}

func (a *restObjEventPolicyV1EventPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*events.EventPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := events.EventPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteEventPolicy(ctx, &in)
}

func (a *restObjEventPolicyV1EventPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*events.EventPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListEventPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjEventPolicyV1EventPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjEventPolicyV1EventPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientEventPolicyV1 struct {
	grpcEventPolicy events.EventPolicyInterface
}

// NewGrpcCrudClientEventPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientEventPolicyV1(conn *grpc.ClientConn, logger log.Logger) events.EventPolicyV1Interface {
	client := NewEventPolicyV1Backend(conn, logger)
	return &crudClientEventPolicyV1{

		grpcEventPolicy: &grpcObjEventPolicyV1EventPolicy{client: client, logger: logger},
	}
}

func (a *crudClientEventPolicyV1) EventPolicy() events.EventPolicyInterface {
	return a.grpcEventPolicy
}

type crudRestClientEventPolicyV1 struct {
	restEventPolicy events.EventPolicyInterface
}

// NewRestCrudClientEventPolicyV1 creates a REST client for the service.
func NewRestCrudClientEventPolicyV1(url string) events.EventPolicyV1Interface {
	endpoints, err := events.MakeEventPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientEventPolicyV1{

		restEventPolicy: &restObjEventPolicyV1EventPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientEventPolicyV1) EventPolicy() events.EventPolicyInterface {
	return a.restEventPolicy
}
