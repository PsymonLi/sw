// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	events "github.com/pensando/sw/api/generated/events"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewEventsV1 sets up a new client for EventsV1
func NewEventsV1(conn *grpc.ClientConn, logger log.Logger) events.ServiceEventsV1Client {

	var lGetEventEndpoint endpoint.Endpoint
	{
		lGetEventEndpoint = grpctransport.NewClient(
			conn,
			"events.EventsV1",
			"GetEvent",
			events.EncodeGrpcReqGetEventRequest,
			events.DecodeGrpcRespEvent,
			&events.Event{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGetEventEndpoint = trace.ClientEndPoint("EventsV1:GetEvent")(lGetEventEndpoint)
	}
	var lGetEventsEndpoint endpoint.Endpoint
	{
		lGetEventsEndpoint = grpctransport.NewClient(
			conn,
			"events.EventsV1",
			"GetEvents",
			events.EncodeGrpcReqListWatchOptions,
			events.DecodeGrpcRespEventList,
			&events.EventList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGetEventsEndpoint = trace.ClientEndPoint("EventsV1:GetEvents")(lGetEventsEndpoint)
	}
	return events.EndpointsEventsV1Client{
		Client: events.NewEventsV1Client(conn),

		GetEventEndpoint:  lGetEventEndpoint,
		GetEventsEndpoint: lGetEventsEndpoint,
	}
}

// NewEventsV1Backend creates an instrumented client with middleware
func NewEventsV1Backend(conn *grpc.ClientConn, logger log.Logger) events.ServiceEventsV1Client {
	cl := NewEventsV1(conn, logger)
	cl = events.LoggingEventsV1MiddlewareClient(logger)(cl)
	return cl
}
