// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package events is a auto generated package.
Input file: protos/events.proto
*/
package events

import (
	fmt "fmt"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapEvents = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Event) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "event/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *EventPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "monitoringPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *EventList) MakeKey(prefix string) string {
	obj := Event{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *EventPolicyList) MakeKey(prefix string) string {
	obj := EventPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgEventPolicyWatchHelper) MakeKey(prefix string) string {
	obj := EventPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgEventWatchHelper) MakeKey(prefix string) string {
	obj := Event{}
	return obj.MakeKey(prefix)
}

// Validators

func (m *AutoMsgEventPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgEventWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Event) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *EventPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapEvents["EventPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapEvents["EventPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *EventPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventSource) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EventStatus) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapEvents["EventStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapEvents["EventStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	funcMapEvents = make(map[string]map[string][]func(interface{}) bool)

	funcMapEvents["EventPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapEvents["EventPolicySpec"]["all"] = append(funcMapEvents["EventPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*EventPolicySpec)

		for _, v := range m.Levels {
			if _, ok := SeverityLevel_value[v]; !ok {
				return false
			}
		}
		return true
	})

	funcMapEvents["EventStatus"] = make(map[string][]func(interface{}) bool)
	funcMapEvents["EventStatus"]["all"] = append(funcMapEvents["EventStatus"]["all"], func(i interface{}) bool {
		m := i.(*EventStatus)

		if _, ok := SeverityLevel_value[m.Severity]; !ok {
			return false
		}
		return true
	})

}
