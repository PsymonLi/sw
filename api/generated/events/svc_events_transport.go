// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package events is a auto generated package.
Input file: svc_events.proto
*/
package events

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerEventsV1 struct {
	Endpoints EndpointsEventsV1Server

	GetEventHdlr  grpctransport.Handler
	GetEventsHdlr grpctransport.Handler
}

// MakeGRPCServerEventsV1 creates a GRPC server for EventsV1 service
func MakeGRPCServerEventsV1(ctx context.Context, endpoints EndpointsEventsV1Server, logger log.Logger) EventsV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerEventsV1{
		Endpoints: endpoints,
		GetEventHdlr: grpctransport.NewServer(
			endpoints.GetEventEndpoint,
			DecodeGrpcReqGetEventRequest,
			EncodeGrpcRespEvent,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("GetEvent", logger)))...,
		),

		GetEventsHdlr: grpctransport.NewServer(
			endpoints.GetEventsEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespEventList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("GetEvents", logger)))...,
		),
	}
}

func (s *grpcServerEventsV1) GetEvent(ctx oldcontext.Context, req *GetEventRequest) (*Event, error) {
	_, resp, err := s.GetEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respEventsV1GetEvent).V
	return &r, resp.(respEventsV1GetEvent).Err
}

func decodeHTTPrespEventsV1GetEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Event
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerEventsV1) GetEvents(ctx oldcontext.Context, req *api.ListWatchOptions) (*EventList, error) {
	_, resp, err := s.GetEventsHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respEventsV1GetEvents).V
	return &r, resp.(respEventsV1GetEvents).Err
}

func decodeHTTPrespEventsV1GetEvents(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerEventsV1) AutoWatchSvcEventsV1(in *api.ListWatchOptions, stream EventsV1_AutoWatchSvcEventsV1Server) error {
	return errors.New("not implemented")
}

func encodeHTTPGetEventRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPGetEventRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req GetEventRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqGetEventRequest encodes GRPC request
func EncodeGrpcReqGetEventRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*GetEventRequest)
	return req, nil
}

// DecodeGrpcReqGetEventRequest decodes GRPC request
func DecodeGrpcReqGetEventRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*GetEventRequest)
	return req, nil
}

// EncodeGrpcRespGetEventRequest encodes GRC response
func EncodeGrpcRespGetEventRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespGetEventRequest decodes GRPC response
func DecodeGrpcRespGetEventRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
