// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package events is a auto generated package.
Input file: events.proto
*/
package events

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPEvent(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEvent(_ context.Context, r *http.Request) (interface{}, error) {
	var req Event
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEvent encodes GRPC request
func EncodeGrpcReqEvent(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Event)
	return req, nil
}

// DecodeGrpcReqEvent decodes GRPC request
func DecodeGrpcReqEvent(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Event)
	return req, nil
}

// EncodeGrpcRespEvent encodes GRC response
func EncodeGrpcRespEvent(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEvent decodes GRPC response
func DecodeGrpcRespEvent(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventAttributes(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventAttributes(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventAttributes
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventAttributes encodes GRPC request
func EncodeGrpcReqEventAttributes(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventAttributes)
	return req, nil
}

// DecodeGrpcReqEventAttributes decodes GRPC request
func DecodeGrpcReqEventAttributes(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventAttributes)
	return req, nil
}

// EncodeGrpcRespEventAttributes encodes GRC response
func EncodeGrpcRespEventAttributes(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventAttributes decodes GRPC response
func DecodeGrpcRespEventAttributes(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventList(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventList encodes GRPC request
func EncodeGrpcReqEventList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventList)
	return req, nil
}

// DecodeGrpcReqEventList decodes GRPC request
func DecodeGrpcReqEventList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventList)
	return req, nil
}

// EncodeGrpcRespEventList encodes GRC response
func EncodeGrpcRespEventList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventList decodes GRPC response
func DecodeGrpcRespEventList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventSource(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventSource(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventSource
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventSource encodes GRPC request
func EncodeGrpcReqEventSource(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventSource)
	return req, nil
}

// DecodeGrpcReqEventSource decodes GRPC request
func DecodeGrpcReqEventSource(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventSource)
	return req, nil
}

// EncodeGrpcRespEventSource encodes GRC response
func EncodeGrpcRespEventSource(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventSource decodes GRPC response
func DecodeGrpcRespEventSource(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
