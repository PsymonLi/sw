// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package networkencryptionGwService is a auto generated package.
Input file: protos/networkencryption.proto
*/
package networkencryptionGwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	networkencryption "github.com/pensando/sw/api/generated/networkencryption"
	"github.com/pensando/sw/api/generated/networkencryption/grpc/client"
	"github.com/pensando/sw/venice/apigw"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sTrafficEncryptionPolicyV1GwService struct {
	logger     log.Logger
	defSvcProf apigw.ServiceProfile
	svcProf    map[string]apigw.ServiceProfile
}

type adapterTrafficEncryptionPolicyV1 struct {
	conn    *rpckit.RPCClient
	service networkencryption.ServiceTrafficEncryptionPolicyV1Client
	gwSvc   *sTrafficEncryptionPolicyV1GwService
	gw      apigw.APIGateway
}

func (a adapterTrafficEncryptionPolicyV1) AutoAddTrafficEncryptionPolicy(oldctx oldcontext.Context, t *networkencryption.TrafficEncryptionPolicy, options ...grpc.CallOption) (*networkencryption.TrafficEncryptionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddTrafficEncryptionPolicy")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*networkencryption.TrafficEncryptionPolicy)
		return a.service.AutoAddTrafficEncryptionPolicy(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*networkencryption.TrafficEncryptionPolicy), err
}

func (a adapterTrafficEncryptionPolicyV1) AutoDeleteTrafficEncryptionPolicy(oldctx oldcontext.Context, t *networkencryption.TrafficEncryptionPolicy, options ...grpc.CallOption) (*networkencryption.TrafficEncryptionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteTrafficEncryptionPolicy")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*networkencryption.TrafficEncryptionPolicy)
		return a.service.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*networkencryption.TrafficEncryptionPolicy), err
}

func (a adapterTrafficEncryptionPolicyV1) AutoGetTrafficEncryptionPolicy(oldctx oldcontext.Context, t *networkencryption.TrafficEncryptionPolicy, options ...grpc.CallOption) (*networkencryption.TrafficEncryptionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetTrafficEncryptionPolicy")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*networkencryption.TrafficEncryptionPolicy)
		return a.service.AutoGetTrafficEncryptionPolicy(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*networkencryption.TrafficEncryptionPolicy), err
}

func (a adapterTrafficEncryptionPolicyV1) AutoListTrafficEncryptionPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*networkencryption.TrafficEncryptionPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListTrafficEncryptionPolicy")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListTrafficEncryptionPolicy(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*networkencryption.TrafficEncryptionPolicyList), err
}

func (a adapterTrafficEncryptionPolicyV1) AutoUpdateTrafficEncryptionPolicy(oldctx oldcontext.Context, t *networkencryption.TrafficEncryptionPolicy, options ...grpc.CallOption) (*networkencryption.TrafficEncryptionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateTrafficEncryptionPolicy")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*networkencryption.TrafficEncryptionPolicy)
		return a.service.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*networkencryption.TrafficEncryptionPolicy), err
}

func (a adapterTrafficEncryptionPolicyV1) AutoWatchTrafficEncryptionPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (networkencryption.TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchTrafficEncryptionPolicy(ctx, in)
}

func (e *sTrafficEncryptionPolicyV1GwService) setupSvcProfile() {
	e.defSvcProf = apigwpkg.NewServiceProfile(nil)
	e.svcProf = make(map[string]apigw.ServiceProfile)

	e.svcProf["AutoAddTrafficEncryptionPolicy"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteTrafficEncryptionPolicy"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetTrafficEncryptionPolicy"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateTrafficEncryptionPolicy"] = apigwpkg.NewServiceProfile(e.defSvcProf)
}

func (e *sTrafficEncryptionPolicyV1GwService) GetServiceProfile(method string) (apigw.ServiceProfile, error) {
	if ret, ok := e.svcProf[method]; ok {
		return ret, nil
	}
	return nil, errors.New("not found")
}

func (e *sTrafficEncryptionPolicyV1GwService) GetCrudServiceProfile(obj string, oper apiserver.APIOperType) (apigw.ServiceProfile, error) {
	name := apiserver.GetCrudServiceName(obj, oper)
	if name != "" {
		return e.GetServiceProfile(name)
	}
	return nil, errors.New("not found")
}

func (e *sTrafficEncryptionPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()
	e.setupSvcProfile()

	fileCount++

	if fileCount == 1 {
		err := registerSwaggerDef(m, logger)
		if err != nil {
			logger.ErrorLog("msg", "failed to register swagger spec", "service", "networkencryption.TrafficEncryptionPolicyV1", "error", err)
		}
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = networkencryption.RegisterTrafficEncryptionPolicyV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service networkencryption.TrafficEncryptionPolicyV1")
					m.Handle("/v1/trafficEncryptionPolicy/", http.StripPrefix("/v1/trafficEncryptionPolicy", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "networkencryption.TrafficEncryptionPolicyV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sTrafficEncryptionPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterTrafficEncryptionPolicyV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	} else {
		opts = append(opts, rpckit.WithRemoteServerName("pen-apiserver"))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterTrafficEncryptionPolicyV1{conn: client, gw: apigwpkg.MustGetAPIGateway(), gwSvc: e, service: grpcclient.NewTrafficEncryptionPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()

	svcTrafficEncryptionPolicyV1 := sTrafficEncryptionPolicyV1GwService{}
	apigw.Register("networkencryption.TrafficEncryptionPolicyV1", "trafficEncryptionPolicy/", &svcTrafficEncryptionPolicyV1)
}
