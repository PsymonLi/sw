// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networkencryption.proto

/*
	Package networkencryption is a generated protocol buffer package.

	Service name

	It is generated from these files:
		networkencryption.proto

	It has these top-level messages:
		AutoMsgTrafficEncryptionPolicyWatchHelper
		IPsecProtocolSpec
		TLSProtocolSpec
		TrafficEncryptionPolicy
		TrafficEncryptionPolicyList
		TrafficEncryptionPolicySpec
		TrafficEncryptionPolicyStatus
*/
package networkencryption

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AutoMsgTrafficEncryptionPolicyWatchHelper struct {
	// TLS version: only supported value at present is 1.2
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// The name of the cipher suite in IANA format
	// default is TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	Object *TrafficEncryptionPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Reset() {
	*m = AutoMsgTrafficEncryptionPolicyWatchHelper{}
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTrafficEncryptionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgTrafficEncryptionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{0}
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) GetObject() *TrafficEncryptionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type IPsecProtocolSpec struct {
	// ESP encryption algorithm. Default is "aes-256-gcm-128" (See RFC4106)
	EncryptionTransform string `protobuf:"bytes,1,opt,name=EncryptionTransform,proto3" json:"encryptionTransform,omitempty"`
	// ESP integrity algorithm.
	// Default is "NULL" (must be "NULL" if AES-GCM is used for encryption)
	IntegrityTransform string `protobuf:"bytes,2,opt,name=IntegrityTransform,proto3" json:"integrityTransform,omitempty"`
}

func (m *IPsecProtocolSpec) Reset()         { *m = IPsecProtocolSpec{} }
func (m *IPsecProtocolSpec) String() string { return proto.CompactTextString(m) }
func (*IPsecProtocolSpec) ProtoMessage()    {}
func (*IPsecProtocolSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{1}
}

func (m *IPsecProtocolSpec) GetEncryptionTransform() string {
	if m != nil {
		return m.EncryptionTransform
	}
	return ""
}

func (m *IPsecProtocolSpec) GetIntegrityTransform() string {
	if m != nil {
		return m.IntegrityTransform
	}
	return ""
}

type TLSProtocolSpec struct {
	// Possible values: TLS, IPsec
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"version,omitempty"`
	// TLS Parameters for workload-to-workload connections
	CipherSuite string `protobuf:"bytes,2,opt,name=CipherSuite,proto3" json:"cipherSuite,omitempty"`
}

func (m *TLSProtocolSpec) Reset()                    { *m = TLSProtocolSpec{} }
func (m *TLSProtocolSpec) String() string            { return proto.CompactTextString(m) }
func (*TLSProtocolSpec) ProtoMessage()               {}
func (*TLSProtocolSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetworkencryption, []int{2} }

func (m *TLSProtocolSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TLSProtocolSpec) GetCipherSuite() string {
	if m != nil {
		return m.CipherSuite
	}
	return ""
}

type TrafficEncryptionPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           TrafficEncryptionPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TrafficEncryptionPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *TrafficEncryptionPolicy) Reset()         { *m = TrafficEncryptionPolicy{} }
func (m *TrafficEncryptionPolicy) String() string { return proto.CompactTextString(m) }
func (*TrafficEncryptionPolicy) ProtoMessage()    {}
func (*TrafficEncryptionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{3}
}

func (m *TrafficEncryptionPolicy) GetSpec() TrafficEncryptionPolicySpec {
	if m != nil {
		return m.Spec
	}
	return TrafficEncryptionPolicySpec{}
}

func (m *TrafficEncryptionPolicy) GetStatus() TrafficEncryptionPolicyStatus {
	if m != nil {
		return m.Status
	}
	return TrafficEncryptionPolicyStatus{}
}

type TrafficEncryptionPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the encryption policy.
	Items []*TrafficEncryptionPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *TrafficEncryptionPolicyList) Reset()         { *m = TrafficEncryptionPolicyList{} }
func (m *TrafficEncryptionPolicyList) String() string { return proto.CompactTextString(m) }
func (*TrafficEncryptionPolicyList) ProtoMessage()    {}
func (*TrafficEncryptionPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{4}
}

func (m *TrafficEncryptionPolicyList) GetItems() []*TrafficEncryptionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type TrafficEncryptionPolicySpec struct {
	Mode                    string            `protobuf:"bytes,1,opt,name=Mode,proto3" json:"mode,omitempty"`
	Tls                     TLSProtocolSpec   `protobuf:"bytes,2,opt,name=Tls" json:"tls,omitempty"`
	IPsec                   IPsecProtocolSpec `protobuf:"bytes,3,opt,name=IPsec" json:"ipsec,omitempty"`
	KeyRotationIntervalSecs uint32            `protobuf:"varint,4,opt,name=KeyRotationIntervalSecs,proto3" json:"keyRotationIntervalSecs,omitempty"`
}

func (m *TrafficEncryptionPolicySpec) Reset()         { *m = TrafficEncryptionPolicySpec{} }
func (m *TrafficEncryptionPolicySpec) String() string { return proto.CompactTextString(m) }
func (*TrafficEncryptionPolicySpec) ProtoMessage()    {}
func (*TrafficEncryptionPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{5}
}

func (m *TrafficEncryptionPolicySpec) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *TrafficEncryptionPolicySpec) GetTls() TLSProtocolSpec {
	if m != nil {
		return m.Tls
	}
	return TLSProtocolSpec{}
}

func (m *TrafficEncryptionPolicySpec) GetIPsec() IPsecProtocolSpec {
	if m != nil {
		return m.IPsec
	}
	return IPsecProtocolSpec{}
}

func (m *TrafficEncryptionPolicySpec) GetKeyRotationIntervalSecs() uint32 {
	if m != nil {
		return m.KeyRotationIntervalSecs
	}
	return 0
}

type TrafficEncryptionPolicyStatus struct {
}

func (m *TrafficEncryptionPolicyStatus) Reset()         { *m = TrafficEncryptionPolicyStatus{} }
func (m *TrafficEncryptionPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*TrafficEncryptionPolicyStatus) ProtoMessage()    {}
func (*TrafficEncryptionPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkencryption, []int{6}
}

func init() {
	proto.RegisterType((*AutoMsgTrafficEncryptionPolicyWatchHelper)(nil), "networkencryption.AutoMsgTrafficEncryptionPolicyWatchHelper")
	proto.RegisterType((*IPsecProtocolSpec)(nil), "networkencryption.IPsecProtocolSpec")
	proto.RegisterType((*TLSProtocolSpec)(nil), "networkencryption.TLSProtocolSpec")
	proto.RegisterType((*TrafficEncryptionPolicy)(nil), "networkencryption.TrafficEncryptionPolicy")
	proto.RegisterType((*TrafficEncryptionPolicyList)(nil), "networkencryption.TrafficEncryptionPolicyList")
	proto.RegisterType((*TrafficEncryptionPolicySpec)(nil), "networkencryption.TrafficEncryptionPolicySpec")
	proto.RegisterType((*TrafficEncryptionPolicyStatus)(nil), "networkencryption.TrafficEncryptionPolicyStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TrafficEncryptionPolicyV1 service

type TrafficEncryptionPolicyV1Client interface {
	AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TrafficEncryptionPolicyList, error)
	AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient, error)
}

type trafficEncryptionPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewTrafficEncryptionPolicyV1Client(cc *grpc.ClientConn) TrafficEncryptionPolicyV1Client {
	return &trafficEncryptionPolicyV1Client{cc}
}

func (c *trafficEncryptionPolicyV1Client) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/networkencryption.TrafficEncryptionPolicyV1/AutoAddTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficEncryptionPolicyV1Client) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/networkencryption.TrafficEncryptionPolicyV1/AutoDeleteTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficEncryptionPolicyV1Client) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/networkencryption.TrafficEncryptionPolicyV1/AutoGetTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficEncryptionPolicyV1Client) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TrafficEncryptionPolicyList, error) {
	out := new(TrafficEncryptionPolicyList)
	err := grpc.Invoke(ctx, "/networkencryption.TrafficEncryptionPolicyV1/AutoListTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficEncryptionPolicyV1Client) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/networkencryption.TrafficEncryptionPolicyV1/AutoUpdateTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficEncryptionPolicyV1Client) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TrafficEncryptionPolicyV1_serviceDesc.Streams[0], c.cc, "/networkencryption.TrafficEncryptionPolicyV1/AutoWatchTrafficEncryptionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient interface {
	Recv() (*AutoMsgTrafficEncryptionPolicyWatchHelper, error)
	grpc.ClientStream
}

type trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyClient struct {
	grpc.ClientStream
}

func (x *trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyClient) Recv() (*AutoMsgTrafficEncryptionPolicyWatchHelper, error) {
	m := new(AutoMsgTrafficEncryptionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TrafficEncryptionPolicyV1 service

type TrafficEncryptionPolicyV1Server interface {
	AutoAddTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	AutoDeleteTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	AutoGetTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	AutoListTrafficEncryptionPolicy(context.Context, *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error)
	AutoUpdateTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	AutoWatchTrafficEncryptionPolicy(*api.ListWatchOptions, TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer) error
}

func RegisterTrafficEncryptionPolicyV1Server(s *grpc.Server, srv TrafficEncryptionPolicyV1Server) {
	s.RegisterService(&_TrafficEncryptionPolicyV1_serviceDesc, srv)
}

func _TrafficEncryptionPolicyV1_AutoAddTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficEncryptionPolicyV1Server).AutoAddTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkencryption.TrafficEncryptionPolicyV1/AutoAddTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficEncryptionPolicyV1Server).AutoAddTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficEncryptionPolicyV1_AutoDeleteTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficEncryptionPolicyV1Server).AutoDeleteTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkencryption.TrafficEncryptionPolicyV1/AutoDeleteTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficEncryptionPolicyV1Server).AutoDeleteTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficEncryptionPolicyV1_AutoGetTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficEncryptionPolicyV1Server).AutoGetTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkencryption.TrafficEncryptionPolicyV1/AutoGetTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficEncryptionPolicyV1Server).AutoGetTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficEncryptionPolicyV1_AutoListTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficEncryptionPolicyV1Server).AutoListTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkencryption.TrafficEncryptionPolicyV1/AutoListTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficEncryptionPolicyV1Server).AutoListTrafficEncryptionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficEncryptionPolicyV1_AutoUpdateTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficEncryptionPolicyV1Server).AutoUpdateTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkencryption.TrafficEncryptionPolicyV1/AutoUpdateTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficEncryptionPolicyV1Server).AutoUpdateTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficEncryptionPolicyV1Server).AutoWatchTrafficEncryptionPolicy(m, &trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyServer{stream})
}

type TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer interface {
	Send(*AutoMsgTrafficEncryptionPolicyWatchHelper) error
	grpc.ServerStream
}

type trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyServer struct {
	grpc.ServerStream
}

func (x *trafficEncryptionPolicyV1AutoWatchTrafficEncryptionPolicyServer) Send(m *AutoMsgTrafficEncryptionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _TrafficEncryptionPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkencryption.TrafficEncryptionPolicyV1",
	HandlerType: (*TrafficEncryptionPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddTrafficEncryptionPolicy",
			Handler:    _TrafficEncryptionPolicyV1_AutoAddTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteTrafficEncryptionPolicy",
			Handler:    _TrafficEncryptionPolicyV1_AutoDeleteTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoGetTrafficEncryptionPolicy",
			Handler:    _TrafficEncryptionPolicyV1_AutoGetTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoListTrafficEncryptionPolicy",
			Handler:    _TrafficEncryptionPolicyV1_AutoListTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateTrafficEncryptionPolicy",
			Handler:    _TrafficEncryptionPolicyV1_AutoUpdateTrafficEncryptionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchTrafficEncryptionPolicy",
			Handler:       _TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "networkencryption.proto",
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *IPsecProtocolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPsecProtocolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EncryptionTransform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.EncryptionTransform)))
		i += copy(dAtA[i:], m.EncryptionTransform)
	}
	if len(m.IntegrityTransform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.IntegrityTransform)))
		i += copy(dAtA[i:], m.IntegrityTransform)
	}
	return i, nil
}

func (m *TLSProtocolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSProtocolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.CipherSuite) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.CipherSuite)))
		i += copy(dAtA[i:], m.CipherSuite)
	}
	return i, nil
}

func (m *TrafficEncryptionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficEncryptionPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *TrafficEncryptionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficEncryptionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetworkencryption(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TrafficEncryptionPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficEncryptionPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.Tls.Size()))
	n8, err := m.Tls.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetworkencryption(dAtA, i, uint64(m.IPsec.Size()))
	n9, err := m.IPsec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.KeyRotationIntervalSecs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNetworkencryption(dAtA, i, uint64(m.KeyRotationIntervalSecs))
	}
	return i, nil
}

func (m *TrafficEncryptionPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficEncryptionPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Networkencryption(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Networkencryption(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNetworkencryption(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	return n
}

func (m *IPsecProtocolSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.EncryptionTransform)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	l = len(m.IntegrityTransform)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	return n
}

func (m *TLSProtocolSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	l = len(m.CipherSuite)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	return n
}

func (m *TrafficEncryptionPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	return n
}

func (m *TrafficEncryptionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetworkencryption(uint64(l))
		}
	}
	return n
}

func (m *TrafficEncryptionPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovNetworkencryption(uint64(l))
	}
	l = m.Tls.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	l = m.IPsec.Size()
	n += 1 + l + sovNetworkencryption(uint64(l))
	if m.KeyRotationIntervalSecs != 0 {
		n += 1 + sovNetworkencryption(uint64(m.KeyRotationIntervalSecs))
	}
	return n
}

func (m *TrafficEncryptionPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovNetworkencryption(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkencryption(x uint64) (n int) {
	return sovNetworkencryption(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTrafficEncryptionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTrafficEncryptionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &TrafficEncryptionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPsecProtocolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPsecProtocolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPsecProtocolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionTransform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionTransform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrityTransform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntegrityTransform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSProtocolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSProtocolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSProtocolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficEncryptionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficEncryptionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficEncryptionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficEncryptionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TrafficEncryptionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficEncryptionPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficEncryptionPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficEncryptionPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPsec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IPsec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRotationIntervalSecs", wireType)
			}
			m.KeyRotationIntervalSecs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyRotationIntervalSecs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficEncryptionPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkencryption(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkencryption
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkencryption(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkencryption
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkencryption
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkencryption
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkencryption
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkencryption(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkencryption = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkencryption   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("networkencryption.proto", fileDescriptorNetworkencryption) }

var fileDescriptorNetworkencryption = []byte{
	// 994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x18, 0xcd, 0xd8, 0x6e, 0xda, 0x8e, 0x9b, 0x84, 0x4c, 0x13, 0xec, 0x75, 0x5b, 0x6f, 0xb2, 0xd0,
	0xaa, 0x89, 0x82, 0x37, 0x0d, 0x97, 0xd6, 0x40, 0xa5, 0x2e, 0x20, 0x88, 0xda, 0xc8, 0x56, 0x6c,
	0x8a, 0xc4, 0x05, 0xad, 0xd7, 0x93, 0xf5, 0xd0, 0xf5, 0xce, 0x6a, 0x67, 0x36, 0x91, 0x85, 0x10,
	0x52, 0x0d, 0x88, 0x33, 0xe4, 0xd4, 0x13, 0xe2, 0xd8, 0x23, 0x42, 0x20, 0x95, 0x0b, 0xc7, 0x1c,
	0x2b, 0xb8, 0xa0, 0x1e, 0x2c, 0x14, 0x38, 0xf9, 0xaf, 0x40, 0x33, 0x1e, 0x37, 0x1b, 0xd9, 0x8b,
	0xec, 0x4b, 0x6e, 0xf6, 0xcc, 0xf7, 0xde, 0xbc, 0x79, 0xdf, 0x8f, 0x59, 0x98, 0xf3, 0x31, 0x3f,
	0xa0, 0xe1, 0x23, 0xec, 0x3b, 0x61, 0x27, 0xe0, 0x84, 0xfa, 0xa5, 0x20, 0xa4, 0x9c, 0xa2, 0xc5,
	0x91, 0x8d, 0xc2, 0x55, 0x97, 0x52, 0xd7, 0xc3, 0xa6, 0x1d, 0x10, 0xd3, 0xf6, 0x7d, 0xca, 0x6d,
	0xb1, 0xcc, 0x06, 0x80, 0xc2, 0x5d, 0x97, 0xf0, 0x56, 0xd4, 0x28, 0x39, 0xb4, 0x6d, 0x06, 0xd8,
	0x67, 0xb6, 0xdf, 0xa4, 0x26, 0x3b, 0x30, 0x23, 0x4e, 0x3c, 0x26, 0x30, 0x2e, 0xf6, 0xe3, 0x30,
	0x93, 0xf8, 0x8e, 0x17, 0x35, 0xf1, 0x10, 0xff, 0x46, 0x0c, 0xef, 0x52, 0x97, 0x9a, 0x72, 0xb9,
	0x11, 0xed, 0xc9, 0x7f, 0xf2, 0x8f, 0xfc, 0xa5, 0xc2, 0xaf, 0x27, 0x1c, 0x27, 0xc4, 0xb5, 0x31,
	0xb7, 0x07, 0x61, 0xc6, 0x37, 0x00, 0xae, 0xdd, 0x8b, 0x38, 0xdd, 0x61, 0x6e, 0x3d, 0xb4, 0xf7,
	0xf6, 0x88, 0xf3, 0xfe, 0xcb, 0x0b, 0x55, 0xa9, 0x47, 0x9c, 0xce, 0xc7, 0x36, 0x77, 0x5a, 0x1f,
	0x62, 0x2f, 0xc0, 0x21, 0xba, 0x04, 0x33, 0xf5, 0x4e, 0x80, 0xf3, 0x60, 0x05, 0xdc, 0xbc, 0x88,
	0xca, 0x70, 0xb6, 0xd2, 0xf8, 0x0c, 0x3b, 0x3c, 0x9f, 0x5a, 0x01, 0x37, 0xb3, 0x5b, 0xeb, 0xa5,
	0x51, 0xb3, 0x12, 0x48, 0xcb, 0x0b, 0x2f, 0x0e, 0x97, 0xb2, 0x07, 0x82, 0xba, 0x25, 0xa9, 0x8d,
	0x67, 0x00, 0x2e, 0x6e, 0x57, 0x19, 0x76, 0xaa, 0x42, 0x97, 0x43, 0xbd, 0x5a, 0x80, 0x1d, 0x54,
	0x83, 0x97, 0x4f, 0xa0, 0xf5, 0xd0, 0xf6, 0xd9, 0x1e, 0x0d, 0xdb, 0x83, 0xf3, 0xad, 0xd5, 0x7e,
	0x4f, 0xbf, 0x86, 0x47, 0xb7, 0x37, 0x68, 0x9b, 0x70, 0xdc, 0x0e, 0x78, 0x67, 0x77, 0x1c, 0x1a,
	0x55, 0x21, 0xda, 0xf6, 0x39, 0x76, 0x43, 0xc2, 0x3b, 0x27, 0x9c, 0x29, 0xc9, 0xb9, 0xd2, 0xef,
	0xe9, 0x57, 0xc9, 0xc8, 0x6e, 0x8c, 0x72, 0x0c, 0xd6, 0xf8, 0x12, 0x2e, 0xd4, 0x1f, 0xd4, 0x4e,
	0x29, 0x37, 0xe1, 0xf9, 0x87, 0x38, 0x64, 0x84, 0xfa, 0x4a, 0xed, 0x72, 0xbf, 0xa7, 0x2f, 0xee,
	0x0f, 0x96, 0x62, 0x74, 0xc3, 0x28, 0xf4, 0x16, 0xcc, 0xbe, 0x4b, 0x82, 0x16, 0x0e, 0x6b, 0x11,
	0xe1, 0x58, 0xc9, 0xd1, 0xfa, 0x3d, 0x7d, 0xd9, 0x39, 0x59, 0x8e, 0x01, 0xe3, 0xd1, 0xc6, 0x3f,
	0x29, 0x98, 0x4b, 0xb0, 0x1a, 0x6d, 0x42, 0x50, 0x97, 0x1a, 0xb2, 0x5b, 0x73, 0x25, 0x3b, 0x20,
	0x25, 0x91, 0xc2, 0x1d, 0xcc, 0x6d, 0xeb, 0xf2, 0x51, 0x4f, 0x9f, 0x79, 0xde, 0xd3, 0x41, 0xbf,
	0xa7, 0x9f, 0xdf, 0x20, 0xbe, 0x47, 0x7c, 0xbc, 0x0b, 0xea, 0xe8, 0x0e, 0x04, 0x15, 0x95, 0xd3,
	0x05, 0x89, 0x18, 0xa4, 0x59, 0x62, 0x0a, 0x31, 0xcc, 0xbc, 0x28, 0xa4, 0x98, 0x24, 0x50, 0x41,
	0x9f, 0xc0, 0x8c, 0xb8, 0x7e, 0x3e, 0x2d, 0xd1, 0xa5, 0xc9, 0x2b, 0x42, 0xa0, 0xac, 0x57, 0x05,
	0xb9, 0x20, 0x66, 0x01, 0x76, 0x62, 0xc4, 0x92, 0x13, 0x35, 0xe0, 0x6c, 0x8d, 0xdb, 0x3c, 0x62,
	0xf9, 0x8c, 0x64, 0xdf, 0x9c, 0x82, 0x5d, 0xe2, 0xac, 0xbc, 0xe2, 0x7f, 0x85, 0xc9, 0xff, 0xb1,
	0x13, 0x14, 0x73, 0xf9, 0xca, 0x1f, 0x5f, 0x6b, 0x39, 0x3e, 0x9e, 0xc4, 0xf8, 0x15, 0xc0, 0x2b,
	0x09, 0x07, 0x3c, 0x20, 0x8c, 0x23, 0x43, 0x38, 0x9d, 0x1a, 0xe7, 0xf4, 0x85, 0xa1, 0x6b, 0x68,
	0x0d, 0x5e, 0x10, 0xb1, 0x62, 0x55, 0x99, 0x34, 0x08, 0x1d, 0x2e, 0xc6, 0x42, 0xef, 0xc0, 0x73,
	0xdb, 0x1c, 0xb7, 0xc5, 0x75, 0xd3, 0x53, 0xb6, 0xd7, 0xfc, 0x8b, 0xc3, 0x25, 0xe8, 0x11, 0xc6,
	0x55, 0x77, 0x1d, 0xa5, 0x12, 0x95, 0x4b, 0x6b, 0x6f, 0xc0, 0xcc, 0x0e, 0x6d, 0xaa, 0xc6, 0xb6,
	0x90, 0xcc, 0x2d, 0x6d, 0xc6, 0xcb, 0x4d, 0xee, 0xa3, 0xfb, 0x30, 0x5d, 0xf7, 0x98, 0xba, 0xa3,
	0x31, 0x4e, 0xd0, 0xe9, 0x36, 0xb0, 0x96, 0x95, 0xe3, 0x73, 0xdc, 0x8b, 0xdb, 0x2d, 0x58, 0x50,
	0x0d, 0x9e, 0x93, 0x1d, 0xaf, 0x7c, 0x78, 0x7d, 0x0c, 0xdd, 0xc8, 0x44, 0xb0, 0x72, 0x8a, 0x70,
	0x81, 0x04, 0xec, 0x54, 0x8d, 0x0c, 0xb8, 0xd0, 0xa7, 0x30, 0x77, 0x1f, 0x77, 0x76, 0xd5, 0x14,
	0x15, 0xbd, 0x1a, 0xee, 0xdb, 0x5e, 0x0d, 0x3b, 0x83, 0xaa, 0x99, 0xb3, 0xae, 0xf7, 0x7b, 0xfa,
	0xea, 0xa3, 0xf1, 0x21, 0x31, 0xba, 0x24, 0x16, 0x43, 0x87, 0xd7, 0xfe, 0xb7, 0xc8, 0xb6, 0x7e,
	0xb9, 0x08, 0xb5, 0x84, 0x88, 0x87, 0xb7, 0xd0, 0x0f, 0x00, 0x16, 0xc5, 0xc0, 0xbd, 0xd7, 0x6c,
	0x26, 0x35, 0xec, 0x14, 0x89, 0x2e, 0x4c, 0x11, 0x6b, 0xdc, 0xf8, 0xeb, 0x70, 0x09, 0xfc, 0xf4,
	0x95, 0x36, 0xeb, 0x84, 0xd8, 0xe6, 0xf8, 0xf1, 0x9f, 0xff, 0x7e, 0x9f, 0x42, 0x70, 0xa6, 0x0c,
	0xd6, 0x8d, 0xac, 0xf9, 0x79, 0xa5, 0x54, 0xc7, 0xbe, 0xed, 0xf3, 0x2f, 0xd0, 0x33, 0x00, 0x57,
	0x85, 0xc4, 0xf7, 0xb0, 0x87, 0x39, 0x3e, 0x6b, 0x95, 0xef, 0x0c, 0x55, 0x36, 0xe5, 0xf1, 0x52,
	0xe5, 0x1a, 0x9c, 0x29, 0xcf, 0xac, 0xbf, 0x16, 0x13, 0x69, 0x26, 0xf4, 0x28, 0xfa, 0x59, 0xf9,
	0xfb, 0x01, 0xe6, 0x67, 0xad, 0xbc, 0xac, 0x94, 0xa7, 0x5d, 0xcc, 0x4f, 0x64, 0xa3, 0x89, 0x64,
	0xef, 0x43, 0x5d, 0xa8, 0x16, 0x53, 0x20, 0x49, 0xf6, 0xf2, 0xcb, 0x39, 0x21, 0x9f, 0xe4, 0x8a,
	0xdc, 0x63, 0x85, 0x29, 0x66, 0xac, 0xc0, 0x1a, 0x97, 0x94, 0xca, 0x8c, 0x18, 0x0f, 0xe8, 0x37,
	0x95, 0xeb, 0x8f, 0x82, 0xa6, 0x7d, 0xf6, 0xb9, 0xbe, 0x3b, 0xcc, 0x75, 0x24, 0x8f, 0x97, 0xa6,
	0xad, 0xcb, 0x8a, 0x2c, 0x4c, 0xe4, 0xda, 0xb7, 0x00, 0xae, 0x08, 0xf5, 0xd2, 0x90, 0x29, 0x7d,
	0x7b, 0x7b, 0x8c, 0xce, 0x89, 0xbf, 0x84, 0x8c, 0x39, 0xa5, 0xfc, 0x9c, 0xfc, 0x86, 0xd9, 0x04,
	0x85, 0xdf, 0xc1, 0x77, 0x5d, 0x2d, 0xb5, 0x7f, 0xeb, 0x49, 0x37, 0xf1, 0xfd, 0xf8, 0xb1, 0xab,
	0x25, 0x3d, 0xd2, 0x4f, 0xbb, 0x5a, 0x35, 0xf9, 0x05, 0x17, 0x05, 0x85, 0xd2, 0x41, 0xc4, 0x91,
	0x6a, 0x8a, 0x89, 0xdc, 0x79, 0xda, 0xd5, 0x36, 0x92, 0x39, 0x33, 0x01, 0x65, 0xbc, 0x10, 0xef,
	0x7b, 0xab, 0xf8, 0xe4, 0xb1, 0x36, 0xef, 0x51, 0xc7, 0xf6, 0x5a, 0x94, 0xf1, 0xf2, 0xed, 0xcd,
	0xdb, 0x5b, 0x47, 0xc7, 0x45, 0xf0, 0xfc, 0xb8, 0x08, 0xfe, 0x3e, 0x2e, 0x82, 0x2a, 0x68, 0xcc,
	0xca, 0x8f, 0xc6, 0x37, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x47, 0x3a, 0xcc, 0x16, 0x0b,
	0x00, 0x00,
}
