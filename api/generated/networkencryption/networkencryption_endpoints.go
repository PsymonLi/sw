// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package networkencryption is a auto generated package.
Input file: protos/networkencryption.proto
*/
package networkencryption

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareTrafficEncryptionPolicyV1Client add middleware to the client
type MiddlewareTrafficEncryptionPolicyV1Client func(ServiceTrafficEncryptionPolicyV1Client) ServiceTrafficEncryptionPolicyV1Client

// EndpointsTrafficEncryptionPolicyV1Client is the endpoints for the client
type EndpointsTrafficEncryptionPolicyV1Client struct {
	Client TrafficEncryptionPolicyV1Client

	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
}

// EndpointsTrafficEncryptionPolicyV1RestClient is the REST client
type EndpointsTrafficEncryptionPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoWatchTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareTrafficEncryptionPolicyV1Server adds middle ware to the server
type MiddlewareTrafficEncryptionPolicyV1Server func(ServiceTrafficEncryptionPolicyV1Server) ServiceTrafficEncryptionPolicyV1Server

// EndpointsTrafficEncryptionPolicyV1Server is the server endpoints
type EndpointsTrafficEncryptionPolicyV1Server struct {
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint

	watchHandlerTrafficEncryptionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddTrafficEncryptionPolicy is endpoint for AutoAddTrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoDeleteTrafficEncryptionPolicy is endpoint for AutoDeleteTrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoGetTrafficEncryptionPolicy is endpoint for AutoGetTrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoListTrafficEncryptionPolicy is endpoint for AutoListTrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (*AutoMsgTrafficEncryptionPolicyListHelper, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &AutoMsgTrafficEncryptionPolicyListHelper{}, err
	}
	return resp.(*AutoMsgTrafficEncryptionPolicyListHelper), nil
}

type respTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicy struct {
	V   AutoMsgTrafficEncryptionPolicyListHelper
	Err error
}

// AutoUpdateTrafficEncryptionPolicy is endpoint for AutoUpdateTrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoWatchTrafficEncryptionPolicy performs Watch for TrafficEncryptionPolicy
func (e EndpointsTrafficEncryptionPolicyV1Client) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	return e.Client.AutoWatchTrafficEncryptionPolicy(ctx, in)
}

// AutoAddTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicyEndpoint creates  AutoAddTrafficEncryptionPolicy endpoints for the service
func MakeTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoAddTrafficEncryptionPolicy(ctx, *req)
		return respTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "TrafficEncryptionPolicyV1:AutoAddTrafficEncryptionPolicy")(f)
}

// AutoDeleteTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicyEndpoint creates  AutoDeleteTrafficEncryptionPolicy endpoints for the service
func MakeTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoDeleteTrafficEncryptionPolicy(ctx, *req)
		return respTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "TrafficEncryptionPolicyV1:AutoDeleteTrafficEncryptionPolicy")(f)
}

// AutoGetTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicyEndpoint creates  AutoGetTrafficEncryptionPolicy endpoints for the service
func MakeTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoGetTrafficEncryptionPolicy(ctx, *req)
		return respTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "TrafficEncryptionPolicyV1:AutoGetTrafficEncryptionPolicy")(f)
}

// AutoListTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (AutoMsgTrafficEncryptionPolicyListHelper, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return AutoMsgTrafficEncryptionPolicyListHelper{}, err
	}
	return *resp.(*AutoMsgTrafficEncryptionPolicyListHelper), nil
}

// MakeTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicyEndpoint creates  AutoListTrafficEncryptionPolicy endpoints for the service
func MakeTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTrafficEncryptionPolicy(ctx, *req)
		return respTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "TrafficEncryptionPolicyV1:AutoListTrafficEncryptionPolicy")(f)
}

// AutoUpdateTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicyEndpoint creates  AutoUpdateTrafficEncryptionPolicy endpoints for the service
func MakeTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoUpdateTrafficEncryptionPolicy(ctx, *req)
		return respTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "TrafficEncryptionPolicyV1:AutoUpdateTrafficEncryptionPolicy")(f)
}

// AutoWatchTrafficEncryptionPolicy is the watch handler for TrafficEncryptionPolicy on the server side.
func (e EndpointsTrafficEncryptionPolicyV1Server) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return e.watchHandlerTrafficEncryptionPolicy(in, stream)
}

// MakeAutoWatchTrafficEncryptionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchTrafficEncryptionPolicyEndpoint(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer)
		return s.AutoWatchTrafficEncryptionPolicy(options, wstream)
	}
}

// MakeTrafficEncryptionPolicyV1ServerEndpoints creates server endpoints
func MakeTrafficEncryptionPolicyV1ServerEndpoints(s ServiceTrafficEncryptionPolicyV1Server, logger log.Logger) EndpointsTrafficEncryptionPolicyV1Server {
	return EndpointsTrafficEncryptionPolicyV1Server{

		AutoAddTrafficEncryptionPolicyEndpoint:    MakeTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicyEndpoint(s, logger),
		AutoDeleteTrafficEncryptionPolicyEndpoint: MakeTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicyEndpoint(s, logger),
		AutoGetTrafficEncryptionPolicyEndpoint:    MakeTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicyEndpoint(s, logger),
		AutoListTrafficEncryptionPolicyEndpoint:   MakeTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicyEndpoint(s, logger),
		AutoUpdateTrafficEncryptionPolicyEndpoint: MakeTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicyEndpoint(s, logger),

		watchHandlerTrafficEncryptionPolicy: MakeAutoWatchTrafficEncryptionPolicyEndpoint(s, logger),
	}
}

// LoggingTrafficEncryptionPolicyV1MiddlewareClient adds middleware for the client
func LoggingTrafficEncryptionPolicyV1MiddlewareClient(logger log.Logger) MiddlewareTrafficEncryptionPolicyV1Client {
	return func(next ServiceTrafficEncryptionPolicyV1Client) ServiceTrafficEncryptionPolicyV1Client {
		return loggingTrafficEncryptionPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingTrafficEncryptionPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceTrafficEncryptionPolicyV1Client
}

// LoggingTrafficEncryptionPolicyV1MiddlewareServer adds middleware for the client
func LoggingTrafficEncryptionPolicyV1MiddlewareServer(logger log.Logger) MiddlewareTrafficEncryptionPolicyV1Server {
	return func(next ServiceTrafficEncryptionPolicyV1Server) ServiceTrafficEncryptionPolicyV1Server {
		return loggingTrafficEncryptionPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingTrafficEncryptionPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceTrafficEncryptionPolicyV1Server
}

func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AutoMsgTrafficEncryptionPolicyListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingTrafficEncryptionPolicyV1MiddlewareClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (resp AutoMsgTrafficEncryptionPolicyListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TrafficEncryptionPolicyV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingTrafficEncryptionPolicyV1MiddlewareServer) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "TrafficEncryptionPolicyV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTrafficEncryptionPolicy(in, stream)
	return
}
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURITrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicyCreateOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/v1/trafficEncryptionPolicy", "/", in.Tenant)
}

//
func makeURITrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicyDeleteOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/v1/trafficEncryptionPolicy", "/", in.Tenant, "/trafficEncryptionPolicy")
}

//
func makeURITrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicyGetOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/v1/trafficEncryptionPolicy", "/", in.Tenant, "/trafficEncryptionPolicy")
}

//
func makeURITrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicyUpdateOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/v1/trafficEncryptionPolicy", "/", in.Tenant, "/trafficEncryptionPolicy")
}

// AutoAddTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURITrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), nil
}

// AutoUpdateTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURITrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoGetTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURITrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoDeleteTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURITrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoListTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoListTrafficEncryptionPolicy(ctx context.Context, options *api.ListWatchOptions) (*AutoMsgTrafficEncryptionPolicyListHelper, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsTrafficEncryptionPolicyV1RestClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeTrafficEncryptionPolicyV1RestClientEndpoints make REST client endpoints
func MakeTrafficEncryptionPolicyV1RestClientEndpoints(instance string) (EndpointsTrafficEncryptionPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsTrafficEncryptionPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
