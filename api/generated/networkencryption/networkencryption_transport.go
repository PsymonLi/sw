// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package networkencryption is a auto generated package.
Input file: protos/networkencryption.proto
*/
package networkencryption

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerTrafficEncryptionPolicyV1 struct {
	Endpoints EndpointsTrafficEncryptionPolicyV1Server

	AutoAddTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoDeleteTrafficEncryptionPolicyHdlr grpctransport.Handler
	AutoGetTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoListTrafficEncryptionPolicyHdlr   grpctransport.Handler
	AutoUpdateTrafficEncryptionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerTrafficEncryptionPolicyV1 creates a GRPC server for TrafficEncryptionPolicyV1 service
func MakeGRPCServerTrafficEncryptionPolicyV1(ctx context.Context, endpoints EndpointsTrafficEncryptionPolicyV1Server, logger log.Logger) TrafficEncryptionPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerTrafficEncryptionPolicyV1{
		Endpoints: endpoints,
		AutoAddTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddTrafficEncryptionPolicy", logger)))...,
		),

		AutoDeleteTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteTrafficEncryptionPolicy", logger)))...,
		),

		AutoGetTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetTrafficEncryptionPolicy", logger)))...,
		),

		AutoListTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespTrafficEncryptionPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListTrafficEncryptionPolicy", logger)))...,
		),

		AutoUpdateTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateTrafficEncryptionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoAddTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoAddTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy).V
	return &r, resp.(respTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy).Err
}

func decodeHTTPrespTrafficEncryptionPolicyV1AutoAddTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoDeleteTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoDeleteTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy).V
	return &r, resp.(respTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy).Err
}

func decodeHTTPrespTrafficEncryptionPolicyV1AutoDeleteTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoGetTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoGetTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy).V
	return &r, resp.(respTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy).Err
}

func decodeHTTPrespTrafficEncryptionPolicyV1AutoGetTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoListTrafficEncryptionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	_, resp, err := s.AutoListTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicy).V
	return &r, resp.(respTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicy).Err
}

func decodeHTTPrespTrafficEncryptionPolicyV1AutoListTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoUpdateTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoUpdateTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy).V
	return &r, resp.(respTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy).Err
}

func decodeHTTPrespTrafficEncryptionPolicyV1AutoUpdateTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerTrafficEncryptionPolicyV1) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream TrafficEncryptionPolicyV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return s.Endpoints.AutoWatchTrafficEncryptionPolicy(in, stream)
}

func encodeHTTPIPsecProtocolSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPsecProtocolSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPsecProtocolSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPsecProtocolSpec encodes GRPC request
func EncodeGrpcReqIPsecProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPsecProtocolSpec)
	return req, nil
}

// DecodeGrpcReqIPsecProtocolSpec decodes GRPC request
func DecodeGrpcReqIPsecProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPsecProtocolSpec)
	return req, nil
}

// EncodeGrpcRespIPsecProtocolSpec encodes GRC response
func EncodeGrpcRespIPsecProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPsecProtocolSpec decodes GRPC response
func DecodeGrpcRespIPsecProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSProtocolSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSProtocolSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSProtocolSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSProtocolSpec encodes GRPC request
func EncodeGrpcReqTLSProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSProtocolSpec)
	return req, nil
}

// DecodeGrpcReqTLSProtocolSpec decodes GRPC request
func DecodeGrpcReqTLSProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSProtocolSpec)
	return req, nil
}

// EncodeGrpcRespTLSProtocolSpec encodes GRC response
func EncodeGrpcRespTLSProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSProtocolSpec decodes GRPC response
func DecodeGrpcRespTLSProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicy encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicy)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicy decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicy)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicy encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicy decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicyList encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicyList decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicyList endodes the GRPC response
func EncodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicyList decodes the GRPC response
func DecodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicySpec encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicySpec)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicySpec decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicySpec)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicySpec encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicySpec decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicyStatus encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicyStatus decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicyStatus encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicyStatus decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
