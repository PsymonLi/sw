{
  "swagger": "2.0",
  "info": {
    "title": "Service name",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/{O.Tenant}/collectionPolicy": {
      "post": {
        "operationId": "AutoAddCollectionPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        ],
        "tags": [
          "CollectionPolicyV1"
        ]
      }
    },
    "/{O.Tenant}/collectionPolicy/{O.Name}": {
      "get": {
        "operationId": "AutoGetCollectionPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.Attributes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.MonitoringPolicies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "CollectionPolicyV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteCollectionPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionPolicyV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateCollectionPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/collectionCollectionPolicy"
            }
          }
        ],
        "tags": [
          "CollectionPolicyV1"
        ]
      }
    }
  },
  "definitions": {
    "apiListMeta": {
      "type": "object",
      "properties": {
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "LabelSelector": {
          "type": "string"
        },
        "FieldSelector": {
          "type": "string"
        },
        "PrefixWatch": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "Tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "UUID": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "CreationTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "CreationTime is the creation time of Object"
        },
        "ModTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "ModTime is the Last Modification time of Object"
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "APIVersion": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "collectionAutoMsgCollectionPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "ConditionalTrigger allows start data collection when count exceeds\nIf the trigger is not met, the collection is discarded\nIt is a map of attribute (string name of the field) to a condition \"\u003e 2000\" or \"== true\", etc.\ndependng on the type of the field"
        },
        "Object": {
          "$ref": "#/definitions/collectionCollectionPolicy",
          "title": "TimeTrigger specifies the time when data should be collected, text strings as\n\"7pm\", \"8am-12am\", etc. format TBD"
        }
      },
      "title": "Specifies start or stop triggers for collecting data"
    },
    "collectionCollectionPolicy": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "Attributes are a set of field names that needs to be collected\nUser is expected to define a set of parameters to be collected as templates that\nare attached to specific workloads, etc. e.g. user may want to collect smaller set\nof parameters on normal basis except for certain critical traffic"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta",
          "title": "Collection Trigger specifies start or stop triggers for data collection"
        },
        "Spec": {
          "$ref": "#/definitions/collectionCollectionPolicySpec"
        },
        "Status": {
          "$ref": "#/definitions/collectionCollectionPolicyStatus"
        }
      }
    },
    "collectionCollectionPolicyList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "list of monitoring policies that refer to this collection policy"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collectionCollectionPolicy"
          }
        }
      }
    },
    "collectionCollectionPolicySpec": {
      "type": "object",
      "properties": {
        "Attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/collectionCollectionTrigger"
          }
        }
      }
    },
    "collectionCollectionPolicyStatus": {
      "type": "object",
      "properties": {
        "MonitoringPolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "collectionCollectionTrigger": {
      "type": "object",
      "properties": {
        "ConditionalTrigger": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TimeTrigger": {
          "type": "string"
        }
      }
    }
  }
}
