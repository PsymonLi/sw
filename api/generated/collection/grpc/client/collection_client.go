// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	collection "github.com/pensando/sw/api/generated/collection"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewCollectionPolicyV1 sets up a new client for CollectionPolicyV1
func NewCollectionPolicyV1(conn *grpc.ClientConn, logger log.Logger) collection.ServiceCollectionPolicyV1Client {

	var lAutoAddCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"collection.CollectionPolicyV1",
			"AutoAddCollectionPolicy",
			collection.EncodeGrpcReqCollectionPolicy,
			collection.DecodeGrpcRespCollectionPolicy,
			&collection.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoAddCollectionPolicy")(lAutoAddCollectionPolicyEndpoint)
	}
	var lAutoDeleteCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"collection.CollectionPolicyV1",
			"AutoDeleteCollectionPolicy",
			collection.EncodeGrpcReqCollectionPolicy,
			collection.DecodeGrpcRespCollectionPolicy,
			&collection.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoDeleteCollectionPolicy")(lAutoDeleteCollectionPolicyEndpoint)
	}
	var lAutoGetCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"collection.CollectionPolicyV1",
			"AutoGetCollectionPolicy",
			collection.EncodeGrpcReqCollectionPolicy,
			collection.DecodeGrpcRespCollectionPolicy,
			&collection.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoGetCollectionPolicy")(lAutoGetCollectionPolicyEndpoint)
	}
	var lAutoListCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoListCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"collection.CollectionPolicyV1",
			"AutoListCollectionPolicy",
			collection.EncodeGrpcReqListWatchOptions,
			collection.DecodeGrpcRespCollectionPolicyList,
			&collection.CollectionPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoListCollectionPolicy")(lAutoListCollectionPolicyEndpoint)
	}
	var lAutoUpdateCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"collection.CollectionPolicyV1",
			"AutoUpdateCollectionPolicy",
			collection.EncodeGrpcReqCollectionPolicy,
			collection.DecodeGrpcRespCollectionPolicy,
			&collection.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoUpdateCollectionPolicy")(lAutoUpdateCollectionPolicyEndpoint)
	}
	return collection.EndpointsCollectionPolicyV1Client{
		Client: collection.NewCollectionPolicyV1Client(conn),

		AutoAddCollectionPolicyEndpoint:    lAutoAddCollectionPolicyEndpoint,
		AutoDeleteCollectionPolicyEndpoint: lAutoDeleteCollectionPolicyEndpoint,
		AutoGetCollectionPolicyEndpoint:    lAutoGetCollectionPolicyEndpoint,
		AutoListCollectionPolicyEndpoint:   lAutoListCollectionPolicyEndpoint,
		AutoUpdateCollectionPolicyEndpoint: lAutoUpdateCollectionPolicyEndpoint,
	}
}

// NewCollectionPolicyV1Backend creates an instrumented client with middleware
func NewCollectionPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) collection.ServiceCollectionPolicyV1Client {
	cl := NewCollectionPolicyV1(conn, logger)
	cl = collection.LoggingCollectionPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjCollectionPolicyV1CollectionPolicy struct {
	logger log.Logger
	client collection.ServiceCollectionPolicyV1Client
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Create(ctx context.Context, in *collection.CollectionPolicy) (*collection.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "CollectionPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddCollectionPolicy(nctx, in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Update(ctx context.Context, in *collection.CollectionPolicy) (*collection.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateCollectionPolicy(nctx, in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*collection.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := collection.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetCollectionPolicy(nctx, &in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*collection.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := collection.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteCollectionPolicy(nctx, &in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*collection.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListCollectionPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchCollectionPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(collection.CollectionPolicyV1_AutoWatchCollectionPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjCollectionPolicyV1CollectionPolicy struct {
	endpoints collection.EndpointsCollectionPolicyV1RestClient
	instance  string
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Create(ctx context.Context, in *collection.CollectionPolicy) (*collection.CollectionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddCollectionPolicy(ctx, in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Update(ctx context.Context, in *collection.CollectionPolicy) (*collection.CollectionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateCollectionPolicy(ctx, in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*collection.CollectionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := collection.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetCollectionPolicy(ctx, &in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*collection.CollectionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := collection.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteCollectionPolicy(ctx, &in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*collection.CollectionPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListCollectionPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientCollectionPolicyV1 struct {
	grpcCollectionPolicy collection.CollectionPolicyInterface
}

// NewGrpcCrudClientCollectionPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientCollectionPolicyV1(conn *grpc.ClientConn, logger log.Logger) collection.CollectionPolicyV1Interface {
	client := NewCollectionPolicyV1Backend(conn, logger)
	return &crudClientCollectionPolicyV1{

		grpcCollectionPolicy: &grpcObjCollectionPolicyV1CollectionPolicy{client: client, logger: logger},
	}
}

func (a *crudClientCollectionPolicyV1) CollectionPolicy() collection.CollectionPolicyInterface {
	return a.grpcCollectionPolicy
}

type crudRestClientCollectionPolicyV1 struct {
	restCollectionPolicy collection.CollectionPolicyInterface
}

// NewRestCrudClientCollectionPolicyV1 creates a REST client for the service.
func NewRestCrudClientCollectionPolicyV1(url string) collection.CollectionPolicyV1Interface {
	endpoints, err := collection.MakeCollectionPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientCollectionPolicyV1{

		restCollectionPolicy: &restObjCollectionPolicyV1CollectionPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientCollectionPolicyV1) CollectionPolicy() collection.CollectionPolicyInterface {
	return a.restCollectionPolicy
}
