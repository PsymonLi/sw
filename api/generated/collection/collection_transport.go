// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package collection is a auto generated package.
Input file: protos/collection.proto
*/
package collection

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerCollectionPolicyV1 struct {
	Endpoints EndpointsCollectionPolicyV1Server

	AutoAddCollectionPolicyHdlr    grpctransport.Handler
	AutoDeleteCollectionPolicyHdlr grpctransport.Handler
	AutoGetCollectionPolicyHdlr    grpctransport.Handler
	AutoListCollectionPolicyHdlr   grpctransport.Handler
	AutoUpdateCollectionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerCollectionPolicyV1 creates a GRPC server for CollectionPolicyV1 service
func MakeGRPCServerCollectionPolicyV1(ctx context.Context, endpoints EndpointsCollectionPolicyV1Server, logger log.Logger) CollectionPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerCollectionPolicyV1{
		Endpoints: endpoints,
		AutoAddCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddCollectionPolicy", logger)))...,
		),

		AutoDeleteCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteCollectionPolicy", logger)))...,
		),

		AutoGetCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetCollectionPolicy", logger)))...,
		),

		AutoListCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListCollectionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCollectionPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListCollectionPolicy", logger)))...,
		),

		AutoUpdateCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateCollectionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerCollectionPolicyV1) AutoAddCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoAddCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoAddCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoAddCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoAddCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoDeleteCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoDeleteCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoDeleteCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoDeleteCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoDeleteCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoGetCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoGetCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoGetCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoGetCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoGetCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoListCollectionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*CollectionPolicyList, error) {
	_, resp, err := s.AutoListCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoListCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoListCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoListCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoUpdateCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoUpdateCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoUpdateCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoUpdateCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoUpdateCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoWatchCollectionPolicy(in *api.ListWatchOptions, stream CollectionPolicyV1_AutoWatchCollectionPolicyServer) error {
	return s.Endpoints.AutoWatchCollectionPolicy(in, stream)
}

func encodeHTTPCollectionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicy encodes GRPC request
func EncodeGrpcReqCollectionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicy)
	return req, nil
}

// DecodeGrpcReqCollectionPolicy decodes GRPC request
func DecodeGrpcReqCollectionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicy)
	return req, nil
}

// EncodeGrpcRespCollectionPolicy encodes GRC response
func EncodeGrpcRespCollectionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicy decodes GRPC response
func DecodeGrpcRespCollectionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicyList encodes GRPC request
func EncodeGrpcReqCollectionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyList)
	return req, nil
}

// DecodeGrpcReqCollectionPolicyList decodes GRPC request
func DecodeGrpcReqCollectionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyList)
	return req, nil
}

// EncodeGrpcRespCollectionPolicyList endodes the GRPC response
func EncodeGrpcRespCollectionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicyList decodes the GRPC response
func DecodeGrpcRespCollectionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicySpec encodes GRPC request
func EncodeGrpcReqCollectionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicySpec)
	return req, nil
}

// DecodeGrpcReqCollectionPolicySpec decodes GRPC request
func DecodeGrpcReqCollectionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicySpec)
	return req, nil
}

// EncodeGrpcRespCollectionPolicySpec encodes GRC response
func EncodeGrpcRespCollectionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicySpec decodes GRPC response
func DecodeGrpcRespCollectionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicyStatus encodes GRPC request
func EncodeGrpcReqCollectionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqCollectionPolicyStatus decodes GRPC request
func DecodeGrpcReqCollectionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespCollectionPolicyStatus encodes GRC response
func EncodeGrpcRespCollectionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicyStatus decodes GRPC response
func DecodeGrpcRespCollectionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionTrigger(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionTrigger(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionTrigger
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionTrigger encodes GRPC request
func EncodeGrpcReqCollectionTrigger(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionTrigger)
	return req, nil
}

// DecodeGrpcReqCollectionTrigger decodes GRPC request
func DecodeGrpcReqCollectionTrigger(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionTrigger)
	return req, nil
}

// EncodeGrpcRespCollectionTrigger encodes GRC response
func EncodeGrpcRespCollectionTrigger(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionTrigger decodes GRPC response
func DecodeGrpcRespCollectionTrigger(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
