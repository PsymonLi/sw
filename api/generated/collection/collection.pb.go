// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: collection.proto

/*
	Package collection is a generated protocol buffer package.

	Service name

	It is generated from these files:
		collection.proto

	It has these top-level messages:
		AutoMsgCollectionPolicyWatchHelper
		CollectionPolicy
		CollectionPolicyList
		CollectionPolicySpec
		CollectionPolicyStatus
		CollectionTrigger
*/
package collection

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Specifies start or stop triggers for collecting data
type AutoMsgCollectionPolicyWatchHelper struct {
	// ConditionalTrigger allows start data collection when count exceeds
	// If the trigger is not met, the collection is discarded
	// It is a map of attribute (string name of the field) to a condition "> 2000" or "== true", etc.
	// dependng on the type of the field
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// TimeTrigger specifies the time when data should be collected, text strings as
	// "7pm", "8am-12am", etc. format TBD
	Object *CollectionPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgCollectionPolicyWatchHelper) Reset()         { *m = AutoMsgCollectionPolicyWatchHelper{} }
func (m *AutoMsgCollectionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCollectionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgCollectionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorCollection, []int{0}
}

func (m *AutoMsgCollectionPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCollectionPolicyWatchHelper) GetObject() *CollectionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type CollectionPolicy struct {
	// Attributes are a set of field names that needs to be collected
	// User is expected to define a set of parameters to be collected as templates that
	// are attached to specific workloads, etc. e.g. user may want to collect smaller set
	// of parameters on normal basis except for certain critical traffic
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// Collection Trigger specifies start or stop triggers for data collection
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           CollectionPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         CollectionPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *CollectionPolicy) Reset()                    { *m = CollectionPolicy{} }
func (m *CollectionPolicy) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicy) ProtoMessage()               {}
func (*CollectionPolicy) Descriptor() ([]byte, []int) { return fileDescriptorCollection, []int{1} }

func (m *CollectionPolicy) GetSpec() CollectionPolicySpec {
	if m != nil {
		return m.Spec
	}
	return CollectionPolicySpec{}
}

func (m *CollectionPolicy) GetStatus() CollectionPolicyStatus {
	if m != nil {
		return m.Status
	}
	return CollectionPolicyStatus{}
}

type CollectionPolicyList struct {
	// list of monitoring policies that refer to this collection policy
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*CollectionPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *CollectionPolicyList) Reset()                    { *m = CollectionPolicyList{} }
func (m *CollectionPolicyList) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicyList) ProtoMessage()               {}
func (*CollectionPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorCollection, []int{2} }

func (m *CollectionPolicyList) GetItems() []*CollectionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type CollectionPolicySpec struct {
	Attributes []string            `protobuf:"bytes,1,rep,name=Attributes" json:"attributes,omitempty"`
	Triggers   []CollectionTrigger `protobuf:"bytes,3,rep,name=Triggers" json:"triggers,omitempty"`
}

func (m *CollectionPolicySpec) Reset()                    { *m = CollectionPolicySpec{} }
func (m *CollectionPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicySpec) ProtoMessage()               {}
func (*CollectionPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorCollection, []int{3} }

func (m *CollectionPolicySpec) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CollectionPolicySpec) GetTriggers() []CollectionTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type CollectionPolicyStatus struct {
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
}

func (m *CollectionPolicyStatus) Reset()                    { *m = CollectionPolicyStatus{} }
func (m *CollectionPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicyStatus) ProtoMessage()               {}
func (*CollectionPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorCollection, []int{4} }

func (m *CollectionPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

type CollectionTrigger struct {
	ConditionalTrigger map[string]string `protobuf:"bytes,1,rep,name=ConditionalTrigger" json:"conditional-trigger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeTrigger        string            `protobuf:"bytes,2,opt,name=TimeTrigger,proto3" json:"time-trigger,omitempty"`
}

func (m *CollectionTrigger) Reset()                    { *m = CollectionTrigger{} }
func (m *CollectionTrigger) String() string            { return proto.CompactTextString(m) }
func (*CollectionTrigger) ProtoMessage()               {}
func (*CollectionTrigger) Descriptor() ([]byte, []int) { return fileDescriptorCollection, []int{5} }

func (m *CollectionTrigger) GetConditionalTrigger() map[string]string {
	if m != nil {
		return m.ConditionalTrigger
	}
	return nil
}

func (m *CollectionTrigger) GetTimeTrigger() string {
	if m != nil {
		return m.TimeTrigger
	}
	return ""
}

func init() {
	proto.RegisterType((*AutoMsgCollectionPolicyWatchHelper)(nil), "collection.AutoMsgCollectionPolicyWatchHelper")
	proto.RegisterType((*CollectionPolicy)(nil), "collection.CollectionPolicy")
	proto.RegisterType((*CollectionPolicyList)(nil), "collection.CollectionPolicyList")
	proto.RegisterType((*CollectionPolicySpec)(nil), "collection.CollectionPolicySpec")
	proto.RegisterType((*CollectionPolicyStatus)(nil), "collection.CollectionPolicyStatus")
	proto.RegisterType((*CollectionTrigger)(nil), "collection.CollectionTrigger")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectionPolicyV1 service

type CollectionPolicyV1Client interface {
	AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectionPolicyList, error)
	AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectionPolicyV1_AutoWatchCollectionPolicyClient, error)
}

type collectionPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewCollectionPolicyV1Client(cc *grpc.ClientConn) CollectionPolicyV1Client {
	return &collectionPolicyV1Client{cc}
}

func (c *collectionPolicyV1Client) AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/collection.CollectionPolicyV1/AutoAddCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/collection.CollectionPolicyV1/AutoDeleteCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/collection.CollectionPolicyV1/AutoGetCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectionPolicyList, error) {
	out := new(CollectionPolicyList)
	err := grpc.Invoke(ctx, "/collection.CollectionPolicyV1/AutoListCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/collection.CollectionPolicyV1/AutoUpdateCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectionPolicyV1_AutoWatchCollectionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectionPolicyV1_serviceDesc.Streams[0], c.cc, "/collection.CollectionPolicyV1/AutoWatchCollectionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionPolicyV1AutoWatchCollectionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectionPolicyV1_AutoWatchCollectionPolicyClient interface {
	Recv() (*AutoMsgCollectionPolicyWatchHelper, error)
	grpc.ClientStream
}

type collectionPolicyV1AutoWatchCollectionPolicyClient struct {
	grpc.ClientStream
}

func (x *collectionPolicyV1AutoWatchCollectionPolicyClient) Recv() (*AutoMsgCollectionPolicyWatchHelper, error) {
	m := new(AutoMsgCollectionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CollectionPolicyV1 service

type CollectionPolicyV1Server interface {
	AutoAddCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoDeleteCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoGetCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoListCollectionPolicy(context.Context, *api.ListWatchOptions) (*CollectionPolicyList, error)
	AutoUpdateCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoWatchCollectionPolicy(*api.ListWatchOptions, CollectionPolicyV1_AutoWatchCollectionPolicyServer) error
}

func RegisterCollectionPolicyV1Server(s *grpc.Server, srv CollectionPolicyV1Server) {
	s.RegisterService(&_CollectionPolicyV1_serviceDesc, srv)
}

func _CollectionPolicyV1_AutoAddCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoAddCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.CollectionPolicyV1/AutoAddCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoAddCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoDeleteCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoDeleteCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.CollectionPolicyV1/AutoDeleteCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoDeleteCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoGetCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoGetCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.CollectionPolicyV1/AutoGetCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoGetCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoListCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoListCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.CollectionPolicyV1/AutoListCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoListCollectionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoUpdateCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoUpdateCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.CollectionPolicyV1/AutoUpdateCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoUpdateCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoWatchCollectionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionPolicyV1Server).AutoWatchCollectionPolicy(m, &collectionPolicyV1AutoWatchCollectionPolicyServer{stream})
}

type CollectionPolicyV1_AutoWatchCollectionPolicyServer interface {
	Send(*AutoMsgCollectionPolicyWatchHelper) error
	grpc.ServerStream
}

type collectionPolicyV1AutoWatchCollectionPolicyServer struct {
	grpc.ServerStream
}

func (x *collectionPolicyV1AutoWatchCollectionPolicyServer) Send(m *AutoMsgCollectionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _CollectionPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collection.CollectionPolicyV1",
	HandlerType: (*CollectionPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoAddCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoDeleteCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoGetCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoGetCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoListCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoListCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoUpdateCollectionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchCollectionPolicy",
			Handler:       _CollectionPolicyV1_AutoWatchCollectionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "collection.proto",
}

func (m *AutoMsgCollectionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCollectionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCollection(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCollection(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CollectionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *CollectionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCollection(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCollection(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CollectionPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Triggers) > 0 {
		for _, msg := range m.Triggers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCollection(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CollectionPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CollectionTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionTrigger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ConditionalTrigger) > 0 {
		for k := range m.ConditionalTrigger {
			dAtA[i] = 0xa
			i++
			v := m.ConditionalTrigger[k]
			mapSize := 1 + len(k) + sovCollection(uint64(len(k))) + 1 + len(v) + sovCollection(uint64(len(v)))
			i = encodeVarintCollection(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCollection(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCollection(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TimeTrigger) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCollection(dAtA, i, uint64(len(m.TimeTrigger)))
		i += copy(dAtA[i:], m.TimeTrigger)
	}
	return i, nil
}

func encodeVarintCollection(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgCollectionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovCollection(uint64(l))
	}
	return n
}

func (m *CollectionPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovCollection(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovCollection(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovCollection(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovCollection(uint64(l))
	return n
}

func (m *CollectionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovCollection(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovCollection(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCollection(uint64(l))
		}
	}
	return n
}

func (m *CollectionPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 1 + l + sovCollection(uint64(l))
		}
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovCollection(uint64(l))
		}
	}
	return n
}

func (m *CollectionPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovCollection(uint64(l))
		}
	}
	return n
}

func (m *CollectionTrigger) Size() (n int) {
	var l int
	_ = l
	if len(m.ConditionalTrigger) > 0 {
		for k, v := range m.ConditionalTrigger {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCollection(uint64(len(k))) + 1 + len(v) + sovCollection(uint64(len(v)))
			n += mapEntrySize + 1 + sovCollection(uint64(mapEntrySize))
		}
	}
	l = len(m.TimeTrigger)
	if l > 0 {
		n += 1 + l + sovCollection(uint64(l))
	}
	return n
}

func sovCollection(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCollection(x uint64) (n int) {
	return sovCollection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgCollectionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCollectionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCollectionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &CollectionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CollectionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, CollectionTrigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionalTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConditionalTrigger == nil {
				m.ConditionalTrigger = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollection
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollection
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCollection
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollection
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCollection
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCollection(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCollection
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConditionalTrigger[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTrigger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeTrigger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCollection
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCollection
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCollection(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCollection = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollection   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("collection.proto", fileDescriptorCollection) }

var fileDescriptorCollection = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0xb6, 0x13, 0x92, 0x71, 0xda, 0x86, 0xc1, 0xa4, 0xeb, 0x55, 0x1a, 0x87, 0x45,
	0x95, 0x42, 0x9b, 0x78, 0xdb, 0x20, 0xa0, 0x58, 0x95, 0x20, 0x2e, 0x11, 0x20, 0x1a, 0x5c, 0x52,
	0x17, 0xce, 0xe3, 0xf5, 0x63, 0x33, 0x74, 0x77, 0x67, 0xf1, 0xce, 0xa6, 0xb2, 0x50, 0x2f, 0x18,
	0x10, 0x27, 0x0e, 0x34, 0x17, 0x7a, 0x2c, 0x07, 0xa4, 0x1e, 0xb9, 0x20, 0xbe, 0x41, 0x8f, 0x15,
	0x5c, 0x50, 0x0f, 0x16, 0x8a, 0x38, 0xf9, 0x53, 0xa0, 0x99, 0x1d, 0x3b, 0xdb, 0xd8, 0xdd, 0xe4,
	0x90, 0x9b, 0xe7, 0xcd, 0x7b, 0xff, 0xf9, 0xbd, 0xf7, 0x66, 0xe7, 0x19, 0x2f, 0x38, 0xdc, 0xf3,
	0xc0, 0x11, 0x8c, 0x07, 0xd5, 0xb0, 0xc3, 0x05, 0x27, 0xf8, 0xd0, 0x62, 0x2e, 0xb9, 0x9c, 0xbb,
	0x1e, 0xd8, 0x34, 0x64, 0x36, 0x0d, 0x02, 0x2e, 0xa8, 0x34, 0x47, 0x89, 0xa7, 0xb9, 0xe5, 0x32,
	0xb1, 0x1b, 0xb7, 0xaa, 0x0e, 0xf7, 0xed, 0x10, 0x82, 0x88, 0x06, 0x6d, 0x6e, 0x47, 0xf7, 0xec,
	0x3d, 0x08, 0x98, 0x03, 0x76, 0x2c, 0x98, 0x17, 0xc9, 0x50, 0x17, 0x82, 0x74, 0xb4, 0xcd, 0x02,
	0xc7, 0x8b, 0xdb, 0x30, 0x94, 0x59, 0x4f, 0xc9, 0xb8, 0xdc, 0xe5, 0xb6, 0x32, 0xb7, 0xe2, 0x2f,
	0xd5, 0x4a, 0x2d, 0xd4, 0x2f, 0xed, 0x7e, 0xf1, 0x05, 0xa7, 0x4a, 0x46, 0x1f, 0x04, 0x4d, 0xdc,
	0xac, 0xaf, 0xb1, 0xb5, 0x19, 0x0b, 0xbe, 0x1d, 0xb9, 0x37, 0x46, 0xf9, 0xdc, 0xe2, 0x1e, 0x73,
	0xba, 0x5f, 0x50, 0xe1, 0xec, 0x7e, 0x04, 0x5e, 0x08, 0x1d, 0x32, 0x8f, 0x0b, 0xcd, 0x6e, 0x08,
	0x06, 0x5a, 0x41, 0xab, 0x73, 0x64, 0x0d, 0xcf, 0x34, 0x5a, 0x5f, 0x81, 0x23, 0x8c, 0xdc, 0x0a,
	0x5a, 0x2d, 0x6e, 0x2c, 0x55, 0x53, 0xd5, 0x39, 0x2a, 0x53, 0x3b, 0xf7, 0x6c, 0xbf, 0x54, 0xbc,
	0x27, 0xc5, 0x76, 0x95, 0x98, 0xf5, 0x67, 0x0e, 0x2f, 0x1c, 0xf5, 0x22, 0x57, 0x30, 0x6a, 0x2a,
	0xf9, 0xe2, 0xc6, 0x99, 0x2a, 0x0d, 0x59, 0x55, 0x9e, 0xb7, 0x0d, 0x82, 0xd6, 0x5f, 0x79, 0xd2,
	0xaf, 0x4c, 0x3d, 0xed, 0x57, 0xd0, 0xa0, 0x5f, 0x79, 0x69, 0x8d, 0x05, 0x1e, 0x0b, 0x60, 0x07,
	0x35, 0xc9, 0xbb, 0x18, 0x35, 0x34, 0xc0, 0x39, 0x15, 0x91, 0x30, 0xa9, 0x18, 0x33, 0x15, 0x73,
	0x56, 0x66, 0xbb, 0xc6, 0x7d, 0x26, 0xc0, 0x0f, 0x45, 0x77, 0x07, 0x35, 0xc8, 0x4d, 0x5c, 0xb8,
	0x1d, 0x82, 0x63, 0xe4, 0x55, 0xf4, 0x4a, 0x16, 0xbe, 0xf4, 0xab, 0x2f, 0x4a, 0x39, 0x29, 0x15,
	0x85, 0xe0, 0xa4, 0xa4, 0x94, 0x0a, 0x69, 0xe2, 0x99, 0xdb, 0x82, 0x8a, 0x38, 0x32, 0x0a, 0x4a,
	0xcf, 0xca, 0xd4, 0x53, 0x9e, 0x75, 0x43, 0x2b, 0x2e, 0x44, 0x6a, 0x9d, 0xd2, 0xd4, 0x5a, 0xb5,
	0xd2, 0x5f, 0xdf, 0x97, 0x53, 0xb7, 0x2e, 0x89, 0xb6, 0x1e, 0x21, 0x5c, 0x3a, 0x2a, 0x79, 0x93,
	0x45, 0x82, 0x58, 0xb2, 0x7e, 0xb9, 0x49, 0xf5, 0x9b, 0x1d, 0xd6, 0x82, 0xbc, 0x81, 0x67, 0xa5,
	0xaf, 0xb4, 0xea, 0xd4, 0x13, 0xd7, 0xa1, 0x31, 0xe5, 0x7a, 0x19, 0x4f, 0x7f, 0x2c, 0xc0, 0x97,
	0x29, 0xe5, 0x8f, 0xed, 0xf0, 0xd9, 0x67, 0xfb, 0x25, 0xec, 0xb1, 0x48, 0xe8, 0x06, 0xff, 0x36,
	0x01, 0x52, 0x55, 0xea, 0x1a, 0xc6, 0x9b, 0x42, 0x74, 0x58, 0x2b, 0x16, 0x10, 0x19, 0x68, 0x25,
	0xbf, 0x3a, 0x57, 0x37, 0x06, 0xfd, 0x4a, 0x89, 0x8e, 0xac, 0xa9, 0x4a, 0xa4, 0x7c, 0xc9, 0x1d,
	0x3c, 0xdb, 0xec, 0x30, 0xd7, 0x85, 0x4e, 0x64, 0xe4, 0x15, 0xd2, 0x85, 0xc9, 0x48, 0xda, 0x2b,
	0xb9, 0x01, 0x83, 0x7e, 0x85, 0x08, 0x1d, 0x96, 0x12, 0x1e, 0x49, 0x59, 0x77, 0xf1, 0xe2, 0xe4,
	0x06, 0x91, 0xcf, 0x30, 0xd9, 0xe6, 0x01, 0x13, 0xbc, 0xc3, 0x02, 0x57, 0xed, 0xb0, 0x11, 0xf2,
	0x6b, 0x83, 0x7e, 0xe5, 0x82, 0x3f, 0xda, 0x5d, 0x0f, 0xf5, 0x76, 0xea, 0x88, 0x09, 0xc1, 0xd6,
	0xaf, 0x39, 0xfc, 0xf2, 0x18, 0x28, 0xf9, 0x11, 0x61, 0x72, 0x83, 0x07, 0x6d, 0x26, 0x8d, 0xd4,
	0xd3, 0x66, 0x75, 0x52, 0x71, 0xe3, 0xad, 0xcc, 0x24, 0xab, 0xe3, 0x71, 0x5b, 0x81, 0xe8, 0x74,
	0x13, 0x40, 0xe7, 0x70, 0x73, 0x5d, 0x17, 0x21, 0x0d, 0x38, 0x1e, 0x4b, 0xae, 0xe3, 0x62, 0x93,
	0xf9, 0x30, 0x44, 0x90, 0xb7, 0x69, 0xae, 0x6e, 0x0e, 0xfa, 0x95, 0x45, 0xc1, 0x7c, 0x98, 0x20,
	0x92, 0x76, 0x37, 0xb7, 0xf0, 0xf9, 0x17, 0xf0, 0x90, 0x05, 0x9c, 0xbf, 0x0b, 0xdd, 0xe4, 0xf5,
	0xd8, 0x91, 0x3f, 0x49, 0x09, 0x4f, 0xef, 0x51, 0x2f, 0x86, 0xe4, 0x90, 0x9d, 0x64, 0x51, 0xcb,
	0x5d, 0x43, 0x1b, 0x3f, 0xcc, 0xca, 0x7a, 0x3c, 0xdf, 0x93, 0xcf, 0xaf, 0x92, 0x9f, 0x10, 0x3e,
	0x2f, 0x1f, 0xaa, 0xcd, 0x76, 0x7b, 0xec, 0xed, 0xc8, 0xbc, 0x9d, 0x66, 0xe6, 0xae, 0xf5, 0xce,
	0x3f, 0xfb, 0x25, 0xf4, 0xfb, 0x77, 0xe5, 0x19, 0xa7, 0x03, 0x54, 0xc0, 0xb7, 0x7f, 0xff, 0xf7,
	0x20, 0xf7, 0x3a, 0x9e, 0xaa, 0xa1, 0x4b, 0xd6, 0x92, 0xfd, 0x4d, 0xa3, 0xda, 0x84, 0x80, 0x06,
	0xe2, 0xbe, 0x7d, 0xf4, 0x4b, 0x24, 0xbf, 0x20, 0x6c, 0x4a, 0xa0, 0x0f, 0xc0, 0x03, 0x01, 0xa7,
	0xca, 0xf4, 0xde, 0x90, 0xa9, 0xad, 0xb4, 0x15, 0xd3, 0x65, 0x3c, 0x55, 0x9b, 0xba, 0x74, 0x31,
	0x0b, 0x49, 0xee, 0x7d, 0x4a, 0x7d, 0xb8, 0x4f, 0x1e, 0xe8, 0x62, 0x7d, 0x08, 0xe2, 0x54, 0xc1,
	0xae, 0x6b, 0xb0, 0xbc, 0x0b, 0xe2, 0x90, 0x8a, 0x9c, 0x90, 0x8a, 0x62, 0x43, 0x42, 0xc9, 0xd7,
	0x66, 0x8c, 0xea, 0xd5, 0xd1, 0x43, 0xa4, 0xc6, 0x4e, 0x23, 0x54, 0x23, 0xd0, 0xcc, 0x7c, 0x9a,
	0xa5, 0xb7, 0x35, 0xaf, 0x91, 0x0a, 0xf2, 0xfd, 0x21, 0x0f, 0x75, 0x53, 0xee, 0x84, 0x6d, 0x7a,
	0xca, 0x4d, 0x79, 0x7f, 0xd8, 0x94, 0x58, 0x69, 0xab, 0xf4, 0xd7, 0xd4, 0x45, 0x31, 0x4f, 0x98,
	0x7f, 0x84, 0xcb, 0x92, 0x4d, 0x25, 0x78, 0xd2, 0x02, 0x54, 0xd3, 0x4c, 0xc7, 0x0f, 0x6a, 0xeb,
	0x8c, 0xa6, 0x9c, 0x56, 0x03, 0xf7, 0x0a, 0x32, 0xff, 0x40, 0x3f, 0xf7, 0xca, 0xb9, 0xbd, 0xab,
	0x0f, 0x7b, 0xe3, 0xd3, 0xe4, 0x51, 0xaf, 0x3c, 0x36, 0x88, 0x1f, 0xf7, 0xca, 0x9f, 0x4c, 0x18,
	0xcf, 0xb2, 0xe3, 0x24, 0x1f, 0xc6, 0x82, 0xe8, 0x4b, 0x79, 0xc2, 0xa4, 0x1f, 0xf7, 0xca, 0x6f,
	0x4f, 0x90, 0x2b, 0x84, 0x3c, 0x12, 0x66, 0xe6, 0x07, 0x56, 0x9f, 0x7f, 0x72, 0xb0, 0x8c, 0x9e,
	0x1e, 0x2c, 0xa3, 0x7f, 0x0f, 0x96, 0xd1, 0x2d, 0xd4, 0x9a, 0x51, 0x7f, 0x58, 0xde, 0xfc, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0xe5, 0xc5, 0x58, 0x8b, 0x09, 0x00, 0x00,
}
