// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_cluster.proto
*/
package ctkit

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/cluster"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/shardworkers"
)

// Cluster is a wrapper object that implements additional functionality
type Cluster struct {
	sync.Mutex
	cluster.Cluster
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Cluster) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Cluster_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().Cluster().UpdateStatus(context.Background(), &obj.Cluster)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().Cluster().Create(context.Background(), &obj.Cluster)
	}

	return nil
}

// ClusterHandler is the event handler for Cluster object
type ClusterHandler interface {
	OnClusterCreate(obj *Cluster) error
	OnClusterUpdate(oldObj *Cluster, newObj *cluster.Cluster) error
	OnClusterDelete(obj *Cluster) error
}

// handleClusterEvent handles Cluster events from watcher
func (ct *ctrlerCtx) handleClusterEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Cluster:
		eobj := evt.Object.(*cluster.Cluster)
		kind := "Cluster"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		clusterHandler := handler.(ClusterHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Cluster{
					Cluster:    *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Cluster_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = clusterHandler.OnClusterCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Cluster)

				ct.stats.Counter("Cluster_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = clusterHandler.OnClusterUpdate(obj, eobj)
				obj.Cluster = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Cluster)

			ct.stats.Counter("Cluster_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = clusterHandler.OnClusterDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Cluster watch channel", tp)
	}

	return nil
}

// handleClusterEventParallel handles Cluster events from watcher
func (ct *ctrlerCtx) handleClusterEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Cluster:
		eobj := evt.Object.(*cluster.Cluster)
		kind := "Cluster"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		clusterHandler := handler.(ClusterHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.Cluster)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Cluster{
						Cluster:    *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Cluster_Created_Events").Inc()
					obj.Lock()
					err = clusterHandler.OnClusterCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Cluster.GetKey())
					}
				} else {
					obj := fobj.(*Cluster)
					ct.stats.Counter("Cluster_Updated_Events").Inc()
					obj.Lock()
					err = clusterHandler.OnClusterUpdate(obj, eobj)
					obj.Cluster = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Cluster", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.Cluster)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Cluster)
				ct.stats.Counter("Cluster_Deleted_Events").Inc()
				obj.Lock()
				err = clusterHandler.OnClusterDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Cluster.GetKey())
				return nil
			}
			ct.runJob("Cluster", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Cluster watch channel", tp)
	}

	return nil
}

// diffCluster does a diff of Cluster objects between local cache and API server
func (ct *ctrlerCtx) diffCluster(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().Cluster().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffCluster(): ClusterList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.Cluster)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Cluster().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffCluster(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Cluster,
			}
			ct.handleClusterEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffCluster(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleClusterEvent(&evt)
	}
}

func (ct *ctrlerCtx) runClusterWatcher() {
	kind := "Cluster"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "ClusterWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffCluster(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Cluster_Watch").Inc()
		defer ct.stats.Counter("Cluster_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Cluster_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Cluster object watcher
				wt, werr := apicl.ClusterV1().Cluster().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffCluster(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Cluster_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleClusterEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchCluster starts watch on Cluster object
func (ct *ctrlerCtx) WatchCluster(handler ClusterHandler) error {
	kind := "Cluster"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Cluster watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Cluster watcher in a go routine
	ct.runClusterWatcher()

	return nil
}

// StopWatchCluster stops watch on Cluster object
func (ct *ctrlerCtx) StopWatchCluster(handler ClusterHandler) error {
	kind := "Cluster"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Cluster watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// ClusterAPI returns
type ClusterAPI interface {
	Create(obj *cluster.Cluster) error
	CreateEvent(obj *cluster.Cluster) error
	Update(obj *cluster.Cluster) error
	Delete(obj *cluster.Cluster) error
	Find(meta *api.ObjectMeta) (*Cluster, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Cluster, error)
	Watch(handler ClusterHandler) error
	StopWatch(handler ClusterHandler) error
}

// dummy struct that implements ClusterAPI
type clusterAPI struct {
	ct *ctrlerCtx
}

// Create creates Cluster object
func (api *clusterAPI) Create(obj *cluster.Cluster) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Cluster().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Cluster().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleClusterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Cluster object and synchronously triggers local event
func (api *clusterAPI) CreateEvent(obj *cluster.Cluster) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Cluster().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Cluster().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleClusterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Cluster object
func (api *clusterAPI) Update(obj *cluster.Cluster) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Cluster().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleClusterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Cluster object
func (api *clusterAPI) Delete(obj *cluster.Cluster) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Cluster().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleClusterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *clusterAPI) Find(meta *api.ObjectMeta) (*Cluster, error) {
	// find the object
	obj, err := api.ct.FindObject("Cluster", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Cluster:
		hobj := obj.(*Cluster)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Cluster objects
func (api *clusterAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Cluster, error) {
	var objlist []*Cluster
	objs, err := api.ct.List("Cluster", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Cluster:
			eobj := obj.(*Cluster)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Cluster", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Cluster object
func (api *clusterAPI) Watch(handler ClusterHandler) error {
	api.ct.startWorkerPool("Cluster")
	return api.ct.WatchCluster(handler)
}

// StopWatch stop watch for Tenant Cluster object
func (api *clusterAPI) StopWatch(handler ClusterHandler) error {
	api.ct.Lock()
	api.ct.workPools["Cluster"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchCluster(handler)
}

// Cluster returns ClusterAPI
func (ct *ctrlerCtx) Cluster() ClusterAPI {
	return &clusterAPI{ct: ct}
}

// Node is a wrapper object that implements additional functionality
type Node struct {
	sync.Mutex
	cluster.Node
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Node) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Node_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().Node().UpdateStatus(context.Background(), &obj.Node)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().Node().Create(context.Background(), &obj.Node)
	}

	return nil
}

// NodeHandler is the event handler for Node object
type NodeHandler interface {
	OnNodeCreate(obj *Node) error
	OnNodeUpdate(oldObj *Node, newObj *cluster.Node) error
	OnNodeDelete(obj *Node) error
}

// handleNodeEvent handles Node events from watcher
func (ct *ctrlerCtx) handleNodeEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Node:
		eobj := evt.Object.(*cluster.Node)
		kind := "Node"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		nodeHandler := handler.(NodeHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Node{
					Node:       *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Node_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = nodeHandler.OnNodeCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Node)

				ct.stats.Counter("Node_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = nodeHandler.OnNodeUpdate(obj, eobj)
				obj.Node = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Node)

			ct.stats.Counter("Node_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = nodeHandler.OnNodeDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Node watch channel", tp)
	}

	return nil
}

// handleNodeEventParallel handles Node events from watcher
func (ct *ctrlerCtx) handleNodeEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Node:
		eobj := evt.Object.(*cluster.Node)
		kind := "Node"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		nodeHandler := handler.(NodeHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.Node)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Node{
						Node:       *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Node_Created_Events").Inc()
					obj.Lock()
					err = nodeHandler.OnNodeCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Node.GetKey())
					}
				} else {
					obj := fobj.(*Node)
					ct.stats.Counter("Node_Updated_Events").Inc()
					obj.Lock()
					err = nodeHandler.OnNodeUpdate(obj, eobj)
					obj.Node = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Node", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.Node)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Node)
				ct.stats.Counter("Node_Deleted_Events").Inc()
				obj.Lock()
				err = nodeHandler.OnNodeDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Node.GetKey())
				return nil
			}
			ct.runJob("Node", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Node watch channel", tp)
	}

	return nil
}

// diffNode does a diff of Node objects between local cache and API server
func (ct *ctrlerCtx) diffNode(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().Node().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffNode(): NodeList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.Node)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Node().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffNode(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Node,
			}
			ct.handleNodeEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffNode(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleNodeEvent(&evt)
	}
}

func (ct *ctrlerCtx) runNodeWatcher() {
	kind := "Node"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "NodeWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffNode(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Node_Watch").Inc()
		defer ct.stats.Counter("Node_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Node_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Node object watcher
				wt, werr := apicl.ClusterV1().Node().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffNode(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Node_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleNodeEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchNode starts watch on Node object
func (ct *ctrlerCtx) WatchNode(handler NodeHandler) error {
	kind := "Node"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Node watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Node watcher in a go routine
	ct.runNodeWatcher()

	return nil
}

// StopWatchNode stops watch on Node object
func (ct *ctrlerCtx) StopWatchNode(handler NodeHandler) error {
	kind := "Node"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Node watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// NodeAPI returns
type NodeAPI interface {
	Create(obj *cluster.Node) error
	CreateEvent(obj *cluster.Node) error
	Update(obj *cluster.Node) error
	Delete(obj *cluster.Node) error
	Find(meta *api.ObjectMeta) (*Node, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Node, error)
	Watch(handler NodeHandler) error
	StopWatch(handler NodeHandler) error
}

// dummy struct that implements NodeAPI
type nodeAPI struct {
	ct *ctrlerCtx
}

// Create creates Node object
func (api *nodeAPI) Create(obj *cluster.Node) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Node().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Node().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleNodeEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Node object and synchronously triggers local event
func (api *nodeAPI) CreateEvent(obj *cluster.Node) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Node().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Node().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleNodeEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Node object
func (api *nodeAPI) Update(obj *cluster.Node) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Node().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleNodeEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Node object
func (api *nodeAPI) Delete(obj *cluster.Node) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Node().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleNodeEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *nodeAPI) Find(meta *api.ObjectMeta) (*Node, error) {
	// find the object
	obj, err := api.ct.FindObject("Node", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Node:
		hobj := obj.(*Node)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Node objects
func (api *nodeAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Node, error) {
	var objlist []*Node
	objs, err := api.ct.List("Node", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Node:
			eobj := obj.(*Node)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Node", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Node object
func (api *nodeAPI) Watch(handler NodeHandler) error {
	api.ct.startWorkerPool("Node")
	return api.ct.WatchNode(handler)
}

// StopWatch stop watch for Tenant Node object
func (api *nodeAPI) StopWatch(handler NodeHandler) error {
	api.ct.Lock()
	api.ct.workPools["Node"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchNode(handler)
}

// Node returns NodeAPI
func (ct *ctrlerCtx) Node() NodeAPI {
	return &nodeAPI{ct: ct}
}

// Host is a wrapper object that implements additional functionality
type Host struct {
	sync.Mutex
	cluster.Host
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Host) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Host_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().Host().UpdateStatus(context.Background(), &obj.Host)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().Host().Create(context.Background(), &obj.Host)
	}

	return nil
}

// HostHandler is the event handler for Host object
type HostHandler interface {
	OnHostCreate(obj *Host) error
	OnHostUpdate(oldObj *Host, newObj *cluster.Host) error
	OnHostDelete(obj *Host) error
}

// handleHostEvent handles Host events from watcher
func (ct *ctrlerCtx) handleHostEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Host:
		eobj := evt.Object.(*cluster.Host)
		kind := "Host"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		hostHandler := handler.(HostHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Host{
					Host:       *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Host_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = hostHandler.OnHostCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Host)

				ct.stats.Counter("Host_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = hostHandler.OnHostUpdate(obj, eobj)
				obj.Host = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Host)

			ct.stats.Counter("Host_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = hostHandler.OnHostDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Host watch channel", tp)
	}

	return nil
}

// handleHostEventParallel handles Host events from watcher
func (ct *ctrlerCtx) handleHostEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Host:
		eobj := evt.Object.(*cluster.Host)
		kind := "Host"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		hostHandler := handler.(HostHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.Host)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Host{
						Host:       *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Host_Created_Events").Inc()
					obj.Lock()
					err = hostHandler.OnHostCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Host.GetKey())
					}
				} else {
					obj := fobj.(*Host)
					ct.stats.Counter("Host_Updated_Events").Inc()
					obj.Lock()
					err = hostHandler.OnHostUpdate(obj, eobj)
					obj.Host = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Host", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.Host)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Host)
				ct.stats.Counter("Host_Deleted_Events").Inc()
				obj.Lock()
				err = hostHandler.OnHostDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Host.GetKey())
				return nil
			}
			ct.runJob("Host", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Host watch channel", tp)
	}

	return nil
}

// diffHost does a diff of Host objects between local cache and API server
func (ct *ctrlerCtx) diffHost(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().Host().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffHost(): HostList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.Host)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Host().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffHost(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Host,
			}
			ct.handleHostEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffHost(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleHostEvent(&evt)
	}
}

func (ct *ctrlerCtx) runHostWatcher() {
	kind := "Host"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "HostWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffHost(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Host_Watch").Inc()
		defer ct.stats.Counter("Host_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Host_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Host object watcher
				wt, werr := apicl.ClusterV1().Host().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffHost(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Host_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleHostEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchHost starts watch on Host object
func (ct *ctrlerCtx) WatchHost(handler HostHandler) error {
	kind := "Host"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Host watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Host watcher in a go routine
	ct.runHostWatcher()

	return nil
}

// StopWatchHost stops watch on Host object
func (ct *ctrlerCtx) StopWatchHost(handler HostHandler) error {
	kind := "Host"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Host watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// HostAPI returns
type HostAPI interface {
	Create(obj *cluster.Host) error
	CreateEvent(obj *cluster.Host) error
	Update(obj *cluster.Host) error
	Delete(obj *cluster.Host) error
	Find(meta *api.ObjectMeta) (*Host, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Host, error)
	Watch(handler HostHandler) error
	StopWatch(handler HostHandler) error
}

// dummy struct that implements HostAPI
type hostAPI struct {
	ct *ctrlerCtx
}

// Create creates Host object
func (api *hostAPI) Create(obj *cluster.Host) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Host().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Host().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleHostEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Host object and synchronously triggers local event
func (api *hostAPI) CreateEvent(obj *cluster.Host) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Host().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Host().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleHostEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Host object
func (api *hostAPI) Update(obj *cluster.Host) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Host().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleHostEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Host object
func (api *hostAPI) Delete(obj *cluster.Host) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Host().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleHostEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *hostAPI) Find(meta *api.ObjectMeta) (*Host, error) {
	// find the object
	obj, err := api.ct.FindObject("Host", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Host:
		hobj := obj.(*Host)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Host objects
func (api *hostAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Host, error) {
	var objlist []*Host
	objs, err := api.ct.List("Host", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Host:
			eobj := obj.(*Host)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Host", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Host object
func (api *hostAPI) Watch(handler HostHandler) error {
	api.ct.startWorkerPool("Host")
	return api.ct.WatchHost(handler)
}

// StopWatch stop watch for Tenant Host object
func (api *hostAPI) StopWatch(handler HostHandler) error {
	api.ct.Lock()
	api.ct.workPools["Host"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchHost(handler)
}

// Host returns HostAPI
func (ct *ctrlerCtx) Host() HostAPI {
	return &hostAPI{ct: ct}
}

// DistributedServiceCard is a wrapper object that implements additional functionality
type DistributedServiceCard struct {
	sync.Mutex
	cluster.DistributedServiceCard
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *DistributedServiceCard) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("DistributedServiceCard_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().DistributedServiceCard().UpdateStatus(context.Background(), &obj.DistributedServiceCard)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().DistributedServiceCard().Create(context.Background(), &obj.DistributedServiceCard)
	}

	return nil
}

// DistributedServiceCardHandler is the event handler for DistributedServiceCard object
type DistributedServiceCardHandler interface {
	OnDistributedServiceCardCreate(obj *DistributedServiceCard) error
	OnDistributedServiceCardUpdate(oldObj *DistributedServiceCard, newObj *cluster.DistributedServiceCard) error
	OnDistributedServiceCardDelete(obj *DistributedServiceCard) error
}

// handleDistributedServiceCardEvent handles DistributedServiceCard events from watcher
func (ct *ctrlerCtx) handleDistributedServiceCardEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.DistributedServiceCard:
		eobj := evt.Object.(*cluster.DistributedServiceCard)
		kind := "DistributedServiceCard"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		distributedservicecardHandler := handler.(DistributedServiceCardHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &DistributedServiceCard{
					DistributedServiceCard: *eobj,
					HandlerCtx:             nil,
					ctrler:                 ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("DistributedServiceCard_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = distributedservicecardHandler.OnDistributedServiceCardCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*DistributedServiceCard)

				ct.stats.Counter("DistributedServiceCard_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = distributedservicecardHandler.OnDistributedServiceCardUpdate(obj, eobj)
				obj.DistributedServiceCard = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*DistributedServiceCard)

			ct.stats.Counter("DistributedServiceCard_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = distributedservicecardHandler.OnDistributedServiceCardDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on DistributedServiceCard watch channel", tp)
	}

	return nil
}

// handleDistributedServiceCardEventParallel handles DistributedServiceCard events from watcher
func (ct *ctrlerCtx) handleDistributedServiceCardEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.DistributedServiceCard:
		eobj := evt.Object.(*cluster.DistributedServiceCard)
		kind := "DistributedServiceCard"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		distributedservicecardHandler := handler.(DistributedServiceCardHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.DistributedServiceCard)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &DistributedServiceCard{
						DistributedServiceCard: *eobj,
						HandlerCtx:             nil,
						ctrler:                 ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("DistributedServiceCard_Created_Events").Inc()
					obj.Lock()
					err = distributedservicecardHandler.OnDistributedServiceCardCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.DistributedServiceCard.GetKey())
					}
				} else {
					obj := fobj.(*DistributedServiceCard)
					ct.stats.Counter("DistributedServiceCard_Updated_Events").Inc()
					obj.Lock()
					err = distributedservicecardHandler.OnDistributedServiceCardUpdate(obj, eobj)
					obj.DistributedServiceCard = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("DistributedServiceCard", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.DistributedServiceCard)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*DistributedServiceCard)
				ct.stats.Counter("DistributedServiceCard_Deleted_Events").Inc()
				obj.Lock()
				err = distributedservicecardHandler.OnDistributedServiceCardDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.DistributedServiceCard.GetKey())
				return nil
			}
			ct.runJob("DistributedServiceCard", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on DistributedServiceCard watch channel", tp)
	}

	return nil
}

// diffDistributedServiceCard does a diff of DistributedServiceCard objects between local cache and API server
func (ct *ctrlerCtx) diffDistributedServiceCard(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().DistributedServiceCard().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffDistributedServiceCard(): DistributedServiceCardList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.DistributedServiceCard)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.DistributedServiceCard().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffDistributedServiceCard(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.DistributedServiceCard,
			}
			ct.handleDistributedServiceCardEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffDistributedServiceCard(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleDistributedServiceCardEvent(&evt)
	}
}

func (ct *ctrlerCtx) runDistributedServiceCardWatcher() {
	kind := "DistributedServiceCard"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "DistributedServiceCardWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffDistributedServiceCard(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("DistributedServiceCard_Watch").Inc()
		defer ct.stats.Counter("DistributedServiceCard_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("DistributedServiceCard_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// DistributedServiceCard object watcher
				wt, werr := apicl.ClusterV1().DistributedServiceCard().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffDistributedServiceCard(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("DistributedServiceCard_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleDistributedServiceCardEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchDistributedServiceCard starts watch on DistributedServiceCard object
func (ct *ctrlerCtx) WatchDistributedServiceCard(handler DistributedServiceCardHandler) error {
	kind := "DistributedServiceCard"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("DistributedServiceCard watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run DistributedServiceCard watcher in a go routine
	ct.runDistributedServiceCardWatcher()

	return nil
}

// StopWatchDistributedServiceCard stops watch on DistributedServiceCard object
func (ct *ctrlerCtx) StopWatchDistributedServiceCard(handler DistributedServiceCardHandler) error {
	kind := "DistributedServiceCard"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("DistributedServiceCard watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// DistributedServiceCardAPI returns
type DistributedServiceCardAPI interface {
	Create(obj *cluster.DistributedServiceCard) error
	CreateEvent(obj *cluster.DistributedServiceCard) error
	Update(obj *cluster.DistributedServiceCard) error
	Delete(obj *cluster.DistributedServiceCard) error
	Find(meta *api.ObjectMeta) (*DistributedServiceCard, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*DistributedServiceCard, error)
	Watch(handler DistributedServiceCardHandler) error
	StopWatch(handler DistributedServiceCardHandler) error
}

// dummy struct that implements DistributedServiceCardAPI
type distributedservicecardAPI struct {
	ct *ctrlerCtx
}

// Create creates DistributedServiceCard object
func (api *distributedservicecardAPI) Create(obj *cluster.DistributedServiceCard) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().DistributedServiceCard().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().DistributedServiceCard().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleDistributedServiceCardEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates DistributedServiceCard object and synchronously triggers local event
func (api *distributedservicecardAPI) CreateEvent(obj *cluster.DistributedServiceCard) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().DistributedServiceCard().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().DistributedServiceCard().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleDistributedServiceCardEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on DistributedServiceCard object
func (api *distributedservicecardAPI) Update(obj *cluster.DistributedServiceCard) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().DistributedServiceCard().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleDistributedServiceCardEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes DistributedServiceCard object
func (api *distributedservicecardAPI) Delete(obj *cluster.DistributedServiceCard) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().DistributedServiceCard().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleDistributedServiceCardEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *distributedservicecardAPI) Find(meta *api.ObjectMeta) (*DistributedServiceCard, error) {
	// find the object
	obj, err := api.ct.FindObject("DistributedServiceCard", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *DistributedServiceCard:
		hobj := obj.(*DistributedServiceCard)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all DistributedServiceCard objects
func (api *distributedservicecardAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*DistributedServiceCard, error) {
	var objlist []*DistributedServiceCard
	objs, err := api.ct.List("DistributedServiceCard", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *DistributedServiceCard:
			eobj := obj.(*DistributedServiceCard)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for DistributedServiceCard", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for DistributedServiceCard object
func (api *distributedservicecardAPI) Watch(handler DistributedServiceCardHandler) error {
	api.ct.startWorkerPool("DistributedServiceCard")
	return api.ct.WatchDistributedServiceCard(handler)
}

// StopWatch stop watch for Tenant DistributedServiceCard object
func (api *distributedservicecardAPI) StopWatch(handler DistributedServiceCardHandler) error {
	api.ct.Lock()
	api.ct.workPools["DistributedServiceCard"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchDistributedServiceCard(handler)
}

// DistributedServiceCard returns DistributedServiceCardAPI
func (ct *ctrlerCtx) DistributedServiceCard() DistributedServiceCardAPI {
	return &distributedservicecardAPI{ct: ct}
}

// Tenant is a wrapper object that implements additional functionality
type Tenant struct {
	sync.Mutex
	cluster.Tenant
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Tenant) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Tenant_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().Tenant().UpdateStatus(context.Background(), &obj.Tenant)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().Tenant().Create(context.Background(), &obj.Tenant)
	}

	return nil
}

// TenantHandler is the event handler for Tenant object
type TenantHandler interface {
	OnTenantCreate(obj *Tenant) error
	OnTenantUpdate(oldObj *Tenant, newObj *cluster.Tenant) error
	OnTenantDelete(obj *Tenant) error
}

// handleTenantEvent handles Tenant events from watcher
func (ct *ctrlerCtx) handleTenantEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Tenant:
		eobj := evt.Object.(*cluster.Tenant)
		kind := "Tenant"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		tenantHandler := handler.(TenantHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Tenant{
					Tenant:     *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Tenant_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = tenantHandler.OnTenantCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Tenant)

				ct.stats.Counter("Tenant_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = tenantHandler.OnTenantUpdate(obj, eobj)
				obj.Tenant = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Tenant)

			ct.stats.Counter("Tenant_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = tenantHandler.OnTenantDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Tenant watch channel", tp)
	}

	return nil
}

// handleTenantEventParallel handles Tenant events from watcher
func (ct *ctrlerCtx) handleTenantEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Tenant:
		eobj := evt.Object.(*cluster.Tenant)
		kind := "Tenant"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		tenantHandler := handler.(TenantHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.Tenant)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Tenant{
						Tenant:     *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Tenant_Created_Events").Inc()
					obj.Lock()
					err = tenantHandler.OnTenantCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Tenant.GetKey())
					}
				} else {
					obj := fobj.(*Tenant)
					ct.stats.Counter("Tenant_Updated_Events").Inc()
					obj.Lock()
					err = tenantHandler.OnTenantUpdate(obj, eobj)
					obj.Tenant = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Tenant", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.Tenant)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Tenant)
				ct.stats.Counter("Tenant_Deleted_Events").Inc()
				obj.Lock()
				err = tenantHandler.OnTenantDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Tenant.GetKey())
				return nil
			}
			ct.runJob("Tenant", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Tenant watch channel", tp)
	}

	return nil
}

// diffTenant does a diff of Tenant objects between local cache and API server
func (ct *ctrlerCtx) diffTenant(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().Tenant().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffTenant(): TenantList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.Tenant)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Tenant().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffTenant(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Tenant,
			}
			ct.handleTenantEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffTenant(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleTenantEvent(&evt)
	}
}

func (ct *ctrlerCtx) runTenantWatcher() {
	kind := "Tenant"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "TenantWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffTenant(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Tenant_Watch").Inc()
		defer ct.stats.Counter("Tenant_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Tenant_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Tenant object watcher
				wt, werr := apicl.ClusterV1().Tenant().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffTenant(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Tenant_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleTenantEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchTenant starts watch on Tenant object
func (ct *ctrlerCtx) WatchTenant(handler TenantHandler) error {
	kind := "Tenant"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Tenant watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Tenant watcher in a go routine
	ct.runTenantWatcher()

	return nil
}

// StopWatchTenant stops watch on Tenant object
func (ct *ctrlerCtx) StopWatchTenant(handler TenantHandler) error {
	kind := "Tenant"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Tenant watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// TenantAPI returns
type TenantAPI interface {
	Create(obj *cluster.Tenant) error
	CreateEvent(obj *cluster.Tenant) error
	Update(obj *cluster.Tenant) error
	Delete(obj *cluster.Tenant) error
	Find(meta *api.ObjectMeta) (*Tenant, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Tenant, error)
	Watch(handler TenantHandler) error
	StopWatch(handler TenantHandler) error
}

// dummy struct that implements TenantAPI
type tenantAPI struct {
	ct *ctrlerCtx
}

// Create creates Tenant object
func (api *tenantAPI) Create(obj *cluster.Tenant) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Tenant().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Tenant().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleTenantEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Tenant object and synchronously triggers local event
func (api *tenantAPI) CreateEvent(obj *cluster.Tenant) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Tenant().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Tenant().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleTenantEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Tenant object
func (api *tenantAPI) Update(obj *cluster.Tenant) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Tenant().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleTenantEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Tenant object
func (api *tenantAPI) Delete(obj *cluster.Tenant) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Tenant().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleTenantEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *tenantAPI) Find(meta *api.ObjectMeta) (*Tenant, error) {
	// find the object
	obj, err := api.ct.FindObject("Tenant", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Tenant:
		hobj := obj.(*Tenant)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Tenant objects
func (api *tenantAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Tenant, error) {
	var objlist []*Tenant
	objs, err := api.ct.List("Tenant", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Tenant:
			eobj := obj.(*Tenant)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Tenant", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Tenant object
func (api *tenantAPI) Watch(handler TenantHandler) error {
	api.ct.startWorkerPool("Tenant")
	return api.ct.WatchTenant(handler)
}

// StopWatch stop watch for Tenant Tenant object
func (api *tenantAPI) StopWatch(handler TenantHandler) error {
	api.ct.Lock()
	api.ct.workPools["Tenant"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchTenant(handler)
}

// Tenant returns TenantAPI
func (ct *ctrlerCtx) Tenant() TenantAPI {
	return &tenantAPI{ct: ct}
}

// Version is a wrapper object that implements additional functionality
type Version struct {
	sync.Mutex
	cluster.Version
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Version) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Version_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().Version().UpdateStatus(context.Background(), &obj.Version)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().Version().Create(context.Background(), &obj.Version)
	}

	return nil
}

// VersionHandler is the event handler for Version object
type VersionHandler interface {
	OnVersionCreate(obj *Version) error
	OnVersionUpdate(oldObj *Version, newObj *cluster.Version) error
	OnVersionDelete(obj *Version) error
}

// handleVersionEvent handles Version events from watcher
func (ct *ctrlerCtx) handleVersionEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Version:
		eobj := evt.Object.(*cluster.Version)
		kind := "Version"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		versionHandler := handler.(VersionHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Version{
					Version:    *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Version_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = versionHandler.OnVersionCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Version)

				ct.stats.Counter("Version_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = versionHandler.OnVersionUpdate(obj, eobj)
				obj.Version = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Version)

			ct.stats.Counter("Version_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = versionHandler.OnVersionDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Version watch channel", tp)
	}

	return nil
}

// handleVersionEventParallel handles Version events from watcher
func (ct *ctrlerCtx) handleVersionEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.Version:
		eobj := evt.Object.(*cluster.Version)
		kind := "Version"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		versionHandler := handler.(VersionHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.Version)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Version{
						Version:    *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Version_Created_Events").Inc()
					obj.Lock()
					err = versionHandler.OnVersionCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Version.GetKey())
					}
				} else {
					obj := fobj.(*Version)
					ct.stats.Counter("Version_Updated_Events").Inc()
					obj.Lock()
					err = versionHandler.OnVersionUpdate(obj, eobj)
					obj.Version = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Version", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.Version)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Version)
				ct.stats.Counter("Version_Deleted_Events").Inc()
				obj.Lock()
				err = versionHandler.OnVersionDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Version.GetKey())
				return nil
			}
			ct.runJob("Version", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Version watch channel", tp)
	}

	return nil
}

// diffVersion does a diff of Version objects between local cache and API server
func (ct *ctrlerCtx) diffVersion(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().Version().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffVersion(): VersionList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.Version)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Version().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffVersion(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Version,
			}
			ct.handleVersionEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffVersion(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleVersionEvent(&evt)
	}
}

func (ct *ctrlerCtx) runVersionWatcher() {
	kind := "Version"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "VersionWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffVersion(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Version_Watch").Inc()
		defer ct.stats.Counter("Version_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Version_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Version object watcher
				wt, werr := apicl.ClusterV1().Version().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffVersion(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Version_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleVersionEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchVersion starts watch on Version object
func (ct *ctrlerCtx) WatchVersion(handler VersionHandler) error {
	kind := "Version"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Version watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Version watcher in a go routine
	ct.runVersionWatcher()

	return nil
}

// StopWatchVersion stops watch on Version object
func (ct *ctrlerCtx) StopWatchVersion(handler VersionHandler) error {
	kind := "Version"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Version watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// VersionAPI returns
type VersionAPI interface {
	Create(obj *cluster.Version) error
	CreateEvent(obj *cluster.Version) error
	Update(obj *cluster.Version) error
	Delete(obj *cluster.Version) error
	Find(meta *api.ObjectMeta) (*Version, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Version, error)
	Watch(handler VersionHandler) error
	StopWatch(handler VersionHandler) error
}

// dummy struct that implements VersionAPI
type versionAPI struct {
	ct *ctrlerCtx
}

// Create creates Version object
func (api *versionAPI) Create(obj *cluster.Version) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Version().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Version().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleVersionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Version object and synchronously triggers local event
func (api *versionAPI) CreateEvent(obj *cluster.Version) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Version().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().Version().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleVersionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Version object
func (api *versionAPI) Update(obj *cluster.Version) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Version().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleVersionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Version object
func (api *versionAPI) Delete(obj *cluster.Version) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().Version().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleVersionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *versionAPI) Find(meta *api.ObjectMeta) (*Version, error) {
	// find the object
	obj, err := api.ct.FindObject("Version", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Version:
		hobj := obj.(*Version)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Version objects
func (api *versionAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Version, error) {
	var objlist []*Version
	objs, err := api.ct.List("Version", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Version:
			eobj := obj.(*Version)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Version", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Version object
func (api *versionAPI) Watch(handler VersionHandler) error {
	api.ct.startWorkerPool("Version")
	return api.ct.WatchVersion(handler)
}

// StopWatch stop watch for Tenant Version object
func (api *versionAPI) StopWatch(handler VersionHandler) error {
	api.ct.Lock()
	api.ct.workPools["Version"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchVersion(handler)
}

// Version returns VersionAPI
func (ct *ctrlerCtx) Version() VersionAPI {
	return &versionAPI{ct: ct}
}

// ConfigurationSnapshot is a wrapper object that implements additional functionality
type ConfigurationSnapshot struct {
	sync.Mutex
	cluster.ConfigurationSnapshot
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *ConfigurationSnapshot) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("ConfigurationSnapshot_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().ConfigurationSnapshot().UpdateStatus(context.Background(), &obj.ConfigurationSnapshot)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().ConfigurationSnapshot().Create(context.Background(), &obj.ConfigurationSnapshot)
	}

	return nil
}

// ConfigurationSnapshotHandler is the event handler for ConfigurationSnapshot object
type ConfigurationSnapshotHandler interface {
	OnConfigurationSnapshotCreate(obj *ConfigurationSnapshot) error
	OnConfigurationSnapshotUpdate(oldObj *ConfigurationSnapshot, newObj *cluster.ConfigurationSnapshot) error
	OnConfigurationSnapshotDelete(obj *ConfigurationSnapshot) error
}

// handleConfigurationSnapshotEvent handles ConfigurationSnapshot events from watcher
func (ct *ctrlerCtx) handleConfigurationSnapshotEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.ConfigurationSnapshot:
		eobj := evt.Object.(*cluster.ConfigurationSnapshot)
		kind := "ConfigurationSnapshot"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		configurationsnapshotHandler := handler.(ConfigurationSnapshotHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &ConfigurationSnapshot{
					ConfigurationSnapshot: *eobj,
					HandlerCtx:            nil,
					ctrler:                ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("ConfigurationSnapshot_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = configurationsnapshotHandler.OnConfigurationSnapshotCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*ConfigurationSnapshot)

				ct.stats.Counter("ConfigurationSnapshot_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = configurationsnapshotHandler.OnConfigurationSnapshotUpdate(obj, eobj)
				obj.ConfigurationSnapshot = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*ConfigurationSnapshot)

			ct.stats.Counter("ConfigurationSnapshot_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = configurationsnapshotHandler.OnConfigurationSnapshotDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on ConfigurationSnapshot watch channel", tp)
	}

	return nil
}

// handleConfigurationSnapshotEventParallel handles ConfigurationSnapshot events from watcher
func (ct *ctrlerCtx) handleConfigurationSnapshotEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.ConfigurationSnapshot:
		eobj := evt.Object.(*cluster.ConfigurationSnapshot)
		kind := "ConfigurationSnapshot"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		configurationsnapshotHandler := handler.(ConfigurationSnapshotHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.ConfigurationSnapshot)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &ConfigurationSnapshot{
						ConfigurationSnapshot: *eobj,
						HandlerCtx:            nil,
						ctrler:                ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("ConfigurationSnapshot_Created_Events").Inc()
					obj.Lock()
					err = configurationsnapshotHandler.OnConfigurationSnapshotCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.ConfigurationSnapshot.GetKey())
					}
				} else {
					obj := fobj.(*ConfigurationSnapshot)
					ct.stats.Counter("ConfigurationSnapshot_Updated_Events").Inc()
					obj.Lock()
					err = configurationsnapshotHandler.OnConfigurationSnapshotUpdate(obj, eobj)
					obj.ConfigurationSnapshot = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("ConfigurationSnapshot", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.ConfigurationSnapshot)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*ConfigurationSnapshot)
				ct.stats.Counter("ConfigurationSnapshot_Deleted_Events").Inc()
				obj.Lock()
				err = configurationsnapshotHandler.OnConfigurationSnapshotDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.ConfigurationSnapshot.GetKey())
				return nil
			}
			ct.runJob("ConfigurationSnapshot", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on ConfigurationSnapshot watch channel", tp)
	}

	return nil
}

// diffConfigurationSnapshot does a diff of ConfigurationSnapshot objects between local cache and API server
func (ct *ctrlerCtx) diffConfigurationSnapshot(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().ConfigurationSnapshot().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffConfigurationSnapshot(): ConfigurationSnapshotList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.ConfigurationSnapshot)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.ConfigurationSnapshot().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffConfigurationSnapshot(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.ConfigurationSnapshot,
			}
			ct.handleConfigurationSnapshotEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffConfigurationSnapshot(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleConfigurationSnapshotEvent(&evt)
	}
}

func (ct *ctrlerCtx) runConfigurationSnapshotWatcher() {
	kind := "ConfigurationSnapshot"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "ConfigurationSnapshotWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffConfigurationSnapshot(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("ConfigurationSnapshot_Watch").Inc()
		defer ct.stats.Counter("ConfigurationSnapshot_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("ConfigurationSnapshot_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// ConfigurationSnapshot object watcher
				wt, werr := apicl.ClusterV1().ConfigurationSnapshot().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffConfigurationSnapshot(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("ConfigurationSnapshot_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleConfigurationSnapshotEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchConfigurationSnapshot starts watch on ConfigurationSnapshot object
func (ct *ctrlerCtx) WatchConfigurationSnapshot(handler ConfigurationSnapshotHandler) error {
	kind := "ConfigurationSnapshot"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("ConfigurationSnapshot watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run ConfigurationSnapshot watcher in a go routine
	ct.runConfigurationSnapshotWatcher()

	return nil
}

// StopWatchConfigurationSnapshot stops watch on ConfigurationSnapshot object
func (ct *ctrlerCtx) StopWatchConfigurationSnapshot(handler ConfigurationSnapshotHandler) error {
	kind := "ConfigurationSnapshot"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("ConfigurationSnapshot watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// ConfigurationSnapshotAPI returns
type ConfigurationSnapshotAPI interface {
	Create(obj *cluster.ConfigurationSnapshot) error
	CreateEvent(obj *cluster.ConfigurationSnapshot) error
	Update(obj *cluster.ConfigurationSnapshot) error
	Delete(obj *cluster.ConfigurationSnapshot) error
	Find(meta *api.ObjectMeta) (*ConfigurationSnapshot, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*ConfigurationSnapshot, error)
	Watch(handler ConfigurationSnapshotHandler) error
	StopWatch(handler ConfigurationSnapshotHandler) error
}

// dummy struct that implements ConfigurationSnapshotAPI
type configurationsnapshotAPI struct {
	ct *ctrlerCtx
}

// Create creates ConfigurationSnapshot object
func (api *configurationsnapshotAPI) Create(obj *cluster.ConfigurationSnapshot) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().ConfigurationSnapshot().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().ConfigurationSnapshot().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleConfigurationSnapshotEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates ConfigurationSnapshot object and synchronously triggers local event
func (api *configurationsnapshotAPI) CreateEvent(obj *cluster.ConfigurationSnapshot) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().ConfigurationSnapshot().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().ConfigurationSnapshot().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleConfigurationSnapshotEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on ConfigurationSnapshot object
func (api *configurationsnapshotAPI) Update(obj *cluster.ConfigurationSnapshot) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().ConfigurationSnapshot().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleConfigurationSnapshotEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes ConfigurationSnapshot object
func (api *configurationsnapshotAPI) Delete(obj *cluster.ConfigurationSnapshot) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().ConfigurationSnapshot().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleConfigurationSnapshotEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *configurationsnapshotAPI) Find(meta *api.ObjectMeta) (*ConfigurationSnapshot, error) {
	// find the object
	obj, err := api.ct.FindObject("ConfigurationSnapshot", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *ConfigurationSnapshot:
		hobj := obj.(*ConfigurationSnapshot)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all ConfigurationSnapshot objects
func (api *configurationsnapshotAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*ConfigurationSnapshot, error) {
	var objlist []*ConfigurationSnapshot
	objs, err := api.ct.List("ConfigurationSnapshot", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *ConfigurationSnapshot:
			eobj := obj.(*ConfigurationSnapshot)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for ConfigurationSnapshot", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for ConfigurationSnapshot object
func (api *configurationsnapshotAPI) Watch(handler ConfigurationSnapshotHandler) error {
	api.ct.startWorkerPool("ConfigurationSnapshot")
	return api.ct.WatchConfigurationSnapshot(handler)
}

// StopWatch stop watch for Tenant ConfigurationSnapshot object
func (api *configurationsnapshotAPI) StopWatch(handler ConfigurationSnapshotHandler) error {
	api.ct.Lock()
	api.ct.workPools["ConfigurationSnapshot"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchConfigurationSnapshot(handler)
}

// ConfigurationSnapshot returns ConfigurationSnapshotAPI
func (ct *ctrlerCtx) ConfigurationSnapshot() ConfigurationSnapshotAPI {
	return &configurationsnapshotAPI{ct: ct}
}

// SnapshotRestore is a wrapper object that implements additional functionality
type SnapshotRestore struct {
	sync.Mutex
	cluster.SnapshotRestore
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *SnapshotRestore) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("SnapshotRestore_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.ClusterV1().SnapshotRestore().UpdateStatus(context.Background(), &obj.SnapshotRestore)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.ClusterV1().SnapshotRestore().Create(context.Background(), &obj.SnapshotRestore)
	}

	return nil
}

// SnapshotRestoreHandler is the event handler for SnapshotRestore object
type SnapshotRestoreHandler interface {
	OnSnapshotRestoreCreate(obj *SnapshotRestore) error
	OnSnapshotRestoreUpdate(oldObj *SnapshotRestore, newObj *cluster.SnapshotRestore) error
	OnSnapshotRestoreDelete(obj *SnapshotRestore) error
}

// handleSnapshotRestoreEvent handles SnapshotRestore events from watcher
func (ct *ctrlerCtx) handleSnapshotRestoreEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.SnapshotRestore:
		eobj := evt.Object.(*cluster.SnapshotRestore)
		kind := "SnapshotRestore"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		snapshotrestoreHandler := handler.(SnapshotRestoreHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &SnapshotRestore{
					SnapshotRestore: *eobj,
					HandlerCtx:      nil,
					ctrler:          ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("SnapshotRestore_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = snapshotrestoreHandler.OnSnapshotRestoreCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*SnapshotRestore)

				ct.stats.Counter("SnapshotRestore_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = snapshotrestoreHandler.OnSnapshotRestoreUpdate(obj, eobj)
				obj.SnapshotRestore = *eobj
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*SnapshotRestore)

			ct.stats.Counter("SnapshotRestore_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = snapshotrestoreHandler.OnSnapshotRestoreDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on SnapshotRestore watch channel", tp)
	}

	return nil
}

// handleSnapshotRestoreEventParallel handles SnapshotRestore events from watcher
func (ct *ctrlerCtx) handleSnapshotRestoreEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *cluster.SnapshotRestore:
		eobj := evt.Object.(*cluster.SnapshotRestore)
		kind := "SnapshotRestore"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		snapshotrestoreHandler := handler.(SnapshotRestoreHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*cluster.SnapshotRestore)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &SnapshotRestore{
						SnapshotRestore: *eobj,
						HandlerCtx:      nil,
						ctrler:          ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("SnapshotRestore_Created_Events").Inc()
					obj.Lock()
					err = snapshotrestoreHandler.OnSnapshotRestoreCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.SnapshotRestore.GetKey())
					}
				} else {
					obj := fobj.(*SnapshotRestore)
					ct.stats.Counter("SnapshotRestore_Updated_Events").Inc()
					obj.Lock()
					err = snapshotrestoreHandler.OnSnapshotRestoreUpdate(obj, eobj)
					obj.SnapshotRestore = *eobj
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("SnapshotRestore", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*cluster.SnapshotRestore)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*SnapshotRestore)
				ct.stats.Counter("SnapshotRestore_Deleted_Events").Inc()
				obj.Lock()
				err = snapshotrestoreHandler.OnSnapshotRestoreDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.SnapshotRestore.GetKey())
				return nil
			}
			ct.runJob("SnapshotRestore", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on SnapshotRestore watch channel", tp)
	}

	return nil
}

// diffSnapshotRestore does a diff of SnapshotRestore objects between local cache and API server
func (ct *ctrlerCtx) diffSnapshotRestore(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.ClusterV1().SnapshotRestore().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffSnapshotRestore(): SnapshotRestoreList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*cluster.SnapshotRestore)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.SnapshotRestore().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffSnapshotRestore(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.SnapshotRestore,
			}
			ct.handleSnapshotRestoreEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffSnapshotRestore(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleSnapshotRestoreEvent(&evt)
	}
}

func (ct *ctrlerCtx) runSnapshotRestoreWatcher() {
	kind := "SnapshotRestore"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "SnapshotRestoreWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffSnapshotRestore(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("SnapshotRestore_Watch").Inc()
		defer ct.stats.Counter("SnapshotRestore_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("SnapshotRestore_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// SnapshotRestore object watcher
				wt, werr := apicl.ClusterV1().SnapshotRestore().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffSnapshotRestore(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("SnapshotRestore_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleSnapshotRestoreEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchSnapshotRestore starts watch on SnapshotRestore object
func (ct *ctrlerCtx) WatchSnapshotRestore(handler SnapshotRestoreHandler) error {
	kind := "SnapshotRestore"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("SnapshotRestore watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run SnapshotRestore watcher in a go routine
	ct.runSnapshotRestoreWatcher()

	return nil
}

// StopWatchSnapshotRestore stops watch on SnapshotRestore object
func (ct *ctrlerCtx) StopWatchSnapshotRestore(handler SnapshotRestoreHandler) error {
	kind := "SnapshotRestore"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("SnapshotRestore watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// SnapshotRestoreAPI returns
type SnapshotRestoreAPI interface {
	Create(obj *cluster.SnapshotRestore) error
	CreateEvent(obj *cluster.SnapshotRestore) error
	Update(obj *cluster.SnapshotRestore) error
	Delete(obj *cluster.SnapshotRestore) error
	Find(meta *api.ObjectMeta) (*SnapshotRestore, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*SnapshotRestore, error)
	Watch(handler SnapshotRestoreHandler) error
	StopWatch(handler SnapshotRestoreHandler) error
}

// dummy struct that implements SnapshotRestoreAPI
type snapshotrestoreAPI struct {
	ct *ctrlerCtx
}

// Create creates SnapshotRestore object
func (api *snapshotrestoreAPI) Create(obj *cluster.SnapshotRestore) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().SnapshotRestore().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().SnapshotRestore().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleSnapshotRestoreEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates SnapshotRestore object and synchronously triggers local event
func (api *snapshotrestoreAPI) CreateEvent(obj *cluster.SnapshotRestore) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().SnapshotRestore().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.ClusterV1().SnapshotRestore().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleSnapshotRestoreEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on SnapshotRestore object
func (api *snapshotrestoreAPI) Update(obj *cluster.SnapshotRestore) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().SnapshotRestore().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleSnapshotRestoreEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes SnapshotRestore object
func (api *snapshotrestoreAPI) Delete(obj *cluster.SnapshotRestore) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.ClusterV1().SnapshotRestore().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleSnapshotRestoreEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *snapshotrestoreAPI) Find(meta *api.ObjectMeta) (*SnapshotRestore, error) {
	// find the object
	obj, err := api.ct.FindObject("SnapshotRestore", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *SnapshotRestore:
		hobj := obj.(*SnapshotRestore)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all SnapshotRestore objects
func (api *snapshotrestoreAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*SnapshotRestore, error) {
	var objlist []*SnapshotRestore
	objs, err := api.ct.List("SnapshotRestore", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *SnapshotRestore:
			eobj := obj.(*SnapshotRestore)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for SnapshotRestore", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for SnapshotRestore object
func (api *snapshotrestoreAPI) Watch(handler SnapshotRestoreHandler) error {
	api.ct.startWorkerPool("SnapshotRestore")
	return api.ct.WatchSnapshotRestore(handler)
}

// StopWatch stop watch for Tenant SnapshotRestore object
func (api *snapshotrestoreAPI) StopWatch(handler SnapshotRestoreHandler) error {
	api.ct.Lock()
	api.ct.workPools["SnapshotRestore"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchSnapshotRestore(handler)
}

// SnapshotRestore returns SnapshotRestoreAPI
func (ct *ctrlerCtx) SnapshotRestore() SnapshotRestoreAPI {
	return &snapshotrestoreAPI{ct: ct}
}
