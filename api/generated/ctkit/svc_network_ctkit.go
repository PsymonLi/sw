// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_network.proto
*/
package ctkit

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/network"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/shardworkers"
)

// Network is a wrapper object that implements additional functionality
type Network struct {
	sync.Mutex
	network.Network
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Network) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Network_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().Network().UpdateStatus(context.Background(), &obj.Network)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().Network().Create(context.Background(), &obj.Network)
	}

	return nil
}

// NetworkHandler is the event handler for Network object
type NetworkHandler interface {
	OnNetworkCreate(obj *Network) error
	OnNetworkUpdate(oldObj *Network, newObj *network.Network) error
	OnNetworkDelete(obj *Network) error
}

// handleNetworkEvent handles Network events from watcher
func (ct *ctrlerCtx) handleNetworkEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.Network:
		eobj := evt.Object.(*network.Network)
		kind := "Network"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		networkHandler := handler.(NetworkHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Network{
					Network:    *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Network_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = networkHandler.OnNetworkCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Network)

				ct.stats.Counter("Network_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = networkHandler.OnNetworkUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Network)

			ct.stats.Counter("Network_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = networkHandler.OnNetworkDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Network watch channel", tp)
	}

	return nil
}

// handleNetworkEventParallel handles Network events from watcher
func (ct *ctrlerCtx) handleNetworkEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.Network:
		eobj := evt.Object.(*network.Network)
		kind := "Network"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		networkHandler := handler.(NetworkHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.Network)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Network{
						Network:    *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Network_Created_Events").Inc()
					obj.Lock()
					err = networkHandler.OnNetworkCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Network.GetKey())
					}
				} else {
					obj := fobj.(*Network)
					ct.stats.Counter("Network_Updated_Events").Inc()
					obj.Lock()
					err = networkHandler.OnNetworkUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Network", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.Network)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Network)
				ct.stats.Counter("Network_Deleted_Events").Inc()
				obj.Lock()
				err = networkHandler.OnNetworkDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Network.GetKey())
				return nil
			}
			ct.runJob("Network", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Network watch channel", tp)
	}

	return nil
}

// diffNetwork does a diff of Network objects between local cache and API server
func (ct *ctrlerCtx) diffNetwork(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().Network().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffNetwork(): NetworkList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.Network)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Network().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffNetwork(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Network,
			}
			ct.handleNetworkEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffNetwork(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleNetworkEvent(&evt)
	}
}

func (ct *ctrlerCtx) runNetworkWatcher() {
	kind := "Network"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "NetworkWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffNetwork(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Network_Watch").Inc()
		defer ct.stats.Counter("Network_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Network_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Network object watcher
				wt, werr := apicl.NetworkV1().Network().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffNetwork(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Network_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleNetworkEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchNetwork starts watch on Network object
func (ct *ctrlerCtx) WatchNetwork(handler NetworkHandler) error {
	kind := "Network"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Network watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Network watcher in a go routine
	ct.runNetworkWatcher()

	return nil
}

// StopWatchNetwork stops watch on Network object
func (ct *ctrlerCtx) StopWatchNetwork(handler NetworkHandler) error {
	kind := "Network"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Network watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// NetworkAPI returns
type NetworkAPI interface {
	Create(obj *network.Network) error
	CreateEvent(obj *network.Network) error
	Update(obj *network.Network) error
	Delete(obj *network.Network) error
	Find(meta *api.ObjectMeta) (*Network, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Network, error)
	Watch(handler NetworkHandler) error
	StopWatch(handler NetworkHandler) error
}

// dummy struct that implements NetworkAPI
type networkAPI struct {
	ct *ctrlerCtx
}

// Create creates Network object
func (api *networkAPI) Create(obj *network.Network) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Network().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().Network().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleNetworkEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Network object and synchronously triggers local event
func (api *networkAPI) CreateEvent(obj *network.Network) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Network().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().Network().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleNetworkEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Network object
func (api *networkAPI) Update(obj *network.Network) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Network().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleNetworkEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Network object
func (api *networkAPI) Delete(obj *network.Network) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Network().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleNetworkEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *networkAPI) Find(meta *api.ObjectMeta) (*Network, error) {
	// find the object
	obj, err := api.ct.FindObject("Network", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Network:
		hobj := obj.(*Network)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Network objects
func (api *networkAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Network, error) {
	var objlist []*Network
	objs, err := api.ct.List("Network", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Network:
			eobj := obj.(*Network)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Network", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Network object
func (api *networkAPI) Watch(handler NetworkHandler) error {
	api.ct.startWorkerPool("Network")
	return api.ct.WatchNetwork(handler)
}

// StopWatch stop watch for Tenant Network object
func (api *networkAPI) StopWatch(handler NetworkHandler) error {
	api.ct.Lock()
	api.ct.workPools["Network"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchNetwork(handler)
}

// Network returns NetworkAPI
func (ct *ctrlerCtx) Network() NetworkAPI {
	return &networkAPI{ct: ct}
}

// Service is a wrapper object that implements additional functionality
type Service struct {
	sync.Mutex
	network.Service
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Service) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Service_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().Service().UpdateStatus(context.Background(), &obj.Service)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().Service().Create(context.Background(), &obj.Service)
	}

	return nil
}

// ServiceHandler is the event handler for Service object
type ServiceHandler interface {
	OnServiceCreate(obj *Service) error
	OnServiceUpdate(oldObj *Service, newObj *network.Service) error
	OnServiceDelete(obj *Service) error
}

// handleServiceEvent handles Service events from watcher
func (ct *ctrlerCtx) handleServiceEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.Service:
		eobj := evt.Object.(*network.Service)
		kind := "Service"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		serviceHandler := handler.(ServiceHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Service{
					Service:    *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Service_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = serviceHandler.OnServiceCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Service)

				ct.stats.Counter("Service_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = serviceHandler.OnServiceUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Service)

			ct.stats.Counter("Service_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = serviceHandler.OnServiceDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Service watch channel", tp)
	}

	return nil
}

// handleServiceEventParallel handles Service events from watcher
func (ct *ctrlerCtx) handleServiceEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.Service:
		eobj := evt.Object.(*network.Service)
		kind := "Service"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		serviceHandler := handler.(ServiceHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.Service)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &Service{
						Service:    *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("Service_Created_Events").Inc()
					obj.Lock()
					err = serviceHandler.OnServiceCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.Service.GetKey())
					}
				} else {
					obj := fobj.(*Service)
					ct.stats.Counter("Service_Updated_Events").Inc()
					obj.Lock()
					err = serviceHandler.OnServiceUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("Service", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.Service)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Service)
				ct.stats.Counter("Service_Deleted_Events").Inc()
				obj.Lock()
				err = serviceHandler.OnServiceDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.Service.GetKey())
				return nil
			}
			ct.runJob("Service", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Service watch channel", tp)
	}

	return nil
}

// diffService does a diff of Service objects between local cache and API server
func (ct *ctrlerCtx) diffService(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().Service().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffService(): ServiceList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.Service)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Service().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffService(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Service,
			}
			ct.handleServiceEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffService(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleServiceEvent(&evt)
	}
}

func (ct *ctrlerCtx) runServiceWatcher() {
	kind := "Service"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "ServiceWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffService(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Service_Watch").Inc()
		defer ct.stats.Counter("Service_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Service_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Service object watcher
				wt, werr := apicl.NetworkV1().Service().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffService(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Service_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleServiceEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchService starts watch on Service object
func (ct *ctrlerCtx) WatchService(handler ServiceHandler) error {
	kind := "Service"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Service watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Service watcher in a go routine
	ct.runServiceWatcher()

	return nil
}

// StopWatchService stops watch on Service object
func (ct *ctrlerCtx) StopWatchService(handler ServiceHandler) error {
	kind := "Service"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Service watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// ServiceAPI returns
type ServiceAPI interface {
	Create(obj *network.Service) error
	CreateEvent(obj *network.Service) error
	Update(obj *network.Service) error
	Delete(obj *network.Service) error
	Find(meta *api.ObjectMeta) (*Service, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Service, error)
	Watch(handler ServiceHandler) error
	StopWatch(handler ServiceHandler) error
}

// dummy struct that implements ServiceAPI
type serviceAPI struct {
	ct *ctrlerCtx
}

// Create creates Service object
func (api *serviceAPI) Create(obj *network.Service) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Service().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().Service().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleServiceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates Service object and synchronously triggers local event
func (api *serviceAPI) CreateEvent(obj *network.Service) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Service().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().Service().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleServiceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Service object
func (api *serviceAPI) Update(obj *network.Service) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Service().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleServiceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Service object
func (api *serviceAPI) Delete(obj *network.Service) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().Service().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleServiceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *serviceAPI) Find(meta *api.ObjectMeta) (*Service, error) {
	// find the object
	obj, err := api.ct.FindObject("Service", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Service:
		hobj := obj.(*Service)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Service objects
func (api *serviceAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Service, error) {
	var objlist []*Service
	objs, err := api.ct.List("Service", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Service:
			eobj := obj.(*Service)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Service", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Service object
func (api *serviceAPI) Watch(handler ServiceHandler) error {
	api.ct.startWorkerPool("Service")
	return api.ct.WatchService(handler)
}

// StopWatch stop watch for Tenant Service object
func (api *serviceAPI) StopWatch(handler ServiceHandler) error {
	api.ct.Lock()
	api.ct.workPools["Service"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchService(handler)
}

// Service returns ServiceAPI
func (ct *ctrlerCtx) Service() ServiceAPI {
	return &serviceAPI{ct: ct}
}

// LbPolicy is a wrapper object that implements additional functionality
type LbPolicy struct {
	sync.Mutex
	network.LbPolicy
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *LbPolicy) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("LbPolicy_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().LbPolicy().UpdateStatus(context.Background(), &obj.LbPolicy)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().LbPolicy().Create(context.Background(), &obj.LbPolicy)
	}

	return nil
}

// LbPolicyHandler is the event handler for LbPolicy object
type LbPolicyHandler interface {
	OnLbPolicyCreate(obj *LbPolicy) error
	OnLbPolicyUpdate(oldObj *LbPolicy, newObj *network.LbPolicy) error
	OnLbPolicyDelete(obj *LbPolicy) error
}

// handleLbPolicyEvent handles LbPolicy events from watcher
func (ct *ctrlerCtx) handleLbPolicyEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.LbPolicy:
		eobj := evt.Object.(*network.LbPolicy)
		kind := "LbPolicy"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		lbpolicyHandler := handler.(LbPolicyHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &LbPolicy{
					LbPolicy:   *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("LbPolicy_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = lbpolicyHandler.OnLbPolicyCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*LbPolicy)

				ct.stats.Counter("LbPolicy_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = lbpolicyHandler.OnLbPolicyUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*LbPolicy)

			ct.stats.Counter("LbPolicy_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = lbpolicyHandler.OnLbPolicyDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on LbPolicy watch channel", tp)
	}

	return nil
}

// handleLbPolicyEventParallel handles LbPolicy events from watcher
func (ct *ctrlerCtx) handleLbPolicyEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.LbPolicy:
		eobj := evt.Object.(*network.LbPolicy)
		kind := "LbPolicy"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		lbpolicyHandler := handler.(LbPolicyHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.LbPolicy)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &LbPolicy{
						LbPolicy:   *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("LbPolicy_Created_Events").Inc()
					obj.Lock()
					err = lbpolicyHandler.OnLbPolicyCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.LbPolicy.GetKey())
					}
				} else {
					obj := fobj.(*LbPolicy)
					ct.stats.Counter("LbPolicy_Updated_Events").Inc()
					obj.Lock()
					err = lbpolicyHandler.OnLbPolicyUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("LbPolicy", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.LbPolicy)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*LbPolicy)
				ct.stats.Counter("LbPolicy_Deleted_Events").Inc()
				obj.Lock()
				err = lbpolicyHandler.OnLbPolicyDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.LbPolicy.GetKey())
				return nil
			}
			ct.runJob("LbPolicy", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on LbPolicy watch channel", tp)
	}

	return nil
}

// diffLbPolicy does a diff of LbPolicy objects between local cache and API server
func (ct *ctrlerCtx) diffLbPolicy(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().LbPolicy().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffLbPolicy(): LbPolicyList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.LbPolicy)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.LbPolicy().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffLbPolicy(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.LbPolicy,
			}
			ct.handleLbPolicyEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffLbPolicy(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleLbPolicyEvent(&evt)
	}
}

func (ct *ctrlerCtx) runLbPolicyWatcher() {
	kind := "LbPolicy"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "LbPolicyWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffLbPolicy(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("LbPolicy_Watch").Inc()
		defer ct.stats.Counter("LbPolicy_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("LbPolicy_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// LbPolicy object watcher
				wt, werr := apicl.NetworkV1().LbPolicy().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffLbPolicy(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("LbPolicy_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleLbPolicyEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchLbPolicy starts watch on LbPolicy object
func (ct *ctrlerCtx) WatchLbPolicy(handler LbPolicyHandler) error {
	kind := "LbPolicy"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("LbPolicy watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run LbPolicy watcher in a go routine
	ct.runLbPolicyWatcher()

	return nil
}

// StopWatchLbPolicy stops watch on LbPolicy object
func (ct *ctrlerCtx) StopWatchLbPolicy(handler LbPolicyHandler) error {
	kind := "LbPolicy"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("LbPolicy watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// LbPolicyAPI returns
type LbPolicyAPI interface {
	Create(obj *network.LbPolicy) error
	CreateEvent(obj *network.LbPolicy) error
	Update(obj *network.LbPolicy) error
	Delete(obj *network.LbPolicy) error
	Find(meta *api.ObjectMeta) (*LbPolicy, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*LbPolicy, error)
	Watch(handler LbPolicyHandler) error
	StopWatch(handler LbPolicyHandler) error
}

// dummy struct that implements LbPolicyAPI
type lbpolicyAPI struct {
	ct *ctrlerCtx
}

// Create creates LbPolicy object
func (api *lbpolicyAPI) Create(obj *network.LbPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().LbPolicy().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().LbPolicy().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleLbPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates LbPolicy object and synchronously triggers local event
func (api *lbpolicyAPI) CreateEvent(obj *network.LbPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().LbPolicy().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().LbPolicy().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleLbPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on LbPolicy object
func (api *lbpolicyAPI) Update(obj *network.LbPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().LbPolicy().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleLbPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes LbPolicy object
func (api *lbpolicyAPI) Delete(obj *network.LbPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().LbPolicy().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleLbPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *lbpolicyAPI) Find(meta *api.ObjectMeta) (*LbPolicy, error) {
	// find the object
	obj, err := api.ct.FindObject("LbPolicy", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *LbPolicy:
		hobj := obj.(*LbPolicy)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all LbPolicy objects
func (api *lbpolicyAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*LbPolicy, error) {
	var objlist []*LbPolicy
	objs, err := api.ct.List("LbPolicy", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *LbPolicy:
			eobj := obj.(*LbPolicy)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for LbPolicy", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for LbPolicy object
func (api *lbpolicyAPI) Watch(handler LbPolicyHandler) error {
	api.ct.startWorkerPool("LbPolicy")
	return api.ct.WatchLbPolicy(handler)
}

// StopWatch stop watch for Tenant LbPolicy object
func (api *lbpolicyAPI) StopWatch(handler LbPolicyHandler) error {
	api.ct.Lock()
	api.ct.workPools["LbPolicy"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchLbPolicy(handler)
}

// LbPolicy returns LbPolicyAPI
func (ct *ctrlerCtx) LbPolicy() LbPolicyAPI {
	return &lbpolicyAPI{ct: ct}
}

// VirtualRouter is a wrapper object that implements additional functionality
type VirtualRouter struct {
	sync.Mutex
	network.VirtualRouter
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *VirtualRouter) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("VirtualRouter_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().VirtualRouter().UpdateStatus(context.Background(), &obj.VirtualRouter)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().VirtualRouter().Create(context.Background(), &obj.VirtualRouter)
	}

	return nil
}

// VirtualRouterHandler is the event handler for VirtualRouter object
type VirtualRouterHandler interface {
	OnVirtualRouterCreate(obj *VirtualRouter) error
	OnVirtualRouterUpdate(oldObj *VirtualRouter, newObj *network.VirtualRouter) error
	OnVirtualRouterDelete(obj *VirtualRouter) error
}

// handleVirtualRouterEvent handles VirtualRouter events from watcher
func (ct *ctrlerCtx) handleVirtualRouterEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.VirtualRouter:
		eobj := evt.Object.(*network.VirtualRouter)
		kind := "VirtualRouter"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		virtualrouterHandler := handler.(VirtualRouterHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &VirtualRouter{
					VirtualRouter: *eobj,
					HandlerCtx:    nil,
					ctrler:        ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("VirtualRouter_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = virtualrouterHandler.OnVirtualRouterCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*VirtualRouter)

				ct.stats.Counter("VirtualRouter_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = virtualrouterHandler.OnVirtualRouterUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*VirtualRouter)

			ct.stats.Counter("VirtualRouter_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = virtualrouterHandler.OnVirtualRouterDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on VirtualRouter watch channel", tp)
	}

	return nil
}

// handleVirtualRouterEventParallel handles VirtualRouter events from watcher
func (ct *ctrlerCtx) handleVirtualRouterEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.VirtualRouter:
		eobj := evt.Object.(*network.VirtualRouter)
		kind := "VirtualRouter"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		virtualrouterHandler := handler.(VirtualRouterHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.VirtualRouter)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &VirtualRouter{
						VirtualRouter: *eobj,
						HandlerCtx:    nil,
						ctrler:        ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("VirtualRouter_Created_Events").Inc()
					obj.Lock()
					err = virtualrouterHandler.OnVirtualRouterCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.VirtualRouter.GetKey())
					}
				} else {
					obj := fobj.(*VirtualRouter)
					ct.stats.Counter("VirtualRouter_Updated_Events").Inc()
					obj.Lock()
					err = virtualrouterHandler.OnVirtualRouterUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("VirtualRouter", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.VirtualRouter)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*VirtualRouter)
				ct.stats.Counter("VirtualRouter_Deleted_Events").Inc()
				obj.Lock()
				err = virtualrouterHandler.OnVirtualRouterDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.VirtualRouter.GetKey())
				return nil
			}
			ct.runJob("VirtualRouter", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on VirtualRouter watch channel", tp)
	}

	return nil
}

// diffVirtualRouter does a diff of VirtualRouter objects between local cache and API server
func (ct *ctrlerCtx) diffVirtualRouter(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().VirtualRouter().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffVirtualRouter(): VirtualRouterList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.VirtualRouter)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.VirtualRouter().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffVirtualRouter(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.VirtualRouter,
			}
			ct.handleVirtualRouterEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffVirtualRouter(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleVirtualRouterEvent(&evt)
	}
}

func (ct *ctrlerCtx) runVirtualRouterWatcher() {
	kind := "VirtualRouter"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "VirtualRouterWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffVirtualRouter(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("VirtualRouter_Watch").Inc()
		defer ct.stats.Counter("VirtualRouter_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("VirtualRouter_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// VirtualRouter object watcher
				wt, werr := apicl.NetworkV1().VirtualRouter().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffVirtualRouter(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("VirtualRouter_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleVirtualRouterEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchVirtualRouter starts watch on VirtualRouter object
func (ct *ctrlerCtx) WatchVirtualRouter(handler VirtualRouterHandler) error {
	kind := "VirtualRouter"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("VirtualRouter watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run VirtualRouter watcher in a go routine
	ct.runVirtualRouterWatcher()

	return nil
}

// StopWatchVirtualRouter stops watch on VirtualRouter object
func (ct *ctrlerCtx) StopWatchVirtualRouter(handler VirtualRouterHandler) error {
	kind := "VirtualRouter"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("VirtualRouter watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// VirtualRouterAPI returns
type VirtualRouterAPI interface {
	Create(obj *network.VirtualRouter) error
	CreateEvent(obj *network.VirtualRouter) error
	Update(obj *network.VirtualRouter) error
	Delete(obj *network.VirtualRouter) error
	Find(meta *api.ObjectMeta) (*VirtualRouter, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*VirtualRouter, error)
	Watch(handler VirtualRouterHandler) error
	StopWatch(handler VirtualRouterHandler) error
}

// dummy struct that implements VirtualRouterAPI
type virtualrouterAPI struct {
	ct *ctrlerCtx
}

// Create creates VirtualRouter object
func (api *virtualrouterAPI) Create(obj *network.VirtualRouter) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().VirtualRouter().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().VirtualRouter().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleVirtualRouterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates VirtualRouter object and synchronously triggers local event
func (api *virtualrouterAPI) CreateEvent(obj *network.VirtualRouter) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().VirtualRouter().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().VirtualRouter().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleVirtualRouterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on VirtualRouter object
func (api *virtualrouterAPI) Update(obj *network.VirtualRouter) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().VirtualRouter().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleVirtualRouterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes VirtualRouter object
func (api *virtualrouterAPI) Delete(obj *network.VirtualRouter) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().VirtualRouter().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleVirtualRouterEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *virtualrouterAPI) Find(meta *api.ObjectMeta) (*VirtualRouter, error) {
	// find the object
	obj, err := api.ct.FindObject("VirtualRouter", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *VirtualRouter:
		hobj := obj.(*VirtualRouter)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all VirtualRouter objects
func (api *virtualrouterAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*VirtualRouter, error) {
	var objlist []*VirtualRouter
	objs, err := api.ct.List("VirtualRouter", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *VirtualRouter:
			eobj := obj.(*VirtualRouter)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for VirtualRouter", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for VirtualRouter object
func (api *virtualrouterAPI) Watch(handler VirtualRouterHandler) error {
	api.ct.startWorkerPool("VirtualRouter")
	return api.ct.WatchVirtualRouter(handler)
}

// StopWatch stop watch for Tenant VirtualRouter object
func (api *virtualrouterAPI) StopWatch(handler VirtualRouterHandler) error {
	api.ct.Lock()
	api.ct.workPools["VirtualRouter"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchVirtualRouter(handler)
}

// VirtualRouter returns VirtualRouterAPI
func (ct *ctrlerCtx) VirtualRouter() VirtualRouterAPI {
	return &virtualrouterAPI{ct: ct}
}

// NetworkInterface is a wrapper object that implements additional functionality
type NetworkInterface struct {
	sync.Mutex
	network.NetworkInterface
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *NetworkInterface) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("NetworkInterface_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().NetworkInterface().UpdateStatus(context.Background(), &obj.NetworkInterface)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().NetworkInterface().Create(context.Background(), &obj.NetworkInterface)
	}

	return nil
}

// NetworkInterfaceHandler is the event handler for NetworkInterface object
type NetworkInterfaceHandler interface {
	OnNetworkInterfaceCreate(obj *NetworkInterface) error
	OnNetworkInterfaceUpdate(oldObj *NetworkInterface, newObj *network.NetworkInterface) error
	OnNetworkInterfaceDelete(obj *NetworkInterface) error
}

// handleNetworkInterfaceEvent handles NetworkInterface events from watcher
func (ct *ctrlerCtx) handleNetworkInterfaceEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.NetworkInterface:
		eobj := evt.Object.(*network.NetworkInterface)
		kind := "NetworkInterface"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		networkinterfaceHandler := handler.(NetworkInterfaceHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &NetworkInterface{
					NetworkInterface: *eobj,
					HandlerCtx:       nil,
					ctrler:           ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("NetworkInterface_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = networkinterfaceHandler.OnNetworkInterfaceCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*NetworkInterface)

				ct.stats.Counter("NetworkInterface_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = networkinterfaceHandler.OnNetworkInterfaceUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*NetworkInterface)

			ct.stats.Counter("NetworkInterface_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = networkinterfaceHandler.OnNetworkInterfaceDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on NetworkInterface watch channel", tp)
	}

	return nil
}

// handleNetworkInterfaceEventParallel handles NetworkInterface events from watcher
func (ct *ctrlerCtx) handleNetworkInterfaceEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.NetworkInterface:
		eobj := evt.Object.(*network.NetworkInterface)
		kind := "NetworkInterface"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		networkinterfaceHandler := handler.(NetworkInterfaceHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.NetworkInterface)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &NetworkInterface{
						NetworkInterface: *eobj,
						HandlerCtx:       nil,
						ctrler:           ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("NetworkInterface_Created_Events").Inc()
					obj.Lock()
					err = networkinterfaceHandler.OnNetworkInterfaceCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.NetworkInterface.GetKey())
					}
				} else {
					obj := fobj.(*NetworkInterface)
					ct.stats.Counter("NetworkInterface_Updated_Events").Inc()
					obj.Lock()
					err = networkinterfaceHandler.OnNetworkInterfaceUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("NetworkInterface", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.NetworkInterface)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*NetworkInterface)
				ct.stats.Counter("NetworkInterface_Deleted_Events").Inc()
				obj.Lock()
				err = networkinterfaceHandler.OnNetworkInterfaceDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.NetworkInterface.GetKey())
				return nil
			}
			ct.runJob("NetworkInterface", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on NetworkInterface watch channel", tp)
	}

	return nil
}

// diffNetworkInterface does a diff of NetworkInterface objects between local cache and API server
func (ct *ctrlerCtx) diffNetworkInterface(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().NetworkInterface().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffNetworkInterface(): NetworkInterfaceList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.NetworkInterface)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.NetworkInterface().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffNetworkInterface(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.NetworkInterface,
			}
			ct.handleNetworkInterfaceEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffNetworkInterface(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleNetworkInterfaceEvent(&evt)
	}
}

func (ct *ctrlerCtx) runNetworkInterfaceWatcher() {
	kind := "NetworkInterface"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "NetworkInterfaceWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffNetworkInterface(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("NetworkInterface_Watch").Inc()
		defer ct.stats.Counter("NetworkInterface_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("NetworkInterface_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// NetworkInterface object watcher
				wt, werr := apicl.NetworkV1().NetworkInterface().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffNetworkInterface(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("NetworkInterface_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleNetworkInterfaceEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchNetworkInterface starts watch on NetworkInterface object
func (ct *ctrlerCtx) WatchNetworkInterface(handler NetworkInterfaceHandler) error {
	kind := "NetworkInterface"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("NetworkInterface watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run NetworkInterface watcher in a go routine
	ct.runNetworkInterfaceWatcher()

	return nil
}

// StopWatchNetworkInterface stops watch on NetworkInterface object
func (ct *ctrlerCtx) StopWatchNetworkInterface(handler NetworkInterfaceHandler) error {
	kind := "NetworkInterface"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("NetworkInterface watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// NetworkInterfaceAPI returns
type NetworkInterfaceAPI interface {
	Create(obj *network.NetworkInterface) error
	CreateEvent(obj *network.NetworkInterface) error
	Update(obj *network.NetworkInterface) error
	Delete(obj *network.NetworkInterface) error
	Find(meta *api.ObjectMeta) (*NetworkInterface, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*NetworkInterface, error)
	Watch(handler NetworkInterfaceHandler) error
	StopWatch(handler NetworkInterfaceHandler) error
}

// dummy struct that implements NetworkInterfaceAPI
type networkinterfaceAPI struct {
	ct *ctrlerCtx
}

// Create creates NetworkInterface object
func (api *networkinterfaceAPI) Create(obj *network.NetworkInterface) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().NetworkInterface().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().NetworkInterface().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleNetworkInterfaceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates NetworkInterface object and synchronously triggers local event
func (api *networkinterfaceAPI) CreateEvent(obj *network.NetworkInterface) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().NetworkInterface().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().NetworkInterface().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleNetworkInterfaceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on NetworkInterface object
func (api *networkinterfaceAPI) Update(obj *network.NetworkInterface) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().NetworkInterface().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleNetworkInterfaceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes NetworkInterface object
func (api *networkinterfaceAPI) Delete(obj *network.NetworkInterface) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().NetworkInterface().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleNetworkInterfaceEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *networkinterfaceAPI) Find(meta *api.ObjectMeta) (*NetworkInterface, error) {
	// find the object
	obj, err := api.ct.FindObject("NetworkInterface", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *NetworkInterface:
		hobj := obj.(*NetworkInterface)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all NetworkInterface objects
func (api *networkinterfaceAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*NetworkInterface, error) {
	var objlist []*NetworkInterface
	objs, err := api.ct.List("NetworkInterface", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *NetworkInterface:
			eobj := obj.(*NetworkInterface)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for NetworkInterface", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for NetworkInterface object
func (api *networkinterfaceAPI) Watch(handler NetworkInterfaceHandler) error {
	api.ct.startWorkerPool("NetworkInterface")
	return api.ct.WatchNetworkInterface(handler)
}

// StopWatch stop watch for Tenant NetworkInterface object
func (api *networkinterfaceAPI) StopWatch(handler NetworkInterfaceHandler) error {
	api.ct.Lock()
	api.ct.workPools["NetworkInterface"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchNetworkInterface(handler)
}

// NetworkInterface returns NetworkInterfaceAPI
func (ct *ctrlerCtx) NetworkInterface() NetworkInterfaceAPI {
	return &networkinterfaceAPI{ct: ct}
}

// IPAMPolicy is a wrapper object that implements additional functionality
type IPAMPolicy struct {
	sync.Mutex
	network.IPAMPolicy
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *IPAMPolicy) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("IPAMPolicy_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.NetworkV1().IPAMPolicy().UpdateStatus(context.Background(), &obj.IPAMPolicy)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.NetworkV1().IPAMPolicy().Create(context.Background(), &obj.IPAMPolicy)
	}

	return nil
}

// IPAMPolicyHandler is the event handler for IPAMPolicy object
type IPAMPolicyHandler interface {
	OnIPAMPolicyCreate(obj *IPAMPolicy) error
	OnIPAMPolicyUpdate(oldObj *IPAMPolicy, newObj *network.IPAMPolicy) error
	OnIPAMPolicyDelete(obj *IPAMPolicy) error
}

// handleIPAMPolicyEvent handles IPAMPolicy events from watcher
func (ct *ctrlerCtx) handleIPAMPolicyEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.IPAMPolicy:
		eobj := evt.Object.(*network.IPAMPolicy)
		kind := "IPAMPolicy"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		ipampolicyHandler := handler.(IPAMPolicyHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &IPAMPolicy{
					IPAMPolicy: *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("IPAMPolicy_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = ipampolicyHandler.OnIPAMPolicyCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*IPAMPolicy)

				ct.stats.Counter("IPAMPolicy_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = ipampolicyHandler.OnIPAMPolicyUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*IPAMPolicy)

			ct.stats.Counter("IPAMPolicy_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = ipampolicyHandler.OnIPAMPolicyDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on IPAMPolicy watch channel", tp)
	}

	return nil
}

// handleIPAMPolicyEventParallel handles IPAMPolicy events from watcher
func (ct *ctrlerCtx) handleIPAMPolicyEventParallel(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *network.IPAMPolicy:
		eobj := evt.Object.(*network.IPAMPolicy)
		kind := "IPAMPolicy"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		ipampolicyHandler := handler.(IPAMPolicyHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				var err error
				eobj := userCtx.(*network.IPAMPolicy)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					obj := &IPAMPolicy{
						IPAMPolicy: *eobj,
						HandlerCtx: nil,
						ctrler:     ct,
					}
					ct.addObject(kind, obj.GetKey(), obj)
					ct.stats.Counter("IPAMPolicy_Created_Events").Inc()
					obj.Lock()
					err = ipampolicyHandler.OnIPAMPolicyCreate(obj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						ct.delObject(kind, obj.IPAMPolicy.GetKey())
					}
				} else {
					obj := fobj.(*IPAMPolicy)
					ct.stats.Counter("IPAMPolicy_Updated_Events").Inc()
					obj.Lock()
					err = ipampolicyHandler.OnIPAMPolicyUpdate(obj, eobj)
					obj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					}
				}
				return err
			}
			ct.runJob("IPAMPolicy", eobj, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, userCtx shardworkers.WorkObj) error {
				eobj := userCtx.(*network.IPAMPolicy)
				fobj, err := ct.findObject(kind, eobj.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*IPAMPolicy)
				ct.stats.Counter("IPAMPolicy_Deleted_Events").Inc()
				obj.Lock()
				err = ipampolicyHandler.OnIPAMPolicyDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, obj.IPAMPolicy.GetKey())
				return nil
			}
			ct.runJob("IPAMPolicy", eobj, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on IPAMPolicy watch channel", tp)
	}

	return nil
}

// diffIPAMPolicy does a diff of IPAMPolicy objects between local cache and API server
func (ct *ctrlerCtx) diffIPAMPolicy(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.NetworkV1().IPAMPolicy().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffIPAMPolicy(): IPAMPolicyList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*network.IPAMPolicy)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.IPAMPolicy().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffIPAMPolicy(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.IPAMPolicy,
			}
			ct.handleIPAMPolicyEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffIPAMPolicy(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleIPAMPolicyEvent(&evt)
	}
}

func (ct *ctrlerCtx) runIPAMPolicyWatcher() {
	kind := "IPAMPolicy"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "IPAMPolicyWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffIPAMPolicy(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("IPAMPolicy_Watch").Inc()
		defer ct.stats.Counter("IPAMPolicy_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("IPAMPolicy_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// IPAMPolicy object watcher
				wt, werr := apicl.NetworkV1().IPAMPolicy().Watch(ctx, &opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffIPAMPolicy(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("IPAMPolicy_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleIPAMPolicyEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchIPAMPolicy starts watch on IPAMPolicy object
func (ct *ctrlerCtx) WatchIPAMPolicy(handler IPAMPolicyHandler) error {
	kind := "IPAMPolicy"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("IPAMPolicy watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run IPAMPolicy watcher in a go routine
	ct.runIPAMPolicyWatcher()

	return nil
}

// StopWatchIPAMPolicy stops watch on IPAMPolicy object
func (ct *ctrlerCtx) StopWatchIPAMPolicy(handler IPAMPolicyHandler) error {
	kind := "IPAMPolicy"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("IPAMPolicy watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// IPAMPolicyAPI returns
type IPAMPolicyAPI interface {
	Create(obj *network.IPAMPolicy) error
	CreateEvent(obj *network.IPAMPolicy) error
	Update(obj *network.IPAMPolicy) error
	Delete(obj *network.IPAMPolicy) error
	Find(meta *api.ObjectMeta) (*IPAMPolicy, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*IPAMPolicy, error)
	Watch(handler IPAMPolicyHandler) error
	StopWatch(handler IPAMPolicyHandler) error
}

// dummy struct that implements IPAMPolicyAPI
type ipampolicyAPI struct {
	ct *ctrlerCtx
}

// Create creates IPAMPolicy object
func (api *ipampolicyAPI) Create(obj *network.IPAMPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().IPAMPolicy().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().IPAMPolicy().Update(context.Background(), obj)
		}
		return err
	}

	return api.ct.handleIPAMPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// CreateEvent creates IPAMPolicy object and synchronously triggers local event
func (api *ipampolicyAPI) CreateEvent(obj *network.IPAMPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().IPAMPolicy().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.NetworkV1().IPAMPolicy().Update(context.Background(), obj)
		}
		if err != nil {
			api.ct.logger.Errorf("Error creating object in api server. Err: %v", err)
			return err
		}
	}

	return api.ct.handleIPAMPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on IPAMPolicy object
func (api *ipampolicyAPI) Update(obj *network.IPAMPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().IPAMPolicy().Update(context.Background(), obj)
		return err
	}

	return api.ct.handleIPAMPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes IPAMPolicy object
func (api *ipampolicyAPI) Delete(obj *network.IPAMPolicy) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.NetworkV1().IPAMPolicy().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	return api.ct.handleIPAMPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *ipampolicyAPI) Find(meta *api.ObjectMeta) (*IPAMPolicy, error) {
	// find the object
	obj, err := api.ct.FindObject("IPAMPolicy", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *IPAMPolicy:
		hobj := obj.(*IPAMPolicy)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all IPAMPolicy objects
func (api *ipampolicyAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*IPAMPolicy, error) {
	var objlist []*IPAMPolicy
	objs, err := api.ct.List("IPAMPolicy", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *IPAMPolicy:
			eobj := obj.(*IPAMPolicy)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for IPAMPolicy", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for IPAMPolicy object
func (api *ipampolicyAPI) Watch(handler IPAMPolicyHandler) error {
	api.ct.startWorkerPool("IPAMPolicy")
	return api.ct.WatchIPAMPolicy(handler)
}

// StopWatch stop watch for Tenant IPAMPolicy object
func (api *ipampolicyAPI) StopWatch(handler IPAMPolicyHandler) error {
	api.ct.Lock()
	api.ct.workPools["IPAMPolicy"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchIPAMPolicy(handler)
}

// IPAMPolicy returns IPAMPolicyAPI
func (ct *ctrlerCtx) IPAMPolicy() IPAMPolicyAPI {
	return &ipampolicyAPI{ct: ct}
}
