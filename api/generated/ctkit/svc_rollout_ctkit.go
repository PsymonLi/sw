// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_rollout.proto
*/
package ctkit

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/rollout"
	apiintf "github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pensando/sw/venice/utils/shardworkers"
)

// Rollout is a wrapper object that implements additional functionality
type Rollout struct {
	sync.Mutex
	rollout.Rollout
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Rollout) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Rollout_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.RolloutV1().Rollout().UpdateStatus(context.Background(), &obj.Rollout)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.RolloutV1().Rollout().Create(context.Background(), &obj.Rollout)
	}

	return nil
}

// RolloutHandler is the event handler for Rollout object
type RolloutHandler interface {
	OnRolloutCreate(obj *Rollout) error
	OnRolloutUpdate(oldObj *Rollout, newObj *rollout.Rollout) error
	OnRolloutDelete(obj *Rollout) error
	GetRolloutWatchOptions() *api.ListWatchOptions
	OnRolloutReconnect()
}

// OnRolloutCreate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutCreate(obj *Rollout) error {
	log.Info("OnRolloutCreate is not implemented")
	return nil
}

// OnRolloutUpdate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutUpdate(oldObj *Rollout, newObj *rollout.Rollout) error {
	log.Info("OnRolloutUpdate is not implemented")
	return nil
}

// OnRolloutDelete is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutDelete(obj *Rollout) error {
	log.Info("OnRolloutDelete is not implemented")
	return nil
}

// GetRolloutWatchOptions is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) GetRolloutWatchOptions() *api.ListWatchOptions {
	log.Info("GetRolloutWatchOptions is not implemented")
	opts := &api.ListWatchOptions{}
	return opts
}

// OnRolloutReconnect is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutReconnect() {
	log.Info("OnRolloutReconnect is not implemented")
	return
}

// handleRolloutEvent handles Rollout events from watcher
func (ct *ctrlerCtx) handleRolloutEvent(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleRolloutEventNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *rollout.Rollout:
		eobj := evt.Object.(*rollout.Rollout)
		kind := "Rollout"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ctx := &rolloutCtx{event: evt.Type,
			obj: &Rollout{Rollout: *eobj, ctrler: ct}}

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Rollout watch channel", tp)
	}

	return nil
}

// handleRolloutEventNoResolver handles Rollout events from watcher
func (ct *ctrlerCtx) handleRolloutEventNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *rollout.Rollout:
		eobj := evt.Object.(*rollout.Rollout)
		kind := "Rollout"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		rolloutHandler := handler.(RolloutHandler)
		// handle based on event type
		ctrlCtx := &rolloutCtx{event: evt.Type, obj: &Rollout{Rollout: *eobj, ctrler: ct}}
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.getObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.addObject(ctrlCtx)
				ct.stats.Counter("Rollout_Created_Events").Inc()

				// call the event handler
				ctrlCtx.Lock()
				err = rolloutHandler.OnRolloutCreate(ctrlCtx.obj)
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj, err)
					ct.delObject(kind, ctrlCtx.GetKey())
					return err
				}
			} else {
				fResVer, fErr := strconv.ParseInt(fobj.GetResourceVersion(), 10, 64)
				eResVer, eErr := strconv.ParseInt(eobj.GetResourceVersion(), 10, 64)
				if ct.resolver != nil && fErr == nil && eErr == nil && fResVer >= eResVer {
					// Event already processed.
					ct.logger.Infof("Skipping update due to old resource version")
					return nil
				}
				ctrlCtx := fobj.(*rolloutCtx)
				ct.stats.Counter("Rollout_Updated_Events").Inc()
				ctrlCtx.Lock()
				p := rollout.Rollout{Spec: eobj.Spec,
					ObjectMeta: eobj.ObjectMeta,
					TypeMeta:   eobj.TypeMeta,
					Status:     eobj.Status}

				err = rolloutHandler.OnRolloutUpdate(ctrlCtx.obj, &p)
				ctrlCtx.obj.Rollout = *eobj
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj, err)
					return err
				}

			}
		case kvstore.Deleted:
			ctrlCtx := &rolloutCtx{event: evt.Type, obj: &Rollout{Rollout: *eobj, ctrler: ct}}
			fobj, err := ct.findObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Rollout)
			ct.stats.Counter("Rollout_Deleted_Events").Inc()
			obj.Lock()
			err = rolloutHandler.OnRolloutDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}
			ct.delObject(kind, ctrlCtx.GetKey())
			return nil

		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Rollout watch channel", tp)
	}

	return nil
}

type rolloutCtx struct {
	ctkitBaseCtx
	event kvstore.WatchEventType
	obj   *Rollout //
	//   newObj     *rollout.Rollout //update
	newObj *rolloutCtx //update
}

func (ctx *rolloutCtx) References() map[string]apiintf.ReferenceObj {
	resp := make(map[string]apiintf.ReferenceObj)
	ctx.obj.References(ctx.obj.GetObjectMeta().Name, ctx.obj.GetObjectMeta().Namespace, resp)
	return resp
}

func (ctx *rolloutCtx) GetKey() string {
	return ctx.obj.MakeKey("rollout")
}

func (ctx *rolloutCtx) GetKind() string {
	return ctx.obj.GetKind()
}

func (ctx *rolloutCtx) GetResourceVersion() string {
	return ctx.obj.GetResourceVersion()
}

func (ctx *rolloutCtx) SetEvent(event kvstore.WatchEventType) {
	ctx.event = event
}

func (ctx *rolloutCtx) SetNewObj(newObj apiintf.CtkitObject) {
	if newObj == nil {
		ctx.newObj = nil
	} else {
		ctx.newObj = newObj.(*rolloutCtx)
		ctx.newObj.obj.HandlerCtx = ctx.obj.HandlerCtx
	}
}

func (ctx *rolloutCtx) GetNewObj() apiintf.CtkitObject {
	return ctx.newObj
}

func (ctx *rolloutCtx) Copy(obj apiintf.CtkitObject) {
	ctx.obj.Rollout = obj.(*rolloutCtx).obj.Rollout
}

func (ctx *rolloutCtx) Lock() {
	ctx.obj.Lock()
}

func (ctx *rolloutCtx) Unlock() {
	ctx.obj.Unlock()
}

func (ctx *rolloutCtx) GetObjectMeta() *api.ObjectMeta {
	return ctx.obj.GetObjectMeta()
}

func (ctx *rolloutCtx) RuntimeObject() runtime.Object {
	var v interface{}
	v = ctx.obj
	return v.(runtime.Object)
}

func (ctx *rolloutCtx) WorkFunc(context context.Context) error {
	var err error
	evt := ctx.event
	ct := ctx.obj.ctrler
	kind := "Rollout"
	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	rolloutHandler := handler.(RolloutHandler)
	switch evt {
	case kvstore.Created:
		ctx.obj.Lock()
		err = rolloutHandler.OnRolloutCreate(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj, err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Updated:
		ct.stats.Counter("Rollout_Updated_Events").Inc()
		ctx.obj.Lock()
		p := rollout.Rollout{Spec: ctx.newObj.obj.Spec,
			ObjectMeta: ctx.newObj.obj.ObjectMeta,
			TypeMeta:   ctx.newObj.obj.TypeMeta,
			Status:     ctx.newObj.obj.Status}
		err = rolloutHandler.OnRolloutUpdate(ctx.obj, &p)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj, err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Deleted:
		ctx.obj.Lock()
		err = rolloutHandler.OnRolloutDelete(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error deleting %s %+v. Err: %v", kind, ctx.obj, err)
		}
	}
	ct.resolveObject(ctx.event, ctx)
	return nil
}

// handleRolloutEventParallel handles Rollout events from watcher
func (ct *ctrlerCtx) handleRolloutEventParallel(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleRolloutEventParallelWithNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *rollout.Rollout:
		eobj := evt.Object.(*rollout.Rollout)
		kind := "Rollout"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ctx := &rolloutCtx{event: evt.Type, obj: &Rollout{Rollout: *eobj, ctrler: ct}}

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Rollout watch channel", tp)
	}

	return nil
}

// handleRolloutEventParallel handles Rollout events from watcher
func (ct *ctrlerCtx) handleRolloutEventParallelWithNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *rollout.Rollout:
		eobj := evt.Object.(*rollout.Rollout)
		kind := "Rollout"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		rolloutHandler := handler.(RolloutHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*rolloutCtx)
				eobj := workCtx.obj
				fobj, err := ct.getObject(kind, workCtx.GetKey())
				if err != nil {
					ct.addObject(workCtx)
					ct.stats.Counter("Rollout_Created_Events").Inc()
					eobj.Lock()
					err = rolloutHandler.OnRolloutCreate(eobj)
					eobj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, eobj, err)
						ct.delObject(kind, workCtx.GetKey())
					}
				} else {
					workCtx := fobj.(*rolloutCtx)
					obj := workCtx.obj
					ct.stats.Counter("Rollout_Updated_Events").Inc()
					obj.Lock()
					p := rollout.Rollout{Spec: eobj.Spec,
						ObjectMeta: eobj.ObjectMeta,
						TypeMeta:   eobj.TypeMeta,
						Status:     eobj.Status}

					err = rolloutHandler.OnRolloutUpdate(obj, &p)
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					} else {
						workCtx.obj.Rollout = p
					}
					obj.Unlock()
				}
				return err
			}
			ctrlCtx := &rolloutCtx{event: evt.Type, obj: &Rollout{Rollout: *eobj, ctrler: ct}}
			ct.runFunction("Rollout", ctrlCtx, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*rolloutCtx)
				eobj := workCtx.obj
				fobj, err := ct.findObject(kind, workCtx.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Rollout)
				ct.stats.Counter("Rollout_Deleted_Events").Inc()
				obj.Lock()
				err = rolloutHandler.OnRolloutDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, workCtx.GetKey())
				return nil
			}
			ctrlCtx := &rolloutCtx{event: evt.Type, obj: &Rollout{Rollout: *eobj, ctrler: ct}}
			ct.runFunction("Rollout", ctrlCtx, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Rollout watch channel", tp)
	}

	return nil
}

// diffRollout does a diff of Rollout objects between local cache and API server
func (ct *ctrlerCtx) diffRollout(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.RolloutV1().Rollout().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffRollout(): RolloutList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*rollout.Rollout)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Rollout().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffRollout(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Rollout,
			}
			ct.handleRolloutEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffRollout(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleRolloutEvent(&evt)
	}
}

func (ct *ctrlerCtx) runRolloutWatcher() {
	kind := "Rollout"

	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	rolloutHandler := handler.(RolloutHandler)

	opts := rolloutHandler.GetRolloutWatchOptions()

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	logger := ct.logger.WithContext("submodule", "RolloutWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffRollout(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Rollout_Watch").Inc()
		defer ct.stats.Counter("Rollout_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Rollout_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Rollout object watcher
				wt, werr := apicl.RolloutV1().Rollout().Watch(ctx, opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffRollout(apicl)
				rolloutHandler.OnRolloutReconnect()

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Rollout_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleRolloutEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchRollout starts watch on Rollout object
func (ct *ctrlerCtx) WatchRollout(handler RolloutHandler) error {
	kind := "Rollout"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Rollout watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Rollout watcher in a go routine
	ct.runRolloutWatcher()

	return nil
}

// StopWatchRollout stops watch on Rollout object
func (ct *ctrlerCtx) StopWatchRollout(handler RolloutHandler) error {
	kind := "Rollout"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Rollout watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// RolloutAPI returns
type RolloutAPI interface {
	Create(obj *rollout.Rollout) error
	SyncCreate(obj *rollout.Rollout) error
	Update(obj *rollout.Rollout) error
	SyncUpdate(obj *rollout.Rollout) error
	Delete(obj *rollout.Rollout) error
	Find(meta *api.ObjectMeta) (*Rollout, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Rollout, error)
	Watch(handler RolloutHandler) error
	StopWatch(handler RolloutHandler) error
	CreateRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalCreateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	SyncCreateRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalSyncCreateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	UpdateRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalUpdateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	SyncUpdateRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalSyncUpdateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	StopRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalStopRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	SyncStopRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalSyncStopRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	RemoveRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalRemoveRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
	SyncRemoveRollout(obj *rollout.Rollout) (*rollout.Rollout, error)
	RegisterLocalSyncRemoveRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error))
}

// dummy struct that implements RolloutAPI
type rolloutAPI struct {
	ct *ctrlerCtx

	localCreateRolloutHandler     func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localSyncCreateRolloutHandler func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localUpdateRolloutHandler     func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localSyncUpdateRolloutHandler func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localStopRolloutHandler       func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localSyncStopRolloutHandler   func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localRemoveRolloutHandler     func(obj *rollout.Rollout) (*rollout.Rollout, error)
	localSyncRemoveRolloutHandler func(obj *rollout.Rollout) (*rollout.Rollout, error)
}

// Create creates Rollout object
func (api *rolloutAPI) Create(obj *rollout.Rollout) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().Rollout().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.RolloutV1().Rollout().Update(context.Background(), obj)

		}
		return err
	}

	api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
	return nil
}

// SyncCreate creates Rollout object and updates the cache
func (api *rolloutAPI) SyncCreate(obj *rollout.Rollout) error {
	newObj := obj
	evtType := kvstore.Created
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RolloutV1().Rollout().Create(context.Background(), obj)
		if writeErr != nil && strings.Contains(writeErr.Error(), "AlreadyExists") {
			newObj, writeErr = apicl.RolloutV1().Rollout().Update(context.Background(), obj)
			evtType = kvstore.Updated
		}
	}

	if writeErr == nil {
		api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: evtType})
	}
	return writeErr
}

// Update triggers update on Rollout object
func (api *rolloutAPI) Update(obj *rollout.Rollout) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().Rollout().Update(context.Background(), obj)
		return err
	}

	api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
	return nil
}

// SyncUpdate triggers update on Rollout object and updates the cache
func (api *rolloutAPI) SyncUpdate(obj *rollout.Rollout) error {
	newObj := obj
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RolloutV1().Rollout().Update(context.Background(), obj)
	}

	if writeErr == nil {
		api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
	}

	return writeErr
}

// Delete deletes Rollout object
func (api *rolloutAPI) Delete(obj *rollout.Rollout) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().Rollout().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
	return nil
}

// MakeKey generates a KV store key for the object
func (api *rolloutAPI) getFullKey(tenant, name string) string {
	if tenant != "" {
		return fmt.Sprint(globals.ConfigRootPrefix, "/", "rollout", "/", "rollout", "/", tenant, "/", name)
	}
	return fmt.Sprint(globals.ConfigRootPrefix, "/", "rollout", "/", "rollout", "/", name)
}

// Find returns an object by meta
func (api *rolloutAPI) Find(meta *api.ObjectMeta) (*Rollout, error) {
	// find the object
	obj, err := api.ct.FindObject("Rollout", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Rollout:
		hobj := obj.(*Rollout)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Rollout objects
func (api *rolloutAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Rollout, error) {
	var objlist []*Rollout
	objs, err := api.ct.List("Rollout", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Rollout:
			eobj := obj.(*Rollout)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Rollout", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for Rollout object
func (api *rolloutAPI) Watch(handler RolloutHandler) error {
	api.ct.startWorkerPool("Rollout")
	return api.ct.WatchRollout(handler)
}

// StopWatch stop watch for Tenant Rollout object
func (api *rolloutAPI) StopWatch(handler RolloutHandler) error {
	api.ct.Lock()
	api.ct.workPools["Rollout"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchRollout(handler)
}

// CreateRollout is an API action
func (api *rolloutAPI) CreateRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		return apicl.RolloutV1().Rollout().CreateRollout(context.Background(), obj)
	}
	if api.localCreateRolloutHandler != nil {
		return api.localCreateRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

// SyncCreateRollout is an API action. Cache will be updated
func (api *rolloutAPI) SyncCreateRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		ret, err := apicl.RolloutV1().Rollout().CreateRollout(context.Background(), obj)
		if err != nil {
			return ret, err
		}
		// Perform Get to update the cache
		newObj, err := apicl.RolloutV1().Rollout().Get(context.Background(), obj.GetObjectMeta())
		if err == nil {
			api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
		}
		return ret, err
	}
	if api.localSyncCreateRolloutHandler != nil {
		return api.localSyncCreateRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

func (api *rolloutAPI) RegisterLocalCreateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localCreateRolloutHandler = fn
}

func (api *rolloutAPI) RegisterLocalSyncCreateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localSyncCreateRolloutHandler = fn
}

// UpdateRollout is an API action
func (api *rolloutAPI) UpdateRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		return apicl.RolloutV1().Rollout().UpdateRollout(context.Background(), obj)
	}
	if api.localUpdateRolloutHandler != nil {
		return api.localUpdateRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

// SyncUpdateRollout is an API action. Cache will be updated
func (api *rolloutAPI) SyncUpdateRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		ret, err := apicl.RolloutV1().Rollout().UpdateRollout(context.Background(), obj)
		if err != nil {
			return ret, err
		}
		// Perform Get to update the cache
		newObj, err := apicl.RolloutV1().Rollout().Get(context.Background(), obj.GetObjectMeta())
		if err == nil {
			api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
		}
		return ret, err
	}
	if api.localSyncUpdateRolloutHandler != nil {
		return api.localSyncUpdateRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

func (api *rolloutAPI) RegisterLocalUpdateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localUpdateRolloutHandler = fn
}

func (api *rolloutAPI) RegisterLocalSyncUpdateRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localSyncUpdateRolloutHandler = fn
}

// StopRollout is an API action
func (api *rolloutAPI) StopRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		return apicl.RolloutV1().Rollout().StopRollout(context.Background(), obj)
	}
	if api.localStopRolloutHandler != nil {
		return api.localStopRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

// SyncStopRollout is an API action. Cache will be updated
func (api *rolloutAPI) SyncStopRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		ret, err := apicl.RolloutV1().Rollout().StopRollout(context.Background(), obj)
		if err != nil {
			return ret, err
		}
		// Perform Get to update the cache
		newObj, err := apicl.RolloutV1().Rollout().Get(context.Background(), obj.GetObjectMeta())
		if err == nil {
			api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
		}
		return ret, err
	}
	if api.localSyncStopRolloutHandler != nil {
		return api.localSyncStopRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

func (api *rolloutAPI) RegisterLocalStopRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localStopRolloutHandler = fn
}

func (api *rolloutAPI) RegisterLocalSyncStopRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localSyncStopRolloutHandler = fn
}

// RemoveRollout is an API action
func (api *rolloutAPI) RemoveRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		return apicl.RolloutV1().Rollout().RemoveRollout(context.Background(), obj)
	}
	if api.localRemoveRolloutHandler != nil {
		return api.localRemoveRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

// SyncRemoveRollout is an API action. Cache will be updated
func (api *rolloutAPI) SyncRemoveRollout(obj *rollout.Rollout) (*rollout.Rollout, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		ret, err := apicl.RolloutV1().Rollout().RemoveRollout(context.Background(), obj)
		if err != nil {
			return ret, err
		}
		// Perform Get to update the cache
		newObj, err := apicl.RolloutV1().Rollout().Get(context.Background(), obj.GetObjectMeta())
		if err == nil {
			api.ct.handleRolloutEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
		}
		return ret, err
	}
	if api.localSyncRemoveRolloutHandler != nil {
		return api.localSyncRemoveRolloutHandler(obj)
	}
	return nil, fmt.Errorf("Action not implemented for local operation")
}

func (api *rolloutAPI) RegisterLocalRemoveRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localRemoveRolloutHandler = fn
}

func (api *rolloutAPI) RegisterLocalSyncRemoveRolloutHandler(fn func(*rollout.Rollout) (*rollout.Rollout, error)) {
	api.localSyncRemoveRolloutHandler = fn
}

// Rollout returns RolloutAPI
func (ct *ctrlerCtx) Rollout() RolloutAPI {
	kind := "Rollout"
	if _, ok := ct.apiInfMap[kind]; !ok {
		s := &rolloutAPI{ct: ct}
		ct.apiInfMap[kind] = s
	}
	return ct.apiInfMap[kind].(*rolloutAPI)
}

// RolloutAction is a wrapper object that implements additional functionality
type RolloutAction struct {
	sync.Mutex
	rollout.RolloutAction
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *RolloutAction) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("RolloutAction_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.RolloutV1().RolloutAction().UpdateStatus(context.Background(), &obj.RolloutAction)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.RolloutV1().RolloutAction().Create(context.Background(), &obj.RolloutAction)
	}

	return nil
}

// RolloutActionHandler is the event handler for RolloutAction object
type RolloutActionHandler interface {
	OnRolloutActionCreate(obj *RolloutAction) error
	OnRolloutActionUpdate(oldObj *RolloutAction, newObj *rollout.RolloutAction) error
	OnRolloutActionDelete(obj *RolloutAction) error
	GetRolloutActionWatchOptions() *api.ListWatchOptions
	OnRolloutActionReconnect()
}

// OnRolloutActionCreate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutActionCreate(obj *RolloutAction) error {
	log.Info("OnRolloutActionCreate is not implemented")
	return nil
}

// OnRolloutActionUpdate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutActionUpdate(oldObj *RolloutAction, newObj *rollout.RolloutAction) error {
	log.Info("OnRolloutActionUpdate is not implemented")
	return nil
}

// OnRolloutActionDelete is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutActionDelete(obj *RolloutAction) error {
	log.Info("OnRolloutActionDelete is not implemented")
	return nil
}

// GetRolloutActionWatchOptions is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) GetRolloutActionWatchOptions() *api.ListWatchOptions {
	log.Info("GetRolloutActionWatchOptions is not implemented")
	opts := &api.ListWatchOptions{}
	return opts
}

// OnRolloutActionReconnect is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnRolloutActionReconnect() {
	log.Info("OnRolloutActionReconnect is not implemented")
	return
}

// handleRolloutActionEvent handles RolloutAction events from watcher
func (ct *ctrlerCtx) handleRolloutActionEvent(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleRolloutActionEventNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *rollout.RolloutAction:
		eobj := evt.Object.(*rollout.RolloutAction)
		kind := "RolloutAction"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ctx := &rolloutactionCtx{event: evt.Type,
			obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on RolloutAction watch channel", tp)
	}

	return nil
}

// handleRolloutActionEventNoResolver handles RolloutAction events from watcher
func (ct *ctrlerCtx) handleRolloutActionEventNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *rollout.RolloutAction:
		eobj := evt.Object.(*rollout.RolloutAction)
		kind := "RolloutAction"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		rolloutactionHandler := handler.(RolloutActionHandler)
		// handle based on event type
		ctrlCtx := &rolloutactionCtx{event: evt.Type, obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.getObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.addObject(ctrlCtx)
				ct.stats.Counter("RolloutAction_Created_Events").Inc()

				// call the event handler
				ctrlCtx.Lock()
				err = rolloutactionHandler.OnRolloutActionCreate(ctrlCtx.obj)
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj, err)
					ct.delObject(kind, ctrlCtx.GetKey())
					return err
				}
			} else {
				fResVer, fErr := strconv.ParseInt(fobj.GetResourceVersion(), 10, 64)
				eResVer, eErr := strconv.ParseInt(eobj.GetResourceVersion(), 10, 64)
				if ct.resolver != nil && fErr == nil && eErr == nil && fResVer >= eResVer {
					// Event already processed.
					ct.logger.Infof("Skipping update due to old resource version")
					return nil
				}
				ctrlCtx := fobj.(*rolloutactionCtx)
				ct.stats.Counter("RolloutAction_Updated_Events").Inc()
				ctrlCtx.Lock()
				p := rollout.RolloutAction{Spec: eobj.Spec,
					ObjectMeta: eobj.ObjectMeta,
					TypeMeta:   eobj.TypeMeta,
					Status:     eobj.Status}

				err = rolloutactionHandler.OnRolloutActionUpdate(ctrlCtx.obj, &p)
				ctrlCtx.obj.RolloutAction = *eobj
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj, err)
					return err
				}

			}
		case kvstore.Deleted:
			ctrlCtx := &rolloutactionCtx{event: evt.Type, obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}
			fobj, err := ct.findObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*RolloutAction)
			ct.stats.Counter("RolloutAction_Deleted_Events").Inc()
			obj.Lock()
			err = rolloutactionHandler.OnRolloutActionDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}
			ct.delObject(kind, ctrlCtx.GetKey())
			return nil

		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on RolloutAction watch channel", tp)
	}

	return nil
}

type rolloutactionCtx struct {
	ctkitBaseCtx
	event kvstore.WatchEventType
	obj   *RolloutAction //
	//   newObj     *rollout.RolloutAction //update
	newObj *rolloutactionCtx //update
}

func (ctx *rolloutactionCtx) References() map[string]apiintf.ReferenceObj {
	resp := make(map[string]apiintf.ReferenceObj)
	ctx.obj.References(ctx.obj.GetObjectMeta().Name, ctx.obj.GetObjectMeta().Namespace, resp)
	return resp
}

func (ctx *rolloutactionCtx) GetKey() string {
	return ctx.obj.MakeKey("rollout")
}

func (ctx *rolloutactionCtx) GetKind() string {
	return ctx.obj.GetKind()
}

func (ctx *rolloutactionCtx) GetResourceVersion() string {
	return ctx.obj.GetResourceVersion()
}

func (ctx *rolloutactionCtx) SetEvent(event kvstore.WatchEventType) {
	ctx.event = event
}

func (ctx *rolloutactionCtx) SetNewObj(newObj apiintf.CtkitObject) {
	if newObj == nil {
		ctx.newObj = nil
	} else {
		ctx.newObj = newObj.(*rolloutactionCtx)
		ctx.newObj.obj.HandlerCtx = ctx.obj.HandlerCtx
	}
}

func (ctx *rolloutactionCtx) GetNewObj() apiintf.CtkitObject {
	return ctx.newObj
}

func (ctx *rolloutactionCtx) Copy(obj apiintf.CtkitObject) {
	ctx.obj.RolloutAction = obj.(*rolloutactionCtx).obj.RolloutAction
}

func (ctx *rolloutactionCtx) Lock() {
	ctx.obj.Lock()
}

func (ctx *rolloutactionCtx) Unlock() {
	ctx.obj.Unlock()
}

func (ctx *rolloutactionCtx) GetObjectMeta() *api.ObjectMeta {
	return ctx.obj.GetObjectMeta()
}

func (ctx *rolloutactionCtx) RuntimeObject() runtime.Object {
	var v interface{}
	v = ctx.obj
	return v.(runtime.Object)
}

func (ctx *rolloutactionCtx) WorkFunc(context context.Context) error {
	var err error
	evt := ctx.event
	ct := ctx.obj.ctrler
	kind := "RolloutAction"
	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	rolloutactionHandler := handler.(RolloutActionHandler)
	switch evt {
	case kvstore.Created:
		ctx.obj.Lock()
		err = rolloutactionHandler.OnRolloutActionCreate(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj, err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Updated:
		ct.stats.Counter("RolloutAction_Updated_Events").Inc()
		ctx.obj.Lock()
		p := rollout.RolloutAction{Spec: ctx.newObj.obj.Spec,
			ObjectMeta: ctx.newObj.obj.ObjectMeta,
			TypeMeta:   ctx.newObj.obj.TypeMeta,
			Status:     ctx.newObj.obj.Status}
		err = rolloutactionHandler.OnRolloutActionUpdate(ctx.obj, &p)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj, err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Deleted:
		ctx.obj.Lock()
		err = rolloutactionHandler.OnRolloutActionDelete(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error deleting %s %+v. Err: %v", kind, ctx.obj, err)
		}
	}
	ct.resolveObject(ctx.event, ctx)
	return nil
}

// handleRolloutActionEventParallel handles RolloutAction events from watcher
func (ct *ctrlerCtx) handleRolloutActionEventParallel(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleRolloutActionEventParallelWithNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *rollout.RolloutAction:
		eobj := evt.Object.(*rollout.RolloutAction)
		kind := "RolloutAction"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ctx := &rolloutactionCtx{event: evt.Type, obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on RolloutAction watch channel", tp)
	}

	return nil
}

// handleRolloutActionEventParallel handles RolloutAction events from watcher
func (ct *ctrlerCtx) handleRolloutActionEventParallelWithNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *rollout.RolloutAction:
		eobj := evt.Object.(*rollout.RolloutAction)
		kind := "RolloutAction"

		//ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		rolloutactionHandler := handler.(RolloutActionHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*rolloutactionCtx)
				eobj := workCtx.obj
				fobj, err := ct.getObject(kind, workCtx.GetKey())
				if err != nil {
					ct.addObject(workCtx)
					ct.stats.Counter("RolloutAction_Created_Events").Inc()
					eobj.Lock()
					err = rolloutactionHandler.OnRolloutActionCreate(eobj)
					eobj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, eobj, err)
						ct.delObject(kind, workCtx.GetKey())
					}
				} else {
					workCtx := fobj.(*rolloutactionCtx)
					obj := workCtx.obj
					ct.stats.Counter("RolloutAction_Updated_Events").Inc()
					obj.Lock()
					p := rollout.RolloutAction{Spec: eobj.Spec,
						ObjectMeta: eobj.ObjectMeta,
						TypeMeta:   eobj.TypeMeta,
						Status:     eobj.Status}

					err = rolloutactionHandler.OnRolloutActionUpdate(obj, &p)
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					} else {
						workCtx.obj.RolloutAction = p
					}
					obj.Unlock()
				}
				return err
			}
			ctrlCtx := &rolloutactionCtx{event: evt.Type, obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}
			ct.runFunction("RolloutAction", ctrlCtx, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*rolloutactionCtx)
				eobj := workCtx.obj
				fobj, err := ct.findObject(kind, workCtx.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*RolloutAction)
				ct.stats.Counter("RolloutAction_Deleted_Events").Inc()
				obj.Lock()
				err = rolloutactionHandler.OnRolloutActionDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				}
				ct.delObject(kind, workCtx.GetKey())
				return nil
			}
			ctrlCtx := &rolloutactionCtx{event: evt.Type, obj: &RolloutAction{RolloutAction: *eobj, ctrler: ct}}
			ct.runFunction("RolloutAction", ctrlCtx, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on RolloutAction watch channel", tp)
	}

	return nil
}

// diffRolloutAction does a diff of RolloutAction objects between local cache and API server
func (ct *ctrlerCtx) diffRolloutAction(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.RolloutV1().RolloutAction().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffRolloutAction(): RolloutActionList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*rollout.RolloutAction)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.RolloutAction().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffRolloutAction(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.RolloutAction,
			}
			ct.handleRolloutActionEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffRolloutAction(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleRolloutActionEvent(&evt)
	}
}

func (ct *ctrlerCtx) runRolloutActionWatcher() {
	kind := "RolloutAction"

	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	rolloutactionHandler := handler.(RolloutActionHandler)

	opts := rolloutactionHandler.GetRolloutActionWatchOptions()

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	logger := ct.logger.WithContext("submodule", "RolloutActionWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffRolloutAction(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("RolloutAction_Watch").Inc()
		defer ct.stats.Counter("RolloutAction_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("RolloutAction_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// RolloutAction object watcher
				wt, werr := apicl.RolloutV1().RolloutAction().Watch(ctx, opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffRolloutAction(apicl)
				rolloutactionHandler.OnRolloutActionReconnect()

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("RolloutAction_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleRolloutActionEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchRolloutAction starts watch on RolloutAction object
func (ct *ctrlerCtx) WatchRolloutAction(handler RolloutActionHandler) error {
	kind := "RolloutAction"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("RolloutAction watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run RolloutAction watcher in a go routine
	ct.runRolloutActionWatcher()

	return nil
}

// StopWatchRolloutAction stops watch on RolloutAction object
func (ct *ctrlerCtx) StopWatchRolloutAction(handler RolloutActionHandler) error {
	kind := "RolloutAction"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("RolloutAction watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	delete(ct.watchers, kind)
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// RolloutActionAPI returns
type RolloutActionAPI interface {
	Create(obj *rollout.RolloutAction) error
	SyncCreate(obj *rollout.RolloutAction) error
	Update(obj *rollout.RolloutAction) error
	SyncUpdate(obj *rollout.RolloutAction) error
	Delete(obj *rollout.RolloutAction) error
	Find(meta *api.ObjectMeta) (*RolloutAction, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*RolloutAction, error)
	Watch(handler RolloutActionHandler) error
	StopWatch(handler RolloutActionHandler) error
}

// dummy struct that implements RolloutActionAPI
type rolloutactionAPI struct {
	ct *ctrlerCtx
}

// Create creates RolloutAction object
func (api *rolloutactionAPI) Create(obj *rollout.RolloutAction) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().RolloutAction().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.RolloutV1().RolloutAction().Update(context.Background(), obj)

		}
		return err
	}

	api.ct.handleRolloutActionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
	return nil
}

// SyncCreate creates RolloutAction object and updates the cache
func (api *rolloutactionAPI) SyncCreate(obj *rollout.RolloutAction) error {
	newObj := obj
	evtType := kvstore.Created
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RolloutV1().RolloutAction().Create(context.Background(), obj)
		if writeErr != nil && strings.Contains(writeErr.Error(), "AlreadyExists") {
			newObj, writeErr = apicl.RolloutV1().RolloutAction().Update(context.Background(), obj)
			evtType = kvstore.Updated
		}
	}

	if writeErr == nil {
		api.ct.handleRolloutActionEvent(&kvstore.WatchEvent{Object: newObj, Type: evtType})
	}
	return writeErr
}

// Update triggers update on RolloutAction object
func (api *rolloutactionAPI) Update(obj *rollout.RolloutAction) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().RolloutAction().Update(context.Background(), obj)
		return err
	}

	api.ct.handleRolloutActionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
	return nil
}

// SyncUpdate triggers update on RolloutAction object and updates the cache
func (api *rolloutactionAPI) SyncUpdate(obj *rollout.RolloutAction) error {
	newObj := obj
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RolloutV1().RolloutAction().Update(context.Background(), obj)
	}

	if writeErr == nil {
		api.ct.handleRolloutActionEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
	}

	return writeErr
}

// Delete deletes RolloutAction object
func (api *rolloutactionAPI) Delete(obj *rollout.RolloutAction) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RolloutV1().RolloutAction().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	api.ct.handleRolloutActionEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
	return nil
}

// MakeKey generates a KV store key for the object
func (api *rolloutactionAPI) getFullKey(tenant, name string) string {
	if tenant != "" {
		return fmt.Sprint(globals.ConfigRootPrefix, "/", "rollout", "/", "rolloutAction", "/", tenant, "/", name)
	}
	return fmt.Sprint(globals.ConfigRootPrefix, "/", "rollout", "/", "rolloutAction", "/", name)
}

// Find returns an object by meta
func (api *rolloutactionAPI) Find(meta *api.ObjectMeta) (*RolloutAction, error) {
	// find the object
	obj, err := api.ct.FindObject("RolloutAction", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *RolloutAction:
		hobj := obj.(*RolloutAction)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all RolloutAction objects
func (api *rolloutactionAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*RolloutAction, error) {
	var objlist []*RolloutAction
	objs, err := api.ct.List("RolloutAction", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *RolloutAction:
			eobj := obj.(*RolloutAction)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for RolloutAction", tp)
		}
	}

	return objlist, nil
}

// Watch sets up a event handlers for RolloutAction object
func (api *rolloutactionAPI) Watch(handler RolloutActionHandler) error {
	api.ct.startWorkerPool("RolloutAction")
	return api.ct.WatchRolloutAction(handler)
}

// StopWatch stop watch for Tenant RolloutAction object
func (api *rolloutactionAPI) StopWatch(handler RolloutActionHandler) error {
	api.ct.Lock()
	api.ct.workPools["RolloutAction"].Stop()
	api.ct.Unlock()
	return api.ct.StopWatchRolloutAction(handler)
}

// RolloutAction returns RolloutActionAPI
func (ct *ctrlerCtx) RolloutAction() RolloutActionAPI {
	kind := "RolloutAction"
	if _, ok := ct.apiInfMap[kind]; !ok {
		s := &rolloutactionAPI{ct: ct}
		ct.apiInfMap[kind] = s
	}
	return ct.apiInfMap[kind].(*rolloutactionAPI)
}
