// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_routing.proto
*/
package ctkit

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/routing"
	apiintf "github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pensando/sw/venice/utils/shardworkers"
)

// Neighbor is a wrapper object that implements additional functionality
type Neighbor struct {
	sync.Mutex
	routing.Neighbor
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
	internal   bool
}

func (obj *Neighbor) SetInternal() {
	obj.internal = true
}

func (obj *Neighbor) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Neighbor_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.RoutingV1().Neighbor().UpdateStatus(context.Background(), &obj.Neighbor)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.RoutingV1().Neighbor().Create(context.Background(), &obj.Neighbor)
	}

	return nil
}

// NeighborHandler is the event handler for Neighbor object
type NeighborHandler interface {
	OnNeighborCreate(obj *Neighbor) error
	OnNeighborUpdate(oldObj *Neighbor, newObj *routing.Neighbor) error
	OnNeighborDelete(obj *Neighbor) error
	GetNeighborWatchOptions() *api.ListWatchOptions
	OnNeighborReconnect()
}

// OnNeighborCreate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnNeighborCreate(obj *Neighbor) error {
	log.Info("OnNeighborCreate is not implemented")
	return nil
}

// OnNeighborUpdate is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnNeighborUpdate(oldObj *Neighbor, newObj *routing.Neighbor) error {
	log.Info("OnNeighborUpdate is not implemented")
	return nil
}

// OnNeighborDelete is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnNeighborDelete(obj *Neighbor) error {
	log.Info("OnNeighborDelete is not implemented")
	return nil
}

// GetNeighborWatchOptions is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) GetNeighborWatchOptions() *api.ListWatchOptions {
	log.Info("GetNeighborWatchOptions is not implemented")
	opts := &api.ListWatchOptions{}
	return opts
}

// OnNeighborReconnect is a dummy handler used in init if no one registers the handler
func (ctrler CtrlDefReactor) OnNeighborReconnect() {
	log.Info("OnNeighborReconnect is not implemented")
	return
}

// handleNeighborEvent handles Neighbor events from watcher
func (ct *ctrlerCtx) handleNeighborEvent(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleNeighborEventNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *routing.Neighbor:
		eobj := evt.Object.(*routing.Neighbor)
		kind := "Neighbor"

		eobj.ApplyStorageTransformer(context.Background(), true /*encrypt*/)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		eobj.ApplyStorageTransformer(context.Background(), false /*decrypt*/)

		ctx := &neighborCtx{event: evt.Type,
			obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Neighbor watch channel", tp)
	}

	return nil
}

// handleNeighborEventNoResolver handles Neighbor events from watcher
func (ct *ctrlerCtx) handleNeighborEventNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *routing.Neighbor:
		eobj := evt.Object.(*routing.Neighbor)
		kind := "Neighbor"

		eobj.ApplyStorageTransformer(context.Background(), true /*encrypt*/)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		eobj.ApplyStorageTransformer(context.Background(), false /*decrypt*/)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		neighborHandler := handler.(NeighborHandler)
		// handle based on event type
		ctrlCtx := &neighborCtx{event: evt.Type, obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.getObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.addObject(ctrlCtx)
				ct.stats.Counter("Neighbor_Created_Events").Inc()

				// call the event handler
				ctrlCtx.Lock()
				err = neighborHandler.OnNeighborCreate(ctrlCtx.obj)
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj.GetObjectMeta(), err)
					ct.delObject(kind, ctrlCtx.GetKey())
					return err
				}
			} else {
				fResVer, fErr := strconv.ParseInt(fobj.GetResourceVersion(), 10, 64)
				eResVer, eErr := strconv.ParseInt(eobj.GetResourceVersion(), 10, 64)
				if ct.resolver != nil && fErr == nil && eErr == nil && fResVer >= eResVer {
					// Event already processed.
					ct.logger.Infof("Skipping update due to old resource version")
					return nil
				}
				ctrlCtx := fobj.(*neighborCtx)
				ct.stats.Counter("Neighbor_Updated_Events").Inc()
				ctrlCtx.Lock()
				p := routing.Neighbor{Spec: eobj.Spec,
					ObjectMeta: eobj.ObjectMeta,
					TypeMeta:   eobj.TypeMeta,
					Status:     eobj.Status}

				err = neighborHandler.OnNeighborUpdate(ctrlCtx.obj, &p)
				ctrlCtx.obj.Neighbor = *eobj
				ctrlCtx.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctrlCtx.obj.GetObjectMeta(), err)
					return err
				}

			}
		case kvstore.Deleted:
			ctrlCtx := &neighborCtx{event: evt.Type, obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}
			fobj, err := ct.findObject(kind, ctrlCtx.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Neighbor)
			ct.stats.Counter("Neighbor_Deleted_Events").Inc()
			obj.Lock()
			err = neighborHandler.OnNeighborDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj.GetObjectMeta(), err)
			}
			ct.delObject(kind, ctrlCtx.GetKey())
			return nil

		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Neighbor watch channel", tp)
	}

	return nil
}

type neighborCtx struct {
	ctkitBaseCtx
	event kvstore.WatchEventType
	obj   *Neighbor //
	//   newObj     *routing.Neighbor //update
	newObj *neighborCtx //update
}

func (ctx *neighborCtx) References() map[string]apiintf.ReferenceObj {
	if ctx.references == nil {
		resp := make(map[string]apiintf.ReferenceObj)
		ctx.references = resp
		ctx.obj.References(ctx.obj.GetObjectMeta().Name, ctx.obj.GetObjectMeta().Namespace, resp)
		ctx.obj.ctrler.filterOutRefs(ctx)
	}
	return ctx.references
}

func (ctx *neighborCtx) GetKey() string {
	return ctx.obj.MakeKey("routing")

}

func (ctx *neighborCtx) IsInternal() bool {
	return ctx.obj.internal
}

func (ctx *neighborCtx) GetKind() string {
	return ctx.obj.GetKind()
}

func (ctx *neighborCtx) GetResourceVersion() string {
	return ctx.obj.GetResourceVersion()
}

func (ctx *neighborCtx) SetEvent(event kvstore.WatchEventType) {
	ctx.event = event
}

func (ctx *neighborCtx) SetNewObj(newObj apiintf.CtkitObject) {
	if newObj == nil {
		ctx.newObj = nil
	} else {
		ctx.newObj = newObj.(*neighborCtx)
		ctx.newObj.obj.HandlerCtx = ctx.obj.HandlerCtx
		ctx.references = newObj.References()
	}
}

func (ctx *neighborCtx) GetNewObj() apiintf.CtkitObject {
	return ctx.newObj
}

func (ctx *neighborCtx) Copy(obj apiintf.CtkitObject) {
	ctx.obj.Neighbor = obj.(*neighborCtx).obj.Neighbor
	ctx.SetWatchTs(obj.GetWatchTs())
}

func (ctx *neighborCtx) Lock() {
	ctx.obj.Lock()
}

func (ctx *neighborCtx) Unlock() {
	ctx.obj.Unlock()
}

func (ctx *neighborCtx) GetObjectMeta() *api.ObjectMeta {
	return ctx.obj.GetObjectMeta()
}

func (ctx *neighborCtx) RuntimeObject() runtime.Object {
	var v interface{}
	v = ctx.obj
	return v.(runtime.Object)
}

func (ctx *neighborCtx) WorkFunc(context context.Context) error {
	var err error
	evt := ctx.event
	ct := ctx.obj.ctrler
	kind := "Neighbor"
	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	neighborHandler := handler.(NeighborHandler)
	switch evt {
	case kvstore.Created:
		ctx.obj.Lock()
		err = neighborHandler.OnNeighborCreate(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj.GetObjectMeta(), err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Updated:
		ct.stats.Counter("Neighbor_Updated_Events").Inc()
		ctx.obj.Lock()
		p := routing.Neighbor{Spec: ctx.newObj.obj.Spec,
			ObjectMeta: ctx.newObj.obj.ObjectMeta,
			TypeMeta:   ctx.newObj.obj.TypeMeta,
			Status:     ctx.newObj.obj.Status}
		err = neighborHandler.OnNeighborUpdate(ctx.obj, &p)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, ctx.obj.GetObjectMeta(), err)
			ctx.SetEvent(kvstore.Deleted)
		}
	case kvstore.Deleted:
		ctx.obj.Lock()
		err = neighborHandler.OnNeighborDelete(ctx.obj)
		ctx.obj.Unlock()
		if err != nil {
			ct.logger.Errorf("Error deleting %s %+v. Err: %v", kind, ctx.obj.GetObjectMeta(), err)
		}
	}
	ct.resolveObject(ctx.event, ctx)
	return nil
}

// handleNeighborEventParallel handles Neighbor events from watcher
func (ct *ctrlerCtx) handleNeighborEventParallel(evt *kvstore.WatchEvent) error {

	if ct.objResolver == nil {
		return ct.handleNeighborEventParallelWithNoResolver(evt)
	}

	switch tp := evt.Object.(type) {
	case *routing.Neighbor:
		eobj := evt.Object.(*routing.Neighbor)
		kind := "Neighbor"

		eobj.ApplyStorageTransformer(context.Background(), true /*encrypt*/)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		eobj.ApplyStorageTransformer(context.Background(), false /*decrypt*/)

		ctx := &neighborCtx{event: evt.Type, obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}
		ctx.SetWatchTs(evt.WatchTS)

		var err error
		switch evt.Type {
		case kvstore.Created:
			err = ct.processAdd(ctx)
		case kvstore.Updated:
			err = ct.processUpdate(ctx)
		case kvstore.Deleted:
			err = ct.processDelete(ctx)
		}
		return err
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Neighbor watch channel", tp)
	}

	return nil
}

// handleNeighborEventParallel handles Neighbor events from watcher
func (ct *ctrlerCtx) handleNeighborEventParallelWithNoResolver(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *routing.Neighbor:
		eobj := evt.Object.(*routing.Neighbor)
		kind := "Neighbor"

		eobj.ApplyStorageTransformer(context.Background(), true /*encrypt*/)
		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)
		eobj.ApplyStorageTransformer(context.Background(), false /*decrypt*/)

		ct.Lock()
		handler, ok := ct.handlers[kind]
		ct.Unlock()
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		neighborHandler := handler.(NeighborHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*neighborCtx)
				eobj := workCtx.obj
				fobj, err := ct.getObject(kind, workCtx.GetKey())
				if err != nil {
					ct.addObject(workCtx)
					ct.stats.Counter("Neighbor_Created_Events").Inc()
					eobj.Lock()
					err = neighborHandler.OnNeighborCreate(eobj)
					eobj.Unlock()
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, eobj.GetObjectMeta(), err)
						ct.delObject(kind, workCtx.GetKey())
					}
				} else {
					workCtx = fobj.(*neighborCtx)
					obj := workCtx.obj
					ct.stats.Counter("Neighbor_Updated_Events").Inc()
					obj.Lock()
					p := routing.Neighbor{Spec: eobj.Spec,
						ObjectMeta: eobj.ObjectMeta,
						TypeMeta:   eobj.TypeMeta,
						Status:     eobj.Status}

					err = neighborHandler.OnNeighborUpdate(obj, &p)
					if err != nil {
						ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj.GetObjectMeta(), err)
					} else {
						workCtx.obj.Neighbor = p
					}
					obj.Unlock()
				}
				workCtx.SetWatchTs(evt.WatchTS)
				return err
			}
			ctrlCtx := &neighborCtx{event: evt.Type, obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}
			ct.runFunction("Neighbor", ctrlCtx, workFunc)
		case kvstore.Deleted:
			workFunc := func(ctx context.Context, ctrlCtx shardworkers.WorkObj) error {
				var err error
				workCtx := ctrlCtx.(*neighborCtx)
				eobj := workCtx.obj
				fobj, err := ct.findObject(kind, workCtx.GetKey())
				if err != nil {
					ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
					return err
				}
				obj := fobj.(*Neighbor)
				ct.stats.Counter("Neighbor_Deleted_Events").Inc()
				obj.Lock()
				err = neighborHandler.OnNeighborDelete(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj.GetObjectMeta(), err)
				}
				ct.delObject(kind, workCtx.GetKey())
				return nil
			}
			ctrlCtx := &neighborCtx{event: evt.Type, obj: &Neighbor{Neighbor: *eobj, ctrler: ct}}
			ct.runFunction("Neighbor", ctrlCtx, workFunc)
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Neighbor watch channel", tp)
	}

	return nil
}

// diffNeighbor does a diff of Neighbor objects between local cache and API server
func (ct *ctrlerCtx) diffNeighbor(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.RoutingV1().Neighbor().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffNeighbor(): NeighborList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*routing.Neighbor)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	list, err := ct.Neighbor().List(context.Background(), &opts)
	if err != nil && !strings.Contains(err.Error(), "not found in local cache") {
		ct.logger.Infof("Failed to get a list of objects. Err: %s", err)
		return
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range list {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffNeighbor(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Neighbor,
			}
			ct.handleNeighborEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffNeighbor(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleNeighborEvent(&evt)
	}
}

func (ct *ctrlerCtx) runNeighborWatcher() {
	kind := "Neighbor"

	ct.Lock()
	handler, ok := ct.handlers[kind]
	ct.Unlock()
	if !ok {
		ct.logger.Fatalf("Cant find the handler for %s", kind)
	}
	neighborHandler := handler.(NeighborHandler)

	opts := neighborHandler.GetNeighborWatchOptions()

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	logger := ct.logger.WithContext("submodule", "NeighborWatcher")
	for {
		if ctx.Err() != nil {
			return
		}

		apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
		// create a grpc client
		if err == nil {
			// Upon successful connection perform the diff, and start watch goroutine
			ct.diffNeighbor(apiclt)
			break
		}

		logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		time.Sleep(time.Second)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Neighbor_Watch").Inc()
		defer ct.stats.Counter("Neighbor_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Neighbor_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Neighbor object watcher
				wt, werr := apicl.RoutingV1().Neighbor().Watch(ctx, opts)
				if werr != nil {
					select {
					case <-ctx.Done():
						logger.Infof("watch %s cancelled", kind)
						return
					default:
					}
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				// Sleeping to give time for other apiclient's to reconnect
				// before calling reconnect handler
				time.Sleep(time.Second)
				ct.diffNeighbor(apicl)
				neighborHandler.OnNeighborReconnect()

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Neighbor_WatchErrors").Inc()
							break innerLoop
						}

						// handle event in parallel
						ct.handleNeighborEventParallel(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchNeighbor starts watch on Neighbor object
func (ct *ctrlerCtx) WatchNeighbor(handler NeighborHandler) error {
	kind := "Neighbor"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchCancel[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Neighbor watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Neighbor watcher in a go routine
	ct.runNeighborWatcher()

	return nil
}

// StopWatchNeighbor stops watch on Neighbor object
func (ct *ctrlerCtx) StopWatchNeighbor(handler NeighborHandler) error {
	kind := "Neighbor"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchCancel[kind]
	ct.Unlock()
	if !ok {
		return fmt.Errorf("Neighbor watcher does not exist")
	}

	ct.Lock()
	cancel, _ := ct.watchCancel[kind]
	cancel()
	if _, ok := ct.watchers[kind]; ok {
		delete(ct.watchers, kind)
	}
	delete(ct.watchCancel, kind)
	ct.Unlock()

	time.Sleep(100 * time.Millisecond)

	return nil
}

// NeighborAPI returns
type NeighborAPI interface {
	Create(obj *routing.Neighbor) error
	SyncCreate(obj *routing.Neighbor) error
	Update(obj *routing.Neighbor) error
	SyncUpdate(obj *routing.Neighbor) error
	Label(obj *api.Label) error
	Delete(obj *routing.Neighbor) error
	SyncDelete(obj *routing.Neighbor) error
	Find(meta *api.ObjectMeta) (*Neighbor, error)
	List(ctx context.Context, opts *api.ListWatchOptions) ([]*Neighbor, error)
	ApisrvList(ctx context.Context, opts *api.ListWatchOptions) ([]*routing.Neighbor, error)
	Watch(handler NeighborHandler) error
	ClearCache(handler NeighborHandler)
	StopWatch(handler NeighborHandler) error
}

// dummy struct that implements NeighborAPI
type neighborAPI struct {
	ct *ctrlerCtx
}

// Create creates Neighbor object
func (api *neighborAPI) Create(obj *routing.Neighbor) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RoutingV1().Neighbor().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.RoutingV1().Neighbor().Update(context.Background(), obj)

		}
		return err
	}

	api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
	return nil
}

// SyncCreate creates Neighbor object and updates the cache
func (api *neighborAPI) SyncCreate(obj *routing.Neighbor) error {
	newObj := obj
	evtType := kvstore.Created
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RoutingV1().Neighbor().Create(context.Background(), obj)
		if writeErr != nil && strings.Contains(writeErr.Error(), "AlreadyExists") {
			newObj, writeErr = apicl.RoutingV1().Neighbor().Update(context.Background(), obj)
			evtType = kvstore.Updated
		}
	}

	if writeErr == nil {
		api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: newObj, Type: evtType})
	}
	return writeErr
}

// Update triggers update on Neighbor object
func (api *neighborAPI) Update(obj *routing.Neighbor) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RoutingV1().Neighbor().Update(context.Background(), obj)
		return err
	}

	api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
	return nil
}

// SyncUpdate triggers update on Neighbor object and updates the cache
func (api *neighborAPI) SyncUpdate(obj *routing.Neighbor) error {
	if api.ct.objResolver != nil {
		log.Fatal("Cannot use Sync update when object resolver is enabled on ctkit")
	}
	newObj := obj
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		newObj, writeErr = apicl.RoutingV1().Neighbor().Update(context.Background(), obj)
	}

	if writeErr == nil {
		api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: newObj, Type: kvstore.Updated})
	}

	return writeErr
}

// Label labels Neighbor object
func (api *neighborAPI) Label(obj *api.Label) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RoutingV1().Neighbor().Label(context.Background(), obj)
		return err
	}

	ctkitObj, err := api.Find(obj.GetObjectMeta())
	if err != nil {
		return err
	}
	writeObj := ctkitObj.Neighbor
	writeObj.Labels = obj.Labels

	api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: &writeObj, Type: kvstore.Updated})
	return nil
}

// Delete deletes Neighbor object
func (api *neighborAPI) Delete(obj *routing.Neighbor) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.RoutingV1().Neighbor().Delete(context.Background(), &obj.ObjectMeta)
		return err
	}

	api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
	return nil
}

// SyncDelete deletes Neighbor object and updates the cache
func (api *neighborAPI) SyncDelete(obj *routing.Neighbor) error {
	var writeErr error
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, writeErr = apicl.RoutingV1().Neighbor().Delete(context.Background(), &obj.ObjectMeta)
	}

	if writeErr == nil {
		api.ct.handleNeighborEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
	}

	return writeErr
}

// MakeKey generates a KV store key for the object
func (api *neighborAPI) getFullKey(tenant, name string) string {
	if tenant != "" {
		return fmt.Sprint(globals.ConfigRootPrefix, "/", "routing", "/", "neighbors", "/", tenant, "/", name)
	}
	return fmt.Sprint(globals.ConfigRootPrefix, "/", "routing", "/", "neighbors", "/", name)
}

// Find returns an object by meta
func (api *neighborAPI) Find(meta *api.ObjectMeta) (*Neighbor, error) {
	// find the object
	obj, err := api.ct.FindObject("Neighbor", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Neighbor:
		hobj := obj.(*Neighbor)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Neighbor objects
func (api *neighborAPI) List(ctx context.Context, opts *api.ListWatchOptions) ([]*Neighbor, error) {
	var objlist []*Neighbor
	objs, err := api.ct.List("Neighbor", ctx, opts)

	if err != nil {
		return nil, err
	}

	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Neighbor:
			eobj := obj.(*Neighbor)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Neighbor", tp)
		}
	}

	return objlist, nil
}

// ApisrvList returns a list of all Neighbor objects from apiserver
func (api *neighborAPI) ApisrvList(ctx context.Context, opts *api.ListWatchOptions) ([]*routing.Neighbor, error) {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return nil, err
		}

		return apicl.RoutingV1().Neighbor().List(context.Background(), opts)
	}

	// List from local cache
	ctkitObjs, err := api.List(ctx, opts)
	if err != nil {
		return nil, err
	}
	var ret []*routing.Neighbor
	for _, obj := range ctkitObjs {
		ret = append(ret, &obj.Neighbor)
	}
	return ret, nil
}

// Watch sets up a event handlers for Neighbor object
func (api *neighborAPI) Watch(handler NeighborHandler) error {
	api.ct.startWorkerPool("Neighbor")
	return api.ct.WatchNeighbor(handler)
}

// StopWatch stop watch for Tenant Neighbor object
func (api *neighborAPI) StopWatch(handler NeighborHandler) error {
	api.ct.Lock()
	worker := api.ct.workPools["Neighbor"]
	api.ct.Unlock()
	// Don't call stop with ctkit lock. Lock might be taken when an event comes in for the worker
	if worker != nil {
		worker.Stop()
	}
	return api.ct.StopWatchNeighbor(handler)
}

// ClearCache removes all Neighbor objects in ctkit
func (api *neighborAPI) ClearCache(handler NeighborHandler) {
	api.ct.delKind("Neighbor")
}

// Neighbor returns NeighborAPI
func (ct *ctrlerCtx) Neighbor() NeighborAPI {
	kind := "Neighbor"
	if _, ok := ct.apiInfMap[kind]; !ok {
		s := &neighborAPI{ct: ct}
		ct.apiInfMap[kind] = s
	}
	return ct.apiInfMap[kind].(*neighborAPI)
}
