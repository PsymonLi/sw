// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_auth.proto
*/
package ctkit

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/auth"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// User is a wrapper object that implements additional functionality
type User struct {
	sync.Mutex
	auth.User
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *User) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		log.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		nobj := *obj
		// FIXME: clear the resource version till we figure out CAS semantics
		nobj.ObjectMeta.ResourceVersion = ""

		// update it
		_, err = apicl.AuthV1().User().Update(context.Background(), &nobj.User)
	} else {
		//  create
		_, err = apicl.AuthV1().User().Create(context.Background(), &obj.User)
	}

	return nil
}

// UserHandler is the event handler for User object
type UserHandler interface {
	OnUserCreate(obj *User) error
	OnUserUpdate(obj *User) error
	OnUserDelete(obj *User) error
}

// handleUserEvent handles User events from watcher
func (ct *ctrlerCtx) handleUserEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *auth.User:
		eobj := evt.Object.(*auth.User)
		kind := "User"

		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		handler, ok := ct.handlers[kind]
		if !ok {
			log.Fatalf("Cant find the handler for %s", kind)
		}
		userHandler := handler.(UserHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &User{
					User:       *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				// call the event handler
				obj.Lock()
				err = userHandler.OnUserCreate(obj)
				obj.Unlock()
				if err != nil {
					log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*User)
				obj.ObjectMeta = eobj.ObjectMeta

				// see if it changed
				if _, ok := ref.ObjDiff(obj.Spec, eobj.Spec); ok {
					obj.Spec = eobj.Spec
					// call the event handler
					obj.Lock()
					err = userHandler.OnUserUpdate(obj)
					obj.Unlock()
					if err != nil {
						log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						return err
					}
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				log.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*User)

			// Call the event reactor
			obj.Lock()
			err = userHandler.OnUserDelete(obj)
			obj.Unlock()
			if err != nil {
				log.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				return err
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		log.Fatalf("API watcher Found object of invalid type: %v on User watch channel", tp)
	}

	return nil
}

// diffUser does a diff of User objects between local cache and API server
func (ct *ctrlerCtx) diffUser(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.AuthV1().User().List(context.Background(), &opts)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	// build an object map
	objmap := make(map[string]*auth.User)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range ct.User().List() {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.User,
			}
			ct.handleUserEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleUserEvent(&evt)
	}
}

func (ct *ctrlerCtx) runUserWatcher() {
	kind := "User"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}

	// setup wait group
	ct.waitGrp.Add(1)
	defer ct.waitGrp.Done()

	// loop forever
	for {
		// create a grpc client
		apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, ct.logger, rpckit.WithBalancer(ct.balancer))
		if err != nil {
			log.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		} else {
			log.Infof("API client connected {%+v}", apicl)

			// User object watcher
			wt, werr := apicl.AuthV1().User().Watch(ctx, &opts)
			if werr != nil {
				log.Errorf("Failed to start %s watch (%s)\n", kind, werr)
				return
			}
			ct.Lock()
			ct.watchers[kind] = wt
			ct.Unlock()

			// perform a diff with API server and local cache
			time.Sleep(time.Millisecond * 100)
			ct.diffUser(apicl)

			// handle api server watch events
		innerLoop:
			for {
				// wait for events
				select {
				case evt, ok := <-wt.EventChan():
					if !ok {
						log.Error("Error receiving from apisrv watcher")
						break innerLoop
					}

					// handle event
					ct.handleUserEvent(evt)
				}
			}
			apicl.Close()
		}

		// if stop flag is set, we are done
		if ct.stoped {
			log.Infof("Exiting API server watcher")
			return
		}

		// wait for a second and retry connecting to api server
		time.Sleep(time.Second)
	}
}

// WatchUser starts watch on User object
func (ct *ctrlerCtx) WatchUser(handler UserHandler) error {
	kind := "User"

	ct.Lock()
	defer ct.Unlock()

	// see if we already have a watcher
	_, ok := ct.watchers[kind]
	if ok {
		return fmt.Errorf("User watcher already exists")
	}

	// save handler
	ct.handlers[kind] = handler

	// run User watcher in a go routine
	go ct.runUserWatcher()

	return nil
}

// UserAPI returns
type UserAPI interface {
	Create(obj *auth.User) error
	Update(obj *auth.User) error
	Delete(obj *auth.User) error
	List() []*User
	Watch(handler UserHandler) error
}

// dummy struct that implements UserAPI
type userAPI struct {
	ct *ctrlerCtx
}

// Create creates User object
func (api *userAPI) Create(obj *auth.User) error {
	return api.ct.handleUserEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on User object
func (api *userAPI) Update(obj *auth.User) error {
	return api.ct.handleUserEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes User object
func (api *userAPI) Delete(obj *auth.User) error {
	return api.ct.handleUserEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// List returns a list of all User objects
func (api *userAPI) List() []*User {
	var objlist []*User

	objs := api.ct.ListObjects("User")
	for _, obj := range objs {
		switch tp := obj.(type) {
		case *User:
			eobj := obj.(*User)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for User", tp)
		}
	}

	return objlist
}

// Watch sets up a event handlers for User object
func (api *userAPI) Watch(handler UserHandler) error {
	return api.ct.WatchUser(handler)
}

// User returns UserAPI
func (ct *ctrlerCtx) User() UserAPI {
	return &userAPI{ct: ct}
}

// AuthenticationPolicy is a wrapper object that implements additional functionality
type AuthenticationPolicy struct {
	sync.Mutex
	auth.AuthenticationPolicy
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *AuthenticationPolicy) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		log.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		nobj := *obj
		// FIXME: clear the resource version till we figure out CAS semantics
		nobj.ObjectMeta.ResourceVersion = ""

		// update it
		_, err = apicl.AuthV1().AuthenticationPolicy().Update(context.Background(), &nobj.AuthenticationPolicy)
	} else {
		//  create
		_, err = apicl.AuthV1().AuthenticationPolicy().Create(context.Background(), &obj.AuthenticationPolicy)
	}

	return nil
}

// AuthenticationPolicyHandler is the event handler for AuthenticationPolicy object
type AuthenticationPolicyHandler interface {
	OnAuthenticationPolicyCreate(obj *AuthenticationPolicy) error
	OnAuthenticationPolicyUpdate(obj *AuthenticationPolicy) error
	OnAuthenticationPolicyDelete(obj *AuthenticationPolicy) error
}

// handleAuthenticationPolicyEvent handles AuthenticationPolicy events from watcher
func (ct *ctrlerCtx) handleAuthenticationPolicyEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *auth.AuthenticationPolicy:
		eobj := evt.Object.(*auth.AuthenticationPolicy)
		kind := "AuthenticationPolicy"

		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		handler, ok := ct.handlers[kind]
		if !ok {
			log.Fatalf("Cant find the handler for %s", kind)
		}
		authenticationpolicyHandler := handler.(AuthenticationPolicyHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &AuthenticationPolicy{
					AuthenticationPolicy: *eobj,
					HandlerCtx:           nil,
					ctrler:               ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				// call the event handler
				obj.Lock()
				err = authenticationpolicyHandler.OnAuthenticationPolicyCreate(obj)
				obj.Unlock()
				if err != nil {
					log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*AuthenticationPolicy)
				obj.ObjectMeta = eobj.ObjectMeta

				// see if it changed
				if _, ok := ref.ObjDiff(obj.Spec, eobj.Spec); ok {
					obj.Spec = eobj.Spec
					// call the event handler
					obj.Lock()
					err = authenticationpolicyHandler.OnAuthenticationPolicyUpdate(obj)
					obj.Unlock()
					if err != nil {
						log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						return err
					}
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				log.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*AuthenticationPolicy)

			// Call the event reactor
			obj.Lock()
			err = authenticationpolicyHandler.OnAuthenticationPolicyDelete(obj)
			obj.Unlock()
			if err != nil {
				log.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				return err
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		log.Fatalf("API watcher Found object of invalid type: %v on AuthenticationPolicy watch channel", tp)
	}

	return nil
}

// diffAuthenticationPolicy does a diff of AuthenticationPolicy objects between local cache and API server
func (ct *ctrlerCtx) diffAuthenticationPolicy(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.AuthV1().AuthenticationPolicy().List(context.Background(), &opts)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	// build an object map
	objmap := make(map[string]*auth.AuthenticationPolicy)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range ct.AuthenticationPolicy().List() {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.AuthenticationPolicy,
			}
			ct.handleAuthenticationPolicyEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleAuthenticationPolicyEvent(&evt)
	}
}

func (ct *ctrlerCtx) runAuthenticationPolicyWatcher() {
	kind := "AuthenticationPolicy"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}

	// setup wait group
	ct.waitGrp.Add(1)
	defer ct.waitGrp.Done()

	// loop forever
	for {
		// create a grpc client
		apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, ct.logger, rpckit.WithBalancer(ct.balancer))
		if err != nil {
			log.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		} else {
			log.Infof("API client connected {%+v}", apicl)

			// AuthenticationPolicy object watcher
			wt, werr := apicl.AuthV1().AuthenticationPolicy().Watch(ctx, &opts)
			if werr != nil {
				log.Errorf("Failed to start %s watch (%s)\n", kind, werr)
				return
			}
			ct.Lock()
			ct.watchers[kind] = wt
			ct.Unlock()

			// perform a diff with API server and local cache
			time.Sleep(time.Millisecond * 100)
			ct.diffAuthenticationPolicy(apicl)

			// handle api server watch events
		innerLoop:
			for {
				// wait for events
				select {
				case evt, ok := <-wt.EventChan():
					if !ok {
						log.Error("Error receiving from apisrv watcher")
						break innerLoop
					}

					// handle event
					ct.handleAuthenticationPolicyEvent(evt)
				}
			}
			apicl.Close()
		}

		// if stop flag is set, we are done
		if ct.stoped {
			log.Infof("Exiting API server watcher")
			return
		}

		// wait for a second and retry connecting to api server
		time.Sleep(time.Second)
	}
}

// WatchAuthenticationPolicy starts watch on AuthenticationPolicy object
func (ct *ctrlerCtx) WatchAuthenticationPolicy(handler AuthenticationPolicyHandler) error {
	kind := "AuthenticationPolicy"

	ct.Lock()
	defer ct.Unlock()

	// see if we already have a watcher
	_, ok := ct.watchers[kind]
	if ok {
		return fmt.Errorf("AuthenticationPolicy watcher already exists")
	}

	// save handler
	ct.handlers[kind] = handler

	// run AuthenticationPolicy watcher in a go routine
	go ct.runAuthenticationPolicyWatcher()

	return nil
}

// AuthenticationPolicyAPI returns
type AuthenticationPolicyAPI interface {
	Create(obj *auth.AuthenticationPolicy) error
	Update(obj *auth.AuthenticationPolicy) error
	Delete(obj *auth.AuthenticationPolicy) error
	List() []*AuthenticationPolicy
	Watch(handler AuthenticationPolicyHandler) error
}

// dummy struct that implements AuthenticationPolicyAPI
type authenticationpolicyAPI struct {
	ct *ctrlerCtx
}

// Create creates AuthenticationPolicy object
func (api *authenticationpolicyAPI) Create(obj *auth.AuthenticationPolicy) error {
	return api.ct.handleAuthenticationPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on AuthenticationPolicy object
func (api *authenticationpolicyAPI) Update(obj *auth.AuthenticationPolicy) error {
	return api.ct.handleAuthenticationPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes AuthenticationPolicy object
func (api *authenticationpolicyAPI) Delete(obj *auth.AuthenticationPolicy) error {
	return api.ct.handleAuthenticationPolicyEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// List returns a list of all AuthenticationPolicy objects
func (api *authenticationpolicyAPI) List() []*AuthenticationPolicy {
	var objlist []*AuthenticationPolicy

	objs := api.ct.ListObjects("AuthenticationPolicy")
	for _, obj := range objs {
		switch tp := obj.(type) {
		case *AuthenticationPolicy:
			eobj := obj.(*AuthenticationPolicy)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for AuthenticationPolicy", tp)
		}
	}

	return objlist
}

// Watch sets up a event handlers for AuthenticationPolicy object
func (api *authenticationpolicyAPI) Watch(handler AuthenticationPolicyHandler) error {
	return api.ct.WatchAuthenticationPolicy(handler)
}

// AuthenticationPolicy returns AuthenticationPolicyAPI
func (ct *ctrlerCtx) AuthenticationPolicy() AuthenticationPolicyAPI {
	return &authenticationpolicyAPI{ct: ct}
}

// Role is a wrapper object that implements additional functionality
type Role struct {
	sync.Mutex
	auth.Role
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Role) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		log.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		nobj := *obj
		// FIXME: clear the resource version till we figure out CAS semantics
		nobj.ObjectMeta.ResourceVersion = ""

		// update it
		_, err = apicl.AuthV1().Role().Update(context.Background(), &nobj.Role)
	} else {
		//  create
		_, err = apicl.AuthV1().Role().Create(context.Background(), &obj.Role)
	}

	return nil
}

// RoleHandler is the event handler for Role object
type RoleHandler interface {
	OnRoleCreate(obj *Role) error
	OnRoleUpdate(obj *Role) error
	OnRoleDelete(obj *Role) error
}

// handleRoleEvent handles Role events from watcher
func (ct *ctrlerCtx) handleRoleEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *auth.Role:
		eobj := evt.Object.(*auth.Role)
		kind := "Role"

		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		handler, ok := ct.handlers[kind]
		if !ok {
			log.Fatalf("Cant find the handler for %s", kind)
		}
		roleHandler := handler.(RoleHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Role{
					Role:       *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				// call the event handler
				obj.Lock()
				err = roleHandler.OnRoleCreate(obj)
				obj.Unlock()
				if err != nil {
					log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Role)
				obj.ObjectMeta = eobj.ObjectMeta

				// see if it changed
				if _, ok := ref.ObjDiff(obj.Spec, eobj.Spec); ok {
					obj.Spec = eobj.Spec
					// call the event handler
					obj.Lock()
					err = roleHandler.OnRoleUpdate(obj)
					obj.Unlock()
					if err != nil {
						log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						return err
					}
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				log.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Role)

			// Call the event reactor
			obj.Lock()
			err = roleHandler.OnRoleDelete(obj)
			obj.Unlock()
			if err != nil {
				log.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				return err
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		log.Fatalf("API watcher Found object of invalid type: %v on Role watch channel", tp)
	}

	return nil
}

// diffRole does a diff of Role objects between local cache and API server
func (ct *ctrlerCtx) diffRole(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.AuthV1().Role().List(context.Background(), &opts)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	// build an object map
	objmap := make(map[string]*auth.Role)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range ct.Role().List() {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Role,
			}
			ct.handleRoleEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleRoleEvent(&evt)
	}
}

func (ct *ctrlerCtx) runRoleWatcher() {
	kind := "Role"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}

	// setup wait group
	ct.waitGrp.Add(1)
	defer ct.waitGrp.Done()

	// loop forever
	for {
		// create a grpc client
		apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, ct.logger, rpckit.WithBalancer(ct.balancer))
		if err != nil {
			log.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		} else {
			log.Infof("API client connected {%+v}", apicl)

			// Role object watcher
			wt, werr := apicl.AuthV1().Role().Watch(ctx, &opts)
			if werr != nil {
				log.Errorf("Failed to start %s watch (%s)\n", kind, werr)
				return
			}
			ct.Lock()
			ct.watchers[kind] = wt
			ct.Unlock()

			// perform a diff with API server and local cache
			time.Sleep(time.Millisecond * 100)
			ct.diffRole(apicl)

			// handle api server watch events
		innerLoop:
			for {
				// wait for events
				select {
				case evt, ok := <-wt.EventChan():
					if !ok {
						log.Error("Error receiving from apisrv watcher")
						break innerLoop
					}

					// handle event
					ct.handleRoleEvent(evt)
				}
			}
			apicl.Close()
		}

		// if stop flag is set, we are done
		if ct.stoped {
			log.Infof("Exiting API server watcher")
			return
		}

		// wait for a second and retry connecting to api server
		time.Sleep(time.Second)
	}
}

// WatchRole starts watch on Role object
func (ct *ctrlerCtx) WatchRole(handler RoleHandler) error {
	kind := "Role"

	ct.Lock()
	defer ct.Unlock()

	// see if we already have a watcher
	_, ok := ct.watchers[kind]
	if ok {
		return fmt.Errorf("Role watcher already exists")
	}

	// save handler
	ct.handlers[kind] = handler

	// run Role watcher in a go routine
	go ct.runRoleWatcher()

	return nil
}

// RoleAPI returns
type RoleAPI interface {
	Create(obj *auth.Role) error
	Update(obj *auth.Role) error
	Delete(obj *auth.Role) error
	List() []*Role
	Watch(handler RoleHandler) error
}

// dummy struct that implements RoleAPI
type roleAPI struct {
	ct *ctrlerCtx
}

// Create creates Role object
func (api *roleAPI) Create(obj *auth.Role) error {
	return api.ct.handleRoleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Role object
func (api *roleAPI) Update(obj *auth.Role) error {
	return api.ct.handleRoleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Role object
func (api *roleAPI) Delete(obj *auth.Role) error {
	return api.ct.handleRoleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// List returns a list of all Role objects
func (api *roleAPI) List() []*Role {
	var objlist []*Role

	objs := api.ct.ListObjects("Role")
	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Role:
			eobj := obj.(*Role)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Role", tp)
		}
	}

	return objlist
}

// Watch sets up a event handlers for Role object
func (api *roleAPI) Watch(handler RoleHandler) error {
	return api.ct.WatchRole(handler)
}

// Role returns RoleAPI
func (ct *ctrlerCtx) Role() RoleAPI {
	return &roleAPI{ct: ct}
}

// RoleBinding is a wrapper object that implements additional functionality
type RoleBinding struct {
	sync.Mutex
	auth.RoleBinding
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *RoleBinding) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		log.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		nobj := *obj
		// FIXME: clear the resource version till we figure out CAS semantics
		nobj.ObjectMeta.ResourceVersion = ""

		// update it
		_, err = apicl.AuthV1().RoleBinding().Update(context.Background(), &nobj.RoleBinding)
	} else {
		//  create
		_, err = apicl.AuthV1().RoleBinding().Create(context.Background(), &obj.RoleBinding)
	}

	return nil
}

// RoleBindingHandler is the event handler for RoleBinding object
type RoleBindingHandler interface {
	OnRoleBindingCreate(obj *RoleBinding) error
	OnRoleBindingUpdate(obj *RoleBinding) error
	OnRoleBindingDelete(obj *RoleBinding) error
}

// handleRoleBindingEvent handles RoleBinding events from watcher
func (ct *ctrlerCtx) handleRoleBindingEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *auth.RoleBinding:
		eobj := evt.Object.(*auth.RoleBinding)
		kind := "RoleBinding"

		log.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		handler, ok := ct.handlers[kind]
		if !ok {
			log.Fatalf("Cant find the handler for %s", kind)
		}
		rolebindingHandler := handler.(RoleBindingHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &RoleBinding{
					RoleBinding: *eobj,
					HandlerCtx:  nil,
					ctrler:      ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				// call the event handler
				obj.Lock()
				err = rolebindingHandler.OnRoleBindingCreate(obj)
				obj.Unlock()
				if err != nil {
					log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*RoleBinding)
				obj.ObjectMeta = eobj.ObjectMeta

				// see if it changed
				if _, ok := ref.ObjDiff(obj.Spec, eobj.Spec); ok {
					obj.Spec = eobj.Spec
					// call the event handler
					obj.Lock()
					err = rolebindingHandler.OnRoleBindingUpdate(obj)
					obj.Unlock()
					if err != nil {
						log.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
						return err
					}
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				log.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*RoleBinding)

			// Call the event reactor
			obj.Lock()
			err = rolebindingHandler.OnRoleBindingDelete(obj)
			obj.Unlock()
			if err != nil {
				log.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
				return err
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		log.Fatalf("API watcher Found object of invalid type: %v on RoleBinding watch channel", tp)
	}

	return nil
}

// diffRoleBinding does a diff of RoleBinding objects between local cache and API server
func (ct *ctrlerCtx) diffRoleBinding(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.AuthV1().RoleBinding().List(context.Background(), &opts)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	// build an object map
	objmap := make(map[string]*auth.RoleBinding)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range ct.RoleBinding().List() {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.RoleBinding,
			}
			ct.handleRoleBindingEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleRoleBindingEvent(&evt)
	}
}

func (ct *ctrlerCtx) runRoleBindingWatcher() {
	kind := "RoleBinding"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}

	// setup wait group
	ct.waitGrp.Add(1)
	defer ct.waitGrp.Done()

	// loop forever
	for {
		// create a grpc client
		apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, ct.logger, rpckit.WithBalancer(ct.balancer))
		if err != nil {
			log.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		} else {
			log.Infof("API client connected {%+v}", apicl)

			// RoleBinding object watcher
			wt, werr := apicl.AuthV1().RoleBinding().Watch(ctx, &opts)
			if werr != nil {
				log.Errorf("Failed to start %s watch (%s)\n", kind, werr)
				return
			}
			ct.Lock()
			ct.watchers[kind] = wt
			ct.Unlock()

			// perform a diff with API server and local cache
			time.Sleep(time.Millisecond * 100)
			ct.diffRoleBinding(apicl)

			// handle api server watch events
		innerLoop:
			for {
				// wait for events
				select {
				case evt, ok := <-wt.EventChan():
					if !ok {
						log.Error("Error receiving from apisrv watcher")
						break innerLoop
					}

					// handle event
					ct.handleRoleBindingEvent(evt)
				}
			}
			apicl.Close()
		}

		// if stop flag is set, we are done
		if ct.stoped {
			log.Infof("Exiting API server watcher")
			return
		}

		// wait for a second and retry connecting to api server
		time.Sleep(time.Second)
	}
}

// WatchRoleBinding starts watch on RoleBinding object
func (ct *ctrlerCtx) WatchRoleBinding(handler RoleBindingHandler) error {
	kind := "RoleBinding"

	ct.Lock()
	defer ct.Unlock()

	// see if we already have a watcher
	_, ok := ct.watchers[kind]
	if ok {
		return fmt.Errorf("RoleBinding watcher already exists")
	}

	// save handler
	ct.handlers[kind] = handler

	// run RoleBinding watcher in a go routine
	go ct.runRoleBindingWatcher()

	return nil
}

// RoleBindingAPI returns
type RoleBindingAPI interface {
	Create(obj *auth.RoleBinding) error
	Update(obj *auth.RoleBinding) error
	Delete(obj *auth.RoleBinding) error
	List() []*RoleBinding
	Watch(handler RoleBindingHandler) error
}

// dummy struct that implements RoleBindingAPI
type rolebindingAPI struct {
	ct *ctrlerCtx
}

// Create creates RoleBinding object
func (api *rolebindingAPI) Create(obj *auth.RoleBinding) error {
	return api.ct.handleRoleBindingEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on RoleBinding object
func (api *rolebindingAPI) Update(obj *auth.RoleBinding) error {
	return api.ct.handleRoleBindingEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes RoleBinding object
func (api *rolebindingAPI) Delete(obj *auth.RoleBinding) error {
	return api.ct.handleRoleBindingEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// List returns a list of all RoleBinding objects
func (api *rolebindingAPI) List() []*RoleBinding {
	var objlist []*RoleBinding

	objs := api.ct.ListObjects("RoleBinding")
	for _, obj := range objs {
		switch tp := obj.(type) {
		case *RoleBinding:
			eobj := obj.(*RoleBinding)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for RoleBinding", tp)
		}
	}

	return objlist
}

// Watch sets up a event handlers for RoleBinding object
func (api *rolebindingAPI) Watch(handler RoleBindingHandler) error {
	return api.ct.WatchRoleBinding(handler)
}

// RoleBinding returns RoleBindingAPI
func (ct *ctrlerCtx) RoleBinding() RoleBindingAPI {
	return &rolebindingAPI{ct: ct}
}
