// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package ctkit is a auto generated package.
Input file: svc_diagnostics.proto
*/
package ctkit

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/diagnostics"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Module is a wrapper object that implements additional functionality
type Module struct {
	sync.Mutex
	diagnostics.Module
	HandlerCtx interface{} // additional state handlers can store
	ctrler     *ctrlerCtx  // reference back to the controller instance
}

func (obj *Module) Write() error {
	// if there is no API server to connect to, we are done
	if (obj.ctrler == nil) || (obj.ctrler.resolver == nil) || obj.ctrler.apisrvURL == "" {
		return nil
	}

	apicl, err := obj.ctrler.apiClient()
	if err != nil {
		obj.ctrler.logger.Errorf("Error creating API server clent. Err: %v", err)
		return err
	}

	obj.ctrler.stats.Counter("Module_Writes").Inc()

	// write to api server
	if obj.ObjectMeta.ResourceVersion != "" {
		// update it
		for i := 0; i < maxApisrvWriteRetry; i++ {
			_, err = apicl.DiagnosticsV1().Module().UpdateStatus(context.Background(), &obj.Module)
			if err == nil {
				break
			}
			time.Sleep(time.Millisecond * 100)
		}
	} else {
		//  create
		_, err = apicl.DiagnosticsV1().Module().Create(context.Background(), &obj.Module)
	}

	return nil
}

// ModuleHandler is the event handler for Module object
type ModuleHandler interface {
	OnModuleCreate(obj *Module) error
	OnModuleUpdate(oldObj *Module, newObj *diagnostics.Module) error
	OnModuleDelete(obj *Module) error
}

// handleModuleEvent handles Module events from watcher
func (ct *ctrlerCtx) handleModuleEvent(evt *kvstore.WatchEvent) error {
	switch tp := evt.Object.(type) {
	case *diagnostics.Module:
		eobj := evt.Object.(*diagnostics.Module)
		kind := "Module"

		ct.logger.Infof("Watcher: Got %s watch event(%s): {%+v}", kind, evt.Type, eobj)

		handler, ok := ct.handlers[kind]
		if !ok {
			ct.logger.Fatalf("Cant find the handler for %s", kind)
		}
		moduleHandler := handler.(ModuleHandler)
		// handle based on event type
		switch evt.Type {
		case kvstore.Created:
			fallthrough
		case kvstore.Updated:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				obj := &Module{
					Module:     *eobj,
					HandlerCtx: nil,
					ctrler:     ct,
				}
				ct.addObject(kind, obj.GetKey(), obj)
				ct.stats.Counter("Module_Created_Events").Inc()

				// call the event handler
				obj.Lock()
				err = moduleHandler.OnModuleCreate(obj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					ct.delObject(kind, eobj.GetKey())
					return err
				}
			} else {
				obj := fobj.(*Module)

				ct.stats.Counter("Module_Updated_Events").Inc()

				// call the event handler
				obj.Lock()
				err = moduleHandler.OnModuleUpdate(obj, eobj)
				obj.Unlock()
				if err != nil {
					ct.logger.Errorf("Error creating %s %+v. Err: %v", kind, obj, err)
					return err
				}
			}
		case kvstore.Deleted:
			fobj, err := ct.findObject(kind, eobj.GetKey())
			if err != nil {
				ct.logger.Errorf("Object %s/%s not found durng delete. Err: %v", kind, eobj.GetKey(), err)
				return err
			}

			obj := fobj.(*Module)

			ct.stats.Counter("Module_Deleted_Events").Inc()

			// Call the event reactor
			obj.Lock()
			err = moduleHandler.OnModuleDelete(obj)
			obj.Unlock()
			if err != nil {
				ct.logger.Errorf("Error deleting %s: %+v. Err: %v", kind, obj, err)
			}

			ct.delObject(kind, eobj.GetKey())
		}
	default:
		ct.logger.Fatalf("API watcher Found object of invalid type: %v on Module watch channel", tp)
	}

	return nil
}

// diffModule does a diff of Module objects between local cache and API server
func (ct *ctrlerCtx) diffModule(apicl apiclient.Services) {
	opts := api.ListWatchOptions{}

	// get a list of all objects from API server
	objlist, err := apicl.DiagnosticsV1().Module().List(context.Background(), &opts)
	if err != nil {
		ct.logger.Errorf("Error getting a list of objects. Err: %v", err)
		return
	}

	ct.logger.Infof("diffModule(): ModuleList returned %d objects", len(objlist))

	// build an object map
	objmap := make(map[string]*diagnostics.Module)
	for _, obj := range objlist {
		objmap[obj.GetKey()] = obj
	}

	// if an object is in our local cache and not in API server, trigger delete for it
	for _, obj := range ct.Module().List() {
		_, ok := objmap[obj.GetKey()]
		if !ok {
			ct.logger.Infof("diffModule(): Deleting existing object %#v since its not in apiserver", obj.GetKey())
			evt := kvstore.WatchEvent{
				Type:   kvstore.Deleted,
				Key:    obj.GetKey(),
				Object: &obj.Module,
			}
			ct.handleModuleEvent(&evt)
		}
	}

	// trigger create event for all others
	for _, obj := range objlist {
		ct.logger.Infof("diffModule(): Adding object %#v", obj.GetKey())
		evt := kvstore.WatchEvent{
			Type:   kvstore.Created,
			Key:    obj.GetKey(),
			Object: obj,
		}
		ct.handleModuleEvent(&evt)
	}
}

func (ct *ctrlerCtx) runModuleWatcher() {
	kind := "Module"

	// if there is no API server to connect to, we are done
	if (ct.resolver == nil) || ct.apisrvURL == "" {
		return
	}

	// create context
	ctx, cancel := context.WithCancel(context.Background())
	ct.Lock()
	ct.watchCancel[kind] = cancel
	ct.Unlock()
	opts := api.ListWatchOptions{}
	logger := ct.logger.WithContext("submodule", "ModuleWatcher")

	// create a grpc client
	apiclt, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
	if err == nil {
		ct.diffModule(apiclt)
	}

	// setup wait group
	ct.waitGrp.Add(1)

	// start a goroutine
	go func() {
		defer ct.waitGrp.Done()
		ct.stats.Counter("Module_Watch").Inc()
		defer ct.stats.Counter("Module_Watch").Dec()

		// loop forever
		for {
			// create a grpc client
			apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, logger, rpckit.WithBalancer(balancer.New(ct.resolver)))
			if err != nil {
				logger.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
				ct.stats.Counter("Module_ApiClientErr").Inc()
			} else {
				logger.Infof("API client connected {%+v}", apicl)

				// Module object watcher
				wt, werr := apicl.DiagnosticsV1().Module().Watch(ctx, &opts)
				if werr != nil {
					logger.Errorf("Failed to start %s watch (%s)\n", kind, werr)
					// wait for a second and retry connecting to api server
					apicl.Close()
					time.Sleep(time.Second)
					continue
				}
				ct.Lock()
				ct.watchers[kind] = wt
				ct.Unlock()

				// perform a diff with API server and local cache
				time.Sleep(time.Millisecond * 100)
				ct.diffModule(apicl)

				// handle api server watch events
			innerLoop:
				for {
					// wait for events
					select {
					case evt, ok := <-wt.EventChan():
						if !ok {
							logger.Error("Error receiving from apisrv watcher")
							ct.stats.Counter("Module_WatchErrors").Inc()
							break innerLoop
						}

						// handle event
						go ct.handleModuleEvent(evt)
					}
				}
				apicl.Close()
			}

			// if stop flag is set, we are done
			if ct.stoped {
				logger.Infof("Exiting API server watcher")
				return
			}

			// wait for a second and retry connecting to api server
			time.Sleep(time.Second)
		}
	}()
}

// WatchModule starts watch on Module object
func (ct *ctrlerCtx) WatchModule(handler ModuleHandler) error {
	kind := "Module"

	// see if we already have a watcher
	ct.Lock()
	_, ok := ct.watchers[kind]
	ct.Unlock()
	if ok {
		return fmt.Errorf("Module watcher already exists")
	}

	// save handler
	ct.Lock()
	ct.handlers[kind] = handler
	ct.Unlock()

	// run Module watcher in a go routine
	ct.runModuleWatcher()

	return nil
}

// ModuleAPI returns
type ModuleAPI interface {
	Create(obj *diagnostics.Module) error
	Update(obj *diagnostics.Module) error
	Delete(obj *diagnostics.Module) error
	Find(meta *api.ObjectMeta) (*Module, error)
	List() []*Module
	Watch(handler ModuleHandler) error
}

// dummy struct that implements ModuleAPI
type moduleAPI struct {
	ct *ctrlerCtx
}

// Create creates Module object
func (api *moduleAPI) Create(obj *diagnostics.Module) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.DiagnosticsV1().Module().Create(context.Background(), obj)
		if err != nil && strings.Contains(err.Error(), "AlreadyExists") {
			_, err = apicl.DiagnosticsV1().Module().Update(context.Background(), obj)
		}
		if err != nil {
			return err
		}
	}

	return api.ct.handleModuleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Created})
}

// Update triggers update on Module object
func (api *moduleAPI) Update(obj *diagnostics.Module) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		_, err = apicl.DiagnosticsV1().Module().Update(context.Background(), obj)
		if err != nil {
			return err
		}
	}

	return api.ct.handleModuleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Updated})
}

// Delete deletes Module object
func (api *moduleAPI) Delete(obj *diagnostics.Module) error {
	if api.ct.resolver != nil {
		apicl, err := api.ct.apiClient()
		if err != nil {
			api.ct.logger.Errorf("Error creating API server clent. Err: %v", err)
			return err
		}

		apicl.DiagnosticsV1().Module().Delete(context.Background(), &obj.ObjectMeta)
	}

	return api.ct.handleModuleEvent(&kvstore.WatchEvent{Object: obj, Type: kvstore.Deleted})
}

// Find returns an object by meta
func (api *moduleAPI) Find(meta *api.ObjectMeta) (*Module, error) {
	// find the object
	obj, err := api.ct.FindObject("Module", meta)
	if err != nil {
		return nil, err
	}

	// asset type
	switch obj.(type) {
	case *Module:
		hobj := obj.(*Module)
		return hobj, nil
	default:
		return nil, errors.New("incorrect object type")
	}
}

// List returns a list of all Module objects
func (api *moduleAPI) List() []*Module {
	var objlist []*Module

	objs := api.ct.ListObjects("Module")
	for _, obj := range objs {
		switch tp := obj.(type) {
		case *Module:
			eobj := obj.(*Module)
			objlist = append(objlist, eobj)
		default:
			log.Fatalf("Got invalid object type %v while looking for Module", tp)
		}
	}

	return objlist
}

// Watch sets up a event handlers for Module object
func (api *moduleAPI) Watch(handler ModuleHandler) error {
	return api.ct.WatchModule(handler)
}

// Module returns ModuleAPI
func (ct *ctrlerCtx) Module() ModuleAPI {
	return &moduleAPI{ct: ct}
}
