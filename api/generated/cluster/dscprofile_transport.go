// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: dscprofile.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPDSCProfile(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCProfile(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCProfile
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCProfile encodes GRPC request
func EncodeGrpcReqDSCProfile(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfile)
	return req, nil
}

// DecodeGrpcReqDSCProfile decodes GRPC request
func DecodeGrpcReqDSCProfile(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfile)
	return req, nil
}

// EncodeGrpcRespDSCProfile encodes GRC response
func EncodeGrpcRespDSCProfile(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCProfile decodes GRPC response
func DecodeGrpcRespDSCProfile(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDSCProfileSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCProfileSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCProfileSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCProfileSpec encodes GRPC request
func EncodeGrpcReqDSCProfileSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfileSpec)
	return req, nil
}

// DecodeGrpcReqDSCProfileSpec decodes GRPC request
func DecodeGrpcReqDSCProfileSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfileSpec)
	return req, nil
}

// EncodeGrpcRespDSCProfileSpec encodes GRC response
func EncodeGrpcRespDSCProfileSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCProfileSpec decodes GRPC response
func DecodeGrpcRespDSCProfileSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDSCProfileStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCProfileStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCProfileStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCProfileStatus encodes GRPC request
func EncodeGrpcReqDSCProfileStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfileStatus)
	return req, nil
}

// DecodeGrpcReqDSCProfileStatus decodes GRPC request
func DecodeGrpcReqDSCProfileStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCProfileStatus)
	return req, nil
}

// EncodeGrpcRespDSCProfileStatus encodes GRC response
func EncodeGrpcRespDSCProfileStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCProfileStatus decodes GRPC response
func DecodeGrpcRespDSCProfileStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFeatureSet(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFeatureSet(_ context.Context, r *http.Request) (interface{}, error) {
	var req FeatureSet
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFeatureSet encodes GRPC request
func EncodeGrpcReqFeatureSet(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FeatureSet)
	return req, nil
}

// DecodeGrpcReqFeatureSet decodes GRPC request
func DecodeGrpcReqFeatureSet(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FeatureSet)
	return req, nil
}

// EncodeGrpcRespFeatureSet encodes GRC response
func EncodeGrpcRespFeatureSet(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFeatureSet decodes GRPC response
func DecodeGrpcRespFeatureSet(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPropagationStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPropagationStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PropagationStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPropagationStatus encodes GRPC request
func EncodeGrpcReqPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PropagationStatus)
	return req, nil
}

// DecodeGrpcReqPropagationStatus decodes GRPC request
func DecodeGrpcReqPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PropagationStatus)
	return req, nil
}

// EncodeGrpcRespPropagationStatus encodes GRC response
func EncodeGrpcRespPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPropagationStatus decodes GRPC response
func DecodeGrpcRespPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
