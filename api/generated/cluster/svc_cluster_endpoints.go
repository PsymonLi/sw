// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: svc_cluster.proto
*/
package cluster

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareClusterV1Client add middleware to the client
type MiddlewareClusterV1Client func(ServiceClusterV1Client) ServiceClusterV1Client

// EndpointsClusterV1Client is the endpoints for the client
type EndpointsClusterV1Client struct {
	Client                        ClusterV1Client
	AutoWatchSvcClusterV1Endpoint endpoint.Endpoint

	AuthBootstrapCompleteEndpoint endpoint.Endpoint
	AutoAddClusterEndpoint        endpoint.Endpoint
	AutoAddHostEndpoint           endpoint.Endpoint
	AutoAddNodeEndpoint           endpoint.Endpoint
	AutoAddSmartNICEndpoint       endpoint.Endpoint
	AutoAddTenantEndpoint         endpoint.Endpoint
	AutoDeleteClusterEndpoint     endpoint.Endpoint
	AutoDeleteHostEndpoint        endpoint.Endpoint
	AutoDeleteNodeEndpoint        endpoint.Endpoint
	AutoDeleteSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteTenantEndpoint      endpoint.Endpoint
	AutoGetClusterEndpoint        endpoint.Endpoint
	AutoGetHostEndpoint           endpoint.Endpoint
	AutoGetNodeEndpoint           endpoint.Endpoint
	AutoGetSmartNICEndpoint       endpoint.Endpoint
	AutoGetTenantEndpoint         endpoint.Endpoint
	AutoListClusterEndpoint       endpoint.Endpoint
	AutoListHostEndpoint          endpoint.Endpoint
	AutoListNodeEndpoint          endpoint.Endpoint
	AutoListSmartNICEndpoint      endpoint.Endpoint
	AutoListTenantEndpoint        endpoint.Endpoint
	AutoUpdateClusterEndpoint     endpoint.Endpoint
	AutoUpdateHostEndpoint        endpoint.Endpoint
	AutoUpdateNodeEndpoint        endpoint.Endpoint
	AutoUpdateSmartNICEndpoint    endpoint.Endpoint
	AutoUpdateTenantEndpoint      endpoint.Endpoint
	UpdateTLSConfigEndpoint       endpoint.Endpoint
}

// EndpointsClusterV1RestClient is the REST client
type EndpointsClusterV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AuthBootstrapCompleteEndpoint endpoint.Endpoint
	AutoAddClusterEndpoint        endpoint.Endpoint
	AutoAddHostEndpoint           endpoint.Endpoint
	AutoAddNodeEndpoint           endpoint.Endpoint
	AutoAddSmartNICEndpoint       endpoint.Endpoint
	AutoAddTenantEndpoint         endpoint.Endpoint
	AutoDeleteClusterEndpoint     endpoint.Endpoint
	AutoDeleteHostEndpoint        endpoint.Endpoint
	AutoDeleteNodeEndpoint        endpoint.Endpoint
	AutoDeleteSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteTenantEndpoint      endpoint.Endpoint
	AutoGetClusterEndpoint        endpoint.Endpoint
	AutoGetHostEndpoint           endpoint.Endpoint
	AutoGetNodeEndpoint           endpoint.Endpoint
	AutoGetSmartNICEndpoint       endpoint.Endpoint
	AutoGetTenantEndpoint         endpoint.Endpoint
	AutoListClusterEndpoint       endpoint.Endpoint
	AutoListHostEndpoint          endpoint.Endpoint
	AutoListNodeEndpoint          endpoint.Endpoint
	AutoListSmartNICEndpoint      endpoint.Endpoint
	AutoListTenantEndpoint        endpoint.Endpoint
	AutoUpdateClusterEndpoint     endpoint.Endpoint
	AutoUpdateHostEndpoint        endpoint.Endpoint
	AutoUpdateNodeEndpoint        endpoint.Endpoint
	AutoUpdateSmartNICEndpoint    endpoint.Endpoint
	AutoUpdateTenantEndpoint      endpoint.Endpoint
	AutoWatchClusterEndpoint      endpoint.Endpoint
	AutoWatchHostEndpoint         endpoint.Endpoint
	AutoWatchNodeEndpoint         endpoint.Endpoint
	AutoWatchSmartNICEndpoint     endpoint.Endpoint
	AutoWatchSvcClusterV1Endpoint endpoint.Endpoint
	AutoWatchTenantEndpoint       endpoint.Endpoint
	UpdateTLSConfigEndpoint       endpoint.Endpoint
}

// MiddlewareClusterV1Server adds middle ware to the server
type MiddlewareClusterV1Server func(ServiceClusterV1Server) ServiceClusterV1Server

// EndpointsClusterV1Server is the server endpoints
type EndpointsClusterV1Server struct {
	svcWatchHandlerClusterV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AuthBootstrapCompleteEndpoint endpoint.Endpoint
	AutoAddClusterEndpoint        endpoint.Endpoint
	AutoAddHostEndpoint           endpoint.Endpoint
	AutoAddNodeEndpoint           endpoint.Endpoint
	AutoAddSmartNICEndpoint       endpoint.Endpoint
	AutoAddTenantEndpoint         endpoint.Endpoint
	AutoDeleteClusterEndpoint     endpoint.Endpoint
	AutoDeleteHostEndpoint        endpoint.Endpoint
	AutoDeleteNodeEndpoint        endpoint.Endpoint
	AutoDeleteSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteTenantEndpoint      endpoint.Endpoint
	AutoGetClusterEndpoint        endpoint.Endpoint
	AutoGetHostEndpoint           endpoint.Endpoint
	AutoGetNodeEndpoint           endpoint.Endpoint
	AutoGetSmartNICEndpoint       endpoint.Endpoint
	AutoGetTenantEndpoint         endpoint.Endpoint
	AutoListClusterEndpoint       endpoint.Endpoint
	AutoListHostEndpoint          endpoint.Endpoint
	AutoListNodeEndpoint          endpoint.Endpoint
	AutoListSmartNICEndpoint      endpoint.Endpoint
	AutoListTenantEndpoint        endpoint.Endpoint
	AutoUpdateClusterEndpoint     endpoint.Endpoint
	AutoUpdateHostEndpoint        endpoint.Endpoint
	AutoUpdateNodeEndpoint        endpoint.Endpoint
	AutoUpdateSmartNICEndpoint    endpoint.Endpoint
	AutoUpdateTenantEndpoint      endpoint.Endpoint
	UpdateTLSConfigEndpoint       endpoint.Endpoint

	watchHandlerCluster  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerNode     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerHost     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerSmartNIC func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTenant   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AuthBootstrapComplete is endpoint for AuthBootstrapComplete
func (e EndpointsClusterV1Client) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest) (*Cluster, error) {
	resp, err := e.AuthBootstrapCompleteEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AuthBootstrapComplete struct {
	V   Cluster
	Err error
}

// AutoAddCluster is endpoint for AutoAddCluster
func (e EndpointsClusterV1Client) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoAddCluster struct {
	V   Cluster
	Err error
}

// AutoAddHost is endpoint for AutoAddHost
func (e EndpointsClusterV1Client) AutoAddHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoAddHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoAddHost struct {
	V   Host
	Err error
}

// AutoAddNode is endpoint for AutoAddNode
func (e EndpointsClusterV1Client) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoAddNode struct {
	V   Node
	Err error
}

// AutoAddSmartNIC is endpoint for AutoAddSmartNIC
func (e EndpointsClusterV1Client) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoAddSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respClusterV1AutoAddSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoAddTenant is endpoint for AutoAddTenant
func (e EndpointsClusterV1Client) AutoAddTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoAddTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoAddTenant struct {
	V   Tenant
	Err error
}

// AutoDeleteCluster is endpoint for AutoDeleteCluster
func (e EndpointsClusterV1Client) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoDeleteCluster struct {
	V   Cluster
	Err error
}

// AutoDeleteHost is endpoint for AutoDeleteHost
func (e EndpointsClusterV1Client) AutoDeleteHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoDeleteHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoDeleteHost struct {
	V   Host
	Err error
}

// AutoDeleteNode is endpoint for AutoDeleteNode
func (e EndpointsClusterV1Client) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoDeleteNode struct {
	V   Node
	Err error
}

// AutoDeleteSmartNIC is endpoint for AutoDeleteSmartNIC
func (e EndpointsClusterV1Client) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoDeleteSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respClusterV1AutoDeleteSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoDeleteTenant is endpoint for AutoDeleteTenant
func (e EndpointsClusterV1Client) AutoDeleteTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoDeleteTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoDeleteTenant struct {
	V   Tenant
	Err error
}

// AutoGetCluster is endpoint for AutoGetCluster
func (e EndpointsClusterV1Client) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoGetCluster struct {
	V   Cluster
	Err error
}

// AutoGetHost is endpoint for AutoGetHost
func (e EndpointsClusterV1Client) AutoGetHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoGetHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoGetHost struct {
	V   Host
	Err error
}

// AutoGetNode is endpoint for AutoGetNode
func (e EndpointsClusterV1Client) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoGetNode struct {
	V   Node
	Err error
}

// AutoGetSmartNIC is endpoint for AutoGetSmartNIC
func (e EndpointsClusterV1Client) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoGetSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respClusterV1AutoGetSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoGetTenant is endpoint for AutoGetTenant
func (e EndpointsClusterV1Client) AutoGetTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoGetTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoGetTenant struct {
	V   Tenant
	Err error
}

// AutoListCluster is endpoint for AutoListCluster
func (e EndpointsClusterV1Client) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (*ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return &ClusterList{}, err
	}
	return resp.(*ClusterList), nil
}

type respClusterV1AutoListCluster struct {
	V   ClusterList
	Err error
}

// AutoListHost is endpoint for AutoListHost
func (e EndpointsClusterV1Client) AutoListHost(ctx context.Context, in *api.ListWatchOptions) (*HostList, error) {
	resp, err := e.AutoListHostEndpoint(ctx, in)
	if err != nil {
		return &HostList{}, err
	}
	return resp.(*HostList), nil
}

type respClusterV1AutoListHost struct {
	V   HostList
	Err error
}

// AutoListNode is endpoint for AutoListNode
func (e EndpointsClusterV1Client) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (*NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return &NodeList{}, err
	}
	return resp.(*NodeList), nil
}

type respClusterV1AutoListNode struct {
	V   NodeList
	Err error
}

// AutoListSmartNIC is endpoint for AutoListSmartNIC
func (e EndpointsClusterV1Client) AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions) (*SmartNICList, error) {
	resp, err := e.AutoListSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNICList{}, err
	}
	return resp.(*SmartNICList), nil
}

type respClusterV1AutoListSmartNIC struct {
	V   SmartNICList
	Err error
}

// AutoListTenant is endpoint for AutoListTenant
func (e EndpointsClusterV1Client) AutoListTenant(ctx context.Context, in *api.ListWatchOptions) (*TenantList, error) {
	resp, err := e.AutoListTenantEndpoint(ctx, in)
	if err != nil {
		return &TenantList{}, err
	}
	return resp.(*TenantList), nil
}

type respClusterV1AutoListTenant struct {
	V   TenantList
	Err error
}

// AutoUpdateCluster is endpoint for AutoUpdateCluster
func (e EndpointsClusterV1Client) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoUpdateCluster struct {
	V   Cluster
	Err error
}

// AutoUpdateHost is endpoint for AutoUpdateHost
func (e EndpointsClusterV1Client) AutoUpdateHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoUpdateHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoUpdateHost struct {
	V   Host
	Err error
}

// AutoUpdateNode is endpoint for AutoUpdateNode
func (e EndpointsClusterV1Client) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoUpdateNode struct {
	V   Node
	Err error
}

// AutoUpdateSmartNIC is endpoint for AutoUpdateSmartNIC
func (e EndpointsClusterV1Client) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoUpdateSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respClusterV1AutoUpdateSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoUpdateTenant is endpoint for AutoUpdateTenant
func (e EndpointsClusterV1Client) AutoUpdateTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoUpdateTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoUpdateTenant struct {
	V   Tenant
	Err error
}

// UpdateTLSConfig is endpoint for UpdateTLSConfig
func (e EndpointsClusterV1Client) UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest) (*Cluster, error) {
	resp, err := e.UpdateTLSConfigEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1UpdateTLSConfig struct {
	V   Cluster
	Err error
}

func (e EndpointsClusterV1Client) AutoWatchSvcClusterV1(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchSvcClusterV1Client, error) {
	return e.Client.AutoWatchSvcClusterV1(ctx, in)
}

// AutoWatchCluster performs Watch for Cluster
func (e EndpointsClusterV1Client) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchClusterClient, error) {
	return e.Client.AutoWatchCluster(ctx, in)
}

// AutoWatchNode performs Watch for Node
func (e EndpointsClusterV1Client) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchNodeClient, error) {
	return e.Client.AutoWatchNode(ctx, in)
}

// AutoWatchHost performs Watch for Host
func (e EndpointsClusterV1Client) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchHostClient, error) {
	return e.Client.AutoWatchHost(ctx, in)
}

// AutoWatchSmartNIC performs Watch for SmartNIC
func (e EndpointsClusterV1Client) AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchSmartNICClient, error) {
	return e.Client.AutoWatchSmartNIC(ctx, in)
}

// AutoWatchTenant performs Watch for Tenant
func (e EndpointsClusterV1Client) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchTenantClient, error) {
	return e.Client.AutoWatchTenant(ctx, in)
}

// AuthBootstrapComplete implementation on server Endpoint
func (e EndpointsClusterV1Server) AuthBootstrapComplete(ctx context.Context, in ClusterAuthBootstrapRequest) (Cluster, error) {
	resp, err := e.AuthBootstrapCompleteEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AuthBootstrapCompleteEndpoint creates  AuthBootstrapComplete endpoints for the service
func MakeClusterV1AuthBootstrapCompleteEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ClusterAuthBootstrapRequest)
		v, err := s.AuthBootstrapComplete(ctx, *req)
		return respClusterV1AuthBootstrapComplete{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AuthBootstrapComplete")(f)
}

// AutoAddCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoAddClusterEndpoint creates  AutoAddCluster endpoints for the service
func MakeClusterV1AutoAddClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoAddCluster(ctx, *req)
		return respClusterV1AutoAddCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddCluster")(f)
}

// AutoAddHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoAddHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoAddHostEndpoint creates  AutoAddHost endpoints for the service
func MakeClusterV1AutoAddHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoAddHost(ctx, *req)
		return respClusterV1AutoAddHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddHost")(f)
}

// AutoAddNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoAddNodeEndpoint creates  AutoAddNode endpoints for the service
func MakeClusterV1AutoAddNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoAddNode(ctx, *req)
		return respClusterV1AutoAddNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddNode")(f)
}

// AutoAddSmartNIC implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoAddSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeClusterV1AutoAddSmartNICEndpoint creates  AutoAddSmartNIC endpoints for the service
func MakeClusterV1AutoAddSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoAddSmartNIC(ctx, *req)
		return respClusterV1AutoAddSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddSmartNIC")(f)
}

// AutoAddTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoAddTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoAddTenantEndpoint creates  AutoAddTenant endpoints for the service
func MakeClusterV1AutoAddTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoAddTenant(ctx, *req)
		return respClusterV1AutoAddTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddTenant")(f)
}

// AutoDeleteCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoDeleteClusterEndpoint creates  AutoDeleteCluster endpoints for the service
func MakeClusterV1AutoDeleteClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoDeleteCluster(ctx, *req)
		return respClusterV1AutoDeleteCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteCluster")(f)
}

// AutoDeleteHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoDeleteHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoDeleteHostEndpoint creates  AutoDeleteHost endpoints for the service
func MakeClusterV1AutoDeleteHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoDeleteHost(ctx, *req)
		return respClusterV1AutoDeleteHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteHost")(f)
}

// AutoDeleteNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoDeleteNodeEndpoint creates  AutoDeleteNode endpoints for the service
func MakeClusterV1AutoDeleteNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoDeleteNode(ctx, *req)
		return respClusterV1AutoDeleteNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteNode")(f)
}

// AutoDeleteSmartNIC implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoDeleteSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeClusterV1AutoDeleteSmartNICEndpoint creates  AutoDeleteSmartNIC endpoints for the service
func MakeClusterV1AutoDeleteSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoDeleteSmartNIC(ctx, *req)
		return respClusterV1AutoDeleteSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteSmartNIC")(f)
}

// AutoDeleteTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoDeleteTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoDeleteTenantEndpoint creates  AutoDeleteTenant endpoints for the service
func MakeClusterV1AutoDeleteTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoDeleteTenant(ctx, *req)
		return respClusterV1AutoDeleteTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteTenant")(f)
}

// AutoGetCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoGetClusterEndpoint creates  AutoGetCluster endpoints for the service
func MakeClusterV1AutoGetClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoGetCluster(ctx, *req)
		return respClusterV1AutoGetCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetCluster")(f)
}

// AutoGetHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoGetHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoGetHostEndpoint creates  AutoGetHost endpoints for the service
func MakeClusterV1AutoGetHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoGetHost(ctx, *req)
		return respClusterV1AutoGetHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetHost")(f)
}

// AutoGetNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoGetNodeEndpoint creates  AutoGetNode endpoints for the service
func MakeClusterV1AutoGetNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoGetNode(ctx, *req)
		return respClusterV1AutoGetNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetNode")(f)
}

// AutoGetSmartNIC implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoGetSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeClusterV1AutoGetSmartNICEndpoint creates  AutoGetSmartNIC endpoints for the service
func MakeClusterV1AutoGetSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoGetSmartNIC(ctx, *req)
		return respClusterV1AutoGetSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetSmartNIC")(f)
}

// AutoGetTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoGetTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoGetTenantEndpoint creates  AutoGetTenant endpoints for the service
func MakeClusterV1AutoGetTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoGetTenant(ctx, *req)
		return respClusterV1AutoGetTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetTenant")(f)
}

// AutoListCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return ClusterList{}, err
	}
	return *resp.(*ClusterList), nil
}

// MakeClusterV1AutoListClusterEndpoint creates  AutoListCluster endpoints for the service
func MakeClusterV1AutoListClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCluster(ctx, *req)
		return respClusterV1AutoListCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListCluster")(f)
}

// AutoListHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListHost(ctx context.Context, in api.ListWatchOptions) (HostList, error) {
	resp, err := e.AutoListHostEndpoint(ctx, in)
	if err != nil {
		return HostList{}, err
	}
	return *resp.(*HostList), nil
}

// MakeClusterV1AutoListHostEndpoint creates  AutoListHost endpoints for the service
func MakeClusterV1AutoListHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListHost(ctx, *req)
		return respClusterV1AutoListHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListHost")(f)
}

// AutoListNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListNode(ctx context.Context, in api.ListWatchOptions) (NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return NodeList{}, err
	}
	return *resp.(*NodeList), nil
}

// MakeClusterV1AutoListNodeEndpoint creates  AutoListNode endpoints for the service
func MakeClusterV1AutoListNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNode(ctx, *req)
		return respClusterV1AutoListNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListNode")(f)
}

// AutoListSmartNIC implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListSmartNIC(ctx context.Context, in api.ListWatchOptions) (SmartNICList, error) {
	resp, err := e.AutoListSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNICList{}, err
	}
	return *resp.(*SmartNICList), nil
}

// MakeClusterV1AutoListSmartNICEndpoint creates  AutoListSmartNIC endpoints for the service
func MakeClusterV1AutoListSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSmartNIC(ctx, *req)
		return respClusterV1AutoListSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListSmartNIC")(f)
}

// AutoListTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListTenant(ctx context.Context, in api.ListWatchOptions) (TenantList, error) {
	resp, err := e.AutoListTenantEndpoint(ctx, in)
	if err != nil {
		return TenantList{}, err
	}
	return *resp.(*TenantList), nil
}

// MakeClusterV1AutoListTenantEndpoint creates  AutoListTenant endpoints for the service
func MakeClusterV1AutoListTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTenant(ctx, *req)
		return respClusterV1AutoListTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListTenant")(f)
}

// AutoUpdateCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoUpdateClusterEndpoint creates  AutoUpdateCluster endpoints for the service
func MakeClusterV1AutoUpdateClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoUpdateCluster(ctx, *req)
		return respClusterV1AutoUpdateCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateCluster")(f)
}

// AutoUpdateHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoUpdateHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoUpdateHostEndpoint creates  AutoUpdateHost endpoints for the service
func MakeClusterV1AutoUpdateHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoUpdateHost(ctx, *req)
		return respClusterV1AutoUpdateHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateHost")(f)
}

// AutoUpdateNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoUpdateNodeEndpoint creates  AutoUpdateNode endpoints for the service
func MakeClusterV1AutoUpdateNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoUpdateNode(ctx, *req)
		return respClusterV1AutoUpdateNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateNode")(f)
}

// AutoUpdateSmartNIC implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoUpdateSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeClusterV1AutoUpdateSmartNICEndpoint creates  AutoUpdateSmartNIC endpoints for the service
func MakeClusterV1AutoUpdateSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoUpdateSmartNIC(ctx, *req)
		return respClusterV1AutoUpdateSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateSmartNIC")(f)
}

// AutoUpdateTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoUpdateTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoUpdateTenantEndpoint creates  AutoUpdateTenant endpoints for the service
func MakeClusterV1AutoUpdateTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoUpdateTenant(ctx, *req)
		return respClusterV1AutoUpdateTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateTenant")(f)
}

// UpdateTLSConfig implementation on server Endpoint
func (e EndpointsClusterV1Server) UpdateTLSConfig(ctx context.Context, in UpdateTLSConfigRequest) (Cluster, error) {
	resp, err := e.UpdateTLSConfigEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1UpdateTLSConfigEndpoint creates  UpdateTLSConfig endpoints for the service
func MakeClusterV1UpdateTLSConfigEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*UpdateTLSConfigRequest)
		v, err := s.UpdateTLSConfig(ctx, *req)
		return respClusterV1UpdateTLSConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:UpdateTLSConfig")(f)
}

func (e EndpointsClusterV1Server) AutoWatchSvcClusterV1(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSvcClusterV1Server) error {
	return e.svcWatchHandlerClusterV1(in, stream)
}

// MakeAutoWatchSvcClusterV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcClusterV1Endpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchSvcClusterV1Server)
		return s.AutoWatchSvcClusterV1(options, wstream)
	}
}

// AutoWatchCluster is the watch handler for Cluster on the server side.
func (e EndpointsClusterV1Server) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) error {
	return e.watchHandlerCluster(in, stream)
}

// MakeAutoWatchClusterEndpoint creates the Watch endpoint
func MakeAutoWatchClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchClusterServer)
		return s.AutoWatchCluster(options, wstream)
	}
}

// AutoWatchNode is the watch handler for Node on the server side.
func (e EndpointsClusterV1Server) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) error {
	return e.watchHandlerNode(in, stream)
}

// MakeAutoWatchNodeEndpoint creates the Watch endpoint
func MakeAutoWatchNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchNodeServer)
		return s.AutoWatchNode(options, wstream)
	}
}

// AutoWatchHost is the watch handler for Host on the server side.
func (e EndpointsClusterV1Server) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) error {
	return e.watchHandlerHost(in, stream)
}

// MakeAutoWatchHostEndpoint creates the Watch endpoint
func MakeAutoWatchHostEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchHostServer)
		return s.AutoWatchHost(options, wstream)
	}
}

// AutoWatchSmartNIC is the watch handler for SmartNIC on the server side.
func (e EndpointsClusterV1Server) AutoWatchSmartNIC(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSmartNICServer) error {
	return e.watchHandlerSmartNIC(in, stream)
}

// MakeAutoWatchSmartNICEndpoint creates the Watch endpoint
func MakeAutoWatchSmartNICEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchSmartNICServer)
		return s.AutoWatchSmartNIC(options, wstream)
	}
}

// AutoWatchTenant is the watch handler for Tenant on the server side.
func (e EndpointsClusterV1Server) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) error {
	return e.watchHandlerTenant(in, stream)
}

// MakeAutoWatchTenantEndpoint creates the Watch endpoint
func MakeAutoWatchTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchTenantServer)
		return s.AutoWatchTenant(options, wstream)
	}
}

// MakeClusterV1ServerEndpoints creates server endpoints
func MakeClusterV1ServerEndpoints(s ServiceClusterV1Server, logger log.Logger) EndpointsClusterV1Server {
	return EndpointsClusterV1Server{
		svcWatchHandlerClusterV1: MakeAutoWatchSvcClusterV1Endpoint(s, logger),

		AuthBootstrapCompleteEndpoint: MakeClusterV1AuthBootstrapCompleteEndpoint(s, logger),
		AutoAddClusterEndpoint:        MakeClusterV1AutoAddClusterEndpoint(s, logger),
		AutoAddHostEndpoint:           MakeClusterV1AutoAddHostEndpoint(s, logger),
		AutoAddNodeEndpoint:           MakeClusterV1AutoAddNodeEndpoint(s, logger),
		AutoAddSmartNICEndpoint:       MakeClusterV1AutoAddSmartNICEndpoint(s, logger),
		AutoAddTenantEndpoint:         MakeClusterV1AutoAddTenantEndpoint(s, logger),
		AutoDeleteClusterEndpoint:     MakeClusterV1AutoDeleteClusterEndpoint(s, logger),
		AutoDeleteHostEndpoint:        MakeClusterV1AutoDeleteHostEndpoint(s, logger),
		AutoDeleteNodeEndpoint:        MakeClusterV1AutoDeleteNodeEndpoint(s, logger),
		AutoDeleteSmartNICEndpoint:    MakeClusterV1AutoDeleteSmartNICEndpoint(s, logger),
		AutoDeleteTenantEndpoint:      MakeClusterV1AutoDeleteTenantEndpoint(s, logger),
		AutoGetClusterEndpoint:        MakeClusterV1AutoGetClusterEndpoint(s, logger),
		AutoGetHostEndpoint:           MakeClusterV1AutoGetHostEndpoint(s, logger),
		AutoGetNodeEndpoint:           MakeClusterV1AutoGetNodeEndpoint(s, logger),
		AutoGetSmartNICEndpoint:       MakeClusterV1AutoGetSmartNICEndpoint(s, logger),
		AutoGetTenantEndpoint:         MakeClusterV1AutoGetTenantEndpoint(s, logger),
		AutoListClusterEndpoint:       MakeClusterV1AutoListClusterEndpoint(s, logger),
		AutoListHostEndpoint:          MakeClusterV1AutoListHostEndpoint(s, logger),
		AutoListNodeEndpoint:          MakeClusterV1AutoListNodeEndpoint(s, logger),
		AutoListSmartNICEndpoint:      MakeClusterV1AutoListSmartNICEndpoint(s, logger),
		AutoListTenantEndpoint:        MakeClusterV1AutoListTenantEndpoint(s, logger),
		AutoUpdateClusterEndpoint:     MakeClusterV1AutoUpdateClusterEndpoint(s, logger),
		AutoUpdateHostEndpoint:        MakeClusterV1AutoUpdateHostEndpoint(s, logger),
		AutoUpdateNodeEndpoint:        MakeClusterV1AutoUpdateNodeEndpoint(s, logger),
		AutoUpdateSmartNICEndpoint:    MakeClusterV1AutoUpdateSmartNICEndpoint(s, logger),
		AutoUpdateTenantEndpoint:      MakeClusterV1AutoUpdateTenantEndpoint(s, logger),
		UpdateTLSConfigEndpoint:       MakeClusterV1UpdateTLSConfigEndpoint(s, logger),

		watchHandlerCluster:  MakeAutoWatchClusterEndpoint(s, logger),
		watchHandlerNode:     MakeAutoWatchNodeEndpoint(s, logger),
		watchHandlerHost:     MakeAutoWatchHostEndpoint(s, logger),
		watchHandlerSmartNIC: MakeAutoWatchSmartNICEndpoint(s, logger),
		watchHandlerTenant:   MakeAutoWatchTenantEndpoint(s, logger),
	}
}

// LoggingClusterV1MiddlewareClient adds middleware for the client
func LoggingClusterV1MiddlewareClient(logger log.Logger) MiddlewareClusterV1Client {
	return func(next ServiceClusterV1Client) ServiceClusterV1Client {
		return loggingClusterV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingClusterV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceClusterV1Client
}

// LoggingClusterV1MiddlewareServer adds middleware for the client
func LoggingClusterV1MiddlewareServer(logger log.Logger) MiddlewareClusterV1Server {
	return func(next ServiceClusterV1Server) ServiceClusterV1Server {
		return loggingClusterV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingClusterV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceClusterV1Server
}

func (m loggingClusterV1MiddlewareClient) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AuthBootstrapComplete", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AuthBootstrapComplete(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (resp *ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListHost(ctx context.Context, in *api.ListWatchOptions) (resp *HostList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (resp *NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions) (resp *SmartNICList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListTenant(ctx context.Context, in *api.ListWatchOptions) (resp *TenantList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "UpdateTLSConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.UpdateTLSConfig(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareClient) AutoWatchSvcClusterV1(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchSvcClusterV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchSvcClusterV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcClusterV1(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareClient) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchClusterClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchNodeClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchHostClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchSmartNICClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchSmartNIC", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchTenantClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchTenant(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareServer) AuthBootstrapComplete(ctx context.Context, in ClusterAuthBootstrapRequest) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AuthBootstrapComplete", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AuthBootstrapComplete(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (resp ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListHost(ctx context.Context, in api.ListWatchOptions) (resp HostList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListNode(ctx context.Context, in api.ListWatchOptions) (resp NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListSmartNIC(ctx context.Context, in api.ListWatchOptions) (resp SmartNICList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListTenant(ctx context.Context, in api.ListWatchOptions) (resp TenantList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSmartNIC(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) UpdateTLSConfig(ctx context.Context, in UpdateTLSConfigRequest) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "UpdateTLSConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.UpdateTLSConfig(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareServer) AutoWatchSvcClusterV1(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSvcClusterV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchSvcClusterV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcClusterV1(in, stream)
	return
}

func (m loggingClusterV1MiddlewareServer) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCluster(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNode(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchHost(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchSmartNIC(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSmartNICServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSmartNIC(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTenant(in, stream)
	return
}

func (r *EndpointsClusterV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsClusterV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIClusterV1AuthBootstrapCompleteCreateOper(in *ClusterAuthBootstrapRequest) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster/AuthBootstrapComplete")
}

//
func makeURIClusterV1AutoAddClusterCreateOper(in *Cluster) string {
	return ""

}

//
func makeURIClusterV1AutoAddHostCreateOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts")
}

//
func makeURIClusterV1AutoAddNodeCreateOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes")
}

//
func makeURIClusterV1AutoAddSmartNICCreateOper(in *SmartNIC) string {
	return ""

}

//
func makeURIClusterV1AutoAddTenantCreateOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants")
}

//
func makeURIClusterV1AutoDeleteClusterDeleteOper(in *Cluster) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster")
}

//
func makeURIClusterV1AutoDeleteHostDeleteOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoDeleteNodeDeleteOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoDeleteSmartNICDeleteOper(in *SmartNIC) string {
	return fmt.Sprint("/configs/cluster/v1", "/smartnics/", in.Name)
}

//
func makeURIClusterV1AutoDeleteTenantDeleteOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoGetClusterGetOper(in *Cluster) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster")
}

//
func makeURIClusterV1AutoGetHostGetOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoGetNodeGetOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoGetSmartNICGetOper(in *SmartNIC) string {
	return fmt.Sprint("/configs/cluster/v1", "/smartnics/", in.Name)
}

//
func makeURIClusterV1AutoGetTenantGetOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoListClusterListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListHostListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts")
}

//
func makeURIClusterV1AutoListNodeListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes")
}

//
func makeURIClusterV1AutoListSmartNICListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/smartnics")
}

//
func makeURIClusterV1AutoListTenantListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants")
}

//
func makeURIClusterV1AutoUpdateClusterUpdateOper(in *Cluster) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster")
}

//
func makeURIClusterV1AutoUpdateHostUpdateOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoUpdateNodeUpdateOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoUpdateSmartNICUpdateOper(in *SmartNIC) string {
	return fmt.Sprint("/configs/cluster/v1", "/smartnics/", in.Name)
}

//
func makeURIClusterV1AutoUpdateTenantUpdateOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoWatchClusterWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/cluster")
}

//
func makeURIClusterV1AutoWatchHostWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/hosts")
}

//
func makeURIClusterV1AutoWatchNodeWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/nodes")
}

//
func makeURIClusterV1AutoWatchSmartNICWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/smartnics")
}

//
func makeURIClusterV1AutoWatchSvcClusterV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoWatchTenantWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/tenants")
}

//
func makeURIClusterV1UpdateTLSConfigCreateOper(in *UpdateTLSConfigRequest) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster/UpdateTLSConfig")
}

// AutoAddCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURIClusterV1AutoUpdateClusterUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoGetCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURIClusterV1AutoGetClusterGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoDeleteCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURIClusterV1AutoDeleteClusterDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoListCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoListCluster(ctx context.Context, options *api.ListWatchOptions) (*ClusterList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoWatchCluster(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchClusterWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgClusterWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsClusterV1RestClient) AuthBootstrapCompleteCluster(ctx context.Context, in *ClusterAuthBootstrapRequest) (*Cluster, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1AuthBootstrapCompleteCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AuthBootstrapComplete(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

func (r *EndpointsClusterV1RestClient) UpdateTLSConfigCluster(ctx context.Context, in *UpdateTLSConfigRequest) (*Cluster, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1UpdateTLSConfigCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1UpdateTLSConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoAddNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoAddNodeCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddNode(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), nil
}

// AutoUpdateNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoUpdateNodeUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoGetNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoGetNodeGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoDeleteNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoDeleteNodeDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoListNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoListNode(ctx context.Context, options *api.ListWatchOptions) (*NodeList, error) {
	path := makeURIClusterV1AutoListNodeListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NodeList), err
}

// AutoWatchNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoWatchNode(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchNodeWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNodeWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoAddHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoAddHostCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddHost(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), nil
}

// AutoUpdateHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoUpdateHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoUpdateHostUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoGetHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoGetHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoGetHostGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoDeleteHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoDeleteHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoDeleteHostDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoListHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoListHost(ctx context.Context, options *api.ListWatchOptions) (*HostList, error) {
	path := makeURIClusterV1AutoListHostListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*HostList), err
}

// AutoWatchHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoWatchHost(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchHostWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgHostWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURIClusterV1AutoUpdateSmartNICUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoGetSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURIClusterV1AutoGetSmartNICGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoDeleteSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURIClusterV1AutoDeleteSmartNICDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoListSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoListSmartNIC(ctx context.Context, options *api.ListWatchOptions) (*SmartNICList, error) {
	path := makeURIClusterV1AutoListSmartNICListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNICList), err
}

// AutoWatchSmartNIC CRUD method for SmartNIC
func (r *EndpointsClusterV1RestClient) AutoWatchSmartNIC(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchSmartNICWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgSmartNICWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoAddTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoAddTenantCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddTenant(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), nil
}

// AutoUpdateTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoUpdateTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoUpdateTenantUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoGetTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoGetTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoGetTenantGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoDeleteTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoDeleteTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoDeleteTenantDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoListTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoListTenant(ctx context.Context, options *api.ListWatchOptions) (*TenantList, error) {
	path := makeURIClusterV1AutoListTenantListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TenantList), err
}

// AutoWatchTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoWatchTenant(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchTenantWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgTenantWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeClusterV1RestClientEndpoints make REST client endpoints
func MakeClusterV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsClusterV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsClusterV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeClusterV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeClusterV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsClusterV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsClusterV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
