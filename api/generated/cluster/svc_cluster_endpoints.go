// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: svc_cluster.proto
*/
package cluster

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareClusterV1Client add middleware to the client
type MiddlewareClusterV1Client func(ServiceClusterV1Client) ServiceClusterV1Client

// EndpointsClusterV1Client is the endpoints for the client
type EndpointsClusterV1Client struct {
	Client                        ClusterV1Client
	AutoWatchSvcClusterV1Endpoint endpoint.Endpoint

	AuthBootstrapCompleteEndpoint            endpoint.Endpoint
	AutoAddClusterEndpoint                   endpoint.Endpoint
	AutoAddConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoAddCredentialsEndpoint               endpoint.Endpoint
	AutoAddDSCProfileEndpoint                endpoint.Endpoint
	AutoAddDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoAddHostEndpoint                      endpoint.Endpoint
	AutoAddLicenseEndpoint                   endpoint.Endpoint
	AutoAddNodeEndpoint                      endpoint.Endpoint
	AutoAddSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoAddTenantEndpoint                    endpoint.Endpoint
	AutoAddVersionEndpoint                   endpoint.Endpoint
	AutoDeleteClusterEndpoint                endpoint.Endpoint
	AutoDeleteConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoDeleteCredentialsEndpoint            endpoint.Endpoint
	AutoDeleteDSCProfileEndpoint             endpoint.Endpoint
	AutoDeleteDistributedServiceCardEndpoint endpoint.Endpoint
	AutoDeleteHostEndpoint                   endpoint.Endpoint
	AutoDeleteLicenseEndpoint                endpoint.Endpoint
	AutoDeleteNodeEndpoint                   endpoint.Endpoint
	AutoDeleteSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoDeleteTenantEndpoint                 endpoint.Endpoint
	AutoDeleteVersionEndpoint                endpoint.Endpoint
	AutoGetClusterEndpoint                   endpoint.Endpoint
	AutoGetConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoGetCredentialsEndpoint               endpoint.Endpoint
	AutoGetDSCProfileEndpoint                endpoint.Endpoint
	AutoGetDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoGetHostEndpoint                      endpoint.Endpoint
	AutoGetLicenseEndpoint                   endpoint.Endpoint
	AutoGetNodeEndpoint                      endpoint.Endpoint
	AutoGetSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoGetTenantEndpoint                    endpoint.Endpoint
	AutoGetVersionEndpoint                   endpoint.Endpoint
	AutoLabelClusterEndpoint                 endpoint.Endpoint
	AutoLabelConfigurationSnapshotEndpoint   endpoint.Endpoint
	AutoLabelCredentialsEndpoint             endpoint.Endpoint
	AutoLabelDSCProfileEndpoint              endpoint.Endpoint
	AutoLabelDistributedServiceCardEndpoint  endpoint.Endpoint
	AutoLabelHostEndpoint                    endpoint.Endpoint
	AutoLabelLicenseEndpoint                 endpoint.Endpoint
	AutoLabelNodeEndpoint                    endpoint.Endpoint
	AutoLabelSnapshotRestoreEndpoint         endpoint.Endpoint
	AutoLabelTenantEndpoint                  endpoint.Endpoint
	AutoLabelVersionEndpoint                 endpoint.Endpoint
	AutoListClusterEndpoint                  endpoint.Endpoint
	AutoListConfigurationSnapshotEndpoint    endpoint.Endpoint
	AutoListCredentialsEndpoint              endpoint.Endpoint
	AutoListDSCProfileEndpoint               endpoint.Endpoint
	AutoListDistributedServiceCardEndpoint   endpoint.Endpoint
	AutoListHostEndpoint                     endpoint.Endpoint
	AutoListLicenseEndpoint                  endpoint.Endpoint
	AutoListNodeEndpoint                     endpoint.Endpoint
	AutoListSnapshotRestoreEndpoint          endpoint.Endpoint
	AutoListTenantEndpoint                   endpoint.Endpoint
	AutoListVersionEndpoint                  endpoint.Endpoint
	AutoUpdateClusterEndpoint                endpoint.Endpoint
	AutoUpdateConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoUpdateCredentialsEndpoint            endpoint.Endpoint
	AutoUpdateDSCProfileEndpoint             endpoint.Endpoint
	AutoUpdateDistributedServiceCardEndpoint endpoint.Endpoint
	AutoUpdateHostEndpoint                   endpoint.Endpoint
	AutoUpdateLicenseEndpoint                endpoint.Endpoint
	AutoUpdateNodeEndpoint                   endpoint.Endpoint
	AutoUpdateSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoUpdateTenantEndpoint                 endpoint.Endpoint
	AutoUpdateVersionEndpoint                endpoint.Endpoint
	RestoreEndpoint                          endpoint.Endpoint
	SaveEndpoint                             endpoint.Endpoint
	UpdateTLSConfigEndpoint                  endpoint.Endpoint
}

// EndpointsClusterV1RestClient is the REST client
type EndpointsClusterV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AuthBootstrapCompleteEndpoint            endpoint.Endpoint
	AutoAddClusterEndpoint                   endpoint.Endpoint
	AutoAddConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoAddCredentialsEndpoint               endpoint.Endpoint
	AutoAddDSCProfileEndpoint                endpoint.Endpoint
	AutoAddDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoAddHostEndpoint                      endpoint.Endpoint
	AutoAddLicenseEndpoint                   endpoint.Endpoint
	AutoAddNodeEndpoint                      endpoint.Endpoint
	AutoAddSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoAddTenantEndpoint                    endpoint.Endpoint
	AutoAddVersionEndpoint                   endpoint.Endpoint
	AutoDeleteClusterEndpoint                endpoint.Endpoint
	AutoDeleteConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoDeleteCredentialsEndpoint            endpoint.Endpoint
	AutoDeleteDSCProfileEndpoint             endpoint.Endpoint
	AutoDeleteDistributedServiceCardEndpoint endpoint.Endpoint
	AutoDeleteHostEndpoint                   endpoint.Endpoint
	AutoDeleteLicenseEndpoint                endpoint.Endpoint
	AutoDeleteNodeEndpoint                   endpoint.Endpoint
	AutoDeleteSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoDeleteTenantEndpoint                 endpoint.Endpoint
	AutoDeleteVersionEndpoint                endpoint.Endpoint
	AutoGetClusterEndpoint                   endpoint.Endpoint
	AutoGetConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoGetCredentialsEndpoint               endpoint.Endpoint
	AutoGetDSCProfileEndpoint                endpoint.Endpoint
	AutoGetDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoGetHostEndpoint                      endpoint.Endpoint
	AutoGetLicenseEndpoint                   endpoint.Endpoint
	AutoGetNodeEndpoint                      endpoint.Endpoint
	AutoGetSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoGetTenantEndpoint                    endpoint.Endpoint
	AutoGetVersionEndpoint                   endpoint.Endpoint
	AutoLabelClusterEndpoint                 endpoint.Endpoint
	AutoLabelConfigurationSnapshotEndpoint   endpoint.Endpoint
	AutoLabelCredentialsEndpoint             endpoint.Endpoint
	AutoLabelDSCProfileEndpoint              endpoint.Endpoint
	AutoLabelDistributedServiceCardEndpoint  endpoint.Endpoint
	AutoLabelHostEndpoint                    endpoint.Endpoint
	AutoLabelLicenseEndpoint                 endpoint.Endpoint
	AutoLabelNodeEndpoint                    endpoint.Endpoint
	AutoLabelSnapshotRestoreEndpoint         endpoint.Endpoint
	AutoLabelTenantEndpoint                  endpoint.Endpoint
	AutoLabelVersionEndpoint                 endpoint.Endpoint
	AutoListClusterEndpoint                  endpoint.Endpoint
	AutoListConfigurationSnapshotEndpoint    endpoint.Endpoint
	AutoListCredentialsEndpoint              endpoint.Endpoint
	AutoListDSCProfileEndpoint               endpoint.Endpoint
	AutoListDistributedServiceCardEndpoint   endpoint.Endpoint
	AutoListHostEndpoint                     endpoint.Endpoint
	AutoListLicenseEndpoint                  endpoint.Endpoint
	AutoListNodeEndpoint                     endpoint.Endpoint
	AutoListSnapshotRestoreEndpoint          endpoint.Endpoint
	AutoListTenantEndpoint                   endpoint.Endpoint
	AutoListVersionEndpoint                  endpoint.Endpoint
	AutoUpdateClusterEndpoint                endpoint.Endpoint
	AutoUpdateConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoUpdateCredentialsEndpoint            endpoint.Endpoint
	AutoUpdateDSCProfileEndpoint             endpoint.Endpoint
	AutoUpdateDistributedServiceCardEndpoint endpoint.Endpoint
	AutoUpdateHostEndpoint                   endpoint.Endpoint
	AutoUpdateLicenseEndpoint                endpoint.Endpoint
	AutoUpdateNodeEndpoint                   endpoint.Endpoint
	AutoUpdateSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoUpdateTenantEndpoint                 endpoint.Endpoint
	AutoUpdateVersionEndpoint                endpoint.Endpoint
	AutoWatchClusterEndpoint                 endpoint.Endpoint
	AutoWatchConfigurationSnapshotEndpoint   endpoint.Endpoint
	AutoWatchCredentialsEndpoint             endpoint.Endpoint
	AutoWatchDSCProfileEndpoint              endpoint.Endpoint
	AutoWatchDistributedServiceCardEndpoint  endpoint.Endpoint
	AutoWatchHostEndpoint                    endpoint.Endpoint
	AutoWatchLicenseEndpoint                 endpoint.Endpoint
	AutoWatchNodeEndpoint                    endpoint.Endpoint
	AutoWatchSnapshotRestoreEndpoint         endpoint.Endpoint
	AutoWatchSvcClusterV1Endpoint            endpoint.Endpoint
	AutoWatchTenantEndpoint                  endpoint.Endpoint
	AutoWatchVersionEndpoint                 endpoint.Endpoint
	RestoreEndpoint                          endpoint.Endpoint
	SaveEndpoint                             endpoint.Endpoint
	UpdateTLSConfigEndpoint                  endpoint.Endpoint
}

// MiddlewareClusterV1Server adds middle ware to the server
type MiddlewareClusterV1Server func(ServiceClusterV1Server) ServiceClusterV1Server

// EndpointsClusterV1Server is the server endpoints
type EndpointsClusterV1Server struct {
	svcWatchHandlerClusterV1 func(options *api.AggWatchOptions, stream grpc.ServerStream) error

	AuthBootstrapCompleteEndpoint            endpoint.Endpoint
	AutoAddClusterEndpoint                   endpoint.Endpoint
	AutoAddConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoAddCredentialsEndpoint               endpoint.Endpoint
	AutoAddDSCProfileEndpoint                endpoint.Endpoint
	AutoAddDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoAddHostEndpoint                      endpoint.Endpoint
	AutoAddLicenseEndpoint                   endpoint.Endpoint
	AutoAddNodeEndpoint                      endpoint.Endpoint
	AutoAddSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoAddTenantEndpoint                    endpoint.Endpoint
	AutoAddVersionEndpoint                   endpoint.Endpoint
	AutoDeleteClusterEndpoint                endpoint.Endpoint
	AutoDeleteConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoDeleteCredentialsEndpoint            endpoint.Endpoint
	AutoDeleteDSCProfileEndpoint             endpoint.Endpoint
	AutoDeleteDistributedServiceCardEndpoint endpoint.Endpoint
	AutoDeleteHostEndpoint                   endpoint.Endpoint
	AutoDeleteLicenseEndpoint                endpoint.Endpoint
	AutoDeleteNodeEndpoint                   endpoint.Endpoint
	AutoDeleteSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoDeleteTenantEndpoint                 endpoint.Endpoint
	AutoDeleteVersionEndpoint                endpoint.Endpoint
	AutoGetClusterEndpoint                   endpoint.Endpoint
	AutoGetConfigurationSnapshotEndpoint     endpoint.Endpoint
	AutoGetCredentialsEndpoint               endpoint.Endpoint
	AutoGetDSCProfileEndpoint                endpoint.Endpoint
	AutoGetDistributedServiceCardEndpoint    endpoint.Endpoint
	AutoGetHostEndpoint                      endpoint.Endpoint
	AutoGetLicenseEndpoint                   endpoint.Endpoint
	AutoGetNodeEndpoint                      endpoint.Endpoint
	AutoGetSnapshotRestoreEndpoint           endpoint.Endpoint
	AutoGetTenantEndpoint                    endpoint.Endpoint
	AutoGetVersionEndpoint                   endpoint.Endpoint
	AutoLabelClusterEndpoint                 endpoint.Endpoint
	AutoLabelConfigurationSnapshotEndpoint   endpoint.Endpoint
	AutoLabelCredentialsEndpoint             endpoint.Endpoint
	AutoLabelDSCProfileEndpoint              endpoint.Endpoint
	AutoLabelDistributedServiceCardEndpoint  endpoint.Endpoint
	AutoLabelHostEndpoint                    endpoint.Endpoint
	AutoLabelLicenseEndpoint                 endpoint.Endpoint
	AutoLabelNodeEndpoint                    endpoint.Endpoint
	AutoLabelSnapshotRestoreEndpoint         endpoint.Endpoint
	AutoLabelTenantEndpoint                  endpoint.Endpoint
	AutoLabelVersionEndpoint                 endpoint.Endpoint
	AutoListClusterEndpoint                  endpoint.Endpoint
	AutoListConfigurationSnapshotEndpoint    endpoint.Endpoint
	AutoListCredentialsEndpoint              endpoint.Endpoint
	AutoListDSCProfileEndpoint               endpoint.Endpoint
	AutoListDistributedServiceCardEndpoint   endpoint.Endpoint
	AutoListHostEndpoint                     endpoint.Endpoint
	AutoListLicenseEndpoint                  endpoint.Endpoint
	AutoListNodeEndpoint                     endpoint.Endpoint
	AutoListSnapshotRestoreEndpoint          endpoint.Endpoint
	AutoListTenantEndpoint                   endpoint.Endpoint
	AutoListVersionEndpoint                  endpoint.Endpoint
	AutoUpdateClusterEndpoint                endpoint.Endpoint
	AutoUpdateConfigurationSnapshotEndpoint  endpoint.Endpoint
	AutoUpdateCredentialsEndpoint            endpoint.Endpoint
	AutoUpdateDSCProfileEndpoint             endpoint.Endpoint
	AutoUpdateDistributedServiceCardEndpoint endpoint.Endpoint
	AutoUpdateHostEndpoint                   endpoint.Endpoint
	AutoUpdateLicenseEndpoint                endpoint.Endpoint
	AutoUpdateNodeEndpoint                   endpoint.Endpoint
	AutoUpdateSnapshotRestoreEndpoint        endpoint.Endpoint
	AutoUpdateTenantEndpoint                 endpoint.Endpoint
	AutoUpdateVersionEndpoint                endpoint.Endpoint
	RestoreEndpoint                          endpoint.Endpoint
	SaveEndpoint                             endpoint.Endpoint
	UpdateTLSConfigEndpoint                  endpoint.Endpoint

	watchHandlerCluster                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerNode                   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerHost                   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerDistributedServiceCard func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTenant                 func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerVersion                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerConfigurationSnapshot  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerSnapshotRestore        func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerLicense                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerDSCProfile             func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerCredentials            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AuthBootstrapComplete is endpoint for AuthBootstrapComplete
func (e EndpointsClusterV1Client) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest) (*Cluster, error) {
	resp, err := e.AuthBootstrapCompleteEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AuthBootstrapComplete struct {
	V   Cluster
	Err error
}

// AutoAddCluster is endpoint for AutoAddCluster
func (e EndpointsClusterV1Client) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoAddCluster struct {
	V   Cluster
	Err error
}

// AutoAddConfigurationSnapshot is endpoint for AutoAddConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoAddConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	resp, err := e.AutoAddConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1AutoAddConfigurationSnapshot struct {
	V   ConfigurationSnapshot
	Err error
}

// AutoAddCredentials is endpoint for AutoAddCredentials
func (e EndpointsClusterV1Client) AutoAddCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	resp, err := e.AutoAddCredentialsEndpoint(ctx, in)
	if err != nil {
		return &Credentials{}, err
	}
	return resp.(*Credentials), nil
}

type respClusterV1AutoAddCredentials struct {
	V   Credentials
	Err error
}

// AutoAddDSCProfile is endpoint for AutoAddDSCProfile
func (e EndpointsClusterV1Client) AutoAddDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	resp, err := e.AutoAddDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfile{}, err
	}
	return resp.(*DSCProfile), nil
}

type respClusterV1AutoAddDSCProfile struct {
	V   DSCProfile
	Err error
}

// AutoAddDistributedServiceCard is endpoint for AutoAddDistributedServiceCard
func (e EndpointsClusterV1Client) AutoAddDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	resp, err := e.AutoAddDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCard{}, err
	}
	return resp.(*DistributedServiceCard), nil
}

type respClusterV1AutoAddDistributedServiceCard struct {
	V   DistributedServiceCard
	Err error
}

// AutoAddHost is endpoint for AutoAddHost
func (e EndpointsClusterV1Client) AutoAddHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoAddHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoAddHost struct {
	V   Host
	Err error
}

// AutoAddLicense is endpoint for AutoAddLicense
func (e EndpointsClusterV1Client) AutoAddLicense(ctx context.Context, in *License) (*License, error) {
	resp, err := e.AutoAddLicenseEndpoint(ctx, in)
	if err != nil {
		return &License{}, err
	}
	return resp.(*License), nil
}

type respClusterV1AutoAddLicense struct {
	V   License
	Err error
}

// AutoAddNode is endpoint for AutoAddNode
func (e EndpointsClusterV1Client) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoAddNode struct {
	V   Node
	Err error
}

// AutoAddSnapshotRestore is endpoint for AutoAddSnapshotRestore
func (e EndpointsClusterV1Client) AutoAddSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	resp, err := e.AutoAddSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1AutoAddSnapshotRestore struct {
	V   SnapshotRestore
	Err error
}

// AutoAddTenant is endpoint for AutoAddTenant
func (e EndpointsClusterV1Client) AutoAddTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoAddTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoAddTenant struct {
	V   Tenant
	Err error
}

// AutoAddVersion is endpoint for AutoAddVersion
func (e EndpointsClusterV1Client) AutoAddVersion(ctx context.Context, in *Version) (*Version, error) {
	resp, err := e.AutoAddVersionEndpoint(ctx, in)
	if err != nil {
		return &Version{}, err
	}
	return resp.(*Version), nil
}

type respClusterV1AutoAddVersion struct {
	V   Version
	Err error
}

// AutoDeleteCluster is endpoint for AutoDeleteCluster
func (e EndpointsClusterV1Client) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoDeleteCluster struct {
	V   Cluster
	Err error
}

// AutoDeleteConfigurationSnapshot is endpoint for AutoDeleteConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoDeleteConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	resp, err := e.AutoDeleteConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1AutoDeleteConfigurationSnapshot struct {
	V   ConfigurationSnapshot
	Err error
}

// AutoDeleteCredentials is endpoint for AutoDeleteCredentials
func (e EndpointsClusterV1Client) AutoDeleteCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	resp, err := e.AutoDeleteCredentialsEndpoint(ctx, in)
	if err != nil {
		return &Credentials{}, err
	}
	return resp.(*Credentials), nil
}

type respClusterV1AutoDeleteCredentials struct {
	V   Credentials
	Err error
}

// AutoDeleteDSCProfile is endpoint for AutoDeleteDSCProfile
func (e EndpointsClusterV1Client) AutoDeleteDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	resp, err := e.AutoDeleteDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfile{}, err
	}
	return resp.(*DSCProfile), nil
}

type respClusterV1AutoDeleteDSCProfile struct {
	V   DSCProfile
	Err error
}

// AutoDeleteDistributedServiceCard is endpoint for AutoDeleteDistributedServiceCard
func (e EndpointsClusterV1Client) AutoDeleteDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	resp, err := e.AutoDeleteDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCard{}, err
	}
	return resp.(*DistributedServiceCard), nil
}

type respClusterV1AutoDeleteDistributedServiceCard struct {
	V   DistributedServiceCard
	Err error
}

// AutoDeleteHost is endpoint for AutoDeleteHost
func (e EndpointsClusterV1Client) AutoDeleteHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoDeleteHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoDeleteHost struct {
	V   Host
	Err error
}

// AutoDeleteLicense is endpoint for AutoDeleteLicense
func (e EndpointsClusterV1Client) AutoDeleteLicense(ctx context.Context, in *License) (*License, error) {
	resp, err := e.AutoDeleteLicenseEndpoint(ctx, in)
	if err != nil {
		return &License{}, err
	}
	return resp.(*License), nil
}

type respClusterV1AutoDeleteLicense struct {
	V   License
	Err error
}

// AutoDeleteNode is endpoint for AutoDeleteNode
func (e EndpointsClusterV1Client) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoDeleteNode struct {
	V   Node
	Err error
}

// AutoDeleteSnapshotRestore is endpoint for AutoDeleteSnapshotRestore
func (e EndpointsClusterV1Client) AutoDeleteSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	resp, err := e.AutoDeleteSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1AutoDeleteSnapshotRestore struct {
	V   SnapshotRestore
	Err error
}

// AutoDeleteTenant is endpoint for AutoDeleteTenant
func (e EndpointsClusterV1Client) AutoDeleteTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoDeleteTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoDeleteTenant struct {
	V   Tenant
	Err error
}

// AutoDeleteVersion is endpoint for AutoDeleteVersion
func (e EndpointsClusterV1Client) AutoDeleteVersion(ctx context.Context, in *Version) (*Version, error) {
	resp, err := e.AutoDeleteVersionEndpoint(ctx, in)
	if err != nil {
		return &Version{}, err
	}
	return resp.(*Version), nil
}

type respClusterV1AutoDeleteVersion struct {
	V   Version
	Err error
}

// AutoGetCluster is endpoint for AutoGetCluster
func (e EndpointsClusterV1Client) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoGetCluster struct {
	V   Cluster
	Err error
}

// AutoGetConfigurationSnapshot is endpoint for AutoGetConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoGetConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	resp, err := e.AutoGetConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1AutoGetConfigurationSnapshot struct {
	V   ConfigurationSnapshot
	Err error
}

// AutoGetCredentials is endpoint for AutoGetCredentials
func (e EndpointsClusterV1Client) AutoGetCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	resp, err := e.AutoGetCredentialsEndpoint(ctx, in)
	if err != nil {
		return &Credentials{}, err
	}
	return resp.(*Credentials), nil
}

type respClusterV1AutoGetCredentials struct {
	V   Credentials
	Err error
}

// AutoGetDSCProfile is endpoint for AutoGetDSCProfile
func (e EndpointsClusterV1Client) AutoGetDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	resp, err := e.AutoGetDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfile{}, err
	}
	return resp.(*DSCProfile), nil
}

type respClusterV1AutoGetDSCProfile struct {
	V   DSCProfile
	Err error
}

// AutoGetDistributedServiceCard is endpoint for AutoGetDistributedServiceCard
func (e EndpointsClusterV1Client) AutoGetDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	resp, err := e.AutoGetDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCard{}, err
	}
	return resp.(*DistributedServiceCard), nil
}

type respClusterV1AutoGetDistributedServiceCard struct {
	V   DistributedServiceCard
	Err error
}

// AutoGetHost is endpoint for AutoGetHost
func (e EndpointsClusterV1Client) AutoGetHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoGetHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoGetHost struct {
	V   Host
	Err error
}

// AutoGetLicense is endpoint for AutoGetLicense
func (e EndpointsClusterV1Client) AutoGetLicense(ctx context.Context, in *License) (*License, error) {
	resp, err := e.AutoGetLicenseEndpoint(ctx, in)
	if err != nil {
		return &License{}, err
	}
	return resp.(*License), nil
}

type respClusterV1AutoGetLicense struct {
	V   License
	Err error
}

// AutoGetNode is endpoint for AutoGetNode
func (e EndpointsClusterV1Client) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoGetNode struct {
	V   Node
	Err error
}

// AutoGetSnapshotRestore is endpoint for AutoGetSnapshotRestore
func (e EndpointsClusterV1Client) AutoGetSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	resp, err := e.AutoGetSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1AutoGetSnapshotRestore struct {
	V   SnapshotRestore
	Err error
}

// AutoGetTenant is endpoint for AutoGetTenant
func (e EndpointsClusterV1Client) AutoGetTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoGetTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoGetTenant struct {
	V   Tenant
	Err error
}

// AutoGetVersion is endpoint for AutoGetVersion
func (e EndpointsClusterV1Client) AutoGetVersion(ctx context.Context, in *Version) (*Version, error) {
	resp, err := e.AutoGetVersionEndpoint(ctx, in)
	if err != nil {
		return &Version{}, err
	}
	return resp.(*Version), nil
}

type respClusterV1AutoGetVersion struct {
	V   Version
	Err error
}

// AutoLabelCluster is endpoint for AutoLabelCluster
func (e EndpointsClusterV1Client) AutoLabelCluster(ctx context.Context, in *api.Label) (*Cluster, error) {
	resp, err := e.AutoLabelClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoLabelCluster struct {
	V   Cluster
	Err error
}

// AutoLabelConfigurationSnapshot is endpoint for AutoLabelConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoLabelConfigurationSnapshot(ctx context.Context, in *api.Label) (*ConfigurationSnapshot, error) {
	resp, err := e.AutoLabelConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1AutoLabelConfigurationSnapshot struct {
	V   ConfigurationSnapshot
	Err error
}

// AutoLabelCredentials is endpoint for AutoLabelCredentials
func (e EndpointsClusterV1Client) AutoLabelCredentials(ctx context.Context, in *api.Label) (*Credentials, error) {
	resp, err := e.AutoLabelCredentialsEndpoint(ctx, in)
	if err != nil {
		return &Credentials{}, err
	}
	return resp.(*Credentials), nil
}

type respClusterV1AutoLabelCredentials struct {
	V   Credentials
	Err error
}

// AutoLabelDSCProfile is endpoint for AutoLabelDSCProfile
func (e EndpointsClusterV1Client) AutoLabelDSCProfile(ctx context.Context, in *api.Label) (*DSCProfile, error) {
	resp, err := e.AutoLabelDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfile{}, err
	}
	return resp.(*DSCProfile), nil
}

type respClusterV1AutoLabelDSCProfile struct {
	V   DSCProfile
	Err error
}

// AutoLabelDistributedServiceCard is endpoint for AutoLabelDistributedServiceCard
func (e EndpointsClusterV1Client) AutoLabelDistributedServiceCard(ctx context.Context, in *api.Label) (*DistributedServiceCard, error) {
	resp, err := e.AutoLabelDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCard{}, err
	}
	return resp.(*DistributedServiceCard), nil
}

type respClusterV1AutoLabelDistributedServiceCard struct {
	V   DistributedServiceCard
	Err error
}

// AutoLabelHost is endpoint for AutoLabelHost
func (e EndpointsClusterV1Client) AutoLabelHost(ctx context.Context, in *api.Label) (*Host, error) {
	resp, err := e.AutoLabelHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoLabelHost struct {
	V   Host
	Err error
}

// AutoLabelLicense is endpoint for AutoLabelLicense
func (e EndpointsClusterV1Client) AutoLabelLicense(ctx context.Context, in *api.Label) (*License, error) {
	resp, err := e.AutoLabelLicenseEndpoint(ctx, in)
	if err != nil {
		return &License{}, err
	}
	return resp.(*License), nil
}

type respClusterV1AutoLabelLicense struct {
	V   License
	Err error
}

// AutoLabelNode is endpoint for AutoLabelNode
func (e EndpointsClusterV1Client) AutoLabelNode(ctx context.Context, in *api.Label) (*Node, error) {
	resp, err := e.AutoLabelNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoLabelNode struct {
	V   Node
	Err error
}

// AutoLabelSnapshotRestore is endpoint for AutoLabelSnapshotRestore
func (e EndpointsClusterV1Client) AutoLabelSnapshotRestore(ctx context.Context, in *api.Label) (*SnapshotRestore, error) {
	resp, err := e.AutoLabelSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1AutoLabelSnapshotRestore struct {
	V   SnapshotRestore
	Err error
}

// AutoLabelTenant is endpoint for AutoLabelTenant
func (e EndpointsClusterV1Client) AutoLabelTenant(ctx context.Context, in *api.Label) (*Tenant, error) {
	resp, err := e.AutoLabelTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoLabelTenant struct {
	V   Tenant
	Err error
}

// AutoLabelVersion is endpoint for AutoLabelVersion
func (e EndpointsClusterV1Client) AutoLabelVersion(ctx context.Context, in *api.Label) (*Version, error) {
	resp, err := e.AutoLabelVersionEndpoint(ctx, in)
	if err != nil {
		return &Version{}, err
	}
	return resp.(*Version), nil
}

type respClusterV1AutoLabelVersion struct {
	V   Version
	Err error
}

// AutoListCluster is endpoint for AutoListCluster
func (e EndpointsClusterV1Client) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (*ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return &ClusterList{}, err
	}
	return resp.(*ClusterList), nil
}

type respClusterV1AutoListCluster struct {
	V   ClusterList
	Err error
}

// AutoListConfigurationSnapshot is endpoint for AutoListConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoListConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions) (*ConfigurationSnapshotList, error) {
	resp, err := e.AutoListConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshotList{}, err
	}
	return resp.(*ConfigurationSnapshotList), nil
}

type respClusterV1AutoListConfigurationSnapshot struct {
	V   ConfigurationSnapshotList
	Err error
}

// AutoListCredentials is endpoint for AutoListCredentials
func (e EndpointsClusterV1Client) AutoListCredentials(ctx context.Context, in *api.ListWatchOptions) (*CredentialsList, error) {
	resp, err := e.AutoListCredentialsEndpoint(ctx, in)
	if err != nil {
		return &CredentialsList{}, err
	}
	return resp.(*CredentialsList), nil
}

type respClusterV1AutoListCredentials struct {
	V   CredentialsList
	Err error
}

// AutoListDSCProfile is endpoint for AutoListDSCProfile
func (e EndpointsClusterV1Client) AutoListDSCProfile(ctx context.Context, in *api.ListWatchOptions) (*DSCProfileList, error) {
	resp, err := e.AutoListDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfileList{}, err
	}
	return resp.(*DSCProfileList), nil
}

type respClusterV1AutoListDSCProfile struct {
	V   DSCProfileList
	Err error
}

// AutoListDistributedServiceCard is endpoint for AutoListDistributedServiceCard
func (e EndpointsClusterV1Client) AutoListDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions) (*DistributedServiceCardList, error) {
	resp, err := e.AutoListDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCardList{}, err
	}
	return resp.(*DistributedServiceCardList), nil
}

type respClusterV1AutoListDistributedServiceCard struct {
	V   DistributedServiceCardList
	Err error
}

// AutoListHost is endpoint for AutoListHost
func (e EndpointsClusterV1Client) AutoListHost(ctx context.Context, in *api.ListWatchOptions) (*HostList, error) {
	resp, err := e.AutoListHostEndpoint(ctx, in)
	if err != nil {
		return &HostList{}, err
	}
	return resp.(*HostList), nil
}

type respClusterV1AutoListHost struct {
	V   HostList
	Err error
}

// AutoListLicense is endpoint for AutoListLicense
func (e EndpointsClusterV1Client) AutoListLicense(ctx context.Context, in *api.ListWatchOptions) (*LicenseList, error) {
	resp, err := e.AutoListLicenseEndpoint(ctx, in)
	if err != nil {
		return &LicenseList{}, err
	}
	return resp.(*LicenseList), nil
}

type respClusterV1AutoListLicense struct {
	V   LicenseList
	Err error
}

// AutoListNode is endpoint for AutoListNode
func (e EndpointsClusterV1Client) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (*NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return &NodeList{}, err
	}
	return resp.(*NodeList), nil
}

type respClusterV1AutoListNode struct {
	V   NodeList
	Err error
}

// AutoListSnapshotRestore is endpoint for AutoListSnapshotRestore
func (e EndpointsClusterV1Client) AutoListSnapshotRestore(ctx context.Context, in *api.ListWatchOptions) (*SnapshotRestoreList, error) {
	resp, err := e.AutoListSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestoreList{}, err
	}
	return resp.(*SnapshotRestoreList), nil
}

type respClusterV1AutoListSnapshotRestore struct {
	V   SnapshotRestoreList
	Err error
}

// AutoListTenant is endpoint for AutoListTenant
func (e EndpointsClusterV1Client) AutoListTenant(ctx context.Context, in *api.ListWatchOptions) (*TenantList, error) {
	resp, err := e.AutoListTenantEndpoint(ctx, in)
	if err != nil {
		return &TenantList{}, err
	}
	return resp.(*TenantList), nil
}

type respClusterV1AutoListTenant struct {
	V   TenantList
	Err error
}

// AutoListVersion is endpoint for AutoListVersion
func (e EndpointsClusterV1Client) AutoListVersion(ctx context.Context, in *api.ListWatchOptions) (*VersionList, error) {
	resp, err := e.AutoListVersionEndpoint(ctx, in)
	if err != nil {
		return &VersionList{}, err
	}
	return resp.(*VersionList), nil
}

type respClusterV1AutoListVersion struct {
	V   VersionList
	Err error
}

// AutoUpdateCluster is endpoint for AutoUpdateCluster
func (e EndpointsClusterV1Client) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1AutoUpdateCluster struct {
	V   Cluster
	Err error
}

// AutoUpdateConfigurationSnapshot is endpoint for AutoUpdateConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoUpdateConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	resp, err := e.AutoUpdateConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1AutoUpdateConfigurationSnapshot struct {
	V   ConfigurationSnapshot
	Err error
}

// AutoUpdateCredentials is endpoint for AutoUpdateCredentials
func (e EndpointsClusterV1Client) AutoUpdateCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	resp, err := e.AutoUpdateCredentialsEndpoint(ctx, in)
	if err != nil {
		return &Credentials{}, err
	}
	return resp.(*Credentials), nil
}

type respClusterV1AutoUpdateCredentials struct {
	V   Credentials
	Err error
}

// AutoUpdateDSCProfile is endpoint for AutoUpdateDSCProfile
func (e EndpointsClusterV1Client) AutoUpdateDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	resp, err := e.AutoUpdateDSCProfileEndpoint(ctx, in)
	if err != nil {
		return &DSCProfile{}, err
	}
	return resp.(*DSCProfile), nil
}

type respClusterV1AutoUpdateDSCProfile struct {
	V   DSCProfile
	Err error
}

// AutoUpdateDistributedServiceCard is endpoint for AutoUpdateDistributedServiceCard
func (e EndpointsClusterV1Client) AutoUpdateDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	resp, err := e.AutoUpdateDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return &DistributedServiceCard{}, err
	}
	return resp.(*DistributedServiceCard), nil
}

type respClusterV1AutoUpdateDistributedServiceCard struct {
	V   DistributedServiceCard
	Err error
}

// AutoUpdateHost is endpoint for AutoUpdateHost
func (e EndpointsClusterV1Client) AutoUpdateHost(ctx context.Context, in *Host) (*Host, error) {
	resp, err := e.AutoUpdateHostEndpoint(ctx, in)
	if err != nil {
		return &Host{}, err
	}
	return resp.(*Host), nil
}

type respClusterV1AutoUpdateHost struct {
	V   Host
	Err error
}

// AutoUpdateLicense is endpoint for AutoUpdateLicense
func (e EndpointsClusterV1Client) AutoUpdateLicense(ctx context.Context, in *License) (*License, error) {
	resp, err := e.AutoUpdateLicenseEndpoint(ctx, in)
	if err != nil {
		return &License{}, err
	}
	return resp.(*License), nil
}

type respClusterV1AutoUpdateLicense struct {
	V   License
	Err error
}

// AutoUpdateNode is endpoint for AutoUpdateNode
func (e EndpointsClusterV1Client) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respClusterV1AutoUpdateNode struct {
	V   Node
	Err error
}

// AutoUpdateSnapshotRestore is endpoint for AutoUpdateSnapshotRestore
func (e EndpointsClusterV1Client) AutoUpdateSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	resp, err := e.AutoUpdateSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1AutoUpdateSnapshotRestore struct {
	V   SnapshotRestore
	Err error
}

// AutoUpdateTenant is endpoint for AutoUpdateTenant
func (e EndpointsClusterV1Client) AutoUpdateTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	resp, err := e.AutoUpdateTenantEndpoint(ctx, in)
	if err != nil {
		return &Tenant{}, err
	}
	return resp.(*Tenant), nil
}

type respClusterV1AutoUpdateTenant struct {
	V   Tenant
	Err error
}

// AutoUpdateVersion is endpoint for AutoUpdateVersion
func (e EndpointsClusterV1Client) AutoUpdateVersion(ctx context.Context, in *Version) (*Version, error) {
	resp, err := e.AutoUpdateVersionEndpoint(ctx, in)
	if err != nil {
		return &Version{}, err
	}
	return resp.(*Version), nil
}

type respClusterV1AutoUpdateVersion struct {
	V   Version
	Err error
}

// Restore is endpoint for Restore
func (e EndpointsClusterV1Client) Restore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	resp, err := e.RestoreEndpoint(ctx, in)
	if err != nil {
		return &SnapshotRestore{}, err
	}
	return resp.(*SnapshotRestore), nil
}

type respClusterV1Restore struct {
	V   SnapshotRestore
	Err error
}

// Save is endpoint for Save
func (e EndpointsClusterV1Client) Save(ctx context.Context, in *ConfigurationSnapshotRequest) (*ConfigurationSnapshot, error) {
	resp, err := e.SaveEndpoint(ctx, in)
	if err != nil {
		return &ConfigurationSnapshot{}, err
	}
	return resp.(*ConfigurationSnapshot), nil
}

type respClusterV1Save struct {
	V   ConfigurationSnapshot
	Err error
}

// UpdateTLSConfig is endpoint for UpdateTLSConfig
func (e EndpointsClusterV1Client) UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest) (*Cluster, error) {
	resp, err := e.UpdateTLSConfigEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respClusterV1UpdateTLSConfig struct {
	V   Cluster
	Err error
}

func (e EndpointsClusterV1Client) AutoWatchSvcClusterV1(ctx context.Context, in *api.AggWatchOptions) (ClusterV1_AutoWatchSvcClusterV1Client, error) {
	return e.Client.AutoWatchSvcClusterV1(ctx, in)
}

// AutoWatchCluster performs Watch for Cluster
func (e EndpointsClusterV1Client) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchClusterClient, error) {
	return e.Client.AutoWatchCluster(ctx, in)
}

// AutoWatchNode performs Watch for Node
func (e EndpointsClusterV1Client) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchNodeClient, error) {
	return e.Client.AutoWatchNode(ctx, in)
}

// AutoWatchHost performs Watch for Host
func (e EndpointsClusterV1Client) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchHostClient, error) {
	return e.Client.AutoWatchHost(ctx, in)
}

// AutoWatchDistributedServiceCard performs Watch for DistributedServiceCard
func (e EndpointsClusterV1Client) AutoWatchDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchDistributedServiceCardClient, error) {
	return e.Client.AutoWatchDistributedServiceCard(ctx, in)
}

// AutoWatchTenant performs Watch for Tenant
func (e EndpointsClusterV1Client) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchTenantClient, error) {
	return e.Client.AutoWatchTenant(ctx, in)
}

// AutoWatchVersion performs Watch for Version
func (e EndpointsClusterV1Client) AutoWatchVersion(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchVersionClient, error) {
	return e.Client.AutoWatchVersion(ctx, in)
}

// AutoWatchConfigurationSnapshot performs Watch for ConfigurationSnapshot
func (e EndpointsClusterV1Client) AutoWatchConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchConfigurationSnapshotClient, error) {
	return e.Client.AutoWatchConfigurationSnapshot(ctx, in)
}

// AutoWatchSnapshotRestore performs Watch for SnapshotRestore
func (e EndpointsClusterV1Client) AutoWatchSnapshotRestore(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchSnapshotRestoreClient, error) {
	return e.Client.AutoWatchSnapshotRestore(ctx, in)
}

// AutoWatchLicense performs Watch for License
func (e EndpointsClusterV1Client) AutoWatchLicense(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchLicenseClient, error) {
	return e.Client.AutoWatchLicense(ctx, in)
}

// AutoWatchDSCProfile performs Watch for DSCProfile
func (e EndpointsClusterV1Client) AutoWatchDSCProfile(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchDSCProfileClient, error) {
	return e.Client.AutoWatchDSCProfile(ctx, in)
}

// AutoWatchCredentials performs Watch for Credentials
func (e EndpointsClusterV1Client) AutoWatchCredentials(ctx context.Context, in *api.ListWatchOptions) (ClusterV1_AutoWatchCredentialsClient, error) {
	return e.Client.AutoWatchCredentials(ctx, in)
}

// AuthBootstrapComplete implementation on server Endpoint
func (e EndpointsClusterV1Server) AuthBootstrapComplete(ctx context.Context, in ClusterAuthBootstrapRequest) (Cluster, error) {
	resp, err := e.AuthBootstrapCompleteEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AuthBootstrapCompleteEndpoint creates  AuthBootstrapComplete endpoints for the service
func MakeClusterV1AuthBootstrapCompleteEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ClusterAuthBootstrapRequest)
		v, err := s.AuthBootstrapComplete(ctx, *req)
		return respClusterV1AuthBootstrapComplete{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AuthBootstrapComplete")(f)
}

// AutoAddCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoAddClusterEndpoint creates  AutoAddCluster endpoints for the service
func MakeClusterV1AutoAddClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoAddCluster(ctx, *req)
		return respClusterV1AutoAddCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddCluster")(f)
}

// AutoAddConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (ConfigurationSnapshot, error) {
	resp, err := e.AutoAddConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1AutoAddConfigurationSnapshotEndpoint creates  AutoAddConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoAddConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ConfigurationSnapshot)
		v, err := s.AutoAddConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoAddConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddConfigurationSnapshot")(f)
}

// AutoAddCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddCredentials(ctx context.Context, in Credentials) (Credentials, error) {
	resp, err := e.AutoAddCredentialsEndpoint(ctx, in)
	if err != nil {
		return Credentials{}, err
	}
	return *resp.(*Credentials), nil
}

// MakeClusterV1AutoAddCredentialsEndpoint creates  AutoAddCredentials endpoints for the service
func MakeClusterV1AutoAddCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Credentials)
		v, err := s.AutoAddCredentials(ctx, *req)
		return respClusterV1AutoAddCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddCredentials")(f)
}

// AutoAddDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddDSCProfile(ctx context.Context, in DSCProfile) (DSCProfile, error) {
	resp, err := e.AutoAddDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfile{}, err
	}
	return *resp.(*DSCProfile), nil
}

// MakeClusterV1AutoAddDSCProfileEndpoint creates  AutoAddDSCProfile endpoints for the service
func MakeClusterV1AutoAddDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DSCProfile)
		v, err := s.AutoAddDSCProfile(ctx, *req)
		return respClusterV1AutoAddDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddDSCProfile")(f)
}

// AutoAddDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (DistributedServiceCard, error) {
	resp, err := e.AutoAddDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCard{}, err
	}
	return *resp.(*DistributedServiceCard), nil
}

// MakeClusterV1AutoAddDistributedServiceCardEndpoint creates  AutoAddDistributedServiceCard endpoints for the service
func MakeClusterV1AutoAddDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DistributedServiceCard)
		v, err := s.AutoAddDistributedServiceCard(ctx, *req)
		return respClusterV1AutoAddDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddDistributedServiceCard")(f)
}

// AutoAddHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoAddHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoAddHostEndpoint creates  AutoAddHost endpoints for the service
func MakeClusterV1AutoAddHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoAddHost(ctx, *req)
		return respClusterV1AutoAddHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddHost")(f)
}

// AutoAddLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddLicense(ctx context.Context, in License) (License, error) {
	resp, err := e.AutoAddLicenseEndpoint(ctx, in)
	if err != nil {
		return License{}, err
	}
	return *resp.(*License), nil
}

// MakeClusterV1AutoAddLicenseEndpoint creates  AutoAddLicense endpoints for the service
func MakeClusterV1AutoAddLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*License)
		v, err := s.AutoAddLicense(ctx, *req)
		return respClusterV1AutoAddLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddLicense")(f)
}

// AutoAddNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoAddNodeEndpoint creates  AutoAddNode endpoints for the service
func MakeClusterV1AutoAddNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoAddNode(ctx, *req)
		return respClusterV1AutoAddNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddNode")(f)
}

// AutoAddSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddSnapshotRestore(ctx context.Context, in SnapshotRestore) (SnapshotRestore, error) {
	resp, err := e.AutoAddSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1AutoAddSnapshotRestoreEndpoint creates  AutoAddSnapshotRestore endpoints for the service
func MakeClusterV1AutoAddSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SnapshotRestore)
		v, err := s.AutoAddSnapshotRestore(ctx, *req)
		return respClusterV1AutoAddSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddSnapshotRestore")(f)
}

// AutoAddTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoAddTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoAddTenantEndpoint creates  AutoAddTenant endpoints for the service
func MakeClusterV1AutoAddTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoAddTenant(ctx, *req)
		return respClusterV1AutoAddTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddTenant")(f)
}

// AutoAddVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoAddVersion(ctx context.Context, in Version) (Version, error) {
	resp, err := e.AutoAddVersionEndpoint(ctx, in)
	if err != nil {
		return Version{}, err
	}
	return *resp.(*Version), nil
}

// MakeClusterV1AutoAddVersionEndpoint creates  AutoAddVersion endpoints for the service
func MakeClusterV1AutoAddVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Version)
		v, err := s.AutoAddVersion(ctx, *req)
		return respClusterV1AutoAddVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoAddVersion")(f)
}

// AutoDeleteCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoDeleteClusterEndpoint creates  AutoDeleteCluster endpoints for the service
func MakeClusterV1AutoDeleteClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoDeleteCluster(ctx, *req)
		return respClusterV1AutoDeleteCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteCluster")(f)
}

// AutoDeleteConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (ConfigurationSnapshot, error) {
	resp, err := e.AutoDeleteConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1AutoDeleteConfigurationSnapshotEndpoint creates  AutoDeleteConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoDeleteConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ConfigurationSnapshot)
		v, err := s.AutoDeleteConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoDeleteConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteConfigurationSnapshot")(f)
}

// AutoDeleteCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteCredentials(ctx context.Context, in Credentials) (Credentials, error) {
	resp, err := e.AutoDeleteCredentialsEndpoint(ctx, in)
	if err != nil {
		return Credentials{}, err
	}
	return *resp.(*Credentials), nil
}

// MakeClusterV1AutoDeleteCredentialsEndpoint creates  AutoDeleteCredentials endpoints for the service
func MakeClusterV1AutoDeleteCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Credentials)
		v, err := s.AutoDeleteCredentials(ctx, *req)
		return respClusterV1AutoDeleteCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteCredentials")(f)
}

// AutoDeleteDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteDSCProfile(ctx context.Context, in DSCProfile) (DSCProfile, error) {
	resp, err := e.AutoDeleteDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfile{}, err
	}
	return *resp.(*DSCProfile), nil
}

// MakeClusterV1AutoDeleteDSCProfileEndpoint creates  AutoDeleteDSCProfile endpoints for the service
func MakeClusterV1AutoDeleteDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DSCProfile)
		v, err := s.AutoDeleteDSCProfile(ctx, *req)
		return respClusterV1AutoDeleteDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteDSCProfile")(f)
}

// AutoDeleteDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (DistributedServiceCard, error) {
	resp, err := e.AutoDeleteDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCard{}, err
	}
	return *resp.(*DistributedServiceCard), nil
}

// MakeClusterV1AutoDeleteDistributedServiceCardEndpoint creates  AutoDeleteDistributedServiceCard endpoints for the service
func MakeClusterV1AutoDeleteDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DistributedServiceCard)
		v, err := s.AutoDeleteDistributedServiceCard(ctx, *req)
		return respClusterV1AutoDeleteDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteDistributedServiceCard")(f)
}

// AutoDeleteHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoDeleteHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoDeleteHostEndpoint creates  AutoDeleteHost endpoints for the service
func MakeClusterV1AutoDeleteHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoDeleteHost(ctx, *req)
		return respClusterV1AutoDeleteHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteHost")(f)
}

// AutoDeleteLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteLicense(ctx context.Context, in License) (License, error) {
	resp, err := e.AutoDeleteLicenseEndpoint(ctx, in)
	if err != nil {
		return License{}, err
	}
	return *resp.(*License), nil
}

// MakeClusterV1AutoDeleteLicenseEndpoint creates  AutoDeleteLicense endpoints for the service
func MakeClusterV1AutoDeleteLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*License)
		v, err := s.AutoDeleteLicense(ctx, *req)
		return respClusterV1AutoDeleteLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteLicense")(f)
}

// AutoDeleteNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoDeleteNodeEndpoint creates  AutoDeleteNode endpoints for the service
func MakeClusterV1AutoDeleteNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoDeleteNode(ctx, *req)
		return respClusterV1AutoDeleteNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteNode")(f)
}

// AutoDeleteSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteSnapshotRestore(ctx context.Context, in SnapshotRestore) (SnapshotRestore, error) {
	resp, err := e.AutoDeleteSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1AutoDeleteSnapshotRestoreEndpoint creates  AutoDeleteSnapshotRestore endpoints for the service
func MakeClusterV1AutoDeleteSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SnapshotRestore)
		v, err := s.AutoDeleteSnapshotRestore(ctx, *req)
		return respClusterV1AutoDeleteSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteSnapshotRestore")(f)
}

// AutoDeleteTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoDeleteTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoDeleteTenantEndpoint creates  AutoDeleteTenant endpoints for the service
func MakeClusterV1AutoDeleteTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoDeleteTenant(ctx, *req)
		return respClusterV1AutoDeleteTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteTenant")(f)
}

// AutoDeleteVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoDeleteVersion(ctx context.Context, in Version) (Version, error) {
	resp, err := e.AutoDeleteVersionEndpoint(ctx, in)
	if err != nil {
		return Version{}, err
	}
	return *resp.(*Version), nil
}

// MakeClusterV1AutoDeleteVersionEndpoint creates  AutoDeleteVersion endpoints for the service
func MakeClusterV1AutoDeleteVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Version)
		v, err := s.AutoDeleteVersion(ctx, *req)
		return respClusterV1AutoDeleteVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoDeleteVersion")(f)
}

// AutoGetCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoGetClusterEndpoint creates  AutoGetCluster endpoints for the service
func MakeClusterV1AutoGetClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoGetCluster(ctx, *req)
		return respClusterV1AutoGetCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetCluster")(f)
}

// AutoGetConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (ConfigurationSnapshot, error) {
	resp, err := e.AutoGetConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1AutoGetConfigurationSnapshotEndpoint creates  AutoGetConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoGetConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ConfigurationSnapshot)
		v, err := s.AutoGetConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoGetConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetConfigurationSnapshot")(f)
}

// AutoGetCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetCredentials(ctx context.Context, in Credentials) (Credentials, error) {
	resp, err := e.AutoGetCredentialsEndpoint(ctx, in)
	if err != nil {
		return Credentials{}, err
	}
	return *resp.(*Credentials), nil
}

// MakeClusterV1AutoGetCredentialsEndpoint creates  AutoGetCredentials endpoints for the service
func MakeClusterV1AutoGetCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Credentials)
		v, err := s.AutoGetCredentials(ctx, *req)
		return respClusterV1AutoGetCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetCredentials")(f)
}

// AutoGetDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetDSCProfile(ctx context.Context, in DSCProfile) (DSCProfile, error) {
	resp, err := e.AutoGetDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfile{}, err
	}
	return *resp.(*DSCProfile), nil
}

// MakeClusterV1AutoGetDSCProfileEndpoint creates  AutoGetDSCProfile endpoints for the service
func MakeClusterV1AutoGetDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DSCProfile)
		v, err := s.AutoGetDSCProfile(ctx, *req)
		return respClusterV1AutoGetDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetDSCProfile")(f)
}

// AutoGetDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (DistributedServiceCard, error) {
	resp, err := e.AutoGetDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCard{}, err
	}
	return *resp.(*DistributedServiceCard), nil
}

// MakeClusterV1AutoGetDistributedServiceCardEndpoint creates  AutoGetDistributedServiceCard endpoints for the service
func MakeClusterV1AutoGetDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DistributedServiceCard)
		v, err := s.AutoGetDistributedServiceCard(ctx, *req)
		return respClusterV1AutoGetDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetDistributedServiceCard")(f)
}

// AutoGetHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoGetHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoGetHostEndpoint creates  AutoGetHost endpoints for the service
func MakeClusterV1AutoGetHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoGetHost(ctx, *req)
		return respClusterV1AutoGetHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetHost")(f)
}

// AutoGetLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetLicense(ctx context.Context, in License) (License, error) {
	resp, err := e.AutoGetLicenseEndpoint(ctx, in)
	if err != nil {
		return License{}, err
	}
	return *resp.(*License), nil
}

// MakeClusterV1AutoGetLicenseEndpoint creates  AutoGetLicense endpoints for the service
func MakeClusterV1AutoGetLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*License)
		v, err := s.AutoGetLicense(ctx, *req)
		return respClusterV1AutoGetLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetLicense")(f)
}

// AutoGetNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoGetNodeEndpoint creates  AutoGetNode endpoints for the service
func MakeClusterV1AutoGetNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoGetNode(ctx, *req)
		return respClusterV1AutoGetNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetNode")(f)
}

// AutoGetSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetSnapshotRestore(ctx context.Context, in SnapshotRestore) (SnapshotRestore, error) {
	resp, err := e.AutoGetSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1AutoGetSnapshotRestoreEndpoint creates  AutoGetSnapshotRestore endpoints for the service
func MakeClusterV1AutoGetSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SnapshotRestore)
		v, err := s.AutoGetSnapshotRestore(ctx, *req)
		return respClusterV1AutoGetSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetSnapshotRestore")(f)
}

// AutoGetTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoGetTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoGetTenantEndpoint creates  AutoGetTenant endpoints for the service
func MakeClusterV1AutoGetTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoGetTenant(ctx, *req)
		return respClusterV1AutoGetTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetTenant")(f)
}

// AutoGetVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoGetVersion(ctx context.Context, in Version) (Version, error) {
	resp, err := e.AutoGetVersionEndpoint(ctx, in)
	if err != nil {
		return Version{}, err
	}
	return *resp.(*Version), nil
}

// MakeClusterV1AutoGetVersionEndpoint creates  AutoGetVersion endpoints for the service
func MakeClusterV1AutoGetVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Version)
		v, err := s.AutoGetVersion(ctx, *req)
		return respClusterV1AutoGetVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoGetVersion")(f)
}

// AutoLabelCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelCluster(ctx context.Context, in api.Label) (Cluster, error) {
	resp, err := e.AutoLabelClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoLabelClusterEndpoint creates  AutoLabelCluster endpoints for the service
func MakeClusterV1AutoLabelClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelCluster(ctx, *req)
		return respClusterV1AutoLabelCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelCluster")(f)
}

// AutoLabelConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelConfigurationSnapshot(ctx context.Context, in api.Label) (ConfigurationSnapshot, error) {
	resp, err := e.AutoLabelConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1AutoLabelConfigurationSnapshotEndpoint creates  AutoLabelConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoLabelConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoLabelConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelConfigurationSnapshot")(f)
}

// AutoLabelCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelCredentials(ctx context.Context, in api.Label) (Credentials, error) {
	resp, err := e.AutoLabelCredentialsEndpoint(ctx, in)
	if err != nil {
		return Credentials{}, err
	}
	return *resp.(*Credentials), nil
}

// MakeClusterV1AutoLabelCredentialsEndpoint creates  AutoLabelCredentials endpoints for the service
func MakeClusterV1AutoLabelCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelCredentials(ctx, *req)
		return respClusterV1AutoLabelCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelCredentials")(f)
}

// AutoLabelDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelDSCProfile(ctx context.Context, in api.Label) (DSCProfile, error) {
	resp, err := e.AutoLabelDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfile{}, err
	}
	return *resp.(*DSCProfile), nil
}

// MakeClusterV1AutoLabelDSCProfileEndpoint creates  AutoLabelDSCProfile endpoints for the service
func MakeClusterV1AutoLabelDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelDSCProfile(ctx, *req)
		return respClusterV1AutoLabelDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelDSCProfile")(f)
}

// AutoLabelDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelDistributedServiceCard(ctx context.Context, in api.Label) (DistributedServiceCard, error) {
	resp, err := e.AutoLabelDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCard{}, err
	}
	return *resp.(*DistributedServiceCard), nil
}

// MakeClusterV1AutoLabelDistributedServiceCardEndpoint creates  AutoLabelDistributedServiceCard endpoints for the service
func MakeClusterV1AutoLabelDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelDistributedServiceCard(ctx, *req)
		return respClusterV1AutoLabelDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelDistributedServiceCard")(f)
}

// AutoLabelHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelHost(ctx context.Context, in api.Label) (Host, error) {
	resp, err := e.AutoLabelHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoLabelHostEndpoint creates  AutoLabelHost endpoints for the service
func MakeClusterV1AutoLabelHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelHost(ctx, *req)
		return respClusterV1AutoLabelHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelHost")(f)
}

// AutoLabelLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelLicense(ctx context.Context, in api.Label) (License, error) {
	resp, err := e.AutoLabelLicenseEndpoint(ctx, in)
	if err != nil {
		return License{}, err
	}
	return *resp.(*License), nil
}

// MakeClusterV1AutoLabelLicenseEndpoint creates  AutoLabelLicense endpoints for the service
func MakeClusterV1AutoLabelLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelLicense(ctx, *req)
		return respClusterV1AutoLabelLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelLicense")(f)
}

// AutoLabelNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelNode(ctx context.Context, in api.Label) (Node, error) {
	resp, err := e.AutoLabelNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoLabelNodeEndpoint creates  AutoLabelNode endpoints for the service
func MakeClusterV1AutoLabelNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelNode(ctx, *req)
		return respClusterV1AutoLabelNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelNode")(f)
}

// AutoLabelSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelSnapshotRestore(ctx context.Context, in api.Label) (SnapshotRestore, error) {
	resp, err := e.AutoLabelSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1AutoLabelSnapshotRestoreEndpoint creates  AutoLabelSnapshotRestore endpoints for the service
func MakeClusterV1AutoLabelSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelSnapshotRestore(ctx, *req)
		return respClusterV1AutoLabelSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelSnapshotRestore")(f)
}

// AutoLabelTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelTenant(ctx context.Context, in api.Label) (Tenant, error) {
	resp, err := e.AutoLabelTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoLabelTenantEndpoint creates  AutoLabelTenant endpoints for the service
func MakeClusterV1AutoLabelTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelTenant(ctx, *req)
		return respClusterV1AutoLabelTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelTenant")(f)
}

// AutoLabelVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoLabelVersion(ctx context.Context, in api.Label) (Version, error) {
	resp, err := e.AutoLabelVersionEndpoint(ctx, in)
	if err != nil {
		return Version{}, err
	}
	return *resp.(*Version), nil
}

// MakeClusterV1AutoLabelVersionEndpoint creates  AutoLabelVersion endpoints for the service
func MakeClusterV1AutoLabelVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelVersion(ctx, *req)
		return respClusterV1AutoLabelVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoLabelVersion")(f)
}

// AutoListCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return ClusterList{}, err
	}
	return *resp.(*ClusterList), nil
}

// MakeClusterV1AutoListClusterEndpoint creates  AutoListCluster endpoints for the service
func MakeClusterV1AutoListClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCluster(ctx, *req)
		return respClusterV1AutoListCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListCluster")(f)
}

// AutoListConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListConfigurationSnapshot(ctx context.Context, in api.ListWatchOptions) (ConfigurationSnapshotList, error) {
	resp, err := e.AutoListConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshotList{}, err
	}
	return *resp.(*ConfigurationSnapshotList), nil
}

// MakeClusterV1AutoListConfigurationSnapshotEndpoint creates  AutoListConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoListConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoListConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListConfigurationSnapshot")(f)
}

// AutoListCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListCredentials(ctx context.Context, in api.ListWatchOptions) (CredentialsList, error) {
	resp, err := e.AutoListCredentialsEndpoint(ctx, in)
	if err != nil {
		return CredentialsList{}, err
	}
	return *resp.(*CredentialsList), nil
}

// MakeClusterV1AutoListCredentialsEndpoint creates  AutoListCredentials endpoints for the service
func MakeClusterV1AutoListCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCredentials(ctx, *req)
		return respClusterV1AutoListCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListCredentials")(f)
}

// AutoListDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListDSCProfile(ctx context.Context, in api.ListWatchOptions) (DSCProfileList, error) {
	resp, err := e.AutoListDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfileList{}, err
	}
	return *resp.(*DSCProfileList), nil
}

// MakeClusterV1AutoListDSCProfileEndpoint creates  AutoListDSCProfile endpoints for the service
func MakeClusterV1AutoListDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListDSCProfile(ctx, *req)
		return respClusterV1AutoListDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListDSCProfile")(f)
}

// AutoListDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListDistributedServiceCard(ctx context.Context, in api.ListWatchOptions) (DistributedServiceCardList, error) {
	resp, err := e.AutoListDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCardList{}, err
	}
	return *resp.(*DistributedServiceCardList), nil
}

// MakeClusterV1AutoListDistributedServiceCardEndpoint creates  AutoListDistributedServiceCard endpoints for the service
func MakeClusterV1AutoListDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListDistributedServiceCard(ctx, *req)
		return respClusterV1AutoListDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListDistributedServiceCard")(f)
}

// AutoListHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListHost(ctx context.Context, in api.ListWatchOptions) (HostList, error) {
	resp, err := e.AutoListHostEndpoint(ctx, in)
	if err != nil {
		return HostList{}, err
	}
	return *resp.(*HostList), nil
}

// MakeClusterV1AutoListHostEndpoint creates  AutoListHost endpoints for the service
func MakeClusterV1AutoListHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListHost(ctx, *req)
		return respClusterV1AutoListHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListHost")(f)
}

// AutoListLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListLicense(ctx context.Context, in api.ListWatchOptions) (LicenseList, error) {
	resp, err := e.AutoListLicenseEndpoint(ctx, in)
	if err != nil {
		return LicenseList{}, err
	}
	return *resp.(*LicenseList), nil
}

// MakeClusterV1AutoListLicenseEndpoint creates  AutoListLicense endpoints for the service
func MakeClusterV1AutoListLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListLicense(ctx, *req)
		return respClusterV1AutoListLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListLicense")(f)
}

// AutoListNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListNode(ctx context.Context, in api.ListWatchOptions) (NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return NodeList{}, err
	}
	return *resp.(*NodeList), nil
}

// MakeClusterV1AutoListNodeEndpoint creates  AutoListNode endpoints for the service
func MakeClusterV1AutoListNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNode(ctx, *req)
		return respClusterV1AutoListNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListNode")(f)
}

// AutoListSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListSnapshotRestore(ctx context.Context, in api.ListWatchOptions) (SnapshotRestoreList, error) {
	resp, err := e.AutoListSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestoreList{}, err
	}
	return *resp.(*SnapshotRestoreList), nil
}

// MakeClusterV1AutoListSnapshotRestoreEndpoint creates  AutoListSnapshotRestore endpoints for the service
func MakeClusterV1AutoListSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSnapshotRestore(ctx, *req)
		return respClusterV1AutoListSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListSnapshotRestore")(f)
}

// AutoListTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListTenant(ctx context.Context, in api.ListWatchOptions) (TenantList, error) {
	resp, err := e.AutoListTenantEndpoint(ctx, in)
	if err != nil {
		return TenantList{}, err
	}
	return *resp.(*TenantList), nil
}

// MakeClusterV1AutoListTenantEndpoint creates  AutoListTenant endpoints for the service
func MakeClusterV1AutoListTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTenant(ctx, *req)
		return respClusterV1AutoListTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListTenant")(f)
}

// AutoListVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoListVersion(ctx context.Context, in api.ListWatchOptions) (VersionList, error) {
	resp, err := e.AutoListVersionEndpoint(ctx, in)
	if err != nil {
		return VersionList{}, err
	}
	return *resp.(*VersionList), nil
}

// MakeClusterV1AutoListVersionEndpoint creates  AutoListVersion endpoints for the service
func MakeClusterV1AutoListVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListVersion(ctx, *req)
		return respClusterV1AutoListVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoListVersion")(f)
}

// AutoUpdateCluster implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1AutoUpdateClusterEndpoint creates  AutoUpdateCluster endpoints for the service
func MakeClusterV1AutoUpdateClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoUpdateCluster(ctx, *req)
		return respClusterV1AutoUpdateCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateCluster")(f)
}

// AutoUpdateConfigurationSnapshot implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (ConfigurationSnapshot, error) {
	resp, err := e.AutoUpdateConfigurationSnapshotEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1AutoUpdateConfigurationSnapshotEndpoint creates  AutoUpdateConfigurationSnapshot endpoints for the service
func MakeClusterV1AutoUpdateConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ConfigurationSnapshot)
		v, err := s.AutoUpdateConfigurationSnapshot(ctx, *req)
		return respClusterV1AutoUpdateConfigurationSnapshot{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateConfigurationSnapshot")(f)
}

// AutoUpdateCredentials implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateCredentials(ctx context.Context, in Credentials) (Credentials, error) {
	resp, err := e.AutoUpdateCredentialsEndpoint(ctx, in)
	if err != nil {
		return Credentials{}, err
	}
	return *resp.(*Credentials), nil
}

// MakeClusterV1AutoUpdateCredentialsEndpoint creates  AutoUpdateCredentials endpoints for the service
func MakeClusterV1AutoUpdateCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Credentials)
		v, err := s.AutoUpdateCredentials(ctx, *req)
		return respClusterV1AutoUpdateCredentials{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateCredentials")(f)
}

// AutoUpdateDSCProfile implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateDSCProfile(ctx context.Context, in DSCProfile) (DSCProfile, error) {
	resp, err := e.AutoUpdateDSCProfileEndpoint(ctx, in)
	if err != nil {
		return DSCProfile{}, err
	}
	return *resp.(*DSCProfile), nil
}

// MakeClusterV1AutoUpdateDSCProfileEndpoint creates  AutoUpdateDSCProfile endpoints for the service
func MakeClusterV1AutoUpdateDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DSCProfile)
		v, err := s.AutoUpdateDSCProfile(ctx, *req)
		return respClusterV1AutoUpdateDSCProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateDSCProfile")(f)
}

// AutoUpdateDistributedServiceCard implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (DistributedServiceCard, error) {
	resp, err := e.AutoUpdateDistributedServiceCardEndpoint(ctx, in)
	if err != nil {
		return DistributedServiceCard{}, err
	}
	return *resp.(*DistributedServiceCard), nil
}

// MakeClusterV1AutoUpdateDistributedServiceCardEndpoint creates  AutoUpdateDistributedServiceCard endpoints for the service
func MakeClusterV1AutoUpdateDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DistributedServiceCard)
		v, err := s.AutoUpdateDistributedServiceCard(ctx, *req)
		return respClusterV1AutoUpdateDistributedServiceCard{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateDistributedServiceCard")(f)
}

// AutoUpdateHost implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateHost(ctx context.Context, in Host) (Host, error) {
	resp, err := e.AutoUpdateHostEndpoint(ctx, in)
	if err != nil {
		return Host{}, err
	}
	return *resp.(*Host), nil
}

// MakeClusterV1AutoUpdateHostEndpoint creates  AutoUpdateHost endpoints for the service
func MakeClusterV1AutoUpdateHostEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Host)
		v, err := s.AutoUpdateHost(ctx, *req)
		return respClusterV1AutoUpdateHost{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateHost")(f)
}

// AutoUpdateLicense implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateLicense(ctx context.Context, in License) (License, error) {
	resp, err := e.AutoUpdateLicenseEndpoint(ctx, in)
	if err != nil {
		return License{}, err
	}
	return *resp.(*License), nil
}

// MakeClusterV1AutoUpdateLicenseEndpoint creates  AutoUpdateLicense endpoints for the service
func MakeClusterV1AutoUpdateLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*License)
		v, err := s.AutoUpdateLicense(ctx, *req)
		return respClusterV1AutoUpdateLicense{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateLicense")(f)
}

// AutoUpdateNode implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeClusterV1AutoUpdateNodeEndpoint creates  AutoUpdateNode endpoints for the service
func MakeClusterV1AutoUpdateNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoUpdateNode(ctx, *req)
		return respClusterV1AutoUpdateNode{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateNode")(f)
}

// AutoUpdateSnapshotRestore implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateSnapshotRestore(ctx context.Context, in SnapshotRestore) (SnapshotRestore, error) {
	resp, err := e.AutoUpdateSnapshotRestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1AutoUpdateSnapshotRestoreEndpoint creates  AutoUpdateSnapshotRestore endpoints for the service
func MakeClusterV1AutoUpdateSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SnapshotRestore)
		v, err := s.AutoUpdateSnapshotRestore(ctx, *req)
		return respClusterV1AutoUpdateSnapshotRestore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateSnapshotRestore")(f)
}

// AutoUpdateTenant implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateTenant(ctx context.Context, in Tenant) (Tenant, error) {
	resp, err := e.AutoUpdateTenantEndpoint(ctx, in)
	if err != nil {
		return Tenant{}, err
	}
	return *resp.(*Tenant), nil
}

// MakeClusterV1AutoUpdateTenantEndpoint creates  AutoUpdateTenant endpoints for the service
func MakeClusterV1AutoUpdateTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Tenant)
		v, err := s.AutoUpdateTenant(ctx, *req)
		return respClusterV1AutoUpdateTenant{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateTenant")(f)
}

// AutoUpdateVersion implementation on server Endpoint
func (e EndpointsClusterV1Server) AutoUpdateVersion(ctx context.Context, in Version) (Version, error) {
	resp, err := e.AutoUpdateVersionEndpoint(ctx, in)
	if err != nil {
		return Version{}, err
	}
	return *resp.(*Version), nil
}

// MakeClusterV1AutoUpdateVersionEndpoint creates  AutoUpdateVersion endpoints for the service
func MakeClusterV1AutoUpdateVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Version)
		v, err := s.AutoUpdateVersion(ctx, *req)
		return respClusterV1AutoUpdateVersion{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:AutoUpdateVersion")(f)
}

// Restore implementation on server Endpoint
func (e EndpointsClusterV1Server) Restore(ctx context.Context, in SnapshotRestore) (SnapshotRestore, error) {
	resp, err := e.RestoreEndpoint(ctx, in)
	if err != nil {
		return SnapshotRestore{}, err
	}
	return *resp.(*SnapshotRestore), nil
}

// MakeClusterV1RestoreEndpoint creates  Restore endpoints for the service
func MakeClusterV1RestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SnapshotRestore)
		v, err := s.Restore(ctx, *req)
		return respClusterV1Restore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:Restore")(f)
}

// Save implementation on server Endpoint
func (e EndpointsClusterV1Server) Save(ctx context.Context, in ConfigurationSnapshotRequest) (ConfigurationSnapshot, error) {
	resp, err := e.SaveEndpoint(ctx, in)
	if err != nil {
		return ConfigurationSnapshot{}, err
	}
	return *resp.(*ConfigurationSnapshot), nil
}

// MakeClusterV1SaveEndpoint creates  Save endpoints for the service
func MakeClusterV1SaveEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ConfigurationSnapshotRequest)
		v, err := s.Save(ctx, *req)
		return respClusterV1Save{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:Save")(f)
}

// UpdateTLSConfig implementation on server Endpoint
func (e EndpointsClusterV1Server) UpdateTLSConfig(ctx context.Context, in UpdateTLSConfigRequest) (Cluster, error) {
	resp, err := e.UpdateTLSConfigEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeClusterV1UpdateTLSConfigEndpoint creates  UpdateTLSConfig endpoints for the service
func MakeClusterV1UpdateTLSConfigEndpoint(s ServiceClusterV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*UpdateTLSConfigRequest)
		v, err := s.UpdateTLSConfig(ctx, *req)
		return respClusterV1UpdateTLSConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ClusterV1:UpdateTLSConfig")(f)
}

func (e EndpointsClusterV1Server) AutoWatchSvcClusterV1(in *api.AggWatchOptions, stream ClusterV1_AutoWatchSvcClusterV1Server) error {
	return e.svcWatchHandlerClusterV1(in, stream)
}

// MakeAutoWatchSvcClusterV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcClusterV1Endpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchSvcClusterV1Server)
		return s.AutoWatchSvcClusterV1(options, wstream)
	}
}

// AutoWatchCluster is the watch handler for Cluster on the server side.
func (e EndpointsClusterV1Server) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) error {
	return e.watchHandlerCluster(in, stream)
}

// MakeAutoWatchClusterEndpoint creates the Watch endpoint
func MakeAutoWatchClusterEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchClusterServer)
		return s.AutoWatchCluster(options, wstream)
	}
}

// AutoWatchNode is the watch handler for Node on the server side.
func (e EndpointsClusterV1Server) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) error {
	return e.watchHandlerNode(in, stream)
}

// MakeAutoWatchNodeEndpoint creates the Watch endpoint
func MakeAutoWatchNodeEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchNodeServer)
		return s.AutoWatchNode(options, wstream)
	}
}

// AutoWatchHost is the watch handler for Host on the server side.
func (e EndpointsClusterV1Server) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) error {
	return e.watchHandlerHost(in, stream)
}

// MakeAutoWatchHostEndpoint creates the Watch endpoint
func MakeAutoWatchHostEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchHostServer)
		return s.AutoWatchHost(options, wstream)
	}
}

// AutoWatchDistributedServiceCard is the watch handler for DistributedServiceCard on the server side.
func (e EndpointsClusterV1Server) AutoWatchDistributedServiceCard(in *api.ListWatchOptions, stream ClusterV1_AutoWatchDistributedServiceCardServer) error {
	return e.watchHandlerDistributedServiceCard(in, stream)
}

// MakeAutoWatchDistributedServiceCardEndpoint creates the Watch endpoint
func MakeAutoWatchDistributedServiceCardEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchDistributedServiceCardServer)
		return s.AutoWatchDistributedServiceCard(options, wstream)
	}
}

// AutoWatchTenant is the watch handler for Tenant on the server side.
func (e EndpointsClusterV1Server) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) error {
	return e.watchHandlerTenant(in, stream)
}

// MakeAutoWatchTenantEndpoint creates the Watch endpoint
func MakeAutoWatchTenantEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchTenantServer)
		return s.AutoWatchTenant(options, wstream)
	}
}

// AutoWatchVersion is the watch handler for Version on the server side.
func (e EndpointsClusterV1Server) AutoWatchVersion(in *api.ListWatchOptions, stream ClusterV1_AutoWatchVersionServer) error {
	return e.watchHandlerVersion(in, stream)
}

// MakeAutoWatchVersionEndpoint creates the Watch endpoint
func MakeAutoWatchVersionEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchVersionServer)
		return s.AutoWatchVersion(options, wstream)
	}
}

// AutoWatchConfigurationSnapshot is the watch handler for ConfigurationSnapshot on the server side.
func (e EndpointsClusterV1Server) AutoWatchConfigurationSnapshot(in *api.ListWatchOptions, stream ClusterV1_AutoWatchConfigurationSnapshotServer) error {
	return e.watchHandlerConfigurationSnapshot(in, stream)
}

// MakeAutoWatchConfigurationSnapshotEndpoint creates the Watch endpoint
func MakeAutoWatchConfigurationSnapshotEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchConfigurationSnapshotServer)
		return s.AutoWatchConfigurationSnapshot(options, wstream)
	}
}

// AutoWatchSnapshotRestore is the watch handler for SnapshotRestore on the server side.
func (e EndpointsClusterV1Server) AutoWatchSnapshotRestore(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSnapshotRestoreServer) error {
	return e.watchHandlerSnapshotRestore(in, stream)
}

// MakeAutoWatchSnapshotRestoreEndpoint creates the Watch endpoint
func MakeAutoWatchSnapshotRestoreEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchSnapshotRestoreServer)
		return s.AutoWatchSnapshotRestore(options, wstream)
	}
}

// AutoWatchLicense is the watch handler for License on the server side.
func (e EndpointsClusterV1Server) AutoWatchLicense(in *api.ListWatchOptions, stream ClusterV1_AutoWatchLicenseServer) error {
	return e.watchHandlerLicense(in, stream)
}

// MakeAutoWatchLicenseEndpoint creates the Watch endpoint
func MakeAutoWatchLicenseEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchLicenseServer)
		return s.AutoWatchLicense(options, wstream)
	}
}

// AutoWatchDSCProfile is the watch handler for DSCProfile on the server side.
func (e EndpointsClusterV1Server) AutoWatchDSCProfile(in *api.ListWatchOptions, stream ClusterV1_AutoWatchDSCProfileServer) error {
	return e.watchHandlerDSCProfile(in, stream)
}

// MakeAutoWatchDSCProfileEndpoint creates the Watch endpoint
func MakeAutoWatchDSCProfileEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchDSCProfileServer)
		return s.AutoWatchDSCProfile(options, wstream)
	}
}

// AutoWatchCredentials is the watch handler for Credentials on the server side.
func (e EndpointsClusterV1Server) AutoWatchCredentials(in *api.ListWatchOptions, stream ClusterV1_AutoWatchCredentialsServer) error {
	return e.watchHandlerCredentials(in, stream)
}

// MakeAutoWatchCredentialsEndpoint creates the Watch endpoint
func MakeAutoWatchCredentialsEndpoint(s ServiceClusterV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ClusterV1_AutoWatchCredentialsServer)
		return s.AutoWatchCredentials(options, wstream)
	}
}

// MakeClusterV1ServerEndpoints creates server endpoints
func MakeClusterV1ServerEndpoints(s ServiceClusterV1Server, logger log.Logger) EndpointsClusterV1Server {
	return EndpointsClusterV1Server{
		svcWatchHandlerClusterV1: MakeAutoWatchSvcClusterV1Endpoint(s, logger),

		AuthBootstrapCompleteEndpoint:            MakeClusterV1AuthBootstrapCompleteEndpoint(s, logger),
		AutoAddClusterEndpoint:                   MakeClusterV1AutoAddClusterEndpoint(s, logger),
		AutoAddConfigurationSnapshotEndpoint:     MakeClusterV1AutoAddConfigurationSnapshotEndpoint(s, logger),
		AutoAddCredentialsEndpoint:               MakeClusterV1AutoAddCredentialsEndpoint(s, logger),
		AutoAddDSCProfileEndpoint:                MakeClusterV1AutoAddDSCProfileEndpoint(s, logger),
		AutoAddDistributedServiceCardEndpoint:    MakeClusterV1AutoAddDistributedServiceCardEndpoint(s, logger),
		AutoAddHostEndpoint:                      MakeClusterV1AutoAddHostEndpoint(s, logger),
		AutoAddLicenseEndpoint:                   MakeClusterV1AutoAddLicenseEndpoint(s, logger),
		AutoAddNodeEndpoint:                      MakeClusterV1AutoAddNodeEndpoint(s, logger),
		AutoAddSnapshotRestoreEndpoint:           MakeClusterV1AutoAddSnapshotRestoreEndpoint(s, logger),
		AutoAddTenantEndpoint:                    MakeClusterV1AutoAddTenantEndpoint(s, logger),
		AutoAddVersionEndpoint:                   MakeClusterV1AutoAddVersionEndpoint(s, logger),
		AutoDeleteClusterEndpoint:                MakeClusterV1AutoDeleteClusterEndpoint(s, logger),
		AutoDeleteConfigurationSnapshotEndpoint:  MakeClusterV1AutoDeleteConfigurationSnapshotEndpoint(s, logger),
		AutoDeleteCredentialsEndpoint:            MakeClusterV1AutoDeleteCredentialsEndpoint(s, logger),
		AutoDeleteDSCProfileEndpoint:             MakeClusterV1AutoDeleteDSCProfileEndpoint(s, logger),
		AutoDeleteDistributedServiceCardEndpoint: MakeClusterV1AutoDeleteDistributedServiceCardEndpoint(s, logger),
		AutoDeleteHostEndpoint:                   MakeClusterV1AutoDeleteHostEndpoint(s, logger),
		AutoDeleteLicenseEndpoint:                MakeClusterV1AutoDeleteLicenseEndpoint(s, logger),
		AutoDeleteNodeEndpoint:                   MakeClusterV1AutoDeleteNodeEndpoint(s, logger),
		AutoDeleteSnapshotRestoreEndpoint:        MakeClusterV1AutoDeleteSnapshotRestoreEndpoint(s, logger),
		AutoDeleteTenantEndpoint:                 MakeClusterV1AutoDeleteTenantEndpoint(s, logger),
		AutoDeleteVersionEndpoint:                MakeClusterV1AutoDeleteVersionEndpoint(s, logger),
		AutoGetClusterEndpoint:                   MakeClusterV1AutoGetClusterEndpoint(s, logger),
		AutoGetConfigurationSnapshotEndpoint:     MakeClusterV1AutoGetConfigurationSnapshotEndpoint(s, logger),
		AutoGetCredentialsEndpoint:               MakeClusterV1AutoGetCredentialsEndpoint(s, logger),
		AutoGetDSCProfileEndpoint:                MakeClusterV1AutoGetDSCProfileEndpoint(s, logger),
		AutoGetDistributedServiceCardEndpoint:    MakeClusterV1AutoGetDistributedServiceCardEndpoint(s, logger),
		AutoGetHostEndpoint:                      MakeClusterV1AutoGetHostEndpoint(s, logger),
		AutoGetLicenseEndpoint:                   MakeClusterV1AutoGetLicenseEndpoint(s, logger),
		AutoGetNodeEndpoint:                      MakeClusterV1AutoGetNodeEndpoint(s, logger),
		AutoGetSnapshotRestoreEndpoint:           MakeClusterV1AutoGetSnapshotRestoreEndpoint(s, logger),
		AutoGetTenantEndpoint:                    MakeClusterV1AutoGetTenantEndpoint(s, logger),
		AutoGetVersionEndpoint:                   MakeClusterV1AutoGetVersionEndpoint(s, logger),
		AutoLabelClusterEndpoint:                 MakeClusterV1AutoLabelClusterEndpoint(s, logger),
		AutoLabelConfigurationSnapshotEndpoint:   MakeClusterV1AutoLabelConfigurationSnapshotEndpoint(s, logger),
		AutoLabelCredentialsEndpoint:             MakeClusterV1AutoLabelCredentialsEndpoint(s, logger),
		AutoLabelDSCProfileEndpoint:              MakeClusterV1AutoLabelDSCProfileEndpoint(s, logger),
		AutoLabelDistributedServiceCardEndpoint:  MakeClusterV1AutoLabelDistributedServiceCardEndpoint(s, logger),
		AutoLabelHostEndpoint:                    MakeClusterV1AutoLabelHostEndpoint(s, logger),
		AutoLabelLicenseEndpoint:                 MakeClusterV1AutoLabelLicenseEndpoint(s, logger),
		AutoLabelNodeEndpoint:                    MakeClusterV1AutoLabelNodeEndpoint(s, logger),
		AutoLabelSnapshotRestoreEndpoint:         MakeClusterV1AutoLabelSnapshotRestoreEndpoint(s, logger),
		AutoLabelTenantEndpoint:                  MakeClusterV1AutoLabelTenantEndpoint(s, logger),
		AutoLabelVersionEndpoint:                 MakeClusterV1AutoLabelVersionEndpoint(s, logger),
		AutoListClusterEndpoint:                  MakeClusterV1AutoListClusterEndpoint(s, logger),
		AutoListConfigurationSnapshotEndpoint:    MakeClusterV1AutoListConfigurationSnapshotEndpoint(s, logger),
		AutoListCredentialsEndpoint:              MakeClusterV1AutoListCredentialsEndpoint(s, logger),
		AutoListDSCProfileEndpoint:               MakeClusterV1AutoListDSCProfileEndpoint(s, logger),
		AutoListDistributedServiceCardEndpoint:   MakeClusterV1AutoListDistributedServiceCardEndpoint(s, logger),
		AutoListHostEndpoint:                     MakeClusterV1AutoListHostEndpoint(s, logger),
		AutoListLicenseEndpoint:                  MakeClusterV1AutoListLicenseEndpoint(s, logger),
		AutoListNodeEndpoint:                     MakeClusterV1AutoListNodeEndpoint(s, logger),
		AutoListSnapshotRestoreEndpoint:          MakeClusterV1AutoListSnapshotRestoreEndpoint(s, logger),
		AutoListTenantEndpoint:                   MakeClusterV1AutoListTenantEndpoint(s, logger),
		AutoListVersionEndpoint:                  MakeClusterV1AutoListVersionEndpoint(s, logger),
		AutoUpdateClusterEndpoint:                MakeClusterV1AutoUpdateClusterEndpoint(s, logger),
		AutoUpdateConfigurationSnapshotEndpoint:  MakeClusterV1AutoUpdateConfigurationSnapshotEndpoint(s, logger),
		AutoUpdateCredentialsEndpoint:            MakeClusterV1AutoUpdateCredentialsEndpoint(s, logger),
		AutoUpdateDSCProfileEndpoint:             MakeClusterV1AutoUpdateDSCProfileEndpoint(s, logger),
		AutoUpdateDistributedServiceCardEndpoint: MakeClusterV1AutoUpdateDistributedServiceCardEndpoint(s, logger),
		AutoUpdateHostEndpoint:                   MakeClusterV1AutoUpdateHostEndpoint(s, logger),
		AutoUpdateLicenseEndpoint:                MakeClusterV1AutoUpdateLicenseEndpoint(s, logger),
		AutoUpdateNodeEndpoint:                   MakeClusterV1AutoUpdateNodeEndpoint(s, logger),
		AutoUpdateSnapshotRestoreEndpoint:        MakeClusterV1AutoUpdateSnapshotRestoreEndpoint(s, logger),
		AutoUpdateTenantEndpoint:                 MakeClusterV1AutoUpdateTenantEndpoint(s, logger),
		AutoUpdateVersionEndpoint:                MakeClusterV1AutoUpdateVersionEndpoint(s, logger),
		RestoreEndpoint:                          MakeClusterV1RestoreEndpoint(s, logger),
		SaveEndpoint:                             MakeClusterV1SaveEndpoint(s, logger),
		UpdateTLSConfigEndpoint:                  MakeClusterV1UpdateTLSConfigEndpoint(s, logger),

		watchHandlerCluster:                MakeAutoWatchClusterEndpoint(s, logger),
		watchHandlerNode:                   MakeAutoWatchNodeEndpoint(s, logger),
		watchHandlerHost:                   MakeAutoWatchHostEndpoint(s, logger),
		watchHandlerDistributedServiceCard: MakeAutoWatchDistributedServiceCardEndpoint(s, logger),
		watchHandlerTenant:                 MakeAutoWatchTenantEndpoint(s, logger),
		watchHandlerVersion:                MakeAutoWatchVersionEndpoint(s, logger),
		watchHandlerConfigurationSnapshot:  MakeAutoWatchConfigurationSnapshotEndpoint(s, logger),
		watchHandlerSnapshotRestore:        MakeAutoWatchSnapshotRestoreEndpoint(s, logger),
		watchHandlerLicense:                MakeAutoWatchLicenseEndpoint(s, logger),
		watchHandlerDSCProfile:             MakeAutoWatchDSCProfileEndpoint(s, logger),
		watchHandlerCredentials:            MakeAutoWatchCredentialsEndpoint(s, logger),
	}
}

// LoggingClusterV1MiddlewareClient adds middleware for the client
func LoggingClusterV1MiddlewareClient(logger log.Logger) MiddlewareClusterV1Client {
	return func(next ServiceClusterV1Client) ServiceClusterV1Client {
		return loggingClusterV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingClusterV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceClusterV1Client
}

// LoggingClusterV1MiddlewareServer adds middleware for the client
func LoggingClusterV1MiddlewareServer(logger log.Logger) MiddlewareClusterV1Server {
	return func(next ServiceClusterV1Server) ServiceClusterV1Server {
		return loggingClusterV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingClusterV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceClusterV1Server
}

func (m loggingClusterV1MiddlewareClient) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AuthBootstrapComplete", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AuthBootstrapComplete(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddCredentials(ctx context.Context, in *Credentials) (resp *Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddDSCProfile(ctx context.Context, in *DSCProfile) (resp *DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (resp *DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddLicense(ctx context.Context, in *License) (resp *License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddSnapshotRestore(ctx context.Context, in *SnapshotRestore) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoAddVersion(ctx context.Context, in *Version) (resp *Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteCredentials(ctx context.Context, in *Credentials) (resp *Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteDSCProfile(ctx context.Context, in *DSCProfile) (resp *DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (resp *DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteLicense(ctx context.Context, in *License) (resp *License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteSnapshotRestore(ctx context.Context, in *SnapshotRestore) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoDeleteVersion(ctx context.Context, in *Version) (resp *Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetCredentials(ctx context.Context, in *Credentials) (resp *Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetDSCProfile(ctx context.Context, in *DSCProfile) (resp *DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (resp *DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetLicense(ctx context.Context, in *License) (resp *License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetSnapshotRestore(ctx context.Context, in *SnapshotRestore) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoGetVersion(ctx context.Context, in *Version) (resp *Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelCluster(ctx context.Context, in *api.Label) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelConfigurationSnapshot(ctx context.Context, in *api.Label) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelCredentials(ctx context.Context, in *api.Label) (resp *Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelDSCProfile(ctx context.Context, in *api.Label) (resp *DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelDistributedServiceCard(ctx context.Context, in *api.Label) (resp *DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelHost(ctx context.Context, in *api.Label) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelLicense(ctx context.Context, in *api.Label) (resp *License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelNode(ctx context.Context, in *api.Label) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelSnapshotRestore(ctx context.Context, in *api.Label) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelTenant(ctx context.Context, in *api.Label) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoLabelVersion(ctx context.Context, in *api.Label) (resp *Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (resp *ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions) (resp *ConfigurationSnapshotList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListCredentials(ctx context.Context, in *api.ListWatchOptions) (resp *CredentialsList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListDSCProfile(ctx context.Context, in *api.ListWatchOptions) (resp *DSCProfileList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions) (resp *DistributedServiceCardList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListHost(ctx context.Context, in *api.ListWatchOptions) (resp *HostList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListLicense(ctx context.Context, in *api.ListWatchOptions) (resp *LicenseList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (resp *NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListSnapshotRestore(ctx context.Context, in *api.ListWatchOptions) (resp *SnapshotRestoreList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListTenant(ctx context.Context, in *api.ListWatchOptions) (resp *TenantList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoListVersion(ctx context.Context, in *api.ListWatchOptions) (resp *VersionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateCredentials(ctx context.Context, in *Credentials) (resp *Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateDSCProfile(ctx context.Context, in *DSCProfile) (resp *DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (resp *DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateHost(ctx context.Context, in *Host) (resp *Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateLicense(ctx context.Context, in *License) (resp *License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateSnapshotRestore(ctx context.Context, in *SnapshotRestore) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateTenant(ctx context.Context, in *Tenant) (resp *Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoUpdateVersion(ctx context.Context, in *Version) (resp *Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) Restore(ctx context.Context, in *SnapshotRestore) (resp *SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "Restore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Restore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) Save(ctx context.Context, in *ConfigurationSnapshotRequest) (resp *ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "Save", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Save(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "UpdateTLSConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.UpdateTLSConfig(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareClient) AutoWatchSvcClusterV1(ctx context.Context, in *api.AggWatchOptions) (resp ClusterV1_AutoWatchSvcClusterV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchSvcClusterV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcClusterV1(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareClient) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchClusterClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchNodeClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchHostClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchHost", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchDistributedServiceCardClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchDistributedServiceCard", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchTenantClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchTenant", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchVersion(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchVersionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchVersion", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchConfigurationSnapshotClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchConfigurationSnapshot", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchSnapshotRestore(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchSnapshotRestoreClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchSnapshotRestore", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchLicense(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchLicenseClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchLicense", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchDSCProfile(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchDSCProfileClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchDSCProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareClient) AutoWatchCredentials(ctx context.Context, in *api.ListWatchOptions) (resp ClusterV1_AutoWatchCredentialsClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoWatchCredentials", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchCredentials(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareServer) AuthBootstrapComplete(ctx context.Context, in ClusterAuthBootstrapRequest) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AuthBootstrapComplete", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AuthBootstrapComplete(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddCredentials(ctx context.Context, in Credentials) (resp Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddDSCProfile(ctx context.Context, in DSCProfile) (resp DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (resp DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddLicense(ctx context.Context, in License) (resp License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddSnapshotRestore(ctx context.Context, in SnapshotRestore) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoAddVersion(ctx context.Context, in Version) (resp Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoAddVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteCredentials(ctx context.Context, in Credentials) (resp Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteDSCProfile(ctx context.Context, in DSCProfile) (resp DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (resp DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteLicense(ctx context.Context, in License) (resp License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteSnapshotRestore(ctx context.Context, in SnapshotRestore) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoDeleteVersion(ctx context.Context, in Version) (resp Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoDeleteVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetCredentials(ctx context.Context, in Credentials) (resp Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetDSCProfile(ctx context.Context, in DSCProfile) (resp DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (resp DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetLicense(ctx context.Context, in License) (resp License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetSnapshotRestore(ctx context.Context, in SnapshotRestore) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoGetVersion(ctx context.Context, in Version) (resp Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoGetVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelCluster(ctx context.Context, in api.Label) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelConfigurationSnapshot(ctx context.Context, in api.Label) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelCredentials(ctx context.Context, in api.Label) (resp Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelDSCProfile(ctx context.Context, in api.Label) (resp DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelDistributedServiceCard(ctx context.Context, in api.Label) (resp DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelHost(ctx context.Context, in api.Label) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelLicense(ctx context.Context, in api.Label) (resp License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelNode(ctx context.Context, in api.Label) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelSnapshotRestore(ctx context.Context, in api.Label) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelTenant(ctx context.Context, in api.Label) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoLabelVersion(ctx context.Context, in api.Label) (resp Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoLabelVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (resp ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListConfigurationSnapshot(ctx context.Context, in api.ListWatchOptions) (resp ConfigurationSnapshotList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListCredentials(ctx context.Context, in api.ListWatchOptions) (resp CredentialsList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListDSCProfile(ctx context.Context, in api.ListWatchOptions) (resp DSCProfileList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListDistributedServiceCard(ctx context.Context, in api.ListWatchOptions) (resp DistributedServiceCardList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListHost(ctx context.Context, in api.ListWatchOptions) (resp HostList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListLicense(ctx context.Context, in api.ListWatchOptions) (resp LicenseList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListNode(ctx context.Context, in api.ListWatchOptions) (resp NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListSnapshotRestore(ctx context.Context, in api.ListWatchOptions) (resp SnapshotRestoreList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListTenant(ctx context.Context, in api.ListWatchOptions) (resp TenantList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoListVersion(ctx context.Context, in api.ListWatchOptions) (resp VersionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoListVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateConfigurationSnapshot(ctx context.Context, in ConfigurationSnapshot) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateConfigurationSnapshot(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateCredentials(ctx context.Context, in Credentials) (resp Credentials, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCredentials(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateDSCProfile(ctx context.Context, in DSCProfile) (resp DSCProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateDSCProfile(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateDistributedServiceCard(ctx context.Context, in DistributedServiceCard) (resp DistributedServiceCard, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateDistributedServiceCard(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateHost(ctx context.Context, in Host) (resp Host, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateHost(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateLicense(ctx context.Context, in License) (resp License, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateLicense(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateSnapshotRestore(ctx context.Context, in SnapshotRestore) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSnapshotRestore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateTenant(ctx context.Context, in Tenant) (resp Tenant, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTenant(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoUpdateVersion(ctx context.Context, in Version) (resp Version, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "AutoUpdateVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateVersion(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) Restore(ctx context.Context, in SnapshotRestore) (resp SnapshotRestore, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "Restore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Restore(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) Save(ctx context.Context, in ConfigurationSnapshotRequest) (resp ConfigurationSnapshot, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "Save", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Save(ctx, in)
	return
}
func (m loggingClusterV1MiddlewareServer) UpdateTLSConfig(ctx context.Context, in UpdateTLSConfigRequest) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ClusterV1", "method", "UpdateTLSConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.UpdateTLSConfig(ctx, in)
	return
}

func (m loggingClusterV1MiddlewareServer) AutoWatchSvcClusterV1(in *api.AggWatchOptions, stream ClusterV1_AutoWatchSvcClusterV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchSvcClusterV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcClusterV1(in, stream)
	return
}

func (m loggingClusterV1MiddlewareServer) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCluster(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNode(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchHost", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchHost(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchDistributedServiceCard(in *api.ListWatchOptions, stream ClusterV1_AutoWatchDistributedServiceCardServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchDistributedServiceCard", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchDistributedServiceCard(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchTenant", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTenant(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchVersion(in *api.ListWatchOptions, stream ClusterV1_AutoWatchVersionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchVersion", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchVersion(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchConfigurationSnapshot(in *api.ListWatchOptions, stream ClusterV1_AutoWatchConfigurationSnapshotServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchConfigurationSnapshot", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchConfigurationSnapshot(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchSnapshotRestore(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSnapshotRestoreServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchSnapshotRestore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSnapshotRestore(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchLicense(in *api.ListWatchOptions, stream ClusterV1_AutoWatchLicenseServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchLicense", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchLicense(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchDSCProfile(in *api.ListWatchOptions, stream ClusterV1_AutoWatchDSCProfileServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchDSCProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchDSCProfile(in, stream)
	return
}
func (m loggingClusterV1MiddlewareServer) AutoWatchCredentials(in *api.ListWatchOptions, stream ClusterV1_AutoWatchCredentialsServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ClusterV1", "method", "AutoWatchCredentials", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCredentials(in, stream)
	return
}

func (r *EndpointsClusterV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsClusterV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIClusterV1AuthBootstrapCompleteCreateOper(in *ClusterAuthBootstrapRequest) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster/AuthBootstrapComplete")
}

//
func makeURIClusterV1AutoAddClusterCreateOper(in *Cluster) string {
	return ""

}

//
func makeURIClusterV1AutoAddConfigurationSnapshotCreateOper(in *ConfigurationSnapshot) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot")
}

//
func makeURIClusterV1AutoAddCredentialsCreateOper(in *Credentials) string {
	return ""

}

//
func makeURIClusterV1AutoAddDSCProfileCreateOper(in *DSCProfile) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles")
}

//
func makeURIClusterV1AutoAddDistributedServiceCardCreateOper(in *DistributedServiceCard) string {
	return ""

}

//
func makeURIClusterV1AutoAddHostCreateOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts")
}

//
func makeURIClusterV1AutoAddLicenseCreateOper(in *License) string {
	return fmt.Sprint("/configs/cluster/v1", "/licenses")
}

//
func makeURIClusterV1AutoAddNodeCreateOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes")
}

//
func makeURIClusterV1AutoAddSnapshotRestoreCreateOper(in *SnapshotRestore) string {
	return ""

}

//
func makeURIClusterV1AutoAddTenantCreateOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants")
}

//
func makeURIClusterV1AutoAddVersionCreateOper(in *Version) string {
	return ""

}

//
func makeURIClusterV1AutoDeleteClusterDeleteOper(in *Cluster) string {
	return ""

}

//
func makeURIClusterV1AutoDeleteConfigurationSnapshotDeleteOper(in *ConfigurationSnapshot) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot")
}

//
func makeURIClusterV1AutoDeleteCredentialsDeleteOper(in *Credentials) string {
	return ""

}

//
func makeURIClusterV1AutoDeleteDSCProfileDeleteOper(in *DSCProfile) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles/", in.Name)
}

//
func makeURIClusterV1AutoDeleteDistributedServiceCardDeleteOper(in *DistributedServiceCard) string {
	return fmt.Sprint("/configs/cluster/v1", "/distributedservicecards/", in.Name)
}

//
func makeURIClusterV1AutoDeleteHostDeleteOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoDeleteLicenseDeleteOper(in *License) string {
	return ""

}

//
func makeURIClusterV1AutoDeleteNodeDeleteOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoDeleteSnapshotRestoreDeleteOper(in *SnapshotRestore) string {
	return ""

}

//
func makeURIClusterV1AutoDeleteTenantDeleteOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoDeleteVersionDeleteOper(in *Version) string {
	return ""

}

//
func makeURIClusterV1AutoGetClusterGetOper(in *Cluster) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster")
}

//
func makeURIClusterV1AutoGetConfigurationSnapshotGetOper(in *ConfigurationSnapshot) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot")
}

//
func makeURIClusterV1AutoGetCredentialsGetOper(in *Credentials) string {
	return ""

}

//
func makeURIClusterV1AutoGetDSCProfileGetOper(in *DSCProfile) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles/", in.Name)
}

//
func makeURIClusterV1AutoGetDistributedServiceCardGetOper(in *DistributedServiceCard) string {
	return fmt.Sprint("/configs/cluster/v1", "/distributedservicecards/", in.Name)
}

//
func makeURIClusterV1AutoGetHostGetOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoGetLicenseGetOper(in *License) string {
	return fmt.Sprint("/configs/cluster/v1", "/licenses")
}

//
func makeURIClusterV1AutoGetNodeGetOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoGetSnapshotRestoreGetOper(in *SnapshotRestore) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-restore")
}

//
func makeURIClusterV1AutoGetTenantGetOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoGetVersionGetOper(in *Version) string {
	return fmt.Sprint("/configs/cluster/v1", "/version")
}

//
func makeURIClusterV1AutoLabelClusterLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster/label")
}

//
func makeURIClusterV1AutoLabelConfigurationSnapshotLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot/label")
}

//
func makeURIClusterV1AutoLabelCredentialsLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIClusterV1AutoLabelDSCProfileLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles/", in.Name, "/label")
}

//
func makeURIClusterV1AutoLabelDistributedServiceCardLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/distributedservicecards/", in.Name, "/label")
}

//
func makeURIClusterV1AutoLabelHostLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name, "/label")
}

//
func makeURIClusterV1AutoLabelLicenseLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/licenses/label")
}

//
func makeURIClusterV1AutoLabelNodeLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name, "/label")
}

//
func makeURIClusterV1AutoLabelSnapshotRestoreLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIClusterV1AutoLabelTenantLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name, "/label")
}

//
func makeURIClusterV1AutoLabelVersionLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIClusterV1AutoListClusterListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListConfigurationSnapshotListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListCredentialsListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListDSCProfileListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles")
}

//
func makeURIClusterV1AutoListDistributedServiceCardListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/distributedservicecards")
}

//
func makeURIClusterV1AutoListHostListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts")
}

//
func makeURIClusterV1AutoListLicenseListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListNodeListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes")
}

//
func makeURIClusterV1AutoListSnapshotRestoreListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoListTenantListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants")
}

//
func makeURIClusterV1AutoListVersionListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoUpdateClusterUpdateOper(in *Cluster) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster")
}

//
func makeURIClusterV1AutoUpdateConfigurationSnapshotUpdateOper(in *ConfigurationSnapshot) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot")
}

//
func makeURIClusterV1AutoUpdateCredentialsUpdateOper(in *Credentials) string {
	return ""

}

//
func makeURIClusterV1AutoUpdateDSCProfileUpdateOper(in *DSCProfile) string {
	return fmt.Sprint("/configs/cluster/v1", "/dscprofiles/", in.Name)
}

//
func makeURIClusterV1AutoUpdateDistributedServiceCardUpdateOper(in *DistributedServiceCard) string {
	return fmt.Sprint("/configs/cluster/v1", "/distributedservicecards/", in.Name)
}

//
func makeURIClusterV1AutoUpdateHostUpdateOper(in *Host) string {
	return fmt.Sprint("/configs/cluster/v1", "/hosts/", in.Name)
}

//
func makeURIClusterV1AutoUpdateLicenseUpdateOper(in *License) string {
	return fmt.Sprint("/configs/cluster/v1", "/licenses")
}

//
func makeURIClusterV1AutoUpdateNodeUpdateOper(in *Node) string {
	return fmt.Sprint("/configs/cluster/v1", "/nodes/", in.Name)
}

//
func makeURIClusterV1AutoUpdateSnapshotRestoreUpdateOper(in *SnapshotRestore) string {
	return ""

}

//
func makeURIClusterV1AutoUpdateTenantUpdateOper(in *Tenant) string {
	return fmt.Sprint("/configs/cluster/v1", "/tenants/", in.Name)
}

//
func makeURIClusterV1AutoUpdateVersionUpdateOper(in *Version) string {
	return ""

}

//
func makeURIClusterV1AutoWatchClusterWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/cluster")
}

//
func makeURIClusterV1AutoWatchConfigurationSnapshotWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/config-snapshot")
}

//
func makeURIClusterV1AutoWatchCredentialsWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoWatchDSCProfileWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/dscprofiles")
}

//
func makeURIClusterV1AutoWatchDistributedServiceCardWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/distributedservicecards")
}

//
func makeURIClusterV1AutoWatchHostWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/hosts")
}

//
func makeURIClusterV1AutoWatchLicenseWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoWatchNodeWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/nodes")
}

//
func makeURIClusterV1AutoWatchSnapshotRestoreWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoWatchSvcClusterV1WatchOper(in *api.AggWatchOptions) string {
	return ""

}

//
func makeURIClusterV1AutoWatchTenantWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/tenants")
}

//
func makeURIClusterV1AutoWatchVersionWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/cluster/v1", "/watch/version")
}

//
func makeURIClusterV1RestoreCreateOper(in *SnapshotRestore) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-restore/restore")
}

//
func makeURIClusterV1SaveCreateOper(in *ConfigurationSnapshotRequest) string {
	return fmt.Sprint("/configs/cluster/v1", "/config-snapshot/save")
}

//
func makeURIClusterV1UpdateTLSConfigCreateOper(in *UpdateTLSConfigRequest) string {
	return fmt.Sprint("/configs/cluster/v1", "/cluster/UpdateTLSConfig")
}

// AutoAddCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURIClusterV1AutoUpdateClusterUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoLabelCluster label method for Cluster
func (r *EndpointsClusterV1RestClient) AutoLabelCluster(ctx context.Context, in *api.Label) (*Cluster, error) {
	path := makeURIClusterV1AutoLabelClusterLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoGetCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURIClusterV1AutoGetClusterGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoDeleteCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	return nil, errors.New("not allowed")
}

// AutoListCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoListCluster(ctx context.Context, options *api.ListWatchOptions) (*ClusterList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCluster CRUD method for Cluster
func (r *EndpointsClusterV1RestClient) AutoWatchCluster(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchClusterWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgClusterWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsClusterV1RestClient) AuthBootstrapCompleteCluster(ctx context.Context, in *ClusterAuthBootstrapRequest) (*Cluster, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1AuthBootstrapCompleteCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AuthBootstrapComplete(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

func (r *EndpointsClusterV1RestClient) UpdateTLSConfigCluster(ctx context.Context, in *UpdateTLSConfigRequest) (*Cluster, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1UpdateTLSConfigCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1UpdateTLSConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoAddNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoAddNodeCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddNode(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), nil
}

// AutoUpdateNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoUpdateNodeUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoLabelNode label method for Node
func (r *EndpointsClusterV1RestClient) AutoLabelNode(ctx context.Context, in *api.Label) (*Node, error) {
	path := makeURIClusterV1AutoLabelNodeLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoGetNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoGetNodeGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoDeleteNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURIClusterV1AutoDeleteNodeDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoListNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoListNode(ctx context.Context, options *api.ListWatchOptions) (*NodeList, error) {
	path := makeURIClusterV1AutoListNodeListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NodeList), err
}

// AutoWatchNode CRUD method for Node
func (r *EndpointsClusterV1RestClient) AutoWatchNode(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchNodeWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNodeWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoAddHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoAddHostCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddHost(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), nil
}

// AutoUpdateHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoUpdateHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoUpdateHostUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoLabelHost label method for Host
func (r *EndpointsClusterV1RestClient) AutoLabelHost(ctx context.Context, in *api.Label) (*Host, error) {
	path := makeURIClusterV1AutoLabelHostLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoGetHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoGetHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoGetHostGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoDeleteHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoDeleteHost(ctx context.Context, in *Host) (*Host, error) {
	path := makeURIClusterV1AutoDeleteHostDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Host), err
}

// AutoListHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoListHost(ctx context.Context, options *api.ListWatchOptions) (*HostList, error) {
	path := makeURIClusterV1AutoListHostListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListHost(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*HostList), err
}

// AutoWatchHost CRUD method for Host
func (r *EndpointsClusterV1RestClient) AutoWatchHost(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchHostWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgHostWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoAddDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoUpdateDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	path := makeURIClusterV1AutoUpdateDistributedServiceCardUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateDistributedServiceCard(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DistributedServiceCard), err
}

// AutoLabelDistributedServiceCard label method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoLabelDistributedServiceCard(ctx context.Context, in *api.Label) (*DistributedServiceCard, error) {
	path := makeURIClusterV1AutoLabelDistributedServiceCardLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelDistributedServiceCard(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DistributedServiceCard), err
}

// AutoGetDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoGetDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	path := makeURIClusterV1AutoGetDistributedServiceCardGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetDistributedServiceCard(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DistributedServiceCard), err
}

// AutoDeleteDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoDeleteDistributedServiceCard(ctx context.Context, in *DistributedServiceCard) (*DistributedServiceCard, error) {
	path := makeURIClusterV1AutoDeleteDistributedServiceCardDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteDistributedServiceCard(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DistributedServiceCard), err
}

// AutoListDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoListDistributedServiceCard(ctx context.Context, options *api.ListWatchOptions) (*DistributedServiceCardList, error) {
	path := makeURIClusterV1AutoListDistributedServiceCardListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListDistributedServiceCard(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DistributedServiceCardList), err
}

// AutoWatchDistributedServiceCard CRUD method for DistributedServiceCard
func (r *EndpointsClusterV1RestClient) AutoWatchDistributedServiceCard(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchDistributedServiceCardWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgDistributedServiceCardWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoAddTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoAddTenantCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddTenant(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), nil
}

// AutoUpdateTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoUpdateTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoUpdateTenantUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoLabelTenant label method for Tenant
func (r *EndpointsClusterV1RestClient) AutoLabelTenant(ctx context.Context, in *api.Label) (*Tenant, error) {
	path := makeURIClusterV1AutoLabelTenantLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoGetTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoGetTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoGetTenantGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoDeleteTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoDeleteTenant(ctx context.Context, in *Tenant) (*Tenant, error) {
	path := makeURIClusterV1AutoDeleteTenantDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Tenant), err
}

// AutoListTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoListTenant(ctx context.Context, options *api.ListWatchOptions) (*TenantList, error) {
	path := makeURIClusterV1AutoListTenantListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListTenant(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TenantList), err
}

// AutoWatchTenant CRUD method for Tenant
func (r *EndpointsClusterV1RestClient) AutoWatchTenant(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchTenantWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgTenantWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoAddVersion(ctx context.Context, in *Version) (*Version, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoUpdateVersion(ctx context.Context, in *Version) (*Version, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelVersion label method for Version
func (r *EndpointsClusterV1RestClient) AutoLabelVersion(ctx context.Context, in *api.Label) (*Version, error) {
	return nil, errors.New("not allowed")
}

// AutoGetVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoGetVersion(ctx context.Context, in *Version) (*Version, error) {
	path := makeURIClusterV1AutoGetVersionGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetVersion(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Version), err
}

// AutoDeleteVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoDeleteVersion(ctx context.Context, in *Version) (*Version, error) {
	return nil, errors.New("not allowed")
}

// AutoListVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoListVersion(ctx context.Context, options *api.ListWatchOptions) (*VersionList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchVersion CRUD method for Version
func (r *EndpointsClusterV1RestClient) AutoWatchVersion(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchVersionWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgVersionWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoAddConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	path := makeURIClusterV1AutoAddConfigurationSnapshotCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddConfigurationSnapshot(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), nil
}

// AutoUpdateConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoUpdateConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	path := makeURIClusterV1AutoUpdateConfigurationSnapshotUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateConfigurationSnapshot(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), err
}

// AutoLabelConfigurationSnapshot label method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoLabelConfigurationSnapshot(ctx context.Context, in *api.Label) (*ConfigurationSnapshot, error) {
	path := makeURIClusterV1AutoLabelConfigurationSnapshotLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelConfigurationSnapshot(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), err
}

// AutoGetConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoGetConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	path := makeURIClusterV1AutoGetConfigurationSnapshotGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetConfigurationSnapshot(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), err
}

// AutoDeleteConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoDeleteConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	path := makeURIClusterV1AutoDeleteConfigurationSnapshotDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteConfigurationSnapshot(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), err
}

// AutoListConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoListConfigurationSnapshot(ctx context.Context, options *api.ListWatchOptions) (*ConfigurationSnapshotList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchConfigurationSnapshot CRUD method for ConfigurationSnapshot
func (r *EndpointsClusterV1RestClient) AutoWatchConfigurationSnapshot(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchConfigurationSnapshotWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgConfigurationSnapshotWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsClusterV1RestClient) SaveConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshotRequest) (*ConfigurationSnapshot, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1SaveCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1Save(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ConfigurationSnapshot), err
}

// AutoAddSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoAddSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoUpdateSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelSnapshotRestore label method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoLabelSnapshotRestore(ctx context.Context, in *api.Label) (*SnapshotRestore, error) {
	return nil, errors.New("not allowed")
}

// AutoGetSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoGetSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	path := makeURIClusterV1AutoGetSnapshotRestoreGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetSnapshotRestore(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SnapshotRestore), err
}

// AutoDeleteSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoDeleteSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	return nil, errors.New("not allowed")
}

// AutoListSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoListSnapshotRestore(ctx context.Context, options *api.ListWatchOptions) (*SnapshotRestoreList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchSnapshotRestore CRUD method for SnapshotRestore
func (r *EndpointsClusterV1RestClient) AutoWatchSnapshotRestore(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchSnapshotRestoreWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgSnapshotRestoreWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsClusterV1RestClient) RestoreSnapshotRestore(ctx context.Context, in *SnapshotRestore) (*SnapshotRestore, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIClusterV1RestoreCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1Restore(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SnapshotRestore), err
}

// AutoAddLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoAddLicense(ctx context.Context, in *License) (*License, error) {
	path := makeURIClusterV1AutoAddLicenseCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddLicense(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*License), nil
}

// AutoUpdateLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoUpdateLicense(ctx context.Context, in *License) (*License, error) {
	path := makeURIClusterV1AutoUpdateLicenseUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateLicense(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*License), err
}

// AutoLabelLicense label method for License
func (r *EndpointsClusterV1RestClient) AutoLabelLicense(ctx context.Context, in *api.Label) (*License, error) {
	path := makeURIClusterV1AutoLabelLicenseLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelLicense(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*License), err
}

// AutoGetLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoGetLicense(ctx context.Context, in *License) (*License, error) {
	path := makeURIClusterV1AutoGetLicenseGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetLicense(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*License), err
}

// AutoDeleteLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoDeleteLicense(ctx context.Context, in *License) (*License, error) {
	return nil, errors.New("not allowed")
}

// AutoListLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoListLicense(ctx context.Context, options *api.ListWatchOptions) (*LicenseList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchLicense CRUD method for License
func (r *EndpointsClusterV1RestClient) AutoWatchLicense(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchLicenseWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgLicenseWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoAddDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	path := makeURIClusterV1AutoAddDSCProfileCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoAddDSCProfile(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfile), nil
}

// AutoUpdateDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoUpdateDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	path := makeURIClusterV1AutoUpdateDSCProfileUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoUpdateDSCProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfile), err
}

// AutoLabelDSCProfile label method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoLabelDSCProfile(ctx context.Context, in *api.Label) (*DSCProfile, error) {
	path := makeURIClusterV1AutoLabelDSCProfileLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoLabelDSCProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfile), err
}

// AutoGetDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoGetDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	path := makeURIClusterV1AutoGetDSCProfileGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoGetDSCProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfile), err
}

// AutoDeleteDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoDeleteDSCProfile(ctx context.Context, in *DSCProfile) (*DSCProfile, error) {
	path := makeURIClusterV1AutoDeleteDSCProfileDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoDeleteDSCProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfile), err
}

// AutoListDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoListDSCProfile(ctx context.Context, options *api.ListWatchOptions) (*DSCProfileList, error) {
	path := makeURIClusterV1AutoListDSCProfileListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespClusterV1AutoListDSCProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DSCProfileList), err
}

// AutoWatchDSCProfile CRUD method for DSCProfile
func (r *EndpointsClusterV1RestClient) AutoWatchDSCProfile(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchDSCProfileWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgDSCProfileWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoAddCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoUpdateCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelCredentials label method for Credentials
func (r *EndpointsClusterV1RestClient) AutoLabelCredentials(ctx context.Context, in *api.Label) (*Credentials, error) {
	return nil, errors.New("not allowed")
}

// AutoGetCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoGetCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoDeleteCredentials(ctx context.Context, in *Credentials) (*Credentials, error) {
	return nil, errors.New("not allowed")
}

// AutoListCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoListCredentials(ctx context.Context, options *api.ListWatchOptions) (*CredentialsList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCredentials CRUD method for Credentials
func (r *EndpointsClusterV1RestClient) AutoWatchCredentials(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIClusterV1AutoWatchCredentialsWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgCredentialsWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeClusterV1RestClientEndpoints make REST client endpoints
func MakeClusterV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsClusterV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsClusterV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeClusterV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeClusterV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsClusterV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsClusterV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
