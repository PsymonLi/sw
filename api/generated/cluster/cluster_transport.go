// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: cluster.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPCPUInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCPUInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req CPUInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCPUInfo encodes GRPC request
func EncodeGrpcReqCPUInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CPUInfo)
	return req, nil
}

// DecodeGrpcReqCPUInfo decodes GRPC request
func DecodeGrpcReqCPUInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CPUInfo)
	return req, nil
}

// EncodeGrpcRespCPUInfo encodes GRC response
func EncodeGrpcRespCPUInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCPUInfo decodes GRPC response
func DecodeGrpcRespCPUInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCluster(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCluster(_ context.Context, r *http.Request) (interface{}, error) {
	var req Cluster
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCluster encodes GRPC request
func EncodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// DecodeGrpcReqCluster decodes GRPC request
func DecodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// EncodeGrpcRespCluster encodes GRC response
func EncodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCluster decodes GRPC response
func DecodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterAuthBootstrapRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterAuthBootstrapRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterAuthBootstrapRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterAuthBootstrapRequest encodes GRPC request
func EncodeGrpcReqClusterAuthBootstrapRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterAuthBootstrapRequest)
	return req, nil
}

// DecodeGrpcReqClusterAuthBootstrapRequest decodes GRPC request
func DecodeGrpcReqClusterAuthBootstrapRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterAuthBootstrapRequest)
	return req, nil
}

// EncodeGrpcRespClusterAuthBootstrapRequest encodes GRC response
func EncodeGrpcRespClusterAuthBootstrapRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterAuthBootstrapRequest decodes GRPC response
func DecodeGrpcRespClusterAuthBootstrapRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterSpec encodes GRPC request
func EncodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// DecodeGrpcReqClusterSpec decodes GRPC request
func DecodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// EncodeGrpcRespClusterSpec encodes GRC response
func EncodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterSpec decodes GRPC response
func DecodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterStatus encodes GRPC request
func EncodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// DecodeGrpcReqClusterStatus decodes GRPC request
func DecodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// EncodeGrpcRespClusterStatus encodes GRC response
func EncodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterStatus decodes GRPC response
func DecodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDockerInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDockerInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req DockerInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDockerInfo encodes GRPC request
func EncodeGrpcReqDockerInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DockerInfo)
	return req, nil
}

// DecodeGrpcReqDockerInfo decodes GRPC request
func DecodeGrpcReqDockerInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DockerInfo)
	return req, nil
}

// EncodeGrpcRespDockerInfo encodes GRC response
func EncodeGrpcRespDockerInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDockerInfo decodes GRPC response
func DecodeGrpcRespDockerInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHost(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHost(_ context.Context, r *http.Request) (interface{}, error) {
	var req Host
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHost encodes GRPC request
func EncodeGrpcReqHost(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Host)
	return req, nil
}

// DecodeGrpcReqHost decodes GRPC request
func DecodeGrpcReqHost(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Host)
	return req, nil
}

// EncodeGrpcRespHost encodes GRC response
func EncodeGrpcRespHost(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHost decodes GRPC response
func DecodeGrpcRespHost(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHostSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHostSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req HostSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHostSpec encodes GRPC request
func EncodeGrpcReqHostSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostSpec)
	return req, nil
}

// DecodeGrpcReqHostSpec decodes GRPC request
func DecodeGrpcReqHostSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostSpec)
	return req, nil
}

// EncodeGrpcRespHostSpec encodes GRC response
func EncodeGrpcRespHostSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHostSpec decodes GRPC response
func DecodeGrpcRespHostSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHostStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHostStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req HostStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHostStatus encodes GRPC request
func EncodeGrpcReqHostStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostStatus)
	return req, nil
}

// DecodeGrpcReqHostStatus decodes GRPC request
func DecodeGrpcReqHostStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostStatus)
	return req, nil
}

// EncodeGrpcRespHostStatus encodes GRC response
func EncodeGrpcRespHostStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHostStatus decodes GRPC response
func DecodeGrpcRespHostStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPInterfaceInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPInterfaceInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req InterfaceInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqInterfaceInfo encodes GRPC request
func EncodeGrpcReqInterfaceInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*InterfaceInfo)
	return req, nil
}

// DecodeGrpcReqInterfaceInfo decodes GRPC request
func DecodeGrpcReqInterfaceInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*InterfaceInfo)
	return req, nil
}

// EncodeGrpcRespInterfaceInfo encodes GRC response
func EncodeGrpcRespInterfaceInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespInterfaceInfo decodes GRPC response
func DecodeGrpcRespInterfaceInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMemInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMemInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req MemInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMemInfo encodes GRPC request
func EncodeGrpcReqMemInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MemInfo)
	return req, nil
}

// DecodeGrpcReqMemInfo decodes GRPC request
func DecodeGrpcReqMemInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MemInfo)
	return req, nil
}

// EncodeGrpcRespMemInfo encodes GRC response
func EncodeGrpcRespMemInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMemInfo decodes GRPC response
func DecodeGrpcRespMemInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInfo encodes GRPC request
func EncodeGrpcReqNetworkInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInfo)
	return req, nil
}

// DecodeGrpcReqNetworkInfo decodes GRPC request
func DecodeGrpcReqNetworkInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInfo)
	return req, nil
}

// EncodeGrpcRespNetworkInfo encodes GRC response
func EncodeGrpcRespNetworkInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInfo decodes GRPC response
func DecodeGrpcRespNetworkInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNode(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNode(_ context.Context, r *http.Request) (interface{}, error) {
	var req Node
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNode encodes GRPC request
func EncodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// DecodeGrpcReqNode decodes GRPC request
func DecodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// EncodeGrpcRespNode encodes GRC response
func EncodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNode decodes GRPC response
func DecodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeCondition encodes GRPC request
func EncodeGrpcReqNodeCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeCondition)
	return req, nil
}

// DecodeGrpcReqNodeCondition decodes GRPC request
func DecodeGrpcReqNodeCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeCondition)
	return req, nil
}

// EncodeGrpcRespNodeCondition encodes GRC response
func EncodeGrpcRespNodeCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeCondition decodes GRPC response
func DecodeGrpcRespNodeCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeInfo encodes GRPC request
func EncodeGrpcReqNodeInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeInfo)
	return req, nil
}

// DecodeGrpcReqNodeInfo decodes GRPC request
func DecodeGrpcReqNodeInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeInfo)
	return req, nil
}

// EncodeGrpcRespNodeInfo encodes GRC response
func EncodeGrpcRespNodeInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeInfo decodes GRPC response
func DecodeGrpcRespNodeInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeSpec encodes GRPC request
func EncodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// DecodeGrpcReqNodeSpec decodes GRPC request
func DecodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// EncodeGrpcRespNodeSpec encodes GRC response
func EncodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeSpec decodes GRPC response
func DecodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeStatus encodes GRPC request
func EncodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// DecodeGrpcReqNodeStatus decodes GRPC request
func DecodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// EncodeGrpcRespNodeStatus encodes GRC response
func EncodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeStatus decodes GRPC response
func DecodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOsInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOsInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req OsInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOsInfo encodes GRPC request
func EncodeGrpcReqOsInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OsInfo)
	return req, nil
}

// DecodeGrpcReqOsInfo decodes GRPC request
func DecodeGrpcReqOsInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OsInfo)
	return req, nil
}

// EncodeGrpcRespOsInfo encodes GRC response
func EncodeGrpcRespOsInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOsInfo decodes GRPC response
func DecodeGrpcRespOsInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQuorumMemberCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQuorumMemberCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req QuorumMemberCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQuorumMemberCondition encodes GRPC request
func EncodeGrpcReqQuorumMemberCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumMemberCondition)
	return req, nil
}

// DecodeGrpcReqQuorumMemberCondition decodes GRPC request
func DecodeGrpcReqQuorumMemberCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumMemberCondition)
	return req, nil
}

// EncodeGrpcRespQuorumMemberCondition encodes GRC response
func EncodeGrpcRespQuorumMemberCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQuorumMemberCondition decodes GRPC response
func DecodeGrpcRespQuorumMemberCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQuorumMemberStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQuorumMemberStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req QuorumMemberStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQuorumMemberStatus encodes GRPC request
func EncodeGrpcReqQuorumMemberStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumMemberStatus)
	return req, nil
}

// DecodeGrpcReqQuorumMemberStatus decodes GRPC request
func DecodeGrpcReqQuorumMemberStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumMemberStatus)
	return req, nil
}

// EncodeGrpcRespQuorumMemberStatus encodes GRC response
func EncodeGrpcRespQuorumMemberStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQuorumMemberStatus decodes GRPC response
func DecodeGrpcRespQuorumMemberStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQuorumStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQuorumStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req QuorumStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQuorumStatus encodes GRPC request
func EncodeGrpcReqQuorumStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumStatus)
	return req, nil
}

// DecodeGrpcReqQuorumStatus decodes GRPC request
func DecodeGrpcReqQuorumStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuorumStatus)
	return req, nil
}

// EncodeGrpcRespQuorumStatus encodes GRC response
func EncodeGrpcRespQuorumStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQuorumStatus decodes GRPC response
func DecodeGrpcRespQuorumStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICID(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICID(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICID
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICID encodes GRPC request
func EncodeGrpcReqSmartNICID(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICID)
	return req, nil
}

// DecodeGrpcReqSmartNICID decodes GRPC request
func DecodeGrpcReqSmartNICID(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICID)
	return req, nil
}

// EncodeGrpcRespSmartNICID encodes GRC response
func EncodeGrpcRespSmartNICID(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICID decodes GRPC response
func DecodeGrpcRespSmartNICID(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStorageDeviceInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStorageDeviceInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req StorageDeviceInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStorageDeviceInfo encodes GRPC request
func EncodeGrpcReqStorageDeviceInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StorageDeviceInfo)
	return req, nil
}

// DecodeGrpcReqStorageDeviceInfo decodes GRPC request
func DecodeGrpcReqStorageDeviceInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StorageDeviceInfo)
	return req, nil
}

// EncodeGrpcRespStorageDeviceInfo encodes GRC response
func EncodeGrpcRespStorageDeviceInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStorageDeviceInfo decodes GRPC response
func DecodeGrpcRespStorageDeviceInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStorageInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStorageInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req StorageInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStorageInfo encodes GRPC request
func EncodeGrpcReqStorageInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StorageInfo)
	return req, nil
}

// DecodeGrpcReqStorageInfo decodes GRPC request
func DecodeGrpcReqStorageInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StorageInfo)
	return req, nil
}

// EncodeGrpcRespStorageInfo encodes GRC response
func EncodeGrpcRespStorageInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStorageInfo decodes GRPC response
func DecodeGrpcRespStorageInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUpdateTLSConfigRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUpdateTLSConfigRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req UpdateTLSConfigRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUpdateTLSConfigRequest encodes GRPC request
func EncodeGrpcReqUpdateTLSConfigRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UpdateTLSConfigRequest)
	return req, nil
}

// DecodeGrpcReqUpdateTLSConfigRequest decodes GRPC request
func DecodeGrpcReqUpdateTLSConfigRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UpdateTLSConfigRequest)
	return req, nil
}

// EncodeGrpcRespUpdateTLSConfigRequest encodes GRC response
func EncodeGrpcRespUpdateTLSConfigRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUpdateTLSConfigRequest decodes GRPC response
func DecodeGrpcRespUpdateTLSConfigRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVersion(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVersion(_ context.Context, r *http.Request) (interface{}, error) {
	var req Version
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVersion encodes GRPC request
func EncodeGrpcReqVersion(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Version)
	return req, nil
}

// DecodeGrpcReqVersion decodes GRPC request
func DecodeGrpcReqVersion(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Version)
	return req, nil
}

// EncodeGrpcRespVersion encodes GRC response
func EncodeGrpcRespVersion(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVersion decodes GRPC response
func DecodeGrpcRespVersion(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVersionSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVersionSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req VersionSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVersionSpec encodes GRPC request
func EncodeGrpcReqVersionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionSpec)
	return req, nil
}

// DecodeGrpcReqVersionSpec decodes GRPC request
func DecodeGrpcReqVersionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionSpec)
	return req, nil
}

// EncodeGrpcRespVersionSpec encodes GRC response
func EncodeGrpcRespVersionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVersionSpec decodes GRPC response
func DecodeGrpcRespVersionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVersionStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVersionStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req VersionStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVersionStatus encodes GRPC request
func EncodeGrpcReqVersionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionStatus)
	return req, nil
}

// DecodeGrpcReqVersionStatus decodes GRPC request
func DecodeGrpcReqVersionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionStatus)
	return req, nil
}

// EncodeGrpcRespVersionStatus encodes GRC response
func EncodeGrpcRespVersionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVersionStatus decodes GRPC response
func DecodeGrpcRespVersionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
