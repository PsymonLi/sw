// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package clusterGwService is a auto generated package.
Input file: svc_cluster.proto
*/
package clusterGwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	cluster "github.com/pensando/sw/api/generated/cluster"
	grpcclient "github.com/pensando/sw/api/generated/cluster/grpc/client"
	"github.com/pensando/sw/venice/apigw"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sClusterV1GwService struct {
	logger     log.Logger
	defSvcProf apigw.ServiceProfile
	svcProf    map[string]apigw.ServiceProfile
}

type adapterClusterV1 struct {
	conn    *rpckit.RPCClient
	service cluster.ServiceClusterV1Client
	gwSvc   *sClusterV1GwService
	gw      apigw.APIGateway
}

func (a adapterClusterV1) AutoAddCluster(oldctx oldcontext.Context, t *cluster.Cluster, options ...grpc.CallOption) (*cluster.Cluster, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddCluster")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Cluster)
		return a.service.AutoAddCluster(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Cluster), err
}

func (a adapterClusterV1) AutoAddHost(oldctx oldcontext.Context, t *cluster.Host, options ...grpc.CallOption) (*cluster.Host, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddHost")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Host)
		return a.service.AutoAddHost(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Host), err
}

func (a adapterClusterV1) AutoAddNode(oldctx oldcontext.Context, t *cluster.Node, options ...grpc.CallOption) (*cluster.Node, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddNode")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Node)
		return a.service.AutoAddNode(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Node), err
}

func (a adapterClusterV1) AutoAddSmartNIC(oldctx oldcontext.Context, t *cluster.SmartNIC, options ...grpc.CallOption) (*cluster.SmartNIC, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddSmartNIC")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.SmartNIC)
		return a.service.AutoAddSmartNIC(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.SmartNIC), err
}

func (a adapterClusterV1) AutoAddTenant(oldctx oldcontext.Context, t *cluster.Tenant, options ...grpc.CallOption) (*cluster.Tenant, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddTenant")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Tenant)
		return a.service.AutoAddTenant(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Tenant), err
}

func (a adapterClusterV1) AutoDeleteCluster(oldctx oldcontext.Context, t *cluster.Cluster, options ...grpc.CallOption) (*cluster.Cluster, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteCluster")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Cluster)
		return a.service.AutoDeleteCluster(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Cluster), err
}

func (a adapterClusterV1) AutoDeleteHost(oldctx oldcontext.Context, t *cluster.Host, options ...grpc.CallOption) (*cluster.Host, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteHost")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Host)
		return a.service.AutoDeleteHost(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Host), err
}

func (a adapterClusterV1) AutoDeleteNode(oldctx oldcontext.Context, t *cluster.Node, options ...grpc.CallOption) (*cluster.Node, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteNode")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Node)
		return a.service.AutoDeleteNode(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Node), err
}

func (a adapterClusterV1) AutoDeleteSmartNIC(oldctx oldcontext.Context, t *cluster.SmartNIC, options ...grpc.CallOption) (*cluster.SmartNIC, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteSmartNIC")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.SmartNIC)
		return a.service.AutoDeleteSmartNIC(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.SmartNIC), err
}

func (a adapterClusterV1) AutoDeleteTenant(oldctx oldcontext.Context, t *cluster.Tenant, options ...grpc.CallOption) (*cluster.Tenant, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteTenant")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Tenant)
		return a.service.AutoDeleteTenant(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Tenant), err
}

func (a adapterClusterV1) AutoGetCluster(oldctx oldcontext.Context, t *cluster.Cluster, options ...grpc.CallOption) (*cluster.Cluster, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetCluster")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Cluster)
		return a.service.AutoGetCluster(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Cluster), err
}

func (a adapterClusterV1) AutoGetHost(oldctx oldcontext.Context, t *cluster.Host, options ...grpc.CallOption) (*cluster.Host, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetHost")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Host)
		return a.service.AutoGetHost(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Host), err
}

func (a adapterClusterV1) AutoGetNode(oldctx oldcontext.Context, t *cluster.Node, options ...grpc.CallOption) (*cluster.Node, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetNode")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Node)
		return a.service.AutoGetNode(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Node), err
}

func (a adapterClusterV1) AutoGetSmartNIC(oldctx oldcontext.Context, t *cluster.SmartNIC, options ...grpc.CallOption) (*cluster.SmartNIC, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetSmartNIC")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.SmartNIC)
		return a.service.AutoGetSmartNIC(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.SmartNIC), err
}

func (a adapterClusterV1) AutoGetTenant(oldctx oldcontext.Context, t *cluster.Tenant, options ...grpc.CallOption) (*cluster.Tenant, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetTenant")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Tenant)
		return a.service.AutoGetTenant(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Tenant), err
}

func (a adapterClusterV1) AutoListCluster(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*cluster.ClusterList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListCluster")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListCluster(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.ClusterList), err
}

func (a adapterClusterV1) AutoListHost(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*cluster.HostList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListHost")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListHost(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.HostList), err
}

func (a adapterClusterV1) AutoListNode(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*cluster.NodeList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListNode")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListNode(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.NodeList), err
}

func (a adapterClusterV1) AutoListSmartNIC(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*cluster.SmartNICList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListSmartNIC")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListSmartNIC(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.SmartNICList), err
}

func (a adapterClusterV1) AutoListTenant(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*cluster.TenantList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListTenant")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListTenant(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.TenantList), err
}

func (a adapterClusterV1) AutoUpdateCluster(oldctx oldcontext.Context, t *cluster.Cluster, options ...grpc.CallOption) (*cluster.Cluster, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateCluster")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Cluster)
		return a.service.AutoUpdateCluster(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Cluster), err
}

func (a adapterClusterV1) AutoUpdateHost(oldctx oldcontext.Context, t *cluster.Host, options ...grpc.CallOption) (*cluster.Host, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateHost")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Host)
		return a.service.AutoUpdateHost(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Host), err
}

func (a adapterClusterV1) AutoUpdateNode(oldctx oldcontext.Context, t *cluster.Node, options ...grpc.CallOption) (*cluster.Node, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateNode")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Node)
		return a.service.AutoUpdateNode(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Node), err
}

func (a adapterClusterV1) AutoUpdateSmartNIC(oldctx oldcontext.Context, t *cluster.SmartNIC, options ...grpc.CallOption) (*cluster.SmartNIC, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateSmartNIC")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.SmartNIC)
		return a.service.AutoUpdateSmartNIC(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.SmartNIC), err
}

func (a adapterClusterV1) AutoUpdateTenant(oldctx oldcontext.Context, t *cluster.Tenant, options ...grpc.CallOption) (*cluster.Tenant, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateTenant")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*cluster.Tenant)
		return a.service.AutoUpdateTenant(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*cluster.Tenant), err
}

func (a adapterClusterV1) AutoWatchSvcClusterV1(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchSvcClusterV1Client, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchSvcClusterV1(ctx, in)
}

func (a adapterClusterV1) AutoWatchCluster(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchClusterClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchCluster(ctx, in)
}

func (a adapterClusterV1) AutoWatchNode(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchNodeClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchNode(ctx, in)
}

func (a adapterClusterV1) AutoWatchHost(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchHostClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchHost(ctx, in)
}

func (a adapterClusterV1) AutoWatchSmartNIC(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchSmartNICClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchSmartNIC(ctx, in)
}

func (a adapterClusterV1) AutoWatchTenant(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (cluster.ClusterV1_AutoWatchTenantClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchTenant(ctx, in)
}

func (e *sClusterV1GwService) setupSvcProfile() {
	e.defSvcProf = apigwpkg.NewServiceProfile(nil)
	e.defSvcProf.SetDefaults()
	e.svcProf = make(map[string]apigw.ServiceProfile)

	e.svcProf["AutoAddHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoAddNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoAddSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoAddTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteCluster"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoDeleteTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetCluster"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoGetTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoListCluster"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoListHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoListNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoListSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoListTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateCluster"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoUpdateTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoWatchCluster"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoWatchHost"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoWatchNode"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoWatchSmartNIC"] = apigwpkg.NewServiceProfile(e.defSvcProf)
	e.svcProf["AutoWatchTenant"] = apigwpkg.NewServiceProfile(e.defSvcProf)
}

// GetDefaultServiceProfile returns the default fallback service profile for this service
func (e *sClusterV1GwService) GetDefaultServiceProfile() (apigw.ServiceProfile, error) {
	if e.defSvcProf == nil {
		return nil, errors.New("not found")
	}
	return e.defSvcProf, nil
}

// GetServiceProfile returns the service profile for a given method in this service
func (e *sClusterV1GwService) GetServiceProfile(method string) (apigw.ServiceProfile, error) {
	if ret, ok := e.svcProf[method]; ok {
		return ret, nil
	}
	return nil, errors.New("not found")
}

// GetCrudServiceProfile returns the service profile for a auto generated crud operation
func (e *sClusterV1GwService) GetCrudServiceProfile(obj string, oper apiserver.APIOperType) (apigw.ServiceProfile, error) {
	name := apiserver.GetCrudServiceName(obj, oper)
	if name != "" {
		return e.GetServiceProfile(name)
	}
	return nil, errors.New("not found")
}

func (e *sClusterV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()
	e.setupSvcProfile()

	err := registerSwaggerDef(m, logger)
	if err != nil {
		logger.ErrorLog("msg", "failed to register swagger spec", "service", "cluster.ClusterV1", "error", err)
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = cluster.RegisterClusterV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service cluster.ClusterV1")
					m.Handle("/configs/cluster/v1/", http.StripPrefix("/configs/cluster/v1", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "cluster.ClusterV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sClusterV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterClusterV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	} else {
		opts = append(opts, rpckit.WithRemoteServerName("pen-apiserver"))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterClusterV1{conn: client, gw: apigwpkg.MustGetAPIGateway(), gwSvc: e, service: grpcclient.NewClusterV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {

	apigw := apigwpkg.MustGetAPIGateway()

	svcClusterV1 := sClusterV1GwService{}
	apigw.Register("cluster.ClusterV1", "cluster/", &svcClusterV1)
}
