// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_cluster.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// list of V1 event types supported by the cluster service
type EventTypesV1 int32

const (
	// Leader election events
	EventTypesV1_ElectionStarted EventTypesV1 = 0
	//
	EventTypesV1_ElectionCancelled EventTypesV1 = 1
	//
	EventTypesV1_ElectionNotificationFailed EventTypesV1 = 2
	//
	EventTypesV1_ElectionStopped EventTypesV1 = 3
	//
	EventTypesV1_LeaderElected EventTypesV1 = 4
	//
	EventTypesV1_LeaderLost EventTypesV1 = 5
	//
	EventTypesV1_LeaderChanged EventTypesV1 = 6
	// Node events
	EventTypesV1_NodeJoined EventTypesV1 = 7
	//
	EventTypesV1_NodeDisjoined EventTypesV1 = 8
	// NIC events
	EventTypesV1_NICAdmitted EventTypesV1 = 9
)

var EventTypesV1_name = map[int32]string{
	0: "ElectionStarted",
	1: "ElectionCancelled",
	2: "ElectionNotificationFailed",
	3: "ElectionStopped",
	4: "LeaderElected",
	5: "LeaderLost",
	6: "LeaderChanged",
	7: "NodeJoined",
	8: "NodeDisjoined",
	9: "NICAdmitted",
}
var EventTypesV1_value = map[string]int32{
	"ElectionStarted":            0,
	"ElectionCancelled":          1,
	"ElectionNotificationFailed": 2,
	"ElectionStopped":            3,
	"LeaderElected":              4,
	"LeaderLost":                 5,
	"LeaderChanged":              6,
	"NodeJoined":                 7,
	"NodeDisjoined":              8,
	"NICAdmitted":                9,
}

func (x EventTypesV1) String() string {
	return proto.EnumName(EventTypesV1_name, int32(x))
}
func (EventTypesV1) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{0} }

// AutoMsgClusterWatchHelper is a wrapper object for watch events for Cluster objects
type AutoMsgClusterWatchHelper struct {
	Events []*AutoMsgClusterWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgClusterWatchHelper) Reset()         { *m = AutoMsgClusterWatchHelper{} }
func (m *AutoMsgClusterWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgClusterWatchHelper) ProtoMessage()    {}
func (*AutoMsgClusterWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{0}
}

func (m *AutoMsgClusterWatchHelper) GetEvents() []*AutoMsgClusterWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgClusterWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Cluster `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Reset()         { *m = AutoMsgClusterWatchHelper_WatchEvent{} }
func (m *AutoMsgClusterWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgClusterWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgClusterWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{0, 0}
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) GetObject() *Cluster {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgHostWatchHelper is a wrapper object for watch events for Host objects
type AutoMsgHostWatchHelper struct {
	Events []*AutoMsgHostWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgHostWatchHelper) Reset()                    { *m = AutoMsgHostWatchHelper{} }
func (m *AutoMsgHostWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgHostWatchHelper) ProtoMessage()               {}
func (*AutoMsgHostWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{1} }

func (m *AutoMsgHostWatchHelper) GetEvents() []*AutoMsgHostWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgHostWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Host  `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Reset()         { *m = AutoMsgHostWatchHelper_WatchEvent{} }
func (m *AutoMsgHostWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgHostWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgHostWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{1, 0}
}

func (m *AutoMsgHostWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgHostWatchHelper_WatchEvent) GetObject() *Host {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgNodeWatchHelper is a wrapper object for watch events for Node objects
type AutoMsgNodeWatchHelper struct {
	Events []*AutoMsgNodeWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgNodeWatchHelper) Reset()                    { *m = AutoMsgNodeWatchHelper{} }
func (m *AutoMsgNodeWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgNodeWatchHelper) ProtoMessage()               {}
func (*AutoMsgNodeWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{2} }

func (m *AutoMsgNodeWatchHelper) GetEvents() []*AutoMsgNodeWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgNodeWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Node  `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Reset()         { *m = AutoMsgNodeWatchHelper_WatchEvent{} }
func (m *AutoMsgNodeWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNodeWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgNodeWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{2, 0}
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) GetObject() *Node {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgSmartNICWatchHelper is a wrapper object for watch events for SmartNIC objects
type AutoMsgSmartNICWatchHelper struct {
	Events []*AutoMsgSmartNICWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgSmartNICWatchHelper) Reset()         { *m = AutoMsgSmartNICWatchHelper{} }
func (m *AutoMsgSmartNICWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSmartNICWatchHelper) ProtoMessage()    {}
func (*AutoMsgSmartNICWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{3}
}

func (m *AutoMsgSmartNICWatchHelper) GetEvents() []*AutoMsgSmartNICWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgSmartNICWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *SmartNIC `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Reset()         { *m = AutoMsgSmartNICWatchHelper_WatchEvent{} }
func (m *AutoMsgSmartNICWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSmartNICWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgSmartNICWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{3, 0}
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) GetObject() *SmartNIC {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgTenantWatchHelper is a wrapper object for watch events for Tenant objects
type AutoMsgTenantWatchHelper struct {
	Events []*AutoMsgTenantWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgTenantWatchHelper) Reset()         { *m = AutoMsgTenantWatchHelper{} }
func (m *AutoMsgTenantWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTenantWatchHelper) ProtoMessage()    {}
func (*AutoMsgTenantWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{4}
}

func (m *AutoMsgTenantWatchHelper) GetEvents() []*AutoMsgTenantWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgTenantWatchHelper_WatchEvent struct {
	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Tenant `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Reset()         { *m = AutoMsgTenantWatchHelper_WatchEvent{} }
func (m *AutoMsgTenantWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTenantWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgTenantWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{4, 0}
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) GetObject() *Tenant {
	if m != nil {
		return m.Object
	}
	return nil
}

// ClusterList is a container object for list of Cluster objects
type ClusterList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Cluster objects
	Items []*Cluster `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *ClusterList) Reset()                    { *m = ClusterList{} }
func (m *ClusterList) String() string            { return proto.CompactTextString(m) }
func (*ClusterList) ProtoMessage()               {}
func (*ClusterList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{5} }

func (m *ClusterList) GetItems() []*Cluster {
	if m != nil {
		return m.Items
	}
	return nil
}

// HostList is a container object for list of Host objects
type HostList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Host objects
	Items []*Host `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *HostList) Reset()                    { *m = HostList{} }
func (m *HostList) String() string            { return proto.CompactTextString(m) }
func (*HostList) ProtoMessage()               {}
func (*HostList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{6} }

func (m *HostList) GetItems() []*Host {
	if m != nil {
		return m.Items
	}
	return nil
}

// NodeList is a container object for list of Node objects
type NodeList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Node objects
	Items []*Node `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *NodeList) Reset()                    { *m = NodeList{} }
func (m *NodeList) String() string            { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()               {}
func (*NodeList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{7} }

func (m *NodeList) GetItems() []*Node {
	if m != nil {
		return m.Items
	}
	return nil
}

// SmartNICList is a container object for list of SmartNIC objects
type SmartNICList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of SmartNIC objects
	Items []*SmartNIC `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *SmartNICList) Reset()                    { *m = SmartNICList{} }
func (m *SmartNICList) String() string            { return proto.CompactTextString(m) }
func (*SmartNICList) ProtoMessage()               {}
func (*SmartNICList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{8} }

func (m *SmartNICList) GetItems() []*SmartNIC {
	if m != nil {
		return m.Items
	}
	return nil
}

// TenantList is a container object for list of Tenant objects
type TenantList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Tenant objects
	Items []*Tenant `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *TenantList) Reset()                    { *m = TenantList{} }
func (m *TenantList) String() string            { return proto.CompactTextString(m) }
func (*TenantList) ProtoMessage()               {}
func (*TenantList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{9} }

func (m *TenantList) GetItems() []*Tenant {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgClusterWatchHelper)(nil), "cluster.AutoMsgClusterWatchHelper")
	proto.RegisterType((*AutoMsgClusterWatchHelper_WatchEvent)(nil), "cluster.AutoMsgClusterWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgHostWatchHelper)(nil), "cluster.AutoMsgHostWatchHelper")
	proto.RegisterType((*AutoMsgHostWatchHelper_WatchEvent)(nil), "cluster.AutoMsgHostWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgNodeWatchHelper)(nil), "cluster.AutoMsgNodeWatchHelper")
	proto.RegisterType((*AutoMsgNodeWatchHelper_WatchEvent)(nil), "cluster.AutoMsgNodeWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgSmartNICWatchHelper)(nil), "cluster.AutoMsgSmartNICWatchHelper")
	proto.RegisterType((*AutoMsgSmartNICWatchHelper_WatchEvent)(nil), "cluster.AutoMsgSmartNICWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgTenantWatchHelper)(nil), "cluster.AutoMsgTenantWatchHelper")
	proto.RegisterType((*AutoMsgTenantWatchHelper_WatchEvent)(nil), "cluster.AutoMsgTenantWatchHelper.WatchEvent")
	proto.RegisterType((*ClusterList)(nil), "cluster.ClusterList")
	proto.RegisterType((*HostList)(nil), "cluster.HostList")
	proto.RegisterType((*NodeList)(nil), "cluster.NodeList")
	proto.RegisterType((*SmartNICList)(nil), "cluster.SmartNICList")
	proto.RegisterType((*TenantList)(nil), "cluster.TenantList")
	proto.RegisterEnum("cluster.EventTypesV1", EventTypesV1_name, EventTypesV1_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterV1 service

type ClusterV1Client interface {
	AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Create Cluster object
	AutoAddCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Create Host object
	AutoAddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Create Node object
	AutoAddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Create SmartNIC object
	AutoAddSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error)
	// Create Tenant object
	AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Delete Cluster object
	AutoDeleteCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Delete Host object
	AutoDeleteHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Delete Node object
	AutoDeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Delete SmartNIC object
	AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error)
	// Delete Tenant object
	AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Get Cluster object
	AutoGetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Get Host object
	AutoGetHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Get Node object
	AutoGetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Get SmartNIC object
	AutoGetSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error)
	// Get Tenant object
	AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// List Cluster objects
	AutoListCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ClusterList, error)
	// List Host objects
	AutoListHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*HostList, error)
	// List Node objects
	AutoListNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NodeList, error)
	// List SmartNIC objects
	AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SmartNICList, error)
	// List Tenant objects
	AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error)
	// Update Cluster object
	AutoUpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Update Host object
	AutoUpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Update Node object
	AutoUpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Update SmartNIC object
	AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error)
	// Update Tenant object
	AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Watch Cluster objects
	AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchClusterClient, error)
	// Watch Host objects
	AutoWatchHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchHostClient, error)
	// Watch Node objects
	AutoWatchNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchNodeClient, error)
	// Watch SmartNIC objects
	AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSmartNICClient, error)
	AutoWatchSvcClusterV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSvcClusterV1Client, error)
	// Watch Tenant objects
	AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchTenantClient, error)
}

type clusterV1Client struct {
	cc *grpc.ClientConn
}

func NewClusterV1Client(cc *grpc.ClientConn) ClusterV1Client {
	return &clusterV1Client{cc}
}

func (c *clusterV1Client) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AuthBootstrapComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error) {
	out := new(SmartNIC)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddSmartNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error) {
	out := new(SmartNIC)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteSmartNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error) {
	out := new(SmartNIC)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetSmartNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ClusterList, error) {
	out := new(ClusterList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SmartNICList, error) {
	out := new(SmartNICList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListSmartNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error) {
	out := new(TenantList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC, opts ...grpc.CallOption) (*SmartNIC, error) {
	out := new(SmartNIC)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateSmartNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchClusterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[0], c.cc, "/cluster.ClusterV1/AutoWatchCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchClusterClient interface {
	Recv() (*AutoMsgClusterWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchClusterClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchClusterClient) Recv() (*AutoMsgClusterWatchHelper, error) {
	m := new(AutoMsgClusterWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchHostClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[1], c.cc, "/cluster.ClusterV1/AutoWatchHost", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchHostClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchHostClient interface {
	Recv() (*AutoMsgHostWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchHostClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchHostClient) Recv() (*AutoMsgHostWatchHelper, error) {
	m := new(AutoMsgHostWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchNodeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[2], c.cc, "/cluster.ClusterV1/AutoWatchNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchNodeClient interface {
	Recv() (*AutoMsgNodeWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchNodeClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchNodeClient) Recv() (*AutoMsgNodeWatchHelper, error) {
	m := new(AutoMsgNodeWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSmartNICClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[3], c.cc, "/cluster.ClusterV1/AutoWatchSmartNIC", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchSmartNICClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchSmartNICClient interface {
	Recv() (*AutoMsgSmartNICWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchSmartNICClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchSmartNICClient) Recv() (*AutoMsgSmartNICWatchHelper, error) {
	m := new(AutoMsgSmartNICWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchSvcClusterV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSvcClusterV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[4], c.cc, "/cluster.ClusterV1/AutoWatchSvcClusterV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchSvcClusterV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchSvcClusterV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type clusterV1AutoWatchSvcClusterV1Client struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchSvcClusterV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchTenantClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[5], c.cc, "/cluster.ClusterV1/AutoWatchTenant", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchTenantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchTenantClient interface {
	Recv() (*AutoMsgTenantWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchTenantClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchTenantClient) Recv() (*AutoMsgTenantWatchHelper, error) {
	m := new(AutoMsgTenantWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterV1 service

type ClusterV1Server interface {
	AuthBootstrapComplete(context.Context, *ClusterAuthBootstrapRequest) (*Cluster, error)
	// Create Cluster object
	AutoAddCluster(context.Context, *Cluster) (*Cluster, error)
	// Create Host object
	AutoAddHost(context.Context, *Host) (*Host, error)
	// Create Node object
	AutoAddNode(context.Context, *Node) (*Node, error)
	// Create SmartNIC object
	AutoAddSmartNIC(context.Context, *SmartNIC) (*SmartNIC, error)
	// Create Tenant object
	AutoAddTenant(context.Context, *Tenant) (*Tenant, error)
	// Delete Cluster object
	AutoDeleteCluster(context.Context, *Cluster) (*Cluster, error)
	// Delete Host object
	AutoDeleteHost(context.Context, *Host) (*Host, error)
	// Delete Node object
	AutoDeleteNode(context.Context, *Node) (*Node, error)
	// Delete SmartNIC object
	AutoDeleteSmartNIC(context.Context, *SmartNIC) (*SmartNIC, error)
	// Delete Tenant object
	AutoDeleteTenant(context.Context, *Tenant) (*Tenant, error)
	// Get Cluster object
	AutoGetCluster(context.Context, *Cluster) (*Cluster, error)
	// Get Host object
	AutoGetHost(context.Context, *Host) (*Host, error)
	// Get Node object
	AutoGetNode(context.Context, *Node) (*Node, error)
	// Get SmartNIC object
	AutoGetSmartNIC(context.Context, *SmartNIC) (*SmartNIC, error)
	// Get Tenant object
	AutoGetTenant(context.Context, *Tenant) (*Tenant, error)
	// List Cluster objects
	AutoListCluster(context.Context, *api.ListWatchOptions) (*ClusterList, error)
	// List Host objects
	AutoListHost(context.Context, *api.ListWatchOptions) (*HostList, error)
	// List Node objects
	AutoListNode(context.Context, *api.ListWatchOptions) (*NodeList, error)
	// List SmartNIC objects
	AutoListSmartNIC(context.Context, *api.ListWatchOptions) (*SmartNICList, error)
	// List Tenant objects
	AutoListTenant(context.Context, *api.ListWatchOptions) (*TenantList, error)
	// Update Cluster object
	AutoUpdateCluster(context.Context, *Cluster) (*Cluster, error)
	// Update Host object
	AutoUpdateHost(context.Context, *Host) (*Host, error)
	// Update Node object
	AutoUpdateNode(context.Context, *Node) (*Node, error)
	// Update SmartNIC object
	AutoUpdateSmartNIC(context.Context, *SmartNIC) (*SmartNIC, error)
	// Update Tenant object
	AutoUpdateTenant(context.Context, *Tenant) (*Tenant, error)
	// Watch Cluster objects
	AutoWatchCluster(*api.ListWatchOptions, ClusterV1_AutoWatchClusterServer) error
	// Watch Host objects
	AutoWatchHost(*api.ListWatchOptions, ClusterV1_AutoWatchHostServer) error
	// Watch Node objects
	AutoWatchNode(*api.ListWatchOptions, ClusterV1_AutoWatchNodeServer) error
	// Watch SmartNIC objects
	AutoWatchSmartNIC(*api.ListWatchOptions, ClusterV1_AutoWatchSmartNICServer) error
	AutoWatchSvcClusterV1(*api.ListWatchOptions, ClusterV1_AutoWatchSvcClusterV1Server) error
	// Watch Tenant objects
	AutoWatchTenant(*api.ListWatchOptions, ClusterV1_AutoWatchTenantServer) error
}

func RegisterClusterV1Server(s *grpc.Server, srv ClusterV1Server) {
	s.RegisterService(&_ClusterV1_serviceDesc, srv)
}

func _ClusterV1_AuthBootstrapComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterAuthBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AuthBootstrapComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AuthBootstrapComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AuthBootstrapComplete(ctx, req.(*ClusterAuthBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddSmartNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartNIC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddSmartNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddSmartNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddSmartNIC(ctx, req.(*SmartNIC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteSmartNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartNIC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteSmartNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteSmartNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteSmartNIC(ctx, req.(*SmartNIC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetSmartNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartNIC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetSmartNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetSmartNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetSmartNIC(ctx, req.(*SmartNIC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListCluster(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListHost(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListNode(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListSmartNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListSmartNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListSmartNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListSmartNIC(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListTenant(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateSmartNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmartNIC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateSmartNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateSmartNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateSmartNIC(ctx, req.(*SmartNIC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoWatchCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchCluster(m, &clusterV1AutoWatchClusterServer{stream})
}

type ClusterV1_AutoWatchClusterServer interface {
	Send(*AutoMsgClusterWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchClusterServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchClusterServer) Send(m *AutoMsgClusterWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchHost(m, &clusterV1AutoWatchHostServer{stream})
}

type ClusterV1_AutoWatchHostServer interface {
	Send(*AutoMsgHostWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchHostServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchHostServer) Send(m *AutoMsgHostWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchNode(m, &clusterV1AutoWatchNodeServer{stream})
}

type ClusterV1_AutoWatchNodeServer interface {
	Send(*AutoMsgNodeWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchNodeServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchNodeServer) Send(m *AutoMsgNodeWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchSmartNIC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchSmartNIC(m, &clusterV1AutoWatchSmartNICServer{stream})
}

type ClusterV1_AutoWatchSmartNICServer interface {
	Send(*AutoMsgSmartNICWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchSmartNICServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchSmartNICServer) Send(m *AutoMsgSmartNICWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchSvcClusterV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchSvcClusterV1(m, &clusterV1AutoWatchSvcClusterV1Server{stream})
}

type ClusterV1_AutoWatchSvcClusterV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type clusterV1AutoWatchSvcClusterV1Server struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchSvcClusterV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchTenant(m, &clusterV1AutoWatchTenantServer{stream})
}

type ClusterV1_AutoWatchTenantServer interface {
	Send(*AutoMsgTenantWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchTenantServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchTenantServer) Send(m *AutoMsgTenantWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterV1",
	HandlerType: (*ClusterV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthBootstrapComplete",
			Handler:    _ClusterV1_AuthBootstrapComplete_Handler,
		},
		{
			MethodName: "AutoAddCluster",
			Handler:    _ClusterV1_AutoAddCluster_Handler,
		},
		{
			MethodName: "AutoAddHost",
			Handler:    _ClusterV1_AutoAddHost_Handler,
		},
		{
			MethodName: "AutoAddNode",
			Handler:    _ClusterV1_AutoAddNode_Handler,
		},
		{
			MethodName: "AutoAddSmartNIC",
			Handler:    _ClusterV1_AutoAddSmartNIC_Handler,
		},
		{
			MethodName: "AutoAddTenant",
			Handler:    _ClusterV1_AutoAddTenant_Handler,
		},
		{
			MethodName: "AutoDeleteCluster",
			Handler:    _ClusterV1_AutoDeleteCluster_Handler,
		},
		{
			MethodName: "AutoDeleteHost",
			Handler:    _ClusterV1_AutoDeleteHost_Handler,
		},
		{
			MethodName: "AutoDeleteNode",
			Handler:    _ClusterV1_AutoDeleteNode_Handler,
		},
		{
			MethodName: "AutoDeleteSmartNIC",
			Handler:    _ClusterV1_AutoDeleteSmartNIC_Handler,
		},
		{
			MethodName: "AutoDeleteTenant",
			Handler:    _ClusterV1_AutoDeleteTenant_Handler,
		},
		{
			MethodName: "AutoGetCluster",
			Handler:    _ClusterV1_AutoGetCluster_Handler,
		},
		{
			MethodName: "AutoGetHost",
			Handler:    _ClusterV1_AutoGetHost_Handler,
		},
		{
			MethodName: "AutoGetNode",
			Handler:    _ClusterV1_AutoGetNode_Handler,
		},
		{
			MethodName: "AutoGetSmartNIC",
			Handler:    _ClusterV1_AutoGetSmartNIC_Handler,
		},
		{
			MethodName: "AutoGetTenant",
			Handler:    _ClusterV1_AutoGetTenant_Handler,
		},
		{
			MethodName: "AutoListCluster",
			Handler:    _ClusterV1_AutoListCluster_Handler,
		},
		{
			MethodName: "AutoListHost",
			Handler:    _ClusterV1_AutoListHost_Handler,
		},
		{
			MethodName: "AutoListNode",
			Handler:    _ClusterV1_AutoListNode_Handler,
		},
		{
			MethodName: "AutoListSmartNIC",
			Handler:    _ClusterV1_AutoListSmartNIC_Handler,
		},
		{
			MethodName: "AutoListTenant",
			Handler:    _ClusterV1_AutoListTenant_Handler,
		},
		{
			MethodName: "AutoUpdateCluster",
			Handler:    _ClusterV1_AutoUpdateCluster_Handler,
		},
		{
			MethodName: "AutoUpdateHost",
			Handler:    _ClusterV1_AutoUpdateHost_Handler,
		},
		{
			MethodName: "AutoUpdateNode",
			Handler:    _ClusterV1_AutoUpdateNode_Handler,
		},
		{
			MethodName: "AutoUpdateSmartNIC",
			Handler:    _ClusterV1_AutoUpdateSmartNIC_Handler,
		},
		{
			MethodName: "AutoUpdateTenant",
			Handler:    _ClusterV1_AutoUpdateTenant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchCluster",
			Handler:       _ClusterV1_AutoWatchCluster_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchHost",
			Handler:       _ClusterV1_AutoWatchHost_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchNode",
			Handler:       _ClusterV1_AutoWatchNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSmartNIC",
			Handler:       _ClusterV1_AutoWatchSmartNIC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcClusterV1",
			Handler:       _ClusterV1_AutoWatchSvcClusterV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchTenant",
			Handler:       _ClusterV1_AutoWatchTenant_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_cluster.proto",
}

func (m *AutoMsgClusterWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgClusterWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgHostWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgHostWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgHostWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgNodeWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNodeWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgSmartNICWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSmartNICWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgTenantWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTenantWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ClusterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HostList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n9, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n11, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SmartNICList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartNICList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n15, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcCluster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgClusterWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgHostWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgNodeWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgSmartNICWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgTenantWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *ClusterList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *HostList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *NodeList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *SmartNICList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *TenantList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func sovSvcCluster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcCluster(x uint64) (n int) {
	return sovSvcCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgClusterWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgClusterWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgClusterWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgClusterWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgClusterWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Cluster{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgHostWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgHostWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgHostWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgHostWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgHostWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Host{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNodeWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNodeWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNodeWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgNodeWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNodeWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Node{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSmartNICWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSmartNICWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSmartNICWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgSmartNICWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &SmartNIC{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTenantWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgTenantWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTenantWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Tenant{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Cluster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Host{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Node{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartNICList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartNICList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartNICList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SmartNIC{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Tenant{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcCluster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_cluster.proto", fileDescriptorSvcCluster) }

var fileDescriptorSvcCluster = []byte{
	// 1540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xce, 0x24, 0xa9, 0xeb, 0x4e, 0x9c, 0xd8, 0x9e, 0x36, 0xfd, 0x79, 0xf7, 0x57, 0x92, 0x74,
	0xfb, 0x41, 0x9b, 0x36, 0xde, 0x24, 0x9c, 0x08, 0x2d, 0x52, 0xea, 0xb6, 0x69, 0xa1, 0x4d, 0xab,
	0xb6, 0xb4, 0x80, 0x80, 0xb2, 0xf1, 0x4e, 0xed, 0xad, 0xec, 0xdd, 0xc5, 0x3b, 0x4e, 0xc5, 0x97,
	0x84, 0x70, 0x2a, 0x0e, 0x08, 0x90, 0xe0, 0x86, 0x84, 0x84, 0x7a, 0x40, 0xa2, 0xe2, 0x94, 0x13,
	0xe2, 0x84, 0x38, 0xf5, 0x58, 0x89, 0x13, 0x3d, 0x54, 0xa8, 0xe2, 0xef, 0x40, 0x68, 0xde, 0xd9,
	0xb5, 0xf7, 0xd3, 0x5e, 0x0b, 0x85, 0x93, 0x3d, 0xe3, 0xf7, 0x7d, 0x9e, 0x67, 0xfd, 0xbc, 0xef,
	0x3b, 0xbb, 0x8b, 0x8b, 0xce, 0x66, 0xf5, 0x76, 0xb5, 0xd1, 0x76, 0x18, 0x6d, 0x95, 0xed, 0x96,
	0xc5, 0x2c, 0xb2, 0xdb, 0x5d, 0xca, 0x07, 0x6a, 0x96, 0x55, 0x6b, 0x50, 0x55, 0xb3, 0x0d, 0x55,
	0x33, 0x4d, 0x8b, 0x69, 0xcc, 0xb0, 0x4c, 0x47, 0x84, 0xc9, 0xe7, 0x6a, 0x06, 0xab, 0xb7, 0x37,
	0xca, 0x55, 0xab, 0xa9, 0xda, 0xd4, 0x74, 0x34, 0x53, 0xb7, 0x54, 0xe7, 0x9e, 0xba, 0x49, 0x4d,
	0xa3, 0x4a, 0xd5, 0x36, 0x33, 0x1a, 0x0e, 0x4f, 0xad, 0x51, 0xd3, 0x9f, 0xad, 0x1a, 0x66, 0xb5,
	0xd1, 0xd6, 0xa9, 0x07, 0xb3, 0xe0, 0x83, 0xa9, 0x59, 0x35, 0x4b, 0x85, 0xed, 0x8d, 0xf6, 0x1d,
	0x58, 0xc1, 0x02, 0xbe, 0xb9, 0xe1, 0x93, 0x01, 0xad, 0xf2, 0x94, 0xd3, 0xd4, 0x5a, 0xcc, 0x34,
	0xaa, 0xee, 0x3a, 0xc7, 0xa8, 0xa9, 0x99, 0xcc, 0x5d, 0x1d, 0x49, 0x90, 0xc8, 0x2f, 0xa8, 0x49,
	0x99, 0x26, 0xc2, 0x94, 0x1f, 0x11, 0x96, 0x56, 0xdb, 0xcc, 0xba, 0xec, 0xd4, 0x2a, 0x02, 0xfd,
	0x96, 0xc6, 0xaa, 0xf5, 0x0b, 0xb4, 0x61, 0xd3, 0x16, 0x39, 0x8d, 0x33, 0xe7, 0x36, 0xa9, 0xc9,
	0x9c, 0x12, 0x9a, 0x1b, 0x3b, 0x36, 0xb1, 0xbc, 0x50, 0xf6, 0x24, 0x24, 0xe6, 0x94, 0xe1, 0x3b,
	0x64, 0xc9, 0xa7, 0x30, 0xee, 0xad, 0x48, 0x0e, 0x8f, 0xdf, 0x78, 0xdf, 0xa6, 0x25, 0x34, 0x87,
	0x8e, 0xed, 0x21, 0x73, 0x38, 0x73, 0x65, 0xe3, 0x2e, 0xad, 0xb2, 0xd2, 0xe8, 0x1c, 0x3a, 0x36,
	0xb1, 0x5c, 0xe8, 0x42, 0xbb, 0x98, 0x2b, 0xf9, 0x27, 0xf7, 0xa5, 0x89, 0x7b, 0x3c, 0xbf, 0x0e,
	0xc8, 0xca, 0xf7, 0x08, 0xef, 0x77, 0x79, 0x2f, 0x58, 0x0e, 0xf3, 0x0b, 0x5d, 0x09, 0x09, 0x9d,
	0x0f, 0x0b, 0x0d, 0x25, 0xf8, 0x55, 0xbe, 0xd8, 0x47, 0xe5, 0x73, 0x21, 0x95, 0x93, 0x5d, 0x5c,
	0x0e, 0xd8, 0x57, 0xe2, 0xba, 0xa5, 0xd3, 0xa1, 0x24, 0x86, 0x12, 0xfe, 0xbd, 0x44, 0x0e, 0x18,
	0x95, 0xf8, 0x13, 0xc2, 0xb2, 0xcb, 0x78, 0x9d, 0x17, 0xd0, 0xfa, 0xc5, 0x8a, 0x5f, 0xe6, 0xcb,
	0x21, 0x99, 0xe5, 0xb0, 0xcc, 0x98, 0x24, 0xbf, 0xd4, 0xd3, 0x7d, 0xa4, 0x1e, 0x0c, 0x49, 0x2d,
	0x76, 0xb1, 0x3d, 0xd0, 0xa8, 0xdc, 0x1f, 0x10, 0x2e, 0xb9, 0xcc, 0x37, 0xa0, 0xbe, 0xfd, 0x62,
	0x4f, 0x85, 0xc4, 0x9e, 0x0c, 0x8b, 0x8d, 0xa4, 0xf8, 0xa5, 0xbe, 0xd4, 0x47, 0xea, 0x6c, 0x48,
	0x6a, 0xbe, 0x8b, 0x2c, 0x20, 0xa3, 0x42, 0xbf, 0x40, 0x78, 0xc2, 0x2d, 0xdd, 0x4b, 0x86, 0xc3,
	0x88, 0x82, 0xd1, 0x8d, 0xae, 0x25, 0x9a, 0x6d, 0x94, 0x39, 0xfa, 0x65, 0xca, 0xb4, 0x33, 0xd9,
	0x47, 0x4f, 0x67, 0x47, 0x1e, 0x3f, 0x9d, 0x45, 0xe4, 0x38, 0xce, 0xf2, 0x58, 0xbe, 0x5b, 0x1a,
	0xf3, 0x85, 0x7a, 0x9b, 0xbe, 0xd0, 0x59, 0xbc, 0xeb, 0x22, 0xa3, 0x4d, 0xa7, 0x34, 0x0e, 0x57,
	0x1a, 0x6d, 0x97, 0xa9, 0x27, 0xf7, 0x25, 0xdc, 0x30, 0x1c, 0xe6, 0xea, 0xf9, 0x0c, 0xe1, 0x2c,
	0x2f, 0xd2, 0x9d, 0x10, 0x73, 0x20, 0x28, 0x26, 0xd4, 0x15, 0x71, 0x4a, 0x78, 0x2d, 0xfe, 0xa7,
	0x4a, 0xa0, 0xf8, 0xc3, 0x4a, 0xbe, 0x42, 0x38, 0xe7, 0x95, 0xda, 0x4e, 0xa8, 0x99, 0x0b, 0xaa,
	0x89, 0xa9, 0xef, 0xb0, 0xa2, 0xcf, 0x11, 0xc6, 0xa2, 0xa2, 0x76, 0x42, 0xcf, 0x4c, 0x50, 0x4f,
	0xa4, 0x88, 0x43, 0x6a, 0xe6, 0xff, 0x40, 0x38, 0x07, 0xdd, 0xc0, 0x69, 0x9d, 0x9b, 0x4b, 0x64,
	0x2f, 0xce, 0x9f, 0x6b, 0xd0, 0x2a, 0x3f, 0xbd, 0xae, 0x33, 0xad, 0xc5, 0xa8, 0x5e, 0x18, 0x21,
	0xd3, 0xb8, 0xe8, 0x6d, 0x56, 0x34, 0xb3, 0x4a, 0x1b, 0x0d, 0xaa, 0x17, 0x38, 0x99, 0xec, 0x6d,
	0xaf, 0x5b, 0xcc, 0xb8, 0x63, 0x54, 0xe1, 0xd4, 0x3b, 0xaf, 0x19, 0xfc, 0xf7, 0xd1, 0x20, 0x96,
	0x65, 0xdb, 0x54, 0x2f, 0x8c, 0x91, 0x22, 0x9e, 0xbc, 0x44, 0x35, 0x9d, 0xb6, 0xe0, 0x27, 0xaa,
	0x17, 0xc6, 0xc9, 0x14, 0xc6, 0x62, 0xeb, 0x92, 0xe5, 0xb0, 0xc2, 0xae, 0x5e, 0x48, 0xa5, 0xae,
	0x99, 0x35, 0xaa, 0x17, 0x32, 0x3c, 0x84, 0xfb, 0xfb, 0x8a, 0x65, 0x98, 0x54, 0x2f, 0xec, 0xe6,
	0x21, 0x7c, 0x7d, 0xd6, 0x70, 0xee, 0x8a, 0xad, 0x2c, 0xc9, 0xe3, 0x89, 0xf5, 0x8b, 0x95, 0x55,
	0xbd, 0x69, 0x30, 0x0e, 0xbb, 0x67, 0xf9, 0xbb, 0x03, 0x78, 0x8f, 0xdb, 0x2b, 0x37, 0x97, 0xc8,
	0x97, 0x08, 0x4f, 0xaf, 0xb6, 0x59, 0xfd, 0x8c, 0x65, 0x31, 0x87, 0xb5, 0x34, 0xbb, 0x62, 0x35,
	0xed, 0x06, 0x65, 0x94, 0x1c, 0x0e, 0x77, 0x56, 0x20, 0xec, 0x1a, 0x7d, 0xaf, 0x4d, 0x1d, 0x26,
	0x47, 0xfa, 0x4f, 0x39, 0xbd, 0xbd, 0x25, 0x65, 0xaa, 0x2d, 0xaa, 0x31, 0xfa, 0xf3, 0x96, 0x84,
	0x7e, 0xdd, 0x92, 0x46, 0x3e, 0xfd, 0xfd, 0xaf, 0x6f, 0x46, 0x8f, 0xe0, 0x91, 0x15, 0x34, 0xaf,
	0xcc, 0xa8, 0x6e, 0x82, 0x1a, 0x4f, 0x7b, 0x01, 0x4f, 0xf1, 0x99, 0xb5, 0xaa, 0xeb, 0x2e, 0x20,
	0x89, 0x50, 0xc4, 0x90, 0x92, 0x28, 0x29, 0xb9, 0x86, 0x27, 0x5c, 0x24, 0xde, 0x8d, 0x24, 0xd8,
	0x9c, 0x72, 0x70, 0xa9, 0x1c, 0x49, 0x50, 0x3d, 0x29, 0x54, 0x67, 0xd4, 0xba, 0xe5, 0x30, 0xc7,
	0x87, 0xc9, 0xff, 0x67, 0x12, 0x6c, 0x33, 0x39, 0xb8, 0x1c, 0x8c, 0x69, 0x5a, 0x3a, 0x75, 0xc8,
	0xab, 0x38, 0xef, 0x62, 0x7a, 0xdd, 0x41, 0xa2, 0x0d, 0x23, 0x47, 0xb7, 0x62, 0x2f, 0xfa, 0x4d,
	0x3c, 0xe9, 0x82, 0x89, 0xd2, 0x26, 0xe1, 0x5a, 0x97, 0xc3, 0x1b, 0xca, 0xf3, 0x09, 0x32, 0xf3,
	0x42, 0x66, 0x56, 0x15, 0xf7, 0x53, 0x0e, 0xb9, 0x8d, 0x8b, 0x1c, 0xfb, 0x2c, 0xe5, 0x46, 0x0d,
	0xe3, 0xce, 0x51, 0xce, 0xa0, 0x43, 0x5a, 0x80, 0x61, 0x0a, 0x8f, 0xac, 0x8c, 0xcc, 0x67, 0xbd,
	0x8a, 0x20, 0x6f, 0x0b, 0xef, 0x05, 0x41, 0x0a, 0xd3, 0x16, 0x12, 0x70, 0xa7, 0x01, 0x37, 0x2f,
	0x3c, 0x53, 0x3f, 0xbc, 0x52, 0x5e, 0xd7, 0x9a, 0xf4, 0xe3, 0x20, 0x7c, 0x0a, 0xff, 0x06, 0xc1,
	0x83, 0x7d, 0x3d, 0xf8, 0x26, 0x26, 0x3d, 0xf8, 0x21, 0xad, 0x5c, 0x4a, 0xa0, 0x92, 0x80, 0x6a,
	0xaf, 0xea, 0xdd, 0xe2, 0xfa, 0xe8, 0x28, 0x2e, 0xf4, 0xe8, 0x52, 0x9b, 0xad, 0x26, 0x10, 0xfd,
	0x0f, 0x88, 0x8a, 0x9e, 0xd7, 0x3d, 0x9a, 0x37, 0xc4, 0x9f, 0xb6, 0x46, 0xd9, 0x30, 0x8e, 0x1f,
	0xda, 0xde, 0x92, 0xc6, 0x6a, 0x94, 0x45, 0xed, 0x26, 0x3d, 0xbb, 0x6f, 0x89, 0x66, 0x5a, 0xa3,
	0x2c, 0x85, 0xd7, 0xf3, 0x71, 0x88, 0xe0, 0x04, 0x89, 0x18, 0xdd, 0x03, 0x4e, 0xe1, 0x72, 0x5f,
	0xe0, 0x90, 0xc5, 0x35, 0xd1, 0xaa, 0x6b, 0x94, 0x0d, 0xe9, 0x6f, 0x39, 0x8e, 0x04, 0xcc, 0x25,
	0xb1, 0xe6, 0xde, 0x16, 0x6d, 0xbc, 0x46, 0x59, 0x6a, 0x67, 0x4f, 0xc6, 0x51, 0x80, 0xad, 0x24,
	0xc6, 0xd6, 0xab, 0xe2, 0x4a, 0xf8, 0x59, 0xe9, 0xf9, 0x3a, 0xdd, 0x3d, 0x3d, 0xe1, 0x6e, 0xf0,
	0x8a, 0x0d, 0xcf, 0x6a, 0xf2, 0xbe, 0xb0, 0xb9, 0x3c, 0x42, 0x29, 0x6c, 0x6f, 0x49, 0xe3, 0xfc,
	0xc4, 0xec, 0x4e, 0x9e, 0xb7, 0x70, 0xce, 0x43, 0x04, 0x3b, 0x13, 0xe0, 0x8a, 0x01, 0x5b, 0x01,
	0x4b, 0x09, 0x63, 0x81, 0xf4, 0x1c, 0x48, 0xf7, 0x06, 0xaf, 0x0f, 0x1d, 0x3c, 0x1d, 0x88, 0xee,
	0xdd, 0x68, 0x0d, 0x40, 0x17, 0x23, 0xb8, 0x2e, 0x7a, 0x89, 0xc7, 0x77, 0x8d, 0x4d, 0x60, 0x98,
	0x8e, 0x98, 0x0b, 0x2c, 0x47, 0x63, 0x59, 0x0a, 0xc0, 0x82, 0x7b, 0x0e, 0x93, 0x0d, 0xd1, 0x4e,
	0x3c, 0xc7, 0x75, 0x36, 0x81, 0x67, 0x6f, 0xc8, 0x5f, 0x60, 0x39, 0x1c, 0xcb, 0xe2, 0xf5, 0x95,
	0x37, 0xa7, 0xdf, 0x15, 0x73, 0xfa, 0x35, 0x5b, 0xd7, 0x86, 0x9b, 0xd3, 0x70, 0x12, 0xb4, 0x21,
	0x2d, 0xe6, 0x24, 0x90, 0x7b, 0x9d, 0xfb, 0x8e, 0xb8, 0x0a, 0xc1, 0x90, 0xa2, 0x79, 0xcb, 0x09,
	0xc0, 0xfb, 0x05, 0x70, 0xa4, 0x81, 0x03, 0xf8, 0x29, 0x7a, 0x78, 0x20, 0x7e, 0xa8, 0x8f, 0x4d,
	0x31, 0xaa, 0x05, 0xfe, 0x90, 0xad, 0xbc, 0x9c, 0xc0, 0x25, 0x0b, 0xae, 0xd8, 0x76, 0xbe, 0x23,
	0xea, 0x4b, 0xf0, 0xa5, 0xee, 0xe8, 0xc5, 0x04, 0xa6, 0x92, 0x60, 0x8a, 0xe9, 0xea, 0x8f, 0x04,
	0x0f, 0x14, 0xd2, 0x80, 0xb6, 0x56, 0x06, 0xbf, 0xc2, 0x50, 0x4e, 0x6c, 0x6f, 0x49, 0xbb, 0xe0,
	0xd9, 0x2e, 0xc0, 0xbf, 0x0f, 0xea, 0x6d, 0x4a, 0x85, 0x5f, 0xbc, 0x9a, 0x58, 0x44, 0x84, 0x89,
	0xa1, 0x25, 0x10, 0xfa, 0x8c, 0x80, 0xd9, 0x01, 0x2f, 0x25, 0x94, 0xe3, 0xf1, 0xbc, 0x04, 0x78,
	0x73, 0x2e, 0x2f, 0x94, 0x4c, 0x88, 0xb5, 0xdf, 0x68, 0x98, 0x1d, 0xf0, 0x9e, 0x21, 0x1d, 0x2b,
	0x14, 0xd2, 0x22, 0x22, 0x9f, 0x20, 0xd1, 0x64, 0x00, 0x30, 0x68, 0x66, 0x1c, 0x4a, 0xf1, 0xee,
	0x00, 0xee, 0x36, 0x62, 0xe8, 0xf7, 0x03, 0x7d, 0xc1, 0xa5, 0xef, 0xd6, 0xd6, 0x22, 0x22, 0xaf,
	0xc3, 0x9d, 0xbb, 0xab, 0x60, 0xb3, 0xda, 0xbb, 0xa7, 0x4f, 0x9c, 0x28, 0x7c, 0xbb, 0xf7, 0xa4,
	0x0f, 0x13, 0xa5, 0x18, 0x61, 0x5d, 0x44, 0xe4, 0x03, 0x71, 0x38, 0x40, 0x68, 0xff, 0x29, 0x75,
	0x70, 0xe0, 0x8b, 0x86, 0x74, 0x45, 0xe4, 0x56, 0xf2, 0x22, 0x92, 0xff, 0x1e, 0xfd, 0xba, 0x23,
	0x8d, 0x6e, 0x2e, 0x7d, 0xdb, 0x91, 0xbc, 0x97, 0x90, 0x0f, 0x3a, 0xd2, 0xee, 0x4a, 0xf7, 0xeb,
	0x38, 0xf7, 0x8d, 0x7f, 0xf2, 0xaa, 0x79, 0xd0, 0x91, 0xb2, 0xde, 0x9f, 0xf9, 0xa0, 0x23, 0x65,
	0x04, 0xfd, 0xc3, 0x8e, 0xa4, 0x60, 0x2f, 0x85, 0x8c, 0xd9, 0x6d, 0x46, 0xf8, 0xc9, 0x48, 0xdc,
	0x1b, 0x1f, 0x22, 0xe4, 0x3c, 0xec, 0x48, 0x27, 0x30, 0xa0, 0xc5, 0x84, 0x8c, 0xdb, 0xbc, 0x80,
	0x61, 0xd6, 0x06, 0xc2, 0xa1, 0xae, 0x53, 0x86, 0x1f, 0xc7, 0x5d, 0x6d, 0x71, 0x29, 0xc1, 0xe0,
	0x05, 0xec, 0x8a, 0x17, 0x51, 0x10, 0x9f, 0x8c, 0xfe, 0x4b, 0x47, 0x3a, 0x4f, 0xbc, 0x2b, 0x94,
	0xe3, 0x9f, 0xe0, 0x94, 0xff, 0xf7, 0x79, 0x70, 0x9b, 0xf7, 0x92, 0x7f, 0xeb, 0x48, 0x81, 0x47,
	0xdd, 0x33, 0xb9, 0x47, 0xcf, 0x66, 0xd0, 0xe3, 0x67, 0x33, 0xe8, 0xcf, 0x67, 0x33, 0xe8, 0x2a,
	0xda, 0xc8, 0xc0, 0x0b, 0xd2, 0x17, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x04, 0x95, 0x74, 0xe2,
	0x26, 0x16, 0x00, 0x00,
}
