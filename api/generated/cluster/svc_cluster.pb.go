// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_cluster.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoMsgClusterWatchHelper is a wrapper object for watch events for Cluster objects
type AutoMsgClusterWatchHelper struct {
	Events []*AutoMsgClusterWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgClusterWatchHelper) Reset()         { *m = AutoMsgClusterWatchHelper{} }
func (m *AutoMsgClusterWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgClusterWatchHelper) ProtoMessage()    {}
func (*AutoMsgClusterWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{0}
}

func (m *AutoMsgClusterWatchHelper) GetEvents() []*AutoMsgClusterWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgClusterWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Cluster `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Reset()         { *m = AutoMsgClusterWatchHelper_WatchEvent{} }
func (m *AutoMsgClusterWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgClusterWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgClusterWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{0, 0}
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) GetObject() *Cluster {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgConfigurationSnapshotWatchHelper is a wrapper object for watch events for ConfigurationSnapshot objects
type AutoMsgConfigurationSnapshotWatchHelper struct {
	Events []*AutoMsgConfigurationSnapshotWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgConfigurationSnapshotWatchHelper) Reset() {
	*m = AutoMsgConfigurationSnapshotWatchHelper{}
}
func (m *AutoMsgConfigurationSnapshotWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgConfigurationSnapshotWatchHelper) ProtoMessage()    {}
func (*AutoMsgConfigurationSnapshotWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{1}
}

func (m *AutoMsgConfigurationSnapshotWatchHelper) GetEvents() []*AutoMsgConfigurationSnapshotWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgConfigurationSnapshotWatchHelper_WatchEvent struct {
	Type   string                 `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *ConfigurationSnapshot `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgConfigurationSnapshotWatchHelper_WatchEvent{}
}
func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{1, 0}
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) GetObject() *ConfigurationSnapshot {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgCredentialsWatchHelper is a wrapper object for watch events for Credentials objects
type AutoMsgCredentialsWatchHelper struct {
	Events []*AutoMsgCredentialsWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgCredentialsWatchHelper) Reset()         { *m = AutoMsgCredentialsWatchHelper{} }
func (m *AutoMsgCredentialsWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCredentialsWatchHelper) ProtoMessage()    {}
func (*AutoMsgCredentialsWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{2}
}

func (m *AutoMsgCredentialsWatchHelper) GetEvents() []*AutoMsgCredentialsWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgCredentialsWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Credentials `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgCredentialsWatchHelper_WatchEvent{}
}
func (m *AutoMsgCredentialsWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCredentialsWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgCredentialsWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{2, 0}
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) GetObject() *Credentials {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgDSCProfileWatchHelper is a wrapper object for watch events for DSCProfile objects
type AutoMsgDSCProfileWatchHelper struct {
	Events []*AutoMsgDSCProfileWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgDSCProfileWatchHelper) Reset()         { *m = AutoMsgDSCProfileWatchHelper{} }
func (m *AutoMsgDSCProfileWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgDSCProfileWatchHelper) ProtoMessage()    {}
func (*AutoMsgDSCProfileWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{3}
}

func (m *AutoMsgDSCProfileWatchHelper) GetEvents() []*AutoMsgDSCProfileWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgDSCProfileWatchHelper_WatchEvent struct {
	Type   string      `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *DSCProfile `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgDSCProfileWatchHelper_WatchEvent{}
}
func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgDSCProfileWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgDSCProfileWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{3, 0}
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) GetObject() *DSCProfile {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgDistributedServiceCardWatchHelper is a wrapper object for watch events for DistributedServiceCard objects
type AutoMsgDistributedServiceCardWatchHelper struct {
	Events []*AutoMsgDistributedServiceCardWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgDistributedServiceCardWatchHelper) Reset() {
	*m = AutoMsgDistributedServiceCardWatchHelper{}
}
func (m *AutoMsgDistributedServiceCardWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgDistributedServiceCardWatchHelper) ProtoMessage()    {}
func (*AutoMsgDistributedServiceCardWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{4}
}

func (m *AutoMsgDistributedServiceCardWatchHelper) GetEvents() []*AutoMsgDistributedServiceCardWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgDistributedServiceCardWatchHelper_WatchEvent struct {
	Type   string                  `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *DistributedServiceCard `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgDistributedServiceCardWatchHelper_WatchEvent{}
}
func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgDistributedServiceCardWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgDistributedServiceCardWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{4, 0}
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) GetObject() *DistributedServiceCard {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgHostWatchHelper is a wrapper object for watch events for Host objects
type AutoMsgHostWatchHelper struct {
	Events []*AutoMsgHostWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgHostWatchHelper) Reset()                    { *m = AutoMsgHostWatchHelper{} }
func (m *AutoMsgHostWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgHostWatchHelper) ProtoMessage()               {}
func (*AutoMsgHostWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{5} }

func (m *AutoMsgHostWatchHelper) GetEvents() []*AutoMsgHostWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgHostWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Host  `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Reset()         { *m = AutoMsgHostWatchHelper_WatchEvent{} }
func (m *AutoMsgHostWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgHostWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgHostWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{5, 0}
}

func (m *AutoMsgHostWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgHostWatchHelper_WatchEvent) GetObject() *Host {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgLicenseWatchHelper is a wrapper object for watch events for License objects
type AutoMsgLicenseWatchHelper struct {
	Events []*AutoMsgLicenseWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgLicenseWatchHelper) Reset()         { *m = AutoMsgLicenseWatchHelper{} }
func (m *AutoMsgLicenseWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLicenseWatchHelper) ProtoMessage()    {}
func (*AutoMsgLicenseWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{6}
}

func (m *AutoMsgLicenseWatchHelper) GetEvents() []*AutoMsgLicenseWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgLicenseWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *License `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) Reset()         { *m = AutoMsgLicenseWatchHelper_WatchEvent{} }
func (m *AutoMsgLicenseWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLicenseWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgLicenseWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{6, 0}
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) GetObject() *License {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgNodeWatchHelper is a wrapper object for watch events for Node objects
type AutoMsgNodeWatchHelper struct {
	Events []*AutoMsgNodeWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgNodeWatchHelper) Reset()                    { *m = AutoMsgNodeWatchHelper{} }
func (m *AutoMsgNodeWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgNodeWatchHelper) ProtoMessage()               {}
func (*AutoMsgNodeWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{7} }

func (m *AutoMsgNodeWatchHelper) GetEvents() []*AutoMsgNodeWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgNodeWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Node  `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Reset()         { *m = AutoMsgNodeWatchHelper_WatchEvent{} }
func (m *AutoMsgNodeWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNodeWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgNodeWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{7, 0}
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) GetObject() *Node {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgSnapshotRestoreWatchHelper is a wrapper object for watch events for SnapshotRestore objects
type AutoMsgSnapshotRestoreWatchHelper struct {
	Events []*AutoMsgSnapshotRestoreWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgSnapshotRestoreWatchHelper) Reset()         { *m = AutoMsgSnapshotRestoreWatchHelper{} }
func (m *AutoMsgSnapshotRestoreWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSnapshotRestoreWatchHelper) ProtoMessage()    {}
func (*AutoMsgSnapshotRestoreWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{8}
}

func (m *AutoMsgSnapshotRestoreWatchHelper) GetEvents() []*AutoMsgSnapshotRestoreWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgSnapshotRestoreWatchHelper_WatchEvent struct {
	Type   string           `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *SnapshotRestore `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgSnapshotRestoreWatchHelper_WatchEvent{}
}
func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgSnapshotRestoreWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgSnapshotRestoreWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{8, 0}
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) GetObject() *SnapshotRestore {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgTenantWatchHelper is a wrapper object for watch events for Tenant objects
type AutoMsgTenantWatchHelper struct {
	Events []*AutoMsgTenantWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgTenantWatchHelper) Reset()         { *m = AutoMsgTenantWatchHelper{} }
func (m *AutoMsgTenantWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTenantWatchHelper) ProtoMessage()    {}
func (*AutoMsgTenantWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{9}
}

func (m *AutoMsgTenantWatchHelper) GetEvents() []*AutoMsgTenantWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgTenantWatchHelper_WatchEvent struct {
	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Tenant `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Reset()         { *m = AutoMsgTenantWatchHelper_WatchEvent{} }
func (m *AutoMsgTenantWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTenantWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgTenantWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{9, 0}
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) GetObject() *Tenant {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgVersionWatchHelper is a wrapper object for watch events for Version objects
type AutoMsgVersionWatchHelper struct {
	Events []*AutoMsgVersionWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgVersionWatchHelper) Reset()         { *m = AutoMsgVersionWatchHelper{} }
func (m *AutoMsgVersionWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgVersionWatchHelper) ProtoMessage()    {}
func (*AutoMsgVersionWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{10}
}

func (m *AutoMsgVersionWatchHelper) GetEvents() []*AutoMsgVersionWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgVersionWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Version `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) Reset()         { *m = AutoMsgVersionWatchHelper_WatchEvent{} }
func (m *AutoMsgVersionWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgVersionWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgVersionWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{10, 0}
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) GetObject() *Version {
	if m != nil {
		return m.Object
	}
	return nil
}

// ClusterList is a container object for list of Cluster objects
type ClusterList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Cluster objects
	Items []*Cluster `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *ClusterList) Reset()                    { *m = ClusterList{} }
func (m *ClusterList) String() string            { return proto.CompactTextString(m) }
func (*ClusterList) ProtoMessage()               {}
func (*ClusterList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{11} }

func (m *ClusterList) GetItems() []*Cluster {
	if m != nil {
		return m.Items
	}
	return nil
}

// ConfigurationSnapshotList is a container object for list of ConfigurationSnapshot objects
type ConfigurationSnapshotList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of ConfigurationSnapshot objects
	Items []*ConfigurationSnapshot `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *ConfigurationSnapshotList) Reset()         { *m = ConfigurationSnapshotList{} }
func (m *ConfigurationSnapshotList) String() string { return proto.CompactTextString(m) }
func (*ConfigurationSnapshotList) ProtoMessage()    {}
func (*ConfigurationSnapshotList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{12}
}

func (m *ConfigurationSnapshotList) GetItems() []*ConfigurationSnapshot {
	if m != nil {
		return m.Items
	}
	return nil
}

// CredentialsList is a container object for list of Credentials objects
type CredentialsList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Credentials objects
	Items []*Credentials `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *CredentialsList) Reset()                    { *m = CredentialsList{} }
func (m *CredentialsList) String() string            { return proto.CompactTextString(m) }
func (*CredentialsList) ProtoMessage()               {}
func (*CredentialsList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{13} }

func (m *CredentialsList) GetItems() []*Credentials {
	if m != nil {
		return m.Items
	}
	return nil
}

// DSCProfileList is a container object for list of DSCProfile objects
type DSCProfileList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of DSCProfile objects
	Items []*DSCProfile `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *DSCProfileList) Reset()                    { *m = DSCProfileList{} }
func (m *DSCProfileList) String() string            { return proto.CompactTextString(m) }
func (*DSCProfileList) ProtoMessage()               {}
func (*DSCProfileList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{14} }

func (m *DSCProfileList) GetItems() []*DSCProfile {
	if m != nil {
		return m.Items
	}
	return nil
}

// DistributedServiceCardList is a container object for list of DistributedServiceCard objects
type DistributedServiceCardList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of DistributedServiceCard objects
	Items []*DistributedServiceCard `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *DistributedServiceCardList) Reset()         { *m = DistributedServiceCardList{} }
func (m *DistributedServiceCardList) String() string { return proto.CompactTextString(m) }
func (*DistributedServiceCardList) ProtoMessage()    {}
func (*DistributedServiceCardList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcCluster, []int{15}
}

func (m *DistributedServiceCardList) GetItems() []*DistributedServiceCard {
	if m != nil {
		return m.Items
	}
	return nil
}

// HostList is a container object for list of Host objects
type HostList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Host objects
	Items []*Host `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *HostList) Reset()                    { *m = HostList{} }
func (m *HostList) String() string            { return proto.CompactTextString(m) }
func (*HostList) ProtoMessage()               {}
func (*HostList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{16} }

func (m *HostList) GetItems() []*Host {
	if m != nil {
		return m.Items
	}
	return nil
}

// LicenseList is a container object for list of License objects
type LicenseList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of License objects
	Items []*License `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *LicenseList) Reset()                    { *m = LicenseList{} }
func (m *LicenseList) String() string            { return proto.CompactTextString(m) }
func (*LicenseList) ProtoMessage()               {}
func (*LicenseList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{17} }

func (m *LicenseList) GetItems() []*License {
	if m != nil {
		return m.Items
	}
	return nil
}

// NodeList is a container object for list of Node objects
type NodeList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Node objects
	Items []*Node `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *NodeList) Reset()                    { *m = NodeList{} }
func (m *NodeList) String() string            { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()               {}
func (*NodeList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{18} }

func (m *NodeList) GetItems() []*Node {
	if m != nil {
		return m.Items
	}
	return nil
}

// SnapshotRestoreList is a container object for list of SnapshotRestore objects
type SnapshotRestoreList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of SnapshotRestore objects
	Items []*SnapshotRestore `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *SnapshotRestoreList) Reset()                    { *m = SnapshotRestoreList{} }
func (m *SnapshotRestoreList) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRestoreList) ProtoMessage()               {}
func (*SnapshotRestoreList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{19} }

func (m *SnapshotRestoreList) GetItems() []*SnapshotRestore {
	if m != nil {
		return m.Items
	}
	return nil
}

// TenantList is a container object for list of Tenant objects
type TenantList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Tenant objects
	Items []*Tenant `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *TenantList) Reset()                    { *m = TenantList{} }
func (m *TenantList) String() string            { return proto.CompactTextString(m) }
func (*TenantList) ProtoMessage()               {}
func (*TenantList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{20} }

func (m *TenantList) GetItems() []*Tenant {
	if m != nil {
		return m.Items
	}
	return nil
}

// VersionList is a container object for list of Version objects
type VersionList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Version objects
	Items []*Version `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *VersionList) Reset()                    { *m = VersionList{} }
func (m *VersionList) String() string            { return proto.CompactTextString(m) }
func (*VersionList) ProtoMessage()               {}
func (*VersionList) Descriptor() ([]byte, []int) { return fileDescriptorSvcCluster, []int{21} }

func (m *VersionList) GetItems() []*Version {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgClusterWatchHelper)(nil), "cluster.AutoMsgClusterWatchHelper")
	proto.RegisterType((*AutoMsgClusterWatchHelper_WatchEvent)(nil), "cluster.AutoMsgClusterWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgConfigurationSnapshotWatchHelper)(nil), "cluster.AutoMsgConfigurationSnapshotWatchHelper")
	proto.RegisterType((*AutoMsgConfigurationSnapshotWatchHelper_WatchEvent)(nil), "cluster.AutoMsgConfigurationSnapshotWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgCredentialsWatchHelper)(nil), "cluster.AutoMsgCredentialsWatchHelper")
	proto.RegisterType((*AutoMsgCredentialsWatchHelper_WatchEvent)(nil), "cluster.AutoMsgCredentialsWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgDSCProfileWatchHelper)(nil), "cluster.AutoMsgDSCProfileWatchHelper")
	proto.RegisterType((*AutoMsgDSCProfileWatchHelper_WatchEvent)(nil), "cluster.AutoMsgDSCProfileWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgDistributedServiceCardWatchHelper)(nil), "cluster.AutoMsgDistributedServiceCardWatchHelper")
	proto.RegisterType((*AutoMsgDistributedServiceCardWatchHelper_WatchEvent)(nil), "cluster.AutoMsgDistributedServiceCardWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgHostWatchHelper)(nil), "cluster.AutoMsgHostWatchHelper")
	proto.RegisterType((*AutoMsgHostWatchHelper_WatchEvent)(nil), "cluster.AutoMsgHostWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgLicenseWatchHelper)(nil), "cluster.AutoMsgLicenseWatchHelper")
	proto.RegisterType((*AutoMsgLicenseWatchHelper_WatchEvent)(nil), "cluster.AutoMsgLicenseWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgNodeWatchHelper)(nil), "cluster.AutoMsgNodeWatchHelper")
	proto.RegisterType((*AutoMsgNodeWatchHelper_WatchEvent)(nil), "cluster.AutoMsgNodeWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgSnapshotRestoreWatchHelper)(nil), "cluster.AutoMsgSnapshotRestoreWatchHelper")
	proto.RegisterType((*AutoMsgSnapshotRestoreWatchHelper_WatchEvent)(nil), "cluster.AutoMsgSnapshotRestoreWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgTenantWatchHelper)(nil), "cluster.AutoMsgTenantWatchHelper")
	proto.RegisterType((*AutoMsgTenantWatchHelper_WatchEvent)(nil), "cluster.AutoMsgTenantWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgVersionWatchHelper)(nil), "cluster.AutoMsgVersionWatchHelper")
	proto.RegisterType((*AutoMsgVersionWatchHelper_WatchEvent)(nil), "cluster.AutoMsgVersionWatchHelper.WatchEvent")
	proto.RegisterType((*ClusterList)(nil), "cluster.ClusterList")
	proto.RegisterType((*ConfigurationSnapshotList)(nil), "cluster.ConfigurationSnapshotList")
	proto.RegisterType((*CredentialsList)(nil), "cluster.CredentialsList")
	proto.RegisterType((*DSCProfileList)(nil), "cluster.DSCProfileList")
	proto.RegisterType((*DistributedServiceCardList)(nil), "cluster.DistributedServiceCardList")
	proto.RegisterType((*HostList)(nil), "cluster.HostList")
	proto.RegisterType((*LicenseList)(nil), "cluster.LicenseList")
	proto.RegisterType((*NodeList)(nil), "cluster.NodeList")
	proto.RegisterType((*SnapshotRestoreList)(nil), "cluster.SnapshotRestoreList")
	proto.RegisterType((*TenantList)(nil), "cluster.TenantList")
	proto.RegisterType((*VersionList)(nil), "cluster.VersionList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterV1 service

type ClusterV1Client interface {
	// Mark bootstrapping as complete for the cluster
	AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Create Cluster object
	AutoAddCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Create ConfigurationSnapshot object
	AutoAddConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Create Credentials object
	AutoAddCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error)
	// Create DSCProfile object
	AutoAddDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error)
	// Create DistributedServiceCard object
	AutoAddDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error)
	// Create Host object
	AutoAddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Create License object
	AutoAddLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error)
	// Create Node object
	AutoAddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Create SnapshotRestore object
	AutoAddSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Create Tenant object
	AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Create Version object
	AutoAddVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error)
	// Delete Cluster object
	AutoDeleteCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Delete ConfigurationSnapshot object
	AutoDeleteConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Delete Credentials object
	AutoDeleteCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error)
	// Delete DSCProfile object
	AutoDeleteDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error)
	// Delete DistributedServiceCard object
	AutoDeleteDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error)
	// Delete Host object
	AutoDeleteHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Delete License object
	AutoDeleteLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error)
	// Delete Node object
	AutoDeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Delete SnapshotRestore object
	AutoDeleteSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Delete Tenant object
	AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Delete Version object
	AutoDeleteVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error)
	// Get Cluster object
	AutoGetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Get ConfigurationSnapshot object
	AutoGetConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Get Credentials object
	AutoGetCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error)
	// Get DSCProfile object
	AutoGetDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error)
	// Get DistributedServiceCard object
	AutoGetDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error)
	// Get Host object
	AutoGetHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Get License object
	AutoGetLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error)
	// Get Node object
	AutoGetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Get SnapshotRestore object
	AutoGetSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Get Tenant object
	AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Get Version object
	AutoGetVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error)
	// Label Cluster object
	AutoLabelCluster(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Cluster, error)
	// Label ConfigurationSnapshot object
	AutoLabelConfigurationSnapshot(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Label Credentials object
	AutoLabelCredentials(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Credentials, error)
	// Label DSCProfile object
	AutoLabelDSCProfile(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*DSCProfile, error)
	// Label DistributedServiceCard object
	AutoLabelDistributedServiceCard(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*DistributedServiceCard, error)
	// Label Host object
	AutoLabelHost(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Host, error)
	// Label License object
	AutoLabelLicense(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*License, error)
	// Label Node object
	AutoLabelNode(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Node, error)
	// Label SnapshotRestore object
	AutoLabelSnapshotRestore(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Label Tenant object
	AutoLabelTenant(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Tenant, error)
	// Label Version object
	AutoLabelVersion(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Version, error)
	// List Cluster objects
	AutoListCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ClusterList, error)
	// List ConfigurationSnapshot objects
	AutoListConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ConfigurationSnapshotList, error)
	// List Credentials objects
	AutoListCredentials(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CredentialsList, error)
	// List DSCProfile objects
	AutoListDSCProfile(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DSCProfileList, error)
	// List DistributedServiceCard objects
	AutoListDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DistributedServiceCardList, error)
	// List Host objects
	AutoListHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*HostList, error)
	// List License objects
	AutoListLicense(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LicenseList, error)
	// List Node objects
	AutoListNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NodeList, error)
	// List SnapshotRestore objects
	AutoListSnapshotRestore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SnapshotRestoreList, error)
	// List Tenant objects
	AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error)
	// List Version objects
	AutoListVersion(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VersionList, error)
	// Update Cluster object
	AutoUpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	// Update ConfigurationSnapshot object
	AutoUpdateConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Update Credentials object
	AutoUpdateCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error)
	// Update DSCProfile object
	AutoUpdateDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error)
	// Update DistributedServiceCard object
	AutoUpdateDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error)
	// Update Host object
	AutoUpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error)
	// Update License object
	AutoUpdateLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error)
	// Update Node object
	AutoUpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Update SnapshotRestore object
	AutoUpdateSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Update Tenant object
	AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	// Update Version object
	AutoUpdateVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error)
	// Watch Cluster objects. Supports WebSockets or HTTP long poll
	AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchClusterClient, error)
	// Watch ConfigurationSnapshot objects. Supports WebSockets or HTTP long poll
	AutoWatchConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchConfigurationSnapshotClient, error)
	// Watch Credentials objects. Supports WebSockets or HTTP long poll
	AutoWatchCredentials(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchCredentialsClient, error)
	// Watch DSCProfile objects. Supports WebSockets or HTTP long poll
	AutoWatchDSCProfile(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchDSCProfileClient, error)
	// Watch DistributedServiceCard objects. Supports WebSockets or HTTP long poll
	AutoWatchDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchDistributedServiceCardClient, error)
	// Watch Host objects. Supports WebSockets or HTTP long poll
	AutoWatchHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchHostClient, error)
	// Watch License objects. Supports WebSockets or HTTP long poll
	AutoWatchLicense(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchLicenseClient, error)
	// Watch Node objects. Supports WebSockets or HTTP long poll
	AutoWatchNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchNodeClient, error)
	// Watch SnapshotRestore objects. Supports WebSockets or HTTP long poll
	AutoWatchSnapshotRestore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSnapshotRestoreClient, error)
	AutoWatchSvcClusterV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSvcClusterV1Client, error)
	// Watch Tenant objects. Supports WebSockets or HTTP long poll
	AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchTenantClient, error)
	// Watch Version objects. Supports WebSockets or HTTP long poll
	AutoWatchVersion(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchVersionClient, error)
	// Restore Configuration
	Restore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error)
	// Perform a Configuation Snapshot
	Save(ctx context.Context, in *ConfigurationSnapshotRequest, opts ...grpc.CallOption) (*ConfigurationSnapshot, error)
	// Update TLS Configuration for cluster
	UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest, opts ...grpc.CallOption) (*Cluster, error)
}

type clusterV1Client struct {
	cc *grpc.ClientConn
}

func NewClusterV1Client(cc *grpc.ClientConn) ClusterV1Client {
	return &clusterV1Client{cc}
}

func (c *clusterV1Client) AuthBootstrapComplete(ctx context.Context, in *ClusterAuthBootstrapRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AuthBootstrapComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error) {
	out := new(DSCProfile)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error) {
	out := new(DistributedServiceCard)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoAddVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoAddVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error) {
	out := new(DSCProfile)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error) {
	out := new(DistributedServiceCard)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoDeleteVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoDeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error) {
	out := new(DSCProfile)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error) {
	out := new(DistributedServiceCard)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoGetVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoGetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelCluster(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelConfigurationSnapshot(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelCredentials(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelDSCProfile(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*DSCProfile, error) {
	out := new(DSCProfile)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelDistributedServiceCard(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*DistributedServiceCard, error) {
	out := new(DistributedServiceCard)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelHost(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelLicense(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelNode(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelSnapshotRestore(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelTenant(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoLabelVersion(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoLabelVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ClusterList, error) {
	out := new(ClusterList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ConfigurationSnapshotList, error) {
	out := new(ConfigurationSnapshotList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListCredentials(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CredentialsList, error) {
	out := new(CredentialsList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListDSCProfile(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DSCProfileList, error) {
	out := new(DSCProfileList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*DistributedServiceCardList, error) {
	out := new(DistributedServiceCardList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListLicense(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LicenseList, error) {
	out := new(LicenseList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListSnapshotRestore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SnapshotRestoreList, error) {
	out := new(SnapshotRestoreList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error) {
	out := new(TenantList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoListVersion(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VersionList, error) {
	out := new(VersionList)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoListVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateConfigurationSnapshot(ctx context.Context, in *ConfigurationSnapshot, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateConfigurationSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateDSCProfile(ctx context.Context, in *DSCProfile, opts ...grpc.CallOption) (*DSCProfile, error) {
	out := new(DSCProfile)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateDSCProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateDistributedServiceCard(ctx context.Context, in *DistributedServiceCard, opts ...grpc.CallOption) (*DistributedServiceCard, error) {
	out := new(DistributedServiceCard)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateDistributedServiceCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateHost(ctx context.Context, in *Host, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateLicense(ctx context.Context, in *License, opts ...grpc.CallOption) (*License, error) {
	out := new(License)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateLicense", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateSnapshotRestore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateSnapshotRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoUpdateVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/AutoUpdateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchClusterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[0], c.cc, "/cluster.ClusterV1/AutoWatchCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchClusterClient interface {
	Recv() (*AutoMsgClusterWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchClusterClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchClusterClient) Recv() (*AutoMsgClusterWatchHelper, error) {
	m := new(AutoMsgClusterWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchConfigurationSnapshot(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchConfigurationSnapshotClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[1], c.cc, "/cluster.ClusterV1/AutoWatchConfigurationSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchConfigurationSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchConfigurationSnapshotClient interface {
	Recv() (*AutoMsgConfigurationSnapshotWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchConfigurationSnapshotClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchConfigurationSnapshotClient) Recv() (*AutoMsgConfigurationSnapshotWatchHelper, error) {
	m := new(AutoMsgConfigurationSnapshotWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchCredentials(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchCredentialsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[2], c.cc, "/cluster.ClusterV1/AutoWatchCredentials", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchCredentialsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchCredentialsClient interface {
	Recv() (*AutoMsgCredentialsWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchCredentialsClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchCredentialsClient) Recv() (*AutoMsgCredentialsWatchHelper, error) {
	m := new(AutoMsgCredentialsWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchDSCProfile(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchDSCProfileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[3], c.cc, "/cluster.ClusterV1/AutoWatchDSCProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchDSCProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchDSCProfileClient interface {
	Recv() (*AutoMsgDSCProfileWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchDSCProfileClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchDSCProfileClient) Recv() (*AutoMsgDSCProfileWatchHelper, error) {
	m := new(AutoMsgDSCProfileWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchDistributedServiceCard(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchDistributedServiceCardClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[4], c.cc, "/cluster.ClusterV1/AutoWatchDistributedServiceCard", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchDistributedServiceCardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchDistributedServiceCardClient interface {
	Recv() (*AutoMsgDistributedServiceCardWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchDistributedServiceCardClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchDistributedServiceCardClient) Recv() (*AutoMsgDistributedServiceCardWatchHelper, error) {
	m := new(AutoMsgDistributedServiceCardWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchHost(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchHostClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[5], c.cc, "/cluster.ClusterV1/AutoWatchHost", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchHostClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchHostClient interface {
	Recv() (*AutoMsgHostWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchHostClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchHostClient) Recv() (*AutoMsgHostWatchHelper, error) {
	m := new(AutoMsgHostWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchLicense(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchLicenseClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[6], c.cc, "/cluster.ClusterV1/AutoWatchLicense", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchLicenseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchLicenseClient interface {
	Recv() (*AutoMsgLicenseWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchLicenseClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchLicenseClient) Recv() (*AutoMsgLicenseWatchHelper, error) {
	m := new(AutoMsgLicenseWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchNodeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[7], c.cc, "/cluster.ClusterV1/AutoWatchNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchNodeClient interface {
	Recv() (*AutoMsgNodeWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchNodeClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchNodeClient) Recv() (*AutoMsgNodeWatchHelper, error) {
	m := new(AutoMsgNodeWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchSnapshotRestore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSnapshotRestoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[8], c.cc, "/cluster.ClusterV1/AutoWatchSnapshotRestore", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchSnapshotRestoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchSnapshotRestoreClient interface {
	Recv() (*AutoMsgSnapshotRestoreWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchSnapshotRestoreClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchSnapshotRestoreClient) Recv() (*AutoMsgSnapshotRestoreWatchHelper, error) {
	m := new(AutoMsgSnapshotRestoreWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchSvcClusterV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchSvcClusterV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[9], c.cc, "/cluster.ClusterV1/AutoWatchSvcClusterV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchSvcClusterV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchSvcClusterV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type clusterV1AutoWatchSvcClusterV1Client struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchSvcClusterV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchTenantClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[10], c.cc, "/cluster.ClusterV1/AutoWatchTenant", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchTenantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchTenantClient interface {
	Recv() (*AutoMsgTenantWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchTenantClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchTenantClient) Recv() (*AutoMsgTenantWatchHelper, error) {
	m := new(AutoMsgTenantWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) AutoWatchVersion(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ClusterV1_AutoWatchVersionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterV1_serviceDesc.Streams[11], c.cc, "/cluster.ClusterV1/AutoWatchVersion", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterV1AutoWatchVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterV1_AutoWatchVersionClient interface {
	Recv() (*AutoMsgVersionWatchHelper, error)
	grpc.ClientStream
}

type clusterV1AutoWatchVersionClient struct {
	grpc.ClientStream
}

func (x *clusterV1AutoWatchVersionClient) Recv() (*AutoMsgVersionWatchHelper, error) {
	m := new(AutoMsgVersionWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterV1Client) Restore(ctx context.Context, in *SnapshotRestore, opts ...grpc.CallOption) (*SnapshotRestore, error) {
	out := new(SnapshotRestore)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/Restore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) Save(ctx context.Context, in *ConfigurationSnapshotRequest, opts ...grpc.CallOption) (*ConfigurationSnapshot, error) {
	out := new(ConfigurationSnapshot)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterV1Client) UpdateTLSConfig(ctx context.Context, in *UpdateTLSConfigRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := grpc.Invoke(ctx, "/cluster.ClusterV1/UpdateTLSConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterV1 service

type ClusterV1Server interface {
	// Mark bootstrapping as complete for the cluster
	AuthBootstrapComplete(context.Context, *ClusterAuthBootstrapRequest) (*Cluster, error)
	// Create Cluster object
	AutoAddCluster(context.Context, *Cluster) (*Cluster, error)
	// Create ConfigurationSnapshot object
	AutoAddConfigurationSnapshot(context.Context, *ConfigurationSnapshot) (*ConfigurationSnapshot, error)
	// Create Credentials object
	AutoAddCredentials(context.Context, *Credentials) (*Credentials, error)
	// Create DSCProfile object
	AutoAddDSCProfile(context.Context, *DSCProfile) (*DSCProfile, error)
	// Create DistributedServiceCard object
	AutoAddDistributedServiceCard(context.Context, *DistributedServiceCard) (*DistributedServiceCard, error)
	// Create Host object
	AutoAddHost(context.Context, *Host) (*Host, error)
	// Create License object
	AutoAddLicense(context.Context, *License) (*License, error)
	// Create Node object
	AutoAddNode(context.Context, *Node) (*Node, error)
	// Create SnapshotRestore object
	AutoAddSnapshotRestore(context.Context, *SnapshotRestore) (*SnapshotRestore, error)
	// Create Tenant object
	AutoAddTenant(context.Context, *Tenant) (*Tenant, error)
	// Create Version object
	AutoAddVersion(context.Context, *Version) (*Version, error)
	// Delete Cluster object
	AutoDeleteCluster(context.Context, *Cluster) (*Cluster, error)
	// Delete ConfigurationSnapshot object
	AutoDeleteConfigurationSnapshot(context.Context, *ConfigurationSnapshot) (*ConfigurationSnapshot, error)
	// Delete Credentials object
	AutoDeleteCredentials(context.Context, *Credentials) (*Credentials, error)
	// Delete DSCProfile object
	AutoDeleteDSCProfile(context.Context, *DSCProfile) (*DSCProfile, error)
	// Delete DistributedServiceCard object
	AutoDeleteDistributedServiceCard(context.Context, *DistributedServiceCard) (*DistributedServiceCard, error)
	// Delete Host object
	AutoDeleteHost(context.Context, *Host) (*Host, error)
	// Delete License object
	AutoDeleteLicense(context.Context, *License) (*License, error)
	// Delete Node object
	AutoDeleteNode(context.Context, *Node) (*Node, error)
	// Delete SnapshotRestore object
	AutoDeleteSnapshotRestore(context.Context, *SnapshotRestore) (*SnapshotRestore, error)
	// Delete Tenant object
	AutoDeleteTenant(context.Context, *Tenant) (*Tenant, error)
	// Delete Version object
	AutoDeleteVersion(context.Context, *Version) (*Version, error)
	// Get Cluster object
	AutoGetCluster(context.Context, *Cluster) (*Cluster, error)
	// Get ConfigurationSnapshot object
	AutoGetConfigurationSnapshot(context.Context, *ConfigurationSnapshot) (*ConfigurationSnapshot, error)
	// Get Credentials object
	AutoGetCredentials(context.Context, *Credentials) (*Credentials, error)
	// Get DSCProfile object
	AutoGetDSCProfile(context.Context, *DSCProfile) (*DSCProfile, error)
	// Get DistributedServiceCard object
	AutoGetDistributedServiceCard(context.Context, *DistributedServiceCard) (*DistributedServiceCard, error)
	// Get Host object
	AutoGetHost(context.Context, *Host) (*Host, error)
	// Get License object
	AutoGetLicense(context.Context, *License) (*License, error)
	// Get Node object
	AutoGetNode(context.Context, *Node) (*Node, error)
	// Get SnapshotRestore object
	AutoGetSnapshotRestore(context.Context, *SnapshotRestore) (*SnapshotRestore, error)
	// Get Tenant object
	AutoGetTenant(context.Context, *Tenant) (*Tenant, error)
	// Get Version object
	AutoGetVersion(context.Context, *Version) (*Version, error)
	// Label Cluster object
	AutoLabelCluster(context.Context, *api.Label) (*Cluster, error)
	// Label ConfigurationSnapshot object
	AutoLabelConfigurationSnapshot(context.Context, *api.Label) (*ConfigurationSnapshot, error)
	// Label Credentials object
	AutoLabelCredentials(context.Context, *api.Label) (*Credentials, error)
	// Label DSCProfile object
	AutoLabelDSCProfile(context.Context, *api.Label) (*DSCProfile, error)
	// Label DistributedServiceCard object
	AutoLabelDistributedServiceCard(context.Context, *api.Label) (*DistributedServiceCard, error)
	// Label Host object
	AutoLabelHost(context.Context, *api.Label) (*Host, error)
	// Label License object
	AutoLabelLicense(context.Context, *api.Label) (*License, error)
	// Label Node object
	AutoLabelNode(context.Context, *api.Label) (*Node, error)
	// Label SnapshotRestore object
	AutoLabelSnapshotRestore(context.Context, *api.Label) (*SnapshotRestore, error)
	// Label Tenant object
	AutoLabelTenant(context.Context, *api.Label) (*Tenant, error)
	// Label Version object
	AutoLabelVersion(context.Context, *api.Label) (*Version, error)
	// List Cluster objects
	AutoListCluster(context.Context, *api.ListWatchOptions) (*ClusterList, error)
	// List ConfigurationSnapshot objects
	AutoListConfigurationSnapshot(context.Context, *api.ListWatchOptions) (*ConfigurationSnapshotList, error)
	// List Credentials objects
	AutoListCredentials(context.Context, *api.ListWatchOptions) (*CredentialsList, error)
	// List DSCProfile objects
	AutoListDSCProfile(context.Context, *api.ListWatchOptions) (*DSCProfileList, error)
	// List DistributedServiceCard objects
	AutoListDistributedServiceCard(context.Context, *api.ListWatchOptions) (*DistributedServiceCardList, error)
	// List Host objects
	AutoListHost(context.Context, *api.ListWatchOptions) (*HostList, error)
	// List License objects
	AutoListLicense(context.Context, *api.ListWatchOptions) (*LicenseList, error)
	// List Node objects
	AutoListNode(context.Context, *api.ListWatchOptions) (*NodeList, error)
	// List SnapshotRestore objects
	AutoListSnapshotRestore(context.Context, *api.ListWatchOptions) (*SnapshotRestoreList, error)
	// List Tenant objects
	AutoListTenant(context.Context, *api.ListWatchOptions) (*TenantList, error)
	// List Version objects
	AutoListVersion(context.Context, *api.ListWatchOptions) (*VersionList, error)
	// Update Cluster object
	AutoUpdateCluster(context.Context, *Cluster) (*Cluster, error)
	// Update ConfigurationSnapshot object
	AutoUpdateConfigurationSnapshot(context.Context, *ConfigurationSnapshot) (*ConfigurationSnapshot, error)
	// Update Credentials object
	AutoUpdateCredentials(context.Context, *Credentials) (*Credentials, error)
	// Update DSCProfile object
	AutoUpdateDSCProfile(context.Context, *DSCProfile) (*DSCProfile, error)
	// Update DistributedServiceCard object
	AutoUpdateDistributedServiceCard(context.Context, *DistributedServiceCard) (*DistributedServiceCard, error)
	// Update Host object
	AutoUpdateHost(context.Context, *Host) (*Host, error)
	// Update License object
	AutoUpdateLicense(context.Context, *License) (*License, error)
	// Update Node object
	AutoUpdateNode(context.Context, *Node) (*Node, error)
	// Update SnapshotRestore object
	AutoUpdateSnapshotRestore(context.Context, *SnapshotRestore) (*SnapshotRestore, error)
	// Update Tenant object
	AutoUpdateTenant(context.Context, *Tenant) (*Tenant, error)
	// Update Version object
	AutoUpdateVersion(context.Context, *Version) (*Version, error)
	// Watch Cluster objects. Supports WebSockets or HTTP long poll
	AutoWatchCluster(*api.ListWatchOptions, ClusterV1_AutoWatchClusterServer) error
	// Watch ConfigurationSnapshot objects. Supports WebSockets or HTTP long poll
	AutoWatchConfigurationSnapshot(*api.ListWatchOptions, ClusterV1_AutoWatchConfigurationSnapshotServer) error
	// Watch Credentials objects. Supports WebSockets or HTTP long poll
	AutoWatchCredentials(*api.ListWatchOptions, ClusterV1_AutoWatchCredentialsServer) error
	// Watch DSCProfile objects. Supports WebSockets or HTTP long poll
	AutoWatchDSCProfile(*api.ListWatchOptions, ClusterV1_AutoWatchDSCProfileServer) error
	// Watch DistributedServiceCard objects. Supports WebSockets or HTTP long poll
	AutoWatchDistributedServiceCard(*api.ListWatchOptions, ClusterV1_AutoWatchDistributedServiceCardServer) error
	// Watch Host objects. Supports WebSockets or HTTP long poll
	AutoWatchHost(*api.ListWatchOptions, ClusterV1_AutoWatchHostServer) error
	// Watch License objects. Supports WebSockets or HTTP long poll
	AutoWatchLicense(*api.ListWatchOptions, ClusterV1_AutoWatchLicenseServer) error
	// Watch Node objects. Supports WebSockets or HTTP long poll
	AutoWatchNode(*api.ListWatchOptions, ClusterV1_AutoWatchNodeServer) error
	// Watch SnapshotRestore objects. Supports WebSockets or HTTP long poll
	AutoWatchSnapshotRestore(*api.ListWatchOptions, ClusterV1_AutoWatchSnapshotRestoreServer) error
	AutoWatchSvcClusterV1(*api.AggWatchOptions, ClusterV1_AutoWatchSvcClusterV1Server) error
	// Watch Tenant objects. Supports WebSockets or HTTP long poll
	AutoWatchTenant(*api.ListWatchOptions, ClusterV1_AutoWatchTenantServer) error
	// Watch Version objects. Supports WebSockets or HTTP long poll
	AutoWatchVersion(*api.ListWatchOptions, ClusterV1_AutoWatchVersionServer) error
	// Restore Configuration
	Restore(context.Context, *SnapshotRestore) (*SnapshotRestore, error)
	// Perform a Configuation Snapshot
	Save(context.Context, *ConfigurationSnapshotRequest) (*ConfigurationSnapshot, error)
	// Update TLS Configuration for cluster
	UpdateTLSConfig(context.Context, *UpdateTLSConfigRequest) (*Cluster, error)
}

func RegisterClusterV1Server(s *grpc.Server, srv ClusterV1Server) {
	s.RegisterService(&_ClusterV1_serviceDesc, srv)
}

func _ClusterV1_AuthBootstrapComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterAuthBootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AuthBootstrapComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AuthBootstrapComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AuthBootstrapComplete(ctx, req.(*ClusterAuthBootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddConfigurationSnapshot(ctx, req.(*ConfigurationSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSCProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddDSCProfile(ctx, req.(*DSCProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributedServiceCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddDistributedServiceCard(ctx, req.(*DistributedServiceCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddSnapshotRestore(ctx, req.(*SnapshotRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoAddVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoAddVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoAddVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoAddVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteConfigurationSnapshot(ctx, req.(*ConfigurationSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSCProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteDSCProfile(ctx, req.(*DSCProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributedServiceCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteDistributedServiceCard(ctx, req.(*DistributedServiceCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteSnapshotRestore(ctx, req.(*SnapshotRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoDeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoDeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoDeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoDeleteVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetConfigurationSnapshot(ctx, req.(*ConfigurationSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSCProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetDSCProfile(ctx, req.(*DSCProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributedServiceCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetDistributedServiceCard(ctx, req.(*DistributedServiceCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetSnapshotRestore(ctx, req.(*SnapshotRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoGetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoGetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoGetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoGetVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelCluster(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelConfigurationSnapshot(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelCredentials(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelDSCProfile(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelDistributedServiceCard(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelHost(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelLicense(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelNode(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelSnapshotRestore(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelTenant(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoLabelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoLabelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoLabelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoLabelVersion(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListCluster(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListConfigurationSnapshot(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListCredentials(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListDSCProfile(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListDistributedServiceCard(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListHost(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListLicense(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListNode(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListSnapshotRestore(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListTenant(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoListVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoListVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoListVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoListVersion(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateConfigurationSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationSnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateConfigurationSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateConfigurationSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateConfigurationSnapshot(ctx, req.(*ConfigurationSnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateDSCProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSCProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateDSCProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateDSCProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateDSCProfile(ctx, req.(*DSCProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateDistributedServiceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributedServiceCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateDistributedServiceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateDistributedServiceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateDistributedServiceCard(ctx, req.(*DistributedServiceCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateHost(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(License)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateLicense(ctx, req.(*License))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateSnapshotRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateSnapshotRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateSnapshotRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateSnapshotRestore(ctx, req.(*SnapshotRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoUpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).AutoUpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/AutoUpdateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).AutoUpdateVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_AutoWatchCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchCluster(m, &clusterV1AutoWatchClusterServer{stream})
}

type ClusterV1_AutoWatchClusterServer interface {
	Send(*AutoMsgClusterWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchClusterServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchClusterServer) Send(m *AutoMsgClusterWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchConfigurationSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchConfigurationSnapshot(m, &clusterV1AutoWatchConfigurationSnapshotServer{stream})
}

type ClusterV1_AutoWatchConfigurationSnapshotServer interface {
	Send(*AutoMsgConfigurationSnapshotWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchConfigurationSnapshotServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchConfigurationSnapshotServer) Send(m *AutoMsgConfigurationSnapshotWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchCredentials(m, &clusterV1AutoWatchCredentialsServer{stream})
}

type ClusterV1_AutoWatchCredentialsServer interface {
	Send(*AutoMsgCredentialsWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchCredentialsServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchCredentialsServer) Send(m *AutoMsgCredentialsWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchDSCProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchDSCProfile(m, &clusterV1AutoWatchDSCProfileServer{stream})
}

type ClusterV1_AutoWatchDSCProfileServer interface {
	Send(*AutoMsgDSCProfileWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchDSCProfileServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchDSCProfileServer) Send(m *AutoMsgDSCProfileWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchDistributedServiceCard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchDistributedServiceCard(m, &clusterV1AutoWatchDistributedServiceCardServer{stream})
}

type ClusterV1_AutoWatchDistributedServiceCardServer interface {
	Send(*AutoMsgDistributedServiceCardWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchDistributedServiceCardServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchDistributedServiceCardServer) Send(m *AutoMsgDistributedServiceCardWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchHost_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchHost(m, &clusterV1AutoWatchHostServer{stream})
}

type ClusterV1_AutoWatchHostServer interface {
	Send(*AutoMsgHostWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchHostServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchHostServer) Send(m *AutoMsgHostWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchLicense_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchLicense(m, &clusterV1AutoWatchLicenseServer{stream})
}

type ClusterV1_AutoWatchLicenseServer interface {
	Send(*AutoMsgLicenseWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchLicenseServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchLicenseServer) Send(m *AutoMsgLicenseWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchNode(m, &clusterV1AutoWatchNodeServer{stream})
}

type ClusterV1_AutoWatchNodeServer interface {
	Send(*AutoMsgNodeWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchNodeServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchNodeServer) Send(m *AutoMsgNodeWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchSnapshotRestore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchSnapshotRestore(m, &clusterV1AutoWatchSnapshotRestoreServer{stream})
}

type ClusterV1_AutoWatchSnapshotRestoreServer interface {
	Send(*AutoMsgSnapshotRestoreWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchSnapshotRestoreServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchSnapshotRestoreServer) Send(m *AutoMsgSnapshotRestoreWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchSvcClusterV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.AggWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchSvcClusterV1(m, &clusterV1AutoWatchSvcClusterV1Server{stream})
}

type ClusterV1_AutoWatchSvcClusterV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type clusterV1AutoWatchSvcClusterV1Server struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchSvcClusterV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchTenant(m, &clusterV1AutoWatchTenantServer{stream})
}

type ClusterV1_AutoWatchTenantServer interface {
	Send(*AutoMsgTenantWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchTenantServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchTenantServer) Send(m *AutoMsgTenantWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_AutoWatchVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterV1Server).AutoWatchVersion(m, &clusterV1AutoWatchVersionServer{stream})
}

type ClusterV1_AutoWatchVersionServer interface {
	Send(*AutoMsgVersionWatchHelper) error
	grpc.ServerStream
}

type clusterV1AutoWatchVersionServer struct {
	grpc.ServerStream
}

func (x *clusterV1AutoWatchVersionServer) Send(m *AutoMsgVersionWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterV1_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRestore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).Restore(ctx, req.(*SnapshotRestore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).Save(ctx, req.(*ConfigurationSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterV1_UpdateTLSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTLSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterV1Server).UpdateTLSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterV1/UpdateTLSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterV1Server).UpdateTLSConfig(ctx, req.(*UpdateTLSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterV1",
	HandlerType: (*ClusterV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthBootstrapComplete",
			Handler:    _ClusterV1_AuthBootstrapComplete_Handler,
		},
		{
			MethodName: "AutoAddCluster",
			Handler:    _ClusterV1_AutoAddCluster_Handler,
		},
		{
			MethodName: "AutoAddConfigurationSnapshot",
			Handler:    _ClusterV1_AutoAddConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoAddCredentials",
			Handler:    _ClusterV1_AutoAddCredentials_Handler,
		},
		{
			MethodName: "AutoAddDSCProfile",
			Handler:    _ClusterV1_AutoAddDSCProfile_Handler,
		},
		{
			MethodName: "AutoAddDistributedServiceCard",
			Handler:    _ClusterV1_AutoAddDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoAddHost",
			Handler:    _ClusterV1_AutoAddHost_Handler,
		},
		{
			MethodName: "AutoAddLicense",
			Handler:    _ClusterV1_AutoAddLicense_Handler,
		},
		{
			MethodName: "AutoAddNode",
			Handler:    _ClusterV1_AutoAddNode_Handler,
		},
		{
			MethodName: "AutoAddSnapshotRestore",
			Handler:    _ClusterV1_AutoAddSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoAddTenant",
			Handler:    _ClusterV1_AutoAddTenant_Handler,
		},
		{
			MethodName: "AutoAddVersion",
			Handler:    _ClusterV1_AutoAddVersion_Handler,
		},
		{
			MethodName: "AutoDeleteCluster",
			Handler:    _ClusterV1_AutoDeleteCluster_Handler,
		},
		{
			MethodName: "AutoDeleteConfigurationSnapshot",
			Handler:    _ClusterV1_AutoDeleteConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoDeleteCredentials",
			Handler:    _ClusterV1_AutoDeleteCredentials_Handler,
		},
		{
			MethodName: "AutoDeleteDSCProfile",
			Handler:    _ClusterV1_AutoDeleteDSCProfile_Handler,
		},
		{
			MethodName: "AutoDeleteDistributedServiceCard",
			Handler:    _ClusterV1_AutoDeleteDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoDeleteHost",
			Handler:    _ClusterV1_AutoDeleteHost_Handler,
		},
		{
			MethodName: "AutoDeleteLicense",
			Handler:    _ClusterV1_AutoDeleteLicense_Handler,
		},
		{
			MethodName: "AutoDeleteNode",
			Handler:    _ClusterV1_AutoDeleteNode_Handler,
		},
		{
			MethodName: "AutoDeleteSnapshotRestore",
			Handler:    _ClusterV1_AutoDeleteSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoDeleteTenant",
			Handler:    _ClusterV1_AutoDeleteTenant_Handler,
		},
		{
			MethodName: "AutoDeleteVersion",
			Handler:    _ClusterV1_AutoDeleteVersion_Handler,
		},
		{
			MethodName: "AutoGetCluster",
			Handler:    _ClusterV1_AutoGetCluster_Handler,
		},
		{
			MethodName: "AutoGetConfigurationSnapshot",
			Handler:    _ClusterV1_AutoGetConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoGetCredentials",
			Handler:    _ClusterV1_AutoGetCredentials_Handler,
		},
		{
			MethodName: "AutoGetDSCProfile",
			Handler:    _ClusterV1_AutoGetDSCProfile_Handler,
		},
		{
			MethodName: "AutoGetDistributedServiceCard",
			Handler:    _ClusterV1_AutoGetDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoGetHost",
			Handler:    _ClusterV1_AutoGetHost_Handler,
		},
		{
			MethodName: "AutoGetLicense",
			Handler:    _ClusterV1_AutoGetLicense_Handler,
		},
		{
			MethodName: "AutoGetNode",
			Handler:    _ClusterV1_AutoGetNode_Handler,
		},
		{
			MethodName: "AutoGetSnapshotRestore",
			Handler:    _ClusterV1_AutoGetSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoGetTenant",
			Handler:    _ClusterV1_AutoGetTenant_Handler,
		},
		{
			MethodName: "AutoGetVersion",
			Handler:    _ClusterV1_AutoGetVersion_Handler,
		},
		{
			MethodName: "AutoLabelCluster",
			Handler:    _ClusterV1_AutoLabelCluster_Handler,
		},
		{
			MethodName: "AutoLabelConfigurationSnapshot",
			Handler:    _ClusterV1_AutoLabelConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoLabelCredentials",
			Handler:    _ClusterV1_AutoLabelCredentials_Handler,
		},
		{
			MethodName: "AutoLabelDSCProfile",
			Handler:    _ClusterV1_AutoLabelDSCProfile_Handler,
		},
		{
			MethodName: "AutoLabelDistributedServiceCard",
			Handler:    _ClusterV1_AutoLabelDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoLabelHost",
			Handler:    _ClusterV1_AutoLabelHost_Handler,
		},
		{
			MethodName: "AutoLabelLicense",
			Handler:    _ClusterV1_AutoLabelLicense_Handler,
		},
		{
			MethodName: "AutoLabelNode",
			Handler:    _ClusterV1_AutoLabelNode_Handler,
		},
		{
			MethodName: "AutoLabelSnapshotRestore",
			Handler:    _ClusterV1_AutoLabelSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoLabelTenant",
			Handler:    _ClusterV1_AutoLabelTenant_Handler,
		},
		{
			MethodName: "AutoLabelVersion",
			Handler:    _ClusterV1_AutoLabelVersion_Handler,
		},
		{
			MethodName: "AutoListCluster",
			Handler:    _ClusterV1_AutoListCluster_Handler,
		},
		{
			MethodName: "AutoListConfigurationSnapshot",
			Handler:    _ClusterV1_AutoListConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoListCredentials",
			Handler:    _ClusterV1_AutoListCredentials_Handler,
		},
		{
			MethodName: "AutoListDSCProfile",
			Handler:    _ClusterV1_AutoListDSCProfile_Handler,
		},
		{
			MethodName: "AutoListDistributedServiceCard",
			Handler:    _ClusterV1_AutoListDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoListHost",
			Handler:    _ClusterV1_AutoListHost_Handler,
		},
		{
			MethodName: "AutoListLicense",
			Handler:    _ClusterV1_AutoListLicense_Handler,
		},
		{
			MethodName: "AutoListNode",
			Handler:    _ClusterV1_AutoListNode_Handler,
		},
		{
			MethodName: "AutoListSnapshotRestore",
			Handler:    _ClusterV1_AutoListSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoListTenant",
			Handler:    _ClusterV1_AutoListTenant_Handler,
		},
		{
			MethodName: "AutoListVersion",
			Handler:    _ClusterV1_AutoListVersion_Handler,
		},
		{
			MethodName: "AutoUpdateCluster",
			Handler:    _ClusterV1_AutoUpdateCluster_Handler,
		},
		{
			MethodName: "AutoUpdateConfigurationSnapshot",
			Handler:    _ClusterV1_AutoUpdateConfigurationSnapshot_Handler,
		},
		{
			MethodName: "AutoUpdateCredentials",
			Handler:    _ClusterV1_AutoUpdateCredentials_Handler,
		},
		{
			MethodName: "AutoUpdateDSCProfile",
			Handler:    _ClusterV1_AutoUpdateDSCProfile_Handler,
		},
		{
			MethodName: "AutoUpdateDistributedServiceCard",
			Handler:    _ClusterV1_AutoUpdateDistributedServiceCard_Handler,
		},
		{
			MethodName: "AutoUpdateHost",
			Handler:    _ClusterV1_AutoUpdateHost_Handler,
		},
		{
			MethodName: "AutoUpdateLicense",
			Handler:    _ClusterV1_AutoUpdateLicense_Handler,
		},
		{
			MethodName: "AutoUpdateNode",
			Handler:    _ClusterV1_AutoUpdateNode_Handler,
		},
		{
			MethodName: "AutoUpdateSnapshotRestore",
			Handler:    _ClusterV1_AutoUpdateSnapshotRestore_Handler,
		},
		{
			MethodName: "AutoUpdateTenant",
			Handler:    _ClusterV1_AutoUpdateTenant_Handler,
		},
		{
			MethodName: "AutoUpdateVersion",
			Handler:    _ClusterV1_AutoUpdateVersion_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _ClusterV1_Restore_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _ClusterV1_Save_Handler,
		},
		{
			MethodName: "UpdateTLSConfig",
			Handler:    _ClusterV1_UpdateTLSConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchCluster",
			Handler:       _ClusterV1_AutoWatchCluster_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchConfigurationSnapshot",
			Handler:       _ClusterV1_AutoWatchConfigurationSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchCredentials",
			Handler:       _ClusterV1_AutoWatchCredentials_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchDSCProfile",
			Handler:       _ClusterV1_AutoWatchDSCProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchDistributedServiceCard",
			Handler:       _ClusterV1_AutoWatchDistributedServiceCard_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchHost",
			Handler:       _ClusterV1_AutoWatchHost_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchLicense",
			Handler:       _ClusterV1_AutoWatchLicense_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchNode",
			Handler:       _ClusterV1_AutoWatchNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSnapshotRestore",
			Handler:       _ClusterV1_AutoWatchSnapshotRestore_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcClusterV1",
			Handler:       _ClusterV1_AutoWatchSvcClusterV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchTenant",
			Handler:       _ClusterV1_AutoWatchTenant_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchVersion",
			Handler:       _ClusterV1_AutoWatchVersion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_cluster.proto",
}

func (m *AutoMsgClusterWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgClusterWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgConfigurationSnapshotWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgConfigurationSnapshotWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgCredentialsWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCredentialsWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgDSCProfileWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgDSCProfileWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgDistributedServiceCardWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgDistributedServiceCardWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgHostWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgHostWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgHostWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgLicenseWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLicenseWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AutoMsgNodeWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNodeWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n8, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AutoMsgSnapshotRestoreWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSnapshotRestoreWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n9, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AutoMsgTenantWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTenantWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n10, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *AutoMsgVersionWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgVersionWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcCluster(dAtA, i, uint64(m.Object.Size()))
		n11, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ClusterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConfigurationSnapshotList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshotList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n15, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CredentialsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n16, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n17, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DSCProfileList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfileList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n18, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n19, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DistributedServiceCardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributedServiceCardList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n20, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n21, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HostList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n22, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n23, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LicenseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n24, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n25, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n26, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n27, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnapshotRestoreList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRestoreList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n28, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n29, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n30, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n31, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VersionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.TypeMeta.Size()))
	n32, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcCluster(dAtA, i, uint64(m.ListMeta.Size()))
	n33, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcCluster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgClusterWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgConfigurationSnapshotWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgCredentialsWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgCredentialsWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgDSCProfileWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgDistributedServiceCardWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgHostWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgLicenseWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgLicenseWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgNodeWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgSnapshotRestoreWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgTenantWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *AutoMsgVersionWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgVersionWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcCluster(uint64(l))
	}
	return n
}

func (m *ClusterList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *ConfigurationSnapshotList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *CredentialsList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *DSCProfileList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *DistributedServiceCardList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *HostList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *LicenseList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *NodeList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *SnapshotRestoreList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *TenantList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func (m *VersionList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcCluster(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcCluster(uint64(l))
		}
	}
	return n
}

func sovSvcCluster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcCluster(x uint64) (n int) {
	return sovSvcCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgClusterWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgClusterWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgClusterWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgClusterWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgClusterWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Cluster{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgConfigurationSnapshotWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgConfigurationSnapshotWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgConfigurationSnapshotWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgConfigurationSnapshotWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgConfigurationSnapshotWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &ConfigurationSnapshot{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCredentialsWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCredentialsWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCredentialsWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgCredentialsWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCredentialsWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Credentials{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgDSCProfileWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgDSCProfileWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgDSCProfileWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgDSCProfileWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgDSCProfileWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &DSCProfile{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgDistributedServiceCardWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgDistributedServiceCardWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgDistributedServiceCardWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgDistributedServiceCardWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgDistributedServiceCardWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &DistributedServiceCard{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgHostWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgHostWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgHostWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgHostWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgHostWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Host{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgLicenseWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgLicenseWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgLicenseWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgLicenseWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgLicenseWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &License{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNodeWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNodeWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNodeWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgNodeWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNodeWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Node{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSnapshotRestoreWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSnapshotRestoreWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSnapshotRestoreWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgSnapshotRestoreWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSnapshotRestoreWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &SnapshotRestore{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTenantWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgTenantWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTenantWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Tenant{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgVersionWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgVersionWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgVersionWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgVersionWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgVersionWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Version{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Cluster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationSnapshotList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationSnapshotList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationSnapshotList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ConfigurationSnapshot{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Credentials{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCProfileList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfileList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfileList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DSCProfile{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributedServiceCardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributedServiceCardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributedServiceCardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DistributedServiceCard{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Host{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &License{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Node{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRestoreList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRestoreList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRestoreList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SnapshotRestore{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Tenant{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Version{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcCluster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_cluster.proto", fileDescriptorSvcCluster) }

var fileDescriptorSvcCluster = []byte{
	// 2984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0x4d, 0x6c, 0xdc, 0xc6,
	0xd9, 0x16, 0x6d, 0x59, 0xb6, 0x47, 0xb6, 0x7e, 0x46, 0x96, 0xbc, 0xcb, 0x28, 0xda, 0x35, 0x23,
	0x7f, 0xd6, 0xa7, 0xd8, 0xda, 0xb5, 0x6c, 0xa7, 0x89, 0x93, 0xc6, 0xb1, 0x6c, 0x43, 0x0e, 0xea,
	0xbf, 0x48, 0x4a, 0xdc, 0x18, 0x6d, 0x6d, 0x6a, 0x77, 0xb4, 0xa2, 0xbb, 0x22, 0xb7, 0x4b, 0xae,
	0x52, 0xf7, 0x07, 0x05, 0xba, 0x4a, 0x11, 0xa0, 0x87, 0x22, 0x6e, 0x2f, 0x6d, 0x0a, 0xb4, 0x10,
	0xd0, 0x1e, 0x7c, 0x29, 0xe0, 0x53, 0xe1, 0x5e, 0x7a, 0x0c, 0x7a, 0x0a, 0x90, 0x43, 0xd1, 0x1c,
	0xd4, 0xd6, 0x08, 0xd0, 0xd6, 0xa7, 0x02, 0x45, 0xd1, 0x63, 0x0b, 0xce, 0x0f, 0x39, 0x1c, 0x0e,
	0x77, 0x48, 0xd9, 0x32, 0xe4, 0x93, 0x76, 0xc9, 0x99, 0xf7, 0x7d, 0x9e, 0x21, 0xe7, 0x99, 0x67,
	0xde, 0x1d, 0x81, 0x41, 0x77, 0xb5, 0x72, 0xb3, 0x52, 0x6f, 0xb9, 0x1e, 0x6a, 0x4e, 0x35, 0x9a,
	0x8e, 0xe7, 0xc0, 0xdd, 0xf4, 0xab, 0x3e, 0x5a, 0x73, 0x9c, 0x5a, 0x1d, 0x95, 0xcc, 0x86, 0x55,
	0x32, 0x6d, 0xdb, 0xf1, 0x4c, 0xcf, 0x72, 0x6c, 0x97, 0x34, 0xd3, 0x2f, 0xd4, 0x2c, 0x6f, 0xb9,
	0xb5, 0x38, 0x55, 0x71, 0x56, 0x4a, 0x0d, 0x64, 0xbb, 0xa6, 0x5d, 0x75, 0x4a, 0xee, 0x7b, 0xa5,
	0x55, 0x64, 0x5b, 0x15, 0x54, 0x6a, 0x79, 0x56, 0xdd, 0xf5, 0xbb, 0xd6, 0x90, 0xcd, 0xf7, 0x2e,
	0x59, 0x76, 0xa5, 0xde, 0xaa, 0x22, 0x16, 0xe6, 0x18, 0x17, 0xa6, 0xe6, 0xd4, 0x9c, 0x12, 0xbe,
	0xbc, 0xd8, 0x5a, 0xc2, 0xdf, 0xf0, 0x17, 0xfc, 0x89, 0x36, 0xdf, 0xe7, 0x21, 0xdb, 0xb4, 0x3d,
	0xfa, 0x6d, 0x7f, 0x04, 0xb9, 0xde, 0xe7, 0xae, 0x98, 0x4d, 0xcf, 0xb6, 0x2a, 0xc1, 0x77, 0xdb,
	0x6c, 0xb8, 0xcb, 0x4e, 0xd0, 0xbc, 0x6e, 0x55, 0x90, 0xed, 0x22, 0xfa, 0x75, 0xa0, 0xea, 0x56,
	0x1a, 0x4d, 0x67, 0xc9, 0xaa, 0xb3, 0x2b, 0x83, 0x95, 0x26, 0xaa, 0x22, 0xdb, 0xb3, 0xcc, 0x3a,
	0xc3, 0x77, 0x38, 0x81, 0xa6, 0x3f, 0x28, 0x2b, 0xc8, 0x33, 0x49, 0x33, 0xe3, 0x6f, 0x1a, 0xc8,
	0x9f, 0x6d, 0x79, 0xce, 0x65, 0xb7, 0x76, 0x8e, 0x60, 0xba, 0x6e, 0x7a, 0x95, 0xe5, 0x8b, 0xa8,
	0xde, 0x40, 0x4d, 0xf8, 0x16, 0xe8, 0xb9, 0xb0, 0x8a, 0x6c, 0xcf, 0xcd, 0x69, 0xc5, 0x9d, 0x13,
	0xbd, 0xd3, 0xc7, 0xa6, 0x18, 0xf0, 0xc4, 0x3e, 0x53, 0xf8, 0x33, 0xee, 0x35, 0x03, 0x1e, 0x6d,
	0x14, 0x7a, 0x10, 0x0e, 0x30, 0x47, 0xff, 0xea, 0x4b, 0x00, 0x84, 0x2d, 0x60, 0x11, 0x74, 0x2f,
	0xdc, 0x69, 0xa0, 0x9c, 0x56, 0xd4, 0x26, 0xf6, 0xce, 0xc0, 0x47, 0x1b, 0x85, 0x3e, 0xef, 0x4e,
	0x03, 0x1d, 0x75, 0x56, 0x2c, 0x0f, 0xad, 0x34, 0xbc, 0x3b, 0xf0, 0x25, 0xd0, 0x73, 0x75, 0xf1,
	0x36, 0xaa, 0x78, 0xb9, 0x1d, 0x45, 0x6d, 0xa2, 0x77, 0x7a, 0x20, 0x80, 0x40, 0x73, 0xcf, 0x1c,
	0x78, 0xb4, 0x51, 0x18, 0x70, 0x70, 0x9b, 0xb0, 0xdf, 0xe9, 0xfe, 0xcf, 0xde, 0xcf, 0xf7, 0xbe,
	0xe7, 0x67, 0x5a, 0xc6, 0xb8, 0x8c, 0x0f, 0x77, 0x80, 0x23, 0x0c, 0xb5, 0x63, 0x2f, 0x59, 0xb5,
	0x56, 0x13, 0x3f, 0xd9, 0x79, 0x3a, 0xd6, 0x3c, 0xef, 0x9b, 0x02, 0xef, 0x57, 0x63, 0xbc, 0x15,
	0x11, 0x54, 0xa3, 0xe0, 0x65, 0x1c, 0x85, 0xf3, 0xc2, 0x28, 0x8c, 0x85, 0xa3, 0x20, 0x43, 0x92,
	0x76, 0x4c, 0xfe, 0xa5, 0x81, 0xe7, 0x19, 0xa3, 0xf0, 0x0d, 0xe2, 0x47, 0xe2, 0x6d, 0x61, 0x24,
	0x8e, 0xc7, 0x46, 0x42, 0xda, 0x4f, 0xc5, 0xff, 0x76, 0x46, 0xfe, 0xa7, 0x05, 0xfe, 0x07, 0x42,
	0xfe, 0x61, 0xfe, 0xb4, 0xac, 0xff, 0xa9, 0x81, 0x51, 0x8a, 0xfe, 0xfc, 0xfc, 0xb9, 0x6b, 0x64,
	0x26, 0xf1, 0xa4, 0x17, 0x04, 0xd2, 0x65, 0x91, 0xb4, 0xb4, 0x9b, 0x8a, 0xb3, 0x95, 0x91, 0xf3,
	0x2b, 0x02, 0xe7, 0xa1, 0x00, 0x45, 0x98, 0x3e, 0x2d, 0xe5, 0x9f, 0xec, 0x00, 0x13, 0x0c, 0xbb,
	0xe5, 0x7a, 0x4d, 0x6b, 0xb1, 0xe5, 0xa1, 0xea, 0x3c, 0x6a, 0xae, 0x5a, 0x15, 0x74, 0xce, 0x6c,
	0x56, 0x79, 0xfa, 0xb7, 0x04, 0xfa, 0xaf, 0xc5, 0xe8, 0xab, 0x42, 0xa8, 0x86, 0xa2, 0x95, 0x71,
	0x28, 0x2e, 0x08, 0x43, 0x51, 0x08, 0x87, 0x42, 0x0a, 0x25, 0xed, 0xb0, 0x6c, 0x68, 0x60, 0x84,
	0x72, 0xba, 0xe8, 0xb8, 0x11, 0x09, 0xb8, 0x22, 0x0c, 0xc2, 0xa4, 0x38, 0x08, 0x42, 0x07, 0x15,
	0xe5, 0x4a, 0x46, 0xca, 0x27, 0x04, 0xca, 0xfb, 0x83, 0xfc, 0x7e, 0xe2, 0xb4, 0x04, 0x39, 0x79,
	0xbf, 0x44, 0xd6, 0x90, 0x4c, 0xf2, 0x1e, 0xef, 0xf3, 0xf4, 0xe4, 0x9d, 0xe6, 0xde, 0xc4, 0xa3,
	0xbc, 0xe2, 0x54, 0x51, 0xa6, 0x47, 0x29, 0x74, 0x78, 0x7a, 0x8f, 0xd2, 0x4f, 0x9c, 0x96, 0xe0,
	0x7f, 0x35, 0x70, 0x88, 0xe2, 0x65, 0x32, 0x3f, 0x87, 0x5c, 0xcf, 0x69, 0x46, 0xb8, 0xbe, 0x2b,
	0x70, 0x3d, 0x25, 0x72, 0x4d, 0xee, 0xab, 0xa2, 0x6d, 0x67, 0xa4, 0xfd, 0xba, 0x40, 0x3b, 0x17,
	0x40, 0x11, 0x30, 0xa4, 0x1d, 0x81, 0xcf, 0x35, 0x90, 0xa3, 0x2c, 0x16, 0xb0, 0x9b, 0xe2, 0x89,
	0x5f, 0x13, 0x88, 0x1f, 0x15, 0x89, 0xc7, 0xba, 0xa8, 0xf8, 0xa2, 0x8c, 0x7c, 0x4f, 0x09, 0x7c,
	0xfb, 0x03, 0x04, 0x24, 0xf5, 0x26, 0xe6, 0xec, 0x3b, 0xa8, 0xe9, 0x5a, 0x8e, 0x9d, 0x69, 0xce,
	0xc6, 0xfb, 0x3c, 0xbd, 0x39, 0x4b, 0x73, 0xa7, 0x65, 0xfa, 0x27, 0x0d, 0xf4, 0x52, 0x17, 0x77,
	0xc9, 0x72, 0x3d, 0xf8, 0x12, 0xd0, 0x16, 0x82, 0x39, 0x62, 0x36, 0xac, 0x29, 0x1f, 0xc8, 0x65,
	0xe4, 0x99, 0x33, 0x43, 0x1f, 0x6f, 0x14, 0xba, 0x3e, 0xd9, 0x28, 0x68, 0x8f, 0x36, 0x0a, 0xbb,
	0x8f, 0x5a, 0x76, 0xdd, 0xb2, 0xd1, 0x1c, 0xfb, 0x00, 0xaf, 0x82, 0x3d, 0x7e, 0x7f, 0xbf, 0x65,
	0x6e, 0x27, 0xd7, 0x9d, 0x5d, 0x9c, 0x19, 0xe5, 0xba, 0x0f, 0xd4, 0x2d, 0xd7, 0x3b, 0xe6, 0x5b,
	0x60, 0x16, 0x27, 0x76, 0x05, 0x1e, 0x07, 0xbb, 0xde, 0xf4, 0xd0, 0x8a, 0x9b, 0xeb, 0xc6, 0x63,
	0x1c, 0xf7, 0x9c, 0x7b, 0x1f, 0x6d, 0x14, 0x76, 0xf9, 0xbc, 0xdc, 0x39, 0xf2, 0xe7, 0x74, 0xdf,
	0x67, 0xef, 0xe7, 0x81, 0x1f, 0x88, 0x72, 0xfb, 0xb7, 0x06, 0xf2, 0x52, 0x6f, 0xb6, 0xbd, 0x98,
	0x9e, 0x89, 0x32, 0x55, 0xf9, 0x4a, 0x35, 0xef, 0xbf, 0x6a, 0xa0, 0x9f, 0xf3, 0x64, 0xdb, 0x8b,
	0xed, 0xa9, 0x28, 0x5b, 0xb9, 0x8b, 0x54, 0x73, 0xfc, 0xb3, 0x06, 0xfa, 0x42, 0x0f, 0xb6, 0xbd,
	0x28, 0x9e, 0x8c, 0x52, 0x94, 0x9a, 0x46, 0x35, 0xc3, 0xff, 0x68, 0x40, 0x97, 0x5b, 0xab, 0xed,
	0xc5, 0xf6, 0x8d, 0x28, 0x5b, 0xa5, 0x2f, 0x54, 0x33, 0xff, 0x54, 0x03, 0x7b, 0x7c, 0x87, 0xb5,
	0xbd, 0x78, 0x4e, 0x45, 0x79, 0x0a, 0x66, 0x50, 0xcd, 0xca, 0x57, 0x5a, 0x6a, 0xa8, 0x9e, 0x11,
	0xa5, 0x65, 0xf6, 0x2f, 0xdd, 0x13, 0xf3, 0x8d, 0xd4, 0x33, 0xf2, 0xc4, 0xb0, 0xe7, 0x53, 0xb3,
	0xfa, 0x87, 0x06, 0x86, 0x04, 0x9f, 0xb4, 0xbd, 0x08, 0xbe, 0x12, 0x25, 0x98, 0xec, 0xee, 0xd4,
	0x5c, 0xff, 0xa8, 0x01, 0x40, 0x3c, 0xd2, 0xf6, 0xa2, 0x58, 0x8e, 0x52, 0x8c, 0x19, 0xba, 0x74,
	0xf3, 0x8e, 0x9a, 0xa2, 0x67, 0x64, 0xde, 0x31, 0x0b, 0xa7, 0xe4, 0x36, 0xfd, 0xd1, 0x55, 0xb0,
	0x97, 0xfa, 0xa1, 0x77, 0x8e, 0xc3, 0x9f, 0x6a, 0x60, 0xf8, 0x6c, 0xcb, 0x5b, 0x9e, 0x71, 0x1c,
	0xcf, 0xf5, 0x9a, 0x66, 0xe3, 0x9c, 0xb3, 0xd2, 0xa8, 0x23, 0x0f, 0xc1, 0x71, 0xd1, 0x3d, 0x45,
	0x9a, 0xcd, 0xa1, 0x6f, 0xb4, 0x90, 0xeb, 0xe9, 0x31, 0x8f, 0x65, 0x5c, 0xbc, 0xbf, 0x96, 0xef,
	0xa9, 0x34, 0x91, 0xe9, 0xa1, 0xdf, 0xae, 0xe5, 0xb5, 0xdf, 0xaf, 0xe5, 0xbb, 0xfe, 0xb0, 0x96,
	0xdf, 0x4d, 0x6f, 0x7f, 0xff, 0xd3, 0xcf, 0x7f, 0xbc, 0xe3, 0x30, 0xe8, 0x3a, 0xad, 0x4d, 0x1a,
	0x63, 0x25, 0xda, 0xb7, 0x24, 0x47, 0x70, 0x11, 0xf4, 0xf9, 0xe6, 0xf8, 0x6c, 0xb5, 0x4a, 0x3b,
	0xc3, 0x58, 0x36, 0x49, 0x7e, 0x18, 0xcf, 0x0f, 0x7f, 0x44, 0x4b, 0x47, 0x7e, 0x28, 0x99, 0x41,
	0x82, 0x0a, 0x03, 0xa5, 0x2b, 0xee, 0x1b, 0xa5, 0x78, 0x52, 0xcc, 0xf4, 0x20, 0x61, 0x3a, 0x50,
	0xaa, 0xe0, 0x6e, 0xc7, 0x58, 0x85, 0x18, 0x2e, 0x00, 0xc8, 0x00, 0x85, 0x1e, 0x06, 0x4a, 0x9d,
	0x8d, 0x2e, 0xbd, 0x2a, 0xe5, 0x79, 0x1b, 0x0c, 0xd2, 0xa8, 0xa1, 0x6d, 0x80, 0x32, 0x2f, 0xa1,
	0xcb, 0x2e, 0x1a, 0x2f, 0x26, 0xb0, 0x18, 0x22, 0x2c, 0xf6, 0x95, 0xc2, 0x0a, 0xb6, 0x0b, 0x5b,
	0xa4, 0x06, 0xe9, 0xe7, 0x92, 0x2e, 0xda, 0x50, 0xb5, 0xaa, 0xeb, 0xaa, 0x06, 0x52, 0x8a, 0x73,
	0xa0, 0x97, 0xa6, 0xf5, 0xd7, 0x50, 0x18, 0x5d, 0x52, 0xf5, 0xe8, 0x57, 0xe3, 0x70, 0x02, 0xa1,
	0xfd, 0x84, 0x50, 0x4f, 0x69, 0xd9, 0x71, 0x3d, 0x17, 0x7e, 0x2d, 0x78, 0xd1, 0xe8, 0xf2, 0x05,
	0x63, 0x0b, 0x9a, 0x1e, 0xbb, 0x62, 0x4c, 0x24, 0x04, 0x1f, 0x20, 0xc1, 0xf7, 0x96, 0x68, 0xf9,
	0xdf, 0xe5, 0x30, 0xfb, 0xab, 0x08, 0x8c, 0x2e, 0x2a, 0x7a, 0xf4, 0xab, 0x1a, 0xb3, 0xed, 0x54,
	0x91, 0x0b, 0x6f, 0x91, 0xba, 0xc9, 0xd9, 0x6a, 0x55, 0x10, 0x6e, 0x98, 0x28, 0xe9, 0x7a, 0xe2,
	0x1d, 0xe9, 0x48, 0xdf, 0x00, 0xfb, 0x69, 0x06, 0xa2, 0x9b, 0x50, 0x14, 0x52, 0x5d, 0xbc, 0x60,
	0x1c, 0x49, 0xc0, 0xde, 0x4f, 0xb0, 0xef, 0x29, 0x91, 0x9f, 0x53, 0x5c, 0x6e, 0x6a, 0x53, 0xe1,
	0x82, 0x31, 0x29, 0xd3, 0x63, 0x57, 0xa4, 0x28, 0xbf, 0x44, 0x5e, 0xf9, 0xf3, 0xc8, 0x97, 0x8c,
	0xcc, 0x3a, 0x51, 0xc5, 0xdd, 0x82, 0x60, 0x1f, 0x6a, 0xa0, 0xc0, 0x45, 0xdb, 0x12, 0xa9, 0x98,
	0x8a, 0xe7, 0xc5, 0x63, 0x34, 0x02, 0xba, 0x4e, 0x77, 0x4d, 0xc6, 0x95, 0xe2, 0x3a, 0x16, 0x68,
	0x06, 0xe9, 0x71, 0xc4, 0x42, 0x20, 0xdb, 0x02, 0x07, 0xc2, 0xc0, 0x9b, 0xd2, 0x8b, 0x13, 0x09,
	0x54, 0x9e, 0xc3, 0x54, 0x86, 0x79, 0xb9, 0x28, 0x7d, 0xfb, 0xea, 0xd4, 0x15, 0x73, 0x05, 0x7d,
	0x17, 0xfe, 0x4a, 0x03, 0x45, 0x2e, 0xef, 0x56, 0x69, 0xc7, 0x99, 0x04, 0x6c, 0x47, 0x30, 0xb6,
	0x43, 0xa5, 0x6a, 0xd8, 0xcd, 0x25, 0xdd, 0x2a, 0x66, 0xb3, 0xca, 0xe1, 0xfc, 0x2a, 0x79, 0x45,
	0x09, 0xcc, 0x14, 0x5a, 0x73, 0x2c, 0x21, 0xe1, 0x30, 0x4e, 0xd8, 0x4f, 0xa4, 0x26, 0x0c, 0x1f,
	0x79, 0x6f, 0xb3, 0xc8, 0x8e, 0xec, 0x51, 0x46, 0xb0, 0xa6, 0xd0, 0x18, 0x15, 0x56, 0x2c, 0x31,
	0x21, 0xd6, 0x0a, 0xa9, 0x6c, 0x91, 0xf0, 0x4f, 0x4c, 0x6e, 0x04, 0x0e, 0x08, 0x0c, 0x84, 0x49,
	0x52, 0x2b, 0x4e, 0x29, 0x81, 0xc9, 0x41, 0xcc, 0x64, 0x90, 0x09, 0x4e, 0xc2, 0xb8, 0x67, 0x16,
	0x1f, 0x01, 0xf3, 0xbb, 0x64, 0xdc, 0x67, 0x91, 0x97, 0x45, 0x79, 0x5e, 0xb8, 0xbf, 0x96, 0xdf,
	0x59, 0x43, 0x5e, 0x04, 0x70, 0x9f, 0x0f, 0x18, 0xee, 0x61, 0x96, 0x08, 0xfe, 0x90, 0x5a, 0x16,
	0x3f, 0xf6, 0x96, 0xe8, 0xd0, 0x8b, 0x32, 0x14, 0x58, 0x84, 0x60, 0x5c, 0x84, 0xde, 0x22, 0x76,
	0xc5, 0x07, 0xb3, 0x49, 0x05, 0xea, 0x17, 0xd2, 0x41, 0x87, 0x3c, 0x88, 0x59, 0xe4, 0x6d, 0x4a,
	0x7b, 0xca, 0x32, 0xf8, 0x58, 0x78, 0x60, 0x82, 0xf0, 0xfc, 0x82, 0xfe, 0x6a, 0xea, 0x67, 0xdc,
	0x2a, 0xd5, 0x79, 0x4d, 0x86, 0x0a, 0x4b, 0x0e, 0x4c, 0x21, 0x39, 0xd7, 0x89, 0x4f, 0x98, 0x45,
	0x5e, 0x0a, 0xbd, 0x99, 0x94, 0xa5, 0xc2, 0x13, 0x18, 0xc6, 0xc4, 0xe6, 0x46, 0xf0, 0x9e, 0x66,
	0x51, 0x9a, 0x71, 0x59, 0x86, 0x7e, 0x9c, 0x81, 0x33, 0x37, 0x21, 0xe8, 0x14, 0xc2, 0xd3, 0x11,
	0xb4, 0xa0, 0x3a, 0xdf, 0x24, 0x0e, 0x67, 0x16, 0x79, 0x4f, 0x42, 0x72, 0x3a, 0x66, 0xa6, 0xaf,
	0x7b, 0x93, 0xc6, 0xbf, 0x49, 0x9c, 0xcf, 0x2c, 0xf2, 0x52, 0xeb, 0xd0, 0x51, 0x59, 0x78, 0x2c,
	0x42, 0x50, 0x22, 0x42, 0xa1, 0x6e, 0x64, 0x51, 0xa0, 0x8e, 0xba, 0xb1, 0x4a, 0x03, 0x59, 0x44,
	0x46, 0x2f, 0x99, 0x8b, 0xa8, 0xce, 0x44, 0x09, 0x90, 0x4d, 0xa7, 0x7f, 0x49, 0x22, 0x47, 0x5f,
	0xb8, 0xbf, 0x96, 0xdf, 0x55, 0xf7, 0x6f, 0x26, 0xed, 0xd7, 0x86, 0x89, 0x7d, 0xeb, 0x0b, 0xf6,
	0x6b, 0xb8, 0x35, 0xfc, 0x48, 0x03, 0x63, 0x61, 0x2e, 0xa9, 0x48, 0xf1, 0x99, 0x55, 0x82, 0x74,
	0x59, 0x86, 0x63, 0x58, 0xda, 0x16, 0xa3, 0x7a, 0x9e, 0xa0, 0x1a, 0x11, 0xc5, 0x8a, 0xa2, 0xbb,
	0x41, 0xec, 0x0d, 0x01, 0xc7, 0x89, 0x16, 0x0f, 0x49, 0x2e, 0x55, 0x45, 0x19, 0x90, 0x5e, 0x3e,
	0xc6, 0xf7, 0xc0, 0x50, 0x10, 0x9b, 0x53, 0x2f, 0x3e, 0xb4, 0x54, 0xb4, 0x66, 0x65, 0x91, 0x41,
	0xd8, 0x00, 0xf3, 0x32, 0x08, 0xaf, 0xe7, 0xa4, 0x2a, 0x46, 0xc9, 0xfd, 0x86, 0x1a, 0x55, 0x82,
	0x40, 0xae, 0x66, 0x3c, 0x1a, 0xa5, 0x70, 0xdd, 0x94, 0x21, 0x1b, 0x91, 0x37, 0xc6, 0x28, 0xa7,
	0x08, 0xca, 0x23, 0x4a, 0x55, 0xa3, 0x88, 0x6b, 0x64, 0x4e, 0x61, 0x38, 0x58, 0xdd, 0x78, 0x78,
	0x82, 0xb4, 0xbd, 0x2a, 0x03, 0xd3, 0xed, 0xdf, 0xc2, 0xa9, 0x47, 0x49, 0xea, 0x61, 0x41, 0xe5,
	0x68, 0xa2, 0xdb, 0xdc, 0x04, 0x60, 0x6a, 0x27, 0x9f, 0x00, 0x4c, 0xe7, 0x5e, 0x96, 0x4e, 0x00,
	0x7a, 0x37, 0x58, 0x16, 0xb5, 0x49, 0xa3, 0x3f, 0x50, 0x3d, 0x09, 0x29, 0xac, 0x7e, 0x72, 0x52,
	0x58, 0xfa, 0xe4, 0xa4, 0xfc, 0x5b, 0x51, 0x52, 0x51, 0x15, 0xa4, 0x89, 0x96, 0xc8, 0x4f, 0xa8,
	0x38, 0xb0, 0xa8, 0x86, 0x7c, 0xce, 0x64, 0xfd, 0x1b, 0x97, 0xa5, 0xef, 0x17, 0x63, 0x39, 0xa0,
	0x3f, 0xc8, 0x43, 0xb5, 0x8f, 0x0f, 0x1f, 0x93, 0xbd, 0x33, 0xb2, 0xa8, 0x3d, 0xe4, 0x26, 0xa6,
	0x35, 0x46, 0x68, 0x1d, 0x8c, 0x69, 0x20, 0x25, 0x76, 0x85, 0x7b, 0x5a, 0x4c, 0x0b, 0xe5, 0x4f,
	0x8b, 0xa9, 0xe0, 0xa8, 0xf4, 0x69, 0xb1, 0xbe, 0xd7, 0x28, 0x01, 0xcb, 0x0d, 0x2c, 0xd9, 0x70,
	0x50, 0x72, 0xc3, 0x3f, 0x97, 0x5e, 0x6d, 0xe0, 0x83, 0x81, 0xfc, 0xdc, 0x0f, 0x7f, 0xcb, 0x34,
	0x06, 0xee, 0xaf, 0xe5, 0xbb, 0xeb, 0x96, 0x1b, 0xfa, 0x94, 0x3a, 0x71, 0x0d, 0x38, 0xa2, 0x54,
	0xe3, 0x12, 0xe2, 0x1b, 0x9d, 0xe5, 0x2e, 0x21, 0xdb, 0x97, 0xa9, 0xb2, 0xf8, 0xd9, 0x38, 0xc1,
	0x49, 0xc8, 0x91, 0x93, 0xe9, 0x57, 0x42, 0x64, 0x9b, 0x58, 0x38, 0xff, 0x2e, 0x27, 0x59, 0x09,
	0x81, 0x0f, 0x4a, 0xd4, 0x0b, 0xc7, 0x9d, 0x10, 0xe3, 0xe2, 0xa7, 0x0c, 0xf1, 0x22, 0x14, 0xad,
	0x0f, 0xdd, 0x65, 0xab, 0x83, 0x9f, 0x50, 0xae, 0x50, 0x09, 0xc9, 0x5f, 0x50, 0x88, 0x15, 0x06,
	0x72, 0x52, 0x0a, 0x64, 0x0c, 0x03, 0xc9, 0x25, 0x89, 0x12, 0xfc, 0x0a, 0xd8, 0xc7, 0x30, 0x61,
	0x11, 0x4a, 0x40, 0x30, 0x18, 0xd1, 0x23, 0x9c, 0xcf, 0x90, 0xe6, 0xdb, 0x87, 0xf3, 0xb1, 0x3a,
	0x12, 0xf7, 0xf2, 0x31, 0xe5, 0x51, 0xbe, 0x7c, 0xdc, 0xcf, 0x3b, 0x92, 0x87, 0xc6, 0xe1, 0xc5,
	0xfa, 0xa2, 0xc4, 0xcb, 0x7e, 0x51, 0x51, 0xe0, 0x65, 0x35, 0xa4, 0x83, 0x2c, 0xba, 0x28, 0x04,
	0x09, 0x89, 0x46, 0x93, 0xf4, 0x25, 0x01, 0xff, 0x22, 0x31, 0x3a, 0xfe, 0x5d, 0x2a, 0x27, 0x09,
	0x81, 0x87, 0x04, 0x65, 0xc1, 0xf1, 0xc6, 0xa5, 0x1c, 0x98, 0xe3, 0x61, 0xb5, 0x24, 0x6e, 0xd4,
	0x99, 0x0a, 0x28, 0x47, 0x9d, 0x2b, 0xee, 0x4b, 0x50, 0xdf, 0x22, 0x5b, 0x93, 0xb7, 0x1b, 0x55,
	0x33, 0x5b, 0x4d, 0x09, 0xd7, 0xbf, 0x5a, 0xb8, 0x9b, 0xa4, 0xfe, 0xa5, 0x87, 0xbb, 0xbb, 0xbb,
	0x74, 0xfd, 0xa6, 0x29, 0xb6, 0xae, 0x26, 0x2d, 0x01, 0x43, 0x6a, 0xd2, 0x7a, 0x62, 0xa5, 0x89,
	0x62, 0x7a, 0x9c, 0x4a, 0x53, 0x34, 0x2b, 0x5c, 0x25, 0x56, 0x8c, 0x04, 0xde, 0xd4, 0x6e, 0xef,
	0x64, 0x02, 0x17, 0xb2, 0x6a, 0xea, 0x09, 0x3b, 0xbe, 0x5f, 0xd3, 0x52, 0x13, 0x4d, 0xbc, 0x55,
	0x9b, 0xbe, 0x37, 0x12, 0xc0, 0x4d, 0x10, 0x70, 0x29, 0x36, 0x7e, 0xb4, 0x00, 0x4d, 0x70, 0xa6,
	0xd8, 0xfb, 0x4d, 0x25, 0x64, 0x24, 0x3e, 0x45, 0x8f, 0xed, 0xff, 0x4c, 0xfe, 0x85, 0xce, 0x5c,
	0xe3, 0x96, 0x24, 0x22, 0x35, 0x6e, 0x9d, 0xdb, 0x06, 0x46, 0x28, 0xa4, 0xd8, 0x09, 0x2a, 0x29,
	0xc8, 0x6b, 0x50, 0x24, 0xfe, 0x13, 0xab, 0x41, 0x09, 0x2f, 0xea, 0x12, 0x71, 0x23, 0x24, 0x49,
	0xea, 0xbd, 0x5f, 0x39, 0x81, 0x4a, 0x8e, 0x50, 0x49, 0x2e, 0x42, 0x91, 0x3c, 0x99, 0x8b, 0x50,
	0x02, 0xe8, 0xef, 0x10, 0xd0, 0x58, 0xe9, 0x14, 0x9e, 0xc7, 0x50, 0xff, 0x23, 0x00, 0xae, 0x0b,
	0xed, 0xc2, 0xc7, 0xbd, 0x22, 0x64, 0x0e, 0x60, 0xd5, 0xed, 0x2b, 0xe1, 0x3b, 0x4c, 0xc7, 0xca,
	0x1a, 0xfc, 0x25, 0x5d, 0xe6, 0x49, 0xfa, 0x2c, 0x06, 0xa9, 0x9c, 0xf5, 0x74, 0x3e, 0xae, 0x37,
	0x4b, 0xa0, 0x8d, 0x62, 0x68, 0x23, 0x0c, 0x5a, 0x54, 0xd5, 0xca, 0x1a, 0xbc, 0x4d, 0xe4, 0x87,
	0x20, 0x54, 0x9b, 0xaa, 0xff, 0x4b, 0x77, 0x56, 0xde, 0x18, 0x8c, 0xa1, 0x29, 0x6b, 0xf0, 0x07,
	0x1a, 0x31, 0x70, 0xb8, 0xa1, 0xda, 0x67, 0x1d, 0x4e, 0x75, 0x44, 0x1d, 0x4b, 0xb9, 0x84, 0x78,
	0x0e, 0x13, 0x87, 0x94, 0x38, 0x27, 0x81, 0x65, 0x0d, 0xde, 0xa3, 0x2b, 0x0c, 0x01, 0x92, 0xc9,
	0x7f, 0x1d, 0xcf, 0x7c, 0x70, 0x9c, 0x6c, 0x6e, 0xe2, 0x00, 0xc7, 0x31, 0xc0, 0x31, 0x06, 0x50,
	0x2e, 0x83, 0x65, 0x0d, 0x7a, 0x64, 0x1f, 0x45, 0x22, 0x76, 0xf0, 0x65, 0x05, 0xc5, 0x69, 0x6e,
	0xe3, 0xff, 0xe5, 0x38, 0x98, 0x3f, 0x25, 0x38, 0xb0, 0x38, 0x96, 0x35, 0xb8, 0xc8, 0x4d, 0x1c,
	0x85, 0x5f, 0x33, 0xd4, 0x47, 0xac, 0xe5, 0xef, 0x03, 0xcf, 0xac, 0x93, 0x83, 0x2b, 0x28, 0x0e,
	0x37, 0xa7, 0x63, 0x86, 0x35, 0xb3, 0xac, 0xc1, 0x26, 0xd9, 0x2e, 0xe2, 0xfe, 0x29, 0x9d, 0xdd,
	0x64, 0xfa, 0x13, 0xc7, 0x72, 0xa6, 0xd4, 0x3d, 0x90, 0x9c, 0xab, 0x95, 0xf0, 0x88, 0xc1, 0x01,
	0x9c, 0xf0, 0x6c, 0xad, 0x26, 0x18, 0x3e, 0xff, 0x6a, 0x78, 0x80, 0x15, 0x5b, 0x31, 0x69, 0xe0,
	0x6f, 0x11, 0x7f, 0x87, 0x9b, 0x76, 0x36, 0x91, 0x87, 0x94, 0x87, 0x87, 0xd3, 0xa9, 0x1b, 0xd5,
	0xeb, 0xb2, 0x16, 0xd1, 0x56, 0x85, 0xb9, 0x34, 0xd4, 0x27, 0x7a, 0xd3, 0x65, 0xa7, 0x95, 0xbc,
	0xb2, 0x06, 0x3f, 0xd0, 0xc0, 0xee, 0xc7, 0x59, 0xe2, 0xde, 0x94, 0x1e, 0xc5, 0x10, 0x37, 0xfd,
	0xd1, 0x7d, 0x7a, 0xb4, 0x14, 0x5a, 0x62, 0x25, 0xd1, 0x9f, 0x6b, 0xa0, 0x7b, 0xde, 0x5c, 0x45,
	0xf0, 0x70, 0x67, 0xd7, 0xc9, 0xce, 0x85, 0xa4, 0x29, 0xf6, 0xc5, 0xa1, 0x75, 0xa8, 0xf6, 0x05,
	0xf5, 0x11, 0xb1, 0xda, 0xe7, 0xfa, 0xa8, 0x3e, 0xd0, 0x40, 0x3f, 0x5d, 0xb5, 0x2f, 0xcd, 0x93,
	0x20, 0x9c, 0xb1, 0x13, 0xee, 0x24, 0x9f, 0x5d, 0x99, 0x51, 0x9f, 0x5d, 0x29, 0x10, 0x1c, 0xb9,
	0xa0, 0x16, 0x2a, 0x04, 0xd7, 0x7f, 0xb7, 0xe7, 0x6e, 0x3b, 0xbf, 0x63, 0xf5, 0xf8, 0xcf, 0xda,
	0x79, 0xf6, 0xaf, 0x8d, 0xeb, 0xed, 0x20, 0xc6, 0x7a, 0x9b, 0xd4, 0x7c, 0xfc, 0xbf, 0xbe, 0x78,
	0xad, 0xb7, 0x93, 0xaa, 0x6c, 0xeb, 0x6d, 0x56, 0x48, 0xf1, 0xbb, 0xd3, 0x97, 0x69, 0xbd, 0x9d,
	0x30, 0x46, 0xeb, 0xed, 0xd8, 0x73, 0xf5, 0xbb, 0x51, 0x99, 0x5a, 0x6f, 0xf3, 0x55, 0xc6, 0xf5,
	0x76, 0xa4, 0x9a, 0x79, 0xaf, 0x9d, 0x3f, 0x04, 0x18, 0x3e, 0xb8, 0xb3, 0xd1, 0xf2, 0xe0, 0xce,
	0x1a, 0xf2, 0x20, 0x79, 0x51, 0x21, 0xa9, 0xb5, 0xdc, 0x6b, 0xe7, 0x47, 0x40, 0xac, 0x5c, 0xe4,
	0xb7, 0xbb, 0xd7, 0xce, 0x4f, 0x03, 0xcc, 0x89, 0xeb, 0x4b, 0x7f, 0x28, 0x83, 0xdd, 0x0d, 0x5f,
	0xcd, 0xf1, 0xee, 0x2a, 0x16, 0x6f, 0x1a, 0xe0, 0x11, 0xc8, 0xd8, 0xeb, 0x75, 0x90, 0x30, 0x5e,
	0xb2, 0x38, 0xd2, 0x08, 0x2f, 0x03, 0x6e, 0x2c, 0x68, 0xae, 0xb4, 0x7d, 0x4f, 0x02, 0xfa, 0x4c,
	0x48, 0x63, 0xdc, 0x2d, 0x0d, 0xea, 0x61, 0x10, 0x54, 0xa8, 0xb8, 0xb1, 0xbd, 0xd7, 0xce, 0x7f,
	0x11, 0xc8, 0x9f, 0x67, 0xe2, 0xa8, 0x88, 0x91, 0x8b, 0x80, 0x3d, 0xe4, 0x18, 0x15, 0xd2, 0xe6,
	0x41, 0x3b, 0xbf, 0x0a, 0xd9, 0xe3, 0xd5, 0xe5, 0x87, 0xbd, 0x8c, 0xe7, 0x3a, 0x9c, 0xf1, 0x9a,
	0x64, 0x9d, 0xa7, 0xa7, 0x2e, 0x9b, 0xcd, 0xaf, 0x17, 0x17, 0xd9, 0xfd, 0x86, 0x65, 0xd7, 0x8a,
	0xa6, 0x5b, 0xac, 0xd0, 0x28, 0xc5, 0x25, 0xa7, 0x59, 0xf4, 0x96, 0x51, 0x91, 0xbe, 0xf6, 0x0f,
	0xda, 0x79, 0x33, 0xcc, 0x2c, 0xce, 0x4f, 0x63, 0x44, 0x3e, 0x2d, 0xc3, 0x74, 0xe3, 0xa4, 0x41,
	0x71, 0xe1, 0xd2, 0x7c, 0x31, 0x32, 0x48, 0x38, 0x51, 0x98, 0xc4, 0x85, 0xf2, 0x31, 0xd4, 0xbb,
	0x7d, 0x6d, 0x30, 0x46, 0x3b, 0x09, 0xd5, 0xa4, 0xbc, 0xeb, 0x74, 0xe1, 0x1a, 0x6a, 0x2e, 0x39,
	0xcd, 0x95, 0xa2, 0xc9, 0x52, 0x93, 0xcc, 0xac, 0xc1, 0x83, 0x76, 0x7e, 0x3e, 0x36, 0x1f, 0xf4,
	0xdd, 0x54, 0x2e, 0x0d, 0xf1, 0xce, 0xa4, 0x78, 0x61, 0x7a, 0x98, 0x7e, 0x88, 0x32, 0x9b, 0x19,
	0xf8, 0xf8, 0xe1, 0x98, 0xf6, 0xc9, 0xc3, 0x31, 0xed, 0x2f, 0x0f, 0xc7, 0xb4, 0xbf, 0x3f, 0x1c,
	0xeb, 0xba, 0xa6, 0x2d, 0xf6, 0xe0, 0xff, 0xf9, 0x3d, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfc, 0x94, 0xe4, 0x18, 0x3d, 0x3d, 0x00, 0x00,
}
