// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: snapshot.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPConfigurationSnapshot(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPConfigurationSnapshot(_ context.Context, r *http.Request) (interface{}, error) {
	var req ConfigurationSnapshot
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqConfigurationSnapshot encodes GRPC request
func EncodeGrpcReqConfigurationSnapshot(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshot)
	return req, nil
}

// DecodeGrpcReqConfigurationSnapshot decodes GRPC request
func DecodeGrpcReqConfigurationSnapshot(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshot)
	return req, nil
}

// EncodeGrpcRespConfigurationSnapshot encodes GRC response
func EncodeGrpcRespConfigurationSnapshot(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespConfigurationSnapshot decodes GRPC response
func DecodeGrpcRespConfigurationSnapshot(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPConfigurationSnapshotRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPConfigurationSnapshotRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req ConfigurationSnapshotRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqConfigurationSnapshotRequest encodes GRPC request
func EncodeGrpcReqConfigurationSnapshotRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotRequest)
	return req, nil
}

// DecodeGrpcReqConfigurationSnapshotRequest decodes GRPC request
func DecodeGrpcReqConfigurationSnapshotRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotRequest)
	return req, nil
}

// EncodeGrpcRespConfigurationSnapshotRequest encodes GRC response
func EncodeGrpcRespConfigurationSnapshotRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespConfigurationSnapshotRequest decodes GRPC response
func DecodeGrpcRespConfigurationSnapshotRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPConfigurationSnapshotSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPConfigurationSnapshotSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ConfigurationSnapshotSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqConfigurationSnapshotSpec encodes GRPC request
func EncodeGrpcReqConfigurationSnapshotSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotSpec)
	return req, nil
}

// DecodeGrpcReqConfigurationSnapshotSpec decodes GRPC request
func DecodeGrpcReqConfigurationSnapshotSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotSpec)
	return req, nil
}

// EncodeGrpcRespConfigurationSnapshotSpec encodes GRC response
func EncodeGrpcRespConfigurationSnapshotSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespConfigurationSnapshotSpec decodes GRPC response
func DecodeGrpcRespConfigurationSnapshotSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPConfigurationSnapshotStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPConfigurationSnapshotStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ConfigurationSnapshotStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqConfigurationSnapshotStatus encodes GRPC request
func EncodeGrpcReqConfigurationSnapshotStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotStatus)
	return req, nil
}

// DecodeGrpcReqConfigurationSnapshotStatus decodes GRPC request
func DecodeGrpcReqConfigurationSnapshotStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotStatus)
	return req, nil
}

// EncodeGrpcRespConfigurationSnapshotStatus encodes GRC response
func EncodeGrpcRespConfigurationSnapshotStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespConfigurationSnapshotStatus decodes GRPC response
func DecodeGrpcRespConfigurationSnapshotStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSnapshotDestination(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSnapshotDestination(_ context.Context, r *http.Request) (interface{}, error) {
	var req SnapshotDestination
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSnapshotDestination encodes GRPC request
func EncodeGrpcReqSnapshotDestination(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotDestination)
	return req, nil
}

// DecodeGrpcReqSnapshotDestination decodes GRPC request
func DecodeGrpcReqSnapshotDestination(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotDestination)
	return req, nil
}

// EncodeGrpcRespSnapshotDestination encodes GRC response
func EncodeGrpcRespSnapshotDestination(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSnapshotDestination decodes GRPC response
func DecodeGrpcRespSnapshotDestination(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSnapshotRestore(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSnapshotRestore(_ context.Context, r *http.Request) (interface{}, error) {
	var req SnapshotRestore
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSnapshotRestore encodes GRPC request
func EncodeGrpcReqSnapshotRestore(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestore)
	return req, nil
}

// DecodeGrpcReqSnapshotRestore decodes GRPC request
func DecodeGrpcReqSnapshotRestore(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestore)
	return req, nil
}

// EncodeGrpcRespSnapshotRestore encodes GRC response
func EncodeGrpcRespSnapshotRestore(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSnapshotRestore decodes GRPC response
func DecodeGrpcRespSnapshotRestore(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSnapshotRestoreSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSnapshotRestoreSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req SnapshotRestoreSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSnapshotRestoreSpec encodes GRPC request
func EncodeGrpcReqSnapshotRestoreSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreSpec)
	return req, nil
}

// DecodeGrpcReqSnapshotRestoreSpec decodes GRPC request
func DecodeGrpcReqSnapshotRestoreSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreSpec)
	return req, nil
}

// EncodeGrpcRespSnapshotRestoreSpec encodes GRC response
func EncodeGrpcRespSnapshotRestoreSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSnapshotRestoreSpec decodes GRPC response
func DecodeGrpcRespSnapshotRestoreSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSnapshotRestoreStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSnapshotRestoreStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SnapshotRestoreStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSnapshotRestoreStatus encodes GRPC request
func EncodeGrpcReqSnapshotRestoreStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreStatus)
	return req, nil
}

// DecodeGrpcReqSnapshotRestoreStatus decodes GRPC request
func DecodeGrpcReqSnapshotRestoreStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreStatus)
	return req, nil
}

// EncodeGrpcRespSnapshotRestoreStatus encodes GRC response
func EncodeGrpcRespSnapshotRestoreStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSnapshotRestoreStatus decodes GRPC response
func DecodeGrpcRespSnapshotRestoreStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
