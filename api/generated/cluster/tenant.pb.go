// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tenant.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Tenant represents an org or a tenant
type Tenant struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the tenant.
	Spec TenantSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the tenant.
	Status TenantStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Tenant) Reset()                    { *m = Tenant{} }
func (m *Tenant) String() string            { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()               {}
func (*Tenant) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{0} }

func (m *Tenant) GetSpec() TenantSpec {
	if m != nil {
		return m.Spec
	}
	return TenantSpec{}
}

func (m *Tenant) GetStatus() TenantStatus {
	if m != nil {
		return m.Status
	}
	return TenantStatus{}
}

// spec part of tenant object
type TenantSpec struct {
	// Tenant admin user
	AdminUser string `protobuf:"bytes,1,opt,name=AdminUser,json=admin-user,omitempty,proto3" json:"admin-user,omitempty"`
}

func (m *TenantSpec) Reset()                    { *m = TenantSpec{} }
func (m *TenantSpec) String() string            { return proto.CompactTextString(m) }
func (*TenantSpec) ProtoMessage()               {}
func (*TenantSpec) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{1} }

func (m *TenantSpec) GetAdminUser() string {
	if m != nil {
		return m.AdminUser
	}
	return ""
}

// status part of tenant object
type TenantStatus struct {
}

func (m *TenantStatus) Reset()                    { *m = TenantStatus{} }
func (m *TenantStatus) String() string            { return proto.CompactTextString(m) }
func (*TenantStatus) ProtoMessage()               {}
func (*TenantStatus) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{2} }

func init() {
	proto.RegisterType((*Tenant)(nil), "cluster.Tenant")
	proto.RegisterType((*TenantSpec)(nil), "cluster.TenantSpec")
	proto.RegisterType((*TenantStatus)(nil), "cluster.TenantStatus")
}
func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *TenantSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminUser) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(len(m.AdminUser)))
		i += copy(dAtA[i:], m.AdminUser)
	}
	return i, nil
}

func (m *TenantStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tenant) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *TenantSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdminUser)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTenant(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTenant(x uint64) (n int) {
	return sovTenant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTenant(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTenant = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tenant.proto", fileDescriptorTenant) }

var fileDescriptorTenant = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x77, 0xd6, 0xa5, 0xa5, 0xe3, 0xee, 0xba, 0x64, 0x55, 0x62, 0x59, 0x52, 0x29, 0x08,
	0x5e, 0xec, 0x66, 0x44, 0xc1, 0x0b, 0xef, 0x0c, 0xac, 0xe0, 0x85, 0x54, 0xdb, 0xfa, 0x00, 0x93,
	0xe9, 0x31, 0x8e, 0x4c, 0x66, 0x86, 0xcc, 0x89, 0xd2, 0x07, 0xf0, 0x91, 0x7c, 0x87, 0x5e, 0x16,
	0x1f, 0xa0, 0x48, 0xae, 0xc4, 0xa7, 0x90, 0x4c, 0x52, 0x4c, 0xab, 0xee, 0xdd, 0xfc, 0xe7, 0x9c,
	0xff, 0xcb, 0x9f, 0x39, 0x43, 0x8f, 0x11, 0x34, 0xd7, 0x18, 0xdb, 0xc2, 0xa0, 0x09, 0xfa, 0x42,
	0x95, 0x0e, 0xa1, 0x18, 0x5e, 0x64, 0xc6, 0x64, 0x0a, 0x18, 0xb7, 0x92, 0x71, 0xad, 0x0d, 0x72,
	0x94, 0x46, 0xbb, 0x66, 0x6c, 0x78, 0x9d, 0x49, 0xfc, 0x58, 0xa6, 0xb1, 0x30, 0x39, 0xb3, 0xa0,
	0x1d, 0xd7, 0x0b, 0xc3, 0xdc, 0x17, 0xf6, 0x19, 0xb4, 0x14, 0xc0, 0x4a, 0x94, 0xca, 0xd5, 0xd6,
	0x0c, 0x74, 0xd7, 0xcd, 0xa4, 0x16, 0xaa, 0x5c, 0xc0, 0x16, 0x73, 0xd5, 0xc1, 0x64, 0x26, 0x33,
	0xcc, 0x97, 0xd3, 0xf2, 0x83, 0x57, 0x5e, 0xf8, 0x53, 0x3b, 0xfe, 0xe8, 0x3f, 0x5f, 0xad, 0x33,
	0xe6, 0x80, 0xbc, 0x1d, 0x7b, 0x72, 0xc3, 0x98, 0xe2, 0x29, 0x28, 0xc7, 0x1c, 0x28, 0x10, 0x68,
	0x8a, 0xc6, 0x31, 0xfe, 0x76, 0x48, 0x7b, 0x73, 0x7f, 0x0d, 0xc1, 0x73, 0x4a, 0xe6, 0x21, 0x79,
	0x48, 0x1e, 0xdf, 0x7e, 0x7a, 0x12, 0x73, 0x2b, 0xe3, 0xf9, 0xd2, 0xc2, 0x1b, 0x40, 0x9e, 0x9c,
	0xaf, 0x36, 0xa3, 0x83, 0xf5, 0x66, 0x44, 0x7e, 0x6d, 0x46, 0xfd, 0x4b, 0xa9, 0x95, 0xd4, 0x30,
	0xdd, 0x1e, 0x82, 0x57, 0x94, 0x4c, 0xc2, 0x43, 0xef, 0xbb, 0xe3, 0x7d, 0x93, 0xf4, 0x13, 0x08,
	0xf4, 0xce, 0x61, 0xc7, 0x79, 0x5a, 0x07, 0xbd, 0x34, 0xb9, 0x44, 0xc8, 0x2d, 0x2e, 0xa7, 0x7b,
	0x3a, 0x78, 0x4d, 0x8f, 0x66, 0x16, 0x44, 0x78, 0xcb, 0xa3, 0xce, 0xe3, 0x76, 0x1f, 0x71, 0x13,
	0xaf, 0x6e, 0x25, 0xf7, 0x6b, 0x5c, 0x8d, 0x72, 0x16, 0x44, 0x17, 0xb5, 0xab, 0x83, 0x77, 0xb4,
	0x37, 0x43, 0x8e, 0xa5, 0x0b, 0x8f, 0x3c, 0xec, 0xde, 0x3e, 0xcc, 0x37, 0x93, 0xb0, 0xc5, 0x9d,
	0x39, 0xaf, 0x3b, 0xc0, 0xbf, 0x2a, 0x2f, 0x4e, 0xbe, 0x7f, 0x7d, 0x30, 0x08, 0xfa, 0xcd, 0x93,
	0x71, 0xe3, 0x19, 0xa5, 0x7f, 0x72, 0x05, 0xd7, 0x74, 0xf0, 0x72, 0x91, 0x4b, 0xfd, 0xde, 0x41,
	0xe1, 0xaf, 0x70, 0x90, 0x5c, 0xac, 0x9a, 0xbf, 0xbe, 0xcb, 0xeb, 0xc6, 0x55, 0xe9, 0xa0, 0xe8,
	0xf0, 0xff, 0x59, 0x1d, 0x9f, 0xd2, 0xe3, 0x9d, 0x7c, 0x67, 0xab, 0x2a, 0x22, 0xeb, 0x2a, 0x22,
	0x3f, 0xaa, 0x88, 0xfc, 0xac, 0xa2, 0x83, 0xb7, 0x24, 0xed, 0xf9, 0xbd, 0x3d, 0xfb, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x78, 0x76, 0xac, 0x53, 0xbd, 0x02, 0x00, 0x00,
}
