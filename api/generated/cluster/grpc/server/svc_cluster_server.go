// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package clusterApiServer is a auto generated package.
Input file: svc_cluster.proto
*/
package clusterApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	cluster "github.com/pensando/sw/api/generated/cluster"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type sclusterSvc_clusterBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsClusterV1 *eClusterV1Endpoints
}

type eClusterV1Endpoints struct {
	Svc                     sclusterSvc_clusterBackend
	fnAutoWatchSvcClusterV1 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnAuthBootstrapComplete func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddCluster        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddHost           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddNode           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddSmartNIC       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddTenant         func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteCluster     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteHost        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteNode        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteSmartNIC    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteTenant      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetCluster        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetHost           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetNode           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetSmartNIC       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetTenant         func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListCluster       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListHost          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListNode          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListSmartNIC      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListTenant        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateCluster     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateHost        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateNode        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateSmartNIC    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateTenant      func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchCluster  func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchNode     func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchHost     func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchSmartNIC func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchTenant   func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *sclusterSvc_clusterBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for sclusterSvc_clusterBackend")
	s.Messages = map[string]apiserver.Message{

		"cluster.AutoMsgClusterWatchHelper":  apisrvpkg.NewMessage("cluster.AutoMsgClusterWatchHelper"),
		"cluster.AutoMsgHostWatchHelper":     apisrvpkg.NewMessage("cluster.AutoMsgHostWatchHelper"),
		"cluster.AutoMsgNodeWatchHelper":     apisrvpkg.NewMessage("cluster.AutoMsgNodeWatchHelper"),
		"cluster.AutoMsgSmartNICWatchHelper": apisrvpkg.NewMessage("cluster.AutoMsgSmartNICWatchHelper"),
		"cluster.AutoMsgTenantWatchHelper":   apisrvpkg.NewMessage("cluster.AutoMsgTenantWatchHelper"),
		"cluster.ClusterList": apisrvpkg.NewMessage("cluster.ClusterList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.ClusterList{}
			into.Kind = "ClusterList"
			r := cluster.Cluster{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.ClusterList)
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}),
		"cluster.HostList": apisrvpkg.NewMessage("cluster.HostList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.HostList{}
			into.Kind = "HostList"
			r := cluster.Host{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.HostList)
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}),
		"cluster.NodeList": apisrvpkg.NewMessage("cluster.NodeList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.NodeList{}
			into.Kind = "NodeList"
			r := cluster.Node{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.NodeList)
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}),
		"cluster.SmartNICList": apisrvpkg.NewMessage("cluster.SmartNICList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.SmartNICList{}
			into.Kind = "SmartNICList"
			r := cluster.SmartNIC{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.SmartNICList)
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}),
		"cluster.TenantList": apisrvpkg.NewMessage("cluster.TenantList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.TenantList{}
			into.Kind = "TenantList"
			r := cluster.Tenant{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.TenantList)
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("cluster", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *sclusterSvc_clusterBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("ClusterV1")
		s.endpointsClusterV1.fnAutoWatchSvcClusterV1 = srv.WatchFromKv

		s.endpointsClusterV1.fnAuthBootstrapComplete = srv.AddMethod("AuthBootstrapComplete",
			apisrvpkg.NewMethod(pkgMessages["cluster.ClusterAuthBootstrapRequest"], pkgMessages["cluster.Cluster"], "cluster", "AuthBootstrapComplete")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddCluster = srv.AddMethod("AutoAddCluster",
			apisrvpkg.NewMethod(pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoAddCluster")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddHost = srv.AddMethod("AutoAddHost",
			apisrvpkg.NewMethod(pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoAddHost")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddNode = srv.AddMethod("AutoAddNode",
			apisrvpkg.NewMethod(pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoAddNode")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddSmartNIC = srv.AddMethod("AutoAddSmartNIC",
			apisrvpkg.NewMethod(pkgMessages["cluster.SmartNIC"], pkgMessages["cluster.SmartNIC"], "cluster", "AutoAddSmartNIC")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.SmartNIC)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/smartnics/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddTenant = srv.AddMethod("AutoAddTenant",
			apisrvpkg.NewMethod(pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoAddTenant")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteCluster = srv.AddMethod("AutoDeleteCluster",
			apisrvpkg.NewMethod(pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoDeleteCluster")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteHost = srv.AddMethod("AutoDeleteHost",
			apisrvpkg.NewMethod(pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoDeleteHost")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteNode = srv.AddMethod("AutoDeleteNode",
			apisrvpkg.NewMethod(pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoDeleteNode")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteSmartNIC = srv.AddMethod("AutoDeleteSmartNIC",
			apisrvpkg.NewMethod(pkgMessages["cluster.SmartNIC"], pkgMessages["cluster.SmartNIC"], "cluster", "AutoDeleteSmartNIC")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.SmartNIC)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/smartnics/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteTenant = srv.AddMethod("AutoDeleteTenant",
			apisrvpkg.NewMethod(pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoDeleteTenant")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetCluster = srv.AddMethod("AutoGetCluster",
			apisrvpkg.NewMethod(pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoGetCluster")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetHost = srv.AddMethod("AutoGetHost",
			apisrvpkg.NewMethod(pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoGetHost")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetNode = srv.AddMethod("AutoGetNode",
			apisrvpkg.NewMethod(pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoGetNode")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetSmartNIC = srv.AddMethod("AutoGetSmartNIC",
			apisrvpkg.NewMethod(pkgMessages["cluster.SmartNIC"], pkgMessages["cluster.SmartNIC"], "cluster", "AutoGetSmartNIC")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.SmartNIC)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/smartnics/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetTenant = srv.AddMethod("AutoGetTenant",
			apisrvpkg.NewMethod(pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoGetTenant")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListCluster = srv.AddMethod("AutoListCluster",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.ClusterList"], "cluster", "AutoListCluster")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListHost = srv.AddMethod("AutoListHost",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.HostList"], "cluster", "AutoListHost")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListNode = srv.AddMethod("AutoListNode",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.NodeList"], "cluster", "AutoListNode")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListSmartNIC = srv.AddMethod("AutoListSmartNIC",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.SmartNICList"], "cluster", "AutoListSmartNIC")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/smartnics/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListTenant = srv.AddMethod("AutoListTenant",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.TenantList"], "cluster", "AutoListTenant")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateCluster = srv.AddMethod("AutoUpdateCluster",
			apisrvpkg.NewMethod(pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoUpdateCluster")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateHost = srv.AddMethod("AutoUpdateHost",
			apisrvpkg.NewMethod(pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoUpdateHost")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateNode = srv.AddMethod("AutoUpdateNode",
			apisrvpkg.NewMethod(pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoUpdateNode")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateSmartNIC = srv.AddMethod("AutoUpdateSmartNIC",
			apisrvpkg.NewMethod(pkgMessages["cluster.SmartNIC"], pkgMessages["cluster.SmartNIC"], "cluster", "AutoUpdateSmartNIC")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.SmartNIC)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/smartnics/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateTenant = srv.AddMethod("AutoUpdateTenant",
			apisrvpkg.NewMethod(pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoUpdateTenant")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoWatchCluster = pkgMessages["cluster.Cluster"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchNode = pkgMessages["cluster.Node"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchHost = pkgMessages["cluster.Host"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchSmartNIC = pkgMessages["cluster.SmartNIC"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchTenant = pkgMessages["cluster.Tenant"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"cluster.ClusterV1": srv,
		}
		apisrv.RegisterService("cluster.ClusterV1", srv)
		endpoints := cluster.MakeClusterV1ServerEndpoints(s.endpointsClusterV1, logger)
		server := cluster.MakeGRPCServerClusterV1(ctx, endpoints, logger)
		cluster.RegisterClusterV1Server(grpcserver.GrpcServer, server)
	}
}

func (s *sclusterSvc_clusterBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		// Service watcher
		svc := s.Services["cluster.ClusterV1"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				key := globals.ConfigRootPrefix + "/cluster"
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				defer cancel()
				watcher, err := kvs.WatchFiltered(nctx, key, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "error", err, "service", "ClusterV1")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		pkgMessages["cluster.Cluster"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Cluster{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchClusterServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.Infof("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "cluster.Cluster")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "cluster.Cluster")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgClusterWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "cluster.Cluster")
					return err
				}
				events = &cluster.AutoMsgClusterWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Cluster")
						return nil
					}
					in, ok := ev.Object.(*cluster.Cluster)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &cluster.AutoMsgClusterWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Cluster watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Cluster", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Cluster")
							break
						}
						strEvent.Object = i.(*cluster.Cluster)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Cluster")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Node"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Node{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchNodeServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.Infof("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "cluster.Node")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "cluster.Node")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgNodeWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "cluster.Node")
					return err
				}
				events = &cluster.AutoMsgNodeWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Node")
						return nil
					}
					in, ok := ev.Object.(*cluster.Node)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &cluster.AutoMsgNodeWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Node watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Node", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Node")
							break
						}
						strEvent.Object = i.(*cluster.Node)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Node")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Host"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Host{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchHostServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.Infof("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "cluster.Host")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "cluster.Host")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgHostWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "cluster.Host")
					return err
				}
				events = &cluster.AutoMsgHostWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Host")
						return nil
					}
					in, ok := ev.Object.(*cluster.Host)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &cluster.AutoMsgHostWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Host watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Host", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Host")
							break
						}
						strEvent.Object = i.(*cluster.Host)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Host")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.SmartNIC"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.SmartNIC{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchSmartNICServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.Infof("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "cluster.SmartNIC")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "cluster.SmartNIC")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgSmartNICWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "cluster.SmartNIC")
					return err
				}
				events = &cluster.AutoMsgSmartNICWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.SmartNIC")
						return nil
					}
					in, ok := ev.Object.(*cluster.SmartNIC)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &cluster.AutoMsgSmartNICWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received SmartNIC watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "SmartNIC", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.SmartNIC")
							break
						}
						strEvent.Object = i.(*cluster.SmartNIC)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.SmartNIC")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Tenant"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Tenant{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchTenantServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.Infof("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "cluster.Tenant")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "cluster.Tenant")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgTenantWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "cluster.Tenant")
					return err
				}
				events = &cluster.AutoMsgTenantWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Tenant")
						return nil
					}
					in, ok := ev.Object.(*cluster.Tenant)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &cluster.AutoMsgTenantWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Tenant watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Tenant", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Tenant")
							break
						}
						strEvent.Object = i.(*cluster.Tenant)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Tenant")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *sclusterSvc_clusterBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *sclusterSvc_clusterBackend) Reset() {
	cleanupRegistration()
}

func (e *eClusterV1Endpoints) AuthBootstrapComplete(ctx context.Context, t cluster.ClusterAuthBootstrapRequest) (cluster.Cluster, error) {
	r, err := e.fnAuthBootstrapComplete(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoAddCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoAddCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoAddHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoAddHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoAddNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoAddNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoAddSmartNIC(ctx context.Context, t cluster.SmartNIC) (cluster.SmartNIC, error) {
	r, err := e.fnAutoAddSmartNIC(ctx, t)
	if err == nil {
		return r.(cluster.SmartNIC), err
	}
	return cluster.SmartNIC{}, err

}
func (e *eClusterV1Endpoints) AutoAddTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoAddTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoDeleteCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoDeleteHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoDeleteNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteSmartNIC(ctx context.Context, t cluster.SmartNIC) (cluster.SmartNIC, error) {
	r, err := e.fnAutoDeleteSmartNIC(ctx, t)
	if err == nil {
		return r.(cluster.SmartNIC), err
	}
	return cluster.SmartNIC{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoDeleteTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoGetCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoGetCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoGetHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoGetHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoGetNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoGetNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoGetSmartNIC(ctx context.Context, t cluster.SmartNIC) (cluster.SmartNIC, error) {
	r, err := e.fnAutoGetSmartNIC(ctx, t)
	if err == nil {
		return r.(cluster.SmartNIC), err
	}
	return cluster.SmartNIC{}, err

}
func (e *eClusterV1Endpoints) AutoGetTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoGetTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoListCluster(ctx context.Context, t api.ListWatchOptions) (cluster.ClusterList, error) {
	r, err := e.fnAutoListCluster(ctx, t)
	if err == nil {
		return r.(cluster.ClusterList), err
	}
	return cluster.ClusterList{}, err

}
func (e *eClusterV1Endpoints) AutoListHost(ctx context.Context, t api.ListWatchOptions) (cluster.HostList, error) {
	r, err := e.fnAutoListHost(ctx, t)
	if err == nil {
		return r.(cluster.HostList), err
	}
	return cluster.HostList{}, err

}
func (e *eClusterV1Endpoints) AutoListNode(ctx context.Context, t api.ListWatchOptions) (cluster.NodeList, error) {
	r, err := e.fnAutoListNode(ctx, t)
	if err == nil {
		return r.(cluster.NodeList), err
	}
	return cluster.NodeList{}, err

}
func (e *eClusterV1Endpoints) AutoListSmartNIC(ctx context.Context, t api.ListWatchOptions) (cluster.SmartNICList, error) {
	r, err := e.fnAutoListSmartNIC(ctx, t)
	if err == nil {
		return r.(cluster.SmartNICList), err
	}
	return cluster.SmartNICList{}, err

}
func (e *eClusterV1Endpoints) AutoListTenant(ctx context.Context, t api.ListWatchOptions) (cluster.TenantList, error) {
	r, err := e.fnAutoListTenant(ctx, t)
	if err == nil {
		return r.(cluster.TenantList), err
	}
	return cluster.TenantList{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoUpdateCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoUpdateHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoUpdateNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateSmartNIC(ctx context.Context, t cluster.SmartNIC) (cluster.SmartNIC, error) {
	r, err := e.fnAutoUpdateSmartNIC(ctx, t)
	if err == nil {
		return r.(cluster.SmartNIC), err
	}
	return cluster.SmartNIC{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoUpdateTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}

func (e *eClusterV1Endpoints) AutoWatchCluster(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchClusterServer) error {
	return e.fnAutoWatchCluster(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchNode(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchNodeServer) error {
	return e.fnAutoWatchNode(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchHost(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchHostServer) error {
	return e.fnAutoWatchHost(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchSmartNIC(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchSmartNICServer) error {
	return e.fnAutoWatchSmartNIC(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchTenant(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchTenantServer) error {
	return e.fnAutoWatchTenant(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchSvcClusterV1(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchSvcClusterV1Server) error {
	return e.fnAutoWatchSvcClusterV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := sclusterSvc_clusterBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eClusterV1Endpoints{Svc: svc}
		svc.endpointsClusterV1 = &e
	}
	apisrv.Register("cluster.svc_cluster.proto", &svc)
}
