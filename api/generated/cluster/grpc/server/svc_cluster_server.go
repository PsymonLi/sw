// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package clusterApiServer is a auto generated package.
Input file: svc_cluster.proto
*/
package clusterApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	cluster "github.com/pensando/sw/api/generated/cluster"
	fieldhooks "github.com/pensando/sw/api/hooks/apiserver/fields"
	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer
var _ fieldhooks.Dummy

type sclusterSvc_clusterBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsClusterV1 *eClusterV1Endpoints
}

type eClusterV1Endpoints struct {
	Svc                     sclusterSvc_clusterBackend
	fnAutoWatchSvcClusterV1 func(in *api.AggWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnAuthBootstrapComplete            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddCluster                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddConfigurationSnapshot     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddDSCProfile                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddDistributedServiceCard    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddHost                      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddLicense                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddNode                      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddSnapshotRestore           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddTenant                    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddVersion                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteCluster                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteConfigurationSnapshot  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteDSCProfile             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteDistributedServiceCard func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteHost                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteLicense                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteNode                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteSnapshotRestore        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteTenant                 func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteVersion                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetCluster                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetConfigurationSnapshot     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetDSCProfile                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetDistributedServiceCard    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetHost                      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetLicense                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetNode                      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetSnapshotRestore           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetTenant                    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetVersion                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelCluster                 func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelConfigurationSnapshot   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelDSCProfile              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelDistributedServiceCard  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelHost                    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelLicense                 func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelNode                    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelSnapshotRestore         func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelTenant                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelVersion                 func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListCluster                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListConfigurationSnapshot    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListDSCProfile               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListDistributedServiceCard   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListHost                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListLicense                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListNode                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListSnapshotRestore          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListTenant                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListVersion                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateCluster                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateConfigurationSnapshot  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateDSCProfile             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateDistributedServiceCard func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateHost                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateLicense                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateNode                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateSnapshotRestore        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateTenant                 func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateVersion                func(ctx context.Context, t interface{}) (interface{}, error)
	fnRestore                          func(ctx context.Context, t interface{}) (interface{}, error)
	fnSave                             func(ctx context.Context, t interface{}) (interface{}, error)
	fnUpdateTLSConfig                  func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchCluster                func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchNode                   func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchHost                   func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchDistributedServiceCard func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchTenant                 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchVersion                func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchConfigurationSnapshot  func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchSnapshotRestore        func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchLicense                func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchDSCProfile             func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *sclusterSvc_clusterBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for sclusterSvc_clusterBackend")
	s.Messages = map[string]apiserver.Message{

		"cluster.AutoMsgClusterWatchHelper":                apisrvpkg.NewMessage("cluster.AutoMsgClusterWatchHelper"),
		"cluster.AutoMsgConfigurationSnapshotWatchHelper":  apisrvpkg.NewMessage("cluster.AutoMsgConfigurationSnapshotWatchHelper"),
		"cluster.AutoMsgDSCProfileWatchHelper":             apisrvpkg.NewMessage("cluster.AutoMsgDSCProfileWatchHelper"),
		"cluster.AutoMsgDistributedServiceCardWatchHelper": apisrvpkg.NewMessage("cluster.AutoMsgDistributedServiceCardWatchHelper"),
		"cluster.AutoMsgHostWatchHelper":                   apisrvpkg.NewMessage("cluster.AutoMsgHostWatchHelper"),
		"cluster.AutoMsgLicenseWatchHelper":                apisrvpkg.NewMessage("cluster.AutoMsgLicenseWatchHelper"),
		"cluster.AutoMsgNodeWatchHelper":                   apisrvpkg.NewMessage("cluster.AutoMsgNodeWatchHelper"),
		"cluster.AutoMsgSnapshotRestoreWatchHelper":        apisrvpkg.NewMessage("cluster.AutoMsgSnapshotRestoreWatchHelper"),
		"cluster.AutoMsgTenantWatchHelper":                 apisrvpkg.NewMessage("cluster.AutoMsgTenantWatchHelper"),
		"cluster.AutoMsgVersionWatchHelper":                apisrvpkg.NewMessage("cluster.AutoMsgVersionWatchHelper"),
		"cluster.ClusterList": apisrvpkg.NewMessage("cluster.ClusterList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.ClusterList{}
			into.Kind = "ClusterList"
			r := cluster.Cluster{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.Cluster")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			err = into.ApplyStorageTransformer(ctx, false)
			if err != nil {
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.ClusterList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.ClusterList)
			return &r
		}),
		"cluster.ConfigurationSnapshotList": apisrvpkg.NewMessage("cluster.ConfigurationSnapshotList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.ConfigurationSnapshotList{}
			into.Kind = "ConfigurationSnapshotList"
			r := cluster.ConfigurationSnapshot{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.ConfigurationSnapshot")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.ConfigurationSnapshotList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.ConfigurationSnapshotList)
			return &r
		}),
		"cluster.DSCProfileList": apisrvpkg.NewMessage("cluster.DSCProfileList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.DSCProfileList{}
			into.Kind = "DSCProfileList"
			r := cluster.DSCProfile{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.DSCProfile")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.DSCProfileList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.DSCProfileList)
			return &r
		}),
		"cluster.DistributedServiceCardList": apisrvpkg.NewMessage("cluster.DistributedServiceCardList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.DistributedServiceCardList{}
			into.Kind = "DistributedServiceCardList"
			r := cluster.DistributedServiceCard{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.DistributedServiceCard")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.DistributedServiceCardList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.DistributedServiceCardList)
			return &r
		}),
		"cluster.HostList": apisrvpkg.NewMessage("cluster.HostList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.HostList{}
			into.Kind = "HostList"
			r := cluster.Host{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.Host")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.HostList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.HostList)
			return &r
		}),
		"cluster.LicenseList": apisrvpkg.NewMessage("cluster.LicenseList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.LicenseList{}
			into.Kind = "LicenseList"
			r := cluster.License{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.License")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.LicenseList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.LicenseList)
			return &r
		}),
		"cluster.NodeList": apisrvpkg.NewMessage("cluster.NodeList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.NodeList{}
			into.Kind = "NodeList"
			r := cluster.Node{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.Node")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.NodeList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.NodeList)
			return &r
		}),
		"cluster.SnapshotRestoreList": apisrvpkg.NewMessage("cluster.SnapshotRestoreList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.SnapshotRestoreList{}
			into.Kind = "SnapshotRestoreList"
			r := cluster.SnapshotRestore{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.SnapshotRestore")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.SnapshotRestoreList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.SnapshotRestoreList)
			return &r
		}),
		"cluster.TenantList": apisrvpkg.NewMessage("cluster.TenantList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.TenantList{}
			into.Kind = "TenantList"
			r := cluster.Tenant{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.Tenant")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.TenantList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.TenantList)
			return &r
		}),
		"cluster.VersionList": apisrvpkg.NewMessage("cluster.VersionList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cluster.VersionList{}
			into.Kind = "VersionList"
			r := cluster.Version{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			ctx = apiutils.SetVar(ctx, "ObjKind", "cluster.Version")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(cluster.VersionList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(cluster.VersionList)
			return &r
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
		// Add a message handler for Label options
		"api.Label": apisrvpkg.NewMessage("api.Label").WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(api.Label)
			return &r
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(api.Label)
			r.APIVersion = version
			return r
		}),
	}

	apisrv.RegisterMessages("cluster", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *sclusterSvc_clusterBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("cluster.ClusterV1")
		s.endpointsClusterV1.fnAutoWatchSvcClusterV1 = srv.WatchFromKv

		s.endpointsClusterV1.fnAuthBootstrapComplete = srv.AddMethod("AuthBootstrapComplete",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ClusterAuthBootstrapRequest"], pkgMessages["cluster.Cluster"], "cluster", "AuthBootstrapComplete")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddCluster = srv.AddMethod("AutoAddCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoAddCluster")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddConfigurationSnapshot = srv.AddMethod("AutoAddConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ConfigurationSnapshot"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "AutoAddConfigurationSnapshot")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddDSCProfile = srv.AddMethod("AutoAddDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DSCProfile"], pkgMessages["cluster.DSCProfile"], "cluster", "AutoAddDSCProfile")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DSCProfile)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddDistributedServiceCard = srv.AddMethod("AutoAddDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DistributedServiceCard"], pkgMessages["cluster.DistributedServiceCard"], "cluster", "AutoAddDistributedServiceCard")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddHost = srv.AddMethod("AutoAddHost",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoAddHost")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddLicense = srv.AddMethod("AutoAddLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.License"], pkgMessages["cluster.License"], "cluster", "AutoAddLicense")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/licenses"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddNode = srv.AddMethod("AutoAddNode",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoAddNode")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddSnapshotRestore = srv.AddMethod("AutoAddSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.SnapshotRestore"], pkgMessages["cluster.SnapshotRestore"], "cluster", "AutoAddSnapshotRestore")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddTenant = srv.AddMethod("AutoAddTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoAddTenant")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoAddVersion = srv.AddMethod("AutoAddVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Version"], pkgMessages["cluster.Version"], "cluster", "AutoAddVersion")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteCluster = srv.AddMethod("AutoDeleteCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoDeleteCluster")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteConfigurationSnapshot = srv.AddMethod("AutoDeleteConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ConfigurationSnapshot"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "AutoDeleteConfigurationSnapshot")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteDSCProfile = srv.AddMethod("AutoDeleteDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DSCProfile"], pkgMessages["cluster.DSCProfile"], "cluster", "AutoDeleteDSCProfile")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DSCProfile)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteDistributedServiceCard = srv.AddMethod("AutoDeleteDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DistributedServiceCard"], pkgMessages["cluster.DistributedServiceCard"], "cluster", "AutoDeleteDistributedServiceCard")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DistributedServiceCard)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/distributedservicecards/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteHost = srv.AddMethod("AutoDeleteHost",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoDeleteHost")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteLicense = srv.AddMethod("AutoDeleteLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.License"], pkgMessages["cluster.License"], "cluster", "AutoDeleteLicense")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteNode = srv.AddMethod("AutoDeleteNode",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoDeleteNode")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteSnapshotRestore = srv.AddMethod("AutoDeleteSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.SnapshotRestore"], pkgMessages["cluster.SnapshotRestore"], "cluster", "AutoDeleteSnapshotRestore")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteTenant = srv.AddMethod("AutoDeleteTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoDeleteTenant")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoDeleteVersion = srv.AddMethod("AutoDeleteVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Version"], pkgMessages["cluster.Version"], "cluster", "AutoDeleteVersion")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetCluster = srv.AddMethod("AutoGetCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoGetCluster")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetConfigurationSnapshot = srv.AddMethod("AutoGetConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ConfigurationSnapshot"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "AutoGetConfigurationSnapshot")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetDSCProfile = srv.AddMethod("AutoGetDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DSCProfile"], pkgMessages["cluster.DSCProfile"], "cluster", "AutoGetDSCProfile")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DSCProfile)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetDistributedServiceCard = srv.AddMethod("AutoGetDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DistributedServiceCard"], pkgMessages["cluster.DistributedServiceCard"], "cluster", "AutoGetDistributedServiceCard")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DistributedServiceCard)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/distributedservicecards/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetHost = srv.AddMethod("AutoGetHost",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoGetHost")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetLicense = srv.AddMethod("AutoGetLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.License"], pkgMessages["cluster.License"], "cluster", "AutoGetLicense")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/licenses"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetNode = srv.AddMethod("AutoGetNode",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoGetNode")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetSnapshotRestore = srv.AddMethod("AutoGetSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.SnapshotRestore"], pkgMessages["cluster.SnapshotRestore"], "cluster", "AutoGetSnapshotRestore")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-restore"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetTenant = srv.AddMethod("AutoGetTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoGetTenant")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoGetVersion = srv.AddMethod("AutoGetVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Version"], pkgMessages["cluster.Version"], "cluster", "AutoGetVersion")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/version"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelCluster = srv.AddMethod("AutoLabelCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.Cluster"], "cluster", "AutoLabelCluster")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.Cluster{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.Cluster{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelConfigurationSnapshot = srv.AddMethod("AutoLabelConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "AutoLabelConfigurationSnapshot")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.ConfigurationSnapshot{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.ConfigurationSnapshot{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelDSCProfile = srv.AddMethod("AutoLabelDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.DSCProfile"], "cluster", "AutoLabelDSCProfile")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.DSCProfile{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.DSCProfile{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelDistributedServiceCard = srv.AddMethod("AutoLabelDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.DistributedServiceCard"], "cluster", "AutoLabelDistributedServiceCard")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/distributedservicecards/", in.Name), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.DistributedServiceCard{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.DistributedServiceCard{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelHost = srv.AddMethod("AutoLabelHost",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.Host"], "cluster", "AutoLabelHost")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.Host{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.Host{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelLicense = srv.AddMethod("AutoLabelLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.License"], "cluster", "AutoLabelLicense")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/licenses"), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.License{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.License{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelNode = srv.AddMethod("AutoLabelNode",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.Node"], "cluster", "AutoLabelNode")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.Node{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.Node{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelSnapshotRestore = srv.AddMethod("AutoLabelSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.SnapshotRestore"], "cluster", "AutoLabelSnapshotRestore")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.SnapshotRestore{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.SnapshotRestore{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelTenant = srv.AddMethod("AutoLabelTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.Tenant"], "cluster", "AutoLabelTenant")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.Tenant{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.Tenant{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoLabelVersion = srv.AddMethod("AutoLabelVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["cluster.Version"], "cluster", "AutoLabelVersion")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := cluster.Version{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := cluster.Version{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListCluster = srv.AddMethod("AutoListCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.ClusterList"], "cluster", "AutoListCluster")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListConfigurationSnapshot = srv.AddMethod("AutoListConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.ConfigurationSnapshotList"], "cluster", "AutoListConfigurationSnapshot")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListDSCProfile = srv.AddMethod("AutoListDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.DSCProfileList"], "cluster", "AutoListDSCProfile")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListDistributedServiceCard = srv.AddMethod("AutoListDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.DistributedServiceCardList"], "cluster", "AutoListDistributedServiceCard")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/distributedservicecards/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListHost = srv.AddMethod("AutoListHost",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.HostList"], "cluster", "AutoListHost")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListLicense = srv.AddMethod("AutoListLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.LicenseList"], "cluster", "AutoListLicense")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListNode = srv.AddMethod("AutoListNode",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.NodeList"], "cluster", "AutoListNode")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListSnapshotRestore = srv.AddMethod("AutoListSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.SnapshotRestoreList"], "cluster", "AutoListSnapshotRestore")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListTenant = srv.AddMethod("AutoListTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.TenantList"], "cluster", "AutoListTenant")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoListVersion = srv.AddMethod("AutoListVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["cluster.VersionList"], "cluster", "AutoListVersion")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateCluster = srv.AddMethod("AutoUpdateCluster",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Cluster"], pkgMessages["cluster.Cluster"], "cluster", "AutoUpdateCluster")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateConfigurationSnapshot = srv.AddMethod("AutoUpdateConfigurationSnapshot",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ConfigurationSnapshot"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "AutoUpdateConfigurationSnapshot")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateDSCProfile = srv.AddMethod("AutoUpdateDSCProfile",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DSCProfile"], pkgMessages["cluster.DSCProfile"], "cluster", "AutoUpdateDSCProfile")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DSCProfile)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/dscprofiles/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateDistributedServiceCard = srv.AddMethod("AutoUpdateDistributedServiceCard",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.DistributedServiceCard"], pkgMessages["cluster.DistributedServiceCard"], "cluster", "AutoUpdateDistributedServiceCard")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.DistributedServiceCard)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/distributedservicecards/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateHost = srv.AddMethod("AutoUpdateHost",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Host"], pkgMessages["cluster.Host"], "cluster", "AutoUpdateHost")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Host)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/hosts/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateLicense = srv.AddMethod("AutoUpdateLicense",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.License"], pkgMessages["cluster.License"], "cluster", "AutoUpdateLicense")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/licenses"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateNode = srv.AddMethod("AutoUpdateNode",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Node"], pkgMessages["cluster.Node"], "cluster", "AutoUpdateNode")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Node)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/nodes/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateSnapshotRestore = srv.AddMethod("AutoUpdateSnapshotRestore",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.SnapshotRestore"], pkgMessages["cluster.SnapshotRestore"], "cluster", "AutoUpdateSnapshotRestore")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateTenant = srv.AddMethod("AutoUpdateTenant",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Tenant"], pkgMessages["cluster.Tenant"], "cluster", "AutoUpdateTenant")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(cluster.Tenant)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/tenants/", in.Name), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoUpdateVersion = srv.AddMethod("AutoUpdateVersion",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.Version"], pkgMessages["cluster.Version"], "cluster", "AutoUpdateVersion")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsClusterV1.fnRestore = srv.AddMethod("Restore",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.SnapshotRestore"], pkgMessages["cluster.SnapshotRestore"], "cluster", "Restore")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-restore"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnSave = srv.AddMethod("Save",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.ConfigurationSnapshotRequest"], pkgMessages["cluster.ConfigurationSnapshot"], "cluster", "Save")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/config-snapshot"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnUpdateTLSConfig = srv.AddMethod("UpdateTLSConfig",
			apisrvpkg.NewMethod(srv, pkgMessages["cluster.UpdateTLSConfigRequest"], pkgMessages["cluster.Cluster"], "cluster", "UpdateTLSConfig")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "cluster/v1/cluster"), nil
		}).HandleInvocation

		s.endpointsClusterV1.fnAutoWatchCluster = pkgMessages["cluster.Cluster"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchNode = pkgMessages["cluster.Node"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchHost = pkgMessages["cluster.Host"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchDistributedServiceCard = pkgMessages["cluster.DistributedServiceCard"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchTenant = pkgMessages["cluster.Tenant"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchVersion = pkgMessages["cluster.Version"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchConfigurationSnapshot = pkgMessages["cluster.ConfigurationSnapshot"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchSnapshotRestore = pkgMessages["cluster.SnapshotRestore"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchLicense = pkgMessages["cluster.License"].WatchFromKv

		s.endpointsClusterV1.fnAutoWatchDSCProfile = pkgMessages["cluster.DSCProfile"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"cluster.ClusterV1": srv,
		}
		apisrv.RegisterService("cluster.ClusterV1", srv)
		endpoints := cluster.MakeClusterV1ServerEndpoints(s.endpointsClusterV1, logger)
		server := cluster.MakeGRPCServerClusterV1(ctx, endpoints, logger)
		cluster.RegisterClusterV1Server(grpcserver.GrpcServer, server)
		svcObjs := []string{"Cluster", "Node", "Host", "DistributedServiceCard", "Tenant", "Version", "ConfigurationSnapshot", "SnapshotRestore", "License", "DSCProfile"}
		fieldhooks.RegisterImmutableFieldsServiceHooks("cluster", "ClusterV1", svcObjs)
	}
}

func (s *sclusterSvc_clusterBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{
		// Service watcher
		svc := s.Services["cluster.ClusterV1"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.AggWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				for _, o := range options.WatchOptions {
					if o.Group != "cluster" {
						return fmt.Errorf("invalid group [%s] in watch options", o.Group)
					}
				}
				if len(options.WatchOptions) == 0 {
					options.WatchOptions = append(options.WatchOptions, api.KindWatchOptions{Group: "cluster"})
				}
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &options)
				nctx = ctxutils.SetContextID(nctx, id)
				defer cancel()
				watcher, err := kvs.WatchAggregate(nctx, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "err", err, "service", "ClusterV1")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		pkgMessages["cluster.Cluster"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Cluster{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchClusterServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.Cluster")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.Cluster")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.Cluster")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgClusterWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.Cluster")
					return err
				}
				events = &cluster.AutoMsgClusterWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.Cluster")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Cluster")
						return nil
					}
					evin, ok := ev.Object.(*cluster.Cluster)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.Cluster)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")
					{
						txin, err := cluster.StorageClusterTransformer.TransformFromStorage(nctx, *in)
						if err != nil {
							return errors.Wrap(err, "Failed to apply storage transformer to Cluster")
						}
						obj := txin.(cluster.Cluster)
						in = &obj
					}
					strEvent := &cluster.AutoMsgClusterWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Cluster watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Cluster", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Cluster")
							break
						}
						strEvent.Object = i.(*cluster.Cluster)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Cluster")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Node"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Node{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchNodeServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.Node")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.Node")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.Node")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgNodeWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.Node")
					return err
				}
				events = &cluster.AutoMsgNodeWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.Node")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Node")
						return nil
					}
					evin, ok := ev.Object.(*cluster.Node)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.Node)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgNodeWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Node watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Node", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Node")
							break
						}
						strEvent.Object = i.(*cluster.Node)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Node")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Host"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Host{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchHostServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.Host")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.Host")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.Host")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgHostWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.Host")
					return err
				}
				events = &cluster.AutoMsgHostWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.Host")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Host")
						return nil
					}
					evin, ok := ev.Object.(*cluster.Host)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.Host)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgHostWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Host watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Host", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Host")
							break
						}
						strEvent.Object = i.(*cluster.Host)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Host")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.DistributedServiceCard"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.DistributedServiceCard{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchDistributedServiceCardServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.DistributedServiceCard")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.DistributedServiceCard")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.DistributedServiceCard")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgDistributedServiceCardWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.DistributedServiceCard")
					return err
				}
				events = &cluster.AutoMsgDistributedServiceCardWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.DistributedServiceCard")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.DistributedServiceCard")
						return nil
					}
					evin, ok := ev.Object.(*cluster.DistributedServiceCard)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.DistributedServiceCard)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgDistributedServiceCardWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received DistributedServiceCard watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "DistributedServiceCard", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.DistributedServiceCard")
							break
						}
						strEvent.Object = i.(*cluster.DistributedServiceCard)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.DistributedServiceCard")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Tenant"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Tenant{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchTenantServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.Tenant")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.Tenant")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.Tenant")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgTenantWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.Tenant")
					return err
				}
				events = &cluster.AutoMsgTenantWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.Tenant")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Tenant")
						return nil
					}
					evin, ok := ev.Object.(*cluster.Tenant)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.Tenant)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgTenantWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Tenant watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Tenant", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Tenant")
							break
						}
						strEvent.Object = i.(*cluster.Tenant)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Tenant")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.Version"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.Version{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchVersionServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.Version")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.Version")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.Version")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgVersionWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.Version")
					return err
				}
				events = &cluster.AutoMsgVersionWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.Version")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.Version")
						return nil
					}
					evin, ok := ev.Object.(*cluster.Version)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.Version)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgVersionWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Version watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Version", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.Version")
							break
						}
						strEvent.Object = i.(*cluster.Version)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.Version")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.ConfigurationSnapshot"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.ConfigurationSnapshot{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchConfigurationSnapshotServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.ConfigurationSnapshot")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.ConfigurationSnapshot")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.ConfigurationSnapshot")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgConfigurationSnapshotWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.ConfigurationSnapshot")
					return err
				}
				events = &cluster.AutoMsgConfigurationSnapshotWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.ConfigurationSnapshot")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.ConfigurationSnapshot")
						return nil
					}
					evin, ok := ev.Object.(*cluster.ConfigurationSnapshot)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.ConfigurationSnapshot)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgConfigurationSnapshotWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received ConfigurationSnapshot watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "ConfigurationSnapshot", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.ConfigurationSnapshot")
							break
						}
						strEvent.Object = i.(*cluster.ConfigurationSnapshot)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.ConfigurationSnapshot")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.SnapshotRestore"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.SnapshotRestore{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchSnapshotRestoreServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.SnapshotRestore")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.SnapshotRestore")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.SnapshotRestore")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgSnapshotRestoreWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.SnapshotRestore")
					return err
				}
				events = &cluster.AutoMsgSnapshotRestoreWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.SnapshotRestore")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.SnapshotRestore")
						return nil
					}
					evin, ok := ev.Object.(*cluster.SnapshotRestore)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.SnapshotRestore)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgSnapshotRestoreWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received SnapshotRestore watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "SnapshotRestore", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.SnapshotRestore")
							break
						}
						strEvent.Object = i.(*cluster.SnapshotRestore)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.SnapshotRestore")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.License"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.License{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchLicenseServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.License")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.License")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.License")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgLicenseWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.License")
					return err
				}
				events = &cluster.AutoMsgLicenseWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.License")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.License")
						return nil
					}
					evin, ok := ev.Object.(*cluster.License)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.License)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgLicenseWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received License watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "License", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.License")
							break
						}
						strEvent.Object = i.(*cluster.License)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.License")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["cluster.DSCProfile"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cluster.DSCProfile{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(cluster.ClusterV1_AutoWatchDSCProfileServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "cluster.DSCProfile")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "cluster.DSCProfile")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "cluster.DSCProfile")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &cluster.AutoMsgDSCProfileWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "cluster.DSCProfile")
					return err
				}
				events = &cluster.AutoMsgDSCProfileWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "cluster.DSCProfile")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "cluster.DSCProfile")
						return nil
					}
					evin, ok := ev.Object.(*cluster.DSCProfile)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*cluster.DSCProfile)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "cluster")

					strEvent := &cluster.AutoMsgDSCProfileWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received DSCProfile watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "DSCProfile", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "cluster.DSCProfile")
							break
						}
						strEvent.Object = i.(*cluster.DSCProfile)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "cluster.DSCProfile")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *sclusterSvc_clusterBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *sclusterSvc_clusterBackend) Reset() {
	cleanupRegistration()
}

func (e *eClusterV1Endpoints) AuthBootstrapComplete(ctx context.Context, t cluster.ClusterAuthBootstrapRequest) (cluster.Cluster, error) {
	r, err := e.fnAuthBootstrapComplete(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoAddCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoAddCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoAddConfigurationSnapshot(ctx context.Context, t cluster.ConfigurationSnapshot) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnAutoAddConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) AutoAddDSCProfile(ctx context.Context, t cluster.DSCProfile) (cluster.DSCProfile, error) {
	r, err := e.fnAutoAddDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfile), err
	}
	return cluster.DSCProfile{}, err

}
func (e *eClusterV1Endpoints) AutoAddDistributedServiceCard(ctx context.Context, t cluster.DistributedServiceCard) (cluster.DistributedServiceCard, error) {
	r, err := e.fnAutoAddDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCard), err
	}
	return cluster.DistributedServiceCard{}, err

}
func (e *eClusterV1Endpoints) AutoAddHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoAddHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoAddLicense(ctx context.Context, t cluster.License) (cluster.License, error) {
	r, err := e.fnAutoAddLicense(ctx, t)
	if err == nil {
		return r.(cluster.License), err
	}
	return cluster.License{}, err

}
func (e *eClusterV1Endpoints) AutoAddNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoAddNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoAddSnapshotRestore(ctx context.Context, t cluster.SnapshotRestore) (cluster.SnapshotRestore, error) {
	r, err := e.fnAutoAddSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) AutoAddTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoAddTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoAddVersion(ctx context.Context, t cluster.Version) (cluster.Version, error) {
	r, err := e.fnAutoAddVersion(ctx, t)
	if err == nil {
		return r.(cluster.Version), err
	}
	return cluster.Version{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoDeleteCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteConfigurationSnapshot(ctx context.Context, t cluster.ConfigurationSnapshot) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnAutoDeleteConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteDSCProfile(ctx context.Context, t cluster.DSCProfile) (cluster.DSCProfile, error) {
	r, err := e.fnAutoDeleteDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfile), err
	}
	return cluster.DSCProfile{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteDistributedServiceCard(ctx context.Context, t cluster.DistributedServiceCard) (cluster.DistributedServiceCard, error) {
	r, err := e.fnAutoDeleteDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCard), err
	}
	return cluster.DistributedServiceCard{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoDeleteHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteLicense(ctx context.Context, t cluster.License) (cluster.License, error) {
	r, err := e.fnAutoDeleteLicense(ctx, t)
	if err == nil {
		return r.(cluster.License), err
	}
	return cluster.License{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoDeleteNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteSnapshotRestore(ctx context.Context, t cluster.SnapshotRestore) (cluster.SnapshotRestore, error) {
	r, err := e.fnAutoDeleteSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoDeleteTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoDeleteVersion(ctx context.Context, t cluster.Version) (cluster.Version, error) {
	r, err := e.fnAutoDeleteVersion(ctx, t)
	if err == nil {
		return r.(cluster.Version), err
	}
	return cluster.Version{}, err

}
func (e *eClusterV1Endpoints) AutoGetCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoGetCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoGetConfigurationSnapshot(ctx context.Context, t cluster.ConfigurationSnapshot) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnAutoGetConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) AutoGetDSCProfile(ctx context.Context, t cluster.DSCProfile) (cluster.DSCProfile, error) {
	r, err := e.fnAutoGetDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfile), err
	}
	return cluster.DSCProfile{}, err

}
func (e *eClusterV1Endpoints) AutoGetDistributedServiceCard(ctx context.Context, t cluster.DistributedServiceCard) (cluster.DistributedServiceCard, error) {
	r, err := e.fnAutoGetDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCard), err
	}
	return cluster.DistributedServiceCard{}, err

}
func (e *eClusterV1Endpoints) AutoGetHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoGetHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoGetLicense(ctx context.Context, t cluster.License) (cluster.License, error) {
	r, err := e.fnAutoGetLicense(ctx, t)
	if err == nil {
		return r.(cluster.License), err
	}
	return cluster.License{}, err

}
func (e *eClusterV1Endpoints) AutoGetNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoGetNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoGetSnapshotRestore(ctx context.Context, t cluster.SnapshotRestore) (cluster.SnapshotRestore, error) {
	r, err := e.fnAutoGetSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) AutoGetTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoGetTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoGetVersion(ctx context.Context, t cluster.Version) (cluster.Version, error) {
	r, err := e.fnAutoGetVersion(ctx, t)
	if err == nil {
		return r.(cluster.Version), err
	}
	return cluster.Version{}, err

}
func (e *eClusterV1Endpoints) AutoLabelCluster(ctx context.Context, t api.Label) (cluster.Cluster, error) {
	r, err := e.fnAutoLabelCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoLabelConfigurationSnapshot(ctx context.Context, t api.Label) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnAutoLabelConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) AutoLabelDSCProfile(ctx context.Context, t api.Label) (cluster.DSCProfile, error) {
	r, err := e.fnAutoLabelDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfile), err
	}
	return cluster.DSCProfile{}, err

}
func (e *eClusterV1Endpoints) AutoLabelDistributedServiceCard(ctx context.Context, t api.Label) (cluster.DistributedServiceCard, error) {
	r, err := e.fnAutoLabelDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCard), err
	}
	return cluster.DistributedServiceCard{}, err

}
func (e *eClusterV1Endpoints) AutoLabelHost(ctx context.Context, t api.Label) (cluster.Host, error) {
	r, err := e.fnAutoLabelHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoLabelLicense(ctx context.Context, t api.Label) (cluster.License, error) {
	r, err := e.fnAutoLabelLicense(ctx, t)
	if err == nil {
		return r.(cluster.License), err
	}
	return cluster.License{}, err

}
func (e *eClusterV1Endpoints) AutoLabelNode(ctx context.Context, t api.Label) (cluster.Node, error) {
	r, err := e.fnAutoLabelNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoLabelSnapshotRestore(ctx context.Context, t api.Label) (cluster.SnapshotRestore, error) {
	r, err := e.fnAutoLabelSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) AutoLabelTenant(ctx context.Context, t api.Label) (cluster.Tenant, error) {
	r, err := e.fnAutoLabelTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoLabelVersion(ctx context.Context, t api.Label) (cluster.Version, error) {
	r, err := e.fnAutoLabelVersion(ctx, t)
	if err == nil {
		return r.(cluster.Version), err
	}
	return cluster.Version{}, err

}
func (e *eClusterV1Endpoints) AutoListCluster(ctx context.Context, t api.ListWatchOptions) (cluster.ClusterList, error) {
	r, err := e.fnAutoListCluster(ctx, t)
	if err == nil {
		return r.(cluster.ClusterList), err
	}
	return cluster.ClusterList{}, err

}
func (e *eClusterV1Endpoints) AutoListConfigurationSnapshot(ctx context.Context, t api.ListWatchOptions) (cluster.ConfigurationSnapshotList, error) {
	r, err := e.fnAutoListConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshotList), err
	}
	return cluster.ConfigurationSnapshotList{}, err

}
func (e *eClusterV1Endpoints) AutoListDSCProfile(ctx context.Context, t api.ListWatchOptions) (cluster.DSCProfileList, error) {
	r, err := e.fnAutoListDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfileList), err
	}
	return cluster.DSCProfileList{}, err

}
func (e *eClusterV1Endpoints) AutoListDistributedServiceCard(ctx context.Context, t api.ListWatchOptions) (cluster.DistributedServiceCardList, error) {
	r, err := e.fnAutoListDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCardList), err
	}
	return cluster.DistributedServiceCardList{}, err

}
func (e *eClusterV1Endpoints) AutoListHost(ctx context.Context, t api.ListWatchOptions) (cluster.HostList, error) {
	r, err := e.fnAutoListHost(ctx, t)
	if err == nil {
		return r.(cluster.HostList), err
	}
	return cluster.HostList{}, err

}
func (e *eClusterV1Endpoints) AutoListLicense(ctx context.Context, t api.ListWatchOptions) (cluster.LicenseList, error) {
	r, err := e.fnAutoListLicense(ctx, t)
	if err == nil {
		return r.(cluster.LicenseList), err
	}
	return cluster.LicenseList{}, err

}
func (e *eClusterV1Endpoints) AutoListNode(ctx context.Context, t api.ListWatchOptions) (cluster.NodeList, error) {
	r, err := e.fnAutoListNode(ctx, t)
	if err == nil {
		return r.(cluster.NodeList), err
	}
	return cluster.NodeList{}, err

}
func (e *eClusterV1Endpoints) AutoListSnapshotRestore(ctx context.Context, t api.ListWatchOptions) (cluster.SnapshotRestoreList, error) {
	r, err := e.fnAutoListSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestoreList), err
	}
	return cluster.SnapshotRestoreList{}, err

}
func (e *eClusterV1Endpoints) AutoListTenant(ctx context.Context, t api.ListWatchOptions) (cluster.TenantList, error) {
	r, err := e.fnAutoListTenant(ctx, t)
	if err == nil {
		return r.(cluster.TenantList), err
	}
	return cluster.TenantList{}, err

}
func (e *eClusterV1Endpoints) AutoListVersion(ctx context.Context, t api.ListWatchOptions) (cluster.VersionList, error) {
	r, err := e.fnAutoListVersion(ctx, t)
	if err == nil {
		return r.(cluster.VersionList), err
	}
	return cluster.VersionList{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateCluster(ctx context.Context, t cluster.Cluster) (cluster.Cluster, error) {
	r, err := e.fnAutoUpdateCluster(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateConfigurationSnapshot(ctx context.Context, t cluster.ConfigurationSnapshot) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnAutoUpdateConfigurationSnapshot(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateDSCProfile(ctx context.Context, t cluster.DSCProfile) (cluster.DSCProfile, error) {
	r, err := e.fnAutoUpdateDSCProfile(ctx, t)
	if err == nil {
		return r.(cluster.DSCProfile), err
	}
	return cluster.DSCProfile{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateDistributedServiceCard(ctx context.Context, t cluster.DistributedServiceCard) (cluster.DistributedServiceCard, error) {
	r, err := e.fnAutoUpdateDistributedServiceCard(ctx, t)
	if err == nil {
		return r.(cluster.DistributedServiceCard), err
	}
	return cluster.DistributedServiceCard{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateHost(ctx context.Context, t cluster.Host) (cluster.Host, error) {
	r, err := e.fnAutoUpdateHost(ctx, t)
	if err == nil {
		return r.(cluster.Host), err
	}
	return cluster.Host{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateLicense(ctx context.Context, t cluster.License) (cluster.License, error) {
	r, err := e.fnAutoUpdateLicense(ctx, t)
	if err == nil {
		return r.(cluster.License), err
	}
	return cluster.License{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateNode(ctx context.Context, t cluster.Node) (cluster.Node, error) {
	r, err := e.fnAutoUpdateNode(ctx, t)
	if err == nil {
		return r.(cluster.Node), err
	}
	return cluster.Node{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateSnapshotRestore(ctx context.Context, t cluster.SnapshotRestore) (cluster.SnapshotRestore, error) {
	r, err := e.fnAutoUpdateSnapshotRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateTenant(ctx context.Context, t cluster.Tenant) (cluster.Tenant, error) {
	r, err := e.fnAutoUpdateTenant(ctx, t)
	if err == nil {
		return r.(cluster.Tenant), err
	}
	return cluster.Tenant{}, err

}
func (e *eClusterV1Endpoints) AutoUpdateVersion(ctx context.Context, t cluster.Version) (cluster.Version, error) {
	r, err := e.fnAutoUpdateVersion(ctx, t)
	if err == nil {
		return r.(cluster.Version), err
	}
	return cluster.Version{}, err

}
func (e *eClusterV1Endpoints) Restore(ctx context.Context, t cluster.SnapshotRestore) (cluster.SnapshotRestore, error) {
	r, err := e.fnRestore(ctx, t)
	if err == nil {
		return r.(cluster.SnapshotRestore), err
	}
	return cluster.SnapshotRestore{}, err

}
func (e *eClusterV1Endpoints) Save(ctx context.Context, t cluster.ConfigurationSnapshotRequest) (cluster.ConfigurationSnapshot, error) {
	r, err := e.fnSave(ctx, t)
	if err == nil {
		return r.(cluster.ConfigurationSnapshot), err
	}
	return cluster.ConfigurationSnapshot{}, err

}
func (e *eClusterV1Endpoints) UpdateTLSConfig(ctx context.Context, t cluster.UpdateTLSConfigRequest) (cluster.Cluster, error) {
	r, err := e.fnUpdateTLSConfig(ctx, t)
	if err == nil {
		return r.(cluster.Cluster), err
	}
	return cluster.Cluster{}, err

}

func (e *eClusterV1Endpoints) AutoWatchCluster(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchClusterServer) error {
	return e.fnAutoWatchCluster(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchNode(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchNodeServer) error {
	return e.fnAutoWatchNode(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchHost(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchHostServer) error {
	return e.fnAutoWatchHost(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchDistributedServiceCard(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchDistributedServiceCardServer) error {
	return e.fnAutoWatchDistributedServiceCard(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchTenant(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchTenantServer) error {
	return e.fnAutoWatchTenant(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchVersion(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchVersionServer) error {
	return e.fnAutoWatchVersion(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchConfigurationSnapshot(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchConfigurationSnapshotServer) error {
	return e.fnAutoWatchConfigurationSnapshot(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchSnapshotRestore(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchSnapshotRestoreServer) error {
	return e.fnAutoWatchSnapshotRestore(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchLicense(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchLicenseServer) error {
	return e.fnAutoWatchLicense(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchDSCProfile(in *api.ListWatchOptions, stream cluster.ClusterV1_AutoWatchDSCProfileServer) error {
	return e.fnAutoWatchDSCProfile(in, stream, "cluster")
}
func (e *eClusterV1Endpoints) AutoWatchSvcClusterV1(in *api.AggWatchOptions, stream cluster.ClusterV1_AutoWatchSvcClusterV1Server) error {
	return e.fnAutoWatchSvcClusterV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := sclusterSvc_clusterBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eClusterV1Endpoints{Svc: svc}
		svc.endpointsClusterV1 = &e
	}
	apisrv.Register("cluster.svc_cluster.proto", &svc)
}
