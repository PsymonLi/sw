// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: tenant.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPTenant(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenant(_ context.Context, r *http.Request) (interface{}, error) {
	var req Tenant
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenant encodes GRPC request
func EncodeGrpcReqTenant(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Tenant)
	return req, nil
}

// DecodeGrpcReqTenant decodes GRPC request
func DecodeGrpcReqTenant(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Tenant)
	return req, nil
}

// EncodeGrpcRespTenant encodes GRC response
func EncodeGrpcRespTenant(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenant decodes GRPC response
func DecodeGrpcRespTenant(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantSpec encodes GRPC request
func EncodeGrpcReqTenantSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantSpec)
	return req, nil
}

// DecodeGrpcReqTenantSpec decodes GRPC request
func DecodeGrpcReqTenantSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantSpec)
	return req, nil
}

// EncodeGrpcRespTenantSpec encodes GRC response
func EncodeGrpcRespTenantSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantSpec decodes GRPC response
func DecodeGrpcRespTenantSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantStatus encodes GRPC request
func EncodeGrpcReqTenantStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantStatus)
	return req, nil
}

// DecodeGrpcReqTenantStatus decodes GRPC request
func DecodeGrpcReqTenantStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantStatus)
	return req, nil
}

// EncodeGrpcRespTenantStatus encodes GRC response
func EncodeGrpcRespTenantStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantStatus decodes GRPC response
func DecodeGrpcRespTenantStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
