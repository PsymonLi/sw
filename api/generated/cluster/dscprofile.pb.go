// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dscprofile.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type DSCProfileSpec_Fwd_Mode int32

const (
	// ui-hint: Transparent
	DSCProfileSpec_TRANSPARENT DSCProfileSpec_Fwd_Mode = 0
	// ui-hint: Insertion
	DSCProfileSpec_INSERTION DSCProfileSpec_Fwd_Mode = 1
)

var DSCProfileSpec_Fwd_Mode_name = map[int32]string{
	0: "TRANSPARENT",
	1: "INSERTION",
}
var DSCProfileSpec_Fwd_Mode_value = map[string]int32{
	"TRANSPARENT": 0,
	"INSERTION":   1,
}

func (DSCProfileSpec_Fwd_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDscprofile, []int{1, 0}
}

//
type DSCProfileSpec_FlowPolicy_Mode int32

const (
	// ui-hint: BaseNet
	DSCProfileSpec_BASENET DSCProfileSpec_FlowPolicy_Mode = 0
	// ui-hint: FlowAware
	DSCProfileSpec_FLOWAWARE DSCProfileSpec_FlowPolicy_Mode = 1
	// ui-hint: Enforced
	DSCProfileSpec_ENFORCED DSCProfileSpec_FlowPolicy_Mode = 2
)

var DSCProfileSpec_FlowPolicy_Mode_name = map[int32]string{
	0: "BASENET",
	1: "FLOWAWARE",
	2: "ENFORCED",
}
var DSCProfileSpec_FlowPolicy_Mode_value = map[string]int32{
	"BASENET":   0,
	"FLOWAWARE": 1,
	"ENFORCED":  2,
}

func (DSCProfileSpec_FlowPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDscprofile, []int{1, 1}
}

// Profile
type DSCProfile struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec DSCProfileSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,inline" json:"spec,inline"`
	//
	Status DSCProfileStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *DSCProfile) Reset()                    { *m = DSCProfile{} }
func (m *DSCProfile) String() string            { return proto.CompactTextString(m) }
func (*DSCProfile) ProtoMessage()               {}
func (*DSCProfile) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{0} }

func (m *DSCProfile) GetSpec() DSCProfileSpec {
	if m != nil {
		return m.Spec
	}
	return DSCProfileSpec{}
}

func (m *DSCProfile) GetStatus() DSCProfileStatus {
	if m != nil {
		return m.Status
	}
	return DSCProfileStatus{}
}

// ProfileSpec - Spec applicable to DSC
type DSCProfileSpec struct {
	//
	FwdMode string `protobuf:"bytes,1,opt,name=FwdMode,json=fwd-mode,proto3" json:"fwd-mode"`
	//
	FlowPolicyMode string `protobuf:"bytes,2,opt,name=FlowPolicyMode,json=policy-mode,proto3" json:"policy-mode"`
}

func (m *DSCProfileSpec) Reset()                    { *m = DSCProfileSpec{} }
func (m *DSCProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*DSCProfileSpec) ProtoMessage()               {}
func (*DSCProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{1} }

func (m *DSCProfileSpec) GetFwdMode() string {
	if m != nil {
		return m.FwdMode
	}
	return ""
}

func (m *DSCProfileSpec) GetFlowPolicyMode() string {
	if m != nil {
		return m.FlowPolicyMode
	}
	return ""
}

//
type DSCProfileStatus struct {
}

func (m *DSCProfileStatus) Reset()                    { *m = DSCProfileStatus{} }
func (m *DSCProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*DSCProfileStatus) ProtoMessage()               {}
func (*DSCProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{2} }

func init() {
	proto.RegisterType((*DSCProfile)(nil), "cluster.DSCProfile")
	proto.RegisterType((*DSCProfileSpec)(nil), "cluster.DSCProfileSpec")
	proto.RegisterType((*DSCProfileStatus)(nil), "cluster.DSCProfileStatus")
	proto.RegisterEnum("cluster.DSCProfileSpec_Fwd_Mode", DSCProfileSpec_Fwd_Mode_name, DSCProfileSpec_Fwd_Mode_value)
	proto.RegisterEnum("cluster.DSCProfileSpec_FlowPolicy_Mode", DSCProfileSpec_FlowPolicy_Mode_name, DSCProfileSpec_FlowPolicy_Mode_value)
}
func (m *DSCProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *DSCProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FwdMode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.FwdMode)))
		i += copy(dAtA[i:], m.FwdMode)
	}
	if len(m.FlowPolicyMode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.FlowPolicyMode)))
		i += copy(dAtA[i:], m.FlowPolicyMode)
	}
	return i, nil
}

func (m *DSCProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintDscprofile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DSCProfile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	return n
}

func (m *DSCProfileSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.FwdMode)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	l = len(m.FlowPolicyMode)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	return n
}

func (m *DSCProfileStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDscprofile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDscprofile(x uint64) (n int) {
	return sovDscprofile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DSCProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FwdMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPolicyMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowPolicyMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDscprofile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDscprofile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDscprofile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDscprofile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDscprofile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDscprofile   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dscprofile.proto", fileDescriptorDscprofile) }

var fileDescriptorDscprofile = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe7, 0x32, 0xad, 0x9d, 0x43, 0xdb, 0x60, 0x0e, 0xb4, 0x15, 0x6a, 0xa7, 0x4a, 0x88,
	0x81, 0xb6, 0x44, 0x02, 0xc4, 0x01, 0x24, 0xa4, 0x76, 0x4b, 0xd0, 0x24, 0x96, 0x54, 0x49, 0xd1,
	0x8e, 0x28, 0x4d, 0xdc, 0x60, 0x94, 0xd8, 0x51, 0xed, 0x50, 0xf5, 0x01, 0xd8, 0xc3, 0xec, 0xc2,
	0x23, 0x70, 0xed, 0x71, 0xe2, 0x01, 0x2a, 0xd4, 0x13, 0xda, 0x53, 0xa0, 0x38, 0xed, 0x96, 0x6e,
	0xec, 0xe6, 0xcf, 0xfd, 0xbe, 0xdf, 0xff, 0xeb, 0x3f, 0x86, 0x6a, 0xc0, 0xfd, 0x64, 0xc2, 0xc6,
	0x24, 0xc2, 0x5a, 0x32, 0x61, 0x82, 0xa1, 0xb2, 0x1f, 0xa5, 0x5c, 0xe0, 0x49, 0xeb, 0x69, 0xc8,
	0x58, 0x18, 0x61, 0xdd, 0x4b, 0x88, 0xee, 0x51, 0xca, 0x84, 0x27, 0x08, 0xa3, 0x3c, 0xb7, 0xb5,
	0x8c, 0x90, 0x88, 0xaf, 0xe9, 0x48, 0xf3, 0x59, 0xac, 0x27, 0x98, 0x72, 0x8f, 0x06, 0x4c, 0xe7,
	0x53, 0xfd, 0x3b, 0xa6, 0xc4, 0xc7, 0x7a, 0x2a, 0x48, 0xc4, 0xb3, 0x68, 0x88, 0x69, 0x31, 0xad,
	0x13, 0xea, 0x47, 0x69, 0x80, 0xd7, 0x98, 0xc3, 0x02, 0x26, 0x64, 0x21, 0xd3, 0xe5, 0xf5, 0x28,
	0x1d, 0x4b, 0x25, 0x85, 0x3c, 0xad, 0xec, 0xcf, 0xee, 0x99, 0x9a, 0x75, 0x8c, 0xb1, 0xf0, 0x72,
	0x5b, 0xf7, 0x57, 0x09, 0xc2, 0x63, 0xf7, 0x68, 0x90, 0xff, 0x31, 0xf4, 0x16, 0x82, 0x61, 0x03,
	0xec, 0x81, 0x7d, 0xe5, 0x55, 0x55, 0xf3, 0x12, 0xa2, 0x0d, 0x67, 0x09, 0x3e, 0xc5, 0xc2, 0xeb,
	0x3f, 0x9e, 0x2f, 0x3a, 0x5b, 0x97, 0x8b, 0x0e, 0xb8, 0x5a, 0x74, 0xca, 0x07, 0x84, 0x46, 0x84,
	0x62, 0x67, 0x7d, 0x40, 0x26, 0x04, 0x76, 0xa3, 0x24, 0x73, 0x75, 0x99, 0xb3, 0x47, 0xdf, 0xb0,
	0x2f, 0x64, 0xb2, 0x55, 0x48, 0xd6, 0xb2, 0xd1, 0x07, 0x2c, 0x26, 0x02, 0xc7, 0x89, 0x98, 0x39,
	0xb7, 0x34, 0xfa, 0x08, 0xb7, 0xdd, 0x04, 0xfb, 0x8d, 0x07, 0x12, 0xf5, 0x44, 0x5b, 0x6d, 0x58,
	0xbb, 0xa9, 0x98, 0xfd, 0x9c, 0x97, 0xb9, 0x5a, 0x74, 0x14, 0x9e, 0x60, 0x7f, 0x5d, 0xa6, 0x28,
	0xd0, 0x67, 0xb8, 0xe3, 0x0a, 0x4f, 0xa4, 0xbc, 0xb1, 0x2d, 0x51, 0xcd, 0xff, 0xa1, 0xa4, 0xa1,
	0xdf, 0x58, 0xc1, 0x54, 0x2e, 0x75, 0xa1, 0xdd, 0x9d, 0x9b, 0x77, 0x8f, 0x7e, 0xff, 0x68, 0x56,
	0x91, 0x72, 0xf3, 0x14, 0x78, 0xf7, 0x67, 0x09, 0xd6, 0x36, 0xeb, 0x21, 0x1b, 0x96, 0xcd, 0x69,
	0x70, 0xca, 0x02, 0x2c, 0x77, 0xb9, 0xdb, 0x7f, 0x73, 0x71, 0xde, 0xdc, 0x73, 0xc5, 0xc4, 0xa0,
	0x69, 0xbc, 0xbf, 0x69, 0xd6, 0xcc, 0x69, 0xf0, 0x25, 0xb3, 0xbe, 0x98, 0xe7, 0x2b, 0xaa, 0x8c,
	0xa7, 0xc1, 0x61, 0xcc, 0x02, 0xec, 0x5c, 0x9f, 0x90, 0x0f, 0x6b, 0x66, 0xc4, 0xa6, 0x03, 0x16,
	0x11, 0x7f, 0x26, 0xb9, 0x25, 0xc9, 0xfd, 0x70, 0x71, 0xde, 0x7c, 0x7e, 0x1f, 0xf7, 0x3a, 0xb0,
	0x81, 0x57, 0x12, 0x79, 0x97, 0x4f, 0x28, 0x8a, 0xee, 0x4b, 0x58, 0x59, 0x77, 0x41, 0x75, 0xa8,
	0x0c, 0x9d, 0x9e, 0xe5, 0x0e, 0x7a, 0x8e, 0x61, 0x0d, 0xd5, 0x2d, 0x54, 0x85, 0xbb, 0x27, 0x96,
	0x6b, 0x38, 0xc3, 0x13, 0xdb, 0x52, 0x41, 0xf7, 0x3d, 0xac, 0xdf, 0xe2, 0x23, 0x05, 0x96, 0xfb,
	0x3d, 0xd7, 0xb0, 0x8c, 0x95, 0xdd, 0xfc, 0x64, 0x9f, 0xf5, 0xce, 0x7a, 0x8e, 0xa1, 0x02, 0xf4,
	0x10, 0x56, 0x0c, 0xcb, 0xb4, 0x9d, 0x23, 0xe3, 0x58, 0x2d, 0x75, 0x11, 0x54, 0xef, 0x7c, 0x04,
	0x75, 0xbe, 0x6c, 0x83, 0xcb, 0x65, 0x1b, 0xfc, 0x59, 0xb6, 0xc1, 0xdf, 0x65, 0x7b, 0x6b, 0x00,
	0x46, 0x3b, 0xf2, 0x89, 0xbe, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x11, 0xfa, 0xb8, 0x21, 0x7a,
	0x03, 0x00, 0x00,
}
