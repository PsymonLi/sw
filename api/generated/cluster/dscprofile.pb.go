// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dscprofile.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type DSCProfileSpec_Deployment_Target int32

const (
	// ui-hint: Host
	DSCProfileSpec_HOST DSCProfileSpec_Deployment_Target = 0
	// ui-hint: Virtualized
	DSCProfileSpec_VIRTUALIZED DSCProfileSpec_Deployment_Target = 1
)

var DSCProfileSpec_Deployment_Target_name = map[int32]string{
	0: "HOST",
	1: "VIRTUALIZED",
}
var DSCProfileSpec_Deployment_Target_value = map[string]int32{
	"HOST":        0,
	"VIRTUALIZED": 1,
}

func (DSCProfileSpec_Deployment_Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDscprofile, []int{1, 0}
}

//
type DSCProfileSpec_Feature_Set int32

const (
	// ui-hint: SmartNIC
	DSCProfileSpec_SMARTNIC DSCProfileSpec_Feature_Set = 0
	// ui-hint: FlowAware
	DSCProfileSpec_FLOWAWARE DSCProfileSpec_Feature_Set = 1
	// ui-hint: FlowAware with Firewall
	DSCProfileSpec_FLOWAWARE_FIREWALL DSCProfileSpec_Feature_Set = 2
)

var DSCProfileSpec_Feature_Set_name = map[int32]string{
	0: "SMARTNIC",
	1: "FLOWAWARE",
	2: "FLOWAWARE_FIREWALL",
}
var DSCProfileSpec_Feature_Set_value = map[string]int32{
	"SMARTNIC":           0,
	"FLOWAWARE":          1,
	"FLOWAWARE_FIREWALL": 2,
}

func (DSCProfileSpec_Feature_Set) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDscprofile, []int{1, 1}
}

// Profile
type DSCProfile struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec DSCProfileSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,inline" json:"spec,inline"`
	//
	Status DSCProfileStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *DSCProfile) Reset()                    { *m = DSCProfile{} }
func (m *DSCProfile) String() string            { return proto.CompactTextString(m) }
func (*DSCProfile) ProtoMessage()               {}
func (*DSCProfile) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{0} }

func (m *DSCProfile) GetSpec() DSCProfileSpec {
	if m != nil {
		return m.Spec
	}
	return DSCProfileSpec{}
}

func (m *DSCProfile) GetStatus() DSCProfileStatus {
	if m != nil {
		return m.Status
	}
	return DSCProfileStatus{}
}

// ProfileSpec - Spec applicable to DSC
type DSCProfileSpec struct {
	//
	DeploymentTarget string `protobuf:"bytes,1,opt,name=DeploymentTarget,json=deployment-target,proto3" json:"deployment-target"`
	//
	FeatureSet string `protobuf:"bytes,2,opt,name=FeatureSet,json=feature-set,proto3" json:"feature-set"`
}

func (m *DSCProfileSpec) Reset()                    { *m = DSCProfileSpec{} }
func (m *DSCProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*DSCProfileSpec) ProtoMessage()               {}
func (*DSCProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{1} }

func (m *DSCProfileSpec) GetDeploymentTarget() string {
	if m != nil {
		return m.DeploymentTarget
	}
	return ""
}

func (m *DSCProfileSpec) GetFeatureSet() string {
	if m != nil {
		return m.FeatureSet
	}
	return ""
}

//
type DSCProfileStatus struct {
	// The status of the configuration propagation to naples
	PropagationStatus PropagationStatus `protobuf:"bytes,1,opt,name=PropagationStatus,json=propagation-status" json:"propagation-status"`
}

func (m *DSCProfileStatus) Reset()                    { *m = DSCProfileStatus{} }
func (m *DSCProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*DSCProfileStatus) ProtoMessage()               {}
func (*DSCProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{2} }

func (m *DSCProfileStatus) GetPropagationStatus() PropagationStatus {
	if m != nil {
		return m.PropagationStatus
	}
	return PropagationStatus{}
}

// ------------------------------------- Profile Object ---------------------------
type PropagationStatus struct {
	// The Generation ID this status is for
	GenerationID string `protobuf:"bytes,1,opt,name=GenerationID,json=generation-id,proto3" json:"generation-id"`
	// The number of Naples that this version has already been pushed to
	Updated int32 `protobuf:"varint,2,opt,name=Updated,json=updated,proto3" json:"updated"`
	// Number of Naples pending. If this is 0 it can be assumed that everything is up to date.
	Pending int32 `protobuf:"varint,3,opt,name=Pending,json=pending,proto3" json:"pending"`
	// The Version running on the slowest Naples
	MinVersion string `protobuf:"bytes,4,opt,name=MinVersion,json=min-version,proto3" json:"min-version"`
	// Textual description of propagation status
	Status string `protobuf:"bytes,5,opt,name=Status,json=status,proto3" json:"status"`
	// list of DSCs where propagation did not complete
	PendingNaples []string `protobuf:"bytes,6,rep,name=PendingNaples,json=pending-dscs" json:"pending-dscs"`
}

func (m *PropagationStatus) Reset()                    { *m = PropagationStatus{} }
func (m *PropagationStatus) String() string            { return proto.CompactTextString(m) }
func (*PropagationStatus) ProtoMessage()               {}
func (*PropagationStatus) Descriptor() ([]byte, []int) { return fileDescriptorDscprofile, []int{3} }

func (m *PropagationStatus) GetGenerationID() string {
	if m != nil {
		return m.GenerationID
	}
	return ""
}

func (m *PropagationStatus) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *PropagationStatus) GetPending() int32 {
	if m != nil {
		return m.Pending
	}
	return 0
}

func (m *PropagationStatus) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

func (m *PropagationStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PropagationStatus) GetPendingNaples() []string {
	if m != nil {
		return m.PendingNaples
	}
	return nil
}

func init() {
	proto.RegisterType((*DSCProfile)(nil), "cluster.DSCProfile")
	proto.RegisterType((*DSCProfileSpec)(nil), "cluster.DSCProfileSpec")
	proto.RegisterType((*DSCProfileStatus)(nil), "cluster.DSCProfileStatus")
	proto.RegisterType((*PropagationStatus)(nil), "cluster.PropagationStatus")
	proto.RegisterEnum("cluster.DSCProfileSpec_Deployment_Target", DSCProfileSpec_Deployment_Target_name, DSCProfileSpec_Deployment_Target_value)
	proto.RegisterEnum("cluster.DSCProfileSpec_Feature_Set", DSCProfileSpec_Feature_Set_name, DSCProfileSpec_Feature_Set_value)
}
func (m *DSCProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *DSCProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeploymentTarget) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.DeploymentTarget)))
		i += copy(dAtA[i:], m.DeploymentTarget)
	}
	if len(m.FeatureSet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.FeatureSet)))
		i += copy(dAtA[i:], m.FeatureSet)
	}
	return i, nil
}

func (m *DSCProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSCProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDscprofile(dAtA, i, uint64(m.PropagationStatus.Size()))
	n5, err := m.PropagationStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *PropagationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PropagationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GenerationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.GenerationID)))
		i += copy(dAtA[i:], m.GenerationID)
	}
	if m.Updated != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(m.Updated))
	}
	if m.Pending != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(m.Pending))
	}
	if len(m.MinVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.MinVersion)))
		i += copy(dAtA[i:], m.MinVersion)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDscprofile(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.PendingNaples) > 0 {
		for _, s := range m.PendingNaples {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintDscprofile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DSCProfile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	return n
}

func (m *DSCProfileSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeploymentTarget)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	l = len(m.FeatureSet)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	return n
}

func (m *DSCProfileStatus) Size() (n int) {
	var l int
	_ = l
	l = m.PropagationStatus.Size()
	n += 1 + l + sovDscprofile(uint64(l))
	return n
}

func (m *PropagationStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.GenerationID)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	if m.Updated != 0 {
		n += 1 + sovDscprofile(uint64(m.Updated))
	}
	if m.Pending != 0 {
		n += 1 + sovDscprofile(uint64(m.Pending))
	}
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDscprofile(uint64(l))
	}
	if len(m.PendingNaples) > 0 {
		for _, s := range m.PendingNaples {
			l = len(s)
			n += 1 + l + sovDscprofile(uint64(l))
		}
	}
	return n
}

func sovDscprofile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDscprofile(x uint64) (n int) {
	return sovDscprofile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DSCProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSCProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSCProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSCProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropagationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PropagationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PropagationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PropagationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenerationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			m.Pending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pending |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingNaples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDscprofile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingNaples = append(m.PendingNaples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDscprofile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDscprofile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDscprofile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDscprofile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDscprofile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDscprofile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDscprofile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDscprofile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDscprofile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDscprofile   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dscprofile.proto", fileDescriptorDscprofile) }

var fileDescriptorDscprofile = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xc1, 0x6e, 0xda, 0x4a,
	0x14, 0xc5, 0x24, 0x21, 0x61, 0x08, 0x89, 0x99, 0x27, 0xbd, 0x07, 0xe8, 0x09, 0x47, 0x3c, 0x45,
	0x4a, 0xa4, 0x60, 0x3f, 0xb5, 0x6a, 0x16, 0xd9, 0xe1, 0x00, 0x29, 0x12, 0x09, 0xc8, 0x26, 0x89,
	0xd4, 0x2e, 0x22, 0x63, 0x4f, 0xdc, 0xa9, 0xcc, 0xd8, 0xf2, 0x8c, 0x53, 0xf1, 0x01, 0xcd, 0xa7,
	0x74, 0x91, 0x9f, 0xe8, 0x36, 0xcb, 0xa8, 0x8b, 0x2e, 0xad, 0x8a, 0x55, 0xc5, 0x57, 0x54, 0x8c,
	0x0d, 0x98, 0x90, 0xac, 0x98, 0x73, 0xee, 0x39, 0xf7, 0x5e, 0xcf, 0xbd, 0x03, 0x10, 0x2d, 0x6a,
	0x7a, 0xbe, 0x7b, 0x8b, 0x1d, 0x24, 0x7b, 0xbe, 0xcb, 0x5c, 0xb8, 0x69, 0x3a, 0x01, 0x65, 0xc8,
	0x2f, 0xff, 0x6b, 0xbb, 0xae, 0xed, 0x20, 0xc5, 0xf0, 0xb0, 0x62, 0x10, 0xe2, 0x32, 0x83, 0x61,
	0x97, 0xd0, 0x48, 0x56, 0x6e, 0xda, 0x98, 0x7d, 0x0a, 0x06, 0xb2, 0xe9, 0x0e, 0x15, 0x0f, 0x11,
	0x6a, 0x10, 0xcb, 0x55, 0xe8, 0x17, 0xe5, 0x0e, 0x11, 0x6c, 0x22, 0x25, 0x60, 0xd8, 0xa1, 0x53,
	0xab, 0x8d, 0x48, 0xd2, 0xad, 0x60, 0x62, 0x3a, 0x81, 0x85, 0x66, 0x69, 0x6a, 0x89, 0x34, 0xb6,
	0x6b, 0xbb, 0x0a, 0xa7, 0x07, 0xc1, 0x2d, 0x47, 0x1c, 0xf0, 0x53, 0x2c, 0xdf, 0x7f, 0xa5, 0xea,
	0xb4, 0xc7, 0x21, 0x62, 0x46, 0x24, 0xab, 0x7e, 0x4f, 0x03, 0xd0, 0xd0, 0x4f, 0x7b, 0xd1, 0x87,
	0xc1, 0x63, 0x20, 0xf4, 0x8b, 0xc2, 0x9e, 0x70, 0x90, 0x7b, 0x93, 0x97, 0x0d, 0x0f, 0xcb, 0xfd,
	0x91, 0x87, 0xce, 0x11, 0x33, 0xd4, 0xbf, 0x1e, 0x43, 0x29, 0xf5, 0x14, 0x4a, 0xc2, 0x24, 0x94,
	0x36, 0x8f, 0x30, 0x71, 0x30, 0x41, 0xda, 0xec, 0x00, 0x5b, 0x40, 0xe8, 0x16, 0xd3, 0xdc, 0xb7,
	0xcb, 0x7d, 0xdd, 0xc1, 0x67, 0x64, 0x32, 0xee, 0x2c, 0x27, 0x9c, 0x3b, 0xd3, 0xd2, 0x47, 0xee,
	0x10, 0x33, 0x34, 0xf4, 0xd8, 0x48, 0x7b, 0x86, 0xe1, 0x19, 0x58, 0xd7, 0x3d, 0x64, 0x16, 0xd7,
	0x78, 0xaa, 0x7f, 0xe4, 0xf8, 0x86, 0xe5, 0x45, 0x8b, 0xd3, 0x70, 0xd4, 0xcc, 0x24, 0x94, 0x72,
	0xd4, 0x43, 0xe6, 0xac, 0x99, 0x24, 0x80, 0x97, 0x20, 0xa3, 0x33, 0x83, 0x05, 0xb4, 0xb8, 0xce,
	0x53, 0x95, 0x5e, 0x4a, 0xc5, 0x05, 0x6a, 0x31, 0x4e, 0x26, 0x52, 0x8e, 0x13, 0xdd, 0xad, 0x30,
	0x27, 0x85, 0x1f, 0x5f, 0x4b, 0x79, 0x98, 0x5b, 0xac, 0x02, 0xad, 0xfe, 0x4c, 0x83, 0x9d, 0xe5,
	0xf6, 0x20, 0x05, 0x62, 0x03, 0x79, 0x8e, 0x3b, 0x1a, 0x22, 0xc2, 0xfa, 0x86, 0x6f, 0x23, 0xc6,
	0x2f, 0x35, 0xab, 0xb6, 0x1e, 0xee, 0x4b, 0x87, 0x3a, 0xf3, 0x9b, 0x24, 0x18, 0x1e, 0x2c, 0xbb,
	0xe4, 0x85, 0xe5, 0x26, 0xf2, 0x1c, 0x3e, 0x46, 0x97, 0x56, 0xb0, 0xe6, 0x91, 0x1a, 0xe3, 0x11,
	0x6d, 0x95, 0x82, 0x1f, 0x01, 0x68, 0x21, 0x83, 0x05, 0x3e, 0xd2, 0x11, 0xe3, 0xb3, 0xc8, 0xaa,
	0x27, 0x0f, 0xf7, 0xa5, 0xff, 0x5e, 0x29, 0x17, 0x8b, 0x6f, 0xf4, 0x45, 0xa1, 0xdc, 0x6d, 0xc4,
	0xd5, 0x28, 0x62, 0x5a, 0x12, 0x54, 0x65, 0x50, 0x58, 0x69, 0x0f, 0x6e, 0x81, 0xf5, 0xf7, 0x5d,
	0xbd, 0x2f, 0xa6, 0xe0, 0x2e, 0xc8, 0x5d, 0xb5, 0xb5, 0xfe, 0x65, 0xbd, 0xd3, 0xfe, 0xd0, 0x6c,
	0x88, 0x42, 0x55, 0x05, 0xb9, 0x44, 0x7e, 0xb8, 0x0d, 0xb6, 0xf4, 0xf3, 0xba, 0xd6, 0xbf, 0x68,
	0x9f, 0x8a, 0x29, 0x98, 0x07, 0xd9, 0x56, 0xa7, 0x7b, 0x5d, 0xbf, 0xae, 0x6b, 0x4d, 0x51, 0x80,
	0x7f, 0x03, 0x38, 0x87, 0x37, 0xad, 0xb6, 0xd6, 0xbc, 0xae, 0x77, 0x3a, 0x62, 0xba, 0x3a, 0x02,
	0xe2, 0xf3, 0x59, 0x41, 0x04, 0x0a, 0x3d, 0xdf, 0xf5, 0x0c, 0x9b, 0xbf, 0x91, 0x78, 0xc2, 0xd1,
	0xbe, 0x96, 0xe7, 0x13, 0x5e, 0x51, 0x44, 0x2b, 0x38, 0x09, 0x25, 0xe8, 0x2d, 0x42, 0xb5, 0x68,
	0xb8, 0xda, 0x0b, 0x5c, 0xf5, 0x5b, 0xfa, 0x85, 0x3a, 0xf0, 0x18, 0x6c, 0x9f, 0x21, 0x82, 0x7c,
	0xce, 0xb5, 0x1b, 0xf1, 0x48, 0x0b, 0x93, 0x50, 0xca, 0xdb, 0x73, 0xbe, 0x86, 0x2d, 0x6d, 0x19,
	0xc2, 0x7d, 0xb0, 0x79, 0xe9, 0x59, 0x06, 0x43, 0x16, 0x1f, 0xcb, 0x86, 0x9a, 0x9b, 0xbe, 0xa1,
	0x20, 0xa2, 0xb4, 0xd9, 0x61, 0x2a, 0xeb, 0x21, 0x62, 0x61, 0x62, 0xf3, 0xf5, 0x8f, 0x65, 0x5e,
	0x44, 0x69, 0xb3, 0x03, 0xfc, 0x1f, 0x80, 0x73, 0x4c, 0xae, 0x90, 0x4f, 0xb1, 0x4b, 0xf8, 0x76,
	0x67, 0xd5, 0xdd, 0xe9, 0xf0, 0x86, 0x98, 0xd4, 0xee, 0x22, 0x5a, 0x4b, 0x02, 0x58, 0x9d, 0xbf,
	0x85, 0x0d, 0xae, 0x06, 0x93, 0x50, 0xca, 0xc4, 0x5f, 0x1f, 0xff, 0xc2, 0x77, 0x20, 0x1f, 0x17,
	0xbf, 0x30, 0x3c, 0x07, 0xd1, 0x62, 0x66, 0x6f, 0xed, 0x20, 0xab, 0x8a, 0x93, 0x50, 0xda, 0x8e,
	0x2b, 0xd7, 0x2c, 0x6a, 0x52, 0x6d, 0x09, 0xa9, 0xe2, 0xe3, 0xb8, 0x22, 0x3c, 0x8d, 0x2b, 0xc2,
	0xaf, 0x71, 0x45, 0xf8, 0x3d, 0xae, 0xa4, 0x7a, 0xc2, 0x20, 0xc3, 0xff, 0x59, 0xde, 0xfe, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0xa2, 0x64, 0x0a, 0x31, 0x05, 0x00, 0x00,
}
