// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: snapshot.proto
*/
package cluster

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// SnapshotRestoreStatus_RestoreStatus_normal is a map of normalized values for the enum
var SnapshotRestoreStatus_RestoreStatus_normal = map[string]string{
	"active":    "active",
	"completed": "completed",
	"failed":    "failed",
	"unknown":   "unknown",
}

var SnapshotRestoreStatus_RestoreStatus_vname = map[int32]string{
	0: "unknown",
	1: "active",
	2: "completed",
	3: "failed",
}

var SnapshotRestoreStatus_RestoreStatus_vvalue = map[string]int32{
	"unknown":   0,
	"active":    1,
	"completed": 2,
	"failed":    3,
}

func (x SnapshotRestoreStatus_RestoreStatus) String() string {
	return SnapshotRestoreStatus_RestoreStatus_vname[int32(x)]
}

// SnapshotDestinationType_normal is a map of normalized values for the enum
var SnapshotDestinationType_normal = map[string]string{
	"objectstore": "objectstore",
}

var SnapshotDestinationType_vname = map[int32]string{
	0: "objectstore",
}

var SnapshotDestinationType_vvalue = map[string]int32{
	"objectstore": 0,
}

func (x SnapshotDestinationType) String() string {
	return SnapshotDestinationType_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapSnapshot = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *ConfigurationSnapshot) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "config-snapshot", "/Singleton")
}

func (m *ConfigurationSnapshot) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/config-snapshot")
}

// MakeKey generates a KV store key for the object
func (m *ConfigurationSnapshotRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "config-snapshot", "/Singleton")
}

func (m *ConfigurationSnapshotRequest) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/config-snapshot")
}

// MakeKey generates a KV store key for the object
func (m *SnapshotRestore) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "config-restore", "/Singleton")
}

func (m *SnapshotRestore) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/config-restore")
}

// Clone clones the object into into or creates one of into is nil
func (m *ConfigurationSnapshot) Clone(into interface{}) (interface{}, error) {
	var out *ConfigurationSnapshot
	var ok bool
	if into == nil {
		out = &ConfigurationSnapshot{}
	} else {
		out, ok = into.(*ConfigurationSnapshot)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ConfigurationSnapshot))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ConfigurationSnapshot) Defaults(ver string) bool {
	var ret bool
	m.Kind = "ConfigurationSnapshot"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ConfigurationSnapshotRequest) Clone(into interface{}) (interface{}, error) {
	var out *ConfigurationSnapshotRequest
	var ok bool
	if into == nil {
		out = &ConfigurationSnapshotRequest{}
	} else {
		out, ok = into.(*ConfigurationSnapshotRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ConfigurationSnapshotRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ConfigurationSnapshotRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ConfigurationSnapshotSpec) Clone(into interface{}) (interface{}, error) {
	var out *ConfigurationSnapshotSpec
	var ok bool
	if into == nil {
		out = &ConfigurationSnapshotSpec{}
	} else {
		out, ok = into.(*ConfigurationSnapshotSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ConfigurationSnapshotSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ConfigurationSnapshotSpec) Defaults(ver string) bool {
	var ret bool
	ret = m.Destination.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ConfigurationSnapshotStatus) Clone(into interface{}) (interface{}, error) {
	var out *ConfigurationSnapshotStatus
	var ok bool
	if into == nil {
		out = &ConfigurationSnapshotStatus{}
	} else {
		out, ok = into.(*ConfigurationSnapshotStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ConfigurationSnapshotStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ConfigurationSnapshotStatus) Defaults(ver string) bool {
	var ret bool
	if m.LastSnapshot != nil {
		ret = m.LastSnapshot.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Clone(into interface{}) (interface{}, error) {
	var out *ConfigurationSnapshotStatus_ConfigSaveStatus
	var ok bool
	if into == nil {
		out = &ConfigurationSnapshotStatus_ConfigSaveStatus{}
	} else {
		out, ok = into.(*ConfigurationSnapshotStatus_ConfigSaveStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ConfigurationSnapshotStatus_ConfigSaveStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SnapshotDestination) Clone(into interface{}) (interface{}, error) {
	var out *SnapshotDestination
	var ok bool
	if into == nil {
		out = &SnapshotDestination{}
	} else {
		out, ok = into.(*SnapshotDestination)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SnapshotDestination))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SnapshotDestination) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Type = "objectstore"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SnapshotRestore) Clone(into interface{}) (interface{}, error) {
	var out *SnapshotRestore
	var ok bool
	if into == nil {
		out = &SnapshotRestore{}
	} else {
		out, ok = into.(*SnapshotRestore)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SnapshotRestore))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SnapshotRestore) Defaults(ver string) bool {
	var ret bool
	m.Kind = "SnapshotRestore"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SnapshotRestoreSpec) Clone(into interface{}) (interface{}, error) {
	var out *SnapshotRestoreSpec
	var ok bool
	if into == nil {
		out = &SnapshotRestoreSpec{}
	} else {
		out, ok = into.(*SnapshotRestoreSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SnapshotRestoreSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SnapshotRestoreSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SnapshotRestoreStatus) Clone(into interface{}) (interface{}, error) {
	var out *SnapshotRestoreStatus
	var ok bool
	if into == nil {
		out = &SnapshotRestoreStatus{}
	} else {
		out, ok = into.(*SnapshotRestoreStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SnapshotRestoreStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SnapshotRestoreStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "unknown"
	}
	return ret
}

// Validators and Requirements

func (m *ConfigurationSnapshot) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ConfigurationSnapshot) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for ConfigurationSnapshot"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for ConfigurationSnapshot"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ConfigurationSnapshot) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *ConfigurationSnapshotRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ConfigurationSnapshotRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *ConfigurationSnapshotRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *ConfigurationSnapshotSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ConfigurationSnapshotSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Destination"
		if errs := m.Destination.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ConfigurationSnapshotSpec) Normalize() {

	m.Destination.Normalize()

}

func (m *ConfigurationSnapshotStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ConfigurationSnapshotStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.LastSnapshot != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "LastSnapshot"
			if errs := m.LastSnapshot.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *ConfigurationSnapshotStatus) Normalize() {

	if m.LastSnapshot != nil {
		m.LastSnapshot.Normalize()
	}

}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Normalize() {

}

func (m *SnapshotDestination) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SnapshotDestination) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapSnapshot["SnapshotDestination"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSnapshot["SnapshotDestination"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SnapshotDestination) Normalize() {

	m.Type = SnapshotDestinationType_normal[strings.ToLower(m.Type)]

}

func (m *SnapshotRestore) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SnapshotRestore) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for SnapshotRestore"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for SnapshotRestore"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SnapshotRestore) Normalize() {

	m.ObjectMeta.Normalize()

	m.Status.Normalize()

}

func (m *SnapshotRestoreSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SnapshotRestoreSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *SnapshotRestoreSpec) Normalize() {

}

func (m *SnapshotRestoreStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SnapshotRestoreStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapSnapshot["SnapshotRestoreStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSnapshot["SnapshotRestoreStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SnapshotRestoreStatus) Normalize() {

	m.Status = SnapshotRestoreStatus_RestoreStatus_normal[strings.ToLower(m.Status)]

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&ConfigurationSnapshot{},
		&ConfigurationSnapshotRequest{},
		&SnapshotRestore{},
	)

	validatorMapSnapshot = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapSnapshot["ConfigurationSnapshotStatus_ConfigSaveStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapSnapshot["ConfigurationSnapshotStatus_ConfigSaveStatus"]["all"] = append(validatorMapSnapshot["ConfigurationSnapshotStatus_ConfigSaveStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*ConfigurationSnapshotStatus_ConfigSaveStatus)

		if _, ok := SnapshotDestinationType_vvalue[m.DestType]; !ok {
			vals := []string{}
			for k1, _ := range SnapshotDestinationType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"DestType", vals)
		}
		return nil
	})

	validatorMapSnapshot["SnapshotDestination"] = make(map[string][]func(string, interface{}) error)
	validatorMapSnapshot["SnapshotDestination"]["all"] = append(validatorMapSnapshot["SnapshotDestination"]["all"], func(path string, i interface{}) error {
		m := i.(*SnapshotDestination)

		if _, ok := SnapshotDestinationType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range SnapshotDestinationType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapSnapshot["SnapshotRestoreStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapSnapshot["SnapshotRestoreStatus"]["all"] = append(validatorMapSnapshot["SnapshotRestoreStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*SnapshotRestoreStatus)

		if _, ok := SnapshotRestoreStatus_RestoreStatus_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range SnapshotRestoreStatus_RestoreStatus_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
