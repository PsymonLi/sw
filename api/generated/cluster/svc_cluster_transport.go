// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: svc_cluster.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerClusterV1 struct {
	Endpoints EndpointsClusterV1Server

	AuthBootstrapCompleteHdlr            grpctransport.Handler
	AutoAddClusterHdlr                   grpctransport.Handler
	AutoAddConfigurationSnapshotHdlr     grpctransport.Handler
	AutoAddDistributedServiceCardHdlr    grpctransport.Handler
	AutoAddHostHdlr                      grpctransport.Handler
	AutoAddNodeHdlr                      grpctransport.Handler
	AutoAddSnapshotRestoreHdlr           grpctransport.Handler
	AutoAddTenantHdlr                    grpctransport.Handler
	AutoAddVersionHdlr                   grpctransport.Handler
	AutoDeleteClusterHdlr                grpctransport.Handler
	AutoDeleteConfigurationSnapshotHdlr  grpctransport.Handler
	AutoDeleteDistributedServiceCardHdlr grpctransport.Handler
	AutoDeleteHostHdlr                   grpctransport.Handler
	AutoDeleteNodeHdlr                   grpctransport.Handler
	AutoDeleteSnapshotRestoreHdlr        grpctransport.Handler
	AutoDeleteTenantHdlr                 grpctransport.Handler
	AutoDeleteVersionHdlr                grpctransport.Handler
	AutoGetClusterHdlr                   grpctransport.Handler
	AutoGetConfigurationSnapshotHdlr     grpctransport.Handler
	AutoGetDistributedServiceCardHdlr    grpctransport.Handler
	AutoGetHostHdlr                      grpctransport.Handler
	AutoGetNodeHdlr                      grpctransport.Handler
	AutoGetSnapshotRestoreHdlr           grpctransport.Handler
	AutoGetTenantHdlr                    grpctransport.Handler
	AutoGetVersionHdlr                   grpctransport.Handler
	AutoListClusterHdlr                  grpctransport.Handler
	AutoListConfigurationSnapshotHdlr    grpctransport.Handler
	AutoListDistributedServiceCardHdlr   grpctransport.Handler
	AutoListHostHdlr                     grpctransport.Handler
	AutoListNodeHdlr                     grpctransport.Handler
	AutoListSnapshotRestoreHdlr          grpctransport.Handler
	AutoListTenantHdlr                   grpctransport.Handler
	AutoListVersionHdlr                  grpctransport.Handler
	AutoUpdateClusterHdlr                grpctransport.Handler
	AutoUpdateConfigurationSnapshotHdlr  grpctransport.Handler
	AutoUpdateDistributedServiceCardHdlr grpctransport.Handler
	AutoUpdateHostHdlr                   grpctransport.Handler
	AutoUpdateNodeHdlr                   grpctransport.Handler
	AutoUpdateSnapshotRestoreHdlr        grpctransport.Handler
	AutoUpdateTenantHdlr                 grpctransport.Handler
	AutoUpdateVersionHdlr                grpctransport.Handler
	RestoreHdlr                          grpctransport.Handler
	SaveHdlr                             grpctransport.Handler
	UpdateTLSConfigHdlr                  grpctransport.Handler
}

// MakeGRPCServerClusterV1 creates a GRPC server for ClusterV1 service
func MakeGRPCServerClusterV1(ctx context.Context, endpoints EndpointsClusterV1Server, logger log.Logger) ClusterV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerClusterV1{
		Endpoints: endpoints,
		AuthBootstrapCompleteHdlr: grpctransport.NewServer(
			endpoints.AuthBootstrapCompleteEndpoint,
			DecodeGrpcReqClusterAuthBootstrapRequest,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AuthBootstrapComplete", logger)))...,
		),

		AutoAddClusterHdlr: grpctransport.NewServer(
			endpoints.AutoAddClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCluster", logger)))...,
		),

		AutoAddConfigurationSnapshotHdlr: grpctransport.NewServer(
			endpoints.AutoAddConfigurationSnapshotEndpoint,
			DecodeGrpcReqConfigurationSnapshot,
			EncodeGrpcRespConfigurationSnapshot,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddConfigurationSnapshot", logger)))...,
		),

		AutoAddDistributedServiceCardHdlr: grpctransport.NewServer(
			endpoints.AutoAddDistributedServiceCardEndpoint,
			DecodeGrpcReqDistributedServiceCard,
			EncodeGrpcRespDistributedServiceCard,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddDistributedServiceCard", logger)))...,
		),

		AutoAddHostHdlr: grpctransport.NewServer(
			endpoints.AutoAddHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddHost", logger)))...,
		),

		AutoAddNodeHdlr: grpctransport.NewServer(
			endpoints.AutoAddNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNode", logger)))...,
		),

		AutoAddSnapshotRestoreHdlr: grpctransport.NewServer(
			endpoints.AutoAddSnapshotRestoreEndpoint,
			DecodeGrpcReqSnapshotRestore,
			EncodeGrpcRespSnapshotRestore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddSnapshotRestore", logger)))...,
		),

		AutoAddTenantHdlr: grpctransport.NewServer(
			endpoints.AutoAddTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddTenant", logger)))...,
		),

		AutoAddVersionHdlr: grpctransport.NewServer(
			endpoints.AutoAddVersionEndpoint,
			DecodeGrpcReqVersion,
			EncodeGrpcRespVersion,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddVersion", logger)))...,
		),

		AutoDeleteClusterHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCluster", logger)))...,
		),

		AutoDeleteConfigurationSnapshotHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteConfigurationSnapshotEndpoint,
			DecodeGrpcReqConfigurationSnapshot,
			EncodeGrpcRespConfigurationSnapshot,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteConfigurationSnapshot", logger)))...,
		),

		AutoDeleteDistributedServiceCardHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteDistributedServiceCardEndpoint,
			DecodeGrpcReqDistributedServiceCard,
			EncodeGrpcRespDistributedServiceCard,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteDistributedServiceCard", logger)))...,
		),

		AutoDeleteHostHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteHost", logger)))...,
		),

		AutoDeleteNodeHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNode", logger)))...,
		),

		AutoDeleteSnapshotRestoreHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteSnapshotRestoreEndpoint,
			DecodeGrpcReqSnapshotRestore,
			EncodeGrpcRespSnapshotRestore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteSnapshotRestore", logger)))...,
		),

		AutoDeleteTenantHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteTenant", logger)))...,
		),

		AutoDeleteVersionHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteVersionEndpoint,
			DecodeGrpcReqVersion,
			EncodeGrpcRespVersion,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteVersion", logger)))...,
		),

		AutoGetClusterHdlr: grpctransport.NewServer(
			endpoints.AutoGetClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCluster", logger)))...,
		),

		AutoGetConfigurationSnapshotHdlr: grpctransport.NewServer(
			endpoints.AutoGetConfigurationSnapshotEndpoint,
			DecodeGrpcReqConfigurationSnapshot,
			EncodeGrpcRespConfigurationSnapshot,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetConfigurationSnapshot", logger)))...,
		),

		AutoGetDistributedServiceCardHdlr: grpctransport.NewServer(
			endpoints.AutoGetDistributedServiceCardEndpoint,
			DecodeGrpcReqDistributedServiceCard,
			EncodeGrpcRespDistributedServiceCard,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetDistributedServiceCard", logger)))...,
		),

		AutoGetHostHdlr: grpctransport.NewServer(
			endpoints.AutoGetHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetHost", logger)))...,
		),

		AutoGetNodeHdlr: grpctransport.NewServer(
			endpoints.AutoGetNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNode", logger)))...,
		),

		AutoGetSnapshotRestoreHdlr: grpctransport.NewServer(
			endpoints.AutoGetSnapshotRestoreEndpoint,
			DecodeGrpcReqSnapshotRestore,
			EncodeGrpcRespSnapshotRestore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetSnapshotRestore", logger)))...,
		),

		AutoGetTenantHdlr: grpctransport.NewServer(
			endpoints.AutoGetTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetTenant", logger)))...,
		),

		AutoGetVersionHdlr: grpctransport.NewServer(
			endpoints.AutoGetVersionEndpoint,
			DecodeGrpcReqVersion,
			EncodeGrpcRespVersion,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetVersion", logger)))...,
		),

		AutoListClusterHdlr: grpctransport.NewServer(
			endpoints.AutoListClusterEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespClusterList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCluster", logger)))...,
		),

		AutoListConfigurationSnapshotHdlr: grpctransport.NewServer(
			endpoints.AutoListConfigurationSnapshotEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespConfigurationSnapshotList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListConfigurationSnapshot", logger)))...,
		),

		AutoListDistributedServiceCardHdlr: grpctransport.NewServer(
			endpoints.AutoListDistributedServiceCardEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespDistributedServiceCardList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListDistributedServiceCard", logger)))...,
		),

		AutoListHostHdlr: grpctransport.NewServer(
			endpoints.AutoListHostEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespHostList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListHost", logger)))...,
		),

		AutoListNodeHdlr: grpctransport.NewServer(
			endpoints.AutoListNodeEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNodeList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNode", logger)))...,
		),

		AutoListSnapshotRestoreHdlr: grpctransport.NewServer(
			endpoints.AutoListSnapshotRestoreEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespSnapshotRestoreList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListSnapshotRestore", logger)))...,
		),

		AutoListTenantHdlr: grpctransport.NewServer(
			endpoints.AutoListTenantEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespTenantList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListTenant", logger)))...,
		),

		AutoListVersionHdlr: grpctransport.NewServer(
			endpoints.AutoListVersionEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespVersionList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListVersion", logger)))...,
		),

		AutoUpdateClusterHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCluster", logger)))...,
		),

		AutoUpdateConfigurationSnapshotHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateConfigurationSnapshotEndpoint,
			DecodeGrpcReqConfigurationSnapshot,
			EncodeGrpcRespConfigurationSnapshot,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateConfigurationSnapshot", logger)))...,
		),

		AutoUpdateDistributedServiceCardHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateDistributedServiceCardEndpoint,
			DecodeGrpcReqDistributedServiceCard,
			EncodeGrpcRespDistributedServiceCard,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateDistributedServiceCard", logger)))...,
		),

		AutoUpdateHostHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateHost", logger)))...,
		),

		AutoUpdateNodeHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNode", logger)))...,
		),

		AutoUpdateSnapshotRestoreHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateSnapshotRestoreEndpoint,
			DecodeGrpcReqSnapshotRestore,
			EncodeGrpcRespSnapshotRestore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateSnapshotRestore", logger)))...,
		),

		AutoUpdateTenantHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateTenant", logger)))...,
		),

		AutoUpdateVersionHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateVersionEndpoint,
			DecodeGrpcReqVersion,
			EncodeGrpcRespVersion,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateVersion", logger)))...,
		),

		RestoreHdlr: grpctransport.NewServer(
			endpoints.RestoreEndpoint,
			DecodeGrpcReqSnapshotRestore,
			EncodeGrpcRespSnapshotRestore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Restore", logger)))...,
		),

		SaveHdlr: grpctransport.NewServer(
			endpoints.SaveEndpoint,
			DecodeGrpcReqConfigurationSnapshotRequest,
			EncodeGrpcRespConfigurationSnapshot,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Save", logger)))...,
		),

		UpdateTLSConfigHdlr: grpctransport.NewServer(
			endpoints.UpdateTLSConfigEndpoint,
			DecodeGrpcReqUpdateTLSConfigRequest,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("UpdateTLSConfig", logger)))...,
		),
	}
}

func (s *grpcServerClusterV1) AuthBootstrapComplete(ctx oldcontext.Context, req *ClusterAuthBootstrapRequest) (*Cluster, error) {
	_, resp, err := s.AuthBootstrapCompleteHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AuthBootstrapComplete).V
	return &r, resp.(respClusterV1AuthBootstrapComplete).Err
}

func decodeHTTPrespClusterV1AuthBootstrapComplete(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoAddClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddCluster).V
	return &r, resp.(respClusterV1AutoAddCluster).Err
}

func decodeHTTPrespClusterV1AutoAddCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddConfigurationSnapshot(ctx oldcontext.Context, req *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	_, resp, err := s.AutoAddConfigurationSnapshotHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddConfigurationSnapshot).V
	return &r, resp.(respClusterV1AutoAddConfigurationSnapshot).Err
}

func decodeHTTPrespClusterV1AutoAddConfigurationSnapshot(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshot
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddDistributedServiceCard(ctx oldcontext.Context, req *DistributedServiceCard) (*DistributedServiceCard, error) {
	_, resp, err := s.AutoAddDistributedServiceCardHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddDistributedServiceCard).V
	return &r, resp.(respClusterV1AutoAddDistributedServiceCard).Err
}

func decodeHTTPrespClusterV1AutoAddDistributedServiceCard(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DistributedServiceCard
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoAddHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddHost).V
	return &r, resp.(respClusterV1AutoAddHost).Err
}

func decodeHTTPrespClusterV1AutoAddHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoAddNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddNode).V
	return &r, resp.(respClusterV1AutoAddNode).Err
}

func decodeHTTPrespClusterV1AutoAddNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddSnapshotRestore(ctx oldcontext.Context, req *SnapshotRestore) (*SnapshotRestore, error) {
	_, resp, err := s.AutoAddSnapshotRestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddSnapshotRestore).V
	return &r, resp.(respClusterV1AutoAddSnapshotRestore).Err
}

func decodeHTTPrespClusterV1AutoAddSnapshotRestore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestore
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoAddTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddTenant).V
	return &r, resp.(respClusterV1AutoAddTenant).Err
}

func decodeHTTPrespClusterV1AutoAddTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddVersion(ctx oldcontext.Context, req *Version) (*Version, error) {
	_, resp, err := s.AutoAddVersionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddVersion).V
	return &r, resp.(respClusterV1AutoAddVersion).Err
}

func decodeHTTPrespClusterV1AutoAddVersion(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Version
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoDeleteClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteCluster).V
	return &r, resp.(respClusterV1AutoDeleteCluster).Err
}

func decodeHTTPrespClusterV1AutoDeleteCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteConfigurationSnapshot(ctx oldcontext.Context, req *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	_, resp, err := s.AutoDeleteConfigurationSnapshotHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteConfigurationSnapshot).V
	return &r, resp.(respClusterV1AutoDeleteConfigurationSnapshot).Err
}

func decodeHTTPrespClusterV1AutoDeleteConfigurationSnapshot(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshot
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteDistributedServiceCard(ctx oldcontext.Context, req *DistributedServiceCard) (*DistributedServiceCard, error) {
	_, resp, err := s.AutoDeleteDistributedServiceCardHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteDistributedServiceCard).V
	return &r, resp.(respClusterV1AutoDeleteDistributedServiceCard).Err
}

func decodeHTTPrespClusterV1AutoDeleteDistributedServiceCard(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DistributedServiceCard
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoDeleteHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteHost).V
	return &r, resp.(respClusterV1AutoDeleteHost).Err
}

func decodeHTTPrespClusterV1AutoDeleteHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoDeleteNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteNode).V
	return &r, resp.(respClusterV1AutoDeleteNode).Err
}

func decodeHTTPrespClusterV1AutoDeleteNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteSnapshotRestore(ctx oldcontext.Context, req *SnapshotRestore) (*SnapshotRestore, error) {
	_, resp, err := s.AutoDeleteSnapshotRestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteSnapshotRestore).V
	return &r, resp.(respClusterV1AutoDeleteSnapshotRestore).Err
}

func decodeHTTPrespClusterV1AutoDeleteSnapshotRestore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestore
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoDeleteTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteTenant).V
	return &r, resp.(respClusterV1AutoDeleteTenant).Err
}

func decodeHTTPrespClusterV1AutoDeleteTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteVersion(ctx oldcontext.Context, req *Version) (*Version, error) {
	_, resp, err := s.AutoDeleteVersionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteVersion).V
	return &r, resp.(respClusterV1AutoDeleteVersion).Err
}

func decodeHTTPrespClusterV1AutoDeleteVersion(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Version
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoGetClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetCluster).V
	return &r, resp.(respClusterV1AutoGetCluster).Err
}

func decodeHTTPrespClusterV1AutoGetCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetConfigurationSnapshot(ctx oldcontext.Context, req *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	_, resp, err := s.AutoGetConfigurationSnapshotHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetConfigurationSnapshot).V
	return &r, resp.(respClusterV1AutoGetConfigurationSnapshot).Err
}

func decodeHTTPrespClusterV1AutoGetConfigurationSnapshot(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshot
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetDistributedServiceCard(ctx oldcontext.Context, req *DistributedServiceCard) (*DistributedServiceCard, error) {
	_, resp, err := s.AutoGetDistributedServiceCardHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetDistributedServiceCard).V
	return &r, resp.(respClusterV1AutoGetDistributedServiceCard).Err
}

func decodeHTTPrespClusterV1AutoGetDistributedServiceCard(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DistributedServiceCard
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoGetHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetHost).V
	return &r, resp.(respClusterV1AutoGetHost).Err
}

func decodeHTTPrespClusterV1AutoGetHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoGetNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetNode).V
	return &r, resp.(respClusterV1AutoGetNode).Err
}

func decodeHTTPrespClusterV1AutoGetNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetSnapshotRestore(ctx oldcontext.Context, req *SnapshotRestore) (*SnapshotRestore, error) {
	_, resp, err := s.AutoGetSnapshotRestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetSnapshotRestore).V
	return &r, resp.(respClusterV1AutoGetSnapshotRestore).Err
}

func decodeHTTPrespClusterV1AutoGetSnapshotRestore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestore
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoGetTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetTenant).V
	return &r, resp.(respClusterV1AutoGetTenant).Err
}

func decodeHTTPrespClusterV1AutoGetTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetVersion(ctx oldcontext.Context, req *Version) (*Version, error) {
	_, resp, err := s.AutoGetVersionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetVersion).V
	return &r, resp.(respClusterV1AutoGetVersion).Err
}

func decodeHTTPrespClusterV1AutoGetVersion(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Version
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListCluster(ctx oldcontext.Context, req *api.ListWatchOptions) (*ClusterList, error) {
	_, resp, err := s.AutoListClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListCluster).V
	return &r, resp.(respClusterV1AutoListCluster).Err
}

func decodeHTTPrespClusterV1AutoListCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ClusterList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListConfigurationSnapshot(ctx oldcontext.Context, req *api.ListWatchOptions) (*ConfigurationSnapshotList, error) {
	_, resp, err := s.AutoListConfigurationSnapshotHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListConfigurationSnapshot).V
	return &r, resp.(respClusterV1AutoListConfigurationSnapshot).Err
}

func decodeHTTPrespClusterV1AutoListConfigurationSnapshot(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshotList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListDistributedServiceCard(ctx oldcontext.Context, req *api.ListWatchOptions) (*DistributedServiceCardList, error) {
	_, resp, err := s.AutoListDistributedServiceCardHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListDistributedServiceCard).V
	return &r, resp.(respClusterV1AutoListDistributedServiceCard).Err
}

func decodeHTTPrespClusterV1AutoListDistributedServiceCard(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DistributedServiceCardList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListHost(ctx oldcontext.Context, req *api.ListWatchOptions) (*HostList, error) {
	_, resp, err := s.AutoListHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListHost).V
	return &r, resp.(respClusterV1AutoListHost).Err
}

func decodeHTTPrespClusterV1AutoListHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp HostList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListNode(ctx oldcontext.Context, req *api.ListWatchOptions) (*NodeList, error) {
	_, resp, err := s.AutoListNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListNode).V
	return &r, resp.(respClusterV1AutoListNode).Err
}

func decodeHTTPrespClusterV1AutoListNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NodeList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListSnapshotRestore(ctx oldcontext.Context, req *api.ListWatchOptions) (*SnapshotRestoreList, error) {
	_, resp, err := s.AutoListSnapshotRestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListSnapshotRestore).V
	return &r, resp.(respClusterV1AutoListSnapshotRestore).Err
}

func decodeHTTPrespClusterV1AutoListSnapshotRestore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestoreList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListTenant(ctx oldcontext.Context, req *api.ListWatchOptions) (*TenantList, error) {
	_, resp, err := s.AutoListTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListTenant).V
	return &r, resp.(respClusterV1AutoListTenant).Err
}

func decodeHTTPrespClusterV1AutoListTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TenantList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListVersion(ctx oldcontext.Context, req *api.ListWatchOptions) (*VersionList, error) {
	_, resp, err := s.AutoListVersionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListVersion).V
	return &r, resp.(respClusterV1AutoListVersion).Err
}

func decodeHTTPrespClusterV1AutoListVersion(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VersionList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoUpdateClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateCluster).V
	return &r, resp.(respClusterV1AutoUpdateCluster).Err
}

func decodeHTTPrespClusterV1AutoUpdateCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateConfigurationSnapshot(ctx oldcontext.Context, req *ConfigurationSnapshot) (*ConfigurationSnapshot, error) {
	_, resp, err := s.AutoUpdateConfigurationSnapshotHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateConfigurationSnapshot).V
	return &r, resp.(respClusterV1AutoUpdateConfigurationSnapshot).Err
}

func decodeHTTPrespClusterV1AutoUpdateConfigurationSnapshot(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshot
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateDistributedServiceCard(ctx oldcontext.Context, req *DistributedServiceCard) (*DistributedServiceCard, error) {
	_, resp, err := s.AutoUpdateDistributedServiceCardHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateDistributedServiceCard).V
	return &r, resp.(respClusterV1AutoUpdateDistributedServiceCard).Err
}

func decodeHTTPrespClusterV1AutoUpdateDistributedServiceCard(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DistributedServiceCard
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoUpdateHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateHost).V
	return &r, resp.(respClusterV1AutoUpdateHost).Err
}

func decodeHTTPrespClusterV1AutoUpdateHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoUpdateNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateNode).V
	return &r, resp.(respClusterV1AutoUpdateNode).Err
}

func decodeHTTPrespClusterV1AutoUpdateNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateSnapshotRestore(ctx oldcontext.Context, req *SnapshotRestore) (*SnapshotRestore, error) {
	_, resp, err := s.AutoUpdateSnapshotRestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateSnapshotRestore).V
	return &r, resp.(respClusterV1AutoUpdateSnapshotRestore).Err
}

func decodeHTTPrespClusterV1AutoUpdateSnapshotRestore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestore
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoUpdateTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateTenant).V
	return &r, resp.(respClusterV1AutoUpdateTenant).Err
}

func decodeHTTPrespClusterV1AutoUpdateTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateVersion(ctx oldcontext.Context, req *Version) (*Version, error) {
	_, resp, err := s.AutoUpdateVersionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateVersion).V
	return &r, resp.(respClusterV1AutoUpdateVersion).Err
}

func decodeHTTPrespClusterV1AutoUpdateVersion(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Version
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) Restore(ctx oldcontext.Context, req *SnapshotRestore) (*SnapshotRestore, error) {
	_, resp, err := s.RestoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1Restore).V
	return &r, resp.(respClusterV1Restore).Err
}

func decodeHTTPrespClusterV1Restore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SnapshotRestore
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) Save(ctx oldcontext.Context, req *ConfigurationSnapshotRequest) (*ConfigurationSnapshot, error) {
	_, resp, err := s.SaveHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1Save).V
	return &r, resp.(respClusterV1Save).Err
}

func decodeHTTPrespClusterV1Save(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ConfigurationSnapshot
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) UpdateTLSConfig(ctx oldcontext.Context, req *UpdateTLSConfigRequest) (*Cluster, error) {
	_, resp, err := s.UpdateTLSConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1UpdateTLSConfig).V
	return &r, resp.(respClusterV1UpdateTLSConfig).Err
}

func decodeHTTPrespClusterV1UpdateTLSConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoWatchSvcClusterV1(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSvcClusterV1Server) error {
	return s.Endpoints.AutoWatchSvcClusterV1(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) error {
	return s.Endpoints.AutoWatchCluster(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) error {
	return s.Endpoints.AutoWatchNode(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) error {
	return s.Endpoints.AutoWatchHost(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchDistributedServiceCard(in *api.ListWatchOptions, stream ClusterV1_AutoWatchDistributedServiceCardServer) error {
	return s.Endpoints.AutoWatchDistributedServiceCard(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) error {
	return s.Endpoints.AutoWatchTenant(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchVersion(in *api.ListWatchOptions, stream ClusterV1_AutoWatchVersionServer) error {
	return s.Endpoints.AutoWatchVersion(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchConfigurationSnapshot(in *api.ListWatchOptions, stream ClusterV1_AutoWatchConfigurationSnapshotServer) error {
	return s.Endpoints.AutoWatchConfigurationSnapshot(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchSnapshotRestore(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSnapshotRestoreServer) error {
	return s.Endpoints.AutoWatchSnapshotRestore(in, stream)
}

func encodeHTTPClusterList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterList encodes GRPC request
func EncodeGrpcReqClusterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterList)
	return req, nil
}

// DecodeGrpcReqClusterList decodes GRPC request
func DecodeGrpcReqClusterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterList)
	return req, nil
}

// EncodeGrpcRespClusterList endodes the GRPC response
func EncodeGrpcRespClusterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterList decodes the GRPC response
func DecodeGrpcRespClusterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPConfigurationSnapshotList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPConfigurationSnapshotList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ConfigurationSnapshotList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqConfigurationSnapshotList encodes GRPC request
func EncodeGrpcReqConfigurationSnapshotList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotList)
	return req, nil
}

// DecodeGrpcReqConfigurationSnapshotList decodes GRPC request
func DecodeGrpcReqConfigurationSnapshotList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ConfigurationSnapshotList)
	return req, nil
}

// EncodeGrpcRespConfigurationSnapshotList endodes the GRPC response
func EncodeGrpcRespConfigurationSnapshotList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespConfigurationSnapshotList decodes the GRPC response
func DecodeGrpcRespConfigurationSnapshotList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDistributedServiceCardList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDistributedServiceCardList(_ context.Context, r *http.Request) (interface{}, error) {
	var req DistributedServiceCardList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDistributedServiceCardList encodes GRPC request
func EncodeGrpcReqDistributedServiceCardList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardList)
	return req, nil
}

// DecodeGrpcReqDistributedServiceCardList decodes GRPC request
func DecodeGrpcReqDistributedServiceCardList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardList)
	return req, nil
}

// EncodeGrpcRespDistributedServiceCardList endodes the GRPC response
func EncodeGrpcRespDistributedServiceCardList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDistributedServiceCardList decodes the GRPC response
func DecodeGrpcRespDistributedServiceCardList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHostList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHostList(_ context.Context, r *http.Request) (interface{}, error) {
	var req HostList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHostList encodes GRPC request
func EncodeGrpcReqHostList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostList)
	return req, nil
}

// DecodeGrpcReqHostList decodes GRPC request
func DecodeGrpcReqHostList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostList)
	return req, nil
}

// EncodeGrpcRespHostList endodes the GRPC response
func EncodeGrpcRespHostList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHostList decodes the GRPC response
func DecodeGrpcRespHostList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeList encodes GRPC request
func EncodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// DecodeGrpcReqNodeList decodes GRPC request
func DecodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// EncodeGrpcRespNodeList endodes the GRPC response
func EncodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeList decodes the GRPC response
func DecodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSnapshotRestoreList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSnapshotRestoreList(_ context.Context, r *http.Request) (interface{}, error) {
	var req SnapshotRestoreList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSnapshotRestoreList encodes GRPC request
func EncodeGrpcReqSnapshotRestoreList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreList)
	return req, nil
}

// DecodeGrpcReqSnapshotRestoreList decodes GRPC request
func DecodeGrpcReqSnapshotRestoreList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SnapshotRestoreList)
	return req, nil
}

// EncodeGrpcRespSnapshotRestoreList endodes the GRPC response
func EncodeGrpcRespSnapshotRestoreList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSnapshotRestoreList decodes the GRPC response
func DecodeGrpcRespSnapshotRestoreList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantList(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantList encodes GRPC request
func EncodeGrpcReqTenantList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantList)
	return req, nil
}

// DecodeGrpcReqTenantList decodes GRPC request
func DecodeGrpcReqTenantList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantList)
	return req, nil
}

// EncodeGrpcRespTenantList endodes the GRPC response
func EncodeGrpcRespTenantList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantList decodes the GRPC response
func DecodeGrpcRespTenantList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVersionList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVersionList(_ context.Context, r *http.Request) (interface{}, error) {
	var req VersionList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVersionList encodes GRPC request
func EncodeGrpcReqVersionList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionList)
	return req, nil
}

// DecodeGrpcReqVersionList decodes GRPC request
func DecodeGrpcReqVersionList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VersionList)
	return req, nil
}

// EncodeGrpcRespVersionList endodes the GRPC response
func EncodeGrpcRespVersionList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVersionList decodes the GRPC response
func DecodeGrpcRespVersionList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
