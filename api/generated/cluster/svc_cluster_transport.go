// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: svc_cluster.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerClusterV1 struct {
	Endpoints EndpointsClusterV1Server

	AutoAddClusterHdlr     grpctransport.Handler
	AutoAddHostHdlr        grpctransport.Handler
	AutoAddNodeHdlr        grpctransport.Handler
	AutoAddSmartNICHdlr    grpctransport.Handler
	AutoAddTenantHdlr      grpctransport.Handler
	AutoDeleteClusterHdlr  grpctransport.Handler
	AutoDeleteHostHdlr     grpctransport.Handler
	AutoDeleteNodeHdlr     grpctransport.Handler
	AutoDeleteSmartNICHdlr grpctransport.Handler
	AutoDeleteTenantHdlr   grpctransport.Handler
	AutoGetClusterHdlr     grpctransport.Handler
	AutoGetHostHdlr        grpctransport.Handler
	AutoGetNodeHdlr        grpctransport.Handler
	AutoGetSmartNICHdlr    grpctransport.Handler
	AutoGetTenantHdlr      grpctransport.Handler
	AutoListClusterHdlr    grpctransport.Handler
	AutoListHostHdlr       grpctransport.Handler
	AutoListNodeHdlr       grpctransport.Handler
	AutoListSmartNICHdlr   grpctransport.Handler
	AutoListTenantHdlr     grpctransport.Handler
	AutoUpdateClusterHdlr  grpctransport.Handler
	AutoUpdateHostHdlr     grpctransport.Handler
	AutoUpdateNodeHdlr     grpctransport.Handler
	AutoUpdateSmartNICHdlr grpctransport.Handler
	AutoUpdateTenantHdlr   grpctransport.Handler
}

// MakeGRPCServerClusterV1 creates a GRPC server for ClusterV1 service
func MakeGRPCServerClusterV1(ctx context.Context, endpoints EndpointsClusterV1Server, logger log.Logger) ClusterV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerClusterV1{
		Endpoints: endpoints,
		AutoAddClusterHdlr: grpctransport.NewServer(
			endpoints.AutoAddClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCluster", logger)))...,
		),

		AutoAddHostHdlr: grpctransport.NewServer(
			endpoints.AutoAddHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddHost", logger)))...,
		),

		AutoAddNodeHdlr: grpctransport.NewServer(
			endpoints.AutoAddNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNode", logger)))...,
		),

		AutoAddSmartNICHdlr: grpctransport.NewServer(
			endpoints.AutoAddSmartNICEndpoint,
			DecodeGrpcReqSmartNIC,
			EncodeGrpcRespSmartNIC,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddSmartNIC", logger)))...,
		),

		AutoAddTenantHdlr: grpctransport.NewServer(
			endpoints.AutoAddTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddTenant", logger)))...,
		),

		AutoDeleteClusterHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCluster", logger)))...,
		),

		AutoDeleteHostHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteHost", logger)))...,
		),

		AutoDeleteNodeHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNode", logger)))...,
		),

		AutoDeleteSmartNICHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteSmartNICEndpoint,
			DecodeGrpcReqSmartNIC,
			EncodeGrpcRespSmartNIC,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteSmartNIC", logger)))...,
		),

		AutoDeleteTenantHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteTenant", logger)))...,
		),

		AutoGetClusterHdlr: grpctransport.NewServer(
			endpoints.AutoGetClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCluster", logger)))...,
		),

		AutoGetHostHdlr: grpctransport.NewServer(
			endpoints.AutoGetHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetHost", logger)))...,
		),

		AutoGetNodeHdlr: grpctransport.NewServer(
			endpoints.AutoGetNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNode", logger)))...,
		),

		AutoGetSmartNICHdlr: grpctransport.NewServer(
			endpoints.AutoGetSmartNICEndpoint,
			DecodeGrpcReqSmartNIC,
			EncodeGrpcRespSmartNIC,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetSmartNIC", logger)))...,
		),

		AutoGetTenantHdlr: grpctransport.NewServer(
			endpoints.AutoGetTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetTenant", logger)))...,
		),

		AutoListClusterHdlr: grpctransport.NewServer(
			endpoints.AutoListClusterEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespClusterList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCluster", logger)))...,
		),

		AutoListHostHdlr: grpctransport.NewServer(
			endpoints.AutoListHostEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespHostList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListHost", logger)))...,
		),

		AutoListNodeHdlr: grpctransport.NewServer(
			endpoints.AutoListNodeEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNodeList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNode", logger)))...,
		),

		AutoListSmartNICHdlr: grpctransport.NewServer(
			endpoints.AutoListSmartNICEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespSmartNICList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListSmartNIC", logger)))...,
		),

		AutoListTenantHdlr: grpctransport.NewServer(
			endpoints.AutoListTenantEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespTenantList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListTenant", logger)))...,
		),

		AutoUpdateClusterHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCluster", logger)))...,
		),

		AutoUpdateHostHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateHostEndpoint,
			DecodeGrpcReqHost,
			EncodeGrpcRespHost,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateHost", logger)))...,
		),

		AutoUpdateNodeHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNode", logger)))...,
		),

		AutoUpdateSmartNICHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateSmartNICEndpoint,
			DecodeGrpcReqSmartNIC,
			EncodeGrpcRespSmartNIC,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateSmartNIC", logger)))...,
		),

		AutoUpdateTenantHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateTenantEndpoint,
			DecodeGrpcReqTenant,
			EncodeGrpcRespTenant,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateTenant", logger)))...,
		),
	}
}

func (s *grpcServerClusterV1) AutoAddCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoAddClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddCluster).V
	return &r, resp.(respClusterV1AutoAddCluster).Err
}

func decodeHTTPrespClusterV1AutoAddCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoAddHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddHost).V
	return &r, resp.(respClusterV1AutoAddHost).Err
}

func decodeHTTPrespClusterV1AutoAddHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoAddNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddNode).V
	return &r, resp.(respClusterV1AutoAddNode).Err
}

func decodeHTTPrespClusterV1AutoAddNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddSmartNIC(ctx oldcontext.Context, req *SmartNIC) (*SmartNIC, error) {
	_, resp, err := s.AutoAddSmartNICHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddSmartNIC).V
	return &r, resp.(respClusterV1AutoAddSmartNIC).Err
}

func decodeHTTPrespClusterV1AutoAddSmartNIC(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SmartNIC
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoAddTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoAddTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoAddTenant).V
	return &r, resp.(respClusterV1AutoAddTenant).Err
}

func decodeHTTPrespClusterV1AutoAddTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoDeleteClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteCluster).V
	return &r, resp.(respClusterV1AutoDeleteCluster).Err
}

func decodeHTTPrespClusterV1AutoDeleteCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoDeleteHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteHost).V
	return &r, resp.(respClusterV1AutoDeleteHost).Err
}

func decodeHTTPrespClusterV1AutoDeleteHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoDeleteNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteNode).V
	return &r, resp.(respClusterV1AutoDeleteNode).Err
}

func decodeHTTPrespClusterV1AutoDeleteNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteSmartNIC(ctx oldcontext.Context, req *SmartNIC) (*SmartNIC, error) {
	_, resp, err := s.AutoDeleteSmartNICHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteSmartNIC).V
	return &r, resp.(respClusterV1AutoDeleteSmartNIC).Err
}

func decodeHTTPrespClusterV1AutoDeleteSmartNIC(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SmartNIC
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoDeleteTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoDeleteTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoDeleteTenant).V
	return &r, resp.(respClusterV1AutoDeleteTenant).Err
}

func decodeHTTPrespClusterV1AutoDeleteTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoGetClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetCluster).V
	return &r, resp.(respClusterV1AutoGetCluster).Err
}

func decodeHTTPrespClusterV1AutoGetCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoGetHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetHost).V
	return &r, resp.(respClusterV1AutoGetHost).Err
}

func decodeHTTPrespClusterV1AutoGetHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoGetNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetNode).V
	return &r, resp.(respClusterV1AutoGetNode).Err
}

func decodeHTTPrespClusterV1AutoGetNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetSmartNIC(ctx oldcontext.Context, req *SmartNIC) (*SmartNIC, error) {
	_, resp, err := s.AutoGetSmartNICHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetSmartNIC).V
	return &r, resp.(respClusterV1AutoGetSmartNIC).Err
}

func decodeHTTPrespClusterV1AutoGetSmartNIC(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SmartNIC
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoGetTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoGetTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoGetTenant).V
	return &r, resp.(respClusterV1AutoGetTenant).Err
}

func decodeHTTPrespClusterV1AutoGetTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListCluster(ctx oldcontext.Context, req *api.ListWatchOptions) (*ClusterList, error) {
	_, resp, err := s.AutoListClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListCluster).V
	return &r, resp.(respClusterV1AutoListCluster).Err
}

func decodeHTTPrespClusterV1AutoListCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ClusterList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListHost(ctx oldcontext.Context, req *api.ListWatchOptions) (*HostList, error) {
	_, resp, err := s.AutoListHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListHost).V
	return &r, resp.(respClusterV1AutoListHost).Err
}

func decodeHTTPrespClusterV1AutoListHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp HostList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListNode(ctx oldcontext.Context, req *api.ListWatchOptions) (*NodeList, error) {
	_, resp, err := s.AutoListNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListNode).V
	return &r, resp.(respClusterV1AutoListNode).Err
}

func decodeHTTPrespClusterV1AutoListNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NodeList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListSmartNIC(ctx oldcontext.Context, req *api.ListWatchOptions) (*SmartNICList, error) {
	_, resp, err := s.AutoListSmartNICHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListSmartNIC).V
	return &r, resp.(respClusterV1AutoListSmartNIC).Err
}

func decodeHTTPrespClusterV1AutoListSmartNIC(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SmartNICList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoListTenant(ctx oldcontext.Context, req *api.ListWatchOptions) (*TenantList, error) {
	_, resp, err := s.AutoListTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoListTenant).V
	return &r, resp.(respClusterV1AutoListTenant).Err
}

func decodeHTTPrespClusterV1AutoListTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TenantList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoUpdateClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateCluster).V
	return &r, resp.(respClusterV1AutoUpdateCluster).Err
}

func decodeHTTPrespClusterV1AutoUpdateCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateHost(ctx oldcontext.Context, req *Host) (*Host, error) {
	_, resp, err := s.AutoUpdateHostHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateHost).V
	return &r, resp.(respClusterV1AutoUpdateHost).Err
}

func decodeHTTPrespClusterV1AutoUpdateHost(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Host
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoUpdateNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateNode).V
	return &r, resp.(respClusterV1AutoUpdateNode).Err
}

func decodeHTTPrespClusterV1AutoUpdateNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateSmartNIC(ctx oldcontext.Context, req *SmartNIC) (*SmartNIC, error) {
	_, resp, err := s.AutoUpdateSmartNICHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateSmartNIC).V
	return &r, resp.(respClusterV1AutoUpdateSmartNIC).Err
}

func decodeHTTPrespClusterV1AutoUpdateSmartNIC(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SmartNIC
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoUpdateTenant(ctx oldcontext.Context, req *Tenant) (*Tenant, error) {
	_, resp, err := s.AutoUpdateTenantHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respClusterV1AutoUpdateTenant).V
	return &r, resp.(respClusterV1AutoUpdateTenant).Err
}

func decodeHTTPrespClusterV1AutoUpdateTenant(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Tenant
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerClusterV1) AutoWatchCluster(in *api.ListWatchOptions, stream ClusterV1_AutoWatchClusterServer) error {
	return s.Endpoints.AutoWatchCluster(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchNode(in *api.ListWatchOptions, stream ClusterV1_AutoWatchNodeServer) error {
	return s.Endpoints.AutoWatchNode(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchHost(in *api.ListWatchOptions, stream ClusterV1_AutoWatchHostServer) error {
	return s.Endpoints.AutoWatchHost(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchSmartNIC(in *api.ListWatchOptions, stream ClusterV1_AutoWatchSmartNICServer) error {
	return s.Endpoints.AutoWatchSmartNIC(in, stream)
}

func (s *grpcServerClusterV1) AutoWatchTenant(in *api.ListWatchOptions, stream ClusterV1_AutoWatchTenantServer) error {
	return s.Endpoints.AutoWatchTenant(in, stream)
}

func encodeHTTPClusterList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterList encodes GRPC request
func EncodeGrpcReqClusterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterList)
	return req, nil
}

// DecodeGrpcReqClusterList decodes GRPC request
func DecodeGrpcReqClusterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterList)
	return req, nil
}

// EncodeGrpcRespClusterList endodes the GRPC response
func EncodeGrpcRespClusterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterList decodes the GRPC response
func DecodeGrpcRespClusterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHostList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHostList(_ context.Context, r *http.Request) (interface{}, error) {
	var req HostList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHostList encodes GRPC request
func EncodeGrpcReqHostList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostList)
	return req, nil
}

// DecodeGrpcReqHostList decodes GRPC request
func DecodeGrpcReqHostList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HostList)
	return req, nil
}

// EncodeGrpcRespHostList endodes the GRPC response
func EncodeGrpcRespHostList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHostList decodes the GRPC response
func DecodeGrpcRespHostList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeList encodes GRPC request
func EncodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// DecodeGrpcReqNodeList decodes GRPC request
func DecodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// EncodeGrpcRespNodeList endodes the GRPC response
func EncodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeList decodes the GRPC response
func DecodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICList(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICList encodes GRPC request
func EncodeGrpcReqSmartNICList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICList)
	return req, nil
}

// DecodeGrpcReqSmartNICList decodes GRPC request
func DecodeGrpcReqSmartNICList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICList)
	return req, nil
}

// EncodeGrpcRespSmartNICList endodes the GRPC response
func EncodeGrpcRespSmartNICList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICList decodes the GRPC response
func DecodeGrpcRespSmartNICList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantList(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantList encodes GRPC request
func EncodeGrpcReqTenantList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantList)
	return req, nil
}

// DecodeGrpcReqTenantList decodes GRPC request
func DecodeGrpcReqTenantList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantList)
	return req, nil
}

// EncodeGrpcRespTenantList endodes the GRPC response
func EncodeGrpcRespTenantList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantList decodes the GRPC response
func DecodeGrpcRespTenantList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
