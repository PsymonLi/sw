// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credentials.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type Credentials struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// CredentialsSpec contains the credential information needed to access a service
	Spec CredentialsSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status CredentialsStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptorCredentials, []int{0} }

func (m *Credentials) GetSpec() CredentialsSpec {
	if m != nil {
		return m.Spec
	}
	return CredentialsSpec{}
}

func (m *Credentials) GetStatus() CredentialsStatus {
	if m != nil {
		return m.Status
	}
	return CredentialsStatus{}
}

//
type CredentialsSpec struct {
	// KeyValuePairs contains all key,value pairs that constitute credentials to access a service
	KeyValuePairs []KeyValue `protobuf:"bytes,2,rep,name=KeyValuePairs,json=key-value-pairs,omitempty" json:"key-value-pairs,omitempty"`
}

func (m *CredentialsSpec) Reset()                    { *m = CredentialsSpec{} }
func (m *CredentialsSpec) String() string            { return proto.CompactTextString(m) }
func (*CredentialsSpec) ProtoMessage()               {}
func (*CredentialsSpec) Descriptor() ([]byte, []int) { return fileDescriptorCredentials, []int{1} }

func (m *CredentialsSpec) GetKeyValuePairs() []KeyValue {
	if m != nil {
		return m.KeyValuePairs
	}
	return nil
}

//
type CredentialsStatus struct {
}

func (m *CredentialsStatus) Reset()                    { *m = CredentialsStatus{} }
func (m *CredentialsStatus) String() string            { return proto.CompactTextString(m) }
func (*CredentialsStatus) ProtoMessage()               {}
func (*CredentialsStatus) Descriptor() ([]byte, []int) { return fileDescriptorCredentials, []int{2} }

//
type KeyValue struct {
	//
	Key string `protobuf:"bytes,1,opt,name=Key,json=key,omitempty,proto3" json:"key,omitempty"`
	//
	Value []byte `protobuf:"bytes,2,opt,name=Value,json=value,omitempty,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorCredentials, []int{3} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Credentials)(nil), "cluster.Credentials")
	proto.RegisterType((*CredentialsSpec)(nil), "cluster.CredentialsSpec")
	proto.RegisterType((*CredentialsStatus)(nil), "cluster.CredentialsStatus")
	proto.RegisterType((*KeyValue)(nil), "cluster.KeyValue")
}
func (m *Credentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCredentials(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintCredentials(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCredentials(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintCredentials(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *CredentialsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyValuePairs) > 0 {
		for _, msg := range m.KeyValuePairs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCredentials(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CredentialsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeVarintCredentials(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Credentials) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovCredentials(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovCredentials(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovCredentials(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovCredentials(uint64(l))
	return n
}

func (m *CredentialsSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.KeyValuePairs) > 0 {
		for _, e := range m.KeyValuePairs {
			l = e.Size()
			n += 1 + l + sovCredentials(uint64(l))
		}
	}
	return n
}

func (m *CredentialsStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	return n
}

func sovCredentials(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCredentials(x uint64) (n int) {
	return sovCredentials(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Credentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValuePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValuePairs = append(m.KeyValuePairs, KeyValue{})
			if err := m.KeyValuePairs[len(m.KeyValuePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredentials(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCredentials
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCredentials
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCredentials(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCredentials = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredentials   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("credentials.proto", fileDescriptorCredentials) }

var fileDescriptorCredentials = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe7, 0x76, 0x6c, 0xc3, 0xa5, 0x74, 0xf1, 0x24, 0x94, 0x56, 0xa8, 0x19, 0x95, 0x90,
	0x8a, 0xb4, 0x26, 0xd2, 0x90, 0x38, 0x70, 0x41, 0x0a, 0x82, 0xcb, 0x04, 0x9b, 0xd6, 0x69, 0x77,
	0xd7, 0x7d, 0x0b, 0x66, 0xa9, 0x6d, 0xc5, 0xce, 0x50, 0xb8, 0xc3, 0x87, 0xe2, 0x13, 0xf4, 0x38,
	0xf1, 0x01, 0x22, 0xd4, 0x13, 0xea, 0xa7, 0x40, 0x31, 0x29, 0x78, 0xdd, 0x76, 0xcb, 0xff, 0xbd,
	0xf7, 0xff, 0xbd, 0xbf, 0x63, 0x63, 0x8f, 0x65, 0x30, 0x05, 0x61, 0x38, 0x4d, 0x75, 0xa8, 0x32,
	0x69, 0x24, 0xd9, 0x66, 0x69, 0xae, 0x0d, 0x64, 0xbd, 0xa7, 0x89, 0x94, 0x49, 0x0a, 0x11, 0x55,
	0x3c, 0xa2, 0x42, 0x48, 0x43, 0x0d, 0x97, 0xa2, 0x1e, 0xeb, 0xbd, 0x4b, 0xb8, 0xf9, 0x94, 0x4f,
	0x42, 0x26, 0x67, 0x91, 0x02, 0xa1, 0xa9, 0x98, 0xca, 0x48, 0x7f, 0x89, 0xae, 0x40, 0x70, 0x06,
	0x51, 0x6e, 0x78, 0xaa, 0x2b, 0x6b, 0x02, 0xc2, 0x75, 0x47, 0x5c, 0xb0, 0x34, 0x9f, 0xc2, 0x0a,
	0x33, 0x72, 0x30, 0x89, 0x4c, 0x64, 0x64, 0xcb, 0x93, 0xfc, 0xc2, 0x2a, 0x2b, 0xec, 0x57, 0x3d,
	0xfe, 0xfc, 0x9e, 0xad, 0x55, 0xc6, 0x19, 0x18, 0xfa, 0x77, 0x6c, 0x30, 0x6f, 0xe0, 0xd6, 0xdb,
	0xff, 0x27, 0x23, 0xaf, 0x30, 0x3a, 0xf3, 0xd1, 0x3e, 0x1a, 0xb6, 0x0e, 0xdb, 0x21, 0x55, 0x3c,
	0x3c, 0x2b, 0x14, 0x7c, 0x00, 0x43, 0xe3, 0xbd, 0x79, 0x19, 0x6c, 0x5c, 0x97, 0x01, 0x5a, 0x96,
	0xc1, 0xf6, 0x01, 0x17, 0x29, 0x17, 0x70, 0xba, 0xfa, 0x20, 0xef, 0x31, 0x3a, 0xf6, 0x1b, 0xd6,
	0xd7, 0xb1, 0xbe, 0xe3, 0xc9, 0x67, 0x60, 0xc6, 0x3a, 0x7b, 0x8e, 0xf3, 0x71, 0xb5, 0xfb, 0x40,
	0xce, 0xb8, 0x81, 0x99, 0x32, 0xc5, 0xe9, 0x9a, 0x26, 0x1f, 0xf1, 0xe6, 0x58, 0x01, 0xf3, 0x9b,
	0x16, 0xe5, 0x87, 0xf5, 0x2f, 0x0e, 0x9d, 0x8c, 0x55, 0x3f, 0x7e, 0x52, 0x31, 0x2b, 0x9e, 0x56,
	0xc0, 0x5c, 0xde, 0x4d, 0x4d, 0xce, 0xf1, 0xd6, 0xd8, 0x50, 0x93, 0x6b, 0x7f, 0xd3, 0x12, 0x7b,
	0x77, 0x12, 0xed, 0x44, 0xec, 0xd7, 0xcc, 0x5d, 0x6d, 0xb5, 0x43, 0xbd, 0x55, 0x79, 0xed, 0xfd,
	0xfc, 0xd6, 0x6d, 0x93, 0x96, 0xf3, 0x28, 0x06, 0x05, 0xee, 0xac, 0xa5, 0x24, 0x17, 0xb8, 0x7d,
	0x04, 0xc5, 0x39, 0x4d, 0x73, 0x38, 0xa1, 0x3c, 0xd3, 0x7e, 0x63, 0xbf, 0x39, 0x6c, 0x1d, 0x7a,
	0xff, 0x42, 0xac, 0xba, 0xf1, 0xb3, 0x7a, 0x77, 0xf7, 0x12, 0x8a, 0xd1, 0x55, 0x55, 0x1a, 0xa9,
	0xca, 0xe1, 0x84, 0xb8, 0xbf, 0x35, 0xd8, 0xc3, 0xde, 0xad, 0xe3, 0x0c, 0xbe, 0xe2, 0x9d, 0x15,
	0x9e, 0x8c, 0x70, 0xf3, 0x08, 0x0a, 0x7b, 0xb1, 0x0f, 0x63, 0x6f, 0x59, 0x06, 0xed, 0x4b, 0x28,
	0x1c, 0xf6, 0x4d, 0x49, 0xde, 0xe0, 0x07, 0xd6, 0x67, 0x6f, 0xf4, 0x51, 0x1c, 0xfc, 0xf8, 0xde,
	0xdd, 0x19, 0x03, 0xcb, 0xc0, 0x0c, 0x5f, 0x2c, 0xcb, 0xa0, 0x63, 0x53, 0x38, 0xf6, 0xf5, 0x42,
	0xbc, 0x3b, 0x5f, 0xf4, 0xd1, 0xf5, 0xa2, 0x8f, 0x7e, 0x2d, 0xfa, 0xe8, 0xf7, 0xa2, 0xbf, 0x71,
	0x82, 0x26, 0x5b, 0xf6, 0xc5, 0xbd, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x94, 0x6d, 0x1f, 0x2d,
	0x4a, 0x03, 0x00, 0x00,
}
