// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: cmd.proto
*/
package cluster

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapCmd = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Cluster) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "cluster/", m.Name)
}

func (m *Cluster) MakeURI(ver, prefix string) string {
	in := m
	return fmt.Sprint("/", ver, "/", prefix, "/cluster/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Node) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "nodes/", m.Name)
}

func (m *Node) MakeURI(ver, prefix string) string {
	in := m
	return fmt.Sprint("/", ver, "/", prefix, "/nodes/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *SmartNIC) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "smartnics/", m.Name)
}

func (m *SmartNIC) MakeURI(ver, prefix string) string {
	in := m
	return fmt.Sprint("/", ver, "/", prefix, "/smartnics/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Cluster) Clone(into interface{}) (interface{}, error) {
	var out *Cluster
	var ok bool
	if into == nil {
		out = &Cluster{}
	} else {
		out, ok = into.(*Cluster)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Cluster) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ClusterSpec) Clone(into interface{}) (interface{}, error) {
	var out *ClusterSpec
	var ok bool
	if into == nil {
		out = &ClusterSpec{}
	} else {
		out, ok = into.(*ClusterSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClusterSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ClusterStatus) Clone(into interface{}) (interface{}, error) {
	var out *ClusterStatus
	var ok bool
	if into == nil {
		out = &ClusterStatus{}
	} else {
		out, ok = into.(*ClusterStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClusterStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Node) Clone(into interface{}) (interface{}, error) {
	var out *Node
	var ok bool
	if into == nil {
		out = &Node{}
	} else {
		out, ok = into.(*Node)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Node) Defaults(ver string) bool {
	var ret bool
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NodeCondition) Clone(into interface{}) (interface{}, error) {
	var out *NodeCondition
	var ok bool
	if into == nil {
		out = &NodeCondition{}
	} else {
		out, ok = into.(*NodeCondition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NodeCondition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = ConditionStatus_name[0]
		m.Type = NodeCondition_ConditionType_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NodeSpec) Clone(into interface{}) (interface{}, error) {
	var out *NodeSpec
	var ok bool
	if into == nil {
		out = &NodeSpec{}
	} else {
		out, ok = into.(*NodeSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NodeSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		for k := range m.Roles {
			m.Roles[k] = NodeSpec_NodeRole_name[0]
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NodeStatus) Clone(into interface{}) (interface{}, error) {
	var out *NodeStatus
	var ok bool
	if into == nil {
		out = &NodeStatus{}
	} else {
		out, ok = into.(*NodeStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NodeStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Conditions {
		if m.Conditions[k] != nil {
			ret = m.Conditions[k].Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Phase = NodeStatus_NodePhase_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PortCondition) Clone(into interface{}) (interface{}, error) {
	var out *PortCondition
	var ok bool
	if into == nil {
		out = &PortCondition{}
	} else {
		out, ok = into.(*PortCondition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PortCondition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = ConditionStatus_name[0]
		m.Type = PortCondition_ConditionType_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PortSpec) Clone(into interface{}) (interface{}, error) {
	var out *PortSpec
	var ok bool
	if into == nil {
		out = &PortSpec{}
	} else {
		out, ok = into.(*PortSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PortSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *PortStatus) Clone(into interface{}) (interface{}, error) {
	var out *PortStatus
	var ok bool
	if into == nil {
		out = &PortStatus{}
	} else {
		out, ok = into.(*PortStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PortStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Conditions {
		if m.Conditions[k] != nil {
			ret = m.Conditions[k].Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNIC) Clone(into interface{}) (interface{}, error) {
	var out *SmartNIC
	var ok bool
	if into == nil {
		out = &SmartNIC{}
	} else {
		out, ok = into.(*SmartNIC)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNIC) Defaults(ver string) bool {
	var ret bool
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICCondition) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICCondition
	var ok bool
	if into == nil {
		out = &SmartNICCondition{}
	} else {
		out, ok = into.(*SmartNICCondition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICCondition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = ConditionStatus_name[0]
		m.Type = SmartNICCondition_ConditionType_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICSpec) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICSpec
	var ok bool
	if into == nil {
		out = &SmartNICSpec{}
	} else {
		out, ok = into.(*SmartNICSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Phase = SmartNICSpec_SmartNICPhase_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICStatus) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICStatus
	var ok bool
	if into == nil {
		out = &SmartNICStatus{}
	} else {
		out, ok = into.(*SmartNICStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Conditions {
		if m.Conditions[k] != nil {
			ret = m.Conditions[k].Defaults(ver) || ret
		}
	}
	for k := range m.Ports {
		if m.Ports[k] != nil {
			ret = m.Ports[k].Defaults(ver) || ret
		}
	}
	return ret
}

// Validators

func (m *Cluster) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ClusterSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ClusterStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Node) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *NodeCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapCmd["NodeCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["NodeCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *NodeSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapCmd["NodeSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["NodeSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *NodeStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := validatorMapCmd["NodeStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["NodeStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *PortCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapCmd["PortCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["PortCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *PortSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *PortStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SmartNIC) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SmartNICCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapCmd["SmartNICCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["SmartNICCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SmartNICSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapCmd["SmartNICSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapCmd["SmartNICSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SmartNICStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	for _, v := range m.Ports {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Cluster{},
		&Node{},
		&SmartNIC{},
	)

	validatorMapCmd = make(map[string]map[string][]func(interface{}) bool)

	validatorMapCmd["NodeCondition"] = make(map[string][]func(interface{}) bool)
	validatorMapCmd["NodeCondition"]["all"] = append(validatorMapCmd["NodeCondition"]["all"], func(i interface{}) bool {
		m := i.(*NodeCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["NodeCondition"]["all"] = append(validatorMapCmd["NodeCondition"]["all"], func(i interface{}) bool {
		m := i.(*NodeCondition)

		if _, ok := NodeCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["NodeSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapCmd["NodeSpec"]["all"] = append(validatorMapCmd["NodeSpec"]["all"], func(i interface{}) bool {
		m := i.(*NodeSpec)

		for _, v := range m.Roles {
			if _, ok := NodeSpec_NodeRole_value[v]; !ok {
				return false
			}
		}
		return true
	})

	validatorMapCmd["NodeStatus"] = make(map[string][]func(interface{}) bool)
	validatorMapCmd["NodeStatus"]["all"] = append(validatorMapCmd["NodeStatus"]["all"], func(i interface{}) bool {
		m := i.(*NodeStatus)

		if _, ok := NodeStatus_NodePhase_value[m.Phase]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["PortCondition"] = make(map[string][]func(interface{}) bool)
	validatorMapCmd["PortCondition"]["all"] = append(validatorMapCmd["PortCondition"]["all"], func(i interface{}) bool {
		m := i.(*PortCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["PortCondition"]["all"] = append(validatorMapCmd["PortCondition"]["all"], func(i interface{}) bool {
		m := i.(*PortCondition)

		if _, ok := PortCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["SmartNICCondition"] = make(map[string][]func(interface{}) bool)
	validatorMapCmd["SmartNICCondition"]["all"] = append(validatorMapCmd["SmartNICCondition"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["SmartNICCondition"]["all"] = append(validatorMapCmd["SmartNICCondition"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICCondition)

		if _, ok := SmartNICCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	validatorMapCmd["SmartNICSpec"] = make(map[string][]func(interface{}) bool)

	validatorMapCmd["SmartNICSpec"]["all"] = append(validatorMapCmd["SmartNICSpec"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICSpec)
		if !validators.HostAddr(m.MgmtIp) {
			return false
		}
		return true
	})

	validatorMapCmd["SmartNICSpec"]["all"] = append(validatorMapCmd["SmartNICSpec"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_SmartNICPhase_value[m.Phase]; !ok {
			return false
		}
		return true
	})

}
