// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: credentials.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPCredentials(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCredentials(_ context.Context, r *http.Request) (interface{}, error) {
	var req Credentials
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCredentials encodes GRPC request
func EncodeGrpcReqCredentials(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Credentials)
	return req, nil
}

// DecodeGrpcReqCredentials decodes GRPC request
func DecodeGrpcReqCredentials(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Credentials)
	return req, nil
}

// EncodeGrpcRespCredentials encodes GRC response
func EncodeGrpcRespCredentials(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCredentials decodes GRPC response
func DecodeGrpcRespCredentials(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCredentialsSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCredentialsSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CredentialsSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCredentialsSpec encodes GRPC request
func EncodeGrpcReqCredentialsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CredentialsSpec)
	return req, nil
}

// DecodeGrpcReqCredentialsSpec decodes GRPC request
func DecodeGrpcReqCredentialsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CredentialsSpec)
	return req, nil
}

// EncodeGrpcRespCredentialsSpec encodes GRC response
func EncodeGrpcRespCredentialsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCredentialsSpec decodes GRPC response
func DecodeGrpcRespCredentialsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCredentialsStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCredentialsStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CredentialsStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCredentialsStatus encodes GRPC request
func EncodeGrpcReqCredentialsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CredentialsStatus)
	return req, nil
}

// DecodeGrpcReqCredentialsStatus decodes GRPC request
func DecodeGrpcReqCredentialsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CredentialsStatus)
	return req, nil
}

// EncodeGrpcRespCredentialsStatus encodes GRC response
func EncodeGrpcRespCredentialsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCredentialsStatus decodes GRPC response
func DecodeGrpcRespCredentialsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPKeyValue(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPKeyValue(_ context.Context, r *http.Request) (interface{}, error) {
	var req KeyValue
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqKeyValue encodes GRPC request
func EncodeGrpcReqKeyValue(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KeyValue)
	return req, nil
}

// DecodeGrpcReqKeyValue decodes GRPC request
func DecodeGrpcReqKeyValue(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KeyValue)
	return req, nil
}

// EncodeGrpcRespKeyValue encodes GRC response
func EncodeGrpcRespKeyValue(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespKeyValue decodes GRPC response
func DecodeGrpcRespKeyValue(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
