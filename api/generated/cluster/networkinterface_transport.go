// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: networkinterface.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPNetworkInterface(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterface(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterface
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterface encodes GRPC request
func EncodeGrpcReqNetworkInterface(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterface)
	return req, nil
}

// DecodeGrpcReqNetworkInterface decodes GRPC request
func DecodeGrpcReqNetworkInterface(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterface)
	return req, nil
}

// EncodeGrpcRespNetworkInterface encodes GRC response
func EncodeGrpcRespNetworkInterface(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterface decodes GRPC response
func DecodeGrpcRespNetworkInterface(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInterfaceHostStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterfaceHostStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterfaceHostStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterfaceHostStatus encodes GRPC request
func EncodeGrpcReqNetworkInterfaceHostStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceHostStatus)
	return req, nil
}

// DecodeGrpcReqNetworkInterfaceHostStatus decodes GRPC request
func DecodeGrpcReqNetworkInterfaceHostStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceHostStatus)
	return req, nil
}

// EncodeGrpcRespNetworkInterfaceHostStatus encodes GRC response
func EncodeGrpcRespNetworkInterfaceHostStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterfaceHostStatus decodes GRPC response
func DecodeGrpcRespNetworkInterfaceHostStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInterfaceSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterfaceSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterfaceSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterfaceSpec encodes GRPC request
func EncodeGrpcReqNetworkInterfaceSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceSpec)
	return req, nil
}

// DecodeGrpcReqNetworkInterfaceSpec decodes GRPC request
func DecodeGrpcReqNetworkInterfaceSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceSpec)
	return req, nil
}

// EncodeGrpcRespNetworkInterfaceSpec encodes GRC response
func EncodeGrpcRespNetworkInterfaceSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterfaceSpec decodes GRPC response
func DecodeGrpcRespNetworkInterfaceSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInterfaceStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterfaceStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterfaceStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterfaceStatus encodes GRPC request
func EncodeGrpcReqNetworkInterfaceStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceStatus)
	return req, nil
}

// DecodeGrpcReqNetworkInterfaceStatus decodes GRPC request
func DecodeGrpcReqNetworkInterfaceStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceStatus)
	return req, nil
}

// EncodeGrpcRespNetworkInterfaceStatus encodes GRC response
func EncodeGrpcRespNetworkInterfaceStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterfaceStatus decodes GRPC response
func DecodeGrpcRespNetworkInterfaceStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInterfaceUplinkStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterfaceUplinkStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterfaceUplinkStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterfaceUplinkStatus encodes GRPC request
func EncodeGrpcReqNetworkInterfaceUplinkStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceUplinkStatus)
	return req, nil
}

// DecodeGrpcReqNetworkInterfaceUplinkStatus decodes GRPC request
func DecodeGrpcReqNetworkInterfaceUplinkStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceUplinkStatus)
	return req, nil
}

// EncodeGrpcRespNetworkInterfaceUplinkStatus encodes GRC response
func EncodeGrpcRespNetworkInterfaceUplinkStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterfaceUplinkStatus decodes GRPC response
func DecodeGrpcRespNetworkInterfaceUplinkStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
