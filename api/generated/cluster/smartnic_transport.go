// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: smartnic.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPBiosInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBiosInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req BiosInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBiosInfo encodes GRPC request
func EncodeGrpcReqBiosInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BiosInfo)
	return req, nil
}

// DecodeGrpcReqBiosInfo decodes GRPC request
func DecodeGrpcReqBiosInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BiosInfo)
	return req, nil
}

// EncodeGrpcRespBiosInfo encodes GRC response
func EncodeGrpcRespBiosInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBiosInfo decodes GRPC response
func DecodeGrpcRespBiosInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIPConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPConfig encodes GRPC request
func EncodeGrpcReqIPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPConfig)
	return req, nil
}

// DecodeGrpcReqIPConfig decodes GRPC request
func DecodeGrpcReqIPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPConfig)
	return req, nil
}

// EncodeGrpcRespIPConfig encodes GRC response
func EncodeGrpcRespIPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPConfig decodes GRPC response
func DecodeGrpcRespIPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMacRange(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMacRange(_ context.Context, r *http.Request) (interface{}, error) {
	var req MacRange
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMacRange encodes GRPC request
func EncodeGrpcReqMacRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MacRange)
	return req, nil
}

// DecodeGrpcReqMacRange decodes GRPC request
func DecodeGrpcReqMacRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MacRange)
	return req, nil
}

// EncodeGrpcRespMacRange encodes GRC response
func EncodeGrpcRespMacRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMacRange decodes GRPC response
func DecodeGrpcRespMacRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPFStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPFStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PFStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPFStatus encodes GRPC request
func EncodeGrpcReqPFStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PFStatus)
	return req, nil
}

// DecodeGrpcReqPFStatus decodes GRPC request
func DecodeGrpcReqPFStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PFStatus)
	return req, nil
}

// EncodeGrpcRespPFStatus encodes GRC response
func EncodeGrpcRespPFStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPFStatus decodes GRPC response
func DecodeGrpcRespPFStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPortCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPortCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req PortCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPortCondition encodes GRPC request
func EncodeGrpcReqPortCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortCondition)
	return req, nil
}

// DecodeGrpcReqPortCondition decodes GRPC request
func DecodeGrpcReqPortCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortCondition)
	return req, nil
}

// EncodeGrpcRespPortCondition encodes GRC response
func EncodeGrpcRespPortCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPortCondition decodes GRPC response
func DecodeGrpcRespPortCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNIC(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNIC(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNIC
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNIC encodes GRPC request
func EncodeGrpcReqSmartNIC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNIC)
	return req, nil
}

// DecodeGrpcReqSmartNIC decodes GRPC request
func DecodeGrpcReqSmartNIC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNIC)
	return req, nil
}

// EncodeGrpcRespSmartNIC encodes GRC response
func EncodeGrpcRespSmartNIC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNIC decodes GRPC response
func DecodeGrpcRespSmartNIC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICCondition encodes GRPC request
func EncodeGrpcReqSmartNICCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICCondition)
	return req, nil
}

// DecodeGrpcReqSmartNICCondition decodes GRPC request
func DecodeGrpcReqSmartNICCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICCondition)
	return req, nil
}

// EncodeGrpcRespSmartNICCondition encodes GRC response
func EncodeGrpcRespSmartNICCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICCondition decodes GRPC response
func DecodeGrpcRespSmartNICCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICInfo encodes GRPC request
func EncodeGrpcReqSmartNICInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICInfo)
	return req, nil
}

// DecodeGrpcReqSmartNICInfo decodes GRPC request
func DecodeGrpcReqSmartNICInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICInfo)
	return req, nil
}

// EncodeGrpcRespSmartNICInfo encodes GRC response
func EncodeGrpcRespSmartNICInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICInfo decodes GRPC response
func DecodeGrpcRespSmartNICInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICSpec encodes GRPC request
func EncodeGrpcReqSmartNICSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICSpec)
	return req, nil
}

// DecodeGrpcReqSmartNICSpec decodes GRPC request
func DecodeGrpcReqSmartNICSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICSpec)
	return req, nil
}

// EncodeGrpcRespSmartNICSpec encodes GRC response
func EncodeGrpcRespSmartNICSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICSpec decodes GRPC response
func DecodeGrpcRespSmartNICSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICStatus encodes GRPC request
func EncodeGrpcReqSmartNICStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICStatus)
	return req, nil
}

// DecodeGrpcReqSmartNICStatus decodes GRPC request
func DecodeGrpcReqSmartNICStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICStatus)
	return req, nil
}

// EncodeGrpcRespSmartNICStatus encodes GRC response
func EncodeGrpcRespSmartNICStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICStatus decodes GRPC response
func DecodeGrpcRespSmartNICStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUplinkStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUplinkStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req UplinkStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUplinkStatus encodes GRPC request
func EncodeGrpcReqUplinkStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UplinkStatus)
	return req, nil
}

// DecodeGrpcReqUplinkStatus decodes GRPC request
func DecodeGrpcReqUplinkStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UplinkStatus)
	return req, nil
}

// EncodeGrpcRespUplinkStatus encodes GRC response
func EncodeGrpcRespUplinkStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUplinkStatus decodes GRPC response
func DecodeGrpcRespUplinkStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
