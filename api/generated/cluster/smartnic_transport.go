// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: smartnic.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPBiosInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBiosInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req BiosInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBiosInfo encodes GRPC request
func EncodeGrpcReqBiosInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BiosInfo)
	return req, nil
}

// DecodeGrpcReqBiosInfo decodes GRPC request
func DecodeGrpcReqBiosInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BiosInfo)
	return req, nil
}

// EncodeGrpcRespBiosInfo encodes GRC response
func EncodeGrpcRespBiosInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBiosInfo decodes GRPC response
func DecodeGrpcRespBiosInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDSCCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCCondition encodes GRPC request
func EncodeGrpcReqDSCCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCCondition)
	return req, nil
}

// DecodeGrpcReqDSCCondition decodes GRPC request
func DecodeGrpcReqDSCCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCCondition)
	return req, nil
}

// EncodeGrpcRespDSCCondition encodes GRC response
func EncodeGrpcRespDSCCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCCondition decodes GRPC response
func DecodeGrpcRespDSCCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDSCControlPlaneStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCControlPlaneStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCControlPlaneStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCControlPlaneStatus encodes GRPC request
func EncodeGrpcReqDSCControlPlaneStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCControlPlaneStatus)
	return req, nil
}

// DecodeGrpcReqDSCControlPlaneStatus decodes GRPC request
func DecodeGrpcReqDSCControlPlaneStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCControlPlaneStatus)
	return req, nil
}

// EncodeGrpcRespDSCControlPlaneStatus encodes GRC response
func EncodeGrpcRespDSCControlPlaneStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCControlPlaneStatus decodes GRPC response
func DecodeGrpcRespDSCControlPlaneStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDSCInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDSCInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req DSCInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDSCInfo encodes GRPC request
func EncodeGrpcReqDSCInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCInfo)
	return req, nil
}

// DecodeGrpcReqDSCInfo decodes GRPC request
func DecodeGrpcReqDSCInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DSCInfo)
	return req, nil
}

// EncodeGrpcRespDSCInfo encodes GRC response
func EncodeGrpcRespDSCInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDSCInfo decodes GRPC response
func DecodeGrpcRespDSCInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDistributedServiceCard(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDistributedServiceCard(_ context.Context, r *http.Request) (interface{}, error) {
	var req DistributedServiceCard
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDistributedServiceCard encodes GRPC request
func EncodeGrpcReqDistributedServiceCard(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCard)
	return req, nil
}

// DecodeGrpcReqDistributedServiceCard decodes GRPC request
func DecodeGrpcReqDistributedServiceCard(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCard)
	return req, nil
}

// EncodeGrpcRespDistributedServiceCard encodes GRC response
func EncodeGrpcRespDistributedServiceCard(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDistributedServiceCard decodes GRPC response
func DecodeGrpcRespDistributedServiceCard(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDistributedServiceCardSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDistributedServiceCardSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req DistributedServiceCardSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDistributedServiceCardSpec encodes GRPC request
func EncodeGrpcReqDistributedServiceCardSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardSpec)
	return req, nil
}

// DecodeGrpcReqDistributedServiceCardSpec decodes GRPC request
func DecodeGrpcReqDistributedServiceCardSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardSpec)
	return req, nil
}

// EncodeGrpcRespDistributedServiceCardSpec encodes GRC response
func EncodeGrpcRespDistributedServiceCardSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDistributedServiceCardSpec decodes GRPC response
func DecodeGrpcRespDistributedServiceCardSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDistributedServiceCardStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDistributedServiceCardStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req DistributedServiceCardStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDistributedServiceCardStatus encodes GRPC request
func EncodeGrpcReqDistributedServiceCardStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardStatus)
	return req, nil
}

// DecodeGrpcReqDistributedServiceCardStatus decodes GRPC request
func DecodeGrpcReqDistributedServiceCardStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DistributedServiceCardStatus)
	return req, nil
}

// EncodeGrpcRespDistributedServiceCardStatus encodes GRC response
func EncodeGrpcRespDistributedServiceCardStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDistributedServiceCardStatus decodes GRPC response
func DecodeGrpcRespDistributedServiceCardStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIPConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPConfig encodes GRPC request
func EncodeGrpcReqIPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPConfig)
	return req, nil
}

// DecodeGrpcReqIPConfig decodes GRPC request
func DecodeGrpcReqIPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPConfig)
	return req, nil
}

// EncodeGrpcRespIPConfig encodes GRC response
func EncodeGrpcRespIPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPConfig decodes GRPC response
func DecodeGrpcRespIPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMacRange(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMacRange(_ context.Context, r *http.Request) (interface{}, error) {
	var req MacRange
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMacRange encodes GRPC request
func EncodeGrpcReqMacRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MacRange)
	return req, nil
}

// DecodeGrpcReqMacRange decodes GRPC request
func DecodeGrpcReqMacRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MacRange)
	return req, nil
}

// EncodeGrpcRespMacRange encodes GRC response
func EncodeGrpcRespMacRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMacRange decodes GRPC response
func DecodeGrpcRespMacRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPeerStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPeerStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PeerStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPeerStatus encodes GRPC request
func EncodeGrpcReqPeerStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PeerStatus)
	return req, nil
}

// DecodeGrpcReqPeerStatus decodes GRPC request
func DecodeGrpcReqPeerStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PeerStatus)
	return req, nil
}

// EncodeGrpcRespPeerStatus encodes GRC response
func EncodeGrpcRespPeerStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPeerStatus decodes GRPC response
func DecodeGrpcRespPeerStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
