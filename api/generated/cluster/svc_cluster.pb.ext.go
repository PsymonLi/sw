// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: svc_cluster.proto
*/
package cluster

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *ClusterList) MakeKey(prefix string) string {
	obj := Cluster{}
	return obj.MakeKey(prefix)
}

func (m *ClusterList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *HostList) MakeKey(prefix string) string {
	obj := Host{}
	return obj.MakeKey(prefix)
}

func (m *HostList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *NodeList) MakeKey(prefix string) string {
	obj := Node{}
	return obj.MakeKey(prefix)
}

func (m *NodeList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *SmartNICList) MakeKey(prefix string) string {
	obj := SmartNIC{}
	return obj.MakeKey(prefix)
}

func (m *SmartNICList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *TenantList) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

func (m *TenantList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgClusterWatchHelper) MakeKey(prefix string) string {
	obj := Cluster{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgHostWatchHelper) MakeKey(prefix string) string {
	obj := Host{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgNodeWatchHelper) MakeKey(prefix string) string {
	obj := Node{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSmartNICWatchHelper) MakeKey(prefix string) string {
	obj := SmartNIC{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgTenantWatchHelper) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgClusterWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgClusterWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgClusterWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgClusterWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgClusterWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgClusterWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgClusterWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgClusterWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgClusterWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgClusterWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgHostWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgHostWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgHostWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgHostWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgHostWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgHostWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgHostWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgHostWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgHostWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgHostWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgNodeWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgNodeWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgNodeWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgNodeWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgNodeWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgNodeWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgNodeWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgNodeWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgNodeWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgNodeWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgSmartNICWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgSmartNICWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgSmartNICWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgSmartNICWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgSmartNICWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgSmartNICWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgSmartNICWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgSmartNICWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgTenantWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgTenantWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgTenantWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgTenantWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgTenantWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgTenantWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgTenantWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgTenantWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgTenantWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgTenantWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ClusterList) Clone(into interface{}) (interface{}, error) {
	var out *ClusterList
	var ok bool
	if into == nil {
		out = &ClusterList{}
	} else {
		out, ok = into.(*ClusterList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClusterList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *HostList) Clone(into interface{}) (interface{}, error) {
	var out *HostList
	var ok bool
	if into == nil {
		out = &HostList{}
	} else {
		out, ok = into.(*HostList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *HostList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NodeList) Clone(into interface{}) (interface{}, error) {
	var out *NodeList
	var ok bool
	if into == nil {
		out = &NodeList{}
	} else {
		out, ok = into.(*NodeList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NodeList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICList) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICList
	var ok bool
	if into == nil {
		out = &SmartNICList{}
	} else {
		out, ok = into.(*SmartNICList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantList) Clone(into interface{}) (interface{}, error) {
	var out *TenantList
	var ok bool
	if into == nil {
		out = &TenantList{}
	} else {
		out, ok = into.(*TenantList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantList) Defaults(ver string) bool {
	return false
}

// Validators

func (m *AutoMsgClusterWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *AutoMsgClusterWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *AutoMsgHostWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *AutoMsgHostWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *AutoMsgNodeWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgNodeWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Object != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Object"
		if errs := m.Object.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgSmartNICWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgSmartNICWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Object != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Object"
		if errs := m.Object.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgTenantWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *AutoMsgTenantWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ClusterList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *HostList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *NodeList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SmartNICList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *TenantList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

}
