// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: tenant.proto
*/
package cluster

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *Tenant) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "tenants/", m.Name)
}

func (m *Tenant) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenants/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Tenant) Clone(into interface{}) (interface{}, error) {
	var out *Tenant
	var ok bool
	if into == nil {
		out = &Tenant{}
	} else {
		out, ok = into.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Tenant) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Tenant"
	ret = m.Tenant != "" && m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantSpec) Clone(into interface{}) (interface{}, error) {
	var out *TenantSpec
	var ok bool
	if into == nil {
		out = &TenantSpec{}
	} else {
		out, ok = into.(*TenantSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantStatus) Clone(into interface{}) (interface{}, error) {
	var out *TenantStatus
	var ok bool
	if into == nil {
		out = &TenantStatus{}
	} else {
		out, ok = into.(*TenantStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantStatus) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *Tenant) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Tenant) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Tenant"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Tenant"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Tenant) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *TenantSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TenantSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *TenantSpec) Normalize() {

}

func (m *TenantStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TenantStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *TenantStatus) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Tenant{},
	)

}
