// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: smartnic.proto
*/
package cluster

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapSmartnic = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *SmartNIC) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "smartnics/", m.Name)
}

func (m *SmartNIC) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/smartnics/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *BiosInfo) Clone(into interface{}) (interface{}, error) {
	var out *BiosInfo
	var ok bool
	if into == nil {
		out = &BiosInfo{}
	} else {
		out, ok = into.(*BiosInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BiosInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *IPConfig) Clone(into interface{}) (interface{}, error) {
	var out *IPConfig
	var ok bool
	if into == nil {
		out = &IPConfig{}
	} else {
		out, ok = into.(*IPConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *IPConfig) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *MacRange) Clone(into interface{}) (interface{}, error) {
	var out *MacRange
	var ok bool
	if into == nil {
		out = &MacRange{}
	} else {
		out, ok = into.(*MacRange)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MacRange) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNIC) Clone(into interface{}) (interface{}, error) {
	var out *SmartNIC
	var ok bool
	if into == nil {
		out = &SmartNIC{}
	} else {
		out, ok = into.(*SmartNIC)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNIC) Defaults(ver string) bool {
	m.Kind = "SmartNIC"
	m.Tenant, m.Namespace = "", ""
	var ret bool
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICCondition) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICCondition
	var ok bool
	if into == nil {
		out = &SmartNICCondition{}
	} else {
		out, ok = into.(*SmartNICCondition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICCondition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "UNKNOWN"
		m.Type = "HEALTHY"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICInfo) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICInfo
	var ok bool
	if into == nil {
		out = &SmartNICInfo{}
	} else {
		out, ok = into.(*SmartNICInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICSpec) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICSpec
	var ok bool
	if into == nil {
		out = &SmartNICSpec{}
	} else {
		out, ok = into.(*SmartNICSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.MgmtMode = "HOST"
		m.NetworkMode = "OOB"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICStatus) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICStatus
	var ok bool
	if into == nil {
		out = &SmartNICStatus{}
	} else {
		out, ok = into.(*SmartNICStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Conditions {
		i := m.Conditions[k]
		ret = i.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.AdmissionPhase = "UNKNOWN"
	}
	return ret
}

// Validators

func (m *BiosInfo) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *IPConfig) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *MacRange) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["MacRange"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["MacRange"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNIC) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for SmartNIC"))
	}

	dlmtr := "."
	if path == "" {
		dlmtr = ""
	}
	npath := path + dlmtr + "Spec"
	if errs := m.Spec.Validate(ver, npath, ignoreStatus); errs != nil {
		ret = append(ret, errs...)
	}
	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SmartNICCondition) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["SmartNICCondition"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICCondition"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNICInfo) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.MemoryInfo != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "MemoryInfo"
		if errs := m.MemoryInfo.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SmartNICSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["SmartNICSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNICStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Conditions {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sConditions[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	for k, v := range m.Interfaces {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sInterfaces[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if m.SystemInfo != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "SystemInfo"
		if errs := m.SystemInfo.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapSmartnic["SmartNICStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&SmartNIC{},
	)

	validatorMapSmartnic = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapSmartnic["MacRange"] = make(map[string][]func(string, interface{}) error)

	validatorMapSmartnic["MacRange"]["all"] = append(validatorMapSmartnic["MacRange"]["all"], func(path string, i interface{}) error {
		m := i.(*MacRange)
		if !validators.MacAddr(m.End) {
			return fmt.Errorf("%v validation failed", path+"."+"End")
		}
		return nil
	})

	validatorMapSmartnic["MacRange"]["all"] = append(validatorMapSmartnic["MacRange"]["all"], func(path string, i interface{}) error {
		m := i.(*MacRange)
		if !validators.MacAddr(m.Start) {
			return fmt.Errorf("%v validation failed", path+"."+"Start")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICCondition"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICCondition"]["all"] = append(validatorMapSmartnic["SmartNICCondition"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return errors.New("SmartNICCondition.Status did not match allowed strings")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICCondition"]["all"] = append(validatorMapSmartnic["SmartNICCondition"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICCondition)

		if _, ok := SmartNICCondition_ConditionType_value[m.Type]; !ok {
			return errors.New("SmartNICCondition.Type did not match allowed strings")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_MgmtModes_value[m.MgmtMode]; !ok {
			return errors.New("SmartNICSpec.MgmtMode did not match allowed strings")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "4095")

		if !validators.IntRange(m.MgmtVlan, args) {
			return fmt.Errorf("%v failed validation", path+"."+"MgmtVlan")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_NetworkModes_value[m.NetworkMode]; !ok {
			return errors.New("SmartNICSpec.NetworkMode did not match allowed strings")
		}
		return nil
	})

	validatorMapSmartnic["SmartNICStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICStatus"]["all"] = append(validatorMapSmartnic["SmartNICStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICStatus)

		if _, ok := SmartNICStatus_Phase_value[m.AdmissionPhase]; !ok {
			return errors.New("SmartNICStatus.AdmissionPhase did not match allowed strings")
		}
		return nil
	})

}
