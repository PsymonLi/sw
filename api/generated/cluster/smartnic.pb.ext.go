// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: smartnic.proto
*/
package cluster

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// SmartNICCondition_ConditionType_normal is a map of normalized values for the enum
var SmartNICCondition_ConditionType_normal = map[string]string{
	"healthy":            "healthy",
	"nic_health_unknown": "nic_health_unknown",
}

var SmartNICCondition_ConditionType_vname = map[int32]string{
	0: "healthy",
	1: "nic_health_unknown",
}

var SmartNICCondition_ConditionType_vvalue = map[string]int32{
	"healthy":            0,
	"nic_health_unknown": 1,
}

func (x SmartNICCondition_ConditionType) String() string {
	return SmartNICCondition_ConditionType_vname[int32(x)]
}

// SmartNICSpec_MgmtModes_normal is a map of normalized values for the enum
var SmartNICSpec_MgmtModes_normal = map[string]string{
	"host":    "host",
	"network": "network",
}

var SmartNICSpec_MgmtModes_vname = map[int32]string{
	0: "host",
	1: "network",
}

var SmartNICSpec_MgmtModes_vvalue = map[string]int32{
	"host":    0,
	"network": 1,
}

func (x SmartNICSpec_MgmtModes) String() string {
	return SmartNICSpec_MgmtModes_vname[int32(x)]
}

// SmartNICSpec_NetworkModes_normal is a map of normalized values for the enum
var SmartNICSpec_NetworkModes_normal = map[string]string{
	"inband": "inband",
	"oob":    "oob",
}

var SmartNICSpec_NetworkModes_vname = map[int32]string{
	0: "oob",
	1: "inband",
}

var SmartNICSpec_NetworkModes_vvalue = map[string]int32{
	"oob":    0,
	"inband": 1,
}

func (x SmartNICSpec_NetworkModes) String() string {
	return SmartNICSpec_NetworkModes_vname[int32(x)]
}

// SmartNICStatus_Phase_normal is a map of normalized values for the enum
var SmartNICStatus_Phase_normal = map[string]string{
	"admitted":       "admitted",
	"decommissioned": "decommissioned",
	"pending":        "pending",
	"registering":    "registering",
	"rejected":       "rejected",
	"unknown":        "unknown",
}

var SmartNICStatus_Phase_vname = map[int32]string{
	0: "unknown",
	1: "registering",
	2: "rejected",
	3: "pending",
	4: "admitted",
	5: "decommissioned",
}

var SmartNICStatus_Phase_vvalue = map[string]int32{
	"unknown":        0,
	"registering":    1,
	"rejected":       2,
	"pending":        3,
	"admitted":       4,
	"decommissioned": 5,
}

func (x SmartNICStatus_Phase) String() string {
	return SmartNICStatus_Phase_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapSmartnic = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *SmartNIC) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "smartnics/", m.Name)
}

func (m *SmartNIC) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/smartnics/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *BiosInfo) Clone(into interface{}) (interface{}, error) {
	var out *BiosInfo
	var ok bool
	if into == nil {
		out = &BiosInfo{}
	} else {
		out, ok = into.(*BiosInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BiosInfo))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BiosInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *IPConfig) Clone(into interface{}) (interface{}, error) {
	var out *IPConfig
	var ok bool
	if into == nil {
		out = &IPConfig{}
	} else {
		out, ok = into.(*IPConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*IPConfig))
	return out, nil
}

// Default sets up the defaults for the object
func (m *IPConfig) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *MacRange) Clone(into interface{}) (interface{}, error) {
	var out *MacRange
	var ok bool
	if into == nil {
		out = &MacRange{}
	} else {
		out, ok = into.(*MacRange)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MacRange))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MacRange) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNIC) Clone(into interface{}) (interface{}, error) {
	var out *SmartNIC
	var ok bool
	if into == nil {
		out = &SmartNIC{}
	} else {
		out, ok = into.(*SmartNIC)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SmartNIC))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNIC) Defaults(ver string) bool {
	var ret bool
	m.Kind = "SmartNIC"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICCondition) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICCondition
	var ok bool
	if into == nil {
		out = &SmartNICCondition{}
	} else {
		out, ok = into.(*SmartNICCondition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SmartNICCondition))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICCondition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "unknown"
		m.Type = "healthy"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICInfo) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICInfo
	var ok bool
	if into == nil {
		out = &SmartNICInfo{}
	} else {
		out, ok = into.(*SmartNICInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SmartNICInfo))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICSpec) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICSpec
	var ok bool
	if into == nil {
		out = &SmartNICSpec{}
	} else {
		out, ok = into.(*SmartNICSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SmartNICSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.MgmtMode = "host"
		m.NetworkMode = "oob"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SmartNICStatus) Clone(into interface{}) (interface{}, error) {
	var out *SmartNICStatus
	var ok bool
	if into == nil {
		out = &SmartNICStatus{}
	} else {
		out, ok = into.(*SmartNICStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SmartNICStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SmartNICStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Conditions {
		i := m.Conditions[k]
		ret = i.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.AdmissionPhase = "unknown"
	}
	return ret
}

// Validators and Requirements

func (m *BiosInfo) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BiosInfo) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *BiosInfo) Normalize() {

}

func (m *IPConfig) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *IPConfig) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *IPConfig) Normalize() {

}

func (m *MacRange) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MacRange) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["MacRange"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["MacRange"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MacRange) Normalize() {

}

func (m *SmartNIC) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SmartNIC) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for SmartNIC"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for SmartNIC"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SmartNIC) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *SmartNICCondition) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SmartNICCondition) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["SmartNICCondition"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICCondition"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNICCondition) Normalize() {

	m.Status = ConditionStatus_normal[strings.ToLower(m.Status)]

	m.Type = SmartNICCondition_ConditionType_normal[strings.ToLower(m.Type)]

}

func (m *SmartNICInfo) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SmartNICInfo) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.MemoryInfo != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "MemoryInfo"
			if errs := m.MemoryInfo.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *SmartNICInfo) Normalize() {

	if m.MemoryInfo != nil {
		m.MemoryInfo.Normalize()
	}

}

func (m *SmartNICSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SmartNICSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapSmartnic["SmartNICSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNICSpec) Normalize() {

	m.MgmtMode = SmartNICSpec_MgmtModes_normal[strings.ToLower(m.MgmtMode)]

	m.NetworkMode = SmartNICSpec_NetworkModes_normal[strings.ToLower(m.NetworkMode)]

}

func (m *SmartNICStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SmartNICStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Conditions {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sConditions[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if m.SystemInfo != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "SystemInfo"
			if errs := m.SystemInfo.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapSmartnic["SmartNICStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSmartnic["SmartNICStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SmartNICStatus) Normalize() {

	m.AdmissionPhase = SmartNICStatus_Phase_normal[strings.ToLower(m.AdmissionPhase)]

	for k, v := range m.Conditions {
		v.Normalize()
		m.Conditions[k] = v

	}

	if m.SystemInfo != nil {
		m.SystemInfo.Normalize()
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&SmartNIC{},
	)

	validatorMapSmartnic = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapSmartnic["MacRange"] = make(map[string][]func(string, interface{}) error)

	validatorMapSmartnic["MacRange"]["all"] = append(validatorMapSmartnic["MacRange"]["all"], func(path string, i interface{}) error {
		m := i.(*MacRange)
		if err := validators.EmptyOr(validators.MacAddr, m.End, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"End", err.Error())
		}
		return nil
	})

	validatorMapSmartnic["MacRange"]["all"] = append(validatorMapSmartnic["MacRange"]["all"], func(path string, i interface{}) error {
		m := i.(*MacRange)
		if err := validators.EmptyOr(validators.MacAddr, m.Start, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Start", err.Error())
		}
		return nil
	})

	validatorMapSmartnic["SmartNICCondition"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICCondition"]["all"] = append(validatorMapSmartnic["SmartNICCondition"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICCondition)

		if _, ok := ConditionStatus_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range ConditionStatus_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

	validatorMapSmartnic["SmartNICCondition"]["all"] = append(validatorMapSmartnic["SmartNICCondition"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICCondition)

		if _, ok := SmartNICCondition_ConditionType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range SmartNICCondition_ConditionType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_MgmtModes_vvalue[m.MgmtMode]; !ok {
			vals := []string{}
			for k1, _ := range SmartNICSpec_MgmtModes_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"MgmtMode", vals)
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "4095")

		if err := validators.IntRange(m.MgmtVlan, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"MgmtVlan", err.Error())
		}
		return nil
	})

	validatorMapSmartnic["SmartNICSpec"]["all"] = append(validatorMapSmartnic["SmartNICSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_NetworkModes_vvalue[m.NetworkMode]; !ok {
			vals := []string{}
			for k1, _ := range SmartNICSpec_NetworkModes_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"NetworkMode", vals)
		}
		return nil
	})

	validatorMapSmartnic["SmartNICStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapSmartnic["SmartNICStatus"]["all"] = append(validatorMapSmartnic["SmartNICStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICStatus)

		if _, ok := SmartNICStatus_Phase_vvalue[m.AdmissionPhase]; !ok {
			vals := []string{}
			for k1, _ := range SmartNICStatus_Phase_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"AdmissionPhase", vals)
		}
		return nil
	})

	validatorMapSmartnic["SmartNICStatus"]["all"] = append(validatorMapSmartnic["SmartNICStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*SmartNICStatus)
		if err := validators.EmptyOr(validators.MacAddr, m.PrimaryMAC, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"PrimaryMAC", err.Error())
		}
		return nil
	})

}
