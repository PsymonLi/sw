// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: networkinterface.proto
*/
package cluster

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapNetworkinterface = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *NetworkInterface) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "smartnics/", m.Name)
}

func (m *NetworkInterface) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/smartnics/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkInterface) Clone(into interface{}) (interface{}, error) {
	var out *NetworkInterface
	var ok bool
	if into == nil {
		out = &NetworkInterface{}
	} else {
		out, ok = into.(*NetworkInterface)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkInterface) Defaults(ver string) bool {
	m.Kind = "NetworkInterface"
	m.Tenant, m.Namespace = "", ""
	var ret bool
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkInterfaceHostStatus) Clone(into interface{}) (interface{}, error) {
	var out *NetworkInterfaceHostStatus
	var ok bool
	if into == nil {
		out = &NetworkInterfaceHostStatus{}
	} else {
		out, ok = into.(*NetworkInterfaceHostStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkInterfaceHostStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkInterfaceSpec) Clone(into interface{}) (interface{}, error) {
	var out *NetworkInterfaceSpec
	var ok bool
	if into == nil {
		out = &NetworkInterfaceSpec{}
	} else {
		out, ok = into.(*NetworkInterfaceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkInterfaceSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkInterfaceStatus) Clone(into interface{}) (interface{}, error) {
	var out *NetworkInterfaceStatus
	var ok bool
	if into == nil {
		out = &NetworkInterfaceStatus{}
	} else {
		out, ok = into.(*NetworkInterfaceStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkInterfaceStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.OperStatus = "UP"
		m.Type = "NONE"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkInterfaceUplinkStatus) Clone(into interface{}) (interface{}, error) {
	var out *NetworkInterfaceUplinkStatus
	var ok bool
	if into == nil {
		out = &NetworkInterfaceUplinkStatus{}
	} else {
		out, ok = into.(*NetworkInterfaceUplinkStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkInterfaceUplinkStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *NetworkInterface) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for NetworkInterface"))
	}
	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *NetworkInterfaceHostStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *NetworkInterfaceSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *NetworkInterfaceStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapNetworkinterface["NetworkInterfaceStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *NetworkInterfaceUplinkStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&NetworkInterface{},
	)

	validatorMapNetworkinterface = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapNetworkinterface["NetworkInterfaceStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"] = append(validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NetworkInterfaceStatus)

		if _, ok := NetworkInterfaceStatus_IFStatus_value[m.OperStatus]; !ok {
			return fmt.Errorf("%v did not match allowed strings", path+"."+"OperStatus")
		}
		return nil
	})

	validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"] = append(validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NetworkInterfaceStatus)
		if !validators.MacAddr(m.PrimaryMac) {
			return fmt.Errorf("%v validation failed", path+"."+"PrimaryMac")
		}
		return nil
	})

	validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"] = append(validatorMapNetworkinterface["NetworkInterfaceStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NetworkInterfaceStatus)

		if _, ok := NetworkInterfaceStatus_IFType_value[m.Type]; !ok {
			return fmt.Errorf("%v did not match allowed strings", path+"."+"Type")
		}
		return nil
	})

}
