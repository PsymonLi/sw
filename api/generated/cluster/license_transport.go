// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: license.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPFeature(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFeature(_ context.Context, r *http.Request) (interface{}, error) {
	var req Feature
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFeature encodes GRPC request
func EncodeGrpcReqFeature(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Feature)
	return req, nil
}

// DecodeGrpcReqFeature decodes GRPC request
func DecodeGrpcReqFeature(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Feature)
	return req, nil
}

// EncodeGrpcRespFeature encodes GRC response
func EncodeGrpcRespFeature(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFeature decodes GRPC response
func DecodeGrpcRespFeature(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFeatureStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFeatureStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FeatureStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFeatureStatus encodes GRPC request
func EncodeGrpcReqFeatureStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FeatureStatus)
	return req, nil
}

// DecodeGrpcReqFeatureStatus decodes GRPC request
func DecodeGrpcReqFeatureStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FeatureStatus)
	return req, nil
}

// EncodeGrpcRespFeatureStatus encodes GRC response
func EncodeGrpcRespFeatureStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFeatureStatus decodes GRPC response
func DecodeGrpcRespFeatureStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLicense(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLicense(_ context.Context, r *http.Request) (interface{}, error) {
	var req License
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLicense encodes GRPC request
func EncodeGrpcReqLicense(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*License)
	return req, nil
}

// DecodeGrpcReqLicense decodes GRPC request
func DecodeGrpcReqLicense(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*License)
	return req, nil
}

// EncodeGrpcRespLicense encodes GRC response
func EncodeGrpcRespLicense(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLicense decodes GRPC response
func DecodeGrpcRespLicense(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLicenseSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLicenseSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req LicenseSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLicenseSpec encodes GRPC request
func EncodeGrpcReqLicenseSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LicenseSpec)
	return req, nil
}

// DecodeGrpcReqLicenseSpec decodes GRPC request
func DecodeGrpcReqLicenseSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LicenseSpec)
	return req, nil
}

// EncodeGrpcRespLicenseSpec encodes GRC response
func EncodeGrpcRespLicenseSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLicenseSpec decodes GRPC response
func DecodeGrpcRespLicenseSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLicenseStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLicenseStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req LicenseStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLicenseStatus encodes GRPC request
func EncodeGrpcReqLicenseStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LicenseStatus)
	return req, nil
}

// DecodeGrpcReqLicenseStatus decodes GRPC request
func DecodeGrpcReqLicenseStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LicenseStatus)
	return req, nil
}

// EncodeGrpcRespLicenseStatus encodes GRC response
func EncodeGrpcRespLicenseStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLicenseStatus decodes GRPC response
func DecodeGrpcRespLicenseStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
