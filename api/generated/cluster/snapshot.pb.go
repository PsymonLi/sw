// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snapshot.proto

package cluster

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Destination Type for saving the configuration snapshot.
type SnapshotDestinationType int32

const (
	//
	SnapshotDestinationType_ObjectStore SnapshotDestinationType = 0
)

var SnapshotDestinationType_name = map[int32]string{
	0: "ObjectStore",
}
var SnapshotDestinationType_value = map[string]int32{
	"ObjectStore": 0,
}

func (SnapshotDestinationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{0}
}

//
type SnapshotRestoreStatus_RestoreStatus int32

const (
	//
	SnapshotRestoreStatus_Unknown SnapshotRestoreStatus_RestoreStatus = 0
	//
	SnapshotRestoreStatus_Active SnapshotRestoreStatus_RestoreStatus = 1
	//
	SnapshotRestoreStatus_Completed SnapshotRestoreStatus_RestoreStatus = 2
	//
	SnapshotRestoreStatus_Failed SnapshotRestoreStatus_RestoreStatus = 3
)

var SnapshotRestoreStatus_RestoreStatus_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Completed",
	3: "Failed",
}
var SnapshotRestoreStatus_RestoreStatus_value = map[string]int32{
	"Unknown":   0,
	"Active":    1,
	"Completed": 2,
	"Failed":    3,
}

func (SnapshotRestoreStatus_RestoreStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{7, 0}
}

//
type ConfigurationSnapshot struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec ConfigurationSnapshotSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status ConfigurationSnapshotStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *ConfigurationSnapshot) Reset()                    { *m = ConfigurationSnapshot{} }
func (m *ConfigurationSnapshot) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationSnapshot) ProtoMessage()               {}
func (*ConfigurationSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{0} }

func (m *ConfigurationSnapshot) GetSpec() ConfigurationSnapshotSpec {
	if m != nil {
		return m.Spec
	}
	return ConfigurationSnapshotSpec{}
}

func (m *ConfigurationSnapshot) GetStatus() ConfigurationSnapshotStatus {
	if m != nil {
		return m.Status
	}
	return ConfigurationSnapshotStatus{}
}

//
type ConfigurationSnapshotRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
}

func (m *ConfigurationSnapshotRequest) Reset()         { *m = ConfigurationSnapshotRequest{} }
func (m *ConfigurationSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigurationSnapshotRequest) ProtoMessage()    {}
func (*ConfigurationSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{1}
}

//
type ConfigurationSnapshotSpec struct {
	//
	Destination SnapshotDestination `protobuf:"bytes,1,opt,name=Destination,json=destination,omitempty" json:"destination,omitempty"`
}

func (m *ConfigurationSnapshotSpec) Reset()         { *m = ConfigurationSnapshotSpec{} }
func (m *ConfigurationSnapshotSpec) String() string { return proto.CompactTextString(m) }
func (*ConfigurationSnapshotSpec) ProtoMessage()    {}
func (*ConfigurationSnapshotSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{2}
}

func (m *ConfigurationSnapshotSpec) GetDestination() SnapshotDestination {
	if m != nil {
		return m.Destination
	}
	return SnapshotDestination{}
}

//
type ConfigurationSnapshotStatus struct {
	//
	LastSnapshot *ConfigurationSnapshotStatus_ConfigSaveStatus `protobuf:"bytes,1,opt,name=LastSnapshot,json=last-snapshot,omitempty" json:"last-snapshot,omitempty"`
}

func (m *ConfigurationSnapshotStatus) Reset()         { *m = ConfigurationSnapshotStatus{} }
func (m *ConfigurationSnapshotStatus) String() string { return proto.CompactTextString(m) }
func (*ConfigurationSnapshotStatus) ProtoMessage()    {}
func (*ConfigurationSnapshotStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{3}
}

func (m *ConfigurationSnapshotStatus) GetLastSnapshot() *ConfigurationSnapshotStatus_ConfigSaveStatus {
	if m != nil {
		return m.LastSnapshot
	}
	return nil
}

type ConfigurationSnapshotStatus_ConfigSaveStatus struct {
	DestType string `protobuf:"bytes,1,opt,name=DestType,proto3" json:"dest-type,"`
	URI      string `protobuf:"bytes,2,opt,name=URI,proto3" json:"uri,omitempty"`
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Reset() {
	*m = ConfigurationSnapshotStatus_ConfigSaveStatus{}
}
func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) String() string {
	return proto.CompactTextString(m)
}
func (*ConfigurationSnapshotStatus_ConfigSaveStatus) ProtoMessage() {}
func (*ConfigurationSnapshotStatus_ConfigSaveStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{3, 0}
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) GetDestType() string {
	if m != nil {
		return m.DestType
	}
	return ""
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

// Destination for saving the configuration snapshot.
type SnapshotDestination struct {
	//
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *SnapshotDestination) Reset()                    { *m = SnapshotDestination{} }
func (m *SnapshotDestination) String() string            { return proto.CompactTextString(m) }
func (*SnapshotDestination) ProtoMessage()               {}
func (*SnapshotDestination) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{4} }

func (m *SnapshotDestination) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

//
type SnapshotRestore struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec SnapshotRestoreSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status SnapshotRestoreStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *SnapshotRestore) Reset()                    { *m = SnapshotRestore{} }
func (m *SnapshotRestore) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRestore) ProtoMessage()               {}
func (*SnapshotRestore) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{5} }

func (m *SnapshotRestore) GetSpec() SnapshotRestoreSpec {
	if m != nil {
		return m.Spec
	}
	return SnapshotRestoreSpec{}
}

func (m *SnapshotRestore) GetStatus() SnapshotRestoreStatus {
	if m != nil {
		return m.Status
	}
	return SnapshotRestoreStatus{}
}

//
type SnapshotRestoreSpec struct {
	//
	SnapshotPath string `protobuf:"bytes,1,opt,name=SnapshotPath,json=path,omitempty,proto3" json:"path,omitempty"`
}

func (m *SnapshotRestoreSpec) Reset()                    { *m = SnapshotRestoreSpec{} }
func (m *SnapshotRestoreSpec) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRestoreSpec) ProtoMessage()               {}
func (*SnapshotRestoreSpec) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{6} }

func (m *SnapshotRestoreSpec) GetSnapshotPath() string {
	if m != nil {
		return m.SnapshotPath
	}
	return ""
}

//
type SnapshotRestoreStatus struct {
	//
	Status string `protobuf:"bytes,2,opt,name=Status,json=status,,proto3" json:"status,"`
	//
	StartTime *api.Timestamp `protobuf:"bytes,3,opt,name=StartTime,json=start-time," json:"start-time,"`
	//
	EndTime *api.Timestamp `protobuf:"bytes,4,opt,name=EndTime,json=end-time," json:"end-time,"`
	//
	BackupSnapshotPath string `protobuf:"bytes,5,opt,name=BackupSnapshotPath,json=backup-snapshot-path,,proto3" json:"backup-snapshot-path,"`
}

func (m *SnapshotRestoreStatus) Reset()                    { *m = SnapshotRestoreStatus{} }
func (m *SnapshotRestoreStatus) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRestoreStatus) ProtoMessage()               {}
func (*SnapshotRestoreStatus) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{7} }

func (m *SnapshotRestoreStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SnapshotRestoreStatus) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *SnapshotRestoreStatus) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *SnapshotRestoreStatus) GetBackupSnapshotPath() string {
	if m != nil {
		return m.BackupSnapshotPath
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigurationSnapshot)(nil), "cluster.ConfigurationSnapshot")
	proto.RegisterType((*ConfigurationSnapshotRequest)(nil), "cluster.ConfigurationSnapshotRequest")
	proto.RegisterType((*ConfigurationSnapshotSpec)(nil), "cluster.ConfigurationSnapshotSpec")
	proto.RegisterType((*ConfigurationSnapshotStatus)(nil), "cluster.ConfigurationSnapshotStatus")
	proto.RegisterType((*ConfigurationSnapshotStatus_ConfigSaveStatus)(nil), "cluster.ConfigurationSnapshotStatus.ConfigSaveStatus")
	proto.RegisterType((*SnapshotDestination)(nil), "cluster.SnapshotDestination")
	proto.RegisterType((*SnapshotRestore)(nil), "cluster.SnapshotRestore")
	proto.RegisterType((*SnapshotRestoreSpec)(nil), "cluster.SnapshotRestoreSpec")
	proto.RegisterType((*SnapshotRestoreStatus)(nil), "cluster.SnapshotRestoreStatus")
	proto.RegisterEnum("cluster.SnapshotDestinationType", SnapshotDestinationType_name, SnapshotDestinationType_value)
	proto.RegisterEnum("cluster.SnapshotRestoreStatus_RestoreStatus", SnapshotRestoreStatus_RestoreStatus_name, SnapshotRestoreStatus_RestoreStatus_value)
}
func (m *ConfigurationSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *ConfigurationSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *ConfigurationSnapshotSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshotSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.Destination.Size()))
	n7, err := m.Destination.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *ConfigurationSnapshotStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshotStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastSnapshot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.LastSnapshot.Size()))
		n8, err := m.LastSnapshot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DestType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.DestType)))
		i += copy(dAtA[i:], m.DestType)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *SnapshotDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDestination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *SnapshotRestore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRestore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.ObjectMeta.Size()))
	n10, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.Spec.Size()))
	n11, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x22
	i++
	i = encodeVarintSnapshot(dAtA, i, uint64(m.Status.Size()))
	n12, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *SnapshotRestoreSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRestoreSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SnapshotPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.SnapshotPath)))
		i += copy(dAtA[i:], m.SnapshotPath)
	}
	return i, nil
}

func (m *SnapshotRestoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRestoreStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.StartTime.Size()))
		n13, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.EndTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.EndTime.Size()))
		n14, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.BackupSnapshotPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.BackupSnapshotPath)))
		i += copy(dAtA[i:], m.BackupSnapshotPath)
	}
	return i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigurationSnapshot) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	return n
}

func (m *ConfigurationSnapshotRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	return n
}

func (m *ConfigurationSnapshotSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Destination.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	return n
}

func (m *ConfigurationSnapshotStatus) Size() (n int) {
	var l int
	_ = l
	if m.LastSnapshot != nil {
		l = m.LastSnapshot.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.DestType)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *SnapshotDestination) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *SnapshotRestore) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	return n
}

func (m *SnapshotRestoreSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.SnapshotPath)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *SnapshotRestoreStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.BackupSnapshotPath)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigurationSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationSnapshotSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationSnapshotSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationSnapshotSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationSnapshotStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationSnapshotStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationSnapshotStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSnapshot == nil {
				m.LastSnapshot = &ConfigurationSnapshotStatus_ConfigSaveStatus{}
			}
			if err := m.LastSnapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationSnapshotStatus_ConfigSaveStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSaveStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSaveStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRestore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRestore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRestore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRestoreSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRestoreSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRestoreSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRestoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRestoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRestoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupSnapshotPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupSnapshotPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("snapshot.proto", fileDescriptorSnapshot) }

var fileDescriptorSnapshot = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0xb3, 0x61, 0x43, 0x26, 0x4d, 0xe2, 0x4e, 0x09, 0x4d, 0xd2, 0x25, 0xae, 0x4c, 0x91,
	0x4a, 0x95, 0xc4, 0x52, 0x11, 0xa8, 0xc0, 0x01, 0xe1, 0x65, 0x2b, 0x21, 0x15, 0xb6, 0x72, 0x52,
	0x09, 0x71, 0x62, 0xe2, 0x4c, 0x9d, 0xa1, 0xf6, 0x8c, 0xf1, 0x8c, 0xb7, 0xda, 0x23, 0x12, 0x2d,
	0xff, 0xa5, 0x9c, 0xf9, 0x0f, 0x7b, 0x5c, 0xed, 0x85, 0x9b, 0x85, 0x72, 0x42, 0xf9, 0x0d, 0x1c,
	0xd0, 0x4c, 0x9c, 0xac, 0x93, 0x75, 0xe8, 0xee, 0x69, 0x6f, 0xf3, 0xde, 0xbc, 0xf7, 0xcd, 0xf7,
	0xbe, 0xf7, 0xfc, 0x0c, 0xea, 0x9c, 0xa2, 0x90, 0x4f, 0x99, 0x18, 0x84, 0x11, 0x13, 0x0c, 0x96,
	0x5d, 0x3f, 0xe6, 0x02, 0x47, 0x9d, 0x3d, 0x8f, 0x31, 0xcf, 0xc7, 0x16, 0x0a, 0x89, 0x85, 0x28,
	0x65, 0x02, 0x09, 0xc2, 0x28, 0x5f, 0x84, 0x75, 0x0e, 0x3c, 0x22, 0xa6, 0xf1, 0x78, 0xe0, 0xb2,
	0xc0, 0x0a, 0x31, 0xe5, 0x88, 0x4e, 0x98, 0xc5, 0x5f, 0x5a, 0x47, 0x98, 0x12, 0x17, 0x5b, 0xb1,
	0x20, 0x3e, 0x97, 0xa9, 0x1e, 0xa6, 0xd9, 0x6c, 0x8b, 0x50, 0xd7, 0x8f, 0x27, 0x78, 0x09, 0xd3,
	0xcf, 0xc0, 0x78, 0xcc, 0x63, 0x96, 0x72, 0x8f, 0xe3, 0xe7, 0xca, 0x52, 0x86, 0x3a, 0xa5, 0xe1,
	0x1f, 0x6d, 0x79, 0x55, 0x72, 0x0c, 0xb0, 0x40, 0x8b, 0x30, 0x73, 0x5e, 0x04, 0xcd, 0x7d, 0x46,
	0x9f, 0x13, 0x2f, 0x8e, 0xd4, 0xbb, 0xc3, 0xb4, 0x46, 0xf8, 0x19, 0xd0, 0x46, 0x2d, 0xed, 0xae,
	0x76, 0xbf, 0xfa, 0xb0, 0x36, 0x40, 0x21, 0x19, 0x8c, 0x8e, 0x43, 0xfc, 0x1d, 0x16, 0xc8, 0xbe,
	0x75, 0x92, 0x18, 0x85, 0xd3, 0xc4, 0xd0, 0xe6, 0x89, 0x51, 0xee, 0x11, 0xea, 0x13, 0x8a, 0x9d,
	0xe5, 0x01, 0x3e, 0x06, 0xda, 0x61, 0xab, 0xa8, 0xf2, 0x1a, 0x2a, 0xef, 0x70, 0xfc, 0x33, 0x76,
	0x85, 0xca, 0xec, 0x64, 0x32, 0xeb, 0x92, 0x45, 0x8f, 0x05, 0x44, 0xe0, 0x20, 0x14, 0xc7, 0xce,
	0x86, 0x0d, 0x7f, 0x00, 0xa5, 0x61, 0x88, 0xdd, 0xd6, 0x8e, 0x82, 0x32, 0x07, 0xa9, 0xd8, 0x83,
	0x5c, 0xb6, 0x32, 0xd2, 0x7e, 0x5f, 0xa2, 0x4b, 0x64, 0x1e, 0x62, 0x37, 0x8b, 0xbc, 0x6e, 0xc3,
	0x9f, 0xc0, 0xee, 0x50, 0x20, 0x11, 0xf3, 0x56, 0x49, 0x61, 0xdf, 0x7b, 0x0b, 0xb6, 0x8a, 0xb5,
	0x5b, 0x29, 0xba, 0xce, 0x95, 0x9d, 0xc1, 0xbf, 0xe0, 0xf9, 0xa2, 0x79, 0xf6, 0xaa, 0x7d, 0xb3,
	0xd3, 0x70, 0x15, 0x5c, 0x7f, 0x39, 0x36, 0xe6, 0x9f, 0x1a, 0xd8, 0xcb, 0x7d, 0xc2, 0xc1, 0xbf,
	0xc4, 0x98, 0x5f, 0xbb, 0xe6, 0xdb, 0x78, 0xff, 0xa6, 0x81, 0xf6, 0x56, 0xd9, 0xa1, 0x07, 0xaa,
	0xdf, 0x60, 0x2e, 0x08, 0x55, 0x57, 0x29, 0xfd, 0xbd, 0x95, 0xa6, 0xcb, 0xd8, 0x4c, 0x8c, 0xfd,
	0x41, 0xaa, 0x65, 0x73, 0x72, 0xee, 0xcc, 0xd0, 0xca, 0x77, 0x9b, 0x7f, 0x14, 0xc1, 0x9d, 0xff,
	0xe9, 0x10, 0xfc, 0x55, 0x03, 0x37, 0x9e, 0x20, 0x2e, 0x96, 0xee, 0x94, 0xca, 0xa7, 0x97, 0x69,
	0x6f, 0x7a, 0x37, 0x44, 0x47, 0x38, 0xed, 0xf7, 0x9d, 0x79, 0x62, 0xdc, 0xf6, 0x11, 0x17, 0x2b,
	0x1d, 0x32, 0x0c, 0xb7, 0x5d, 0x74, 0x7e, 0xd7, 0x80, 0xbe, 0x09, 0x05, 0xbf, 0x07, 0xef, 0xca,
	0xea, 0x65, 0x33, 0x15, 0xa7, 0x8a, 0xfd, 0xf0, 0xcd, 0xeb, 0xf6, 0xdd, 0xa1, 0x88, 0x0e, 0x68,
	0x1c, 0xdc, 0xcf, 0x51, 0x48, 0x86, 0x7e, 0x3c, 0x4f, 0x0c, 0x20, 0x95, 0xe8, 0x8b, 0xe3, 0x10,
	0xf7, 0x9c, 0x15, 0x06, 0xfc, 0x10, 0xec, 0x3c, 0x73, 0xbe, 0x55, 0x0d, 0xaf, 0xd8, 0x37, 0xe7,
	0x89, 0x51, 0x8b, 0x23, 0x92, 0x61, 0x27, 0x6f, 0xcd, 0x43, 0x70, 0x2b, 0x07, 0x18, 0x3e, 0x02,
	0xa5, 0x0c, 0x8f, 0x7b, 0x97, 0xe1, 0xe1, 0xa8, 0x0c, 0xf3, 0xaf, 0x22, 0x68, 0x9c, 0x0f, 0x2c,
	0x17, 0x2c, 0xc2, 0xd7, 0xbe, 0x24, 0x9c, 0xb5, 0x25, 0x71, 0x71, 0xe8, 0x52, 0x9e, 0x57, 0x5a,
	0x0f, 0x3f, 0x6e, 0xac, 0x87, 0xee, 0x56, 0xd4, 0xab, 0x2f, 0x86, 0xf7, 0xce, 0x5e, 0xb5, 0xf5,
	0x4e, 0x3d, 0xfd, 0xc0, 0xa2, 0x05, 0x4e, 0xb6, 0x55, 0x19, 0xc2, 0xf0, 0x11, 0xb8, 0xb1, 0x74,
	0x3f, 0x45, 0x62, 0x9a, 0xb6, 0x0c, 0xca, 0x12, 0x42, 0x24, 0xa6, 0xd9, 0x12, 0xd6, 0x6d, 0xf3,
	0xdf, 0x22, 0x68, 0xe6, 0x92, 0x85, 0xa3, 0x55, 0x71, 0x8b, 0xe9, 0xf9, 0xf2, 0xcd, 0xeb, 0x76,
	0x6f, 0x73, 0x00, 0xd6, 0x52, 0x06, 0x6b, 0x96, 0x1c, 0xca, 0x72, 0x5a, 0x96, 0xb3, 0x3c, 0xc0,
	0xaf, 0x40, 0x65, 0x28, 0x50, 0x24, 0x46, 0x24, 0xc0, 0x69, 0x2f, 0xea, 0x8b, 0x71, 0x20, 0x01,
	0xe6, 0x02, 0x05, 0xa1, 0xdd, 0x98, 0x27, 0x46, 0x95, 0xcb, 0xa0, 0xbe, 0x20, 0x01, 0xee, 0x39,
	0x59, 0x03, 0x7e, 0x0e, 0xca, 0x07, 0x74, 0xa2, 0xd2, 0x4b, 0xb9, 0xe9, 0xb5, 0x79, 0x62, 0x54,
	0x30, 0x9d, 0xa4, 0xc9, 0xe7, 0x47, 0xf8, 0x04, 0x40, 0x1b, 0xb9, 0x2f, 0xe2, 0x70, 0x4d, 0xab,
	0x77, 0x54, 0x75, 0x6d, 0xb9, 0x63, 0xc6, 0xea, 0x76, 0xf5, 0xb1, 0xf6, 0x95, 0x56, 0x4e, 0xbe,
	0xdb, 0xdc, 0x07, 0xb5, 0x75, 0xc1, 0xaa, 0xa0, 0xfc, 0x8c, 0xbe, 0xa0, 0xec, 0x25, 0xd5, 0x0b,
	0x10, 0x80, 0xdd, 0xaf, 0x5d, 0x41, 0x8e, 0xb0, 0xae, 0xc1, 0x1a, 0xa8, 0xec, 0xb3, 0x20, 0xf4,
	0xb1, 0xc0, 0x13, 0xbd, 0x28, 0xaf, 0x1e, 0x23, 0xe2, 0xe3, 0x89, 0xbe, 0xf3, 0xe0, 0x01, 0xb8,
	0xbd, 0xe5, 0x5b, 0x82, 0x0d, 0x50, 0x5d, 0x8c, 0xfa, 0x50, 0xbe, 0xa1, 0x17, 0x6c, 0xfd, 0x64,
	0xd6, 0xd5, 0x4e, 0x67, 0x5d, 0xed, 0xef, 0x59, 0x57, 0xfb, 0x67, 0xd6, 0x2d, 0x3c, 0xd5, 0xc6,
	0xbb, 0xea, 0xdf, 0xfc, 0xc9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xa0, 0x0c, 0x84, 0x71,
	0x08, 0x00, 0x00,
}
