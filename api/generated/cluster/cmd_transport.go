// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cluster is a auto generated package.
Input file: cmd.proto
*/
package cluster

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPCluster(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCluster(_ context.Context, r *http.Request) (interface{}, error) {
	var req Cluster
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCluster encodes GRPC request
func EncodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// DecodeGrpcReqCluster decodes GRPC request
func DecodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// EncodeGrpcRespCluster encodes GRC response
func EncodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCluster decodes GRPC response
func DecodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterSpec encodes GRPC request
func EncodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// DecodeGrpcReqClusterSpec decodes GRPC request
func DecodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// EncodeGrpcRespClusterSpec encodes GRC response
func EncodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterSpec decodes GRPC response
func DecodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterStatus encodes GRPC request
func EncodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// DecodeGrpcReqClusterStatus decodes GRPC request
func DecodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// EncodeGrpcRespClusterStatus encodes GRC response
func EncodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterStatus decodes GRPC response
func DecodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNode(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNode(_ context.Context, r *http.Request) (interface{}, error) {
	var req Node
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNode encodes GRPC request
func EncodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// DecodeGrpcReqNode decodes GRPC request
func DecodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// EncodeGrpcRespNode encodes GRC response
func EncodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNode decodes GRPC response
func DecodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeCondition encodes GRPC request
func EncodeGrpcReqNodeCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeCondition)
	return req, nil
}

// DecodeGrpcReqNodeCondition decodes GRPC request
func DecodeGrpcReqNodeCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeCondition)
	return req, nil
}

// EncodeGrpcRespNodeCondition encodes GRC response
func EncodeGrpcRespNodeCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeCondition decodes GRPC response
func DecodeGrpcRespNodeCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeSpec encodes GRPC request
func EncodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// DecodeGrpcReqNodeSpec decodes GRPC request
func DecodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// EncodeGrpcRespNodeSpec encodes GRC response
func EncodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeSpec decodes GRPC response
func DecodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeStatus encodes GRPC request
func EncodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// DecodeGrpcReqNodeStatus decodes GRPC request
func DecodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// EncodeGrpcRespNodeStatus encodes GRC response
func EncodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeStatus decodes GRPC response
func DecodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPortCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPortCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req PortCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPortCondition encodes GRPC request
func EncodeGrpcReqPortCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortCondition)
	return req, nil
}

// DecodeGrpcReqPortCondition decodes GRPC request
func DecodeGrpcReqPortCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortCondition)
	return req, nil
}

// EncodeGrpcRespPortCondition encodes GRC response
func EncodeGrpcRespPortCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPortCondition decodes GRPC response
func DecodeGrpcRespPortCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPortSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPortSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req PortSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPortSpec encodes GRPC request
func EncodeGrpcReqPortSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortSpec)
	return req, nil
}

// DecodeGrpcReqPortSpec decodes GRPC request
func DecodeGrpcReqPortSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortSpec)
	return req, nil
}

// EncodeGrpcRespPortSpec encodes GRC response
func EncodeGrpcRespPortSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPortSpec decodes GRPC response
func DecodeGrpcRespPortSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPortStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPortStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PortStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPortStatus encodes GRPC request
func EncodeGrpcReqPortStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortStatus)
	return req, nil
}

// DecodeGrpcReqPortStatus decodes GRPC request
func DecodeGrpcReqPortStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PortStatus)
	return req, nil
}

// EncodeGrpcRespPortStatus encodes GRC response
func EncodeGrpcRespPortStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPortStatus decodes GRPC response
func DecodeGrpcRespPortStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNIC(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNIC(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNIC
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNIC encodes GRPC request
func EncodeGrpcReqSmartNIC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNIC)
	return req, nil
}

// DecodeGrpcReqSmartNIC decodes GRPC request
func DecodeGrpcReqSmartNIC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNIC)
	return req, nil
}

// EncodeGrpcRespSmartNIC encodes GRC response
func EncodeGrpcRespSmartNIC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNIC decodes GRPC response
func DecodeGrpcRespSmartNIC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICCondition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICCondition(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICCondition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICCondition encodes GRPC request
func EncodeGrpcReqSmartNICCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICCondition)
	return req, nil
}

// DecodeGrpcReqSmartNICCondition decodes GRPC request
func DecodeGrpcReqSmartNICCondition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICCondition)
	return req, nil
}

// EncodeGrpcRespSmartNICCondition encodes GRC response
func EncodeGrpcRespSmartNICCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICCondition decodes GRPC response
func DecodeGrpcRespSmartNICCondition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICSpec encodes GRPC request
func EncodeGrpcReqSmartNICSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICSpec)
	return req, nil
}

// DecodeGrpcReqSmartNICSpec decodes GRPC request
func DecodeGrpcReqSmartNICSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICSpec)
	return req, nil
}

// EncodeGrpcRespSmartNICSpec encodes GRC response
func EncodeGrpcRespSmartNICSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICSpec decodes GRPC response
func DecodeGrpcRespSmartNICSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSmartNICStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSmartNICStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SmartNICStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSmartNICStatus encodes GRPC request
func EncodeGrpcReqSmartNICStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICStatus)
	return req, nil
}

// DecodeGrpcReqSmartNICStatus decodes GRPC request
func DecodeGrpcReqSmartNICStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SmartNICStatus)
	return req, nil
}

// EncodeGrpcRespSmartNICStatus encodes GRC response
func EncodeGrpcRespSmartNICStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSmartNICStatus decodes GRPC response
func DecodeGrpcRespSmartNICStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
