// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package orchestration is a auto generated package.
Input file: orchestration.proto
*/
package orchestration

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// OrchestratorSpec_OrchestratorType_normal is a map of normalized values for the enum
var OrchestratorSpec_OrchestratorType_normal = map[string]string{
	"vcenter": "vcenter",
}

var OrchestratorSpec_OrchestratorType_vname = map[int32]string{
	0: "vcenter",
}

var OrchestratorSpec_OrchestratorType_vvalue = map[string]int32{
	"vcenter": 0,
}

func (x OrchestratorSpec_OrchestratorType) String() string {
	return OrchestratorSpec_OrchestratorType_vname[int32(x)]
}

// OrchestratorStatus_ConnectionStatus_normal is a map of normalized values for the enum
var OrchestratorStatus_ConnectionStatus_normal = map[string]string{
	"failure": "failure",
	"success": "success",
	"unknown": "unknown",
}

var OrchestratorStatus_ConnectionStatus_vname = map[int32]string{
	0: "unknown",
	1: "success",
	2: "failure",
}

var OrchestratorStatus_ConnectionStatus_vvalue = map[string]int32{
	"unknown": 0,
	"success": 1,
	"failure": 2,
}

func (x OrchestratorStatus_ConnectionStatus) String() string {
	return OrchestratorStatus_ConnectionStatus_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapOrchestration = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Orchestrator) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "orchestrator/", m.Name)
}

func (m *Orchestrator) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/orchestrator/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Orchestrator) Clone(into interface{}) (interface{}, error) {
	var out *Orchestrator
	var ok bool
	if into == nil {
		out = &Orchestrator{}
	} else {
		out, ok = into.(*Orchestrator)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Orchestrator))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Orchestrator) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Orchestrator"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrchestratorSpec) Clone(into interface{}) (interface{}, error) {
	var out *OrchestratorSpec
	var ok bool
	if into == nil {
		out = &OrchestratorSpec{}
	} else {
		out, ok = into.(*OrchestratorSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrchestratorSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrchestratorSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Type = "vcenter"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrchestratorStatus) Clone(into interface{}) (interface{}, error) {
	var out *OrchestratorStatus
	var ok bool
	if into == nil {
		out = &OrchestratorStatus{}
	} else {
		out, ok = into.(*OrchestratorStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrchestratorStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrchestratorStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "unknown"
	}
	return ret
}

// Validators and Requirements

func (m *Orchestrator) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Orchestrator) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Orchestrator"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Orchestrator"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Orchestrator) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *OrchestratorSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OrchestratorSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Credentials != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Credentials"
			if errs := m.Credentials.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapOrchestration["OrchestratorSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["OrchestratorSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrchestratorSpec) Normalize() {

	if m.Credentials != nil {
		m.Credentials.Normalize()
	}

	m.Type = OrchestratorSpec_OrchestratorType_normal[strings.ToLower(m.Type)]

}

func (m *OrchestratorStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OrchestratorStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapOrchestration["OrchestratorStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["OrchestratorStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrchestratorStatus) Normalize() {

	m.Status = OrchestratorStatus_ConnectionStatus_normal[strings.ToLower(m.Status)]

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Orchestrator{},
	)

	validatorMapOrchestration = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapOrchestration["OrchestratorSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["OrchestratorSpec"]["all"] = append(validatorMapOrchestration["OrchestratorSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*OrchestratorSpec)

		if _, ok := OrchestratorSpec_OrchestratorType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range OrchestratorSpec_OrchestratorType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapOrchestration["OrchestratorStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["OrchestratorStatus"]["all"] = append(validatorMapOrchestration["OrchestratorStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*OrchestratorStatus)

		if _, ok := OrchestratorStatus_ConnectionStatus_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range OrchestratorStatus_ConnectionStatus_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
