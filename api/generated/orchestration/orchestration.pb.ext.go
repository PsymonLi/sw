// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package orchestration is a auto generated package.
Input file: orchestration.proto
*/
package orchestration

import (
	"context"
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// ManagedNamespaceSpec_DiscoveryType_normal is a map of normalized values for the enum
var ManagedNamespaceSpec_DiscoveryType_normal = map[string]string{
	"cdp":      "cdp",
	"disabled": "disabled",
	"lldp":     "lldp",
}

var ManagedNamespaceSpec_DiscoveryType_vname = map[int32]string{
	0: "disabled",
	1: "cdp",
	2: "lldp",
}

var ManagedNamespaceSpec_DiscoveryType_vvalue = map[string]int32{
	"disabled": 0,
	"cdp":      1,
	"lldp":     2,
}

func (x ManagedNamespaceSpec_DiscoveryType) String() string {
	return ManagedNamespaceSpec_DiscoveryType_vname[int32(x)]
}

// ManagedNamespaceSpec_DiscoveryOp_normal is a map of normalized values for the enum
var ManagedNamespaceSpec_DiscoveryOp_normal = map[string]string{
	"advertise": "advertise",
	"both":      "both",
	"listen":    "listen",
	"none":      "none",
}

var ManagedNamespaceSpec_DiscoveryOp_vname = map[int32]string{
	0: "none",
	1: "listen",
	2: "advertise",
	3: "both",
}

var ManagedNamespaceSpec_DiscoveryOp_vvalue = map[string]int32{
	"none":      0,
	"listen":    1,
	"advertise": 2,
	"both":      3,
}

func (x ManagedNamespaceSpec_DiscoveryOp) String() string {
	return ManagedNamespaceSpec_DiscoveryOp_vname[int32(x)]
}

// ManagedNamespaceSpec_MulticastFilteringMode_normal is a map of normalized values for the enum
var ManagedNamespaceSpec_MulticastFilteringMode_normal = map[string]string{
	"basic":    "basic",
	"snooping": "snooping",
}

var ManagedNamespaceSpec_MulticastFilteringMode_vname = map[int32]string{
	0: "basic",
	1: "snooping",
}

var ManagedNamespaceSpec_MulticastFilteringMode_vvalue = map[string]int32{
	"basic":    0,
	"snooping": 1,
}

func (x ManagedNamespaceSpec_MulticastFilteringMode) String() string {
	return ManagedNamespaceSpec_MulticastFilteringMode_vname[int32(x)]
}

// NamespaceSpec_ModeType_normal is a map of normalized values for the enum
var NamespaceSpec_ModeType_normal = map[string]string{
	"managed":   "managed",
	"monitored": "monitored",
}

var NamespaceSpec_ModeType_vname = map[int32]string{
	0: "managed",
	1: "monitored",
}

var NamespaceSpec_ModeType_vvalue = map[string]int32{
	"managed":   0,
	"monitored": 1,
}

func (x NamespaceSpec_ModeType) String() string {
	return NamespaceSpec_ModeType_vname[int32(x)]
}

// OrchestratorSpec_OrchestratorType_normal is a map of normalized values for the enum
var OrchestratorSpec_OrchestratorType_normal = map[string]string{
	"vcenter": "vcenter",
}

var OrchestratorSpec_OrchestratorType_vname = map[int32]string{
	0: "vcenter",
}

var OrchestratorSpec_OrchestratorType_vvalue = map[string]int32{
	"vcenter": 0,
}

func (x OrchestratorSpec_OrchestratorType) String() string {
	return OrchestratorSpec_OrchestratorType_vname[int32(x)]
}

// OrchestratorStatus_ConnectionStatus_normal is a map of normalized values for the enum
var OrchestratorStatus_ConnectionStatus_normal = map[string]string{
	"degraded": "degraded",
	"failure":  "failure",
	"success":  "success",
	"unknown":  "unknown",
}

var OrchestratorStatus_ConnectionStatus_vname = map[int32]string{
	0: "unknown",
	1: "success",
	2: "failure",
	3: "degraded",
}

var OrchestratorStatus_ConnectionStatus_vvalue = map[string]int32{
	"unknown":  0,
	"success":  1,
	"failure":  2,
	"degraded": 3,
}

func (x OrchestratorStatus_ConnectionStatus) String() string {
	return OrchestratorStatus_ConnectionStatus_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapOrchestration = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Orchestrator) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "orchestrator/", m.Name)
}

func (m *Orchestrator) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/orchestrator/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *ManagedNamespaceSpec) Clone(into interface{}) (interface{}, error) {
	var out *ManagedNamespaceSpec
	var ok bool
	if into == nil {
		out = &ManagedNamespaceSpec{}
	} else {
		out, ok = into.(*ManagedNamespaceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ManagedNamespaceSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ManagedNamespaceSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.DiscoveryOperation = "none"
		m.DiscoveryProtocol = "disabled"
		m.MTU = 1500
		m.MulticastFilter = "basic"
		m.NumUplinks = 2
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MonitoredNamespaceSpec) Clone(into interface{}) (interface{}, error) {
	var out *MonitoredNamespaceSpec
	var ok bool
	if into == nil {
		out = &MonitoredNamespaceSpec{}
	} else {
		out, ok = into.(*MonitoredNamespaceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MonitoredNamespaceSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MonitoredNamespaceSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NamespaceSpec) Clone(into interface{}) (interface{}, error) {
	var out *NamespaceSpec
	var ok bool
	if into == nil {
		out = &NamespaceSpec{}
	} else {
		out, ok = into.(*NamespaceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NamespaceSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NamespaceSpec) Defaults(ver string) bool {
	var ret bool
	if m.ManagedSpec != nil {
		ret = m.ManagedSpec.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.Mode = "managed"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Orchestrator) Clone(into interface{}) (interface{}, error) {
	var out *Orchestrator
	var ok bool
	if into == nil {
		out = &Orchestrator{}
	} else {
		out, ok = into.(*Orchestrator)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Orchestrator))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Orchestrator) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Orchestrator"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrchestratorSpec) Clone(into interface{}) (interface{}, error) {
	var out *OrchestratorSpec
	var ok bool
	if into == nil {
		out = &OrchestratorSpec{}
	} else {
		out, ok = into.(*OrchestratorSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrchestratorSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrchestratorSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Namespaces {
		if m.Namespaces[k] != nil {
			i := m.Namespaces[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Type = "vcenter"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrchestratorStatus) Clone(into interface{}) (interface{}, error) {
	var out *OrchestratorStatus
	var ok bool
	if into == nil {
		out = &OrchestratorStatus{}
	} else {
		out, ok = into.(*OrchestratorStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrchestratorStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrchestratorStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "unknown"
	}
	return ret
}

// Validators and Requirements

func (m *ManagedNamespaceSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ManagedNamespaceSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapOrchestration["ManagedNamespaceSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["ManagedNamespaceSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ManagedNamespaceSpec) Normalize() {

	m.DiscoveryOperation = ManagedNamespaceSpec_DiscoveryOp_normal[strings.ToLower(m.DiscoveryOperation)]

	m.DiscoveryProtocol = ManagedNamespaceSpec_DiscoveryType_normal[strings.ToLower(m.DiscoveryProtocol)]

	m.MulticastFilter = ManagedNamespaceSpec_MulticastFilteringMode_normal[strings.ToLower(m.MulticastFilter)]

}

func (m *MonitoredNamespaceSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MonitoredNamespaceSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *MonitoredNamespaceSpec) Normalize() {

}

func (m *NamespaceSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NamespaceSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.ManagedSpec != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "ManagedSpec"
			if errs := m.ManagedSpec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapOrchestration["NamespaceSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["NamespaceSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *NamespaceSpec) Normalize() {

	if m.ManagedSpec != nil {
		m.ManagedSpec.Normalize()
	}

	m.Mode = NamespaceSpec_ModeType_normal[strings.ToLower(m.Mode)]

}

func (m *Orchestrator) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Orchestrator) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Orchestrator"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Orchestrator"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Orchestrator) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *OrchestratorSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OrchestratorSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Credentials != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Credentials"
			if errs := m.Credentials.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	for k, v := range m.Namespaces {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sNamespaces[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapOrchestration["OrchestratorSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["OrchestratorSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrchestratorSpec) Normalize() {

	if m.Credentials != nil {
		m.Credentials.Normalize()
	}

	for k, v := range m.Namespaces {
		if v != nil {
			v.Normalize()
			m.Namespaces[k] = v
		}
	}

	m.Type = OrchestratorSpec_OrchestratorType_normal[strings.ToLower(m.Type)]

}

func (m *OrchestratorStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OrchestratorStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapOrchestration["OrchestratorStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapOrchestration["OrchestratorStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrchestratorStatus) Normalize() {

	m.Status = OrchestratorStatus_ConnectionStatus_normal[strings.ToLower(m.Status)]

}

// Transformers

func (m *Orchestrator) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Orchestrator) EraseSecrets() {
	m.Spec.EraseSecrets()

	return
}

type storageOrchestratorTransformer struct{}

var StorageOrchestratorTransformer storageOrchestratorTransformer

func (st *storageOrchestratorTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Orchestrator)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageOrchestratorTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Orchestrator)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *OrchestratorSpec) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Credentials != nil {
		if err := m.Credentials.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
	}

	return nil
}

func (m *OrchestratorSpec) EraseSecrets() {

	if m.Credentials != nil {
		m.Credentials.EraseSecrets()
	}

	return
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Orchestrator{},
	)

	validatorMapOrchestration = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapOrchestration["ManagedNamespaceSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["ManagedNamespaceSpec"]["all"] = append(validatorMapOrchestration["ManagedNamespaceSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*ManagedNamespaceSpec)

		if _, ok := ManagedNamespaceSpec_DiscoveryOp_vvalue[m.DiscoveryOperation]; !ok {
			vals := []string{}
			for k1, _ := range ManagedNamespaceSpec_DiscoveryOp_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"DiscoveryOperation", vals)
		}
		return nil
	})

	validatorMapOrchestration["ManagedNamespaceSpec"]["all"] = append(validatorMapOrchestration["ManagedNamespaceSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*ManagedNamespaceSpec)

		if _, ok := ManagedNamespaceSpec_DiscoveryType_vvalue[m.DiscoveryProtocol]; !ok {
			vals := []string{}
			for k1, _ := range ManagedNamespaceSpec_DiscoveryType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"DiscoveryProtocol", vals)
		}
		return nil
	})

	validatorMapOrchestration["ManagedNamespaceSpec"]["all"] = append(validatorMapOrchestration["ManagedNamespaceSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*ManagedNamespaceSpec)

		if _, ok := ManagedNamespaceSpec_MulticastFilteringMode_vvalue[m.MulticastFilter]; !ok {
			vals := []string{}
			for k1, _ := range ManagedNamespaceSpec_MulticastFilteringMode_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"MulticastFilter", vals)
		}
		return nil
	})

	validatorMapOrchestration["NamespaceSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["NamespaceSpec"]["all"] = append(validatorMapOrchestration["NamespaceSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*NamespaceSpec)

		if _, ok := NamespaceSpec_ModeType_vvalue[m.Mode]; !ok {
			vals := []string{}
			for k1, _ := range NamespaceSpec_ModeType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Mode", vals)
		}
		return nil
	})

	validatorMapOrchestration["NamespaceSpec"]["all"] = append(validatorMapOrchestration["NamespaceSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*NamespaceSpec)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "-1")

		if err := validators.StrLen(m.Name, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Name", err.Error())
		}
		return nil
	})

	validatorMapOrchestration["OrchestratorSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["OrchestratorSpec"]["all"] = append(validatorMapOrchestration["OrchestratorSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*OrchestratorSpec)

		if _, ok := OrchestratorSpec_OrchestratorType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range OrchestratorSpec_OrchestratorType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapOrchestration["OrchestratorSpec"]["all"] = append(validatorMapOrchestration["OrchestratorSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*OrchestratorSpec)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "-1")

		if err := validators.StrLen(m.URI, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"URI", err.Error())
		}
		return nil
	})

	validatorMapOrchestration["OrchestratorStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapOrchestration["OrchestratorStatus"]["all"] = append(validatorMapOrchestration["OrchestratorStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*OrchestratorStatus)

		if _, ok := OrchestratorStatus_ConnectionStatus_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range OrchestratorStatus_ConnectionStatus_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
