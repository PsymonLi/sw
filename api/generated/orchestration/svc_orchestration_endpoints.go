// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package orchestration is a auto generated package.
Input file: svc_orchestration.proto
*/
package orchestration

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareOrchestratorV1Client add middleware to the client
type MiddlewareOrchestratorV1Client func(ServiceOrchestratorV1Client) ServiceOrchestratorV1Client

// EndpointsOrchestratorV1Client is the endpoints for the client
type EndpointsOrchestratorV1Client struct {
	Client                             OrchestratorV1Client
	AutoWatchSvcOrchestratorV1Endpoint endpoint.Endpoint

	AutoAddOrchestratorEndpoint    endpoint.Endpoint
	AutoDeleteOrchestratorEndpoint endpoint.Endpoint
	AutoGetOrchestratorEndpoint    endpoint.Endpoint
	AutoLabelOrchestratorEndpoint  endpoint.Endpoint
	AutoListOrchestratorEndpoint   endpoint.Endpoint
	AutoUpdateOrchestratorEndpoint endpoint.Endpoint
}

// EndpointsOrchestratorV1RestClient is the REST client
type EndpointsOrchestratorV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddOrchestratorEndpoint        endpoint.Endpoint
	AutoDeleteOrchestratorEndpoint     endpoint.Endpoint
	AutoGetOrchestratorEndpoint        endpoint.Endpoint
	AutoLabelOrchestratorEndpoint      endpoint.Endpoint
	AutoListOrchestratorEndpoint       endpoint.Endpoint
	AutoUpdateOrchestratorEndpoint     endpoint.Endpoint
	AutoWatchOrchestratorEndpoint      endpoint.Endpoint
	AutoWatchSvcOrchestratorV1Endpoint endpoint.Endpoint
}

// MiddlewareOrchestratorV1Server adds middle ware to the server
type MiddlewareOrchestratorV1Server func(ServiceOrchestratorV1Server) ServiceOrchestratorV1Server

// EndpointsOrchestratorV1Server is the server endpoints
type EndpointsOrchestratorV1Server struct {
	svcWatchHandlerOrchestratorV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddOrchestratorEndpoint    endpoint.Endpoint
	AutoDeleteOrchestratorEndpoint endpoint.Endpoint
	AutoGetOrchestratorEndpoint    endpoint.Endpoint
	AutoLabelOrchestratorEndpoint  endpoint.Endpoint
	AutoListOrchestratorEndpoint   endpoint.Endpoint
	AutoUpdateOrchestratorEndpoint endpoint.Endpoint

	watchHandlerOrchestrator func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddOrchestrator is endpoint for AutoAddOrchestrator
func (e EndpointsOrchestratorV1Client) AutoAddOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	resp, err := e.AutoAddOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &Orchestrator{}, err
	}
	return resp.(*Orchestrator), nil
}

type respOrchestratorV1AutoAddOrchestrator struct {
	V   Orchestrator
	Err error
}

// AutoDeleteOrchestrator is endpoint for AutoDeleteOrchestrator
func (e EndpointsOrchestratorV1Client) AutoDeleteOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	resp, err := e.AutoDeleteOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &Orchestrator{}, err
	}
	return resp.(*Orchestrator), nil
}

type respOrchestratorV1AutoDeleteOrchestrator struct {
	V   Orchestrator
	Err error
}

// AutoGetOrchestrator is endpoint for AutoGetOrchestrator
func (e EndpointsOrchestratorV1Client) AutoGetOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	resp, err := e.AutoGetOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &Orchestrator{}, err
	}
	return resp.(*Orchestrator), nil
}

type respOrchestratorV1AutoGetOrchestrator struct {
	V   Orchestrator
	Err error
}

// AutoLabelOrchestrator is endpoint for AutoLabelOrchestrator
func (e EndpointsOrchestratorV1Client) AutoLabelOrchestrator(ctx context.Context, in *api.Label) (*Orchestrator, error) {
	resp, err := e.AutoLabelOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &Orchestrator{}, err
	}
	return resp.(*Orchestrator), nil
}

type respOrchestratorV1AutoLabelOrchestrator struct {
	V   Orchestrator
	Err error
}

// AutoListOrchestrator is endpoint for AutoListOrchestrator
func (e EndpointsOrchestratorV1Client) AutoListOrchestrator(ctx context.Context, in *api.ListWatchOptions) (*OrchestratorList, error) {
	resp, err := e.AutoListOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &OrchestratorList{}, err
	}
	return resp.(*OrchestratorList), nil
}

type respOrchestratorV1AutoListOrchestrator struct {
	V   OrchestratorList
	Err error
}

// AutoUpdateOrchestrator is endpoint for AutoUpdateOrchestrator
func (e EndpointsOrchestratorV1Client) AutoUpdateOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	resp, err := e.AutoUpdateOrchestratorEndpoint(ctx, in)
	if err != nil {
		return &Orchestrator{}, err
	}
	return resp.(*Orchestrator), nil
}

type respOrchestratorV1AutoUpdateOrchestrator struct {
	V   Orchestrator
	Err error
}

func (e EndpointsOrchestratorV1Client) AutoWatchSvcOrchestratorV1(ctx context.Context, in *api.ListWatchOptions) (OrchestratorV1_AutoWatchSvcOrchestratorV1Client, error) {
	return e.Client.AutoWatchSvcOrchestratorV1(ctx, in)
}

// AutoWatchOrchestrator performs Watch for Orchestrator
func (e EndpointsOrchestratorV1Client) AutoWatchOrchestrator(ctx context.Context, in *api.ListWatchOptions) (OrchestratorV1_AutoWatchOrchestratorClient, error) {
	return e.Client.AutoWatchOrchestrator(ctx, in)
}

// AutoAddOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoAddOrchestrator(ctx context.Context, in Orchestrator) (Orchestrator, error) {
	resp, err := e.AutoAddOrchestratorEndpoint(ctx, in)
	if err != nil {
		return Orchestrator{}, err
	}
	return *resp.(*Orchestrator), nil
}

// MakeOrchestratorV1AutoAddOrchestratorEndpoint creates  AutoAddOrchestrator endpoints for the service
func MakeOrchestratorV1AutoAddOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Orchestrator)
		v, err := s.AutoAddOrchestrator(ctx, *req)
		return respOrchestratorV1AutoAddOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoAddOrchestrator")(f)
}

// AutoDeleteOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoDeleteOrchestrator(ctx context.Context, in Orchestrator) (Orchestrator, error) {
	resp, err := e.AutoDeleteOrchestratorEndpoint(ctx, in)
	if err != nil {
		return Orchestrator{}, err
	}
	return *resp.(*Orchestrator), nil
}

// MakeOrchestratorV1AutoDeleteOrchestratorEndpoint creates  AutoDeleteOrchestrator endpoints for the service
func MakeOrchestratorV1AutoDeleteOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Orchestrator)
		v, err := s.AutoDeleteOrchestrator(ctx, *req)
		return respOrchestratorV1AutoDeleteOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoDeleteOrchestrator")(f)
}

// AutoGetOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoGetOrchestrator(ctx context.Context, in Orchestrator) (Orchestrator, error) {
	resp, err := e.AutoGetOrchestratorEndpoint(ctx, in)
	if err != nil {
		return Orchestrator{}, err
	}
	return *resp.(*Orchestrator), nil
}

// MakeOrchestratorV1AutoGetOrchestratorEndpoint creates  AutoGetOrchestrator endpoints for the service
func MakeOrchestratorV1AutoGetOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Orchestrator)
		v, err := s.AutoGetOrchestrator(ctx, *req)
		return respOrchestratorV1AutoGetOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoGetOrchestrator")(f)
}

// AutoLabelOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoLabelOrchestrator(ctx context.Context, in api.Label) (Orchestrator, error) {
	resp, err := e.AutoLabelOrchestratorEndpoint(ctx, in)
	if err != nil {
		return Orchestrator{}, err
	}
	return *resp.(*Orchestrator), nil
}

// MakeOrchestratorV1AutoLabelOrchestratorEndpoint creates  AutoLabelOrchestrator endpoints for the service
func MakeOrchestratorV1AutoLabelOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelOrchestrator(ctx, *req)
		return respOrchestratorV1AutoLabelOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoLabelOrchestrator")(f)
}

// AutoListOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoListOrchestrator(ctx context.Context, in api.ListWatchOptions) (OrchestratorList, error) {
	resp, err := e.AutoListOrchestratorEndpoint(ctx, in)
	if err != nil {
		return OrchestratorList{}, err
	}
	return *resp.(*OrchestratorList), nil
}

// MakeOrchestratorV1AutoListOrchestratorEndpoint creates  AutoListOrchestrator endpoints for the service
func MakeOrchestratorV1AutoListOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListOrchestrator(ctx, *req)
		return respOrchestratorV1AutoListOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoListOrchestrator")(f)
}

// AutoUpdateOrchestrator implementation on server Endpoint
func (e EndpointsOrchestratorV1Server) AutoUpdateOrchestrator(ctx context.Context, in Orchestrator) (Orchestrator, error) {
	resp, err := e.AutoUpdateOrchestratorEndpoint(ctx, in)
	if err != nil {
		return Orchestrator{}, err
	}
	return *resp.(*Orchestrator), nil
}

// MakeOrchestratorV1AutoUpdateOrchestratorEndpoint creates  AutoUpdateOrchestrator endpoints for the service
func MakeOrchestratorV1AutoUpdateOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Orchestrator)
		v, err := s.AutoUpdateOrchestrator(ctx, *req)
		return respOrchestratorV1AutoUpdateOrchestrator{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("OrchestratorV1:AutoUpdateOrchestrator")(f)
}

func (e EndpointsOrchestratorV1Server) AutoWatchSvcOrchestratorV1(in *api.ListWatchOptions, stream OrchestratorV1_AutoWatchSvcOrchestratorV1Server) error {
	return e.svcWatchHandlerOrchestratorV1(in, stream)
}

// MakeAutoWatchSvcOrchestratorV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcOrchestratorV1Endpoint(s ServiceOrchestratorV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(OrchestratorV1_AutoWatchSvcOrchestratorV1Server)
		return s.AutoWatchSvcOrchestratorV1(options, wstream)
	}
}

// AutoWatchOrchestrator is the watch handler for Orchestrator on the server side.
func (e EndpointsOrchestratorV1Server) AutoWatchOrchestrator(in *api.ListWatchOptions, stream OrchestratorV1_AutoWatchOrchestratorServer) error {
	return e.watchHandlerOrchestrator(in, stream)
}

// MakeAutoWatchOrchestratorEndpoint creates the Watch endpoint
func MakeAutoWatchOrchestratorEndpoint(s ServiceOrchestratorV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(OrchestratorV1_AutoWatchOrchestratorServer)
		return s.AutoWatchOrchestrator(options, wstream)
	}
}

// MakeOrchestratorV1ServerEndpoints creates server endpoints
func MakeOrchestratorV1ServerEndpoints(s ServiceOrchestratorV1Server, logger log.Logger) EndpointsOrchestratorV1Server {
	return EndpointsOrchestratorV1Server{
		svcWatchHandlerOrchestratorV1: MakeAutoWatchSvcOrchestratorV1Endpoint(s, logger),

		AutoAddOrchestratorEndpoint:    MakeOrchestratorV1AutoAddOrchestratorEndpoint(s, logger),
		AutoDeleteOrchestratorEndpoint: MakeOrchestratorV1AutoDeleteOrchestratorEndpoint(s, logger),
		AutoGetOrchestratorEndpoint:    MakeOrchestratorV1AutoGetOrchestratorEndpoint(s, logger),
		AutoLabelOrchestratorEndpoint:  MakeOrchestratorV1AutoLabelOrchestratorEndpoint(s, logger),
		AutoListOrchestratorEndpoint:   MakeOrchestratorV1AutoListOrchestratorEndpoint(s, logger),
		AutoUpdateOrchestratorEndpoint: MakeOrchestratorV1AutoUpdateOrchestratorEndpoint(s, logger),

		watchHandlerOrchestrator: MakeAutoWatchOrchestratorEndpoint(s, logger),
	}
}

// LoggingOrchestratorV1MiddlewareClient adds middleware for the client
func LoggingOrchestratorV1MiddlewareClient(logger log.Logger) MiddlewareOrchestratorV1Client {
	return func(next ServiceOrchestratorV1Client) ServiceOrchestratorV1Client {
		return loggingOrchestratorV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingOrchestratorV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceOrchestratorV1Client
}

// LoggingOrchestratorV1MiddlewareServer adds middleware for the client
func LoggingOrchestratorV1MiddlewareServer(logger log.Logger) MiddlewareOrchestratorV1Server {
	return func(next ServiceOrchestratorV1Server) ServiceOrchestratorV1Server {
		return loggingOrchestratorV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingOrchestratorV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceOrchestratorV1Server
}

func (m loggingOrchestratorV1MiddlewareClient) AutoAddOrchestrator(ctx context.Context, in *Orchestrator) (resp *Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoAddOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareClient) AutoDeleteOrchestrator(ctx context.Context, in *Orchestrator) (resp *Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoDeleteOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareClient) AutoGetOrchestrator(ctx context.Context, in *Orchestrator) (resp *Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoGetOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareClient) AutoLabelOrchestrator(ctx context.Context, in *api.Label) (resp *Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoLabelOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareClient) AutoListOrchestrator(ctx context.Context, in *api.ListWatchOptions) (resp *OrchestratorList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoListOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareClient) AutoUpdateOrchestrator(ctx context.Context, in *Orchestrator) (resp *Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoUpdateOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateOrchestrator(ctx, in)
	return
}

func (m loggingOrchestratorV1MiddlewareClient) AutoWatchSvcOrchestratorV1(ctx context.Context, in *api.ListWatchOptions) (resp OrchestratorV1_AutoWatchSvcOrchestratorV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoWatchSvcOrchestratorV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcOrchestratorV1(ctx, in)
	return
}

func (m loggingOrchestratorV1MiddlewareClient) AutoWatchOrchestrator(ctx context.Context, in *api.ListWatchOptions) (resp OrchestratorV1_AutoWatchOrchestratorClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoWatchOrchestrator", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchOrchestrator(ctx, in)
	return
}

func (m loggingOrchestratorV1MiddlewareServer) AutoAddOrchestrator(ctx context.Context, in Orchestrator) (resp Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoAddOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareServer) AutoDeleteOrchestrator(ctx context.Context, in Orchestrator) (resp Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoDeleteOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareServer) AutoGetOrchestrator(ctx context.Context, in Orchestrator) (resp Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoGetOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareServer) AutoLabelOrchestrator(ctx context.Context, in api.Label) (resp Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoLabelOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareServer) AutoListOrchestrator(ctx context.Context, in api.ListWatchOptions) (resp OrchestratorList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoListOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListOrchestrator(ctx, in)
	return
}
func (m loggingOrchestratorV1MiddlewareServer) AutoUpdateOrchestrator(ctx context.Context, in Orchestrator) (resp Orchestrator, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "OrchestratorV1", "method", "AutoUpdateOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateOrchestrator(ctx, in)
	return
}

func (m loggingOrchestratorV1MiddlewareServer) AutoWatchSvcOrchestratorV1(in *api.ListWatchOptions, stream OrchestratorV1_AutoWatchSvcOrchestratorV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "OrchestratorV1", "method", "AutoWatchSvcOrchestratorV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcOrchestratorV1(in, stream)
	return
}

func (m loggingOrchestratorV1MiddlewareServer) AutoWatchOrchestrator(in *api.ListWatchOptions, stream OrchestratorV1_AutoWatchOrchestratorServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "OrchestratorV1", "method", "AutoWatchOrchestrator", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchOrchestrator(in, stream)
	return
}

func (r *EndpointsOrchestratorV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsOrchestratorV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIOrchestratorV1AutoAddOrchestratorCreateOper(in *Orchestrator) string {
	return fmt.Sprint("/configs/orchestration/v1", "/orchestrator")
}

//
func makeURIOrchestratorV1AutoDeleteOrchestratorDeleteOper(in *Orchestrator) string {
	return fmt.Sprint("/configs/orchestration/v1", "/orchestrator/", in.Name)
}

//
func makeURIOrchestratorV1AutoGetOrchestratorGetOper(in *Orchestrator) string {
	return fmt.Sprint("/configs/orchestration/v1", "/orchestrator/", in.Name)
}

//
func makeURIOrchestratorV1AutoLabelOrchestratorLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIOrchestratorV1AutoListOrchestratorListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/orchestration/v1", "/orchestrator")
}

//
func makeURIOrchestratorV1AutoUpdateOrchestratorUpdateOper(in *Orchestrator) string {
	return fmt.Sprint("/configs/orchestration/v1", "/orchestrator/", in.Name)
}

//
func makeURIOrchestratorV1AutoWatchOrchestratorWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/orchestration/v1", "/watch/orchestrator")
}

//
func makeURIOrchestratorV1AutoWatchSvcOrchestratorV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

// AutoAddOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoAddOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	path := makeURIOrchestratorV1AutoAddOrchestratorCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespOrchestratorV1AutoAddOrchestrator(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Orchestrator), nil
}

// AutoUpdateOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoUpdateOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	path := makeURIOrchestratorV1AutoUpdateOrchestratorUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespOrchestratorV1AutoUpdateOrchestrator(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Orchestrator), err
}

// AutoLabelOrchestrator label method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoLabelOrchestrator(ctx context.Context, in *api.Label) (*Orchestrator, error) {
	return nil, errors.New("not allowed")
}

// AutoGetOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoGetOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	path := makeURIOrchestratorV1AutoGetOrchestratorGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespOrchestratorV1AutoGetOrchestrator(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Orchestrator), err
}

// AutoDeleteOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoDeleteOrchestrator(ctx context.Context, in *Orchestrator) (*Orchestrator, error) {
	path := makeURIOrchestratorV1AutoDeleteOrchestratorDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespOrchestratorV1AutoDeleteOrchestrator(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Orchestrator), err
}

// AutoListOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoListOrchestrator(ctx context.Context, options *api.ListWatchOptions) (*OrchestratorList, error) {
	path := makeURIOrchestratorV1AutoListOrchestratorListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespOrchestratorV1AutoListOrchestrator(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*OrchestratorList), err
}

// AutoWatchOrchestrator CRUD method for Orchestrator
func (r *EndpointsOrchestratorV1RestClient) AutoWatchOrchestrator(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIOrchestratorV1AutoWatchOrchestratorWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgOrchestratorWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeOrchestratorV1RestClientEndpoints make REST client endpoints
func MakeOrchestratorV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsOrchestratorV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsOrchestratorV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeOrchestratorV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeOrchestratorV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsOrchestratorV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsOrchestratorV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
