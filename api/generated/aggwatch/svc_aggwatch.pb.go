// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_aggwatch.proto

/*
	Package aggwatch is a generated protocol buffer package.

	It is generated from these files:
		svc_aggwatch.proto

	It has these top-level messages:
*/
package aggwatch

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AggWatchV1 service

type AggWatchV1Client interface {
	AutoWatchSvcAggWatchV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (AggWatchV1_AutoWatchSvcAggWatchV1Client, error)
}

type aggWatchV1Client struct {
	cc *grpc.ClientConn
}

func NewAggWatchV1Client(cc *grpc.ClientConn) AggWatchV1Client {
	return &aggWatchV1Client{cc}
}

func (c *aggWatchV1Client) AutoWatchSvcAggWatchV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (AggWatchV1_AutoWatchSvcAggWatchV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_AggWatchV1_serviceDesc.Streams[0], c.cc, "/aggwatch.AggWatchV1/AutoWatchSvcAggWatchV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggWatchV1AutoWatchSvcAggWatchV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AggWatchV1_AutoWatchSvcAggWatchV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type aggWatchV1AutoWatchSvcAggWatchV1Client struct {
	grpc.ClientStream
}

func (x *aggWatchV1AutoWatchSvcAggWatchV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AggWatchV1 service

type AggWatchV1Server interface {
	AutoWatchSvcAggWatchV1(*api.AggWatchOptions, AggWatchV1_AutoWatchSvcAggWatchV1Server) error
}

func RegisterAggWatchV1Server(s *grpc.Server, srv AggWatchV1Server) {
	s.RegisterService(&_AggWatchV1_serviceDesc, srv)
}

func _AggWatchV1_AutoWatchSvcAggWatchV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.AggWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AggWatchV1Server).AutoWatchSvcAggWatchV1(m, &aggWatchV1AutoWatchSvcAggWatchV1Server{stream})
}

type AggWatchV1_AutoWatchSvcAggWatchV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type aggWatchV1AutoWatchSvcAggWatchV1Server struct {
	grpc.ServerStream
}

func (x *aggWatchV1AutoWatchSvcAggWatchV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _AggWatchV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aggwatch.AggWatchV1",
	HandlerType: (*AggWatchV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcAggWatchV1",
			Handler:       _AggWatchV1_AutoWatchSvcAggWatchV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_aggwatch.proto",
}

func init() { proto.RegisterFile("svc_aggwatch.proto", fileDescriptorSvcAggwatch) }

var fileDescriptorSvcAggwatch = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x2e, 0x4b, 0x8e,
	0x4f, 0x4c, 0x4f, 0x2f, 0x4f, 0x2c, 0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x80, 0xf1, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13,
	0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xea, 0xa4, 0x5c, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x0b, 0x52, 0xf3, 0x8a, 0x13, 0xf3, 0x52,
	0xf2, 0xf5, 0x8b, 0xcb, 0xf5, 0xcb, 0x52, 0xf3, 0x32, 0x93, 0x53, 0xf5, 0x4b, 0x4b, 0x32, 0x73,
	0x8a, 0x41, 0x5a, 0xd3, 0x53, 0xf3, 0x90, 0x75, 0xeb, 0x67, 0xe6, 0x25, 0xe7, 0x94, 0xa6, 0xa4,
	0xc2, 0x8c, 0xd1, 0x45, 0x32, 0x26, 0x3d, 0x3f, 0x3d, 0x5f, 0x1f, 0x2c, 0x9c, 0x54, 0x9a, 0x06,
	0xe6, 0x81, 0x39, 0x60, 0x16, 0x54, 0xb9, 0x2a, 0x0e, 0x5b, 0x41, 0x6e, 0xcc, 0x4d, 0x2d, 0x49,
	0x84, 0x28, 0x33, 0xaa, 0xe2, 0xe2, 0x72, 0x4c, 0x4f, 0x0f, 0x07, 0x79, 0x23, 0xcc, 0x50, 0x28,
	0x82, 0x4b, 0xcc, 0xb1, 0xb4, 0x24, 0x1f, 0xcc, 0x0d, 0x2e, 0x4b, 0x46, 0x92, 0x11, 0xd1, 0x4b,
	0x2c, 0xc8, 0xd4, 0x83, 0x09, 0xf8, 0x17, 0x80, 0x9d, 0x28, 0x25, 0x0c, 0x16, 0x05, 0x0b, 0xb9,
	0x96, 0xa5, 0xe6, 0x95, 0xf8, 0x64, 0x16, 0x97, 0x28, 0x09, 0x6e, 0x6a, 0x91, 0x64, 0x05, 0x07,
	0xcc, 0x8e, 0x16, 0x49, 0xc6, 0x03, 0x2d, 0x92, 0x0c, 0x06, 0x8c, 0x52, 0x42, 0x93, 0x9a, 0x25,
	0x99, 0xca, 0x0c, 0x67, 0x35, 0x4b, 0xc2, 0x83, 0xcd, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0x21, 0x80, 0x31, 0x89, 0x0d,
	0xec, 0x2c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x11, 0xb6, 0x68, 0x71, 0x01, 0x00,
	0x00,
}
