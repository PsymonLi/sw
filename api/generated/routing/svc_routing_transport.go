// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: svc_routing.proto
*/
package routing

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerRoutingV1 struct {
	Endpoints EndpointsRoutingV1Server

	AutoAddNeighborHdlr    grpctransport.Handler
	AutoDeleteNeighborHdlr grpctransport.Handler
	AutoGetNeighborHdlr    grpctransport.Handler
	AutoLabelNeighborHdlr  grpctransport.Handler
	AutoListNeighborHdlr   grpctransport.Handler
	AutoUpdateNeighborHdlr grpctransport.Handler
}

// MakeGRPCServerRoutingV1 creates a GRPC server for RoutingV1 service
func MakeGRPCServerRoutingV1(ctx context.Context, endpoints EndpointsRoutingV1Server, logger log.Logger) RoutingV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerRoutingV1{
		Endpoints: endpoints,
		AutoAddNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoAddNeighborEndpoint,
			DecodeGrpcReqNeighbor,
			EncodeGrpcRespNeighbor,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNeighbor", logger)))...,
		),

		AutoDeleteNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNeighborEndpoint,
			DecodeGrpcReqNeighbor,
			EncodeGrpcRespNeighbor,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNeighbor", logger)))...,
		),

		AutoGetNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoGetNeighborEndpoint,
			DecodeGrpcReqNeighbor,
			EncodeGrpcRespNeighbor,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNeighbor", logger)))...,
		),

		AutoLabelNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoLabelNeighborEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespNeighbor,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelNeighbor", logger)))...,
		),

		AutoListNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoListNeighborEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNeighborList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNeighbor", logger)))...,
		),

		AutoUpdateNeighborHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNeighborEndpoint,
			DecodeGrpcReqNeighbor,
			EncodeGrpcRespNeighbor,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNeighbor", logger)))...,
		),
	}
}

func (s *grpcServerRoutingV1) AutoAddNeighbor(ctx oldcontext.Context, req *Neighbor) (*Neighbor, error) {
	_, resp, err := s.AutoAddNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoAddNeighbor).V
	return &r, resp.(respRoutingV1AutoAddNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoAddNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoDeleteNeighbor(ctx oldcontext.Context, req *Neighbor) (*Neighbor, error) {
	_, resp, err := s.AutoDeleteNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoDeleteNeighbor).V
	return &r, resp.(respRoutingV1AutoDeleteNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoDeleteNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoGetNeighbor(ctx oldcontext.Context, req *Neighbor) (*Neighbor, error) {
	_, resp, err := s.AutoGetNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoGetNeighbor).V
	return &r, resp.(respRoutingV1AutoGetNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoGetNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoLabelNeighbor(ctx oldcontext.Context, req *api.Label) (*Neighbor, error) {
	_, resp, err := s.AutoLabelNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoLabelNeighbor).V
	return &r, resp.(respRoutingV1AutoLabelNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoLabelNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoListNeighbor(ctx oldcontext.Context, req *api.ListWatchOptions) (*NeighborList, error) {
	_, resp, err := s.AutoListNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoListNeighbor).V
	return &r, resp.(respRoutingV1AutoListNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoListNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NeighborList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoUpdateNeighbor(ctx oldcontext.Context, req *Neighbor) (*Neighbor, error) {
	_, resp, err := s.AutoUpdateNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1AutoUpdateNeighbor).V
	return &r, resp.(respRoutingV1AutoUpdateNeighbor).Err
}

func decodeHTTPrespRoutingV1AutoUpdateNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoWatchSvcRoutingV1(in *api.ListWatchOptions, stream RoutingV1_AutoWatchSvcRoutingV1Server) error {
	return s.Endpoints.AutoWatchSvcRoutingV1(in, stream)
}

func (s *grpcServerRoutingV1) AutoWatchNeighbor(in *api.ListWatchOptions, stream RoutingV1_AutoWatchNeighborServer) error {
	return s.Endpoints.AutoWatchNeighbor(in, stream)
}

func encodeHTTPNeighborList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighborList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NeighborList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighborList encodes GRPC request
func EncodeGrpcReqNeighborList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborList)
	return req, nil
}

// DecodeGrpcReqNeighborList decodes GRPC request
func DecodeGrpcReqNeighborList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborList)
	return req, nil
}

// EncodeGrpcRespNeighborList endodes the GRPC response
func EncodeGrpcRespNeighborList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighborList decodes the GRPC response
func DecodeGrpcRespNeighborList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
