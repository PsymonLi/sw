// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: svc_routing.proto
*/
package routing

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerRoutingV1 struct {
	Endpoints EndpointsRoutingV1Server

	GetNeighborHdlr   grpctransport.Handler
	HealthZHdlr       grpctransport.Handler
	ListNeighborsHdlr grpctransport.Handler
}

// MakeGRPCServerRoutingV1 creates a GRPC server for RoutingV1 service
func MakeGRPCServerRoutingV1(ctx context.Context, endpoints EndpointsRoutingV1Server, logger log.Logger) RoutingV1Server {
	return &grpcServerRoutingV1{
		Endpoints: endpoints,
		GetNeighborHdlr: grpctransport.NewServer(
			endpoints.GetNeighborEndpoint,
			DecodeGrpcReqNeighborFilter,
			EncodeGrpcRespNeighbor,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("GetNeighbor", logger)))...,
		),

		HealthZHdlr: grpctransport.NewServer(
			endpoints.HealthZEndpoint,
			DecodeGrpcReqEmptyReq,
			EncodeGrpcRespHealth,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("HealthZ", logger)))...,
		),

		ListNeighborsHdlr: grpctransport.NewServer(
			endpoints.ListNeighborsEndpoint,
			DecodeGrpcReqNeighborFilter,
			EncodeGrpcRespNeighborList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("ListNeighbors", logger)))...,
		),
	}
}

func (s *grpcServerRoutingV1) GetNeighbor(ctx oldcontext.Context, req *NeighborFilter) (*Neighbor, error) {
	_, resp, err := s.GetNeighborHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1GetNeighbor).V
	return &r, resp.(respRoutingV1GetNeighbor).Err
}

func decodeHTTPrespRoutingV1GetNeighbor(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Neighbor
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) HealthZ(ctx oldcontext.Context, req *EmptyReq) (*Health, error) {
	_, resp, err := s.HealthZHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1HealthZ).V
	return &r, resp.(respRoutingV1HealthZ).Err
}

func decodeHTTPrespRoutingV1HealthZ(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Health
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) ListNeighbors(ctx oldcontext.Context, req *NeighborFilter) (*NeighborList, error) {
	_, resp, err := s.ListNeighborsHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRoutingV1ListNeighbors).V
	return &r, resp.(respRoutingV1ListNeighbors).Err
}

func decodeHTTPrespRoutingV1ListNeighbors(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NeighborList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRoutingV1) AutoWatchSvcRoutingV1(in *api.AggWatchOptions, stream RoutingV1_AutoWatchSvcRoutingV1Server) error {
	return s.Endpoints.AutoWatchSvcRoutingV1(in, stream)
}
