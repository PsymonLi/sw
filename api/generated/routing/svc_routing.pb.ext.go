// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: svc_routing.proto
*/
package routing

import (
	"context"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *NeighborList) MakeKey(prefix string) string {
	obj := Neighbor{}
	return obj.MakeKey(prefix)
}

func (m *NeighborList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgNeighborWatchHelper) MakeKey(prefix string) string {
	obj := Neighbor{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgNeighborWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgNeighborWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgNeighborWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgNeighborWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgNeighborWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgNeighborWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgNeighborWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgNeighborWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgNeighborWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgNeighborWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgNeighborWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgNeighborWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NeighborList) Clone(into interface{}) (interface{}, error) {
	var out *NeighborList
	var ok bool
	if into == nil {
		out = &NeighborList{}
	} else {
		out, ok = into.(*NeighborList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NeighborList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NeighborList) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *AutoMsgNeighborWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgNeighborWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgNeighborWatchHelper) Normalize() {

	for k, v := range m.Events {
		if v != nil {
			v.Normalize()
			m.Events[k] = v
		}
	}

}

func (m *AutoMsgNeighborWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgNeighborWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgNeighborWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *NeighborList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NeighborList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *NeighborList) Normalize() {

	for k, v := range m.Items {
		if v != nil {
			v.Normalize()
			m.Items[k] = v
		}
	}

}

// Transformers

func (m *AutoMsgNeighborWatchHelper) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Events {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Events[i] = &c
	}
	return nil
}

func (m *AutoMsgNeighborWatchHelper) EraseSecrets() {
	for _, v := range m.Events {
		v.EraseSecrets()
	}
	return
}

func (m *AutoMsgNeighborWatchHelper_WatchEvent) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Object != nil {
		if err := m.Object.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
	}

	return nil
}

func (m *AutoMsgNeighborWatchHelper_WatchEvent) EraseSecrets() {

	if m.Object != nil {
		m.Object.EraseSecrets()
	}

	return
}

func (m *NeighborList) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Items {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Items[i] = &c
	}
	return nil
}

func (m *NeighborList) EraseSecrets() {
	for _, v := range m.Items {
		v.EraseSecrets()
	}
	return
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

}
