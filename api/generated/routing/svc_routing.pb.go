// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_routing.proto

package routing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutingV1 service

type RoutingV1Client interface {
	AutoWatchSvcRoutingV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (RoutingV1_AutoWatchSvcRoutingV1Client, error)
	//
	GetNeighbor(ctx context.Context, in *NeighborFilter, opts ...grpc.CallOption) (*Neighbor, error)
	//
	HealthZ(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Health, error)
	//    option (venice.apiRestService) = {
	//         Object: "Neighbor"
	//         Method: [  "list" ]
	//    };
	ListNeighbors(ctx context.Context, in *NeighborFilter, opts ...grpc.CallOption) (*NeighborList, error)
}

type routingV1Client struct {
	cc *grpc.ClientConn
}

func NewRoutingV1Client(cc *grpc.ClientConn) RoutingV1Client {
	return &routingV1Client{cc}
}

func (c *routingV1Client) AutoWatchSvcRoutingV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (RoutingV1_AutoWatchSvcRoutingV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_RoutingV1_serviceDesc.Streams[0], c.cc, "/routing.RoutingV1/AutoWatchSvcRoutingV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingV1AutoWatchSvcRoutingV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoutingV1_AutoWatchSvcRoutingV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type routingV1AutoWatchSvcRoutingV1Client struct {
	grpc.ClientStream
}

func (x *routingV1AutoWatchSvcRoutingV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingV1Client) GetNeighbor(ctx context.Context, in *NeighborFilter, opts ...grpc.CallOption) (*Neighbor, error) {
	out := new(Neighbor)
	err := grpc.Invoke(ctx, "/routing.RoutingV1/GetNeighbor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingV1Client) HealthZ(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := grpc.Invoke(ctx, "/routing.RoutingV1/HealthZ", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingV1Client) ListNeighbors(ctx context.Context, in *NeighborFilter, opts ...grpc.CallOption) (*NeighborList, error) {
	out := new(NeighborList)
	err := grpc.Invoke(ctx, "/routing.RoutingV1/ListNeighbors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutingV1 service

type RoutingV1Server interface {
	AutoWatchSvcRoutingV1(*api.AggWatchOptions, RoutingV1_AutoWatchSvcRoutingV1Server) error
	//
	GetNeighbor(context.Context, *NeighborFilter) (*Neighbor, error)
	//
	HealthZ(context.Context, *EmptyReq) (*Health, error)
	//    option (venice.apiRestService) = {
	//         Object: "Neighbor"
	//         Method: [  "list" ]
	//    };
	ListNeighbors(context.Context, *NeighborFilter) (*NeighborList, error)
}

func RegisterRoutingV1Server(s *grpc.Server, srv RoutingV1Server) {
	s.RegisterService(&_RoutingV1_serviceDesc, srv)
}

func _RoutingV1_AutoWatchSvcRoutingV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.AggWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingV1Server).AutoWatchSvcRoutingV1(m, &routingV1AutoWatchSvcRoutingV1Server{stream})
}

type RoutingV1_AutoWatchSvcRoutingV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type routingV1AutoWatchSvcRoutingV1Server struct {
	grpc.ServerStream
}

func (x *routingV1AutoWatchSvcRoutingV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _RoutingV1_GetNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighborFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingV1Server).GetNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.RoutingV1/GetNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingV1Server).GetNeighbor(ctx, req.(*NeighborFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingV1_HealthZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingV1Server).HealthZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.RoutingV1/HealthZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingV1Server).HealthZ(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingV1_ListNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighborFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingV1Server).ListNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routing.RoutingV1/ListNeighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingV1Server).ListNeighbors(ctx, req.(*NeighborFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutingV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routing.RoutingV1",
	HandlerType: (*RoutingV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNeighbor",
			Handler:    _RoutingV1_GetNeighbor_Handler,
		},
		{
			MethodName: "HealthZ",
			Handler:    _RoutingV1_HealthZ_Handler,
		},
		{
			MethodName: "ListNeighbors",
			Handler:    _RoutingV1_ListNeighbors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcRoutingV1",
			Handler:       _RoutingV1_AutoWatchSvcRoutingV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_routing.proto",
}

func init() { proto.RegisterFile("svc_routing.proto", fileDescriptorSvcRouting) }

var fileDescriptorSvcRouting = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6b, 0x14, 0x31,
	0x18, 0x86, 0x77, 0x2a, 0x5a, 0x9c, 0x52, 0x64, 0x63, 0x97, 0x92, 0xa0, 0x8b, 0x2c, 0x08, 0x5e,
	0x3a, 0xb1, 0xfa, 0x0b, 0x2a, 0xac, 0x5a, 0x10, 0x95, 0x0a, 0x16, 0x3c, 0x28, 0xd9, 0xf4, 0x33,
	0x13, 0x98, 0x4d, 0xe2, 0xe4, 0x9b, 0x29, 0x52, 0x0a, 0x32, 0xdd, 0x5f, 0xa0, 0xb7, 0x9e, 0x3c,
	0x7b, 0xf4, 0xe4, 0xd1, 0xa3, 0x47, 0xc1, 0x3f, 0x20, 0x83, 0x07, 0x7f, 0x86, 0x4c, 0x66, 0xc7,
	0xae, 0xd4, 0xbd, 0xcd, 0xf7, 0xbe, 0xef, 0xf7, 0xf2, 0x4c, 0x92, 0xb8, 0xef, 0x4b, 0xf9, 0x2a,
	0xb7, 0x05, 0x6a, 0xa3, 0x12, 0x97, 0x5b, 0xb4, 0x64, 0x75, 0x3e, 0xb2, 0x6b, 0xca, 0x5a, 0x95,
	0x01, 0x17, 0x4e, 0x73, 0x61, 0x8c, 0x45, 0x81, 0xda, 0x1a, 0xdf, 0xc6, 0xd8, 0x58, 0x69, 0x4c,
	0x8b, 0x49, 0x22, 0xed, 0x94, 0x3b, 0x30, 0x5e, 0x98, 0x03, 0xcb, 0xfd, 0x21, 0x2f, 0xc1, 0x68,
	0x09, 0xbc, 0x40, 0x9d, 0xf9, 0x66, 0x55, 0x81, 0x59, 0xdc, 0xe6, 0xda, 0xc8, 0xac, 0x38, 0x80,
	0xae, 0x66, 0x6b, 0xa1, 0x46, 0x59, 0x65, 0x79, 0x90, 0x27, 0xc5, 0xeb, 0x30, 0x85, 0x21, 0x7c,
	0xcd, 0xe3, 0xeb, 0xff, 0xb0, 0xb2, 0x9b, 0x4b, 0x20, 0x1a, 0xe4, 0x29, 0xa0, 0x68, 0x63, 0x77,
	0xde, 0x5d, 0x88, 0x2f, 0xef, 0xb5, 0x8b, 0xcf, 0xb7, 0xc9, 0x7e, 0x3c, 0xd8, 0x29, 0xd0, 0xee,
	0x0b, 0x94, 0xe9, 0xb3, 0x52, 0x9e, 0x19, 0x1b, 0x89, 0x70, 0x3a, 0xd9, 0x51, 0x2a, 0x58, 0x4f,
	0x5c, 0x00, 0x66, 0x57, 0x83, 0x1a, 0xa4, 0x71, 0x09, 0x06, 0x1f, 0x69, 0x8f, 0xa3, 0xfe, 0xe7,
	0x19, 0xbd, 0x78, 0xd8, 0x68, 0x5f, 0x66, 0x34, 0xfa, 0x3a, 0xa3, 0xbd, 0xdb, 0x11, 0x91, 0xf1,
	0xda, 0x03, 0xc0, 0xc7, 0xa0, 0x55, 0x3a, 0xb1, 0x39, 0xd9, 0x4c, 0x3a, 0xd8, 0x4e, 0xba, 0xaf,
	0x33, 0x84, 0x9c, 0xf5, 0xcf, 0x19, 0xa3, 0x5b, 0xd5, 0x8f, 0x5f, 0x1f, 0x56, 0x46, 0xe4, 0x06,
	0x3f, 0xda, 0x35, 0x1e, 0x85, 0x91, 0x70, 0xcc, 0xcd, 0xdc, 0xf5, 0xfc, 0xa8, 0x0b, 0x1e, 0x93,
	0xdd, 0x78, 0xf5, 0x21, 0x88, 0x0c, 0xd3, 0x17, 0xe4, 0xac, 0x67, 0x3c, 0x75, 0xf8, 0x76, 0x0f,
	0xde, 0xb0, 0x2b, 0x7f, 0xa5, 0x36, 0x34, 0x62, 0xa1, 0x78, 0x83, 0x90, 0xc5, 0xe2, 0x34, 0x78,
	0xe4, 0x65, 0xbc, 0xde, 0xfc, 0x4c, 0xd7, 0xed, 0x97, 0x13, 0x0f, 0xce, 0x19, 0xe1, 0x14, 0xae,
	0x87, 0xf2, 0x4d, 0x32, 0xf8, 0x2f, 0x35, 0x8b, 0xdf, 0x9f, 0xd0, 0x95, 0x72, 0xfb, 0xf4, 0x84,
	0xf6, 0xee, 0x25, 0xa7, 0x15, 0x5d, 0x73, 0x60, 0xb6, 0x1c, 0xe4, 0x1e, 0x0a, 0xff, 0xb1, 0xa2,
	0xbd, 0x4f, 0x15, 0xed, 0x1e, 0xdb, 0xb7, 0x7a, 0x18, 0x7d, 0xaf, 0x87, 0xd1, 0xcf, 0x7a, 0x18,
	0xfd, 0xae, 0x87, 0xbd, 0xa7, 0xd1, 0xe4, 0x52, 0xb8, 0xbb, 0xbb, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0xae, 0xe3, 0x76, 0xa3, 0x02, 0x00, 0x00,
}
