// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: routing.proto
*/
package routing

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPEmptyReq(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEmptyReq(_ context.Context, r *http.Request) (interface{}, error) {
	var req EmptyReq
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEmptyReq encodes GRPC request
func EncodeGrpcReqEmptyReq(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EmptyReq)
	return req, nil
}

// DecodeGrpcReqEmptyReq decodes GRPC request
func DecodeGrpcReqEmptyReq(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EmptyReq)
	return req, nil
}

// EncodeGrpcRespEmptyReq encodes GRC response
func EncodeGrpcRespEmptyReq(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEmptyReq decodes GRPC response
func DecodeGrpcRespEmptyReq(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHealth(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHealth(_ context.Context, r *http.Request) (interface{}, error) {
	var req Health
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHealth encodes GRPC request
func EncodeGrpcReqHealth(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Health)
	return req, nil
}

// DecodeGrpcReqHealth decodes GRPC request
func DecodeGrpcReqHealth(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Health)
	return req, nil
}

// EncodeGrpcRespHealth encodes GRC response
func EncodeGrpcRespHealth(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHealth decodes GRPC response
func DecodeGrpcRespHealth(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHealthSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHealthSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req HealthSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHealthSpec encodes GRPC request
func EncodeGrpcReqHealthSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HealthSpec)
	return req, nil
}

// DecodeGrpcReqHealthSpec decodes GRPC request
func DecodeGrpcReqHealthSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HealthSpec)
	return req, nil
}

// EncodeGrpcRespHealthSpec encodes GRC response
func EncodeGrpcRespHealthSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHealthSpec decodes GRPC response
func DecodeGrpcRespHealthSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPHealthStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPHealthStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req HealthStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqHealthStatus encodes GRPC request
func EncodeGrpcReqHealthStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HealthStatus)
	return req, nil
}

// DecodeGrpcReqHealthStatus decodes GRPC request
func DecodeGrpcReqHealthStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*HealthStatus)
	return req, nil
}

// EncodeGrpcRespHealthStatus encodes GRC response
func EncodeGrpcRespHealthStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespHealthStatus decodes GRPC response
func DecodeGrpcRespHealthStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNeighbor(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighbor(_ context.Context, r *http.Request) (interface{}, error) {
	var req Neighbor
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighbor encodes GRPC request
func EncodeGrpcReqNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Neighbor)
	return req, nil
}

// DecodeGrpcReqNeighbor decodes GRPC request
func DecodeGrpcReqNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Neighbor)
	return req, nil
}

// EncodeGrpcRespNeighbor encodes GRC response
func EncodeGrpcRespNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighbor decodes GRPC response
func DecodeGrpcRespNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNeighborFilter(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighborFilter(_ context.Context, r *http.Request) (interface{}, error) {
	var req NeighborFilter
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighborFilter encodes GRPC request
func EncodeGrpcReqNeighborFilter(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborFilter)
	return req, nil
}

// DecodeGrpcReqNeighborFilter decodes GRPC request
func DecodeGrpcReqNeighborFilter(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborFilter)
	return req, nil
}

// EncodeGrpcRespNeighborFilter encodes GRC response
func EncodeGrpcRespNeighborFilter(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighborFilter decodes GRPC response
func DecodeGrpcRespNeighborFilter(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNeighborList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighborList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NeighborList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighborList encodes GRPC request
func EncodeGrpcReqNeighborList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborList)
	return req, nil
}

// DecodeGrpcReqNeighborList decodes GRPC request
func DecodeGrpcReqNeighborList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborList)
	return req, nil
}

// EncodeGrpcRespNeighborList encodes GRC response
func EncodeGrpcRespNeighborList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighborList decodes GRPC response
func DecodeGrpcRespNeighborList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNeighborStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighborStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NeighborStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighborStatus encodes GRPC request
func EncodeGrpcReqNeighborStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborStatus)
	return req, nil
}

// DecodeGrpcReqNeighborStatus decodes GRPC request
func DecodeGrpcReqNeighborStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborStatus)
	return req, nil
}

// EncodeGrpcRespNeighborStatus encodes GRC response
func EncodeGrpcRespNeighborStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighborStatus decodes GRPC response
func DecodeGrpcRespNeighborStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoute(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoute(_ context.Context, r *http.Request) (interface{}, error) {
	var req Route
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoute encodes GRPC request
func EncodeGrpcReqRoute(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Route)
	return req, nil
}

// DecodeGrpcReqRoute decodes GRPC request
func DecodeGrpcReqRoute(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Route)
	return req, nil
}

// EncodeGrpcRespRoute encodes GRC response
func EncodeGrpcRespRoute(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoute decodes GRPC response
func DecodeGrpcRespRoute(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteFilter(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteFilter(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteFilter
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteFilter encodes GRPC request
func EncodeGrpcReqRouteFilter(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteFilter)
	return req, nil
}

// DecodeGrpcReqRouteFilter decodes GRPC request
func DecodeGrpcReqRouteFilter(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteFilter)
	return req, nil
}

// EncodeGrpcRespRouteFilter encodes GRC response
func EncodeGrpcRespRouteFilter(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteFilter decodes GRPC response
func DecodeGrpcRespRouteFilter(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteList encodes GRPC request
func EncodeGrpcReqRouteList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteList)
	return req, nil
}

// DecodeGrpcReqRouteList decodes GRPC request
func DecodeGrpcReqRouteList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteList)
	return req, nil
}

// EncodeGrpcRespRouteList encodes GRC response
func EncodeGrpcRespRouteList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteList decodes GRPC response
func DecodeGrpcRespRouteList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteStatus encodes GRPC request
func EncodeGrpcReqRouteStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteStatus)
	return req, nil
}

// DecodeGrpcReqRouteStatus decodes GRPC request
func DecodeGrpcReqRouteStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteStatus)
	return req, nil
}

// EncodeGrpcRespRouteStatus encodes GRC response
func EncodeGrpcRespRouteStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteStatus decodes GRPC response
func DecodeGrpcRespRouteStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
