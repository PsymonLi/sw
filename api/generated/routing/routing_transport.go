// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: routing.proto
*/
package routing

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPNeighbor(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighbor(_ context.Context, r *http.Request) (interface{}, error) {
	var req Neighbor
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighbor encodes GRPC request
func EncodeGrpcReqNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Neighbor)
	return req, nil
}

// DecodeGrpcReqNeighbor decodes GRPC request
func DecodeGrpcReqNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Neighbor)
	return req, nil
}

// EncodeGrpcRespNeighbor encodes GRC response
func EncodeGrpcRespNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighbor decodes GRPC response
func DecodeGrpcRespNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNeighborStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNeighborStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NeighborStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNeighborStatus encodes GRPC request
func EncodeGrpcReqNeighborStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborStatus)
	return req, nil
}

// DecodeGrpcReqNeighborStatus decodes GRPC request
func DecodeGrpcReqNeighborStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NeighborStatus)
	return req, nil
}

// EncodeGrpcRespNeighborStatus encodes GRC response
func EncodeGrpcRespNeighborStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNeighborStatus decodes GRPC response
func DecodeGrpcRespNeighborStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
