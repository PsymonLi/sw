// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routing.proto

/*
	Package routing is a generated protocol buffer package.

	It is generated from these files:
		routing.proto
		svc_routing.proto

	It has these top-level messages:
		EmptyReq
		Health
		HealthSpec
		HealthStatus
		Neighbor
		NeighborFilter
		NeighborList
		NeighborStatus
*/
package routing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"
import network "github.com/pensando/sw/api/generated/network"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type NeighborStatus_State int32

const (
	//
	NeighborStatus_Idle NeighborStatus_State = 0
	//
	NeighborStatus_Connect NeighborStatus_State = 1
	//
	NeighborStatus_Active NeighborStatus_State = 2
	//
	NeighborStatus_OpenSent NeighborStatus_State = 3
	//
	NeighborStatus_OpenConfirmed NeighborStatus_State = 4
	//
	NeighborStatus_Established NeighborStatus_State = 5
)

var NeighborStatus_State_name = map[int32]string{
	0: "Idle",
	1: "Connect",
	2: "Active",
	3: "OpenSent",
	4: "OpenConfirmed",
	5: "Established",
}
var NeighborStatus_State_value = map[string]int32{
	"Idle":          0,
	"Connect":       1,
	"Active":        2,
	"OpenSent":      3,
	"OpenConfirmed": 4,
	"Established":   5,
}

func (NeighborStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRouting, []int{7, 0}
}

//
type NeighborStatus_AddrType int32

const (
	//
	NeighborStatus_OTHER NeighborStatus_AddrType = 0
	//
	NeighborStatus_IPV4 NeighborStatus_AddrType = 1
	//
	NeighborStatus_IPV6 NeighborStatus_AddrType = 2
	//
	NeighborStatus_NSAP NeighborStatus_AddrType = 3
	//
	NeighborStatus_HDLC NeighborStatus_AddrType = 4
	//
	NeighborStatus_BBN1822 NeighborStatus_AddrType = 5
	//
	NeighborStatus_IEEE802 NeighborStatus_AddrType = 6
	//
	NeighborStatus_E163 NeighborStatus_AddrType = 7
	//
	NeighborStatus_E164 NeighborStatus_AddrType = 8
	//
	NeighborStatus_F69 NeighborStatus_AddrType = 9
	//
	NeighborStatus_X121 NeighborStatus_AddrType = 10
	//
	NeighborStatus_IPX NeighborStatus_AddrType = 11
	//
	NeighborStatus_APPLETALK NeighborStatus_AddrType = 12
	//
	NeighborStatus_DECNETIV NeighborStatus_AddrType = 13
	//
	NeighborStatus_BANYANVIN NeighborStatus_AddrType = 14
	//
	NeighborStatus_E164_NSAP NeighborStatus_AddrType = 15
	//
	NeighborStatus_IPV4_TNA NeighborStatus_AddrType = 16
	//
	NeighborStatus_IPV6_TNA NeighborStatus_AddrType = 17
	//
	NeighborStatus_NSAP_TNA NeighborStatus_AddrType = 18
	//
	NeighborStatus_VPN_IPV4 NeighborStatus_AddrType = 19
	//
	NeighborStatus_VPN_IPV6 NeighborStatus_AddrType = 20
	//
	NeighborStatus_L2VPN NeighborStatus_AddrType = 25
)

var NeighborStatus_AddrType_name = map[int32]string{
	0:  "OTHER",
	1:  "IPV4",
	2:  "IPV6",
	3:  "NSAP",
	4:  "HDLC",
	5:  "BBN1822",
	6:  "IEEE802",
	7:  "E163",
	8:  "E164",
	9:  "F69",
	10: "X121",
	11: "IPX",
	12: "APPLETALK",
	13: "DECNETIV",
	14: "BANYANVIN",
	15: "E164_NSAP",
	16: "IPV4_TNA",
	17: "IPV6_TNA",
	18: "NSAP_TNA",
	19: "VPN_IPV4",
	20: "VPN_IPV6",
	25: "L2VPN",
}
var NeighborStatus_AddrType_value = map[string]int32{
	"OTHER":     0,
	"IPV4":      1,
	"IPV6":      2,
	"NSAP":      3,
	"HDLC":      4,
	"BBN1822":   5,
	"IEEE802":   6,
	"E163":      7,
	"E164":      8,
	"F69":       9,
	"X121":      10,
	"IPX":       11,
	"APPLETALK": 12,
	"DECNETIV":  13,
	"BANYANVIN": 14,
	"E164_NSAP": 15,
	"IPV4_TNA":  16,
	"IPV6_TNA":  17,
	"NSAP_TNA":  18,
	"VPN_IPV4":  19,
	"VPN_IPV6":  20,
	"L2VPN":     25,
}

func (NeighborStatus_AddrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRouting, []int{7, 1}
}

//
type EmptyReq struct {
	// Empty of course
	Instance string `protobuf:"bytes,1,opt,name=Instance,proto3" json:"Instance,omitempty"`
}

func (m *EmptyReq) Reset()                    { *m = EmptyReq{} }
func (m *EmptyReq) String() string            { return proto.CompactTextString(m) }
func (*EmptyReq) ProtoMessage()               {}
func (*EmptyReq) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{0} }

func (m *EmptyReq) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

//
type Health struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec HealthSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status HealthStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Health) Reset()                    { *m = Health{} }
func (m *Health) String() string            { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()               {}
func (*Health) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{1} }

func (m *Health) GetSpec() HealthSpec {
	if m != nil {
		return m.Spec
	}
	return HealthSpec{}
}

func (m *Health) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HealthStatus{}
}

//
type HealthSpec struct {
}

func (m *HealthSpec) Reset()                    { *m = HealthSpec{} }
func (m *HealthSpec) String() string            { return proto.CompactTextString(m) }
func (*HealthSpec) ProtoMessage()               {}
func (*HealthSpec) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{2} }

//
type HealthStatus struct {
	//
	RouterID string `protobuf:"bytes,1,opt,name=RouterID,json=router-id,proto3" json:"router-id"`
	//
	InternalPeers HealthStatus_PeeringStatus `protobuf:"bytes,2,opt,name=InternalPeers,json=internal-peers" json:"internal-peers"`
	//
	ExternalPeers HealthStatus_PeeringStatus `protobuf:"bytes,3,opt,name=ExternalPeers,json=external-peers" json:"external-peers"`
	//
	UnexpectedPeers int32 `protobuf:"varint,4,opt,name=UnexpectedPeers,json=unexpected-peers,proto3" json:"unexpected-peers"`
}

func (m *HealthStatus) Reset()                    { *m = HealthStatus{} }
func (m *HealthStatus) String() string            { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()               {}
func (*HealthStatus) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{3} }

func (m *HealthStatus) GetRouterID() string {
	if m != nil {
		return m.RouterID
	}
	return ""
}

func (m *HealthStatus) GetInternalPeers() HealthStatus_PeeringStatus {
	if m != nil {
		return m.InternalPeers
	}
	return HealthStatus_PeeringStatus{}
}

func (m *HealthStatus) GetExternalPeers() HealthStatus_PeeringStatus {
	if m != nil {
		return m.ExternalPeers
	}
	return HealthStatus_PeeringStatus{}
}

func (m *HealthStatus) GetUnexpectedPeers() int32 {
	if m != nil {
		return m.UnexpectedPeers
	}
	return 0
}

type HealthStatus_PeeringStatus struct {
	Configured  int32    `protobuf:"varint,1,opt,name=Configured,proto3" json:"configured"`
	Established int32    `protobuf:"varint,2,opt,name=Established,proto3" json:"established"`
	DownPeers   []string `protobuf:"bytes,3,rep,name=DownPeers" json:"down-peers"`
}

func (m *HealthStatus_PeeringStatus) Reset()         { *m = HealthStatus_PeeringStatus{} }
func (m *HealthStatus_PeeringStatus) String() string { return proto.CompactTextString(m) }
func (*HealthStatus_PeeringStatus) ProtoMessage()    {}
func (*HealthStatus_PeeringStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorRouting, []int{3, 0}
}

func (m *HealthStatus_PeeringStatus) GetConfigured() int32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *HealthStatus_PeeringStatus) GetEstablished() int32 {
	if m != nil {
		return m.Established
	}
	return 0
}

func (m *HealthStatus_PeeringStatus) GetDownPeers() []string {
	if m != nil {
		return m.DownPeers
	}
	return nil
}

//
type Neighbor struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec network.BGPNeighbor `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status NeighborStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Neighbor) Reset()                    { *m = Neighbor{} }
func (m *Neighbor) String() string            { return proto.CompactTextString(m) }
func (*Neighbor) ProtoMessage()               {}
func (*Neighbor) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{4} }

func (m *Neighbor) GetSpec() network.BGPNeighbor {
	if m != nil {
		return m.Spec
	}
	return network.BGPNeighbor{}
}

func (m *Neighbor) GetStatus() NeighborStatus {
	if m != nil {
		return m.Status
	}
	return NeighborStatus{}
}

//
type NeighborFilter struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Instance string `protobuf:"bytes,3,opt,name=Instance,json=instance,proto3" json:"instance"`
	//
	Neighbor string `protobuf:"bytes,4,opt,name=Neighbor,json=neighbor,proto3" json:"neighbor"`
}

func (m *NeighborFilter) Reset()                    { *m = NeighborFilter{} }
func (m *NeighborFilter) String() string            { return proto.CompactTextString(m) }
func (*NeighborFilter) ProtoMessage()               {}
func (*NeighborFilter) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{5} }

func (m *NeighborFilter) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *NeighborFilter) GetNeighbor() string {
	if m != nil {
		return m.Neighbor
	}
	return ""
}

//
type NeighborList struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ListMeta `protobuf:"bytes,2,opt,name=L,json=list-meta,inline,embedded=L" json:"list-meta,inline"`
	//
	Items []*Neighbor `protobuf:"bytes,3,rep,name=Items,json=items," json:"items,"`
}

func (m *NeighborList) Reset()                    { *m = NeighborList{} }
func (m *NeighborList) String() string            { return proto.CompactTextString(m) }
func (*NeighborList) ProtoMessage()               {}
func (*NeighborList) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{6} }

func (m *NeighborList) GetItems() []*Neighbor {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type NeighborStatus struct {
	//
	Status string `protobuf:"bytes,1,opt,name=Status,json=status,proto3" json:"status"`
	//
	PrevStatus string `protobuf:"bytes,2,opt,name=PrevStatus,json=prev-status,proto3" json:"prev-status"`
	//
	LastErrorRcvd string `protobuf:"bytes,3,opt,name=LastErrorRcvd,json=lasterrorrcvd,proto3" json:"lasterrorrcvd"`
	//
	LastErrorSent string `protobuf:"bytes,4,opt,name=LastErrorSent,json=lasterrorsent,proto3" json:"lasterrorsent"`
	//
	LocalAddr string `protobuf:"bytes,5,opt,name=LocalAddr,json=localaddr,proto3" json:"localaddr"`
	//
	HoldTime uint32 `protobuf:"varint,6,opt,name=HoldTime,json=holdtime,proto3" json:"holdtime"`
	//
	KeepAlive uint32 `protobuf:"varint,7,opt,name=KeepAlive,json=keepalive,proto3" json:"keepalive"`
	//
	CapsSent string `protobuf:"bytes,8,opt,name=CapsSent,json=capssent,proto3" json:"capssent"`
	//
	CapsRcvd string `protobuf:"bytes,9,opt,name=CapsRcvd,json=capsrcvd,proto3" json:"capsrcvd"`
	//
	CapsNeg string `protobuf:"bytes,10,opt,name=CapsNeg,json=capsneg,proto3" json:"capsneg"`
	//
	SelLocalAddrType string `protobuf:"bytes,11,opt,name=SelLocalAddrType,json=sellocaladdrtype,proto3" json:"sellocaladdrtype"`
	//
	InNotifications uint32 `protobuf:"varint,12,opt,name=InNotifications,json=innotifications,proto3" json:"innotifications"`
	//
	OutNotifications uint32 `protobuf:"varint,13,opt,name=OutNotifications,json=outnotifications,proto3" json:"outnotifications"`
	//
	InUpdates uint32 `protobuf:"varint,14,opt,name=InUpdates,json=inupdates,proto3" json:"inupdates"`
	//
	OutUpdates uint32 `protobuf:"varint,15,opt,name=OutUpdates,json=outupdates,proto3" json:"outupdates"`
	//
	InKeepalives uint32 `protobuf:"varint,16,opt,name=InKeepalives,json=inkeepalives,proto3" json:"inkeepalives"`
	//
	OutKeepalives uint32 `protobuf:"varint,17,opt,name=OutKeepalives,json=outkeepalives,proto3" json:"outkeepalives"`
	//
	InRefreshes uint32 `protobuf:"varint,18,opt,name=InRefreshes,json=inrefreshes,proto3" json:"inrefreshes"`
	//
	OutRefreshes uint32 `protobuf:"varint,19,opt,name=OutRefreshes,json=outrefreshes,proto3" json:"outrefreshes"`
	//
	InTotalMessages uint32 `protobuf:"varint,20,opt,name=InTotalMessages,json=intotalmessages,proto3" json:"intotalmessages"`
	//
	OutTotalMessages uint32 `protobuf:"varint,21,opt,name=OutTotalMessages,json=outtotalmessages,proto3" json:"outtotalmessages"`
	//
	FsmEstTransitions uint32 `protobuf:"varint,22,opt,name=FsmEstTransitions,json=fsmesttransitions,proto3" json:"fsmesttransitions"`
	//
	ConnectRetryCount uint32 `protobuf:"varint,23,opt,name=ConnectRetryCount,json=connectretrycount,proto3" json:"connectretrycount"`
	//
	Peergr uint32 `protobuf:"varint,24,opt,name=Peergr,json=peergr,proto3" json:"peergr"`
	//
	StalePathTime uint32 `protobuf:"varint,25,opt,name=StalePathTime,json=stalepathtime,proto3" json:"stalepathtime"`
	//
	OrfEntryCount uint32 `protobuf:"varint,26,opt,name=OrfEntryCount,json=orfentrycount,proto3" json:"orfentrycount"`
	//
	RcvdMsgElpsTime uint32 `protobuf:"varint,27,opt,name=RcvdMsgElpsTime,json=rcvdmsgelpstime,proto3" json:"rcvdmsgelpstime"`
	//
	RouteRefrSent uint32 `protobuf:"varint,28,opt,name=RouteRefrSent,json=routerefrsent,proto3" json:"routerefrsent"`
	//
	RouteRefrRcvd uint32 `protobuf:"varint,29,opt,name=RouteRefrRcvd,json=routerefrrcvd,proto3" json:"routerefrrcvd"`
	//
	InPrfxes uint32 `protobuf:"varint,30,opt,name=InPrfxes,json=inprfxes,proto3" json:"inprfxes"`
	//
	OutPrfxes uint32 `protobuf:"varint,31,opt,name=OutPrfxes,json=outprfxes,proto3" json:"outprfxes"`
	//
	OutUpdateElpsTime uint32 `protobuf:"varint,34,opt,name=OutUpdateElpsTime,json=outupdateelpstime,proto3" json:"outupdateelpstime"`
	//
	OutPrfxesDenied uint32 `protobuf:"varint,35,opt,name=OutPrfxesDenied,json=outprfxesdenied,proto3" json:"outprfxesdenied"`
	//
	OutPrfxesImpWdr uint32 `protobuf:"varint,36,opt,name=OutPrfxesImpWdr,json=outprfxesimpwdr,proto3" json:"outprfxesimpwdr"`
	//
	OutPrfxesExpWdr uint32 `protobuf:"varint,37,opt,name=OutPrfxesExpWdr,json=outprfxesexpwdr,proto3" json:"outprfxesexpwdr"`
	//
	InPrfxesImpWdr uint32 `protobuf:"varint,38,opt,name=InPrfxesImpWdr,json=inprfxesimpwdr,proto3" json:"inprfxesimpwdr"`
	//
	InPrfxesExpWdr uint32 `protobuf:"varint,39,opt,name=InPrfxesExpWdr,json=inprfxesexpwdr,proto3" json:"inprfxesexpwdr"`
	//
	ReceivedHoldTime uint32 `protobuf:"varint,40,opt,name=ReceivedHoldTime,json=receivedholdtime,proto3" json:"receivedholdtime"`
	//
	FsmEstablishedTime string `protobuf:"bytes,41,opt,name=FsmEstablishedTime,json=fsmestablishedtime,proto3" json:"fsmestablishedtime"`
	//
	InUpdatesElpsTime uint32 `protobuf:"varint,42,opt,name=InUpdatesElpsTime,json=inupdateselpstime,proto3" json:"inupdateselpstime"`
	//
	InOpens uint32 `protobuf:"varint,43,opt,name=InOpens,json=inopens,proto3" json:"inopens"`
	//
	OutOpens uint32 `protobuf:"varint,44,opt,name=OutOpens,json=outopens,proto3" json:"outopens"`
	//
	PeerIndex uint32 `protobuf:"varint,45,opt,name=PeerIndex,json=peerindex,proto3" json:"peerindex"`
}

func (m *NeighborStatus) Reset()                    { *m = NeighborStatus{} }
func (m *NeighborStatus) String() string            { return proto.CompactTextString(m) }
func (*NeighborStatus) ProtoMessage()               {}
func (*NeighborStatus) Descriptor() ([]byte, []int) { return fileDescriptorRouting, []int{7} }

func (m *NeighborStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NeighborStatus) GetPrevStatus() string {
	if m != nil {
		return m.PrevStatus
	}
	return ""
}

func (m *NeighborStatus) GetLastErrorRcvd() string {
	if m != nil {
		return m.LastErrorRcvd
	}
	return ""
}

func (m *NeighborStatus) GetLastErrorSent() string {
	if m != nil {
		return m.LastErrorSent
	}
	return ""
}

func (m *NeighborStatus) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *NeighborStatus) GetHoldTime() uint32 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *NeighborStatus) GetKeepAlive() uint32 {
	if m != nil {
		return m.KeepAlive
	}
	return 0
}

func (m *NeighborStatus) GetCapsSent() string {
	if m != nil {
		return m.CapsSent
	}
	return ""
}

func (m *NeighborStatus) GetCapsRcvd() string {
	if m != nil {
		return m.CapsRcvd
	}
	return ""
}

func (m *NeighborStatus) GetCapsNeg() string {
	if m != nil {
		return m.CapsNeg
	}
	return ""
}

func (m *NeighborStatus) GetSelLocalAddrType() string {
	if m != nil {
		return m.SelLocalAddrType
	}
	return ""
}

func (m *NeighborStatus) GetInNotifications() uint32 {
	if m != nil {
		return m.InNotifications
	}
	return 0
}

func (m *NeighborStatus) GetOutNotifications() uint32 {
	if m != nil {
		return m.OutNotifications
	}
	return 0
}

func (m *NeighborStatus) GetInUpdates() uint32 {
	if m != nil {
		return m.InUpdates
	}
	return 0
}

func (m *NeighborStatus) GetOutUpdates() uint32 {
	if m != nil {
		return m.OutUpdates
	}
	return 0
}

func (m *NeighborStatus) GetInKeepalives() uint32 {
	if m != nil {
		return m.InKeepalives
	}
	return 0
}

func (m *NeighborStatus) GetOutKeepalives() uint32 {
	if m != nil {
		return m.OutKeepalives
	}
	return 0
}

func (m *NeighborStatus) GetInRefreshes() uint32 {
	if m != nil {
		return m.InRefreshes
	}
	return 0
}

func (m *NeighborStatus) GetOutRefreshes() uint32 {
	if m != nil {
		return m.OutRefreshes
	}
	return 0
}

func (m *NeighborStatus) GetInTotalMessages() uint32 {
	if m != nil {
		return m.InTotalMessages
	}
	return 0
}

func (m *NeighborStatus) GetOutTotalMessages() uint32 {
	if m != nil {
		return m.OutTotalMessages
	}
	return 0
}

func (m *NeighborStatus) GetFsmEstTransitions() uint32 {
	if m != nil {
		return m.FsmEstTransitions
	}
	return 0
}

func (m *NeighborStatus) GetConnectRetryCount() uint32 {
	if m != nil {
		return m.ConnectRetryCount
	}
	return 0
}

func (m *NeighborStatus) GetPeergr() uint32 {
	if m != nil {
		return m.Peergr
	}
	return 0
}

func (m *NeighborStatus) GetStalePathTime() uint32 {
	if m != nil {
		return m.StalePathTime
	}
	return 0
}

func (m *NeighborStatus) GetOrfEntryCount() uint32 {
	if m != nil {
		return m.OrfEntryCount
	}
	return 0
}

func (m *NeighborStatus) GetRcvdMsgElpsTime() uint32 {
	if m != nil {
		return m.RcvdMsgElpsTime
	}
	return 0
}

func (m *NeighborStatus) GetRouteRefrSent() uint32 {
	if m != nil {
		return m.RouteRefrSent
	}
	return 0
}

func (m *NeighborStatus) GetRouteRefrRcvd() uint32 {
	if m != nil {
		return m.RouteRefrRcvd
	}
	return 0
}

func (m *NeighborStatus) GetInPrfxes() uint32 {
	if m != nil {
		return m.InPrfxes
	}
	return 0
}

func (m *NeighborStatus) GetOutPrfxes() uint32 {
	if m != nil {
		return m.OutPrfxes
	}
	return 0
}

func (m *NeighborStatus) GetOutUpdateElpsTime() uint32 {
	if m != nil {
		return m.OutUpdateElpsTime
	}
	return 0
}

func (m *NeighborStatus) GetOutPrfxesDenied() uint32 {
	if m != nil {
		return m.OutPrfxesDenied
	}
	return 0
}

func (m *NeighborStatus) GetOutPrfxesImpWdr() uint32 {
	if m != nil {
		return m.OutPrfxesImpWdr
	}
	return 0
}

func (m *NeighborStatus) GetOutPrfxesExpWdr() uint32 {
	if m != nil {
		return m.OutPrfxesExpWdr
	}
	return 0
}

func (m *NeighborStatus) GetInPrfxesImpWdr() uint32 {
	if m != nil {
		return m.InPrfxesImpWdr
	}
	return 0
}

func (m *NeighborStatus) GetInPrfxesExpWdr() uint32 {
	if m != nil {
		return m.InPrfxesExpWdr
	}
	return 0
}

func (m *NeighborStatus) GetReceivedHoldTime() uint32 {
	if m != nil {
		return m.ReceivedHoldTime
	}
	return 0
}

func (m *NeighborStatus) GetFsmEstablishedTime() string {
	if m != nil {
		return m.FsmEstablishedTime
	}
	return ""
}

func (m *NeighborStatus) GetInUpdatesElpsTime() uint32 {
	if m != nil {
		return m.InUpdatesElpsTime
	}
	return 0
}

func (m *NeighborStatus) GetInOpens() uint32 {
	if m != nil {
		return m.InOpens
	}
	return 0
}

func (m *NeighborStatus) GetOutOpens() uint32 {
	if m != nil {
		return m.OutOpens
	}
	return 0
}

func (m *NeighborStatus) GetPeerIndex() uint32 {
	if m != nil {
		return m.PeerIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyReq)(nil), "routing.EmptyReq")
	proto.RegisterType((*Health)(nil), "routing.Health")
	proto.RegisterType((*HealthSpec)(nil), "routing.HealthSpec")
	proto.RegisterType((*HealthStatus)(nil), "routing.HealthStatus")
	proto.RegisterType((*HealthStatus_PeeringStatus)(nil), "routing.HealthStatus.PeeringStatus")
	proto.RegisterType((*Neighbor)(nil), "routing.Neighbor")
	proto.RegisterType((*NeighborFilter)(nil), "routing.NeighborFilter")
	proto.RegisterType((*NeighborList)(nil), "routing.NeighborList")
	proto.RegisterType((*NeighborStatus)(nil), "routing.NeighborStatus")
	proto.RegisterEnum("routing.NeighborStatus_State", NeighborStatus_State_name, NeighborStatus_State_value)
	proto.RegisterEnum("routing.NeighborStatus_AddrType", NeighborStatus_AddrType_name, NeighborStatus_AddrType_value)
}
func (m *EmptyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Instance) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	return i, nil
}

func (m *Health) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Health) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *HealthSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouterID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.RouterID)))
		i += copy(dAtA[i:], m.RouterID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.InternalPeers.Size()))
	n5, err := m.InternalPeers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.ExternalPeers.Size()))
	n6, err := m.ExternalPeers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.UnexpectedPeers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.UnexpectedPeers))
	}
	return i, nil
}

func (m *HealthStatus_PeeringStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthStatus_PeeringStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Configured != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.Configured))
	}
	if m.Established != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.Established))
	}
	if len(m.DownPeers) > 0 {
		for _, s := range m.DownPeers {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Neighbor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Neighbor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *NeighborFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeighborFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.ObjectMeta.Size()))
	n12, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.Instance) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	if len(m.Neighbor) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Neighbor)))
		i += copy(dAtA[i:], m.Neighbor)
	}
	return i, nil
}

func (m *NeighborList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeighborList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.TypeMeta.Size()))
	n13, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouting(dAtA, i, uint64(m.ListMeta.Size()))
	n14, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRouting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NeighborStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeighborStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.PrevStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.PrevStatus)))
		i += copy(dAtA[i:], m.PrevStatus)
	}
	if len(m.LastErrorRcvd) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.LastErrorRcvd)))
		i += copy(dAtA[i:], m.LastErrorRcvd)
	}
	if len(m.LastErrorSent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.LastErrorSent)))
		i += copy(dAtA[i:], m.LastErrorSent)
	}
	if len(m.LocalAddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.LocalAddr)))
		i += copy(dAtA[i:], m.LocalAddr)
	}
	if m.HoldTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.HoldTime))
	}
	if m.KeepAlive != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.KeepAlive))
	}
	if len(m.CapsSent) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.CapsSent)))
		i += copy(dAtA[i:], m.CapsSent)
	}
	if len(m.CapsRcvd) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.CapsRcvd)))
		i += copy(dAtA[i:], m.CapsRcvd)
	}
	if len(m.CapsNeg) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.CapsNeg)))
		i += copy(dAtA[i:], m.CapsNeg)
	}
	if len(m.SelLocalAddrType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.SelLocalAddrType)))
		i += copy(dAtA[i:], m.SelLocalAddrType)
	}
	if m.InNotifications != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InNotifications))
	}
	if m.OutNotifications != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutNotifications))
	}
	if m.InUpdates != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InUpdates))
	}
	if m.OutUpdates != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutUpdates))
	}
	if m.InKeepalives != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InKeepalives))
	}
	if m.OutKeepalives != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutKeepalives))
	}
	if m.InRefreshes != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InRefreshes))
	}
	if m.OutRefreshes != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutRefreshes))
	}
	if m.InTotalMessages != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InTotalMessages))
	}
	if m.OutTotalMessages != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutTotalMessages))
	}
	if m.FsmEstTransitions != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.FsmEstTransitions))
	}
	if m.ConnectRetryCount != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.ConnectRetryCount))
	}
	if m.Peergr != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.Peergr))
	}
	if m.StalePathTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.StalePathTime))
	}
	if m.OrfEntryCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OrfEntryCount))
	}
	if m.RcvdMsgElpsTime != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.RcvdMsgElpsTime))
	}
	if m.RouteRefrSent != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.RouteRefrSent))
	}
	if m.RouteRefrRcvd != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.RouteRefrRcvd))
	}
	if m.InPrfxes != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InPrfxes))
	}
	if m.OutPrfxes != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutPrfxes))
	}
	if m.OutUpdateElpsTime != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutUpdateElpsTime))
	}
	if m.OutPrfxesDenied != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutPrfxesDenied))
	}
	if m.OutPrfxesImpWdr != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutPrfxesImpWdr))
	}
	if m.OutPrfxesExpWdr != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutPrfxesExpWdr))
	}
	if m.InPrfxesImpWdr != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InPrfxesImpWdr))
	}
	if m.InPrfxesExpWdr != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InPrfxesExpWdr))
	}
	if m.ReceivedHoldTime != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.ReceivedHoldTime))
	}
	if len(m.FsmEstablishedTime) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(len(m.FsmEstablishedTime)))
		i += copy(dAtA[i:], m.FsmEstablishedTime)
	}
	if m.InUpdatesElpsTime != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InUpdatesElpsTime))
	}
	if m.InOpens != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.InOpens))
	}
	if m.OutOpens != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.OutOpens))
	}
	if m.PeerIndex != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRouting(dAtA, i, uint64(m.PeerIndex))
	}
	return i, nil
}

func encodeVarintRouting(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}

func (m *Health) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRouting(uint64(l))
	return n
}

func (m *HealthSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HealthStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.RouterID)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = m.InternalPeers.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.ExternalPeers.Size()
	n += 1 + l + sovRouting(uint64(l))
	if m.UnexpectedPeers != 0 {
		n += 1 + sovRouting(uint64(m.UnexpectedPeers))
	}
	return n
}

func (m *HealthStatus_PeeringStatus) Size() (n int) {
	var l int
	_ = l
	if m.Configured != 0 {
		n += 1 + sovRouting(uint64(m.Configured))
	}
	if m.Established != 0 {
		n += 1 + sovRouting(uint64(m.Established))
	}
	if len(m.DownPeers) > 0 {
		for _, s := range m.DownPeers {
			l = len(s)
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *Neighbor) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRouting(uint64(l))
	return n
}

func (m *NeighborFilter) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.Neighbor)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}

func (m *NeighborList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovRouting(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *NeighborStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.PrevStatus)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.LastErrorRcvd)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.LastErrorSent)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.LocalAddr)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.HoldTime != 0 {
		n += 1 + sovRouting(uint64(m.HoldTime))
	}
	if m.KeepAlive != 0 {
		n += 1 + sovRouting(uint64(m.KeepAlive))
	}
	l = len(m.CapsSent)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.CapsRcvd)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.CapsNeg)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.SelLocalAddrType)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.InNotifications != 0 {
		n += 1 + sovRouting(uint64(m.InNotifications))
	}
	if m.OutNotifications != 0 {
		n += 1 + sovRouting(uint64(m.OutNotifications))
	}
	if m.InUpdates != 0 {
		n += 1 + sovRouting(uint64(m.InUpdates))
	}
	if m.OutUpdates != 0 {
		n += 1 + sovRouting(uint64(m.OutUpdates))
	}
	if m.InKeepalives != 0 {
		n += 2 + sovRouting(uint64(m.InKeepalives))
	}
	if m.OutKeepalives != 0 {
		n += 2 + sovRouting(uint64(m.OutKeepalives))
	}
	if m.InRefreshes != 0 {
		n += 2 + sovRouting(uint64(m.InRefreshes))
	}
	if m.OutRefreshes != 0 {
		n += 2 + sovRouting(uint64(m.OutRefreshes))
	}
	if m.InTotalMessages != 0 {
		n += 2 + sovRouting(uint64(m.InTotalMessages))
	}
	if m.OutTotalMessages != 0 {
		n += 2 + sovRouting(uint64(m.OutTotalMessages))
	}
	if m.FsmEstTransitions != 0 {
		n += 2 + sovRouting(uint64(m.FsmEstTransitions))
	}
	if m.ConnectRetryCount != 0 {
		n += 2 + sovRouting(uint64(m.ConnectRetryCount))
	}
	if m.Peergr != 0 {
		n += 2 + sovRouting(uint64(m.Peergr))
	}
	if m.StalePathTime != 0 {
		n += 2 + sovRouting(uint64(m.StalePathTime))
	}
	if m.OrfEntryCount != 0 {
		n += 2 + sovRouting(uint64(m.OrfEntryCount))
	}
	if m.RcvdMsgElpsTime != 0 {
		n += 2 + sovRouting(uint64(m.RcvdMsgElpsTime))
	}
	if m.RouteRefrSent != 0 {
		n += 2 + sovRouting(uint64(m.RouteRefrSent))
	}
	if m.RouteRefrRcvd != 0 {
		n += 2 + sovRouting(uint64(m.RouteRefrRcvd))
	}
	if m.InPrfxes != 0 {
		n += 2 + sovRouting(uint64(m.InPrfxes))
	}
	if m.OutPrfxes != 0 {
		n += 2 + sovRouting(uint64(m.OutPrfxes))
	}
	if m.OutUpdateElpsTime != 0 {
		n += 2 + sovRouting(uint64(m.OutUpdateElpsTime))
	}
	if m.OutPrfxesDenied != 0 {
		n += 2 + sovRouting(uint64(m.OutPrfxesDenied))
	}
	if m.OutPrfxesImpWdr != 0 {
		n += 2 + sovRouting(uint64(m.OutPrfxesImpWdr))
	}
	if m.OutPrfxesExpWdr != 0 {
		n += 2 + sovRouting(uint64(m.OutPrfxesExpWdr))
	}
	if m.InPrfxesImpWdr != 0 {
		n += 2 + sovRouting(uint64(m.InPrfxesImpWdr))
	}
	if m.InPrfxesExpWdr != 0 {
		n += 2 + sovRouting(uint64(m.InPrfxesExpWdr))
	}
	if m.ReceivedHoldTime != 0 {
		n += 2 + sovRouting(uint64(m.ReceivedHoldTime))
	}
	l = len(m.FsmEstablishedTime)
	if l > 0 {
		n += 2 + l + sovRouting(uint64(l))
	}
	if m.InUpdatesElpsTime != 0 {
		n += 2 + sovRouting(uint64(m.InUpdatesElpsTime))
	}
	if m.InOpens != 0 {
		n += 2 + sovRouting(uint64(m.InOpens))
	}
	if m.OutOpens != 0 {
		n += 2 + sovRouting(uint64(m.OutOpens))
	}
	if m.PeerIndex != 0 {
		n += 2 + sovRouting(uint64(m.PeerIndex))
	}
	return n
}

func sovRouting(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRouting(x uint64) (n int) {
	return sovRouting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Health) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Health: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Health: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InternalPeers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalPeers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnexpectedPeers", wireType)
			}
			m.UnexpectedPeers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnexpectedPeers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthStatus_PeeringStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeeringStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeeringStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configured", wireType)
			}
			m.Configured = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Configured |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Established", wireType)
			}
			m.Established = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Established |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownPeers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownPeers = append(m.DownPeers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Neighbor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Neighbor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Neighbor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeighborFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeighborFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeighborFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeighborList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeighborList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeighborList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Neighbor{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeighborStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeighborStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeighborStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrorRcvd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastErrorRcvd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrorSent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastErrorSent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldTime", wireType)
			}
			m.HoldTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			m.KeepAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepAlive |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapsSent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapsSent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapsRcvd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapsRcvd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapsNeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapsNeg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelLocalAddrType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelLocalAddrType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InNotifications", wireType)
			}
			m.InNotifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InNotifications |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutNotifications", wireType)
			}
			m.OutNotifications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutNotifications |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUpdates", wireType)
			}
			m.InUpdates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUpdates |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUpdates", wireType)
			}
			m.OutUpdates = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutUpdates |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InKeepalives", wireType)
			}
			m.InKeepalives = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InKeepalives |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutKeepalives", wireType)
			}
			m.OutKeepalives = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutKeepalives |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRefreshes", wireType)
			}
			m.InRefreshes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InRefreshes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRefreshes", wireType)
			}
			m.OutRefreshes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutRefreshes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTotalMessages", wireType)
			}
			m.InTotalMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InTotalMessages |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTotalMessages", wireType)
			}
			m.OutTotalMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTotalMessages |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsmEstTransitions", wireType)
			}
			m.FsmEstTransitions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FsmEstTransitions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectRetryCount", wireType)
			}
			m.ConnectRetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectRetryCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peergr", wireType)
			}
			m.Peergr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Peergr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StalePathTime", wireType)
			}
			m.StalePathTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StalePathTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrfEntryCount", wireType)
			}
			m.OrfEntryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrfEntryCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvdMsgElpsTime", wireType)
			}
			m.RcvdMsgElpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvdMsgElpsTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRefrSent", wireType)
			}
			m.RouteRefrSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteRefrSent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRefrRcvd", wireType)
			}
			m.RouteRefrRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteRefrRcvd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPrfxes", wireType)
			}
			m.InPrfxes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InPrfxes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPrfxes", wireType)
			}
			m.OutPrfxes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutPrfxes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUpdateElpsTime", wireType)
			}
			m.OutUpdateElpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutUpdateElpsTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPrfxesDenied", wireType)
			}
			m.OutPrfxesDenied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutPrfxesDenied |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPrfxesImpWdr", wireType)
			}
			m.OutPrfxesImpWdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutPrfxesImpWdr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPrfxesExpWdr", wireType)
			}
			m.OutPrfxesExpWdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutPrfxesExpWdr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPrfxesImpWdr", wireType)
			}
			m.InPrfxesImpWdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InPrfxesImpWdr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPrfxesExpWdr", wireType)
			}
			m.InPrfxesExpWdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InPrfxesExpWdr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedHoldTime", wireType)
			}
			m.ReceivedHoldTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedHoldTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsmEstablishedTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsmEstablishedTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUpdatesElpsTime", wireType)
			}
			m.InUpdatesElpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUpdatesElpsTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOpens", wireType)
			}
			m.InOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InOpens |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOpens", wireType)
			}
			m.OutOpens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutOpens |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIndex", wireType)
			}
			m.PeerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRouting
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRouting
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRouting(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRouting = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouting   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("routing.proto", fileDescriptorRouting) }

var fileDescriptorRouting = []byte{
	// 1853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0x37, 0xf5, 0x97, 0x1c, 0x92, 0xd2, 0x6a, 0x24, 0xdb, 0x2b, 0x35, 0x11, 0x0d, 0xa6, 0x4e,
	0xe5, 0xd8, 0xa2, 0x22, 0xc5, 0x55, 0x5d, 0x03, 0x41, 0x2c, 0x4a, 0x74, 0x45, 0x58, 0x26, 0xd9,
	0x91, 0xa2, 0xa6, 0x40, 0x01, 0x63, 0xc5, 0x7d, 0xa2, 0xa6, 0x59, 0xce, 0x6e, 0x77, 0x66, 0x25,
	0xf9, 0x03, 0xd8, 0xc7, 0x5e, 0xfa, 0x05, 0x7a, 0xf6, 0xa1, 0x1f, 0xa3, 0xc8, 0x31, 0xf0, 0x07,
	0x20, 0x0a, 0x1f, 0x8a, 0x82, 0xe7, 0x7e, 0x80, 0xe2, 0xcd, 0xfe, 0xe3, 0x92, 0x0a, 0x1a, 0xe4,
	0x92, 0x8b, 0xf8, 0xfe, 0xfd, 0xde, 0x9b, 0x79, 0xef, 0xcd, 0x9b, 0x59, 0x91, 0xb2, 0xef, 0x06,
	0x8a, 0x8b, 0x5e, 0xcd, 0xf3, 0x5d, 0xe5, 0xd2, 0xf9, 0x88, 0x5d, 0x6b, 0xf4, 0xb8, 0xba, 0x08,
	0xce, 0x6a, 0x5d, 0xb7, 0xbf, 0xe5, 0x81, 0x90, 0x96, 0xb0, 0xdd, 0x2d, 0x79, 0xb5, 0x75, 0x09,
	0x82, 0x77, 0x61, 0x2b, 0x50, 0xdc, 0x91, 0x5b, 0x96, 0xc7, 0x7b, 0x20, 0xb6, 0x2c, 0x21, 0x5c,
	0x65, 0x29, 0xee, 0x0a, 0xb9, 0xc5, 0x45, 0xd7, 0x09, 0x6c, 0x90, 0xa1, 0xbf, 0xb5, 0xfb, 0x3f,
	0xe0, 0xc6, 0xf2, 0xf8, 0x56, 0x1f, 0x94, 0x15, 0x99, 0x15, 0x31, 0x2c, 0x84, 0x4c, 0xf5, 0x53,
	0x92, 0x6f, 0xf4, 0x3d, 0xf5, 0x9a, 0xc1, 0x5f, 0xe8, 0x1a, 0xc9, 0x37, 0x85, 0x54, 0x96, 0xe8,
	0x82, 0x99, 0xbb, 0x97, 0xdb, 0x28, 0xb0, 0x84, 0xaf, 0xbe, 0x9d, 0x22, 0x73, 0x87, 0x60, 0x39,
	0xea, 0x82, 0xee, 0x92, 0xdc, 0x89, 0xd6, 0x17, 0x77, 0xca, 0x35, 0xcb, 0xe3, 0xb5, 0x93, 0xd7,
	0x1e, 0xbc, 0x04, 0x65, 0xd5, 0x97, 0xbf, 0x1b, 0x54, 0x6e, 0x7d, 0x3f, 0xa8, 0xe4, 0x86, 0x83,
	0xca, 0xfc, 0x23, 0x2e, 0x1c, 0x2e, 0x80, 0xc5, 0x04, 0x7d, 0x46, 0x72, 0x6d, 0x73, 0x4a, 0xe3,
	0x16, 0x35, 0xae, 0x7d, 0xf6, 0x67, 0xe8, 0x2a, 0x8d, 0xbc, 0x3b, 0x82, 0x2c, 0xe2, 0x5a, 0x63,
	0xf4, 0x28, 0x43, 0x7f, 0x4d, 0x66, 0x8e, 0x3d, 0xe8, 0x9a, 0xd3, 0xda, 0xc9, 0x72, 0x2d, 0x4e,
	0x67, 0xb8, 0x30, 0x54, 0xd5, 0x4b, 0xe8, 0x68, 0x38, 0xa8, 0xcc, 0x48, 0x0f, 0xba, 0x4c, 0xff,
	0xa5, 0x5f, 0x92, 0xb9, 0x63, 0x65, 0xa9, 0x40, 0x9a, 0x33, 0x1a, 0x78, 0x7b, 0x1c, 0xa8, 0x95,
	0xf5, 0x85, 0x08, 0x3a, 0x27, 0x35, 0xcf, 0xa2, 0xdf, 0xa7, 0xa5, 0xf7, 0x6f, 0x56, 0xf3, 0x74,
	0xee, 0x42, 0xdb, 0x56, 0x4b, 0x84, 0xa4, 0xe1, 0xaa, 0xff, 0x9e, 0x26, 0xa5, 0x51, 0x27, 0xf4,
	0x33, 0x92, 0x67, 0x98, 0x5e, 0xbf, 0x79, 0x10, 0xe6, 0xb0, 0x5e, 0x1e, 0x0e, 0x2a, 0x05, 0x9d,
	0x72, 0x7f, 0x93, 0xdb, 0x2c, 0x25, 0xe9, 0x19, 0x29, 0x37, 0x85, 0x02, 0x5f, 0x58, 0x4e, 0x07,
	0xc0, 0x97, 0x51, 0x72, 0x3e, 0xb9, 0x71, 0x79, 0x35, 0x34, 0xe1, 0xa2, 0x17, 0x2d, 0xf6, 0x4e,
	0xb4, 0xd8, 0x05, 0x1e, 0x79, 0xd8, 0xf4, 0xd0, 0x05, 0x1b, 0xe3, 0x31, 0x46, 0xe3, 0x7a, 0x34,
	0xc6, 0xf4, 0x4f, 0x88, 0x01, 0xd7, 0xd9, 0x18, 0x59, 0x9e, 0x7e, 0x45, 0x16, 0xbf, 0x16, 0x70,
	0xed, 0x41, 0x57, 0x81, 0x1d, 0x46, 0xc1, 0x44, 0xcf, 0xd6, 0x57, 0x86, 0x83, 0x8a, 0x11, 0x24,
	0xaa, 0x08, 0x3e, 0x21, 0x59, 0xfb, 0x7b, 0x8e, 0x94, 0x33, 0xa1, 0x69, 0x8d, 0x90, 0x7d, 0x57,
	0x9c, 0xf3, 0x5e, 0xe0, 0x83, 0xad, 0x13, 0x39, 0x5b, 0x5f, 0x18, 0x0e, 0x2a, 0xa4, 0x9b, 0x48,
	0xd9, 0x88, 0x05, 0xdd, 0x26, 0xc5, 0x86, 0x54, 0xd6, 0x99, 0xc3, 0xe5, 0x05, 0xd8, 0x3a, 0x91,
	0xb3, 0xf5, 0x45, 0x6c, 0x26, 0x48, 0xc5, 0x6c, 0xd4, 0x86, 0x3e, 0x22, 0x85, 0x03, 0xf7, 0x4a,
	0xc4, 0x59, 0x99, 0xde, 0x28, 0x84, 0x11, 0x6c, 0xf7, 0x4a, 0x44, 0x2b, 0x4d, 0x0d, 0xaa, 0x7f,
	0x9d, 0x22, 0xf9, 0x16, 0xf0, 0xde, 0xc5, 0x99, 0xeb, 0xff, 0x8c, 0x27, 0x60, 0x37, 0x73, 0x02,
	0x56, 0x6a, 0x02, 0xd4, 0x95, 0xeb, 0x7f, 0x5b, 0xab, 0xff, 0xae, 0x13, 0xaf, 0xee, 0xc6, 0x23,
	0xf0, 0xd5, 0xd8, 0x11, 0xb8, 0x9b, 0xd4, 0x3f, 0x86, 0xfd, 0x9f, 0x43, 0xb0, 0xf8, 0xfe, 0xcd,
	0x6a, 0x91, 0x16, 0x44, 0x64, 0x2d, 0xab, 0xff, 0xcd, 0x91, 0x85, 0x18, 0xfb, 0x9c, 0x3b, 0x0a,
	0x7e, 0xce, 0xb4, 0x6c, 0x8c, 0x4c, 0xae, 0x69, 0x7d, 0xea, 0x4a, 0xc3, 0x41, 0x25, 0xcf, 0x23,
	0x19, 0x4b, 0x28, 0xb4, 0x8c, 0x57, 0xad, 0x53, 0x11, 0x59, 0xc6, 0xfb, 0x62, 0x09, 0xf5, 0x74,
	0xe5, 0xfd, 0x9b, 0x55, 0x83, 0x2e, 0xc4, 0xfc, 0xb9, 0xde, 0x63, 0xf5, 0x9f, 0x39, 0x52, 0x8a,
	0x1d, 0x1c, 0x71, 0xa9, 0x7e, 0xf2, 0xa6, 0x0f, 0x49, 0xee, 0x28, 0xda, 0x74, 0x88, 0x43, 0x6f,
	0x1a, 0xf7, 0xd1, 0x08, 0xce, 0x70, 0xb8, 0x54, 0x9b, 0xa3, 0xfb, 0x9e, 0x90, 0xd0, 0xc7, 0x64,
	0xb6, 0xa9, 0xa0, 0x1f, 0x36, 0x71, 0x71, 0x67, 0x69, 0xa2, 0xb4, 0x75, 0x82, 0x05, 0xe5, 0x68,
	0xf3, 0x88, 0x45, 0xbf, 0xd5, 0x7f, 0xdc, 0x49, 0xeb, 0x17, 0x1d, 0xba, 0xfd, 0xa4, 0x49, 0xc2,
	0xc9, 0xf5, 0xf0, 0xdd, 0xdb, 0xd5, 0x8f, 0x8f, 0x95, 0xdf, 0x10, 0x41, 0x7f, 0x23, 0x6b, 0x5b,
	0xc3, 0x1f, 0x78, 0x30, 0xd9, 0x28, 0xf4, 0xf7, 0x84, 0x74, 0x7c, 0xb8, 0x8c, 0x1c, 0x4d, 0x69,
	0x47, 0x9f, 0xff, 0x18, 0x47, 0x45, 0xcf, 0x87, 0xcb, 0xcd, 0xc8, 0xdb, 0x28, 0x43, 0x7f, 0x43,
	0xca, 0x47, 0x96, 0x54, 0x0d, 0xdf, 0x77, 0x7d, 0xd6, 0xbd, 0xb4, 0xa3, 0x12, 0x2f, 0x0d, 0x07,
	0x95, 0xb2, 0x63, 0x49, 0x05, 0xa8, 0xf0, 0xbb, 0x97, 0x36, 0xcb, 0xb2, 0x19, 0xe0, 0x31, 0x08,
	0x15, 0x55, 0x3c, 0x0b, 0x94, 0x20, 0x14, 0xcb, 0xb2, 0xf4, 0x19, 0x29, 0x1c, 0xb9, 0x5d, 0xcb,
	0xd9, 0xb3, 0x6d, 0xdf, 0x9c, 0xd5, 0xa0, 0xea, 0xbb, 0xb7, 0xab, 0x4b, 0xfa, 0xaa, 0x6c, 0xfb,
	0x1b, 0xcd, 0x0e, 0x6a, 0x36, 0x1e, 0xe0, 0xba, 0x0b, 0x0e, 0x5a, 0x5a, 0xb6, 0xed, 0xb3, 0x94,
	0xc4, 0x3e, 0x3b, 0x74, 0x1d, 0xfb, 0x84, 0xf7, 0xc1, 0x9c, 0xbb, 0x97, 0xdb, 0x28, 0x87, 0x7d,
	0x76, 0xe1, 0x3a, 0xb6, 0xe2, 0x7d, 0x60, 0x09, 0x45, 0x1f, 0x92, 0xc2, 0x0b, 0x00, 0x6f, 0xcf,
	0xe1, 0x97, 0x60, 0xce, 0x6b, 0x53, 0x7d, 0x65, 0x7c, 0x0b, 0xe0, 0x59, 0x28, 0x64, 0x29, 0x89,
	0x6e, 0xf7, 0x2d, 0x4f, 0xea, 0xcd, 0xe4, 0xd3, 0xf6, 0xed, 0x5a, 0x9e, 0xd4, 0xfb, 0x48, 0xa8,
	0xd8, 0x52, 0xe7, 0xab, 0x90, 0xb5, 0xd4, 0xa9, 0x4a, 0x28, 0x7a, 0x9f, 0xcc, 0xa3, 0x65, 0x0b,
	0x7a, 0x26, 0xd1, 0x86, 0x45, 0x6c, 0x58, 0x54, 0x0b, 0xe8, 0xb1, 0x98, 0xa0, 0x36, 0x31, 0x8e,
	0xc1, 0x49, 0xd2, 0x82, 0x6d, 0x6e, 0x16, 0xb5, 0xfd, 0x93, 0x77, 0x6f, 0x57, 0xef, 0xfd, 0x40,
	0x79, 0x63, 0x53, 0xcc, 0x94, 0x21, 0xc1, 0x49, 0x32, 0xa4, 0x5e, 0x7b, 0xc0, 0x26, 0x24, 0xf4,
	0x4b, 0xb2, 0xd8, 0x14, 0x2d, 0x57, 0xf1, 0x73, 0xde, 0x0d, 0x5f, 0x39, 0x66, 0x49, 0xe7, 0x64,
	0x79, 0x38, 0xa8, 0x2c, 0x72, 0x7c, 0xfc, 0xa4, 0x2a, 0x36, 0x2e, 0xa0, 0xcf, 0x88, 0xd1, 0x0e,
	0x54, 0x16, 0x5f, 0xd6, 0x78, 0x7d, 0x17, 0xb9, 0x81, 0xca, 0x3a, 0x98, 0x90, 0x60, 0x39, 0x9a,
	0xe2, 0x6b, 0xcf, 0xb6, 0x14, 0x48, 0x73, 0x21, 0x2d, 0x07, 0x17, 0x41, 0x28, 0x64, 0x29, 0x89,
	0xd7, 0x54, 0x3b, 0x50, 0xb1, 0xf5, 0xa2, 0xb6, 0xd6, 0x97, 0x88, 0x1b, 0xa8, 0xd8, 0x7c, 0x84,
	0xa6, 0x8f, 0x49, 0xa9, 0x29, 0x5e, 0xc4, 0xd5, 0x94, 0xa6, 0xa1, 0x11, 0xc6, 0x70, 0x50, 0x29,
	0x71, 0x91, 0x54, 0x59, 0xb2, 0x0c, 0x87, 0x6d, 0xdc, 0x0e, 0xd4, 0x08, 0x6c, 0x49, 0xc3, 0x74,
	0x1b, 0xbb, 0x81, 0x1a, 0xc1, 0x65, 0x59, 0xbc, 0x15, 0x9b, 0x82, 0xc1, 0xb9, 0x0f, 0xf2, 0x02,
	0xa4, 0x49, 0x35, 0x4c, 0xdf, 0x8a, 0x5c, 0xf8, 0xb1, 0x98, 0x8d, 0x32, 0xb8, 0xc2, 0x76, 0xa0,
	0x52, 0xcc, 0x72, 0xba, 0x42, 0x37, 0x50, 0x29, 0x28, 0xc3, 0x85, 0x55, 0x3b, 0x71, 0x95, 0xe5,
	0xbc, 0x04, 0x29, 0xad, 0x1e, 0x48, 0x73, 0x65, 0xb4, 0x6a, 0x0a, 0x55, 0xfd, 0x48, 0xc5, 0xc6,
	0x05, 0x51, 0xd5, 0xb2, 0xf8, 0xdb, 0x99, 0xaa, 0x65, 0x1d, 0x4c, 0x48, 0xe8, 0x3e, 0x59, 0x7a,
	0x2e, 0xfb, 0x0d, 0xa9, 0x4e, 0x7c, 0x4b, 0x48, 0x1e, 0x16, 0xfe, 0x8e, 0x76, 0x71, 0x7b, 0x38,
	0xa8, 0x2c, 0x9d, 0xcb, 0x3e, 0x48, 0xa5, 0x52, 0x25, 0x9b, 0x14, 0xa1, 0x93, 0x7d, 0x57, 0x08,
	0xe8, 0x2a, 0x06, 0xca, 0x7f, 0xbd, 0xef, 0x06, 0x42, 0x99, 0x77, 0x53, 0x27, 0xdd, 0x50, 0xe9,
	0xa3, 0xb2, 0x8b, 0x4a, 0x36, 0x29, 0xa2, 0x55, 0x32, 0x87, 0x2f, 0x86, 0x9e, 0x6f, 0x9a, 0x1a,
	0xa9, 0x67, 0xaf, 0xa7, 0x25, 0x2c, 0xfa, 0xc5, 0x82, 0x1e, 0x2b, 0xcb, 0x81, 0x8e, 0xa5, 0x2e,
	0xf4, 0x84, 0x58, 0x4d, 0x0b, 0x2a, 0x51, 0xe1, 0x59, 0xea, 0x42, 0x8f, 0x89, 0x2c, 0xab, 0x3b,
	0xc1, 0x3f, 0x6f, 0x88, 0x64, 0x75, 0x6b, 0x23, 0x9d, 0xe0, 0x9f, 0x83, 0x48, 0x56, 0x96, 0x65,
	0xb1, 0x40, 0x38, 0x09, 0x5e, 0xca, 0x5e, 0xc3, 0xf1, 0xa4, 0x8e, 0xf9, 0x8b, 0xb4, 0x40, 0x38,
	0x06, 0xfa, 0xb2, 0x07, 0x8e, 0x27, 0x75, 0xd4, 0x71, 0x01, 0xc6, 0xd5, 0xaf, 0x5a, 0xec, 0x0b,
	0x3d, 0x7b, 0x3e, 0x4a, 0xe3, 0x86, 0xef, 0x59, 0x38, 0x8f, 0x06, 0x69, 0x86, 0xcd, 0x00, 0xf5,
	0x28, 0xfa, 0xf8, 0x06, 0x60, 0x38, 0xba, 0x33, 0x6c, 0x78, 0xa3, 0x77, 0xfc, 0xf3, 0x6b, 0x90,
	0xe6, 0x7a, 0x3a, 0x3f, 0xb9, 0xf0, 0xb4, 0x8c, 0x25, 0x14, 0x1e, 0xd8, 0x76, 0xa0, 0x22, 0xd3,
	0x4a, 0x7a, 0x60, 0xdd, 0x40, 0x45, 0xb6, 0x29, 0x89, 0x25, 0x4e, 0x0e, 0x6c, 0x92, 0x89, 0x6a,
	0x5a, 0xe2, 0xe4, 0xac, 0x26, 0xb9, 0x98, 0x14, 0x61, 0x32, 0x93, 0x88, 0x07, 0x20, 0x38, 0xd8,
	0xe6, 0x27, 0x69, 0x32, 0x93, 0x60, 0xb6, 0x56, 0xb1, 0x71, 0x41, 0x06, 0xde, 0xec, 0x7b, 0x7f,
	0xb0, 0x7d, 0xf3, 0x97, 0x37, 0xc0, 0x79, 0xdf, 0xbb, 0xb2, 0x7d, 0x36, 0x2e, 0xc8, 0xc0, 0x1b,
	0xd7, 0x1a, 0x7e, 0xff, 0x06, 0x38, 0x5c, 0x8f, 0xc1, 0x43, 0x01, 0x7d, 0x4a, 0x16, 0xe2, 0xc4,
	0x46, 0xc1, 0x3f, 0xd5, 0x68, 0x1a, 0x7e, 0x4c, 0x64, 0x62, 0x8f, 0xf1, 0xa3, 0xd8, 0x28, 0xf2,
	0xaf, 0x26, 0xb1, 0x51, 0xe0, 0x31, 0x1e, 0xcf, 0x38, 0x83, 0x2e, 0xf0, 0x4b, 0xb0, 0x93, 0x8b,
	0x71, 0x23, 0x3d, 0xe3, 0x7e, 0xa4, 0x4b, 0x2e, 0xc8, 0x09, 0x09, 0x7d, 0x4e, 0x68, 0x78, 0xc6,
	0xe3, 0x27, 0xbc, 0xf6, 0xf1, 0x40, 0x5f, 0x41, 0x77, 0x86, 0x83, 0x0a, 0x0d, 0x4f, 0x74, 0xac,
	0xd5, 0x5e, 0x6e, 0x90, 0x61, 0x0f, 0x24, 0x13, 0x3e, 0xe9, 0x81, 0xcf, 0xd2, 0x1e, 0x48, 0xc6,
	0x7b, 0xda, 0x03, 0x13, 0x22, 0xbc, 0x34, 0x9b, 0xa2, 0x8d, 0x5f, 0xd9, 0xe6, 0x43, 0x0d, 0xd5,
	0x97, 0x26, 0x17, 0x2e, 0x8a, 0x58, 0x4c, 0x60, 0x1b, 0xb7, 0x03, 0x15, 0xda, 0x3d, 0x4a, 0xdb,
	0xd8, 0x0d, 0x54, 0x68, 0x98, 0x50, 0xd8, 0xc6, 0x38, 0x37, 0x9a, 0xc2, 0x86, 0x6b, 0x73, 0x33,
	0x6d, 0x63, 0x4f, 0x7f, 0x17, 0xd9, 0x70, 0xcd, 0x52, 0xb2, 0xfa, 0x27, 0x32, 0xab, 0xdf, 0x4d,
	0x34, 0x4f, 0x66, 0x9a, 0xb6, 0x03, 0xc6, 0x2d, 0x5a, 0x24, 0xf3, 0xd1, 0xf0, 0x32, 0x72, 0x94,
	0x90, 0xb9, 0xbd, 0xae, 0xe2, 0x97, 0x60, 0x4c, 0xd1, 0x12, 0xc9, 0x63, 0x7c, 0x3c, 0xb6, 0xc6,
	0x34, 0x5d, 0x22, 0x65, 0xe4, 0xf4, 0xa7, 0x93, 0xdf, 0x07, 0xdb, 0x98, 0xa1, 0x8b, 0x99, 0x6f,
	0x27, 0x63, 0xb6, 0xfa, 0xb7, 0x29, 0x92, 0x8f, 0xef, 0x6d, 0x5a, 0x20, 0xb3, 0xed, 0x93, 0xc3,
	0x06, 0x33, 0x6e, 0xe9, 0x60, 0x9d, 0xd3, 0xc7, 0x46, 0x2e, 0xa2, 0x76, 0x8d, 0x29, 0xa4, 0x5a,
	0xc7, 0x7b, 0x1d, 0x63, 0x1a, 0xa9, 0xc3, 0x83, 0xa3, 0x7d, 0x63, 0x06, 0x97, 0x52, 0xaf, 0xb7,
	0xb6, 0x9f, 0xec, 0xec, 0x18, 0xb3, 0xc8, 0x34, 0x1b, 0x8d, 0xc6, 0x93, 0xcf, 0x77, 0x8c, 0x39,
	0xb4, 0x69, 0x6c, 0xef, 0x7e, 0x61, 0xcc, 0x47, 0xd4, 0x63, 0x23, 0x4f, 0xe7, 0xc9, 0xf4, 0xf3,
	0xdd, 0xdf, 0x1a, 0x05, 0x14, 0x7d, 0xb3, 0xbd, 0xb3, 0x6d, 0x10, 0x14, 0x35, 0x3b, 0xdf, 0x18,
	0x45, 0x5a, 0x26, 0x85, 0xbd, 0x4e, 0xe7, 0xa8, 0x71, 0xb2, 0x77, 0xf4, 0xc2, 0x28, 0xe1, 0x56,
	0x0e, 0x1a, 0xfb, 0xad, 0xc6, 0x49, 0xf3, 0xd4, 0x28, 0xa3, 0xb2, 0xbe, 0xd7, 0xfa, 0xe3, 0x5e,
	0xeb, 0xb4, 0xd9, 0x32, 0x16, 0x90, 0x45, 0x8f, 0xaf, 0xf4, 0x72, 0x16, 0xd1, 0x16, 0x17, 0xfb,
	0xea, 0xa4, 0xb5, 0x67, 0x18, 0x11, 0xb7, 0xab, 0xb9, 0x25, 0xe4, 0xd0, 0x4a, 0x73, 0x14, 0xb9,
	0xd3, 0x4e, 0xeb, 0x95, 0xde, 0xda, 0xf2, 0x08, 0xb7, 0x6b, 0xac, 0xe0, 0xee, 0x8f, 0x76, 0x4e,
	0x3b, 0x2d, 0x63, 0xb5, 0x6e, 0x7c, 0xf7, 0x61, 0x3d, 0xf7, 0xfd, 0x87, 0xf5, 0xdc, 0xbf, 0x3e,
	0xac, 0xe7, 0xfe, 0xf3, 0x61, 0xfd, 0x56, 0xe7, 0xd6, 0xd9, 0x9c, 0xfe, 0x27, 0xca, 0x17, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x62, 0xf4, 0xea, 0x40, 0xd9, 0x11, 0x00, 0x00,
}
