// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: routing.proto
*/
package routing

import (
	"context"
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// NeighborStatus_State_normal is a map of normalized values for the enum
var NeighborStatus_State_normal = map[string]string{
	"active":        "active",
	"connect":       "connect",
	"established":   "established",
	"idle":          "idle",
	"openconfirmed": "openconfirmed",
	"opensent":      "opensent",
}

var NeighborStatus_State_vname = map[int32]string{
	0: "idle",
	1: "connect",
	2: "active",
	3: "opensent",
	4: "openconfirmed",
	5: "established",
}

var NeighborStatus_State_vvalue = map[string]int32{
	"idle":          0,
	"connect":       1,
	"active":        2,
	"opensent":      3,
	"openconfirmed": 4,
	"established":   5,
}

func (x NeighborStatus_State) String() string {
	return NeighborStatus_State_vname[int32(x)]
}

// NeighborStatus_AddrType_normal is a map of normalized values for the enum
var NeighborStatus_AddrType_normal = map[string]string{
	"appletalk": "appletalk",
	"banyanvin": "banyanvin",
	"bbn1822":   "bbn1822",
	"decnetiv":  "decnetiv",
	"e163":      "e163",
	"e164":      "e164",
	"e164_nsap": "e164_nsap",
	"f69":       "f69",
	"hdlc":      "hdlc",
	"ieee802":   "ieee802",
	"ipv4":      "ipv4",
	"ipv4_tna":  "ipv4_tna",
	"ipv6":      "ipv6",
	"ipv6_tna":  "ipv6_tna",
	"ipx":       "ipx",
	"l2vpn":     "l2vpn",
	"nsap":      "nsap",
	"nsap_tna":  "nsap_tna",
	"other":     "other",
	"vpn_ipv4":  "vpn_ipv4",
	"vpn_ipv6":  "vpn_ipv6",
	"x121":      "x121",
}

var NeighborStatus_AddrType_vname = map[int32]string{
	0:  "other",
	1:  "ipv4",
	2:  "ipv6",
	3:  "nsap",
	4:  "hdlc",
	5:  "bbn1822",
	6:  "ieee802",
	7:  "e163",
	8:  "e164",
	9:  "f69",
	10: "x121",
	11: "ipx",
	12: "appletalk",
	13: "decnetiv",
	14: "banyanvin",
	15: "e164_nsap",
	16: "ipv4_tna",
	17: "ipv6_tna",
	18: "nsap_tna",
	19: "vpn_ipv4",
	20: "vpn_ipv6",
	25: "l2vpn",
}

var NeighborStatus_AddrType_vvalue = map[string]int32{
	"other":     0,
	"ipv4":      1,
	"ipv6":      2,
	"nsap":      3,
	"hdlc":      4,
	"bbn1822":   5,
	"ieee802":   6,
	"e163":      7,
	"e164":      8,
	"f69":       9,
	"x121":      10,
	"ipx":       11,
	"appletalk": 12,
	"decnetiv":  13,
	"banyanvin": 14,
	"e164_nsap": 15,
	"ipv4_tna":  16,
	"ipv6_tna":  17,
	"nsap_tna":  18,
	"vpn_ipv4":  19,
	"vpn_ipv6":  20,
	"l2vpn":     25,
}

func (x NeighborStatus_AddrType) String() string {
	return NeighborStatus_AddrType_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapRouting = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Health) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "health/", m.Name)
}

func (m *Health) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/health/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Neighbor) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "neighbors/", m.Name)
}

func (m *Neighbor) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/neighbors/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *NeighborFilter) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "neighborfilter/", m.Name)
}

func (m *NeighborFilter) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/neighborfilter/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *EmptyReq) Clone(into interface{}) (interface{}, error) {
	var out *EmptyReq
	var ok bool
	if into == nil {
		out = &EmptyReq{}
	} else {
		out, ok = into.(*EmptyReq)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*EmptyReq))
	return out, nil
}

// Default sets up the defaults for the object
func (m *EmptyReq) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Health) Clone(into interface{}) (interface{}, error) {
	var out *Health
	var ok bool
	if into == nil {
		out = &Health{}
	} else {
		out, ok = into.(*Health)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Health))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Health) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Health"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *HealthSpec) Clone(into interface{}) (interface{}, error) {
	var out *HealthSpec
	var ok bool
	if into == nil {
		out = &HealthSpec{}
	} else {
		out, ok = into.(*HealthSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*HealthSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *HealthSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *HealthStatus) Clone(into interface{}) (interface{}, error) {
	var out *HealthStatus
	var ok bool
	if into == nil {
		out = &HealthStatus{}
	} else {
		out, ok = into.(*HealthStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*HealthStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *HealthStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *HealthStatus_PeeringStatus) Clone(into interface{}) (interface{}, error) {
	var out *HealthStatus_PeeringStatus
	var ok bool
	if into == nil {
		out = &HealthStatus_PeeringStatus{}
	} else {
		out, ok = into.(*HealthStatus_PeeringStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*HealthStatus_PeeringStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *HealthStatus_PeeringStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Neighbor) Clone(into interface{}) (interface{}, error) {
	var out *Neighbor
	var ok bool
	if into == nil {
		out = &Neighbor{}
	} else {
		out, ok = into.(*Neighbor)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Neighbor))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Neighbor) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Neighbor"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NeighborFilter) Clone(into interface{}) (interface{}, error) {
	var out *NeighborFilter
	var ok bool
	if into == nil {
		out = &NeighborFilter{}
	} else {
		out, ok = into.(*NeighborFilter)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NeighborFilter))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NeighborFilter) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NeighborList) Clone(into interface{}) (interface{}, error) {
	var out *NeighborList
	var ok bool
	if into == nil {
		out = &NeighborList{}
	} else {
		out, ok = into.(*NeighborList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NeighborList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NeighborList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NeighborStatus) Clone(into interface{}) (interface{}, error) {
	var out *NeighborStatus
	var ok bool
	if into == nil {
		out = &NeighborStatus{}
	} else {
		out, ok = into.(*NeighborStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NeighborStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NeighborStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.PrevStatus = "idle"
		m.SelLocalAddrType = "other"
		m.Status = "idle"
	}
	return ret
}

// Validators and Requirements

func (m *EmptyReq) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *EmptyReq) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *EmptyReq) Normalize() {

}

func (m *Health) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Health) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Health"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Health"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Health) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *HealthSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *HealthSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *HealthSpec) Normalize() {

}

func (m *HealthStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *HealthStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *HealthStatus) Normalize() {

}

func (m *HealthStatus_PeeringStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *HealthStatus_PeeringStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *HealthStatus_PeeringStatus) Normalize() {

}

func (m *Neighbor) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Neighbor) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Neighbor"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Neighbor"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Neighbor) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *NeighborFilter) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NeighborFilter) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *NeighborFilter) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *NeighborList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NeighborList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *NeighborList) Normalize() {

	for k, v := range m.Items {
		if v != nil {
			v.Normalize()
			m.Items[k] = v
		}
	}

}

func (m *NeighborStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NeighborStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapRouting["NeighborStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRouting["NeighborStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *NeighborStatus) Normalize() {

	m.PrevStatus = NeighborStatus_State_normal[strings.ToLower(m.PrevStatus)]

	m.SelLocalAddrType = NeighborStatus_AddrType_normal[strings.ToLower(m.SelLocalAddrType)]

	m.Status = NeighborStatus_State_normal[strings.ToLower(m.Status)]

}

// Transformers

func (m *Neighbor) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Neighbor) EraseSecrets() {
	m.Spec.EraseSecrets()

	return
}

type storageNeighborTransformer struct{}

var StorageNeighborTransformer storageNeighborTransformer

func (st *storageNeighborTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Neighbor)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageNeighborTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Neighbor)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *NeighborList) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Items {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Items[i] = &c
	}
	return nil
}

func (m *NeighborList) EraseSecrets() {
	for _, v := range m.Items {
		v.EraseSecrets()
	}
	return
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Health{},
		&Neighbor{},
		&NeighborFilter{},
	)

	validatorMapRouting = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapRouting["NeighborStatus"] = make(map[string][]func(string, interface{}) error)

	validatorMapRouting["NeighborStatus"]["all"] = append(validatorMapRouting["NeighborStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NeighborStatus)
		if err := validators.EmptyOr(validators.IPAddr, m.LocalAddr, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"LocalAddr", err.Error())
		}
		return nil
	})

	validatorMapRouting["NeighborStatus"]["all"] = append(validatorMapRouting["NeighborStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NeighborStatus)

		if _, ok := NeighborStatus_State_vvalue[m.PrevStatus]; !ok {
			vals := []string{}
			for k1, _ := range NeighborStatus_State_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"PrevStatus", vals)
		}
		return nil
	})

	validatorMapRouting["NeighborStatus"]["all"] = append(validatorMapRouting["NeighborStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NeighborStatus)

		if _, ok := NeighborStatus_AddrType_vvalue[m.SelLocalAddrType]; !ok {
			vals := []string{}
			for k1, _ := range NeighborStatus_AddrType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"SelLocalAddrType", vals)
		}
		return nil
	})

	validatorMapRouting["NeighborStatus"]["all"] = append(validatorMapRouting["NeighborStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NeighborStatus)

		if _, ok := NeighborStatus_State_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range NeighborStatus_State_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
