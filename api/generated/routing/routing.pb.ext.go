// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package routing is a auto generated package.
Input file: routing.proto
*/
package routing

import (
	"context"
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// NeighborStatus_State_normal is a map of normalized values for the enum
var NeighborStatus_State_normal = map[string]string{
	"active":        "active",
	"connect":       "connect",
	"established":   "established",
	"idle":          "idle",
	"openconfirmed": "openconfirmed",
	"opensent":      "opensent",
}

var NeighborStatus_State_vname = map[int32]string{
	0: "idle",
	1: "connect",
	2: "active",
	3: "opensent",
	4: "openconfirmed",
	5: "established",
}

var NeighborStatus_State_vvalue = map[string]int32{
	"idle":          0,
	"connect":       1,
	"active":        2,
	"opensent":      3,
	"openconfirmed": 4,
	"established":   5,
}

func (x NeighborStatus_State) String() string {
	return NeighborStatus_State_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapRouting = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Neighbor) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "neighbors/", m.Name)
}

func (m *Neighbor) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/neighbors/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Neighbor) Clone(into interface{}) (interface{}, error) {
	var out *Neighbor
	var ok bool
	if into == nil {
		out = &Neighbor{}
	} else {
		out, ok = into.(*Neighbor)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Neighbor))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Neighbor) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Neighbor"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *NeighborStatus) Clone(into interface{}) (interface{}, error) {
	var out *NeighborStatus
	var ok bool
	if into == nil {
		out = &NeighborStatus{}
	} else {
		out, ok = into.(*NeighborStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*NeighborStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *NeighborStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "idle"
	}
	return ret
}

// Validators and Requirements

func (m *Neighbor) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Neighbor) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Neighbor"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Neighbor"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Neighbor) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *NeighborStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *NeighborStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapRouting["NeighborStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRouting["NeighborStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *NeighborStatus) Normalize() {

	m.Status = NeighborStatus_State_normal[strings.ToLower(m.Status)]

}

// Transformers

func (m *Neighbor) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Neighbor) EraseSecrets() {
	m.Spec.EraseSecrets()

	return
}

type storageNeighborTransformer struct{}

var StorageNeighborTransformer storageNeighborTransformer

func (st *storageNeighborTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Neighbor)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageNeighborTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Neighbor)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Neighbor{},
	)

	validatorMapRouting = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapRouting["NeighborStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapRouting["NeighborStatus"]["all"] = append(validatorMapRouting["NeighborStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*NeighborStatus)

		if _, ok := NeighborStatus_State_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range NeighborStatus_State_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
