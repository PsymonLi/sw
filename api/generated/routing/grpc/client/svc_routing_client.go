// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	routing "github.com/pensando/sw/api/generated/routing"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewRoutingV1 sets up a new client for RoutingV1
func NewRoutingV1(conn *grpc.ClientConn, logger log.Logger) routing.ServiceRoutingV1Client {

	var lHealthZEndpoint endpoint.Endpoint
	{
		lHealthZEndpoint = grpctransport.NewClient(
			conn,
			"routing.RoutingV1",
			"HealthZ",
			routing.EncodeGrpcReqEmptyReq,
			routing.DecodeGrpcRespHealth,
			&routing.Health{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lHealthZEndpoint = trace.ClientEndPoint("RoutingV1:HealthZ")(lHealthZEndpoint)
	}
	var lListNeighborsEndpoint endpoint.Endpoint
	{
		lListNeighborsEndpoint = grpctransport.NewClient(
			conn,
			"routing.RoutingV1",
			"ListNeighbors",
			routing.EncodeGrpcReqNeighborFilter,
			routing.DecodeGrpcRespNeighborList,
			&routing.NeighborList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lListNeighborsEndpoint = trace.ClientEndPoint("RoutingV1:ListNeighbors")(lListNeighborsEndpoint)
	}
	var lListRoutesEndpoint endpoint.Endpoint
	{
		lListRoutesEndpoint = grpctransport.NewClient(
			conn,
			"routing.RoutingV1",
			"ListRoutes",
			routing.EncodeGrpcReqRouteFilter,
			routing.DecodeGrpcRespRouteList,
			&routing.RouteList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lListRoutesEndpoint = trace.ClientEndPoint("RoutingV1:ListRoutes")(lListRoutesEndpoint)
	}
	return routing.EndpointsRoutingV1Client{
		Client: routing.NewRoutingV1Client(conn),

		HealthZEndpoint:       lHealthZEndpoint,
		ListNeighborsEndpoint: lListNeighborsEndpoint,
		ListRoutesEndpoint:    lListRoutesEndpoint,
	}
}

// NewRoutingV1Backend creates an instrumented client with middleware
func NewRoutingV1Backend(conn *grpc.ClientConn, logger log.Logger) routing.ServiceRoutingV1Client {
	cl := NewRoutingV1(conn, logger)
	cl = routing.LoggingRoutingV1MiddlewareClient(logger)(cl)
	return cl
}

type crudClientRoutingV1 struct {
	logger log.Logger
	client routing.ServiceRoutingV1Client
}

// NewGrpcCrudClientRoutingV1 creates a GRPC client for the service
func NewGrpcCrudClientRoutingV1(conn *grpc.ClientConn, logger log.Logger) routing.RoutingV1Interface {
	client := NewRoutingV1Backend(conn, logger)
	return &crudClientRoutingV1{
		logger: logger,
		client: client,
	}
}

type crudRestClientRoutingV1 struct {
}

// NewRestCrudClientRoutingV1 creates a REST client for the service.
func NewRestCrudClientRoutingV1(url string, httpClient *http.Client) routing.RoutingV1Interface {
	return &crudRestClientRoutingV1{}
}

// NewStagedRestCrudClientRoutingV1 creates a REST client for the service.
func NewStagedRestCrudClientRoutingV1(url string, id string, httpClient *http.Client) routing.RoutingV1Interface {
	return &crudRestClientRoutingV1{}
}

func (a *crudRestClientRoutingV1) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
