// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: auth.proto
*/
package auth

import (
	"context"
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pensando/sw/venice/utils/transformers/storage"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// Authenticators_AuthenticatorType_normal is a map of normalized values for the enum
var Authenticators_AuthenticatorType_normal = map[string]string{
	"ldap":   "ldap",
	"local":  "local",
	"radius": "radius",
}

var Authenticators_AuthenticatorType_vname = map[int32]string{
	0: "local",
	1: "ldap",
	2: "radius",
}

var Authenticators_AuthenticatorType_vvalue = map[string]int32{
	"local":  0,
	"ldap":   1,
	"radius": 2,
}

func (x Authenticators_AuthenticatorType) String() string {
	return Authenticators_AuthenticatorType_vname[int32(x)]
}

// LdapServerStatus_LdapResult_normal is a map of normalized values for the enum
var LdapServerStatus_LdapResult_normal = map[string]string{
	"bind-failure":    "bind-failure",
	"bind-success":    "bind-success",
	"connect-failure": "connect-failure",
	"connect-success": "connect-success",
}

var LdapServerStatus_LdapResult_vname = map[int32]string{
	0: "connect-success",
	1: "connect-failure",
	2: "bind-success",
	3: "bind-failure",
}

var LdapServerStatus_LdapResult_vvalue = map[string]int32{
	"connect-success": 0,
	"connect-failure": 1,
	"bind-success":    2,
	"bind-failure":    3,
}

func (x LdapServerStatus_LdapResult) String() string {
	return LdapServerStatus_LdapResult_vname[int32(x)]
}

// Permission_ResrcKind_normal is a map of normalized values for the enum
var Permission_ResrcKind_normal = map[string]string{
	"APIEndpoint":  "APIEndpoint",
	"AuditEvent":   "AuditEvent",
	"Event":        "Event",
	"FwlogsQuery":  "FwlogsQuery",
	"MetricsQuery": "MetricsQuery",
	"Search":       "Search",
	"TokenAuth":    "TokenAuth",
	"apiendpoint":  "APIEndpoint",
	"auditevent":   "AuditEvent",
	"event":        "Event",
	"fwlogsquery":  "FwlogsQuery",
	"metricsquery": "MetricsQuery",
	"search":       "Search",
	"tokenauth":    "TokenAuth",
}

var Permission_ResrcKind_vname = map[int32]string{
	0: "APIEndpoint",
	1: "Search",
	2: "Event",
	3: "MetricsQuery",
	4: "AuditEvent",
	5: "FwlogsQuery",
	6: "TokenAuth",
}

var Permission_ResrcKind_vvalue = map[string]int32{
	"APIEndpoint":  0,
	"Search":       1,
	"Event":        2,
	"MetricsQuery": 3,
	"AuditEvent":   4,
	"FwlogsQuery":  5,
	"TokenAuth":    6,
}

func (x Permission_ResrcKind) String() string {
	return Permission_ResrcKind_vname[int32(x)]
}

// Permission_ActionType_normal is a map of normalized values for the enum
var Permission_ActionType_normal = map[string]string{
	"all-actions": "all-actions",
	"clear":       "clear",
	"commit":      "commit",
	"create":      "create",
	"delete":      "delete",
	"read":        "read",
	"update":      "update",
}

var Permission_ActionType_vname = map[int32]string{
	0: "all-actions",
	1: "create",
	2: "read",
	3: "update",
	4: "delete",
	5: "commit",
	6: "clear",
}

var Permission_ActionType_vvalue = map[string]int32{
	"all-actions": 0,
	"create":      1,
	"read":        2,
	"update":      3,
	"delete":      4,
	"commit":      5,
	"clear":       6,
}

func (x Permission_ActionType) String() string {
	return Permission_ActionType_vname[int32(x)]
}

// Radius_AuthMethod_normal is a map of normalized values for the enum
var Radius_AuthMethod_normal = map[string]string{
	"eap-ttls-pap":  "eap-ttls-pap",
	"pap":           "pap",
	"peap-mschapv2": "peap-mschapv2",
}

var Radius_AuthMethod_vname = map[int32]string{
	0: "pap",
	1: "peap-mschapv2",
	2: "eap-ttls-pap",
}

var Radius_AuthMethod_vvalue = map[string]int32{
	"pap":           0,
	"peap-mschapv2": 1,
	"eap-ttls-pap":  2,
}

func (x Radius_AuthMethod) String() string {
	return Radius_AuthMethod_vname[int32(x)]
}

// RadiusServerStatus_RadiusResult_normal is a map of normalized values for the enum
var RadiusServerStatus_RadiusResult_normal = map[string]string{
	"connect-failure": "connect-failure",
	"connect-success": "connect-success",
}

var RadiusServerStatus_RadiusResult_vname = map[int32]string{
	0: "connect-success",
	1: "connect-failure",
}

var RadiusServerStatus_RadiusResult_vvalue = map[string]int32{
	"connect-success": 0,
	"connect-failure": 1,
}

func (x RadiusServerStatus_RadiusResult) String() string {
	return RadiusServerStatus_RadiusResult_vname[int32(x)]
}

// UserSpec_UserType_normal is a map of normalized values for the enum
var UserSpec_UserType_normal = map[string]string{
	"external": "external",
	"local":    "local",
}

var UserSpec_UserType_vname = map[int32]string{
	0: "local",
	1: "external",
}

var UserSpec_UserType_vvalue = map[string]int32{
	"local":    0,
	"external": 1,
}

func (x UserSpec_UserType) String() string {
	return UserSpec_UserType_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapAuth = make(map[string]map[string][]func(string, interface{}) error)

var storageTransformersMapAuth = make(map[string][]func(ctx context.Context, i interface{}, toStorage bool) error)

// MakeKey generates a KV store key for the object
func (m *AuthenticationPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "authn-policy", "/Singleton")
}

func (m *AuthenticationPolicy) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/authn-policy")
}

// MakeKey generates a KV store key for the object
func (m *PasswordChangeRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "users/", m.Tenant, "/", m.Name)
}

func (m *PasswordChangeRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/users/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *PasswordResetRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "users/", m.Tenant, "/", m.Name)
}

func (m *PasswordResetRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/users/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Role) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "roles/", m.Tenant, "/", m.Name)
}

func (m *Role) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/roles/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *RoleBinding) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "role-bindings/", m.Tenant, "/", m.Name)
}

func (m *RoleBinding) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/role-bindings/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *SubjectAccessReviewRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "users/", m.Tenant, "/", m.Name)
}

func (m *SubjectAccessReviewRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/users/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *TokenSecretRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "authn-policy", "/Singleton")
}

func (m *TokenSecretRequest) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/authn-policy")
}

// MakeKey generates a KV store key for the object
func (m *User) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "users/", m.Tenant, "/", m.Name)
}

func (m *User) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/users/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *UserPreference) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "user-preferences/", m.Tenant, "/", m.Name)
}

func (m *UserPreference) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/user-preferences/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *AuthenticationPolicy) Clone(into interface{}) (interface{}, error) {
	var out *AuthenticationPolicy
	var ok bool
	if into == nil {
		out = &AuthenticationPolicy{}
	} else {
		out, ok = into.(*AuthenticationPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuthenticationPolicy))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuthenticationPolicy) Defaults(ver string) bool {
	var ret bool
	m.Kind = "AuthenticationPolicy"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AuthenticationPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *AuthenticationPolicySpec
	var ok bool
	if into == nil {
		out = &AuthenticationPolicySpec{}
	} else {
		out, ok = into.(*AuthenticationPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuthenticationPolicySpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuthenticationPolicySpec) Defaults(ver string) bool {
	var ret bool
	ret = m.Authenticators.Defaults(ver) || ret
	ret = true
	switch ver {
	default:
		m.TokenExpiry = "144h"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AuthenticationPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *AuthenticationPolicyStatus
	var ok bool
	if into == nil {
		out = &AuthenticationPolicyStatus{}
	} else {
		out, ok = into.(*AuthenticationPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuthenticationPolicyStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuthenticationPolicyStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.LdapServers {
		if m.LdapServers[k] != nil {
			i := m.LdapServers[k]
			ret = i.Defaults(ver) || ret
		}
	}
	for k := range m.RadiusServers {
		if m.RadiusServers[k] != nil {
			i := m.RadiusServers[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Authenticators) Clone(into interface{}) (interface{}, error) {
	var out *Authenticators
	var ok bool
	if into == nil {
		out = &Authenticators{}
	} else {
		out, ok = into.(*Authenticators)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Authenticators))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Authenticators) Defaults(ver string) bool {
	var ret bool
	if m.Radius != nil {
		ret = m.Radius.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		for k := range m.AuthenticatorOrder {
			m.AuthenticatorOrder[k] = "local"
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Ldap) Clone(into interface{}) (interface{}, error) {
	var out *Ldap
	var ok bool
	if into == nil {
		out = &Ldap{}
	} else {
		out, ok = into.(*Ldap)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Ldap))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Ldap) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LdapAttributeMapping) Clone(into interface{}) (interface{}, error) {
	var out *LdapAttributeMapping
	var ok bool
	if into == nil {
		out = &LdapAttributeMapping{}
	} else {
		out, ok = into.(*LdapAttributeMapping)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*LdapAttributeMapping))
	return out, nil
}

// Default sets up the defaults for the object
func (m *LdapAttributeMapping) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LdapServer) Clone(into interface{}) (interface{}, error) {
	var out *LdapServer
	var ok bool
	if into == nil {
		out = &LdapServer{}
	} else {
		out, ok = into.(*LdapServer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*LdapServer))
	return out, nil
}

// Default sets up the defaults for the object
func (m *LdapServer) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LdapServerStatus) Clone(into interface{}) (interface{}, error) {
	var out *LdapServerStatus
	var ok bool
	if into == nil {
		out = &LdapServerStatus{}
	} else {
		out, ok = into.(*LdapServerStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*LdapServerStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *LdapServerStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Result = "connect-success"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Local) Clone(into interface{}) (interface{}, error) {
	var out *Local
	var ok bool
	if into == nil {
		out = &Local{}
	} else {
		out, ok = into.(*Local)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Local))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Local) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Operation) Clone(into interface{}) (interface{}, error) {
	var out *Operation
	var ok bool
	if into == nil {
		out = &Operation{}
	} else {
		out, ok = into.(*Operation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Operation))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Operation) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Action = "all-actions"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OperationStatus) Clone(into interface{}) (interface{}, error) {
	var out *OperationStatus
	var ok bool
	if into == nil {
		out = &OperationStatus{}
	} else {
		out, ok = into.(*OperationStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OperationStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OperationStatus) Defaults(ver string) bool {
	var ret bool
	if m.Operation != nil {
		ret = m.Operation.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PasswordChangeRequest) Clone(into interface{}) (interface{}, error) {
	var out *PasswordChangeRequest
	var ok bool
	if into == nil {
		out = &PasswordChangeRequest{}
	} else {
		out, ok = into.(*PasswordChangeRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PasswordChangeRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PasswordChangeRequest) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PasswordCredential) Clone(into interface{}) (interface{}, error) {
	var out *PasswordCredential
	var ok bool
	if into == nil {
		out = &PasswordCredential{}
	} else {
		out, ok = into.(*PasswordCredential)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PasswordCredential))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PasswordCredential) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *PasswordResetRequest) Clone(into interface{}) (interface{}, error) {
	var out *PasswordResetRequest
	var ok bool
	if into == nil {
		out = &PasswordResetRequest{}
	} else {
		out, ok = into.(*PasswordResetRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PasswordResetRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PasswordResetRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Permission) Clone(into interface{}) (interface{}, error) {
	var out *Permission
	var ok bool
	if into == nil {
		out = &Permission{}
	} else {
		out, ok = into.(*Permission)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Permission))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Permission) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		for k := range m.Actions {
			m.Actions[k] = "all-actions"
		}
		m.ResourceNamespace = "_All_"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Radius) Clone(into interface{}) (interface{}, error) {
	var out *Radius
	var ok bool
	if into == nil {
		out = &Radius{}
	} else {
		out, ok = into.(*Radius)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Radius))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Radius) Defaults(ver string) bool {
	var ret bool
	for k := range m.Servers {
		if m.Servers[k] != nil {
			i := m.Servers[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RadiusServer) Clone(into interface{}) (interface{}, error) {
	var out *RadiusServer
	var ok bool
	if into == nil {
		out = &RadiusServer{}
	} else {
		out, ok = into.(*RadiusServer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RadiusServer))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RadiusServer) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.AuthMethod = "pap"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RadiusServerStatus) Clone(into interface{}) (interface{}, error) {
	var out *RadiusServerStatus
	var ok bool
	if into == nil {
		out = &RadiusServerStatus{}
	} else {
		out, ok = into.(*RadiusServerStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RadiusServerStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RadiusServerStatus) Defaults(ver string) bool {
	var ret bool
	if m.Server != nil {
		ret = m.Server.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.Result = "connect-success"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Resource) Clone(into interface{}) (interface{}, error) {
	var out *Resource
	var ok bool
	if into == nil {
		out = &Resource{}
	} else {
		out, ok = into.(*Resource)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Resource))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Resource) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Role) Clone(into interface{}) (interface{}, error) {
	var out *Role
	var ok bool
	if into == nil {
		out = &Role{}
	} else {
		out, ok = into.(*Role)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Role))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Role) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Role"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleBinding) Clone(into interface{}) (interface{}, error) {
	var out *RoleBinding
	var ok bool
	if into == nil {
		out = &RoleBinding{}
	} else {
		out, ok = into.(*RoleBinding)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RoleBinding))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleBinding) Defaults(ver string) bool {
	var ret bool
	m.Kind = "RoleBinding"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleBindingSpec) Clone(into interface{}) (interface{}, error) {
	var out *RoleBindingSpec
	var ok bool
	if into == nil {
		out = &RoleBindingSpec{}
	} else {
		out, ok = into.(*RoleBindingSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RoleBindingSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleBindingSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleBindingStatus) Clone(into interface{}) (interface{}, error) {
	var out *RoleBindingStatus
	var ok bool
	if into == nil {
		out = &RoleBindingStatus{}
	} else {
		out, ok = into.(*RoleBindingStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RoleBindingStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleBindingStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleSpec) Clone(into interface{}) (interface{}, error) {
	var out *RoleSpec
	var ok bool
	if into == nil {
		out = &RoleSpec{}
	} else {
		out, ok = into.(*RoleSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RoleSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Permissions {
		i := m.Permissions[k]
		ret = i.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleStatus) Clone(into interface{}) (interface{}, error) {
	var out *RoleStatus
	var ok bool
	if into == nil {
		out = &RoleStatus{}
	} else {
		out, ok = into.(*RoleStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RoleStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SubjectAccessReviewRequest) Clone(into interface{}) (interface{}, error) {
	var out *SubjectAccessReviewRequest
	var ok bool
	if into == nil {
		out = &SubjectAccessReviewRequest{}
	} else {
		out, ok = into.(*SubjectAccessReviewRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SubjectAccessReviewRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SubjectAccessReviewRequest) Defaults(ver string) bool {
	var ret bool
	for k := range m.Operations {
		if m.Operations[k] != nil {
			i := m.Operations[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *TLSOptions) Clone(into interface{}) (interface{}, error) {
	var out *TLSOptions
	var ok bool
	if into == nil {
		out = &TLSOptions{}
	} else {
		out, ok = into.(*TLSOptions)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TLSOptions))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TLSOptions) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TokenSecretRequest) Clone(into interface{}) (interface{}, error) {
	var out *TokenSecretRequest
	var ok bool
	if into == nil {
		out = &TokenSecretRequest{}
	} else {
		out, ok = into.(*TokenSecretRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TokenSecretRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TokenSecretRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *User) Clone(into interface{}) (interface{}, error) {
	var out *User
	var ok bool
	if into == nil {
		out = &User{}
	} else {
		out, ok = into.(*User)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*User))
	return out, nil
}

// Default sets up the defaults for the object
func (m *User) Defaults(ver string) bool {
	var ret bool
	m.Kind = "User"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *UserPreference) Clone(into interface{}) (interface{}, error) {
	var out *UserPreference
	var ok bool
	if into == nil {
		out = &UserPreference{}
	} else {
		out, ok = into.(*UserPreference)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UserPreference))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserPreference) Defaults(ver string) bool {
	var ret bool
	m.Kind = "UserPreference"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *UserPreferenceSpec) Clone(into interface{}) (interface{}, error) {
	var out *UserPreferenceSpec
	var ok bool
	if into == nil {
		out = &UserPreferenceSpec{}
	} else {
		out, ok = into.(*UserPreferenceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UserPreferenceSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserPreferenceSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *UserPreferenceStatus) Clone(into interface{}) (interface{}, error) {
	var out *UserPreferenceStatus
	var ok bool
	if into == nil {
		out = &UserPreferenceStatus{}
	} else {
		out, ok = into.(*UserPreferenceStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UserPreferenceStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserPreferenceStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *UserSpec) Clone(into interface{}) (interface{}, error) {
	var out *UserSpec
	var ok bool
	if into == nil {
		out = &UserSpec{}
	} else {
		out, ok = into.(*UserSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UserSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Type = "local"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *UserStatus) Clone(into interface{}) (interface{}, error) {
	var out *UserStatus
	var ok bool
	if into == nil {
		out = &UserStatus{}
	} else {
		out, ok = into.(*UserStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UserStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.AccessReview {
		if m.AccessReview[k] != nil {
			i := m.AccessReview[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		for k := range m.Authenticators {
			m.Authenticators[k] = "local"
		}
	}
	return ret
}

// Validators and Requirements

func (m *AuthenticationPolicy) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AuthenticationPolicy) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for AuthenticationPolicy"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for AuthenticationPolicy"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AuthenticationPolicy) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *AuthenticationPolicySpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AuthenticationPolicySpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Authenticators"
		if errs := m.Authenticators.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapAuth["AuthenticationPolicySpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["AuthenticationPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *AuthenticationPolicySpec) Normalize() {

	m.Authenticators.Normalize()

}

func (m *AuthenticationPolicyStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AuthenticationPolicyStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.LdapServers {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sLdapServers[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	for k, v := range m.RadiusServers {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sRadiusServers[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AuthenticationPolicyStatus) Normalize() {

	for k, v := range m.LdapServers {
		if v != nil {
			v.Normalize()
			m.LdapServers[k] = v
		}
	}

	for k, v := range m.RadiusServers {
		if v != nil {
			v.Normalize()
			m.RadiusServers[k] = v
		}
	}

}

func (m *Authenticators) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Authenticators) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Radius != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Radius"
			if errs := m.Radius.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapAuth["Authenticators"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["Authenticators"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *Authenticators) Normalize() {

	for k, v := range m.AuthenticatorOrder {
		m.AuthenticatorOrder[k] = Authenticators_AuthenticatorType_normal[strings.ToLower(v)]
	}

	if m.Radius != nil {
		m.Radius.Normalize()
	}

}

func (m *Ldap) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Ldap) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *Ldap) Normalize() {

}

func (m *LdapAttributeMapping) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *LdapAttributeMapping) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *LdapAttributeMapping) Normalize() {

}

func (m *LdapServer) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *LdapServer) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *LdapServer) Normalize() {

}

func (m *LdapServerStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *LdapServerStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapAuth["LdapServerStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["LdapServerStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *LdapServerStatus) Normalize() {

	m.Result = LdapServerStatus_LdapResult_normal[strings.ToLower(m.Result)]

}

func (m *Local) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Local) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *Local) Normalize() {

}

func (m *Operation) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Operation) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapAuth["Operation"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["Operation"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *Operation) Normalize() {

	m.Action = Permission_ActionType_normal[strings.ToLower(m.Action)]

}

func (m *OperationStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OperationStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Operation != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Operation"
			if errs := m.Operation.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *OperationStatus) Normalize() {

	if m.Operation != nil {
		m.Operation.Normalize()
	}

}

func (m *PasswordChangeRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PasswordChangeRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if vs, ok := validatorMapAuth["PasswordChangeRequest"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["PasswordChangeRequest"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *PasswordChangeRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *PasswordCredential) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PasswordCredential) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *PasswordCredential) Normalize() {

}

func (m *PasswordResetRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PasswordResetRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *PasswordResetRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *Permission) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Permission) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapAuth["Permission"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["Permission"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *Permission) Normalize() {

	for k, v := range m.Actions {
		m.Actions[k] = Permission_ActionType_normal[strings.ToLower(v)]
	}

}

func (m *Radius) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Radius) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Servers {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sServers[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Radius) Normalize() {

	for k, v := range m.Servers {
		if v != nil {
			v.Normalize()
			m.Servers[k] = v
		}
	}

}

func (m *RadiusServer) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RadiusServer) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapAuth["RadiusServer"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["RadiusServer"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RadiusServer) Normalize() {

	m.AuthMethod = Radius_AuthMethod_normal[strings.ToLower(m.AuthMethod)]

}

func (m *RadiusServerStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RadiusServerStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Server != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Server"
			if errs := m.Server.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapAuth["RadiusServerStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["RadiusServerStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RadiusServerStatus) Normalize() {

	m.Result = RadiusServerStatus_RadiusResult_normal[strings.ToLower(m.Result)]

	if m.Server != nil {
		m.Server.Normalize()
	}

}

func (m *Resource) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Resource) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *Resource) Normalize() {

}

func (m *Role) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *Role) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for Role"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Role) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *RoleBinding) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *RoleBinding) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for RoleBinding"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *RoleBinding) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *RoleBindingSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "role"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Role != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/auth/"+"roles/"+tenant+"/"+m.Role)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "users"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		for _, v := range m.Users {

			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/auth/"+"users/"+tenant+"/"+v)

		}
		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *RoleBindingSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *RoleBindingSpec) Normalize() {

}

func (m *RoleBindingStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RoleBindingStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *RoleBindingStatus) Normalize() {

}

func (m *RoleSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RoleSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Permissions {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sPermissions[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *RoleSpec) Normalize() {

	for k, v := range m.Permissions {
		v.Normalize()
		m.Permissions[k] = v

	}

}

func (m *RoleStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RoleStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *RoleStatus) Normalize() {

}

func (m *SubjectAccessReviewRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SubjectAccessReviewRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	for k, v := range m.Operations {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sOperations[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SubjectAccessReviewRequest) Normalize() {

	m.ObjectMeta.Normalize()

	for k, v := range m.Operations {
		if v != nil {
			v.Normalize()
			m.Operations[k] = v
		}
	}

}

func (m *TLSOptions) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TLSOptions) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *TLSOptions) Normalize() {

}

func (m *TokenSecretRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TokenSecretRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *TokenSecretRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *User) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *User) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for User"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *User) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *UserPreference) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *UserPreference) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for UserPreference"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *UserPreference) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *UserPreferenceSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *UserPreferenceSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *UserPreferenceSpec) Normalize() {

}

func (m *UserPreferenceStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *UserPreferenceStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *UserPreferenceStatus) Normalize() {

}

func (m *UserSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *UserSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapAuth["UserSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["UserSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *UserSpec) Normalize() {

	m.Type = UserSpec_UserType_normal[strings.ToLower(m.Type)]

}

func (m *UserStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *UserStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.AccessReview {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sAccessReview[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapAuth["UserStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuth["UserStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *UserStatus) Normalize() {

	for k, v := range m.AccessReview {
		if v != nil {
			v.Normalize()
			m.AccessReview[k] = v
		}
	}

	for k, v := range m.Authenticators {
		m.Authenticators[k] = Authenticators_AuthenticatorType_normal[strings.ToLower(v)]
	}

}

// Transformers

func (m *AuthenticationPolicy) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	if err := m.Status.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

type storageAuthenticationPolicyTransformer struct{}

var StorageAuthenticationPolicyTransformer storageAuthenticationPolicyTransformer

func (st *storageAuthenticationPolicyTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(AuthenticationPolicy)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageAuthenticationPolicyTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(AuthenticationPolicy)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *AuthenticationPolicySpec) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if err := m.Authenticators.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	if vs, ok := storageTransformersMapAuth["AuthenticationPolicySpec"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func (m *AuthenticationPolicyStatus) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.RadiusServers {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.RadiusServers[i] = &c
	}
	return nil
}

func (m *Authenticators) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Ldap == nil {
		return nil
	}
	if err := m.Ldap.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}

	if m.Radius == nil {
		return nil
	}
	if err := m.Radius.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Ldap) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if vs, ok := storageTransformersMapAuth["Ldap"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func (m *Radius) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Servers {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Servers[i] = &c
	}
	return nil
}

func (m *RadiusServer) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if vs, ok := storageTransformersMapAuth["RadiusServer"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func (m *RadiusServerStatus) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Server == nil {
		return nil
	}
	if err := m.Server.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *User) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

type storageUserTransformer struct{}

var StorageUserTransformer storageUserTransformer

func (st *storageUserTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(User)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageUserTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(User)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *UserSpec) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if vs, ok := storageTransformersMapAuth["UserSpec"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&AuthenticationPolicy{},
		&PasswordChangeRequest{},
		&PasswordResetRequest{},
		&Role{},
		&RoleBinding{},
		&SubjectAccessReviewRequest{},
		&TokenSecretRequest{},
		&User{},
		&UserPreference{},
	)

	validatorMapAuth = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapAuth["AuthenticationPolicySpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["AuthenticationPolicySpec"]["all"] = append(validatorMapAuth["AuthenticationPolicySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*AuthenticationPolicySpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "0")

		if err := validators.Duration(m.TokenExpiry, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"TokenExpiry", err.Error())
		}
		return nil
	})

	validatorMapAuth["Authenticators"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["Authenticators"]["all"] = append(validatorMapAuth["Authenticators"]["all"], func(path string, i interface{}) error {
		m := i.(*Authenticators)

		for k, v := range m.AuthenticatorOrder {
			if _, ok := Authenticators_AuthenticatorType_vvalue[v]; !ok {
				vals := []string{}
				for k1, _ := range Authenticators_AuthenticatorType_vvalue {
					vals = append(vals, k1)
				}
				return fmt.Errorf("%v[%v] did not match allowed strings %v", path+"."+"AuthenticatorOrder", k, vals)
			}
		}
		return nil
	})

	validatorMapAuth["LdapServerStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["LdapServerStatus"]["all"] = append(validatorMapAuth["LdapServerStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*LdapServerStatus)

		if _, ok := LdapServerStatus_LdapResult_vvalue[m.Result]; !ok {
			vals := []string{}
			for k1, _ := range LdapServerStatus_LdapResult_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Result", vals)
		}
		return nil
	})

	validatorMapAuth["Operation"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["Operation"]["all"] = append(validatorMapAuth["Operation"]["all"], func(path string, i interface{}) error {
		m := i.(*Operation)

		if _, ok := Permission_ActionType_vvalue[m.Action]; !ok {
			vals := []string{}
			for k1, _ := range Permission_ActionType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Action", vals)
		}
		return nil
	})

	validatorMapAuth["PasswordChangeRequest"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["PasswordChangeRequest"]["all"] = append(validatorMapAuth["PasswordChangeRequest"]["all"], func(path string, i interface{}) error {
		m := i.(*PasswordChangeRequest)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "-1")

		if err := validators.StrLen(m.NewPassword, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"NewPassword", err.Error())
		}
		return nil
	})

	validatorMapAuth["PasswordChangeRequest"]["all"] = append(validatorMapAuth["PasswordChangeRequest"]["all"], func(path string, i interface{}) error {
		m := i.(*PasswordChangeRequest)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "-1")

		if err := validators.StrLen(m.OldPassword, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"OldPassword", err.Error())
		}
		return nil
	})

	validatorMapAuth["Permission"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["Permission"]["all"] = append(validatorMapAuth["Permission"]["all"], func(path string, i interface{}) error {
		m := i.(*Permission)

		for k, v := range m.Actions {
			if _, ok := Permission_ActionType_vvalue[v]; !ok {
				vals := []string{}
				for k1, _ := range Permission_ActionType_vvalue {
					vals = append(vals, k1)
				}
				return fmt.Errorf("%v[%v] did not match allowed strings %v", path+"."+"Actions", k, vals)
			}
		}
		return nil
	})

	validatorMapAuth["RadiusServer"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["RadiusServer"]["all"] = append(validatorMapAuth["RadiusServer"]["all"], func(path string, i interface{}) error {
		m := i.(*RadiusServer)

		if _, ok := Radius_AuthMethod_vvalue[m.AuthMethod]; !ok {
			vals := []string{}
			for k1, _ := range Radius_AuthMethod_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"AuthMethod", vals)
		}
		return nil
	})

	validatorMapAuth["RadiusServerStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["RadiusServerStatus"]["all"] = append(validatorMapAuth["RadiusServerStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*RadiusServerStatus)

		if _, ok := RadiusServerStatus_RadiusResult_vvalue[m.Result]; !ok {
			vals := []string{}
			for k1, _ := range RadiusServerStatus_RadiusResult_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Result", vals)
		}
		return nil
	})

	validatorMapAuth["UserSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["UserSpec"]["all"] = append(validatorMapAuth["UserSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*UserSpec)
		args := make([]string, 0)
		args = append(args, "email")

		if err := validators.EmptyOr(validators.RegExp, m.Email, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Email", err.Error())
		}
		return nil
	})

	validatorMapAuth["UserSpec"]["all"] = append(validatorMapAuth["UserSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*UserSpec)

		if _, ok := UserSpec_UserType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range UserSpec_UserType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapAuth["UserStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuth["UserStatus"]["all"] = append(validatorMapAuth["UserStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*UserStatus)

		for k, v := range m.Authenticators {
			if _, ok := Authenticators_AuthenticatorType_vvalue[v]; !ok {
				vals := []string{}
				for k1, _ := range Authenticators_AuthenticatorType_vvalue {
					vals = append(vals, k1)
				}
				return fmt.Errorf("%v[%v] did not match allowed strings %v", path+"."+"Authenticators", k, vals)
			}
		}
		return nil
	})

	{
		AuthenticationPolicySpecSecretTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapAuth["AuthenticationPolicySpec"] = append(storageTransformersMapAuth["AuthenticationPolicySpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*AuthenticationPolicySpec)

				if toStorage {
					data, err = AuthenticationPolicySpecSecretTx.TransformToStorage(ctx, []byte(m.Secret))
				} else {
					data, err = AuthenticationPolicySpecSecretTx.TransformFromStorage(ctx, []byte(m.Secret))
				}
				m.Secret = []byte(data)

				return err
			})
	}

	{
		LdapBindPasswordTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapAuth["Ldap"] = append(storageTransformersMapAuth["Ldap"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*Ldap)

				if toStorage {
					data, err = LdapBindPasswordTx.TransformToStorage(ctx, []byte(m.BindPassword))
				} else {
					data, err = LdapBindPasswordTx.TransformFromStorage(ctx, []byte(m.BindPassword))
				}
				m.BindPassword = string(data)

				return err
			})
	}

	{
		RadiusServerSecretTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapAuth["RadiusServer"] = append(storageTransformersMapAuth["RadiusServer"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*RadiusServer)

				if toStorage {
					data, err = RadiusServerSecretTx.TransformToStorage(ctx, []byte(m.Secret))
				} else {
					data, err = RadiusServerSecretTx.TransformFromStorage(ctx, []byte(m.Secret))
				}
				m.Secret = string(data)

				return err
			})
	}

	{
		UserSpecPasswordTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapAuth["UserSpec"] = append(storageTransformersMapAuth["UserSpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*UserSpec)

				if toStorage {
					data, err = UserSpecPasswordTx.TransformToStorage(ctx, []byte(m.Password))
				} else {
					data, err = UserSpecPasswordTx.TransformFromStorage(ctx, []byte(m.Password))
				}
				m.Password = string(data)

				return err
			})
	}

}
