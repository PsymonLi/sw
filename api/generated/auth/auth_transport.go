// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: protos/auth.proto
*/
package auth

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerAuthV1 struct {
	Endpoints EndpointsAuthV1Server

	AutoAddAuthenticationPolicyHdlr    grpctransport.Handler
	AutoAddUserHdlr                    grpctransport.Handler
	AutoDeleteAuthenticationPolicyHdlr grpctransport.Handler
	AutoDeleteUserHdlr                 grpctransport.Handler
	AutoGetAuthenticationPolicyHdlr    grpctransport.Handler
	AutoGetUserHdlr                    grpctransport.Handler
	AutoListAuthenticationPolicyHdlr   grpctransport.Handler
	AutoListUserHdlr                   grpctransport.Handler
	AutoUpdateAuthenticationPolicyHdlr grpctransport.Handler
	AutoUpdateUserHdlr                 grpctransport.Handler
}

// MakeGRPCServerAuthV1 creates a GRPC server for AuthV1 service
func MakeGRPCServerAuthV1(ctx context.Context, endpoints EndpointsAuthV1Server, logger log.Logger) AuthV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAuthV1{
		Endpoints: endpoints,
		AutoAddAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAuthenticationPolicy", logger)))...,
		),

		AutoAddUserHdlr: grpctransport.NewServer(
			endpoints.AutoAddUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddUser", logger)))...,
		),

		AutoDeleteAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAuthenticationPolicy", logger)))...,
		),

		AutoDeleteUserHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteUser", logger)))...,
		),

		AutoGetAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAuthenticationPolicy", logger)))...,
		),

		AutoGetUserHdlr: grpctransport.NewServer(
			endpoints.AutoGetUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetUser", logger)))...,
		),

		AutoListAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListAuthenticationPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAuthenticationPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAuthenticationPolicy", logger)))...,
		),

		AutoListUserHdlr: grpctransport.NewServer(
			endpoints.AutoListUserEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespUserList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListUser", logger)))...,
		),

		AutoUpdateAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAuthenticationPolicy", logger)))...,
		),

		AutoUpdateUserHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateUser", logger)))...,
		),
	}
}

func (s *grpcServerAuthV1) AutoAddAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoAddAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoAddAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoAddAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoAddUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddUser).V
	return &r, resp.(respAuthV1AutoAddUser).Err
}

func decodeHTTPrespAuthV1AutoAddUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoDeleteAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoDeleteAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoDeleteAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoDeleteUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteUser).V
	return &r, resp.(respAuthV1AutoDeleteUser).Err
}

func decodeHTTPrespAuthV1AutoDeleteUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoGetAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoGetAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoGetAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoGetUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetUser).V
	return &r, resp.(respAuthV1AutoGetUser).Err
}

func decodeHTTPrespAuthV1AutoGetUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListAuthenticationPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	_, resp, err := s.AutoListAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoListAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoListAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListUser(ctx oldcontext.Context, req *api.ListWatchOptions) (*UserList, error) {
	_, resp, err := s.AutoListUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListUser).V
	return &r, resp.(respAuthV1AutoListUser).Err
}

func decodeHTTPrespAuthV1AutoListUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp UserList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoUpdateAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoUpdateAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoUpdateAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoUpdateUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateUser).V
	return &r, resp.(respAuthV1AutoUpdateUser).Err
}

func decodeHTTPrespAuthV1AutoUpdateUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) error {
	return s.Endpoints.AutoWatchUser(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) error {
	return s.Endpoints.AutoWatchAuthenticationPolicy(in, stream)
}

func encodeHTTPAuthenticationPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicy encodes GRPC request
func EncodeGrpcReqAuthenticationPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicy)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicy decodes GRPC request
func DecodeGrpcReqAuthenticationPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicy)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicy encodes GRC response
func EncodeGrpcRespAuthenticationPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicy decodes GRPC response
func DecodeGrpcRespAuthenticationPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicyList encodes GRPC request
func EncodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicyList decodes GRPC request
func DecodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicyList endodes the GRPC response
func EncodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicyList decodes the GRPC response
func DecodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicySpec encodes GRPC request
func EncodeGrpcReqAuthenticationPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicySpec)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicySpec decodes GRPC request
func DecodeGrpcReqAuthenticationPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicySpec)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicySpec encodes GRC response
func EncodeGrpcRespAuthenticationPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicySpec decodes GRPC response
func DecodeGrpcRespAuthenticationPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicyStatus encodes GRPC request
func EncodeGrpcReqAuthenticationPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyStatus)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicyStatus decodes GRPC request
func DecodeGrpcReqAuthenticationPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyStatus)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicyStatus encodes GRC response
func EncodeGrpcRespAuthenticationPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicyStatus decodes GRPC response
func DecodeGrpcRespAuthenticationPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticators(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticators(_ context.Context, r *http.Request) (interface{}, error) {
	var req Authenticators
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticators encodes GRPC request
func EncodeGrpcReqAuthenticators(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Authenticators)
	return req, nil
}

// DecodeGrpcReqAuthenticators decodes GRPC request
func DecodeGrpcReqAuthenticators(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Authenticators)
	return req, nil
}

// EncodeGrpcRespAuthenticators encodes GRC response
func EncodeGrpcRespAuthenticators(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticators decodes GRPC response
func DecodeGrpcRespAuthenticators(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLdap(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLdap(_ context.Context, r *http.Request) (interface{}, error) {
	var req Ldap
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLdap encodes GRPC request
func EncodeGrpcReqLdap(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ldap)
	return req, nil
}

// DecodeGrpcReqLdap decodes GRPC request
func DecodeGrpcReqLdap(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ldap)
	return req, nil
}

// EncodeGrpcRespLdap encodes GRC response
func EncodeGrpcRespLdap(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLdap decodes GRPC response
func DecodeGrpcRespLdap(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLdapAttributeMapping(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLdapAttributeMapping(_ context.Context, r *http.Request) (interface{}, error) {
	var req LdapAttributeMapping
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLdapAttributeMapping encodes GRPC request
func EncodeGrpcReqLdapAttributeMapping(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LdapAttributeMapping)
	return req, nil
}

// DecodeGrpcReqLdapAttributeMapping decodes GRPC request
func DecodeGrpcReqLdapAttributeMapping(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LdapAttributeMapping)
	return req, nil
}

// EncodeGrpcRespLdapAttributeMapping encodes GRC response
func EncodeGrpcRespLdapAttributeMapping(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLdapAttributeMapping decodes GRPC response
func DecodeGrpcRespLdapAttributeMapping(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLocal(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLocal(_ context.Context, r *http.Request) (interface{}, error) {
	var req Local
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLocal encodes GRPC request
func EncodeGrpcReqLocal(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Local)
	return req, nil
}

// DecodeGrpcReqLocal decodes GRPC request
func DecodeGrpcReqLocal(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Local)
	return req, nil
}

// EncodeGrpcRespLocal encodes GRC response
func EncodeGrpcRespLocal(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLocal decodes GRPC response
func DecodeGrpcRespLocal(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRadius(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRadius(_ context.Context, r *http.Request) (interface{}, error) {
	var req Radius
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRadius encodes GRPC request
func EncodeGrpcReqRadius(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Radius)
	return req, nil
}

// DecodeGrpcReqRadius decodes GRPC request
func DecodeGrpcReqRadius(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Radius)
	return req, nil
}

// EncodeGrpcRespRadius encodes GRC response
func EncodeGrpcRespRadius(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRadius decodes GRPC response
func DecodeGrpcRespRadius(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSOptions(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSOptions(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSOptions
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSOptions encodes GRPC request
func EncodeGrpcReqTLSOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSOptions)
	return req, nil
}

// DecodeGrpcReqTLSOptions decodes GRPC request
func DecodeGrpcReqTLSOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSOptions)
	return req, nil
}

// EncodeGrpcRespTLSOptions encodes GRC response
func EncodeGrpcRespTLSOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSOptions decodes GRPC response
func DecodeGrpcRespTLSOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUser(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUser(_ context.Context, r *http.Request) (interface{}, error) {
	var req User
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUser encodes GRPC request
func EncodeGrpcReqUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*User)
	return req, nil
}

// DecodeGrpcReqUser decodes GRPC request
func DecodeGrpcReqUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*User)
	return req, nil
}

// EncodeGrpcRespUser encodes GRC response
func EncodeGrpcRespUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUser decodes GRPC response
func DecodeGrpcRespUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserList(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserList encodes GRPC request
func EncodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// DecodeGrpcReqUserList decodes GRPC request
func DecodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// EncodeGrpcRespUserList endodes the GRPC response
func EncodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserList decodes the GRPC response
func DecodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserSpec encodes GRPC request
func EncodeGrpcReqUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserSpec)
	return req, nil
}

// DecodeGrpcReqUserSpec decodes GRPC request
func DecodeGrpcReqUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserSpec)
	return req, nil
}

// EncodeGrpcRespUserSpec encodes GRC response
func EncodeGrpcRespUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserSpec decodes GRPC response
func DecodeGrpcRespUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserStatus encodes GRPC request
func EncodeGrpcReqUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserStatus)
	return req, nil
}

// DecodeGrpcReqUserStatus decodes GRPC request
func DecodeGrpcReqUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserStatus)
	return req, nil
}

// EncodeGrpcRespUserStatus encodes GRC response
func EncodeGrpcRespUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserStatus decodes GRPC response
func DecodeGrpcRespUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
