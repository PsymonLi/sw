// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: protos/auth.proto
*/
package auth

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerAuthV1 struct {
	Endpoints EndpointsAuthV1Server

	AutoAddAuthenticationPolicyHdlr    grpctransport.Handler
	AutoAddRoleHdlr                    grpctransport.Handler
	AutoAddRoleBindingHdlr             grpctransport.Handler
	AutoAddUserHdlr                    grpctransport.Handler
	AutoDeleteAuthenticationPolicyHdlr grpctransport.Handler
	AutoDeleteRoleHdlr                 grpctransport.Handler
	AutoDeleteRoleBindingHdlr          grpctransport.Handler
	AutoDeleteUserHdlr                 grpctransport.Handler
	AutoGetAuthenticationPolicyHdlr    grpctransport.Handler
	AutoGetRoleHdlr                    grpctransport.Handler
	AutoGetRoleBindingHdlr             grpctransport.Handler
	AutoGetUserHdlr                    grpctransport.Handler
	AutoListAuthenticationPolicyHdlr   grpctransport.Handler
	AutoListRoleHdlr                   grpctransport.Handler
	AutoListRoleBindingHdlr            grpctransport.Handler
	AutoListUserHdlr                   grpctransport.Handler
	AutoUpdateAuthenticationPolicyHdlr grpctransport.Handler
	AutoUpdateRoleHdlr                 grpctransport.Handler
	AutoUpdateRoleBindingHdlr          grpctransport.Handler
	AutoUpdateUserHdlr                 grpctransport.Handler
}

// MakeGRPCServerAuthV1 creates a GRPC server for AuthV1 service
func MakeGRPCServerAuthV1(ctx context.Context, endpoints EndpointsAuthV1Server, logger log.Logger) AuthV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAuthV1{
		Endpoints: endpoints,
		AutoAddAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAuthenticationPolicy", logger)))...,
		),

		AutoAddRoleHdlr: grpctransport.NewServer(
			endpoints.AutoAddRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRole", logger)))...,
		),

		AutoAddRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoAddRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRoleBinding", logger)))...,
		),

		AutoAddUserHdlr: grpctransport.NewServer(
			endpoints.AutoAddUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddUser", logger)))...,
		),

		AutoDeleteAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAuthenticationPolicy", logger)))...,
		),

		AutoDeleteRoleHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRole", logger)))...,
		),

		AutoDeleteRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRoleBinding", logger)))...,
		),

		AutoDeleteUserHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteUser", logger)))...,
		),

		AutoGetAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAuthenticationPolicy", logger)))...,
		),

		AutoGetRoleHdlr: grpctransport.NewServer(
			endpoints.AutoGetRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRole", logger)))...,
		),

		AutoGetRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoGetRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRoleBinding", logger)))...,
		),

		AutoGetUserHdlr: grpctransport.NewServer(
			endpoints.AutoGetUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetUser", logger)))...,
		),

		AutoListAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListAuthenticationPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAuthenticationPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAuthenticationPolicy", logger)))...,
		),

		AutoListRoleHdlr: grpctransport.NewServer(
			endpoints.AutoListRoleEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRoleList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRole", logger)))...,
		),

		AutoListRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoListRoleBindingEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRoleBindingList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRoleBinding", logger)))...,
		),

		AutoListUserHdlr: grpctransport.NewServer(
			endpoints.AutoListUserEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespUserList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListUser", logger)))...,
		),

		AutoUpdateAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAuthenticationPolicy", logger)))...,
		),

		AutoUpdateRoleHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRole", logger)))...,
		),

		AutoUpdateRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRoleBinding", logger)))...,
		),

		AutoUpdateUserHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateUser", logger)))...,
		),
	}
}

func (s *grpcServerAuthV1) AutoAddAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoAddAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoAddAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoAddAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoAddRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddRole).V
	return &r, resp.(respAuthV1AutoAddRole).Err
}

func decodeHTTPrespAuthV1AutoAddRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoAddRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddRoleBinding).V
	return &r, resp.(respAuthV1AutoAddRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoAddRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoAddUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddUser).V
	return &r, resp.(respAuthV1AutoAddUser).Err
}

func decodeHTTPrespAuthV1AutoAddUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoDeleteAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoDeleteAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoDeleteAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoDeleteRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteRole).V
	return &r, resp.(respAuthV1AutoDeleteRole).Err
}

func decodeHTTPrespAuthV1AutoDeleteRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoDeleteRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteRoleBinding).V
	return &r, resp.(respAuthV1AutoDeleteRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoDeleteRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoDeleteUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteUser).V
	return &r, resp.(respAuthV1AutoDeleteUser).Err
}

func decodeHTTPrespAuthV1AutoDeleteUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoGetAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoGetAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoGetAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoGetRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetRole).V
	return &r, resp.(respAuthV1AutoGetRole).Err
}

func decodeHTTPrespAuthV1AutoGetRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoGetRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetRoleBinding).V
	return &r, resp.(respAuthV1AutoGetRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoGetRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoGetUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetUser).V
	return &r, resp.(respAuthV1AutoGetUser).Err
}

func decodeHTTPrespAuthV1AutoGetUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListAuthenticationPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	_, resp, err := s.AutoListAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoListAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoListAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListRole(ctx oldcontext.Context, req *api.ListWatchOptions) (*RoleList, error) {
	_, resp, err := s.AutoListRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListRole).V
	return &r, resp.(respAuthV1AutoListRole).Err
}

func decodeHTTPrespAuthV1AutoListRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListRoleBinding(ctx oldcontext.Context, req *api.ListWatchOptions) (*RoleBindingList, error) {
	_, resp, err := s.AutoListRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListRoleBinding).V
	return &r, resp.(respAuthV1AutoListRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoListRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBindingList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListUser(ctx oldcontext.Context, req *api.ListWatchOptions) (*UserList, error) {
	_, resp, err := s.AutoListUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListUser).V
	return &r, resp.(respAuthV1AutoListUser).Err
}

func decodeHTTPrespAuthV1AutoListUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp UserList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoUpdateAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoUpdateAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoUpdateAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoUpdateRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateRole).V
	return &r, resp.(respAuthV1AutoUpdateRole).Err
}

func decodeHTTPrespAuthV1AutoUpdateRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoUpdateRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateRoleBinding).V
	return &r, resp.(respAuthV1AutoUpdateRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoUpdateRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoUpdateUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateUser).V
	return &r, resp.(respAuthV1AutoUpdateUser).Err
}

func decodeHTTPrespAuthV1AutoUpdateUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) error {
	return s.Endpoints.AutoWatchUser(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) error {
	return s.Endpoints.AutoWatchAuthenticationPolicy(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchRole(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleServer) error {
	return s.Endpoints.AutoWatchRole(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchRoleBinding(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleBindingServer) error {
	return s.Endpoints.AutoWatchRoleBinding(in, stream)
}

func encodeHTTPAuthenticationPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicy encodes GRPC request
func EncodeGrpcReqAuthenticationPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicy)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicy decodes GRPC request
func DecodeGrpcReqAuthenticationPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicy)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicy encodes GRC response
func EncodeGrpcRespAuthenticationPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicy decodes GRPC response
func DecodeGrpcRespAuthenticationPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicyList encodes GRPC request
func EncodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicyList decodes GRPC request
func DecodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicyList endodes the GRPC response
func EncodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicyList decodes the GRPC response
func DecodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicySpec encodes GRPC request
func EncodeGrpcReqAuthenticationPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicySpec)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicySpec decodes GRPC request
func DecodeGrpcReqAuthenticationPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicySpec)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicySpec encodes GRC response
func EncodeGrpcRespAuthenticationPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicySpec decodes GRPC response
func DecodeGrpcRespAuthenticationPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticationPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicyStatus encodes GRPC request
func EncodeGrpcReqAuthenticationPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyStatus)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicyStatus decodes GRPC request
func DecodeGrpcReqAuthenticationPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyStatus)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicyStatus encodes GRC response
func EncodeGrpcRespAuthenticationPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicyStatus decodes GRPC response
func DecodeGrpcRespAuthenticationPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthenticators(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticators(_ context.Context, r *http.Request) (interface{}, error) {
	var req Authenticators
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticators encodes GRPC request
func EncodeGrpcReqAuthenticators(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Authenticators)
	return req, nil
}

// DecodeGrpcReqAuthenticators decodes GRPC request
func DecodeGrpcReqAuthenticators(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Authenticators)
	return req, nil
}

// EncodeGrpcRespAuthenticators encodes GRC response
func EncodeGrpcRespAuthenticators(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticators decodes GRPC response
func DecodeGrpcRespAuthenticators(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLdap(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLdap(_ context.Context, r *http.Request) (interface{}, error) {
	var req Ldap
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLdap encodes GRPC request
func EncodeGrpcReqLdap(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ldap)
	return req, nil
}

// DecodeGrpcReqLdap decodes GRPC request
func DecodeGrpcReqLdap(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ldap)
	return req, nil
}

// EncodeGrpcRespLdap encodes GRC response
func EncodeGrpcRespLdap(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLdap decodes GRPC response
func DecodeGrpcRespLdap(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLdapAttributeMapping(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLdapAttributeMapping(_ context.Context, r *http.Request) (interface{}, error) {
	var req LdapAttributeMapping
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLdapAttributeMapping encodes GRPC request
func EncodeGrpcReqLdapAttributeMapping(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LdapAttributeMapping)
	return req, nil
}

// DecodeGrpcReqLdapAttributeMapping decodes GRPC request
func DecodeGrpcReqLdapAttributeMapping(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LdapAttributeMapping)
	return req, nil
}

// EncodeGrpcRespLdapAttributeMapping encodes GRC response
func EncodeGrpcRespLdapAttributeMapping(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLdapAttributeMapping decodes GRPC response
func DecodeGrpcRespLdapAttributeMapping(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLocal(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLocal(_ context.Context, r *http.Request) (interface{}, error) {
	var req Local
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLocal encodes GRPC request
func EncodeGrpcReqLocal(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Local)
	return req, nil
}

// DecodeGrpcReqLocal decodes GRPC request
func DecodeGrpcReqLocal(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Local)
	return req, nil
}

// EncodeGrpcRespLocal encodes GRC response
func EncodeGrpcRespLocal(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLocal decodes GRPC response
func DecodeGrpcRespLocal(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPermission(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPermission(_ context.Context, r *http.Request) (interface{}, error) {
	var req Permission
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPermission encodes GRPC request
func EncodeGrpcReqPermission(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Permission)
	return req, nil
}

// DecodeGrpcReqPermission decodes GRPC request
func DecodeGrpcReqPermission(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Permission)
	return req, nil
}

// EncodeGrpcRespPermission encodes GRC response
func EncodeGrpcRespPermission(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPermission decodes GRPC response
func DecodeGrpcRespPermission(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRadius(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRadius(_ context.Context, r *http.Request) (interface{}, error) {
	var req Radius
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRadius encodes GRPC request
func EncodeGrpcReqRadius(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Radius)
	return req, nil
}

// DecodeGrpcReqRadius decodes GRPC request
func DecodeGrpcReqRadius(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Radius)
	return req, nil
}

// EncodeGrpcRespRadius encodes GRC response
func EncodeGrpcRespRadius(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRadius decodes GRPC response
func DecodeGrpcRespRadius(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRole(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRole(_ context.Context, r *http.Request) (interface{}, error) {
	var req Role
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRole encodes GRPC request
func EncodeGrpcReqRole(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Role)
	return req, nil
}

// DecodeGrpcReqRole decodes GRPC request
func DecodeGrpcReqRole(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Role)
	return req, nil
}

// EncodeGrpcRespRole encodes GRC response
func EncodeGrpcRespRole(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRole decodes GRPC response
func DecodeGrpcRespRole(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleBinding(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleBinding(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleBinding
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleBinding encodes GRPC request
func EncodeGrpcReqRoleBinding(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBinding)
	return req, nil
}

// DecodeGrpcReqRoleBinding decodes GRPC request
func DecodeGrpcReqRoleBinding(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBinding)
	return req, nil
}

// EncodeGrpcRespRoleBinding encodes GRC response
func EncodeGrpcRespRoleBinding(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleBinding decodes GRPC response
func DecodeGrpcRespRoleBinding(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleBindingList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleBindingList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleBindingList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleBindingList encodes GRPC request
func EncodeGrpcReqRoleBindingList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingList)
	return req, nil
}

// DecodeGrpcReqRoleBindingList decodes GRPC request
func DecodeGrpcReqRoleBindingList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingList)
	return req, nil
}

// EncodeGrpcRespRoleBindingList endodes the GRPC response
func EncodeGrpcRespRoleBindingList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleBindingList decodes the GRPC response
func DecodeGrpcRespRoleBindingList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleBindingSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleBindingSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleBindingSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleBindingSpec encodes GRPC request
func EncodeGrpcReqRoleBindingSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingSpec)
	return req, nil
}

// DecodeGrpcReqRoleBindingSpec decodes GRPC request
func DecodeGrpcReqRoleBindingSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingSpec)
	return req, nil
}

// EncodeGrpcRespRoleBindingSpec encodes GRC response
func EncodeGrpcRespRoleBindingSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleBindingSpec decodes GRPC response
func DecodeGrpcRespRoleBindingSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleBindingStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleBindingStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleBindingStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleBindingStatus encodes GRPC request
func EncodeGrpcReqRoleBindingStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingStatus)
	return req, nil
}

// DecodeGrpcReqRoleBindingStatus decodes GRPC request
func DecodeGrpcReqRoleBindingStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingStatus)
	return req, nil
}

// EncodeGrpcRespRoleBindingStatus encodes GRC response
func EncodeGrpcRespRoleBindingStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleBindingStatus decodes GRPC response
func DecodeGrpcRespRoleBindingStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleList encodes GRPC request
func EncodeGrpcReqRoleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleList)
	return req, nil
}

// DecodeGrpcReqRoleList decodes GRPC request
func DecodeGrpcReqRoleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleList)
	return req, nil
}

// EncodeGrpcRespRoleList endodes the GRPC response
func EncodeGrpcRespRoleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleList decodes the GRPC response
func DecodeGrpcRespRoleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleSpec encodes GRPC request
func EncodeGrpcReqRoleSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleSpec)
	return req, nil
}

// DecodeGrpcReqRoleSpec decodes GRPC request
func DecodeGrpcReqRoleSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleSpec)
	return req, nil
}

// EncodeGrpcRespRoleSpec encodes GRC response
func EncodeGrpcRespRoleSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleSpec decodes GRPC response
func DecodeGrpcRespRoleSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleStatus encodes GRPC request
func EncodeGrpcReqRoleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleStatus)
	return req, nil
}

// DecodeGrpcReqRoleStatus decodes GRPC request
func DecodeGrpcReqRoleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleStatus)
	return req, nil
}

// EncodeGrpcRespRoleStatus encodes GRC response
func EncodeGrpcRespRoleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleStatus decodes GRPC response
func DecodeGrpcRespRoleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSOptions(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSOptions(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSOptions
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSOptions encodes GRPC request
func EncodeGrpcReqTLSOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSOptions)
	return req, nil
}

// DecodeGrpcReqTLSOptions decodes GRPC request
func DecodeGrpcReqTLSOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSOptions)
	return req, nil
}

// EncodeGrpcRespTLSOptions encodes GRC response
func EncodeGrpcRespTLSOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSOptions decodes GRPC response
func DecodeGrpcRespTLSOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUser(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUser(_ context.Context, r *http.Request) (interface{}, error) {
	var req User
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUser encodes GRPC request
func EncodeGrpcReqUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*User)
	return req, nil
}

// DecodeGrpcReqUser decodes GRPC request
func DecodeGrpcReqUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*User)
	return req, nil
}

// EncodeGrpcRespUser encodes GRC response
func EncodeGrpcRespUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUser decodes GRPC response
func DecodeGrpcRespUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserList(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserList encodes GRPC request
func EncodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// DecodeGrpcReqUserList decodes GRPC request
func DecodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// EncodeGrpcRespUserList endodes the GRPC response
func EncodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserList decodes the GRPC response
func DecodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserSpec encodes GRPC request
func EncodeGrpcReqUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserSpec)
	return req, nil
}

// DecodeGrpcReqUserSpec decodes GRPC request
func DecodeGrpcReqUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserSpec)
	return req, nil
}

// EncodeGrpcRespUserSpec encodes GRC response
func EncodeGrpcRespUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserSpec decodes GRPC response
func DecodeGrpcRespUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserStatus encodes GRPC request
func EncodeGrpcReqUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserStatus)
	return req, nil
}

// DecodeGrpcReqUserStatus decodes GRPC request
func DecodeGrpcReqUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserStatus)
	return req, nil
}

// EncodeGrpcRespUserStatus encodes GRC response
func EncodeGrpcRespUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserStatus decodes GRPC response
func DecodeGrpcRespUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
