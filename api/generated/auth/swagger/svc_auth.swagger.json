{
  "swagger": "2.0",
  "info": {
    "title": "Service name",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/authn-policy": {
      "post": {
        "operationId": "AutoAddAuthenticationPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/authn-policy/{O.Name}": {
      "get": {
        "operationId": "AutoGetAuthenticationPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Tenant",
            "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.Enabled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Authenticators.Ldap.Url",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.TLSOptions.StartTLS",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Authenticators.Ldap.TLSOptions.SkipServerCertVerification",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Authenticators.Ldap.TLSOptions.ServerName",
            "description": "Spec contains the configuration of the role.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.TLSOptions.TrustedCerts",
            "description": "Status contains the current state of the role.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.BaseDN",
            "description": "Order in which authenticators are applied. If an authenticator returns success, others are skipped.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.BindDN",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.BindPassword",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.User",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.UserObjectClass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.Tenant",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.Group",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.GroupObjectClass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.Email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Ldap.AttributeMapping.Fullname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Local.Enabled",
            "description": "StartTLS determines if ldap connection uses TLS.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Authenticators.Radius.Enabled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Authenticators.Radius.Ip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Radius.Port",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Radius.NasIp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.Radius.Secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Authenticators.AuthenticatorOrder",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.Secret",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteAuthenticationPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateAuthenticationPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authAuthenticationPolicy"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/role-bindings": {
      "get": {
        "operationId": "AutoListRoleBinding",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleBindingList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "post": {
        "operationId": "AutoAddRoleBinding",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/role-bindings/{O.Name}": {
      "get": {
        "operationId": "AutoGetRoleBinding",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Users",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.UserGroups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.Role",
            "description": "Spec contains configuration of authentication mechanisms.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteRoleBinding",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateRoleBinding",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRoleBinding"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/roles": {
      "get": {
        "operationId": "AutoListRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRoleList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "post": {
        "operationId": "AutoAddRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/roles/{O.Name}": {
      "get": {
        "operationId": "AutoGetRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateRole",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRole"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/users": {
      "get": {
        "operationId": "AutoListUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authUserList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "post": {
        "operationId": "AutoAddUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    },
    "/{O.Tenant}/users/{O.Name}": {
      "get": {
        "operationId": "AutoGetUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Fullname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Roles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.UserGroups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.LastSuccessfulLogin.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authUser"
            }
          }
        ],
        "tags": [
          "AuthV1"
        ]
      }
    }
  },
  "definitions": {
    "apiListMeta": {
      "type": "object",
      "properties": {
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "LabelSelector": {
          "type": "string"
        },
        "FieldSelector": {
          "type": "string"
        },
        "PrefixWatch": {
          "type": "boolean",
          "format": "boolean"
        },
        "FieldChangeSelector": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "Tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "UUID": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "CreationTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "CreationTime is the creation time of Object"
        },
        "ModTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "ModTime is the Last Modification time of Object"
        },
        "SelfLink": {
          "type": "string",
          "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway."
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "APIVersion": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "authAuthenticationPolicy": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/authAuthenticationPolicySpec"
        },
        "Status": {
          "$ref": "#/definitions/authAuthenticationPolicyStatus"
        }
      },
      "title": "spec part of user object"
    },
    "authAuthenticationPolicyList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authAuthenticationPolicy"
          }
        }
      }
    },
    "authAuthenticationPolicySpec": {
      "type": "object",
      "properties": {
        "Authenticators": {
          "$ref": "#/definitions/authAuthenticators"
        },
        "Secret": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "status part of user object"
    },
    "authAuthenticationPolicyStatus": {
      "type": "object",
      "title": "User could be local or external"
    },
    "authAuthenticators": {
      "type": "object",
      "properties": {
        "Ldap": {
          "$ref": "#/definitions/authLdap"
        },
        "Local": {
          "$ref": "#/definitions/authLocal",
          "title": "Secret used to sign JWT token"
        },
        "Radius": {
          "$ref": "#/definitions/authRadius"
        },
        "AuthenticatorOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "spec part of authentication policy object"
    },
    "authAutoMsgAuthenticationPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/authAuthenticationPolicy"
        }
      }
    },
    "authAutoMsgRoleBindingWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/authRoleBinding"
        }
      }
    },
    "authAutoMsgRoleWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/authRole"
        }
      }
    },
    "authAutoMsgUserWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/authUser"
        }
      }
    },
    "authLdap": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "Url": {
          "type": "string"
        },
        "TLSOptions": {
          "$ref": "#/definitions/authTLSOptions"
        },
        "BaseDN": {
          "type": "string",
          "title": "Order in which authenticators are applied. If an authenticator returns success, others are skipped"
        },
        "BindDN": {
          "type": "string"
        },
        "BindPassword": {
          "type": "string"
        },
        "AttributeMapping": {
          "$ref": "#/definitions/authLdapAttributeMapping"
        }
      }
    },
    "authLdapAttributeMapping": {
      "type": "object",
      "properties": {
        "User": {
          "type": "string"
        },
        "UserObjectClass": {
          "type": "string"
        },
        "Tenant": {
          "type": "string"
        },
        "Group": {
          "type": "string"
        },
        "GroupObjectClass": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Fullname": {
          "type": "string"
        }
      }
    },
    "authLocal": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "StartTLS determines if ldap connection uses TLS"
        }
      }
    },
    "authPermission": {
      "type": "object",
      "properties": {
        "ResourceTenant": {
          "type": "string"
        },
        "ResourceGroup": {
          "type": "string",
          "title": "UserObjectClass is the STRUCTURAL object class for user entry in LDAP. It is used as a filter for user search"
        },
        "ResourceKind": {
          "type": "string"
        },
        "ResourceNamespace": {
          "type": "string"
        },
        "ResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "GroupObjectClass is the STRUCTURAL object class for group entry in LDAP. It is used as a filter for group search"
        },
        "Actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "authRadius": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "Ip": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        },
        "NasIp": {
          "type": "string"
        },
        "Secret": {
          "type": "string"
        }
      }
    },
    "authRole": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/authRoleSpec"
        },
        "Status": {
          "$ref": "#/definitions/authRoleStatus"
        }
      }
    },
    "authRoleBinding": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/authRoleBindingSpec"
        },
        "Status": {
          "$ref": "#/definitions/authRoleBindingStatus"
        }
      },
      "title": "status part of authentication policy object"
    },
    "authRoleBindingList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authRoleBinding"
          }
        }
      }
    },
    "authRoleBindingSpec": {
      "type": "object",
      "properties": {
        "Users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Role": {
          "type": "string",
          "description": "Spec contains configuration of authentication mechanisms."
        }
      },
      "title": "AuthenticationPolicy defines various authentication mechanisms available and order in which they are used"
    },
    "authRoleBindingStatus": {
      "type": "object",
      "description": "Permission defines if actions are allowed on resource group, resource type, resource name or arbitrary API endpoints."
    },
    "authRoleList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authRole"
          }
        }
      }
    },
    "authRoleSpec": {
      "type": "object",
      "properties": {
        "Permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authPermission"
          },
          "title": "Permissions define actions allowed on resources. A resource can be an API Server object or an arbitrary API endpoint"
        }
      },
      "title": "spec part of role object"
    },
    "authRoleStatus": {
      "type": "object",
      "title": "status part of role object"
    },
    "authTLSOptions": {
      "type": "object",
      "properties": {
        "StartTLS": {
          "type": "boolean",
          "format": "boolean"
        },
        "SkipServerCertVerification": {
          "type": "boolean",
          "format": "boolean"
        },
        "ServerName": {
          "type": "string",
          "description": "Spec contains the configuration of the role."
        },
        "TrustedCerts": {
          "type": "string",
          "description": "Status contains the current state of the role."
        }
      },
      "title": "Role is a collection of permissions"
    },
    "authUser": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/authUserSpec"
        },
        "Status": {
          "$ref": "#/definitions/authUserStatus"
        }
      },
      "title": "spec part of role binding object"
    },
    "authUserList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/authUser"
          }
        }
      }
    },
    "authUserSpec": {
      "type": "object",
      "properties": {
        "Fullname": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "title": "status part of role binding object"
    },
    "authUserStatus": {
      "type": "object",
      "properties": {
        "Roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastSuccessfulLogin": {
          "$ref": "#/definitions/apiTimestamp",
          "description": "Spec contains the configuration of the role binding."
        }
      },
      "title": "RoleBinding is an assignment of a role to users or groups"
    }
  }
}
