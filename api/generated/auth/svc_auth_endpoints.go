// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: svc_auth.proto
*/
package auth

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareAuthV1Client add middleware to the client
type MiddlewareAuthV1Client func(ServiceAuthV1Client) ServiceAuthV1Client

// EndpointsAuthV1Client is the endpoints for the client
type EndpointsAuthV1Client struct {
	Client                     AuthV1Client
	AutoWatchSvcAuthV1Endpoint endpoint.Endpoint

	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddRoleEndpoint                    endpoint.Endpoint
	AutoAddRoleBindingEndpoint             endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteRoleEndpoint                 endpoint.Endpoint
	AutoDeleteRoleBindingEndpoint          endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetRoleEndpoint                    endpoint.Endpoint
	AutoGetRoleBindingEndpoint             endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListRoleEndpoint                   endpoint.Endpoint
	AutoListRoleBindingEndpoint            endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateRoleEndpoint                 endpoint.Endpoint
	AutoUpdateRoleBindingEndpoint          endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint
	LdapBindCheckEndpoint                  endpoint.Endpoint
	LdapConnectionCheckEndpoint            endpoint.Endpoint
	PasswordChangeEndpoint                 endpoint.Endpoint
	PasswordResetEndpoint                  endpoint.Endpoint
}

// EndpointsAuthV1RestClient is the REST client
type EndpointsAuthV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddRoleEndpoint                    endpoint.Endpoint
	AutoAddRoleBindingEndpoint             endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteRoleEndpoint                 endpoint.Endpoint
	AutoDeleteRoleBindingEndpoint          endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetRoleEndpoint                    endpoint.Endpoint
	AutoGetRoleBindingEndpoint             endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListRoleEndpoint                   endpoint.Endpoint
	AutoListRoleBindingEndpoint            endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateRoleEndpoint                 endpoint.Endpoint
	AutoUpdateRoleBindingEndpoint          endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint
	AutoWatchAuthenticationPolicyEndpoint  endpoint.Endpoint
	AutoWatchRoleEndpoint                  endpoint.Endpoint
	AutoWatchRoleBindingEndpoint           endpoint.Endpoint
	AutoWatchSvcAuthV1Endpoint             endpoint.Endpoint
	AutoWatchUserEndpoint                  endpoint.Endpoint
	LdapBindCheckEndpoint                  endpoint.Endpoint
	LdapConnectionCheckEndpoint            endpoint.Endpoint
	PasswordChangeEndpoint                 endpoint.Endpoint
	PasswordResetEndpoint                  endpoint.Endpoint
}

// MiddlewareAuthV1Server adds middle ware to the server
type MiddlewareAuthV1Server func(ServiceAuthV1Server) ServiceAuthV1Server

// EndpointsAuthV1Server is the server endpoints
type EndpointsAuthV1Server struct {
	svcWatchHandlerAuthV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddRoleEndpoint                    endpoint.Endpoint
	AutoAddRoleBindingEndpoint             endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteRoleEndpoint                 endpoint.Endpoint
	AutoDeleteRoleBindingEndpoint          endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetRoleEndpoint                    endpoint.Endpoint
	AutoGetRoleBindingEndpoint             endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListRoleEndpoint                   endpoint.Endpoint
	AutoListRoleBindingEndpoint            endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateRoleEndpoint                 endpoint.Endpoint
	AutoUpdateRoleBindingEndpoint          endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint
	LdapBindCheckEndpoint                  endpoint.Endpoint
	LdapConnectionCheckEndpoint            endpoint.Endpoint
	PasswordChangeEndpoint                 endpoint.Endpoint
	PasswordResetEndpoint                  endpoint.Endpoint

	watchHandlerUser                 func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAuthenticationPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerRole                 func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerRoleBinding          func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAuthenticationPolicy is endpoint for AutoAddAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoAddAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoAddAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoAddRole is endpoint for AutoAddRole
func (e EndpointsAuthV1Client) AutoAddRole(ctx context.Context, in *Role) (*Role, error) {
	resp, err := e.AutoAddRoleEndpoint(ctx, in)
	if err != nil {
		return &Role{}, err
	}
	return resp.(*Role), nil
}

type respAuthV1AutoAddRole struct {
	V   Role
	Err error
}

// AutoAddRoleBinding is endpoint for AutoAddRoleBinding
func (e EndpointsAuthV1Client) AutoAddRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	resp, err := e.AutoAddRoleBindingEndpoint(ctx, in)
	if err != nil {
		return &RoleBinding{}, err
	}
	return resp.(*RoleBinding), nil
}

type respAuthV1AutoAddRoleBinding struct {
	V   RoleBinding
	Err error
}

// AutoAddUser is endpoint for AutoAddUser
func (e EndpointsAuthV1Client) AutoAddUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoAddUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoAddUser struct {
	V   User
	Err error
}

// AutoDeleteAuthenticationPolicy is endpoint for AutoDeleteAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoDeleteAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoDeleteAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoDeleteRole is endpoint for AutoDeleteRole
func (e EndpointsAuthV1Client) AutoDeleteRole(ctx context.Context, in *Role) (*Role, error) {
	resp, err := e.AutoDeleteRoleEndpoint(ctx, in)
	if err != nil {
		return &Role{}, err
	}
	return resp.(*Role), nil
}

type respAuthV1AutoDeleteRole struct {
	V   Role
	Err error
}

// AutoDeleteRoleBinding is endpoint for AutoDeleteRoleBinding
func (e EndpointsAuthV1Client) AutoDeleteRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	resp, err := e.AutoDeleteRoleBindingEndpoint(ctx, in)
	if err != nil {
		return &RoleBinding{}, err
	}
	return resp.(*RoleBinding), nil
}

type respAuthV1AutoDeleteRoleBinding struct {
	V   RoleBinding
	Err error
}

// AutoDeleteUser is endpoint for AutoDeleteUser
func (e EndpointsAuthV1Client) AutoDeleteUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoDeleteUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoDeleteUser struct {
	V   User
	Err error
}

// AutoGetAuthenticationPolicy is endpoint for AutoGetAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoGetAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoGetAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoGetRole is endpoint for AutoGetRole
func (e EndpointsAuthV1Client) AutoGetRole(ctx context.Context, in *Role) (*Role, error) {
	resp, err := e.AutoGetRoleEndpoint(ctx, in)
	if err != nil {
		return &Role{}, err
	}
	return resp.(*Role), nil
}

type respAuthV1AutoGetRole struct {
	V   Role
	Err error
}

// AutoGetRoleBinding is endpoint for AutoGetRoleBinding
func (e EndpointsAuthV1Client) AutoGetRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	resp, err := e.AutoGetRoleBindingEndpoint(ctx, in)
	if err != nil {
		return &RoleBinding{}, err
	}
	return resp.(*RoleBinding), nil
}

type respAuthV1AutoGetRoleBinding struct {
	V   RoleBinding
	Err error
}

// AutoGetUser is endpoint for AutoGetUser
func (e EndpointsAuthV1Client) AutoGetUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoGetUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoGetUser struct {
	V   User
	Err error
}

// AutoListAuthenticationPolicy is endpoint for AutoListAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	resp, err := e.AutoListAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicyList{}, err
	}
	return resp.(*AuthenticationPolicyList), nil
}

type respAuthV1AutoListAuthenticationPolicy struct {
	V   AuthenticationPolicyList
	Err error
}

// AutoListRole is endpoint for AutoListRole
func (e EndpointsAuthV1Client) AutoListRole(ctx context.Context, in *api.ListWatchOptions) (*RoleList, error) {
	resp, err := e.AutoListRoleEndpoint(ctx, in)
	if err != nil {
		return &RoleList{}, err
	}
	return resp.(*RoleList), nil
}

type respAuthV1AutoListRole struct {
	V   RoleList
	Err error
}

// AutoListRoleBinding is endpoint for AutoListRoleBinding
func (e EndpointsAuthV1Client) AutoListRoleBinding(ctx context.Context, in *api.ListWatchOptions) (*RoleBindingList, error) {
	resp, err := e.AutoListRoleBindingEndpoint(ctx, in)
	if err != nil {
		return &RoleBindingList{}, err
	}
	return resp.(*RoleBindingList), nil
}

type respAuthV1AutoListRoleBinding struct {
	V   RoleBindingList
	Err error
}

// AutoListUser is endpoint for AutoListUser
func (e EndpointsAuthV1Client) AutoListUser(ctx context.Context, in *api.ListWatchOptions) (*UserList, error) {
	resp, err := e.AutoListUserEndpoint(ctx, in)
	if err != nil {
		return &UserList{}, err
	}
	return resp.(*UserList), nil
}

type respAuthV1AutoListUser struct {
	V   UserList
	Err error
}

// AutoUpdateAuthenticationPolicy is endpoint for AutoUpdateAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoUpdateAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoUpdateAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoUpdateRole is endpoint for AutoUpdateRole
func (e EndpointsAuthV1Client) AutoUpdateRole(ctx context.Context, in *Role) (*Role, error) {
	resp, err := e.AutoUpdateRoleEndpoint(ctx, in)
	if err != nil {
		return &Role{}, err
	}
	return resp.(*Role), nil
}

type respAuthV1AutoUpdateRole struct {
	V   Role
	Err error
}

// AutoUpdateRoleBinding is endpoint for AutoUpdateRoleBinding
func (e EndpointsAuthV1Client) AutoUpdateRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	resp, err := e.AutoUpdateRoleBindingEndpoint(ctx, in)
	if err != nil {
		return &RoleBinding{}, err
	}
	return resp.(*RoleBinding), nil
}

type respAuthV1AutoUpdateRoleBinding struct {
	V   RoleBinding
	Err error
}

// AutoUpdateUser is endpoint for AutoUpdateUser
func (e EndpointsAuthV1Client) AutoUpdateUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoUpdateUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoUpdateUser struct {
	V   User
	Err error
}

// LdapBindCheck is endpoint for LdapBindCheck
func (e EndpointsAuthV1Client) LdapBindCheck(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.LdapBindCheckEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1LdapBindCheck struct {
	V   AuthenticationPolicy
	Err error
}

// LdapConnectionCheck is endpoint for LdapConnectionCheck
func (e EndpointsAuthV1Client) LdapConnectionCheck(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.LdapConnectionCheckEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1LdapConnectionCheck struct {
	V   AuthenticationPolicy
	Err error
}

// PasswordChange is endpoint for PasswordChange
func (e EndpointsAuthV1Client) PasswordChange(ctx context.Context, in *PasswordChangeRequest) (*User, error) {
	resp, err := e.PasswordChangeEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1PasswordChange struct {
	V   User
	Err error
}

// PasswordReset is endpoint for PasswordReset
func (e EndpointsAuthV1Client) PasswordReset(ctx context.Context, in *PasswordResetRequest) (*User, error) {
	resp, err := e.PasswordResetEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1PasswordReset struct {
	V   User
	Err error
}

func (e EndpointsAuthV1Client) AutoWatchSvcAuthV1(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchSvcAuthV1Client, error) {
	return e.Client.AutoWatchSvcAuthV1(ctx, in)
}

// AutoWatchUser performs Watch for User
func (e EndpointsAuthV1Client) AutoWatchUser(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchUserClient, error) {
	return e.Client.AutoWatchUser(ctx, in)
}

// AutoWatchAuthenticationPolicy performs Watch for AuthenticationPolicy
func (e EndpointsAuthV1Client) AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchAuthenticationPolicyClient, error) {
	return e.Client.AutoWatchAuthenticationPolicy(ctx, in)
}

// AutoWatchRole performs Watch for Role
func (e EndpointsAuthV1Client) AutoWatchRole(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchRoleClient, error) {
	return e.Client.AutoWatchRole(ctx, in)
}

// AutoWatchRoleBinding performs Watch for RoleBinding
func (e EndpointsAuthV1Client) AutoWatchRoleBinding(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchRoleBindingClient, error) {
	return e.Client.AutoWatchRoleBinding(ctx, in)
}

// AutoAddAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoAddAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoAddAuthenticationPolicyEndpoint creates  AutoAddAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoAddAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoAddAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoAddAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddAuthenticationPolicy")(f)
}

// AutoAddRole implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddRole(ctx context.Context, in Role) (Role, error) {
	resp, err := e.AutoAddRoleEndpoint(ctx, in)
	if err != nil {
		return Role{}, err
	}
	return *resp.(*Role), nil
}

// MakeAuthV1AutoAddRoleEndpoint creates  AutoAddRole endpoints for the service
func MakeAuthV1AutoAddRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Role)
		v, err := s.AutoAddRole(ctx, *req)
		return respAuthV1AutoAddRole{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddRole")(f)
}

// AutoAddRoleBinding implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddRoleBinding(ctx context.Context, in RoleBinding) (RoleBinding, error) {
	resp, err := e.AutoAddRoleBindingEndpoint(ctx, in)
	if err != nil {
		return RoleBinding{}, err
	}
	return *resp.(*RoleBinding), nil
}

// MakeAuthV1AutoAddRoleBindingEndpoint creates  AutoAddRoleBinding endpoints for the service
func MakeAuthV1AutoAddRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoleBinding)
		v, err := s.AutoAddRoleBinding(ctx, *req)
		return respAuthV1AutoAddRoleBinding{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddRoleBinding")(f)
}

// AutoAddUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoAddUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoAddUserEndpoint creates  AutoAddUser endpoints for the service
func MakeAuthV1AutoAddUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoAddUser(ctx, *req)
		return respAuthV1AutoAddUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddUser")(f)
}

// AutoDeleteAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoDeleteAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint creates  AutoDeleteAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoDeleteAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoDeleteAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteAuthenticationPolicy")(f)
}

// AutoDeleteRole implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteRole(ctx context.Context, in Role) (Role, error) {
	resp, err := e.AutoDeleteRoleEndpoint(ctx, in)
	if err != nil {
		return Role{}, err
	}
	return *resp.(*Role), nil
}

// MakeAuthV1AutoDeleteRoleEndpoint creates  AutoDeleteRole endpoints for the service
func MakeAuthV1AutoDeleteRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Role)
		v, err := s.AutoDeleteRole(ctx, *req)
		return respAuthV1AutoDeleteRole{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteRole")(f)
}

// AutoDeleteRoleBinding implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteRoleBinding(ctx context.Context, in RoleBinding) (RoleBinding, error) {
	resp, err := e.AutoDeleteRoleBindingEndpoint(ctx, in)
	if err != nil {
		return RoleBinding{}, err
	}
	return *resp.(*RoleBinding), nil
}

// MakeAuthV1AutoDeleteRoleBindingEndpoint creates  AutoDeleteRoleBinding endpoints for the service
func MakeAuthV1AutoDeleteRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoleBinding)
		v, err := s.AutoDeleteRoleBinding(ctx, *req)
		return respAuthV1AutoDeleteRoleBinding{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteRoleBinding")(f)
}

// AutoDeleteUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoDeleteUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoDeleteUserEndpoint creates  AutoDeleteUser endpoints for the service
func MakeAuthV1AutoDeleteUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoDeleteUser(ctx, *req)
		return respAuthV1AutoDeleteUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteUser")(f)
}

// AutoGetAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoGetAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoGetAuthenticationPolicyEndpoint creates  AutoGetAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoGetAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoGetAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoGetAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetAuthenticationPolicy")(f)
}

// AutoGetRole implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetRole(ctx context.Context, in Role) (Role, error) {
	resp, err := e.AutoGetRoleEndpoint(ctx, in)
	if err != nil {
		return Role{}, err
	}
	return *resp.(*Role), nil
}

// MakeAuthV1AutoGetRoleEndpoint creates  AutoGetRole endpoints for the service
func MakeAuthV1AutoGetRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Role)
		v, err := s.AutoGetRole(ctx, *req)
		return respAuthV1AutoGetRole{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetRole")(f)
}

// AutoGetRoleBinding implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetRoleBinding(ctx context.Context, in RoleBinding) (RoleBinding, error) {
	resp, err := e.AutoGetRoleBindingEndpoint(ctx, in)
	if err != nil {
		return RoleBinding{}, err
	}
	return *resp.(*RoleBinding), nil
}

// MakeAuthV1AutoGetRoleBindingEndpoint creates  AutoGetRoleBinding endpoints for the service
func MakeAuthV1AutoGetRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoleBinding)
		v, err := s.AutoGetRoleBinding(ctx, *req)
		return respAuthV1AutoGetRoleBinding{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetRoleBinding")(f)
}

// AutoGetUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoGetUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoGetUserEndpoint creates  AutoGetUser endpoints for the service
func MakeAuthV1AutoGetUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoGetUser(ctx, *req)
		return respAuthV1AutoGetUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetUser")(f)
}

// AutoListAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListAuthenticationPolicy(ctx context.Context, in api.ListWatchOptions) (AuthenticationPolicyList, error) {
	resp, err := e.AutoListAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicyList{}, err
	}
	return *resp.(*AuthenticationPolicyList), nil
}

// MakeAuthV1AutoListAuthenticationPolicyEndpoint creates  AutoListAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoListAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoListAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListAuthenticationPolicy")(f)
}

// AutoListRole implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListRole(ctx context.Context, in api.ListWatchOptions) (RoleList, error) {
	resp, err := e.AutoListRoleEndpoint(ctx, in)
	if err != nil {
		return RoleList{}, err
	}
	return *resp.(*RoleList), nil
}

// MakeAuthV1AutoListRoleEndpoint creates  AutoListRole endpoints for the service
func MakeAuthV1AutoListRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRole(ctx, *req)
		return respAuthV1AutoListRole{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListRole")(f)
}

// AutoListRoleBinding implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListRoleBinding(ctx context.Context, in api.ListWatchOptions) (RoleBindingList, error) {
	resp, err := e.AutoListRoleBindingEndpoint(ctx, in)
	if err != nil {
		return RoleBindingList{}, err
	}
	return *resp.(*RoleBindingList), nil
}

// MakeAuthV1AutoListRoleBindingEndpoint creates  AutoListRoleBinding endpoints for the service
func MakeAuthV1AutoListRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRoleBinding(ctx, *req)
		return respAuthV1AutoListRoleBinding{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListRoleBinding")(f)
}

// AutoListUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListUser(ctx context.Context, in api.ListWatchOptions) (UserList, error) {
	resp, err := e.AutoListUserEndpoint(ctx, in)
	if err != nil {
		return UserList{}, err
	}
	return *resp.(*UserList), nil
}

// MakeAuthV1AutoListUserEndpoint creates  AutoListUser endpoints for the service
func MakeAuthV1AutoListUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListUser(ctx, *req)
		return respAuthV1AutoListUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListUser")(f)
}

// AutoUpdateAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoUpdateAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint creates  AutoUpdateAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoUpdateAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoUpdateAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateAuthenticationPolicy")(f)
}

// AutoUpdateRole implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateRole(ctx context.Context, in Role) (Role, error) {
	resp, err := e.AutoUpdateRoleEndpoint(ctx, in)
	if err != nil {
		return Role{}, err
	}
	return *resp.(*Role), nil
}

// MakeAuthV1AutoUpdateRoleEndpoint creates  AutoUpdateRole endpoints for the service
func MakeAuthV1AutoUpdateRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Role)
		v, err := s.AutoUpdateRole(ctx, *req)
		return respAuthV1AutoUpdateRole{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateRole")(f)
}

// AutoUpdateRoleBinding implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateRoleBinding(ctx context.Context, in RoleBinding) (RoleBinding, error) {
	resp, err := e.AutoUpdateRoleBindingEndpoint(ctx, in)
	if err != nil {
		return RoleBinding{}, err
	}
	return *resp.(*RoleBinding), nil
}

// MakeAuthV1AutoUpdateRoleBindingEndpoint creates  AutoUpdateRoleBinding endpoints for the service
func MakeAuthV1AutoUpdateRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoleBinding)
		v, err := s.AutoUpdateRoleBinding(ctx, *req)
		return respAuthV1AutoUpdateRoleBinding{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateRoleBinding")(f)
}

// AutoUpdateUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoUpdateUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoUpdateUserEndpoint creates  AutoUpdateUser endpoints for the service
func MakeAuthV1AutoUpdateUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoUpdateUser(ctx, *req)
		return respAuthV1AutoUpdateUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateUser")(f)
}

// LdapBindCheck implementation on server Endpoint
func (e EndpointsAuthV1Server) LdapBindCheck(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.LdapBindCheckEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1LdapBindCheckEndpoint creates  LdapBindCheck endpoints for the service
func MakeAuthV1LdapBindCheckEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.LdapBindCheck(ctx, *req)
		return respAuthV1LdapBindCheck{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:LdapBindCheck")(f)
}

// LdapConnectionCheck implementation on server Endpoint
func (e EndpointsAuthV1Server) LdapConnectionCheck(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.LdapConnectionCheckEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1LdapConnectionCheckEndpoint creates  LdapConnectionCheck endpoints for the service
func MakeAuthV1LdapConnectionCheckEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.LdapConnectionCheck(ctx, *req)
		return respAuthV1LdapConnectionCheck{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:LdapConnectionCheck")(f)
}

// PasswordChange implementation on server Endpoint
func (e EndpointsAuthV1Server) PasswordChange(ctx context.Context, in PasswordChangeRequest) (User, error) {
	resp, err := e.PasswordChangeEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1PasswordChangeEndpoint creates  PasswordChange endpoints for the service
func MakeAuthV1PasswordChangeEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*PasswordChangeRequest)
		v, err := s.PasswordChange(ctx, *req)
		return respAuthV1PasswordChange{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:PasswordChange")(f)
}

// PasswordReset implementation on server Endpoint
func (e EndpointsAuthV1Server) PasswordReset(ctx context.Context, in PasswordResetRequest) (User, error) {
	resp, err := e.PasswordResetEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1PasswordResetEndpoint creates  PasswordReset endpoints for the service
func MakeAuthV1PasswordResetEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*PasswordResetRequest)
		v, err := s.PasswordReset(ctx, *req)
		return respAuthV1PasswordReset{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:PasswordReset")(f)
}

func (e EndpointsAuthV1Server) AutoWatchSvcAuthV1(in *api.ListWatchOptions, stream AuthV1_AutoWatchSvcAuthV1Server) error {
	return e.svcWatchHandlerAuthV1(in, stream)
}

// MakeAutoWatchSvcAuthV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcAuthV1Endpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchSvcAuthV1Server)
		return s.AutoWatchSvcAuthV1(options, wstream)
	}
}

// AutoWatchUser is the watch handler for User on the server side.
func (e EndpointsAuthV1Server) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) error {
	return e.watchHandlerUser(in, stream)
}

// MakeAutoWatchUserEndpoint creates the Watch endpoint
func MakeAutoWatchUserEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchUserServer)
		return s.AutoWatchUser(options, wstream)
	}
}

// AutoWatchAuthenticationPolicy is the watch handler for AuthenticationPolicy on the server side.
func (e EndpointsAuthV1Server) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) error {
	return e.watchHandlerAuthenticationPolicy(in, stream)
}

// MakeAutoWatchAuthenticationPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchAuthenticationPolicyServer)
		return s.AutoWatchAuthenticationPolicy(options, wstream)
	}
}

// AutoWatchRole is the watch handler for Role on the server side.
func (e EndpointsAuthV1Server) AutoWatchRole(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleServer) error {
	return e.watchHandlerRole(in, stream)
}

// MakeAutoWatchRoleEndpoint creates the Watch endpoint
func MakeAutoWatchRoleEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchRoleServer)
		return s.AutoWatchRole(options, wstream)
	}
}

// AutoWatchRoleBinding is the watch handler for RoleBinding on the server side.
func (e EndpointsAuthV1Server) AutoWatchRoleBinding(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleBindingServer) error {
	return e.watchHandlerRoleBinding(in, stream)
}

// MakeAutoWatchRoleBindingEndpoint creates the Watch endpoint
func MakeAutoWatchRoleBindingEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchRoleBindingServer)
		return s.AutoWatchRoleBinding(options, wstream)
	}
}

// MakeAuthV1ServerEndpoints creates server endpoints
func MakeAuthV1ServerEndpoints(s ServiceAuthV1Server, logger log.Logger) EndpointsAuthV1Server {
	return EndpointsAuthV1Server{
		svcWatchHandlerAuthV1: MakeAutoWatchSvcAuthV1Endpoint(s, logger),

		AutoAddAuthenticationPolicyEndpoint:    MakeAuthV1AutoAddAuthenticationPolicyEndpoint(s, logger),
		AutoAddRoleEndpoint:                    MakeAuthV1AutoAddRoleEndpoint(s, logger),
		AutoAddRoleBindingEndpoint:             MakeAuthV1AutoAddRoleBindingEndpoint(s, logger),
		AutoAddUserEndpoint:                    MakeAuthV1AutoAddUserEndpoint(s, logger),
		AutoDeleteAuthenticationPolicyEndpoint: MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint(s, logger),
		AutoDeleteRoleEndpoint:                 MakeAuthV1AutoDeleteRoleEndpoint(s, logger),
		AutoDeleteRoleBindingEndpoint:          MakeAuthV1AutoDeleteRoleBindingEndpoint(s, logger),
		AutoDeleteUserEndpoint:                 MakeAuthV1AutoDeleteUserEndpoint(s, logger),
		AutoGetAuthenticationPolicyEndpoint:    MakeAuthV1AutoGetAuthenticationPolicyEndpoint(s, logger),
		AutoGetRoleEndpoint:                    MakeAuthV1AutoGetRoleEndpoint(s, logger),
		AutoGetRoleBindingEndpoint:             MakeAuthV1AutoGetRoleBindingEndpoint(s, logger),
		AutoGetUserEndpoint:                    MakeAuthV1AutoGetUserEndpoint(s, logger),
		AutoListAuthenticationPolicyEndpoint:   MakeAuthV1AutoListAuthenticationPolicyEndpoint(s, logger),
		AutoListRoleEndpoint:                   MakeAuthV1AutoListRoleEndpoint(s, logger),
		AutoListRoleBindingEndpoint:            MakeAuthV1AutoListRoleBindingEndpoint(s, logger),
		AutoListUserEndpoint:                   MakeAuthV1AutoListUserEndpoint(s, logger),
		AutoUpdateAuthenticationPolicyEndpoint: MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint(s, logger),
		AutoUpdateRoleEndpoint:                 MakeAuthV1AutoUpdateRoleEndpoint(s, logger),
		AutoUpdateRoleBindingEndpoint:          MakeAuthV1AutoUpdateRoleBindingEndpoint(s, logger),
		AutoUpdateUserEndpoint:                 MakeAuthV1AutoUpdateUserEndpoint(s, logger),
		LdapBindCheckEndpoint:                  MakeAuthV1LdapBindCheckEndpoint(s, logger),
		LdapConnectionCheckEndpoint:            MakeAuthV1LdapConnectionCheckEndpoint(s, logger),
		PasswordChangeEndpoint:                 MakeAuthV1PasswordChangeEndpoint(s, logger),
		PasswordResetEndpoint:                  MakeAuthV1PasswordResetEndpoint(s, logger),

		watchHandlerUser:                 MakeAutoWatchUserEndpoint(s, logger),
		watchHandlerAuthenticationPolicy: MakeAutoWatchAuthenticationPolicyEndpoint(s, logger),
		watchHandlerRole:                 MakeAutoWatchRoleEndpoint(s, logger),
		watchHandlerRoleBinding:          MakeAutoWatchRoleBindingEndpoint(s, logger),
	}
}

// LoggingAuthV1MiddlewareClient adds middleware for the client
func LoggingAuthV1MiddlewareClient(logger log.Logger) MiddlewareAuthV1Client {
	return func(next ServiceAuthV1Client) ServiceAuthV1Client {
		return loggingAuthV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAuthV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceAuthV1Client
}

// LoggingAuthV1MiddlewareServer adds middleware for the client
func LoggingAuthV1MiddlewareServer(logger log.Logger) MiddlewareAuthV1Server {
	return func(next ServiceAuthV1Server) ServiceAuthV1Server {
		return loggingAuthV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAuthV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceAuthV1Server
}

func (m loggingAuthV1MiddlewareClient) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoAddRole(ctx context.Context, in *Role) (resp *Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoAddRoleBinding(ctx context.Context, in *RoleBinding) (resp *RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoAddUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteRole(ctx context.Context, in *Role) (resp *Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteRoleBinding(ctx context.Context, in *RoleBinding) (resp *RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetRole(ctx context.Context, in *Role) (resp *Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetRoleBinding(ctx context.Context, in *RoleBinding) (resp *RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AuthenticationPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListRole(ctx context.Context, in *api.ListWatchOptions) (resp *RoleList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListRoleBinding(ctx context.Context, in *api.ListWatchOptions) (resp *RoleBindingList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListUser(ctx context.Context, in *api.ListWatchOptions) (resp *UserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateRole(ctx context.Context, in *Role) (resp *Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateRoleBinding(ctx context.Context, in *RoleBinding) (resp *RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) LdapBindCheck(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "LdapBindCheck", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.LdapBindCheck(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) LdapConnectionCheck(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "LdapConnectionCheck", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.LdapConnectionCheck(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) PasswordChange(ctx context.Context, in *PasswordChangeRequest) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "PasswordChange", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.PasswordChange(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) PasswordReset(ctx context.Context, in *PasswordResetRequest) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "PasswordReset", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.PasswordReset(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareClient) AutoWatchSvcAuthV1(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchSvcAuthV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchSvcAuthV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcAuthV1(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareClient) AutoWatchUser(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchUserClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchUser", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchAuthenticationPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchAuthenticationPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoWatchRole(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchRoleClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchRole", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoWatchRoleBinding(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchRoleBindingClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchRoleBinding", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRoleBinding(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareServer) AutoAddAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoAddRole(ctx context.Context, in Role) (resp Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoAddRoleBinding(ctx context.Context, in RoleBinding) (resp RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoAddUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteRole(ctx context.Context, in Role) (resp Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteRoleBinding(ctx context.Context, in RoleBinding) (resp RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetRole(ctx context.Context, in Role) (resp Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetRoleBinding(ctx context.Context, in RoleBinding) (resp RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListAuthenticationPolicy(ctx context.Context, in api.ListWatchOptions) (resp AuthenticationPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListRole(ctx context.Context, in api.ListWatchOptions) (resp RoleList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListRoleBinding(ctx context.Context, in api.ListWatchOptions) (resp RoleBindingList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListUser(ctx context.Context, in api.ListWatchOptions) (resp UserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateRole(ctx context.Context, in Role) (resp Role, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRole(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateRoleBinding(ctx context.Context, in RoleBinding) (resp RoleBinding, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRoleBinding(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) LdapBindCheck(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "LdapBindCheck", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.LdapBindCheck(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) LdapConnectionCheck(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "LdapConnectionCheck", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.LdapConnectionCheck(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) PasswordChange(ctx context.Context, in PasswordChangeRequest) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "PasswordChange", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.PasswordChange(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) PasswordReset(ctx context.Context, in PasswordResetRequest) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "PasswordReset", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.PasswordReset(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareServer) AutoWatchSvcAuthV1(in *api.ListWatchOptions, stream AuthV1_AutoWatchSvcAuthV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchSvcAuthV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcAuthV1(in, stream)
	return
}

func (m loggingAuthV1MiddlewareServer) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchUser(in, stream)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAuthenticationPolicy(in, stream)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoWatchRole(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchRole", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRole(in, stream)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoWatchRoleBinding(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleBindingServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchRoleBinding", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRoleBinding(in, stream)
	return
}

func (r *EndpointsAuthV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsAuthV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIAuthV1AutoAddAuthenticationPolicyCreateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/configs/auth/v1", "/authn-policy")
}

//
func makeURIAuthV1AutoAddRoleCreateOper(in *Role) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/roles")
}

//
func makeURIAuthV1AutoAddRoleBindingCreateOper(in *RoleBinding) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/role-bindings")
}

//
func makeURIAuthV1AutoAddUserCreateOper(in *User) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users")
}

//
func makeURIAuthV1AutoDeleteAuthenticationPolicyDeleteOper(in *AuthenticationPolicy) string {
	return ""

}

//
func makeURIAuthV1AutoDeleteRoleDeleteOper(in *Role) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/roles/", in.Name)
}

//
func makeURIAuthV1AutoDeleteRoleBindingDeleteOper(in *RoleBinding) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/role-bindings/", in.Name)
}

//
func makeURIAuthV1AutoDeleteUserDeleteOper(in *User) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users/", in.Name)
}

//
func makeURIAuthV1AutoGetAuthenticationPolicyGetOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/configs/auth/v1", "/authn-policy")
}

//
func makeURIAuthV1AutoGetRoleGetOper(in *Role) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/roles/", in.Name)
}

//
func makeURIAuthV1AutoGetRoleBindingGetOper(in *RoleBinding) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/role-bindings/", in.Name)
}

//
func makeURIAuthV1AutoGetUserGetOper(in *User) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users/", in.Name)
}

//
func makeURIAuthV1AutoListAuthenticationPolicyListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIAuthV1AutoListRoleListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/roles")
}

//
func makeURIAuthV1AutoListRoleBindingListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/role-bindings")
}

//
func makeURIAuthV1AutoListUserListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users")
}

//
func makeURIAuthV1AutoUpdateAuthenticationPolicyUpdateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/configs/auth/v1", "/authn-policy")
}

//
func makeURIAuthV1AutoUpdateRoleUpdateOper(in *Role) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/roles/", in.Name)
}

//
func makeURIAuthV1AutoUpdateRoleBindingUpdateOper(in *RoleBinding) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/role-bindings/", in.Name)
}

//
func makeURIAuthV1AutoUpdateUserUpdateOper(in *User) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users/", in.Name)
}

//
func makeURIAuthV1AutoWatchAuthenticationPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/watch/authn-policy")
}

//
func makeURIAuthV1AutoWatchRoleWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/watch/tenant/", in.Tenant, "/roles")
}

//
func makeURIAuthV1AutoWatchRoleBindingWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/watch/tenant/", in.Tenant, "/role-bindings")
}

//
func makeURIAuthV1AutoWatchSvcAuthV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIAuthV1AutoWatchUserWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/auth/v1", "/watch/tenant/", in.Tenant, "/users")
}

//
func makeURIAuthV1LdapBindCheckCreateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/configs/auth/v1", "/authn-policy/LdapBindCheck")
}

//
func makeURIAuthV1LdapConnectionCheckCreateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/configs/auth/v1", "/authn-policy/LdapConnectionCheck")
}

//
func makeURIAuthV1PasswordChangeCreateOper(in *PasswordChangeRequest) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users/", in.Name, "/PasswordChange")
}

//
func makeURIAuthV1PasswordResetCreateOper(in *PasswordResetRequest) string {
	return fmt.Sprint("/configs/auth/v1", "/tenant/", in.Tenant, "/users/", in.Name, "/PasswordReset")
}

// AutoAddUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoAddUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoAddUserCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddUser(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), nil
}

// AutoUpdateUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoUpdateUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoUpdateUserUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoGetUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoGetUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoGetUserGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoDeleteUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoDeleteUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoDeleteUserDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoDeleteUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoListUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoListUser(ctx context.Context, options *api.ListWatchOptions) (*UserList, error) {
	path := makeURIAuthV1AutoListUserListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoListUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*UserList), err
}

// AutoWatchUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoWatchUser(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIAuthV1AutoWatchUserWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	conn, hresp, err := websocket.DefaultDialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgUserWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsAuthV1RestClient) PasswordChangeUser(ctx context.Context, in *PasswordChangeRequest) (*User, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIAuthV1PasswordChangeCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1PasswordChange(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

func (r *EndpointsAuthV1RestClient) PasswordResetUser(ctx context.Context, in *PasswordResetRequest) (*User, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIAuthV1PasswordResetCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1PasswordReset(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoAddAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoAddAuthenticationPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddAuthenticationPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), nil
}

// AutoUpdateAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoUpdateAuthenticationPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateAuthenticationPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoGetAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoGetAuthenticationPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetAuthenticationPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoDeleteAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoListAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoListAuthenticationPolicy(ctx context.Context, options *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoWatchAuthenticationPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIAuthV1AutoWatchAuthenticationPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	conn, hresp, err := websocket.DefaultDialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgAuthenticationPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsAuthV1RestClient) LdapConnectionCheckAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIAuthV1LdapConnectionCheckCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1LdapConnectionCheck(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

func (r *EndpointsAuthV1RestClient) LdapBindCheckAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIAuthV1LdapBindCheckCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1LdapBindCheck(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoAddRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoAddRole(ctx context.Context, in *Role) (*Role, error) {
	path := makeURIAuthV1AutoAddRoleCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddRole(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Role), nil
}

// AutoUpdateRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoUpdateRole(ctx context.Context, in *Role) (*Role, error) {
	path := makeURIAuthV1AutoUpdateRoleUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateRole(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Role), err
}

// AutoGetRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoGetRole(ctx context.Context, in *Role) (*Role, error) {
	path := makeURIAuthV1AutoGetRoleGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetRole(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Role), err
}

// AutoDeleteRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoDeleteRole(ctx context.Context, in *Role) (*Role, error) {
	path := makeURIAuthV1AutoDeleteRoleDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoDeleteRole(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Role), err
}

// AutoListRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoListRole(ctx context.Context, options *api.ListWatchOptions) (*RoleList, error) {
	path := makeURIAuthV1AutoListRoleListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoListRole(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleList), err
}

// AutoWatchRole CRUD method for Role
func (r *EndpointsAuthV1RestClient) AutoWatchRole(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIAuthV1AutoWatchRoleWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	conn, hresp, err := websocket.DefaultDialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRoleWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoAddRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	path := makeURIAuthV1AutoAddRoleBindingCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddRoleBinding(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleBinding), nil
}

// AutoUpdateRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoUpdateRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	path := makeURIAuthV1AutoUpdateRoleBindingUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateRoleBinding(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleBinding), err
}

// AutoGetRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoGetRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	path := makeURIAuthV1AutoGetRoleBindingGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetRoleBinding(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleBinding), err
}

// AutoDeleteRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoDeleteRoleBinding(ctx context.Context, in *RoleBinding) (*RoleBinding, error) {
	path := makeURIAuthV1AutoDeleteRoleBindingDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoDeleteRoleBinding(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleBinding), err
}

// AutoListRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoListRoleBinding(ctx context.Context, options *api.ListWatchOptions) (*RoleBindingList, error) {
	path := makeURIAuthV1AutoListRoleBindingListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoListRoleBinding(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoleBindingList), err
}

// AutoWatchRoleBinding CRUD method for RoleBinding
func (r *EndpointsAuthV1RestClient) AutoWatchRoleBinding(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIAuthV1AutoWatchRoleBindingWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	conn, hresp, err := websocket.DefaultDialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRoleBindingWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeAuthV1RestClientEndpoints make REST client endpoints
func MakeAuthV1RestClientEndpoints(instance string) (EndpointsAuthV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAuthV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MakeAuthV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeAuthV1StagedRestClientEndpoints(instance string, bufferId string) (EndpointsAuthV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAuthV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   http.DefaultClient,
	}, nil
}
