// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: svc_auth.proto
*/
package auth

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *AuthenticationPolicyList) MakeKey(prefix string) string {
	obj := AuthenticationPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *RoleBindingList) MakeKey(prefix string) string {
	obj := RoleBinding{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *RoleList) MakeKey(prefix string) string {
	obj := Role{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *UserList) MakeKey(prefix string) string {
	obj := User{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAuthenticationPolicyWatchHelper) MakeKey(prefix string) string {
	obj := AuthenticationPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgRoleBindingWatchHelper) MakeKey(prefix string) string {
	obj := RoleBinding{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgRoleWatchHelper) MakeKey(prefix string) string {
	obj := Role{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgUserWatchHelper) MakeKey(prefix string) string {
	obj := User{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AuthenticationPolicyList) Clone(into interface{}) (interface{}, error) {
	var out *AuthenticationPolicyList
	var ok bool
	if into == nil {
		out = &AuthenticationPolicyList{}
	} else {
		out, ok = into.(*AuthenticationPolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuthenticationPolicyList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgAuthenticationPolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgAuthenticationPolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgAuthenticationPolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgAuthenticationPolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgAuthenticationPolicyWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgAuthenticationPolicyWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgRoleBindingWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgRoleBindingWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgRoleBindingWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgRoleBindingWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgRoleBindingWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgRoleBindingWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgRoleBindingWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgRoleBindingWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgRoleWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgRoleWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgRoleWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgRoleWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgRoleWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgRoleWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgRoleWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgRoleWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgRoleWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgRoleWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgUserWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgUserWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgUserWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgUserWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgUserWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgUserWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgUserWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgUserWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgUserWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgUserWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleBindingList) Clone(into interface{}) (interface{}, error) {
	var out *RoleBindingList
	var ok bool
	if into == nil {
		out = &RoleBindingList{}
	} else {
		out, ok = into.(*RoleBindingList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleBindingList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RoleList) Clone(into interface{}) (interface{}, error) {
	var out *RoleList
	var ok bool
	if into == nil {
		out = &RoleList{}
	} else {
		out, ok = into.(*RoleList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *RoleList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *UserList) Clone(into interface{}) (interface{}, error) {
	var out *UserList
	var ok bool
	if into == nil {
		out = &UserList{}
	} else {
		out, ok = into.(*UserList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *UserList) Defaults(ver string) bool {
	return false
}

// Validators

func (m *AuthenticationPolicyList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Events {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgRoleBindingWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgRoleWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Events {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgUserWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Events {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AutoMsgUserWatchHelper_WatchEvent) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *RoleBindingList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *RoleList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *UserList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func init() {

}
