// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auth.proto

/*
	Package auth is a generated protocol buffer package.

	Service name

	It is generated from these files:
		auth.proto
		svc_auth.proto

	It has these top-level messages:
		AuthenticationPolicy
		AuthenticationPolicySpec
		AuthenticationPolicyStatus
		Authenticators
		Ldap
		LdapAttributeMapping
		LdapServer
		LdapServerStatus
		Local
		Operation
		OperationStatus
		PasswordChangeRequest
		PasswordCredential
		PasswordResetRequest
		Permission
		Radius
		RadiusServer
		RadiusServerStatus
		Resource
		Role
		RoleBinding
		RoleBindingSpec
		RoleBindingStatus
		RoleSpec
		RoleStatus
		SubjectAccessReviewRequest
		TLSOptions
		TokenSecretRequest
		User
		UserPreference
		UserPreferenceSpec
		UserPreferenceStatus
		UserSpec
		UserStatus
		AuthenticationPolicyList
		AutoMsgAuthenticationPolicyWatchHelper
		AutoMsgRoleBindingWatchHelper
		AutoMsgRoleWatchHelper
		AutoMsgUserPreferenceWatchHelper
		AutoMsgUserWatchHelper
		RoleBindingList
		RoleList
		UserList
		UserPreferenceList
*/
package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type Authenticators_AuthenticatorType int32

const (
	//
	Authenticators_LOCAL Authenticators_AuthenticatorType = 0
	//
	Authenticators_LDAP Authenticators_AuthenticatorType = 1
	//
	Authenticators_RADIUS Authenticators_AuthenticatorType = 2
)

var Authenticators_AuthenticatorType_name = map[int32]string{
	0: "LOCAL",
	1: "LDAP",
	2: "RADIUS",
}
var Authenticators_AuthenticatorType_value = map[string]int32{
	"LOCAL":  0,
	"LDAP":   1,
	"RADIUS": 2,
}

func (x Authenticators_AuthenticatorType) String() string {
	return proto.EnumName(Authenticators_AuthenticatorType_name, int32(x))
}
func (Authenticators_AuthenticatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{3, 0}
}

//
type LdapServerStatus_LdapResult int32

const (
	//
	LdapServerStatus_Connect_Success LdapServerStatus_LdapResult = 0
	//
	LdapServerStatus_Connect_Failure LdapServerStatus_LdapResult = 1
	//
	LdapServerStatus_Bind_Success LdapServerStatus_LdapResult = 2
	//
	LdapServerStatus_Bind_Failure LdapServerStatus_LdapResult = 3
)

var LdapServerStatus_LdapResult_name = map[int32]string{
	0: "Connect_Success",
	1: "Connect_Failure",
	2: "Bind_Success",
	3: "Bind_Failure",
}
var LdapServerStatus_LdapResult_value = map[string]int32{
	"Connect_Success": 0,
	"Connect_Failure": 1,
	"Bind_Success":    2,
	"Bind_Failure":    3,
}

func (x LdapServerStatus_LdapResult) String() string {
	return proto.EnumName(LdapServerStatus_LdapResult_name, int32(x))
}
func (LdapServerStatus_LdapResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{7, 0}
}

// ResourceKind is a resource kind for which permission is defined
type Permission_ResrcKind int32

const (
	// Arbitrary API endpoint as a resource
	Permission_APIEndpoint Permission_ResrcKind = 0
	// Search
	Permission_Search Permission_ResrcKind = 1
	// Events
	Permission_Event Permission_ResrcKind = 2
	// Metrics
	Permission_MetricsQuery Permission_ResrcKind = 3
	// Audit events
	Permission_AuditEvent Permission_ResrcKind = 4
	// Fwlogs
	Permission_FwlogsQuery Permission_ResrcKind = 5
	// TokenAuth
	Permission_TokenAuth Permission_ResrcKind = 6
)

var Permission_ResrcKind_name = map[int32]string{
	0: "APIEndpoint",
	1: "Search",
	2: "Event",
	3: "MetricsQuery",
	4: "AuditEvent",
	5: "FwlogsQuery",
	6: "TokenAuth",
}
var Permission_ResrcKind_value = map[string]int32{
	"APIEndpoint":  0,
	"Search":       1,
	"Event":        2,
	"MetricsQuery": 3,
	"AuditEvent":   4,
	"FwlogsQuery":  5,
	"TokenAuth":    6,
}

func (x Permission_ResrcKind) String() string {
	return proto.EnumName(Permission_ResrcKind_name, int32(x))
}
func (Permission_ResrcKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{14, 0} }

// ActionType is an action on a resource that a permission allows
type Permission_ActionType int32

const (
	// Reserved keyword to imply all action types
	Permission_AllActions Permission_ActionType = 0
	//
	Permission_Create Permission_ActionType = 1
	//
	Permission_Read Permission_ActionType = 2
	//
	Permission_Update Permission_ActionType = 3
	//
	Permission_Delete Permission_ActionType = 4
	// Commit action on staging buffer
	Permission_Commit Permission_ActionType = 5
	// Clear action on staging buffer
	Permission_Clear Permission_ActionType = 6
)

var Permission_ActionType_name = map[int32]string{
	0: "AllActions",
	1: "Create",
	2: "Read",
	3: "Update",
	4: "Delete",
	5: "Commit",
	6: "Clear",
}
var Permission_ActionType_value = map[string]int32{
	"AllActions": 0,
	"Create":     1,
	"Read":       2,
	"Update":     3,
	"Delete":     4,
	"Commit":     5,
	"Clear":      6,
}

func (x Permission_ActionType) String() string {
	return proto.EnumName(Permission_ActionType_name, int32(x))
}
func (Permission_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{14, 1} }

// RadiusAuthMethod describes how the communication between API Gw and RADIUS server is secured. These auth methods are not for end user
// authentication. Currently only PAP is supported.
type Radius_AuthMethod int32

const (
	// PAP is password auth protocol with only password attribute encrypted
	Radius_PAP Radius_AuthMethod = 0
	// PEAP_MSCHAPv2 sends user credentials using TLS tunnel
	Radius_PEAP_MSCHAPv2 Radius_AuthMethod = 1
	// EAP_TTLS sends user credentials using TLS tunnel
	Radius_EAP_TTLS_PAP Radius_AuthMethod = 2
)

var Radius_AuthMethod_name = map[int32]string{
	0: "PAP",
	1: "PEAP_MSCHAPv2",
	2: "EAP_TTLS_PAP",
}
var Radius_AuthMethod_value = map[string]int32{
	"PAP":           0,
	"PEAP_MSCHAPv2": 1,
	"EAP_TTLS_PAP":  2,
}

func (x Radius_AuthMethod) String() string {
	return proto.EnumName(Radius_AuthMethod_name, int32(x))
}
func (Radius_AuthMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{15, 0} }

//
type RadiusServerStatus_RadiusResult int32

const (
	//
	RadiusServerStatus_Connect_Success RadiusServerStatus_RadiusResult = 0
	//
	RadiusServerStatus_Connect_Failure RadiusServerStatus_RadiusResult = 1
)

var RadiusServerStatus_RadiusResult_name = map[int32]string{
	0: "Connect_Success",
	1: "Connect_Failure",
}
var RadiusServerStatus_RadiusResult_value = map[string]int32{
	"Connect_Success": 0,
	"Connect_Failure": 1,
}

func (x RadiusServerStatus_RadiusResult) String() string {
	return proto.EnumName(RadiusServerStatus_RadiusResult_name, int32(x))
}
func (RadiusServerStatus_RadiusResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAuth, []int{17, 0}
}

// User could be local or external like in LDAP
type UserSpec_UserType int32

const (
	// ui-hint: Local
	UserSpec_Local UserSpec_UserType = 0
	// ui-hint: External
	UserSpec_External UserSpec_UserType = 1
)

var UserSpec_UserType_name = map[int32]string{
	0: "Local",
	1: "External",
}
var UserSpec_UserType_value = map[string]int32{
	"Local":    0,
	"External": 1,
}

func (x UserSpec_UserType) String() string {
	return proto.EnumName(UserSpec_UserType_name, int32(x))
}
func (UserSpec_UserType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAuth, []int{32, 0} }

// AuthenticationPolicy defines various authentication mechanisms available and order in which they are used
type AuthenticationPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains configuration of authentication mechanisms.
	Spec AuthenticationPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the authentication policy.
	Status AuthenticationPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *AuthenticationPolicy) Reset()                    { *m = AuthenticationPolicy{} }
func (m *AuthenticationPolicy) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationPolicy) ProtoMessage()               {}
func (*AuthenticationPolicy) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{0} }

func (m *AuthenticationPolicy) GetSpec() AuthenticationPolicySpec {
	if m != nil {
		return m.Spec
	}
	return AuthenticationPolicySpec{}
}

func (m *AuthenticationPolicy) GetStatus() AuthenticationPolicyStatus {
	if m != nil {
		return m.Status
	}
	return AuthenticationPolicyStatus{}
}

// spec part of authentication policy object
type AuthenticationPolicySpec struct {
	//
	Authenticators Authenticators `protobuf:"bytes,1,opt,name=Authenticators,json=authenticators,omitempty" json:"authenticators,omitempty"`
	// Secret used to sign JWT token
	Secret []byte `protobuf:"bytes,2,opt,name=Secret,json=secret,omitempty,proto3" json:"secret,omitempty"`
	// TokenExpiry is time duration after which JWT token expires. Default is 6 days. A duration string is a sequence of decimal number and a unit suffix, such as "300ms" or "2h45m".
	// Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
	TokenExpiry string `protobuf:"bytes,3,opt,name=TokenExpiry,json=token-expiry,omitempty,proto3" json:"token-expiry,omitempty"`
}

func (m *AuthenticationPolicySpec) Reset()                    { *m = AuthenticationPolicySpec{} }
func (m *AuthenticationPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationPolicySpec) ProtoMessage()               {}
func (*AuthenticationPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{1} }

func (m *AuthenticationPolicySpec) GetAuthenticators() Authenticators {
	if m != nil {
		return m.Authenticators
	}
	return Authenticators{}
}

func (m *AuthenticationPolicySpec) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *AuthenticationPolicySpec) GetTokenExpiry() string {
	if m != nil {
		return m.TokenExpiry
	}
	return ""
}

// status part of authentication policy object
type AuthenticationPolicyStatus struct {
	//
	LdapServers []*LdapServerStatus `protobuf:"bytes,1,rep,name=LdapServers,json=ldap-servers,omitempty" json:"ldap-servers,omitempty"`
	//
	RadiusServers []*RadiusServerStatus `protobuf:"bytes,2,rep,name=RadiusServers,json=radius-servers,omitempty" json:"radius-servers,omitempty"`
}

func (m *AuthenticationPolicyStatus) Reset()                    { *m = AuthenticationPolicyStatus{} }
func (m *AuthenticationPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationPolicyStatus) ProtoMessage()               {}
func (*AuthenticationPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{2} }

func (m *AuthenticationPolicyStatus) GetLdapServers() []*LdapServerStatus {
	if m != nil {
		return m.LdapServers
	}
	return nil
}

func (m *AuthenticationPolicyStatus) GetRadiusServers() []*RadiusServerStatus {
	if m != nil {
		return m.RadiusServers
	}
	return nil
}

//
type Authenticators struct {
	// Order in which authenticators are applied. If an authenticator returns success, others are skipped
	AuthenticatorOrder []string `protobuf:"bytes,1,rep,name=AuthenticatorOrder,json=authenticator-order,omitempty" json:"authenticator-order,omitempty"`
	//
	Ldap *Ldap `protobuf:"bytes,2,opt,name=Ldap,json=ldap,omitempty" json:"ldap,omitempty"`
	//
	Local *Local `protobuf:"bytes,3,opt,name=Local,json=local,omitempty" json:"local,omitempty"`
	//
	Radius *Radius `protobuf:"bytes,4,opt,name=Radius,json=radius,omitempty" json:"radius,omitempty"`
}

func (m *Authenticators) Reset()                    { *m = Authenticators{} }
func (m *Authenticators) String() string            { return proto.CompactTextString(m) }
func (*Authenticators) ProtoMessage()               {}
func (*Authenticators) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{3} }

func (m *Authenticators) GetAuthenticatorOrder() []string {
	if m != nil {
		return m.AuthenticatorOrder
	}
	return nil
}

func (m *Authenticators) GetLdap() *Ldap {
	if m != nil {
		return m.Ldap
	}
	return nil
}

func (m *Authenticators) GetLocal() *Local {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *Authenticators) GetRadius() *Radius {
	if m != nil {
		return m.Radius
	}
	return nil
}

//
type Ldap struct {
	//
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,omitempty,proto3" json:"enabled,omitempty"`
	//
	BaseDN string `protobuf:"bytes,2,opt,name=BaseDN,json=base-dn,omitempty,proto3" json:"base-dn,omitempty"`
	//
	BindDN string `protobuf:"bytes,3,opt,name=BindDN,json=bind-dn,omitempty,proto3" json:"bind-dn,omitempty"`
	//
	BindPassword string `protobuf:"bytes,4,opt,name=BindPassword,json=bind-password,omitempty,proto3" json:"bind-password,omitempty"`
	//
	AttributeMapping *LdapAttributeMapping `protobuf:"bytes,5,opt,name=AttributeMapping,json=attribute-mapping,omitempty" json:"attribute-mapping,omitempty"`
	// Servers is a list that lets you configure multiple LDAP servers for high availability
	Servers []*LdapServer `protobuf:"bytes,6,rep,name=Servers,json=servers,omitempty" json:"servers,omitempty"`
}

func (m *Ldap) Reset()                    { *m = Ldap{} }
func (m *Ldap) String() string            { return proto.CompactTextString(m) }
func (*Ldap) ProtoMessage()               {}
func (*Ldap) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{4} }

func (m *Ldap) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Ldap) GetBaseDN() string {
	if m != nil {
		return m.BaseDN
	}
	return ""
}

func (m *Ldap) GetBindDN() string {
	if m != nil {
		return m.BindDN
	}
	return ""
}

func (m *Ldap) GetBindPassword() string {
	if m != nil {
		return m.BindPassword
	}
	return ""
}

func (m *Ldap) GetAttributeMapping() *LdapAttributeMapping {
	if m != nil {
		return m.AttributeMapping
	}
	return nil
}

func (m *Ldap) GetServers() []*LdapServer {
	if m != nil {
		return m.Servers
	}
	return nil
}

//
type LdapAttributeMapping struct {
	//
	User string `protobuf:"bytes,1,opt,name=User,json=user,omitempty,proto3" json:"user,omitempty"`
	// UserObjectClass is the STRUCTURAL object class for user entry in LDAP. It is used as a filter for user search
	UserObjectClass string `protobuf:"bytes,2,opt,name=UserObjectClass,json=user-object-class,omitempty,proto3" json:"user-object-class,omitempty"`
	//
	Tenant string `protobuf:"bytes,3,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	//
	Group string `protobuf:"bytes,4,opt,name=Group,json=group,omitempty,proto3" json:"group,omitempty"`
	// GroupObjectClass is the STRUCTURAL object class for group entry in LDAP. It is used as a filter for group search
	GroupObjectClass string `protobuf:"bytes,5,opt,name=GroupObjectClass,json=group-object-class,omitempty,proto3" json:"group-object-class,omitempty"`
	//
	Email string `protobuf:"bytes,6,opt,name=Email,json=email,omitempty,proto3" json:"email,omitempty"`
	//
	Fullname string `protobuf:"bytes,7,opt,name=Fullname,json=fullname,omitempty,proto3" json:"fullname,omitempty"`
}

func (m *LdapAttributeMapping) Reset()                    { *m = LdapAttributeMapping{} }
func (m *LdapAttributeMapping) String() string            { return proto.CompactTextString(m) }
func (*LdapAttributeMapping) ProtoMessage()               {}
func (*LdapAttributeMapping) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{5} }

func (m *LdapAttributeMapping) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LdapAttributeMapping) GetUserObjectClass() string {
	if m != nil {
		return m.UserObjectClass
	}
	return ""
}

func (m *LdapAttributeMapping) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LdapAttributeMapping) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *LdapAttributeMapping) GetGroupObjectClass() string {
	if m != nil {
		return m.GroupObjectClass
	}
	return ""
}

func (m *LdapAttributeMapping) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LdapAttributeMapping) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

//
type LdapServer struct {
	//
	Url string `protobuf:"bytes,1,opt,name=Url,json=url,omitempty,proto3" json:"url,omitempty"`
	//
	TLSOptions *TLSOptions `protobuf:"bytes,2,opt,name=TLSOptions,json=tls-options,omitempty" json:"tls-options,omitempty"`
}

func (m *LdapServer) Reset()                    { *m = LdapServer{} }
func (m *LdapServer) String() string            { return proto.CompactTextString(m) }
func (*LdapServer) ProtoMessage()               {}
func (*LdapServer) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{6} }

func (m *LdapServer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LdapServer) GetTLSOptions() *TLSOptions {
	if m != nil {
		return m.TLSOptions
	}
	return nil
}

//
type LdapServerStatus struct {
	// Result indicates if ldap check was successful
	Result string `protobuf:"bytes,1,opt,name=Result,json=result,omitempty,proto3" json:"result,omitempty"`
	// Message contains error message in case of failed check or a success message
	Message string `protobuf:"bytes,2,opt,name=Message,json=message,inline,proto3" json:"message,inline"`
	// LdapServer contains the ldap server configuration that was checked
	Server *LdapServer `protobuf:"bytes,3,opt,name=Server,json=server,omitempty" json:"server,omitempty"`
}

func (m *LdapServerStatus) Reset()                    { *m = LdapServerStatus{} }
func (m *LdapServerStatus) String() string            { return proto.CompactTextString(m) }
func (*LdapServerStatus) ProtoMessage()               {}
func (*LdapServerStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{7} }

func (m *LdapServerStatus) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *LdapServerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LdapServerStatus) GetServer() *LdapServer {
	if m != nil {
		return m.Server
	}
	return nil
}

//
type Local struct {
	//
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,omitempty,proto3" json:"enabled,omitempty"`
}

func (m *Local) Reset()                    { *m = Local{} }
func (m *Local) String() string            { return proto.CompactTextString(m) }
func (*Local) ProtoMessage()               {}
func (*Local) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{8} }

func (m *Local) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// Operation represents an user action on a resource about which an authorization decision has to be made
type Operation struct {
	//
	Resource *Resource `protobuf:"bytes,1,opt,name=Resource,json=resource,omitempty" json:"resource,omitempty"`
	//
	Action string `protobuf:"bytes,2,opt,name=Action,json=action,omitempty,proto3" json:"action,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{9} }

func (m *Operation) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Operation) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

// OperationStatus contains the result of the authorization check for a requested operation
type OperationStatus struct {
	// Operation for which authorization decision is resported
	Operation *Operation `protobuf:"bytes,1,opt,name=Operation,json=operation,omitempty" json:"operation,omitempty"`
	// Allowed indicates if Operation is authorized
	Allowed bool `protobuf:"varint,2,opt,name=Allowed,json=allowed,proto3" json:"allowed"`
	// Message reports error validating Operation
	Message string `protobuf:"bytes,3,opt,name=Message,json=message,omitempty,proto3" json:"message,omitempty"`
}

func (m *OperationStatus) Reset()                    { *m = OperationStatus{} }
func (m *OperationStatus) String() string            { return proto.CompactTextString(m) }
func (*OperationStatus) ProtoMessage()               {}
func (*OperationStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{10} }

func (m *OperationStatus) GetOperation() *Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *OperationStatus) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *OperationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PasswordChangeRequest is for user to change his password
type PasswordChangeRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	OldPassword string `protobuf:"bytes,3,opt,name=OldPassword,json=old-password,omitempty,proto3" json:"old-password,omitempty"`
	//
	NewPassword string `protobuf:"bytes,4,opt,name=NewPassword,json=new-password,omitempty,proto3" json:"new-password,omitempty"`
}

func (m *PasswordChangeRequest) Reset()                    { *m = PasswordChangeRequest{} }
func (m *PasswordChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordChangeRequest) ProtoMessage()               {}
func (*PasswordChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{11} }

func (m *PasswordChangeRequest) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *PasswordChangeRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

// PasswordCredential is user credential to login to Venice. It consists of username, password and tenant.
type PasswordCredential struct {
	//
	Username string `protobuf:"bytes,1,opt,name=Username,json=username,omitempty,proto3" json:"username,omitempty"`
	//
	Password string `protobuf:"bytes,2,opt,name=Password,json=password,omitempty,proto3" json:"password,omitempty"`
	//
	Tenant string `protobuf:"bytes,3,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
}

func (m *PasswordCredential) Reset()                    { *m = PasswordCredential{} }
func (m *PasswordCredential) String() string            { return proto.CompactTextString(m) }
func (*PasswordCredential) ProtoMessage()               {}
func (*PasswordCredential) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{12} }

func (m *PasswordCredential) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PasswordCredential) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PasswordCredential) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

// PasswordResetRequest is for user to reset password
type PasswordResetRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
}

func (m *PasswordResetRequest) Reset()                    { *m = PasswordResetRequest{} }
func (m *PasswordResetRequest) String() string            { return proto.CompactTextString(m) }
func (*PasswordResetRequest) ProtoMessage()               {}
func (*PasswordResetRequest) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{13} }

// Permission defines if actions are allowed on resource group, resource type, resource name or arbitrary API endpoints.
type Permission struct {
	// ResourceTenant is the tenant to which resource belongs. It will be automatically set to the tenant to which role object belongs. Exception are roles in "default" tenant.
	// Role in "default" tenant can include permissions for resources in other tenants. Specifying "_All_" will match all tenants.
	ResourceTenant string `protobuf:"bytes,1,opt,name=ResourceTenant,json=resource-tenant,omitempty,proto3" json:"resource-tenant,omitempty"`
	// ResourceGroup is grouping of resource types for which a permission is defined. It is empty for Search, Event, MetricsQuery and non-api server endpoint.
	// Specifying "_All_" will match all api groups including empty group for non-api server endpoints like those defined in ResrcKind enum.
	ResourceGroup string `protobuf:"bytes,2,opt,name=ResourceGroup,json=resource-group,omitempty,proto3" json:"resource-group,omitempty"`
	// ResourceKind is a resource kind for which permission is defined. It can be an API Server object kind or kinds defined in
	// ResrcKind enum. Specifying "_All_" will match all resource kinds.
	ResourceKind string `protobuf:"bytes,3,opt,name=ResourceKind,json=resource-kind,omitempty,proto3" json:"resource-kind,omitempty"`
	// ResourceNamespace is a namespace to which a resource (API Server object) belongs. Default value is "_All_" which matches all namespaces.
	ResourceNamespace string `protobuf:"bytes,4,opt,name=ResourceNamespace,json=resource-namespace,omitempty,proto3" json:"resource-namespace,omitempty"`
	// ResourceNames identify specific objects on which this permission applies. If resource name is not specified in permission then
	// it implies all resources of the specified kind
	ResourceNames []string `protobuf:"bytes,5,rep,name=ResourceNames,json=resource-names,omitempty" json:"resource-names,omitempty"`
	// Actions are actions on a resource that a permission allows
	Actions []string `protobuf:"bytes,6,rep,name=Actions,json=actions,omitempty" json:"actions,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{14} }

func (m *Permission) GetResourceTenant() string {
	if m != nil {
		return m.ResourceTenant
	}
	return ""
}

func (m *Permission) GetResourceGroup() string {
	if m != nil {
		return m.ResourceGroup
	}
	return ""
}

func (m *Permission) GetResourceKind() string {
	if m != nil {
		return m.ResourceKind
	}
	return ""
}

func (m *Permission) GetResourceNamespace() string {
	if m != nil {
		return m.ResourceNamespace
	}
	return ""
}

func (m *Permission) GetResourceNames() []string {
	if m != nil {
		return m.ResourceNames
	}
	return nil
}

func (m *Permission) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

//
type Radius struct {
	//
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,omitempty,proto3" json:"enabled,omitempty"`
	// NasID is a string identifying the NAS(API Gw) originating the Access-Request
	NasID string `protobuf:"bytes,2,opt,name=NasID,json=nas-id,omitempty,proto3" json:"nas-id,omitempty"`
	//
	Servers []*RadiusServer `protobuf:"bytes,3,rep,name=Servers,json=servers,omitempty" json:"servers,omitempty"`
}

func (m *Radius) Reset()                    { *m = Radius{} }
func (m *Radius) String() string            { return proto.CompactTextString(m) }
func (*Radius) ProtoMessage()               {}
func (*Radius) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{15} }

func (m *Radius) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Radius) GetNasID() string {
	if m != nil {
		return m.NasID
	}
	return ""
}

func (m *Radius) GetServers() []*RadiusServer {
	if m != nil {
		return m.Servers
	}
	return nil
}

//
type RadiusServer struct {
	// <IP address>:<Port> of the RADIUS server
	Url string `protobuf:"bytes,1,opt,name=Url,json=url,omitempty,proto3" json:"url,omitempty"`
	// Secret is the shared secret between API Gw and RADIUS server
	Secret string `protobuf:"bytes,2,opt,name=Secret,json=secret,omitempty,proto3" json:"secret,omitempty"`
	// AuthMethod is authentication method to use with the RADIUS server
	AuthMethod string `protobuf:"bytes,3,opt,name=AuthMethod,json=auth-method,omitempty,proto3" json:"auth-method,omitempty"`
	// TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates. It is
	// used in PEAP and EAP_TTLS auth methods
	TrustedCerts string `protobuf:"bytes,4,opt,name=TrustedCerts,json=trusted-certs,omitempty,proto3" json:"trusted-certs,omitempty"`
}

func (m *RadiusServer) Reset()                    { *m = RadiusServer{} }
func (m *RadiusServer) String() string            { return proto.CompactTextString(m) }
func (*RadiusServer) ProtoMessage()               {}
func (*RadiusServer) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{16} }

func (m *RadiusServer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RadiusServer) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *RadiusServer) GetAuthMethod() string {
	if m != nil {
		return m.AuthMethod
	}
	return ""
}

func (m *RadiusServer) GetTrustedCerts() string {
	if m != nil {
		return m.TrustedCerts
	}
	return ""
}

//
type RadiusServerStatus struct {
	// Result indicates if radius check was successful
	Result string `protobuf:"bytes,1,opt,name=Result,json=result,omitempty,proto3" json:"result,omitempty"`
	// Message contains error message in case of failed check or a success message
	Message string `protobuf:"bytes,2,opt,name=Message,json=message,inline,proto3" json:"message,inline"`
	// RadiusServer contains the radius server configuration that was checked
	Server *RadiusServer `protobuf:"bytes,3,opt,name=Server,json=server,omitempty" json:"server,omitempty"`
}

func (m *RadiusServerStatus) Reset()                    { *m = RadiusServerStatus{} }
func (m *RadiusServerStatus) String() string            { return proto.CompactTextString(m) }
func (*RadiusServerStatus) ProtoMessage()               {}
func (*RadiusServerStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{17} }

func (m *RadiusServerStatus) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *RadiusServerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RadiusServerStatus) GetServer() *RadiusServer {
	if m != nil {
		return m.Server
	}
	return nil
}

// Resource represents an object or API endpoint resource on which authorization for an action needs to be checked
type Resource struct {
	// Tenant to which the resource belongs
	Tenant string `protobuf:"bytes,1,opt,name=Tenant,json=tenant,omitempty,proto3" json:"tenant,omitempty"`
	// Group of resource to which access is desired
	Group string `protobuf:"bytes,2,opt,name=Group,json=group,omitempty,proto3" json:"group,omitempty"`
	// Kind of resource to which access is desired
	Kind string `protobuf:"bytes,3,opt,name=Kind,json=kind,omitempty,proto3" json:"kind,omitempty"`
	// Namespace of resource within which access to a resource is desired
	Namespace string `protobuf:"bytes,4,opt,name=Namespace,json=namespace,omitempty,proto3" json:"namespace,omitempty"`
	// Name of a specific resource to which access is desired
	Name string `protobuf:"bytes,5,opt,name=Name,json=name,omitempty,proto3" json:"name,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{18} }

func (m *Resource) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Resource) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Resource) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Resource) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Role is a collection of permissions
type Role struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the role.
	Spec RoleSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the role.
	Status RoleStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{19} }

func (m *Role) GetSpec() RoleSpec {
	if m != nil {
		return m.Spec
	}
	return RoleSpec{}
}

func (m *Role) GetStatus() RoleStatus {
	if m != nil {
		return m.Status
	}
	return RoleStatus{}
}

// RoleBinding is an assignment of a role to users or groups
type RoleBinding struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the role binding.
	Spec RoleBindingSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the role binding.
	Status RoleBindingStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *RoleBinding) Reset()                    { *m = RoleBinding{} }
func (m *RoleBinding) String() string            { return proto.CompactTextString(m) }
func (*RoleBinding) ProtoMessage()               {}
func (*RoleBinding) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{20} }

func (m *RoleBinding) GetSpec() RoleBindingSpec {
	if m != nil {
		return m.Spec
	}
	return RoleBindingSpec{}
}

func (m *RoleBinding) GetStatus() RoleBindingStatus {
	if m != nil {
		return m.Status
	}
	return RoleBindingStatus{}
}

// spec part of role binding object
type RoleBindingSpec struct {
	//
	Users []string `protobuf:"bytes,1,rep,name=Users,json=users,omitempty" json:"users,omitempty"`
	//
	UserGroups []string `protobuf:"bytes,2,rep,name=UserGroups,json=user-groups,omitempty" json:"user-groups,omitempty"`
	//
	Role string `protobuf:"bytes,3,opt,name=Role,json=role,omitempty,proto3" json:"role,omitempty"`
}

func (m *RoleBindingSpec) Reset()                    { *m = RoleBindingSpec{} }
func (m *RoleBindingSpec) String() string            { return proto.CompactTextString(m) }
func (*RoleBindingSpec) ProtoMessage()               {}
func (*RoleBindingSpec) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{21} }

func (m *RoleBindingSpec) GetUsers() []string {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RoleBindingSpec) GetUserGroups() []string {
	if m != nil {
		return m.UserGroups
	}
	return nil
}

func (m *RoleBindingSpec) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

// status part of role binding object
type RoleBindingStatus struct {
}

func (m *RoleBindingStatus) Reset()                    { *m = RoleBindingStatus{} }
func (m *RoleBindingStatus) String() string            { return proto.CompactTextString(m) }
func (*RoleBindingStatus) ProtoMessage()               {}
func (*RoleBindingStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{22} }

// spec part of role object
type RoleSpec struct {
	// Permissions define actions allowed on resources. A resource can be an API Server object or an arbitrary API endpoint
	Permissions []Permission `protobuf:"bytes,1,rep,name=Permissions,json=permissions,omitempty" json:"permissions,omitempty"`
}

func (m *RoleSpec) Reset()                    { *m = RoleSpec{} }
func (m *RoleSpec) String() string            { return proto.CompactTextString(m) }
func (*RoleSpec) ProtoMessage()               {}
func (*RoleSpec) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{23} }

func (m *RoleSpec) GetPermissions() []Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// status part of role object
type RoleStatus struct {
}

func (m *RoleStatus) Reset()                    { *m = RoleStatus{} }
func (m *RoleStatus) String() string            { return proto.CompactTextString(m) }
func (*RoleStatus) ProtoMessage()               {}
func (*RoleStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{24} }

// SubjectAccessReviewRequest checks whether user can perform requested operations
type SubjectAccessReviewRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Operations []*Operation `protobuf:"bytes,3,rep,name=Operations,json=operations,omitempty" json:"operations,omitempty"`
}

func (m *SubjectAccessReviewRequest) Reset()                    { *m = SubjectAccessReviewRequest{} }
func (m *SubjectAccessReviewRequest) String() string            { return proto.CompactTextString(m) }
func (*SubjectAccessReviewRequest) ProtoMessage()               {}
func (*SubjectAccessReviewRequest) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{25} }

func (m *SubjectAccessReviewRequest) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

//
type TLSOptions struct {
	// StartTLS determines if ldap connection uses TLS
	StartTLS bool `protobuf:"varint,1,opt,name=StartTLS,json=start-tls,omitempty,proto3" json:"start-tls,omitempty"`
	// SkipServerCertVerification controls whether a client verifies the server's certificate chain and host name.
	// If SkipServerCertVerification is true, TLS accepts any certificate presented by the server and any host name in that certificate.
	// In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.
	SkipServerCertVerification bool `protobuf:"varint,2,opt,name=SkipServerCertVerification,json=skip-server-cert-verification,omitempty,proto3" json:"skip-server-cert-verification,omitempty"`
	// ServerName is used to verify the hostname on the returned certificates unless SkipServerCertVerification is true.
	ServerName string `protobuf:"bytes,3,opt,name=ServerName,json=server-name,omitempty,proto3" json:"server-name,omitempty"`
	// TrustedCerts defines the set of PEM encoded root certificate authorities that will be used when verifying server certificates.
	TrustedCerts string `protobuf:"bytes,4,opt,name=TrustedCerts,json=trusted-certs,omitempty,proto3" json:"trusted-certs,omitempty"`
}

func (m *TLSOptions) Reset()                    { *m = TLSOptions{} }
func (m *TLSOptions) String() string            { return proto.CompactTextString(m) }
func (*TLSOptions) ProtoMessage()               {}
func (*TLSOptions) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{26} }

func (m *TLSOptions) GetStartTLS() bool {
	if m != nil {
		return m.StartTLS
	}
	return false
}

func (m *TLSOptions) GetSkipServerCertVerification() bool {
	if m != nil {
		return m.SkipServerCertVerification
	}
	return false
}

func (m *TLSOptions) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSOptions) GetTrustedCerts() string {
	if m != nil {
		return m.TrustedCerts
	}
	return ""
}

// TokenSecretRequest is to re-generate secret for token signing
type TokenSecretRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
}

func (m *TokenSecretRequest) Reset()                    { *m = TokenSecretRequest{} }
func (m *TokenSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenSecretRequest) ProtoMessage()               {}
func (*TokenSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{27} }

// User could be local or external
type User struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the user.
	Spec UserSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the role binding.
	Status UserStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{28} }

func (m *User) GetSpec() UserSpec {
	if m != nil {
		return m.Spec
	}
	return UserSpec{}
}

func (m *User) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus{}
}

// UserPreference holds all user customization info
type UserPreference struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta, omitempty,embedded=O" json:"meta, omitempty"`
	//
	Spec UserPreferenceSpec `protobuf:"bytes,3,opt,name=Spec,json=spec, omitempty" json:"spec, omitempty"`
	//
	Status UserPreferenceStatus `protobuf:"bytes,4,opt,name=Status,json=status, omitempty" json:"status, omitempty"`
}

func (m *UserPreference) Reset()                    { *m = UserPreference{} }
func (m *UserPreference) String() string            { return proto.CompactTextString(m) }
func (*UserPreference) ProtoMessage()               {}
func (*UserPreference) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{29} }

func (m *UserPreference) GetSpec() UserPreferenceSpec {
	if m != nil {
		return m.Spec
	}
	return UserPreferenceSpec{}
}

func (m *UserPreference) GetStatus() UserPreferenceStatus {
	if m != nil {
		return m.Status
	}
	return UserPreferenceStatus{}
}

// Holds a byte stream of the user preference.
// The typing of the user preference will be in the UI code.
type UserPreferenceSpec struct {
	//
	Options string `protobuf:"bytes,1,opt,name=Options,json=options, omitempty,proto3" json:"options, omitempty"`
}

func (m *UserPreferenceSpec) Reset()                    { *m = UserPreferenceSpec{} }
func (m *UserPreferenceSpec) String() string            { return proto.CompactTextString(m) }
func (*UserPreferenceSpec) ProtoMessage()               {}
func (*UserPreferenceSpec) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{30} }

func (m *UserPreferenceSpec) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

// User Preference Status, currently holds nothing.
type UserPreferenceStatus struct {
}

func (m *UserPreferenceStatus) Reset()                    { *m = UserPreferenceStatus{} }
func (m *UserPreferenceStatus) String() string            { return proto.CompactTextString(m) }
func (*UserPreferenceStatus) ProtoMessage()               {}
func (*UserPreferenceStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{31} }

// spec part of user object
type UserSpec struct {
	//
	Fullname string `protobuf:"bytes,1,opt,name=Fullname,json=fullname,omitempty,proto3" json:"fullname,omitempty"`
	//
	Email string `protobuf:"bytes,2,opt,name=Email,json=email,omitempty,proto3" json:"email,omitempty"`
	// Password should be atleast 9 characters containing atleast 1 digit, 1 uppercase letter and 1 special character from "~!@#$%^&*()_+`-={}|[]\\:\"<>?,./"
	Password string `protobuf:"bytes,3,opt,name=Password,json=password,omitempty,proto3" json:"password,omitempty"`
	//
	Type string `protobuf:"bytes,4,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
}

func (m *UserSpec) Reset()                    { *m = UserSpec{} }
func (m *UserSpec) String() string            { return proto.CompactTextString(m) }
func (*UserSpec) ProtoMessage()               {}
func (*UserSpec) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{32} }

func (m *UserSpec) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *UserSpec) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserSpec) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// status part of user object
type UserStatus struct {
	// Roles assigned to user
	Roles []string `protobuf:"bytes,1,rep,name=Roles,json=roles,omitempty" json:"roles,omitempty"`
	// Groups that external user belongs to
	UserGroups []string `protobuf:"bytes,2,rep,name=UserGroups,json=user-groups,omitempty" json:"user-groups,omitempty"`
	// Last login time
	LastLogin *api.Timestamp `protobuf:"bytes,3,opt,name=LastLogin,json=last-login,omitempty" json:"last-login,omitempty"`
	// Authenticators used for last successful login
	Authenticators []string `protobuf:"bytes,4,rep,name=Authenticators,json=authenticators,omitempty" json:"authenticators,omitempty"`
	// Last password change time for local user
	LastPasswordChange *api.Timestamp `protobuf:"bytes,5,opt,name=LastPasswordChange,json=last-password-change,omitempty" json:"last-password-change,omitempty"`
	// Authorization information about requested operations
	AccessReview []*OperationStatus `protobuf:"bytes,6,rep,name=AccessReview,json=access-review,omitempty" json:"access-review,omitempty"`
}

func (m *UserStatus) Reset()                    { *m = UserStatus{} }
func (m *UserStatus) String() string            { return proto.CompactTextString(m) }
func (*UserStatus) ProtoMessage()               {}
func (*UserStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuth, []int{33} }

func (m *UserStatus) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *UserStatus) GetUserGroups() []string {
	if m != nil {
		return m.UserGroups
	}
	return nil
}

func (m *UserStatus) GetLastLogin() *api.Timestamp {
	if m != nil {
		return m.LastLogin
	}
	return nil
}

func (m *UserStatus) GetAuthenticators() []string {
	if m != nil {
		return m.Authenticators
	}
	return nil
}

func (m *UserStatus) GetLastPasswordChange() *api.Timestamp {
	if m != nil {
		return m.LastPasswordChange
	}
	return nil
}

func (m *UserStatus) GetAccessReview() []*OperationStatus {
	if m != nil {
		return m.AccessReview
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthenticationPolicy)(nil), "auth.AuthenticationPolicy")
	proto.RegisterType((*AuthenticationPolicySpec)(nil), "auth.AuthenticationPolicySpec")
	proto.RegisterType((*AuthenticationPolicyStatus)(nil), "auth.AuthenticationPolicyStatus")
	proto.RegisterType((*Authenticators)(nil), "auth.Authenticators")
	proto.RegisterType((*Ldap)(nil), "auth.Ldap")
	proto.RegisterType((*LdapAttributeMapping)(nil), "auth.LdapAttributeMapping")
	proto.RegisterType((*LdapServer)(nil), "auth.LdapServer")
	proto.RegisterType((*LdapServerStatus)(nil), "auth.LdapServerStatus")
	proto.RegisterType((*Local)(nil), "auth.Local")
	proto.RegisterType((*Operation)(nil), "auth.Operation")
	proto.RegisterType((*OperationStatus)(nil), "auth.OperationStatus")
	proto.RegisterType((*PasswordChangeRequest)(nil), "auth.PasswordChangeRequest")
	proto.RegisterType((*PasswordCredential)(nil), "auth.PasswordCredential")
	proto.RegisterType((*PasswordResetRequest)(nil), "auth.PasswordResetRequest")
	proto.RegisterType((*Permission)(nil), "auth.Permission")
	proto.RegisterType((*Radius)(nil), "auth.Radius")
	proto.RegisterType((*RadiusServer)(nil), "auth.RadiusServer")
	proto.RegisterType((*RadiusServerStatus)(nil), "auth.RadiusServerStatus")
	proto.RegisterType((*Resource)(nil), "auth.Resource")
	proto.RegisterType((*Role)(nil), "auth.Role")
	proto.RegisterType((*RoleBinding)(nil), "auth.RoleBinding")
	proto.RegisterType((*RoleBindingSpec)(nil), "auth.RoleBindingSpec")
	proto.RegisterType((*RoleBindingStatus)(nil), "auth.RoleBindingStatus")
	proto.RegisterType((*RoleSpec)(nil), "auth.RoleSpec")
	proto.RegisterType((*RoleStatus)(nil), "auth.RoleStatus")
	proto.RegisterType((*SubjectAccessReviewRequest)(nil), "auth.SubjectAccessReviewRequest")
	proto.RegisterType((*TLSOptions)(nil), "auth.TLSOptions")
	proto.RegisterType((*TokenSecretRequest)(nil), "auth.TokenSecretRequest")
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*UserPreference)(nil), "auth.UserPreference")
	proto.RegisterType((*UserPreferenceSpec)(nil), "auth.UserPreferenceSpec")
	proto.RegisterType((*UserPreferenceStatus)(nil), "auth.UserPreferenceStatus")
	proto.RegisterType((*UserSpec)(nil), "auth.UserSpec")
	proto.RegisterType((*UserStatus)(nil), "auth.UserStatus")
	proto.RegisterEnum("auth.Authenticators_AuthenticatorType", Authenticators_AuthenticatorType_name, Authenticators_AuthenticatorType_value)
	proto.RegisterEnum("auth.LdapServerStatus_LdapResult", LdapServerStatus_LdapResult_name, LdapServerStatus_LdapResult_value)
	proto.RegisterEnum("auth.Permission_ResrcKind", Permission_ResrcKind_name, Permission_ResrcKind_value)
	proto.RegisterEnum("auth.Permission_ActionType", Permission_ActionType_name, Permission_ActionType_value)
	proto.RegisterEnum("auth.Radius_AuthMethod", Radius_AuthMethod_name, Radius_AuthMethod_value)
	proto.RegisterEnum("auth.RadiusServerStatus_RadiusResult", RadiusServerStatus_RadiusResult_name, RadiusServerStatus_RadiusResult_value)
	proto.RegisterEnum("auth.UserSpec_UserType", UserSpec_UserType_name, UserSpec_UserType_value)
}
func (m *AuthenticationPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AuthenticationPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Authenticators.Size()))
	n5, err := m.Authenticators.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Secret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.TokenExpiry) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.TokenExpiry)))
		i += copy(dAtA[i:], m.TokenExpiry)
	}
	return i, nil
}

func (m *AuthenticationPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LdapServers) > 0 {
		for _, msg := range m.LdapServers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RadiusServers) > 0 {
		for _, msg := range m.RadiusServers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Authenticators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authenticators) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthenticatorOrder) > 0 {
		for _, s := range m.AuthenticatorOrder {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Ldap != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Ldap.Size()))
		n6, err := m.Ldap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Local != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Local.Size()))
		n7, err := m.Local.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Radius != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Radius.Size()))
		n8, err := m.Radius.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *Ldap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ldap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BaseDN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.BaseDN)))
		i += copy(dAtA[i:], m.BaseDN)
	}
	if len(m.BindDN) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.BindDN)))
		i += copy(dAtA[i:], m.BindDN)
	}
	if len(m.BindPassword) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.BindPassword)))
		i += copy(dAtA[i:], m.BindPassword)
	}
	if m.AttributeMapping != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.AttributeMapping.Size()))
		n9, err := m.AttributeMapping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LdapAttributeMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdapAttributeMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.UserObjectClass) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.UserObjectClass)))
		i += copy(dAtA[i:], m.UserObjectClass)
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Group) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if len(m.GroupObjectClass) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.GroupObjectClass)))
		i += copy(dAtA[i:], m.GroupObjectClass)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Fullname) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Fullname)))
		i += copy(dAtA[i:], m.Fullname)
	}
	return i, nil
}

func (m *LdapServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdapServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.TLSOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.TLSOptions.Size()))
		n10, err := m.TLSOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *LdapServerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdapServerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Server != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Server.Size()))
		n11, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *Local) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Local) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resource != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Resource.Size()))
		n12, err := m.Resource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	return i, nil
}

func (m *OperationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Operation.Size()))
		n13, err := m.Operation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Allowed {
		dAtA[i] = 0x10
		i++
		if m.Allowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *PasswordChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n15, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.OldPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.OldPassword)))
		i += copy(dAtA[i:], m.OldPassword)
	}
	if len(m.NewPassword) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.NewPassword)))
		i += copy(dAtA[i:], m.NewPassword)
	}
	return i, nil
}

func (m *PasswordCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordCredential) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Tenant) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	return i, nil
}

func (m *PasswordResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n16, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n17, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	return i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourceTenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.ResourceTenant)))
		i += copy(dAtA[i:], m.ResourceTenant)
	}
	if len(m.ResourceGroup) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.ResourceGroup)))
		i += copy(dAtA[i:], m.ResourceGroup)
	}
	if len(m.ResourceKind) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.ResourceKind)))
		i += copy(dAtA[i:], m.ResourceKind)
	}
	if len(m.ResourceNamespace) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.ResourceNamespace)))
		i += copy(dAtA[i:], m.ResourceNamespace)
	}
	if len(m.ResourceNames) > 0 {
		for _, s := range m.ResourceNames {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Radius) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Radius) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NasID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.NasID)))
		i += copy(dAtA[i:], m.NasID)
	}
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RadiusServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RadiusServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.AuthMethod) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.AuthMethod)))
		i += copy(dAtA[i:], m.AuthMethod)
	}
	if len(m.TrustedCerts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.TrustedCerts)))
		i += copy(dAtA[i:], m.TrustedCerts)
	}
	return i, nil
}

func (m *RadiusServerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RadiusServerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Server != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Server.Size()))
		n18, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenant) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Tenant)))
		i += copy(dAtA[i:], m.Tenant)
	}
	if len(m.Group) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if len(m.Kind) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n19, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n20, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Spec.Size()))
	n21, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Status.Size()))
	n22, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	return i, nil
}

func (m *RoleBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n23, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n24, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Spec.Size()))
	n25, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Status.Size()))
	n26, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	return i, nil
}

func (m *RoleBindingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBindingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.UserGroups) > 0 {
		for _, s := range m.UserGroups {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	return i, nil
}

func (m *RoleBindingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBindingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RoleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, msg := range m.Permissions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SubjectAccessReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectAccessReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n27, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n28, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Operations) > 0 {
		for _, msg := range m.Operations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TLSOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTLS {
		dAtA[i] = 0x8
		i++
		if m.StartTLS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SkipServerCertVerification {
		dAtA[i] = 0x10
		i++
		if m.SkipServerCertVerification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ServerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	if len(m.TrustedCerts) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.TrustedCerts)))
		i += copy(dAtA[i:], m.TrustedCerts)
	}
	return i, nil
}

func (m *TokenSecretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenSecretRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n29, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n30, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n31, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n32, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Spec.Size()))
	n33, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Status.Size()))
	n34, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	return i, nil
}

func (m *UserPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n35, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.ObjectMeta.Size()))
	n36, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Spec.Size()))
	n37, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuth(dAtA, i, uint64(m.Status.Size()))
	n38, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	return i, nil
}

func (m *UserPreferenceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferenceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Options)))
		i += copy(dAtA[i:], m.Options)
	}
	return i, nil
}

func (m *UserPreferenceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferenceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fullname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Fullname)))
		i += copy(dAtA[i:], m.Fullname)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *UserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.UserGroups) > 0 {
		for _, s := range m.UserGroups {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LastLogin != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.LastLogin.Size()))
		n39, err := m.LastLogin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if len(m.Authenticators) > 0 {
		for _, s := range m.Authenticators {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.LastPasswordChange != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.LastPasswordChange.Size()))
		n40, err := m.LastPasswordChange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if len(m.AccessReview) > 0 {
		for _, msg := range m.AccessReview {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuthenticationPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *AuthenticationPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = m.Authenticators.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.TokenExpiry)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *AuthenticationPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.LdapServers) > 0 {
		for _, e := range m.LdapServers {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.RadiusServers) > 0 {
		for _, e := range m.RadiusServers {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *Authenticators) Size() (n int) {
	var l int
	_ = l
	if len(m.AuthenticatorOrder) > 0 {
		for _, s := range m.AuthenticatorOrder {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if m.Ldap != nil {
		l = m.Ldap.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Local != nil {
		l = m.Local.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Radius != nil {
		l = m.Radius.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *Ldap) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.BaseDN)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.BindDN)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.BindPassword)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.AttributeMapping != nil {
		l = m.AttributeMapping.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *LdapAttributeMapping) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.UserObjectClass)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.GroupObjectClass)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Fullname)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *LdapServer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.TLSOptions != nil {
		l = m.TLSOptions.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *LdapServerStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *Local) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *Operation) Size() (n int) {
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *OperationStatus) Size() (n int) {
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Allowed {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *PasswordChangeRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = len(m.OldPassword)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *PasswordCredential) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *PasswordResetRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *Permission) Size() (n int) {
	var l int
	_ = l
	l = len(m.ResourceTenant)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.ResourceGroup)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.ResourceKind)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.ResourceNamespace)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.ResourceNames) > 0 {
		for _, s := range m.ResourceNames {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, s := range m.Actions {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *Radius) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.NasID)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *RadiusServer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.AuthMethod)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.TrustedCerts)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *RadiusServerStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *Role) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *RoleBinding) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *RoleBindingSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.UserGroups) > 0 {
		for _, s := range m.UserGroups {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *RoleBindingStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RoleSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *RoleStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SubjectAccessReviewRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func (m *TLSOptions) Size() (n int) {
	var l int
	_ = l
	if m.StartTLS {
		n += 2
	}
	if m.SkipServerCertVerification {
		n += 2
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.TrustedCerts)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *TokenSecretRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *UserPreference) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuth(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuth(uint64(l))
	return n
}

func (m *UserPreferenceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Options)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *UserPreferenceStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Fullname)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *UserStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if len(m.UserGroups) > 0 {
		for _, s := range m.UserGroups {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if m.LastLogin != nil {
		l = m.LastLogin.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.Authenticators) > 0 {
		for _, s := range m.Authenticators {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	if m.LastPasswordChange != nil {
		l = m.LastPasswordChange.Size()
		n += 1 + l + sovAuth(uint64(l))
	}
	if len(m.AccessReview) > 0 {
		for _, e := range m.AccessReview {
			l = e.Size()
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func sovAuth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthenticationPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authenticators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExpiry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenExpiry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdapServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LdapServers = append(m.LdapServers, &LdapServerStatus{})
			if err := m.LdapServers[len(m.LdapServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadiusServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RadiusServers = append(m.RadiusServers, &RadiusServerStatus{})
			if err := m.RadiusServers[len(m.RadiusServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authenticators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authenticators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authenticators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatorOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticatorOrder = append(m.AuthenticatorOrder, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ldap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ldap == nil {
				m.Ldap = &Ldap{}
			}
			if err := m.Ldap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Local == nil {
				m.Local = &Local{}
			}
			if err := m.Local.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Radius == nil {
				m.Radius = &Radius{}
			}
			if err := m.Radius.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ldap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ldap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ldap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindDN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindDN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributeMapping == nil {
				m.AttributeMapping = &LdapAttributeMapping{}
			}
			if err := m.AttributeMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &LdapServer{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdapAttributeMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdapAttributeMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdapAttributeMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserObjectClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserObjectClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupObjectClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupObjectClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdapServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdapServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdapServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSOptions == nil {
				m.TLSOptions = &TLSOptions{}
			}
			if err := m.TLSOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdapServerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdapServerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdapServerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &LdapServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Local) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Local: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Local: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allowed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceTenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNames = append(m.ResourceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Radius) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Radius: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Radius: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NasID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NasID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &RadiusServer{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RadiusServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RadiusServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RadiusServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCerts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCerts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RadiusServerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RadiusServerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RadiusServerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &RadiusServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBindingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBindingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBindingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroups = append(m.UserGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBindingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBindingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBindingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, Permission{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectAccessReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectAccessReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectAccessReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTLS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTLS = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipServerCertVerification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipServerCertVerification = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCerts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCerts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenSecretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenSecretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenSecretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreferenceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferenceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferenceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreferenceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferenceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferenceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fullname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fullname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroups = append(m.UserGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLogin == nil {
				m.LastLogin = &api.Timestamp{}
			}
			if err := m.LastLogin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authenticators = append(m.Authenticators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPasswordChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPasswordChange == nil {
				m.LastPasswordChange = &api.Timestamp{}
			}
			if err := m.LastPasswordChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessReview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessReview = append(m.AccessReview, &OperationStatus{})
			if err := m.AccessReview[len(m.AccessReview)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("auth.proto", fileDescriptorAuth) }

var fileDescriptorAuth = []byte{
	// 2813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x52, 0x24, 0x25, 0x3e, 0x7d, 0xad, 0xc6, 0xfa, 0x20, 0x65, 0x47, 0x14, 0x36, 0x4d,
	0x23, 0x23, 0xa6, 0x64, 0xc7, 0x6e, 0x92, 0xba, 0x41, 0x1b, 0x52, 0x92, 0x6b, 0x37, 0x94, 0xc4,
	0x90, 0x52, 0x6a, 0x24, 0x45, 0xdd, 0xd5, 0x72, 0x4c, 0x6d, 0xbd, 0xdc, 0xdd, 0xee, 0xce, 0x4a,
	0x16, 0x82, 0x1e, 0x2d, 0x20, 0xa7, 0xfe, 0x01, 0xed, 0xa9, 0xe8, 0xa1, 0xd0, 0xa9, 0x2d, 0x0a,
	0x04, 0xe8, 0xa1, 0xe8, 0xd1, 0xbd, 0xa5, 0x3e, 0x14, 0x6d, 0x0f, 0x42, 0x91, 0xa2, 0x17, 0x1d,
	0x8a, 0xfe, 0x09, 0xc5, 0x7c, 0x2c, 0x77, 0x76, 0xb9, 0x54, 0x2c, 0x27, 0x68, 0x7c, 0xe3, 0xfc,
	0x66, 0xde, 0x9b, 0xf7, 0xde, 0xbc, 0x37, 0xef, 0xbd, 0x59, 0x02, 0xe8, 0x01, 0xd9, 0x5b, 0x76,
	0x3d, 0x87, 0x38, 0x28, 0x4b, 0x7f, 0xcf, 0x5f, 0xee, 0x38, 0x4e, 0xc7, 0xc2, 0x2b, 0xba, 0x6b,
	0xae, 0xe8, 0xb6, 0xed, 0x10, 0x9d, 0x98, 0x8e, 0xed, 0xf3, 0x35, 0xf3, 0x25, 0x31, 0xcb, 0x46,
	0xbb, 0xc1, 0x83, 0x15, 0xdd, 0x3e, 0x14, 0x53, 0xeb, 0x1d, 0x93, 0xec, 0x05, 0xbb, 0xcb, 0x86,
	0xd3, 0x5d, 0x71, 0xb1, 0xed, 0xeb, 0x76, 0xdb, 0x59, 0xf1, 0x0f, 0x56, 0xf6, 0xb1, 0x6d, 0x1a,
	0x78, 0x25, 0x20, 0xa6, 0xe5, 0x53, 0xae, 0x1d, 0x6c, 0xcb, 0x8c, 0x57, 0x4c, 0xdb, 0xb0, 0x82,
	0x36, 0x0e, 0x77, 0xa8, 0x48, 0x6c, 0x3a, 0x4e, 0xc7, 0x89, 0xb6, 0xa2, 0x23, 0x36, 0x60, 0xbf,
	0xc4, 0xf2, 0x57, 0x06, 0xec, 0x4a, 0xc5, 0xef, 0x62, 0xa2, 0xf3, 0x65, 0xda, 0x49, 0x06, 0xa6,
	0xab, 0x01, 0xd9, 0xc3, 0x36, 0x31, 0x0d, 0xb6, 0x71, 0xc3, 0xb1, 0x4c, 0xe3, 0x10, 0xbd, 0x01,
	0xca, 0x76, 0x51, 0x59, 0x54, 0x96, 0x46, 0x5f, 0x1f, 0x5f, 0xd6, 0x5d, 0x73, 0x79, 0xfb, 0xd0,
	0xc5, 0x1b, 0x98, 0xe8, 0xb5, 0x8b, 0x4f, 0x4e, 0xca, 0x17, 0x3e, 0x3d, 0x29, 0x2b, 0xa7, 0x27,
	0xe5, 0xe1, 0xab, 0xa6, 0x6d, 0x99, 0x36, 0x6e, 0x86, 0x3f, 0xd0, 0x6d, 0x50, 0xb6, 0x8a, 0x19,
	0x46, 0x37, 0xc9, 0xe8, 0xb6, 0x76, 0x7f, 0x8c, 0x0d, 0xc2, 0x28, 0xe7, 0x25, 0xca, 0x09, 0x2a,
	0xc4, 0x55, 0xa7, 0x6b, 0x12, 0xdc, 0x75, 0xc9, 0x61, 0x33, 0x31, 0x46, 0xdb, 0x90, 0x6d, 0xb9,
	0xd8, 0x28, 0x0e, 0x31, 0x56, 0x0b, 0xcb, 0xec, 0x3c, 0xd2, 0x24, 0xa5, 0xab, 0x6a, 0xb3, 0x94,
	0x33, 0xe5, 0xea, 0xbb, 0xd8, 0x90, 0xb9, 0xc6, 0xc7, 0xe8, 0x07, 0x90, 0x6f, 0x11, 0x9d, 0x04,
	0x7e, 0x31, 0xcb, 0xf8, 0x2e, 0x9e, 0xc1, 0x97, 0xad, 0xab, 0x15, 0x05, 0x67, 0xd5, 0x67, 0x63,
	0x89, 0x77, 0x1f, 0x72, 0x0b, 0x3d, 0x7d, 0x5c, 0x9a, 0x98, 0x1f, 0xa3, 0x2c, 0xed, 0x8a, 0xcb,
	0xb8, 0x68, 0xc7, 0x19, 0x28, 0x0e, 0x12, 0x1b, 0xed, 0xc1, 0x84, 0x34, 0xe7, 0x78, 0xbe, 0xb0,
	0xf8, 0x74, 0x9f, 0x58, 0x8e, 0xe7, 0xd7, 0x16, 0x85, 0x28, 0x45, 0x3d, 0x86, 0x4b, 0x22, 0x0d,
	0x9c, 0x41, 0x35, 0xc8, 0xb7, 0xb0, 0xe1, 0x61, 0xc2, 0xce, 0x66, 0xac, 0xb6, 0xf8, 0x87, 0xa3,
	0xd2, 0x08, 0x47, 0x96, 0xae, 0x30, 0xf5, 0xd8, 0xef, 0x98, 0x7a, 0x09, 0x04, 0xfd, 0x08, 0x46,
	0xb7, 0x9d, 0x87, 0xd8, 0x5e, 0x7f, 0xe4, 0x9a, 0xde, 0x21, 0x3b, 0x99, 0x42, 0xed, 0xc6, 0xf1,
	0x51, 0x69, 0x7c, 0x2d, 0xf0, 0x98, 0x6a, 0x4b, 0xd7, 0xae, 0x5e, 0xbb, 0xf2, 0xbb, 0xa3, 0x52,
	0xf6, 0xfa, 0xcd, 0x9b, 0x7b, 0xa7, 0x27, 0xe5, 0x59, 0x42, 0xd7, 0x57, 0x30, 0x23, 0x90, 0x78,
	0x0f, 0xc0, 0xb5, 0xff, 0x28, 0x30, 0x3f, 0xf8, 0x2c, 0x90, 0x01, 0xa3, 0xf5, 0xb6, 0xee, 0xb6,
	0xb0, 0xb7, 0x8f, 0x99, 0xad, 0x86, 0x96, 0x46, 0x5f, 0x9f, 0xe5, 0xb6, 0x8a, 0x26, 0xc4, 0xc1,
	0x2d, 0x3c, 0xe1, 0x8e, 0x36, 0x6b, 0xb5, 0x75, 0xb7, 0xe2, 0x73, 0x1a, 0x59, 0x86, 0x74, 0x1c,
	0x3d, 0x84, 0xf1, 0xa6, 0xde, 0x36, 0x03, 0x3f, 0xdc, 0x26, 0xc3, 0xb6, 0x29, 0xf2, 0x6d, 0xe4,
	0x29, 0xb1, 0xd1, 0xa2, 0xd8, 0xa8, 0xe8, 0xb1, 0xb9, 0x94, 0xad, 0x06, 0xce, 0x68, 0xbf, 0x1a,
	0x4a, 0x7a, 0x00, 0xfa, 0x58, 0x01, 0x14, 0x83, 0xb6, 0xbc, 0x36, 0xf6, 0x98, 0xb2, 0x85, 0xda,
	0xe6, 0xf1, 0x51, 0xe9, 0x4a, 0x8b, 0x78, 0xeb, 0x76, 0xd0, 0x5d, 0x8a, 0x13, 0xc6, 0xbd, 0x85,
	0x46, 0x2b, 0x3d, 0xd7, 0x97, 0x62, 0x1e, 0x51, 0x71, 0x28, 0x2f, 0x49, 0xb2, 0xb3, 0xa7, 0xd1,
	0x3b, 0x90, 0xa5, 0x76, 0x15, 0xf1, 0x0c, 0x91, 0xa5, 0x59, 0xc0, 0xb1, 0x30, 0xa6, 0x56, 0x94,
	0x03, 0x2e, 0x3e, 0x46, 0x6b, 0x90, 0xab, 0x3b, 0x86, 0x6e, 0x89, 0x38, 0x1e, 0x15, 0x2c, 0x28,
	0x54, 0x9b, 0x13, 0x3c, 0x26, 0x2d, 0x3a, 0x94, 0x98, 0x24, 0x01, 0x74, 0x07, 0xf2, 0xdc, 0xf0,
	0x22, 0x6c, 0xc7, 0xe4, 0xc3, 0x60, 0x21, 0x4a, 0xf9, 0xa8, 0xdc, 0xcc, 0xb2, 0x0f, 0x27, 0x11,
	0xed, 0x26, 0x4c, 0xf5, 0xd9, 0x09, 0x15, 0x20, 0x57, 0xdf, 0x5a, 0xad, 0xd6, 0xd5, 0x0b, 0x68,
	0x04, 0xb2, 0xf5, 0xb5, 0x6a, 0x43, 0x55, 0x10, 0x40, 0xbe, 0x59, 0x5d, 0xbb, 0xbb, 0xd3, 0x52,
	0x33, 0xda, 0x5f, 0x87, 0xb8, 0x21, 0xd0, 0x37, 0x61, 0x78, 0xdd, 0xd6, 0x77, 0x2d, 0xdc, 0x66,
	0x91, 0x3a, 0x52, 0x9b, 0x39, 0x3d, 0x29, 0x4f, 0x61, 0x0e, 0x49, 0x1b, 0xf7, 0x43, 0xe8, 0x2d,
	0xc8, 0xd7, 0x74, 0x1f, 0xaf, 0x6d, 0x32, 0x6b, 0x16, 0x38, 0xe5, 0xae, 0xee, 0xe3, 0x4a, 0xdb,
	0x96, 0x29, 0xfb, 0x20, 0x46, 0x69, 0xda, 0xed, 0xb5, 0x4d, 0x11, 0x72, 0x9c, 0xd2, 0xb4, 0xdb,
	0x49, 0xca, 0x24, 0x84, 0xde, 0x87, 0x31, 0x4a, 0xd9, 0xd0, 0x7d, 0xff, 0xc0, 0xf1, 0xda, 0xcc,
	0x7a, 0x85, 0xda, 0xab, 0x89, 0xd8, 0x9f, 0x63, 0x84, 0xae, 0x58, 0x24, 0x71, 0x1c, 0x34, 0x81,
	0xf6, 0x41, 0xad, 0x12, 0xe2, 0x99, 0xbb, 0x01, 0xc1, 0x1b, 0xba, 0xeb, 0x9a, 0x76, 0xa7, 0x98,
	0x63, 0x27, 0x33, 0x1f, 0xf9, 0x48, 0x72, 0x45, 0xed, 0x65, 0x71, 0x4e, 0x97, 0xf4, 0x70, 0xa6,
	0xd2, 0xe5, 0x53, 0xd2, 0x9e, 0x67, 0x4d, 0xa2, 0x2d, 0x18, 0x0e, 0xa3, 0x32, 0xcf, 0xa2, 0x52,
	0x4d, 0x06, 0x7f, 0xad, 0x24, 0x36, 0x99, 0xea, 0x0f, 0xc3, 0x7e, 0x48, 0xfb, 0xfb, 0x10, 0x4c,
	0xa7, 0xc9, 0x8a, 0xae, 0x41, 0x76, 0xc7, 0x67, 0x61, 0x47, 0x2d, 0x86, 0xa8, 0xa7, 0x07, 0x7e,
	0x2c, 0x74, 0x12, 0x63, 0xb4, 0x03, 0x93, 0x94, 0x82, 0xa7, 0xbb, 0x55, 0x4b, 0xf7, 0x7d, 0x71,
	0xd0, 0x65, 0xaa, 0x32, 0x5d, 0x5c, 0x71, 0xd8, 0x5c, 0xc5, 0xa0, 0x93, 0xb2, 0xca, 0x67, 0x4c,
	0xa2, 0x37, 0x20, 0xbf, 0x8d, 0x6d, 0xdd, 0x26, 0xe2, 0xf0, 0xa7, 0xa9, 0xa3, 0x13, 0x86, 0xc8,
	0x8e, 0x9e, 0x44, 0xd0, 0x0d, 0xc8, 0x7d, 0xd7, 0x73, 0x02, 0x57, 0x9c, 0xf9, 0x45, 0x1a, 0x67,
	0x1d, 0x0a, 0xc8, 0x71, 0x96, 0x00, 0xd0, 0x3d, 0x50, 0x19, 0x91, 0xac, 0x44, 0x8e, 0xd1, 0x2f,
	0x9e, 0x9e, 0x94, 0x2f, 0xb3, 0xe5, 0x83, 0xb4, 0x38, 0x73, 0x96, 0x8a, 0xb3, 0xde, 0xd5, 0x4d,
	0xab, 0x98, 0x8f, 0xc4, 0xc1, 0x14, 0x90, 0xc5, 0x49, 0x00, 0xe8, 0x6d, 0x18, 0xb9, 0x1d, 0x58,
	0x96, 0xad, 0x77, 0x71, 0x71, 0x98, 0xd1, 0xcd, 0x9e, 0x9e, 0x94, 0xd1, 0x03, 0x81, 0x49, 0xa4,
	0x29, 0x98, 0xf6, 0x73, 0x05, 0x20, 0x72, 0x0c, 0x74, 0x1d, 0x86, 0x76, 0x3c, 0x4b, 0x1c, 0xe8,
	0x8c, 0xf0, 0x92, 0xf1, 0xc0, 0x93, 0x25, 0x88, 0x0f, 0xd1, 0x07, 0x00, 0xdb, 0xf5, 0xd6, 0x96,
	0xcb, 0xea, 0x31, 0x71, 0x09, 0x0a, 0x8f, 0x8b, 0xf0, 0xda, 0x4b, 0x82, 0xd7, 0x0c, 0xb1, 0xfc,
	0x8a, 0xc3, 0x41, 0x89, 0x67, 0x3a, 0xac, 0xfd, 0x25, 0x03, 0x6a, 0x32, 0x67, 0xa1, 0x1f, 0x42,
	0xbe, 0x89, 0xfd, 0xc0, 0x22, 0x42, 0xcc, 0xb7, 0x8f, 0x8f, 0x4a, 0x5f, 0x0b, 0xaf, 0xfb, 0xe4,
	0x6a, 0xe6, 0xf5, 0x7c, 0x39, 0xcb, 0xe0, 0x1e, 0xfb, 0x19, 0xbb, 0xfd, 0x12, 0x08, 0xba, 0x01,
	0xc3, 0x1b, 0xd8, 0xf7, 0xf5, 0x0e, 0x16, 0xbe, 0x89, 0x78, 0x25, 0xc6, 0xa0, 0xb0, 0x94, 0x4b,
	0x8c, 0x51, 0x9d, 0x96, 0x0e, 0x74, 0x5b, 0x71, 0x87, 0xf7, 0xc7, 0x5c, 0xef, 0x02, 0xe6, 0x01,
	0x16, 0x2f, 0x22, 0xe2, 0x88, 0xf6, 0x01, 0x3f, 0x14, 0x2e, 0x37, 0xba, 0x08, 0x93, 0xab, 0x8e,
	0x6d, 0x63, 0x83, 0xdc, 0x6f, 0x05, 0x86, 0x81, 0x7d, 0x5f, 0xbd, 0x20, 0x83, 0xb7, 0x75, 0xd3,
	0x0a, 0x3c, 0xac, 0x2a, 0x48, 0xe5, 0x57, 0x59, 0x6f, 0x59, 0xa6, 0x87, 0x84, 0x6b, 0x86, 0xb4,
	0x9a, 0x48, 0x36, 0x5f, 0xe0, 0x9a, 0xd6, 0x3e, 0x51, 0xa0, 0xb0, 0xe5, 0x62, 0x5e, 0xcf, 0xa0,
	0x06, 0x8c, 0x34, 0xb1, 0xef, 0x04, 0x9e, 0x81, 0x45, 0x69, 0x36, 0x21, 0x52, 0x8f, 0x40, 0x59,
	0x4d, 0x4b, 0x75, 0x47, 0x9e, 0x40, 0x64, 0xaf, 0xec, 0xc7, 0xd0, 0x3d, 0xc8, 0x57, 0x0d, 0xca,
	0x5b, 0x9c, 0xc0, 0x1b, 0xc7, 0x47, 0xa5, 0x85, 0xf0, 0x88, 0x1b, 0xd8, 0xeb, 0x9a, 0xbe, 0x6f,
	0x3a, 0xf6, 0x32, 0x5f, 0x14, 0xa6, 0x71, 0x55, 0x67, 0x43, 0xd9, 0xb2, 0x49, 0x44, 0xfb, 0xb3,
	0x02, 0x93, 0x3d, 0xc9, 0x85, 0x43, 0x6d, 0x4b, 0xca, 0x08, 0x05, 0x26, 0xb9, 0x02, 0x3d, 0xb8,
	0x76, 0x49, 0x68, 0x70, 0xd1, 0x09, 0x21, 0x69, 0x9b, 0x34, 0x10, 0xbd, 0x02, 0xc3, 0x55, 0xcb,
	0x72, 0x0e, 0x70, 0x9b, 0x29, 0x31, 0x52, 0x1b, 0xa5, 0xad, 0x80, 0xce, 0xa1, 0x66, 0xf8, 0x83,
	0x9e, 0x42, 0xe8, 0x6d, 0x52, 0xe2, 0x0a, 0xbd, 0x4b, 0x3a, 0x85, 0x3e, 0x48, 0xfb, 0x77, 0x06,
	0x66, 0xc2, 0xac, 0xb5, 0xba, 0xa7, 0xdb, 0x1d, 0xdc, 0xc4, 0x3f, 0x09, 0xb0, 0x4f, 0xbe, 0xf2,
	0xbe, 0xe4, 0x1e, 0x8c, 0x6e, 0x59, 0x51, 0x46, 0xe5, 0x8a, 0xbd, 0x46, 0x8b, 0xe0, 0x16, 0xf1,
	0xea, 0xd8, 0x5e, 0xba, 0x7e, 0x75, 0xb1, 0x72, 0x9d, 0x9e, 0xd9, 0xac, 0x63, 0xa5, 0x66, 0xd5,
	0x01, 0x38, 0xe5, 0xbc, 0x89, 0x0f, 0x12, 0xb9, 0x3a, 0x9d, 0xb3, 0x8d, 0x0f, 0x52, 0x39, 0xa7,
	0xe3, 0xb7, 0x8a, 0x4f, 0x1f, 0x97, 0xa6, 0x61, 0x74, 0xe5, 0xa3, 0xad, 0x65, 0x9e, 0x4b, 0x7e,
	0x8a, 0x72, 0x34, 0xe7, 0xf8, 0xda, 0x13, 0x05, 0x50, 0xcf, 0xce, 0x1e, 0x6e, 0xd3, 0xba, 0x48,
	0xb7, 0xe8, 0xc5, 0x4b, 0x73, 0x19, 0xbb, 0x78, 0x95, 0xe8, 0xe2, 0x0d, 0x04, 0x26, 0xbb, 0x78,
	0x3f, 0x46, 0xa9, 0x7b, 0x5a, 0x64, 0x22, 0xea, 0x14, 0x81, 0x53, 0xb0, 0xe7, 0x4d, 0x78, 0xda,
	0x6f, 0x14, 0x98, 0x0e, 0xb7, 0x6d, 0x62, 0x1f, 0x93, 0x17, 0xc4, 0x63, 0xce, 0xb0, 0xfe, 0xbf,
	0x72, 0x00, 0x51, 0xc8, 0xa3, 0x06, 0x4c, 0x84, 0xd7, 0x8a, 0xb0, 0x00, 0xb7, 0xfd, 0x4b, 0xa7,
	0x27, 0xe5, 0x52, 0x78, 0x95, 0x54, 0xfa, 0x4c, 0x31, 0x78, 0x0a, 0x6d, 0xc0, 0x78, 0xc8, 0x91,
	0x17, 0x03, 0xfc, 0x38, 0x2e, 0xb3, 0x6e, 0x25, 0xa4, 0x4a, 0x56, 0x05, 0x03, 0x67, 0xd0, 0xf7,
	0x60, 0x2c, 0x64, 0xf7, 0xae, 0x69, 0x87, 0xce, 0x7f, 0x89, 0x96, 0x90, 0x3d, 0x9a, 0x87, 0xa6,
	0x1d, 0x2b, 0x21, 0x07, 0x4c, 0xa0, 0x5d, 0x98, 0x0a, 0x79, 0x6d, 0xea, 0x5d, 0xec, 0xbb, 0xba,
	0x81, 0x85, 0xcf, 0xd3, 0x0e, 0x32, 0x77, 0xbf, 0x6a, 0x59, 0xf7, 0x69, 0xd1, 0xd1, 0x63, 0x60,
	0x87, 0xcb, 0xe4, 0xa2, 0xe3, 0xac, 0x59, 0x59, 0x7d, 0xb6, 0x47, 0x31, 0xc7, 0x9a, 0xa8, 0xb8,
	0xfa, 0x8c, 0x30, 0x55, 0xfd, 0xc4, 0x0c, 0xfa, 0x10, 0x86, 0xf9, 0xad, 0xcc, 0xab, 0xcf, 0x42,
	0xed, 0xcd, 0x67, 0xba, 0xbb, 0xa7, 0xf8, 0x4d, 0x1d, 0xab, 0x44, 0xfb, 0x20, 0x2d, 0x80, 0x42,
	0x13, 0xfb, 0x9e, 0x41, 0x0d, 0x8b, 0x26, 0x61, 0xb4, 0xda, 0xb8, 0xbb, 0x6e, 0xb7, 0x5d, 0xc7,
	0xb4, 0x89, 0x7a, 0x81, 0x36, 0x23, 0x2d, 0xac, 0x7b, 0xc6, 0x9e, 0xaa, 0xd0, 0x6e, 0x65, 0x7d,
	0x1f, 0xdb, 0x84, 0xa7, 0xc0, 0x0d, 0x4c, 0x3c, 0xd3, 0xf0, 0xdf, 0x0b, 0xb0, 0x77, 0xa8, 0x0e,
	0xa1, 0x09, 0x80, 0x6a, 0xd0, 0x36, 0x09, 0x5f, 0x91, 0xa5, 0x9c, 0x6e, 0x1f, 0x58, 0x4e, 0x47,
	0x2c, 0xc8, 0xa1, 0x71, 0x28, 0xb0, 0x26, 0x9e, 0x76, 0x41, 0x6a, 0x5e, 0xd3, 0x01, 0x22, 0x69,
	0x19, 0xb5, 0x65, 0x09, 0x25, 0xf9, 0xb6, 0xab, 0x1e, 0xd6, 0x09, 0x4d, 0xc0, 0x23, 0x90, 0x6d,
	0x62, 0xbd, 0xad, 0x66, 0x28, 0xba, 0xe3, 0xb6, 0x29, 0x3a, 0x44, 0x7f, 0xaf, 0x61, 0x0b, 0x13,
	0xac, 0x66, 0xd9, 0x6a, 0xa7, 0xdb, 0x35, 0x89, 0x9a, 0xa3, 0x42, 0xae, 0x5a, 0x58, 0xf7, 0xd4,
	0xbc, 0xf6, 0x71, 0x26, 0xec, 0xde, 0xbe, 0x48, 0xfb, 0xf4, 0x0d, 0xc8, 0x6d, 0xea, 0xfe, 0xdd,
	0x35, 0xe1, 0xc2, 0xec, 0x56, 0xb0, 0x75, 0xbf, 0x62, 0xca, 0x74, 0x7d, 0x08, 0x7a, 0x2f, 0xea,
	0x18, 0x86, 0x58, 0xc7, 0x80, 0xfa, 0xfb, 0xf8, 0x73, 0xf6, 0x0c, 0xb7, 0xa8, 0x89, 0xc9, 0xde,
	0x06, 0x26, 0x7b, 0x4e, 0x1b, 0x0d, 0xc3, 0x50, 0xa3, 0xda, 0x50, 0x2f, 0xa0, 0x29, 0x18, 0x6f,
	0xac, 0x57, 0x1b, 0xf7, 0x37, 0x5a, 0xab, 0x77, 0xaa, 0x8d, 0xfd, 0xd7, 0x79, 0xcd, 0x42, 0x91,
	0xed, 0xed, 0x7a, 0xeb, 0x3e, 0x5d, 0x94, 0xd1, 0x7e, 0x9b, 0x81, 0x31, 0x79, 0x6b, 0x54, 0x91,
	0xab, 0xd2, 0xa9, 0xcf, 0xad, 0x48, 0xe3, 0xcf, 0x38, 0x85, 0xe7, 0x7a, 0xc6, 0xd9, 0x95, 0xe5,
	0x17, 0x31, 0x4c, 0x3d, 0x79, 0x3e, 0xf4, 0x64, 0x2e, 0xe0, 0x72, 0xb4, 0x88, 0x72, 0x9e, 0xa1,
	0x66, 0xab, 0x74, 0xd9, 0x58, 0xae, 0x6e, 0x53, 0x61, 0x7a, 0x53, 0x6c, 0x7b, 0x81, 0x4f, 0x70,
	0x7b, 0x15, 0x7b, 0xc4, 0x17, 0x81, 0xcd, 0x6e, 0x0a, 0xc2, 0xf1, 0x8a, 0x41, 0x27, 0xe4, 0x9b,
	0x62, 0xc0, 0x84, 0xf6, 0x49, 0x06, 0x50, 0xff, 0xb3, 0x0b, 0xda, 0x4d, 0xd4, 0xca, 0xef, 0x1c,
	0x1f, 0x95, 0x96, 0xe2, 0x2a, 0xc4, 0xaa, 0x65, 0x0e, 0xfd, 0x1f, 0xea, 0xe5, 0xcd, 0x44, 0xbd,
	0x9c, 0xe6, 0x71, 0xe7, 0xa9, 0x98, 0xdf, 0x0a, 0x5d, 0xe6, 0xbc, 0x35, 0xb3, 0xf6, 0x8b, 0x4c,
	0x54, 0xbe, 0x4a, 0x79, 0x55, 0x79, 0xbe, 0x46, 0x32, 0x73, 0x8e, 0x46, 0xf2, 0x1a, 0x64, 0xa5,
	0x0c, 0xc1, 0xac, 0x96, 0x48, 0x0c, 0x89, 0x31, 0xfa, 0x0e, 0x14, 0x92, 0x79, 0x60, 0x8e, 0x16,
	0xa5, 0x69, 0xb7, 0x7e, 0x1a, 0x48, 0xb7, 0xa4, 0x0c, 0x44, 0xbf, 0xca, 0xb6, 0x4c, 0xd4, 0x2a,
	0x89, 0xb1, 0xf6, 0xfb, 0x0c, 0x64, 0x9b, 0x8e, 0x85, 0xbf, 0xf2, 0x9a, 0x72, 0x2d, 0xf6, 0xd6,
	0x1d, 0x76, 0x18, 0x8e, 0x85, 0xcf, 0xf5, 0xb6, 0x5d, 0x4f, 0xbc, 0x6d, 0xab, 0x12, 0x9f, 0xf3,
	0xbf, 0x65, 0xa7, 0x55, 0x2d, 0x9e, 0x63, 0x61, 0x9f, 0x76, 0xae, 0xa3, 0x94, 0x29, 0x6d, 0xbe,
	0x4c, 0xbb, 0xf3, 0x95, 0x5b, 0xef, 0xdd, 0x98, 0xf5, 0x66, 0x22, 0xad, 0x85, 0x80, 0xe7, 0x32,
	0x62, 0x2b, 0x61, 0xc4, 0xb9, 0x7e, 0x76, 0xe7, 0xb7, 0xe5, 0xe2, 0xd3, 0xc7, 0xa5, 0xcb, 0x71,
	0x5b, 0x8e, 0x53, 0x5b, 0x56, 0x76, 0x39, 0x4b, 0x5f, 0xfb, 0xaf, 0x02, 0x93, 0x09, 0x91, 0x51,
	0x1d, 0x72, 0xb4, 0x08, 0xf7, 0xc5, 0xd3, 0xef, 0xd5, 0x5f, 0x1e, 0x95, 0x66, 0x60, 0x84, 0xfa,
	0x78, 0xbb, 0x89, 0x1f, 0xa0, 0x02, 0x15, 0x6c, 0x85, 0xae, 0xa0, 0x11, 0xc9, 0x0a, 0x4a, 0x39,
	0x22, 0x13, 0x00, 0x5a, 0x03, 0xa0, 0x6b, 0x59, 0x28, 0xf3, 0x37, 0xed, 0x42, 0xad, 0x44, 0xef,
	0x75, 0xf6, 0xf8, 0xc4, 0xe2, 0x37, 0xf6, 0x6a, 0x91, 0x0a, 0xa3, 0xbb, 0x3c, 0x62, 0xc2, 0xb6,
	0x27, 0x55, 0x24, 0xba, 0x80, 0x5a, 0x9a, 0x6a, 0x28, 0x5b, 0x3a, 0x3e, 0xd6, 0x2e, 0xc2, 0x54,
	0x9f, 0x55, 0xb5, 0x0e, 0x8c, 0x84, 0x7e, 0x8f, 0x3e, 0x84, 0xd1, 0xa8, 0xa6, 0x0a, 0x5f, 0xfb,
	0x85, 0x53, 0x47, 0x13, 0xec, 0xf9, 0x85, 0x1e, 0xc4, 0x8c, 0x1b, 0x2d, 0x96, 0x15, 0x49, 0x85,
	0xb5, 0x31, 0x80, 0x28, 0x30, 0xb4, 0x9f, 0x65, 0x60, 0xbe, 0x15, 0x30, 0xf7, 0xab, 0xb2, 0x1b,
	0xb5, 0x89, 0xf7, 0x4d, 0x7c, 0xf0, 0xa2, 0xf4, 0x9c, 0xdf, 0x07, 0xe8, 0xb5, 0xeb, 0x61, 0x1d,
	0xd3, 0xd7, 0xc6, 0x5f, 0x16, 0x29, 0x65, 0xba, 0xd7, 0xb1, 0xcb, 0x66, 0x48, 0x45, 0xcf, 0x68,
	0x4d, 0xfe, 0x96, 0x91, 0xdf, 0xbe, 0xd0, 0xb7, 0x61, 0xa4, 0x45, 0x74, 0x8f, 0x6c, 0xd7, 0x5b,
	0xa2, 0x72, 0x63, 0x97, 0xb3, 0x4f, 0xb1, 0x0a, 0xb1, 0xe4, 0x9d, 0xd2, 0x40, 0xf4, 0x08, 0xe6,
	0x5b, 0x0f, 0x4d, 0xf1, 0x5e, 0x44, 0x4b, 0x82, 0xf7, 0xb1, 0x67, 0x3e, 0x10, 0xdf, 0x78, 0xc4,
	0x23, 0xc2, 0x6b, 0xa7, 0x27, 0xe5, 0x57, 0xfd, 0x87, 0x66, 0xf8, 0x51, 0x86, 0x15, 0x02, 0x95,
	0x7d, 0x69, 0xa1, 0xb4, 0xcb, 0xb3, 0x2e, 0xa4, 0x7e, 0xcf, 0x77, 0x65, 0xc9, 0x81, 0xfb, 0x2d,
	0xf3, 0x7b, 0x41, 0x9b, 0xc8, 0x11, 0xe9, 0xf0, 0x97, 0x5a, 0xcf, 0xfc, 0x5a, 0x01, 0xc4, 0x4a,
	0x70, 0x5e, 0xb7, 0xbd, 0x28, 0x6d, 0x6a, 0xda, 0xc7, 0x4b, 0x9a, 0x21, 0xe9, 0xad, 0xf1, 0x62,
	0x66, 0x48, 0x2a, 0xd9, 0x97, 0x91, 0x21, 0x19, 0x9f, 0x2f, 0x27, 0x43, 0x8a, 0xbe, 0x3e, 0x03,
	0x13, 0x94, 0x69, 0xc3, 0xc3, 0x0f, 0xb0, 0x87, 0x6d, 0xe3, 0xf9, 0x4b, 0x8c, 0x3b, 0x67, 0x18,
	0xf0, 0x92, 0x44, 0x39, 0xc9, 0x0c, 0xb6, 0x28, 0x25, 0x80, 0x04, 0x80, 0x1a, 0x31, 0x13, 0x16,
	0x23, 0xd5, 0x23, 0x29, 0x99, 0x31, 0xe7, 0x84, 0x09, 0x26, 0x99, 0xf1, 0x64, 0x8e, 0x09, 0x00,
	0xdd, 0x4b, 0x98, 0x73, 0x3e, 0x95, 0x27, 0x37, 0x6c, 0x49, 0x70, 0x9d, 0x12, 0x66, 0x5c, 0x94,
	0x5b, 0xac, 0x24, 0x74, 0xeb, 0xe5, 0xa7, 0x8f, 0x4b, 0xe5, 0xb8, 0x69, 0x55, 0x96, 0x90, 0xdc,
	0x1e, 0x5f, 0x5f, 0x7b, 0x0f, 0x50, 0xbf, 0xf8, 0xe8, 0x5b, 0x30, 0x1c, 0x3e, 0xd8, 0x4b, 0x2f,
	0x57, 0xe1, 0xfb, 0xbb, 0xb4, 0x6d, 0x0a, 0xa6, 0xcd, 0xc2, 0x74, 0x9a, 0xf4, 0xda, 0x3f, 0x32,
	0xfc, 0x41, 0x8c, 0xed, 0x20, 0x7f, 0x95, 0x50, 0xce, 0xfb, 0x55, 0x02, 0x6d, 0x84, 0x1f, 0x42,
	0x78, 0x39, 0x5d, 0x39, 0x3e, 0x2a, 0xcd, 0xae, 0xd3, 0x99, 0x2d, 0x6f, 0xa9, 0x89, 0x3b, 0xeb,
	0x8f, 0xdc, 0x25, 0xf6, 0x19, 0xe4, 0xca, 0x95, 0x67, 0xfa, 0x44, 0x72, 0x47, 0x7a, 0x6b, 0xe3,
	0x97, 0x9b, 0x96, 0x68, 0x09, 0x9f, 0xf5, 0xdd, 0xad, 0x09, 0x59, 0xea, 0x93, 0xe2, 0x6a, 0xbb,
	0x29, 0x37, 0x84, 0xa1, 0xea, 0xec, 0x68, 0xd9, 0xb3, 0xc6, 0x9f, 0x8e, 0x4a, 0x2c, 0xe0, 0xc8,
	0xa1, 0x1b, 0xcb, 0xf1, 0xf1, 0xb1, 0xf6, 0x32, 0x37, 0x5b, 0xef, 0x23, 0xab, 0x63, 0xe8, 0x96,
	0x7a, 0x01, 0x8d, 0xc1, 0xc8, 0xfa, 0x23, 0x82, 0x3d, 0x5b, 0xb7, 0x54, 0x45, 0xfb, 0x63, 0x96,
	0x97, 0x26, 0xa2, 0xaf, 0x7b, 0x13, 0x72, 0x34, 0x33, 0x87, 0x65, 0x4f, 0xef, 0x23, 0x31, 0x2b,
	0x3e, 0x65, 0x53, 0x24, 0x00, 0x74, 0x27, 0xa5, 0xc2, 0xe9, 0x7d, 0x9b, 0x39, 0x57, 0x95, 0xb3,
	0x03, 0x85, 0xba, 0xee, 0x93, 0xba, 0xd3, 0x31, 0xed, 0xe8, 0xca, 0xa1, 0x41, 0x6b, 0x76, 0xb1,
	0x4f, 0xf4, 0xae, 0x1b, 0x65, 0x5b, 0x4b, 0xf7, 0x49, 0xc5, 0xa2, 0x2b, 0xe5, 0x6c, 0x9b, 0x86,
	0xa2, 0x8f, 0xfa, 0xfe, 0xed, 0x91, 0x65, 0x42, 0xde, 0x3d, 0xef, 0x47, 0xfd, 0xe7, 0xf9, 0x03,
	0x88, 0x07, 0x88, 0xea, 0x14, 0x7f, 0x54, 0x17, 0x1f, 0x6d, 0x93, 0xca, 0x7d, 0x5d, 0x28, 0xb7,
	0xc0, 0xd4, 0x08, 0x7d, 0xa5, 0x62, 0x30, 0x1a, 0x69, 0xb7, 0xcf, 0x99, 0x47, 0x18, 0xc6, 0xe4,
	0x72, 0x4a, 0x7c, 0xb3, 0x9d, 0x49, 0x54, 0x2e, 0xe2, 0x86, 0x28, 0x8b, 0x4d, 0xe7, 0x74, 0x46,
	0x52, 0xf1, 0x18, 0x8d, 0x9c, 0x50, 0x07, 0x4c, 0xd4, 0xc6, 0x9e, 0x7c, 0xb6, 0xa0, 0x7c, 0xfa,
	0xd9, 0x82, 0xf2, 0xcf, 0xcf, 0x16, 0x94, 0x46, 0x66, 0x37, 0xcf, 0xfe, 0xda, 0x74, 0xe3, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xf2, 0xb7, 0x62, 0xc4, 0x25, 0x00, 0x00,
}
