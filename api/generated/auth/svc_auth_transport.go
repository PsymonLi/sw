// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: svc_auth.proto
*/
package auth

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerAuthV1 struct {
	Endpoints EndpointsAuthV1Server

	AutoAddAuthenticationPolicyHdlr    grpctransport.Handler
	AutoAddRoleHdlr                    grpctransport.Handler
	AutoAddRoleBindingHdlr             grpctransport.Handler
	AutoAddUserHdlr                    grpctransport.Handler
	AutoDeleteAuthenticationPolicyHdlr grpctransport.Handler
	AutoDeleteRoleHdlr                 grpctransport.Handler
	AutoDeleteRoleBindingHdlr          grpctransport.Handler
	AutoDeleteUserHdlr                 grpctransport.Handler
	AutoGetAuthenticationPolicyHdlr    grpctransport.Handler
	AutoGetRoleHdlr                    grpctransport.Handler
	AutoGetRoleBindingHdlr             grpctransport.Handler
	AutoGetUserHdlr                    grpctransport.Handler
	AutoListAuthenticationPolicyHdlr   grpctransport.Handler
	AutoListRoleHdlr                   grpctransport.Handler
	AutoListRoleBindingHdlr            grpctransport.Handler
	AutoListUserHdlr                   grpctransport.Handler
	AutoUpdateAuthenticationPolicyHdlr grpctransport.Handler
	AutoUpdateRoleHdlr                 grpctransport.Handler
	AutoUpdateRoleBindingHdlr          grpctransport.Handler
	AutoUpdateUserHdlr                 grpctransport.Handler
	LdapBindCheckHdlr                  grpctransport.Handler
	LdapConnectionCheckHdlr            grpctransport.Handler
	PasswordChangeHdlr                 grpctransport.Handler
	PasswordResetHdlr                  grpctransport.Handler
}

// MakeGRPCServerAuthV1 creates a GRPC server for AuthV1 service
func MakeGRPCServerAuthV1(ctx context.Context, endpoints EndpointsAuthV1Server, logger log.Logger) AuthV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAuthV1{
		Endpoints: endpoints,
		AutoAddAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAuthenticationPolicy", logger)))...,
		),

		AutoAddRoleHdlr: grpctransport.NewServer(
			endpoints.AutoAddRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRole", logger)))...,
		),

		AutoAddRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoAddRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRoleBinding", logger)))...,
		),

		AutoAddUserHdlr: grpctransport.NewServer(
			endpoints.AutoAddUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddUser", logger)))...,
		),

		AutoDeleteAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAuthenticationPolicy", logger)))...,
		),

		AutoDeleteRoleHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRole", logger)))...,
		),

		AutoDeleteRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRoleBinding", logger)))...,
		),

		AutoDeleteUserHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteUser", logger)))...,
		),

		AutoGetAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAuthenticationPolicy", logger)))...,
		),

		AutoGetRoleHdlr: grpctransport.NewServer(
			endpoints.AutoGetRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRole", logger)))...,
		),

		AutoGetRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoGetRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRoleBinding", logger)))...,
		),

		AutoGetUserHdlr: grpctransport.NewServer(
			endpoints.AutoGetUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetUser", logger)))...,
		),

		AutoListAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListAuthenticationPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAuthenticationPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAuthenticationPolicy", logger)))...,
		),

		AutoListRoleHdlr: grpctransport.NewServer(
			endpoints.AutoListRoleEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRoleList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRole", logger)))...,
		),

		AutoListRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoListRoleBindingEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRoleBindingList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRoleBinding", logger)))...,
		),

		AutoListUserHdlr: grpctransport.NewServer(
			endpoints.AutoListUserEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespUserList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListUser", logger)))...,
		),

		AutoUpdateAuthenticationPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAuthenticationPolicyEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAuthenticationPolicy", logger)))...,
		),

		AutoUpdateRoleHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRoleEndpoint,
			DecodeGrpcReqRole,
			EncodeGrpcRespRole,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRole", logger)))...,
		),

		AutoUpdateRoleBindingHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRoleBindingEndpoint,
			DecodeGrpcReqRoleBinding,
			EncodeGrpcRespRoleBinding,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRoleBinding", logger)))...,
		),

		AutoUpdateUserHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateUserEndpoint,
			DecodeGrpcReqUser,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateUser", logger)))...,
		),

		LdapBindCheckHdlr: grpctransport.NewServer(
			endpoints.LdapBindCheckEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("LdapBindCheck", logger)))...,
		),

		LdapConnectionCheckHdlr: grpctransport.NewServer(
			endpoints.LdapConnectionCheckEndpoint,
			DecodeGrpcReqAuthenticationPolicy,
			EncodeGrpcRespAuthenticationPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("LdapConnectionCheck", logger)))...,
		),

		PasswordChangeHdlr: grpctransport.NewServer(
			endpoints.PasswordChangeEndpoint,
			DecodeGrpcReqPasswordChangeRequest,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("PasswordChange", logger)))...,
		),

		PasswordResetHdlr: grpctransport.NewServer(
			endpoints.PasswordResetEndpoint,
			DecodeGrpcReqPasswordResetRequest,
			EncodeGrpcRespUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("PasswordReset", logger)))...,
		),
	}
}

func (s *grpcServerAuthV1) AutoAddAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoAddAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoAddAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoAddAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoAddRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddRole).V
	return &r, resp.(respAuthV1AutoAddRole).Err
}

func decodeHTTPrespAuthV1AutoAddRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoAddRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddRoleBinding).V
	return &r, resp.(respAuthV1AutoAddRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoAddRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoAddUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoAddUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoAddUser).V
	return &r, resp.(respAuthV1AutoAddUser).Err
}

func decodeHTTPrespAuthV1AutoAddUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoDeleteAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoDeleteAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoDeleteAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoDeleteRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteRole).V
	return &r, resp.(respAuthV1AutoDeleteRole).Err
}

func decodeHTTPrespAuthV1AutoDeleteRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoDeleteRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteRoleBinding).V
	return &r, resp.(respAuthV1AutoDeleteRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoDeleteRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoDeleteUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoDeleteUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoDeleteUser).V
	return &r, resp.(respAuthV1AutoDeleteUser).Err
}

func decodeHTTPrespAuthV1AutoDeleteUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoGetAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoGetAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoGetAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoGetRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetRole).V
	return &r, resp.(respAuthV1AutoGetRole).Err
}

func decodeHTTPrespAuthV1AutoGetRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoGetRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetRoleBinding).V
	return &r, resp.(respAuthV1AutoGetRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoGetRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoGetUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoGetUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoGetUser).V
	return &r, resp.(respAuthV1AutoGetUser).Err
}

func decodeHTTPrespAuthV1AutoGetUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListAuthenticationPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	_, resp, err := s.AutoListAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoListAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoListAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListRole(ctx oldcontext.Context, req *api.ListWatchOptions) (*RoleList, error) {
	_, resp, err := s.AutoListRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListRole).V
	return &r, resp.(respAuthV1AutoListRole).Err
}

func decodeHTTPrespAuthV1AutoListRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListRoleBinding(ctx oldcontext.Context, req *api.ListWatchOptions) (*RoleBindingList, error) {
	_, resp, err := s.AutoListRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListRoleBinding).V
	return &r, resp.(respAuthV1AutoListRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoListRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBindingList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoListUser(ctx oldcontext.Context, req *api.ListWatchOptions) (*UserList, error) {
	_, resp, err := s.AutoListUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoListUser).V
	return &r, resp.(respAuthV1AutoListUser).Err
}

func decodeHTTPrespAuthV1AutoListUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp UserList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateAuthenticationPolicy(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.AutoUpdateAuthenticationPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateAuthenticationPolicy).V
	return &r, resp.(respAuthV1AutoUpdateAuthenticationPolicy).Err
}

func decodeHTTPrespAuthV1AutoUpdateAuthenticationPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateRole(ctx oldcontext.Context, req *Role) (*Role, error) {
	_, resp, err := s.AutoUpdateRoleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateRole).V
	return &r, resp.(respAuthV1AutoUpdateRole).Err
}

func decodeHTTPrespAuthV1AutoUpdateRole(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Role
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateRoleBinding(ctx oldcontext.Context, req *RoleBinding) (*RoleBinding, error) {
	_, resp, err := s.AutoUpdateRoleBindingHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateRoleBinding).V
	return &r, resp.(respAuthV1AutoUpdateRoleBinding).Err
}

func decodeHTTPrespAuthV1AutoUpdateRoleBinding(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoleBinding
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoUpdateUser(ctx oldcontext.Context, req *User) (*User, error) {
	_, resp, err := s.AutoUpdateUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1AutoUpdateUser).V
	return &r, resp.(respAuthV1AutoUpdateUser).Err
}

func decodeHTTPrespAuthV1AutoUpdateUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) LdapBindCheck(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.LdapBindCheckHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1LdapBindCheck).V
	return &r, resp.(respAuthV1LdapBindCheck).Err
}

func decodeHTTPrespAuthV1LdapBindCheck(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) LdapConnectionCheck(ctx oldcontext.Context, req *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	_, resp, err := s.LdapConnectionCheckHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1LdapConnectionCheck).V
	return &r, resp.(respAuthV1LdapConnectionCheck).Err
}

func decodeHTTPrespAuthV1LdapConnectionCheck(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AuthenticationPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) PasswordChange(ctx oldcontext.Context, req *PasswordChangeRequest) (*User, error) {
	_, resp, err := s.PasswordChangeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1PasswordChange).V
	return &r, resp.(respAuthV1PasswordChange).Err
}

func decodeHTTPrespAuthV1PasswordChange(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) PasswordReset(ctx oldcontext.Context, req *PasswordResetRequest) (*User, error) {
	_, resp, err := s.PasswordResetHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAuthV1PasswordReset).V
	return &r, resp.(respAuthV1PasswordReset).Err
}

func decodeHTTPrespAuthV1PasswordReset(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp User
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAuthV1) AutoWatchSvcAuthV1(in *api.ListWatchOptions, stream AuthV1_AutoWatchSvcAuthV1Server) error {
	return s.Endpoints.AutoWatchSvcAuthV1(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) error {
	return s.Endpoints.AutoWatchUser(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) error {
	return s.Endpoints.AutoWatchAuthenticationPolicy(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchRole(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleServer) error {
	return s.Endpoints.AutoWatchRole(in, stream)
}

func (s *grpcServerAuthV1) AutoWatchRoleBinding(in *api.ListWatchOptions, stream AuthV1_AutoWatchRoleBindingServer) error {
	return s.Endpoints.AutoWatchRoleBinding(in, stream)
}

func encodeHTTPAuthenticationPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthenticationPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthenticationPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthenticationPolicyList encodes GRPC request
func EncodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// DecodeGrpcReqAuthenticationPolicyList decodes GRPC request
func DecodeGrpcReqAuthenticationPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthenticationPolicyList)
	return req, nil
}

// EncodeGrpcRespAuthenticationPolicyList endodes the GRPC response
func EncodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthenticationPolicyList decodes the GRPC response
func DecodeGrpcRespAuthenticationPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleBindingList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleBindingList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleBindingList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleBindingList encodes GRPC request
func EncodeGrpcReqRoleBindingList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingList)
	return req, nil
}

// DecodeGrpcReqRoleBindingList decodes GRPC request
func DecodeGrpcReqRoleBindingList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleBindingList)
	return req, nil
}

// EncodeGrpcRespRoleBindingList endodes the GRPC response
func EncodeGrpcRespRoleBindingList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleBindingList decodes the GRPC response
func DecodeGrpcRespRoleBindingList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoleList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoleList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoleList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoleList encodes GRPC request
func EncodeGrpcReqRoleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleList)
	return req, nil
}

// DecodeGrpcReqRoleList decodes GRPC request
func DecodeGrpcReqRoleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoleList)
	return req, nil
}

// EncodeGrpcRespRoleList endodes the GRPC response
func EncodeGrpcRespRoleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoleList decodes the GRPC response
func DecodeGrpcRespRoleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUserList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUserList(_ context.Context, r *http.Request) (interface{}, error) {
	var req UserList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUserList encodes GRPC request
func EncodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// DecodeGrpcReqUserList decodes GRPC request
func DecodeGrpcReqUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UserList)
	return req, nil
}

// EncodeGrpcRespUserList endodes the GRPC response
func EncodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUserList decodes the GRPC response
func DecodeGrpcRespUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
