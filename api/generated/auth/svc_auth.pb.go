// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_auth.proto

package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AuthenticationPolicyList is a container object for list of AuthenticationPolicy objects
type AuthenticationPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of AuthenticationPolicy objects
	Items []*AuthenticationPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *AuthenticationPolicyList) Reset()                    { *m = AuthenticationPolicyList{} }
func (m *AuthenticationPolicyList) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationPolicyList) ProtoMessage()               {}
func (*AuthenticationPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{0} }

func (m *AuthenticationPolicyList) GetItems() []*AuthenticationPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// AutoMsgAuthenticationPolicyWatchHelper is a wrapper object for watch events for AuthenticationPolicy objects
type AutoMsgAuthenticationPolicyWatchHelper struct {
	Events []*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) Reset() {
	*m = AutoMsgAuthenticationPolicyWatchHelper{}
}
func (m *AutoMsgAuthenticationPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAuthenticationPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgAuthenticationPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{1}
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) GetEvents() []*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAuthenticationPolicyWatchHelper_WatchEvent struct {
	Type   string                `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *AuthenticationPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgAuthenticationPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{1, 0}
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) GetObject() *AuthenticationPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgRoleBindingWatchHelper is a wrapper object for watch events for RoleBinding objects
type AutoMsgRoleBindingWatchHelper struct {
	Events []*AutoMsgRoleBindingWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgRoleBindingWatchHelper) Reset()         { *m = AutoMsgRoleBindingWatchHelper{} }
func (m *AutoMsgRoleBindingWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRoleBindingWatchHelper) ProtoMessage()    {}
func (*AutoMsgRoleBindingWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{2}
}

func (m *AutoMsgRoleBindingWatchHelper) GetEvents() []*AutoMsgRoleBindingWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgRoleBindingWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *RoleBinding `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgRoleBindingWatchHelper_WatchEvent{}
}
func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRoleBindingWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgRoleBindingWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{2, 0}
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) GetObject() *RoleBinding {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgRoleWatchHelper is a wrapper object for watch events for Role objects
type AutoMsgRoleWatchHelper struct {
	Events []*AutoMsgRoleWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgRoleWatchHelper) Reset()                    { *m = AutoMsgRoleWatchHelper{} }
func (m *AutoMsgRoleWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgRoleWatchHelper) ProtoMessage()               {}
func (*AutoMsgRoleWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{3} }

func (m *AutoMsgRoleWatchHelper) GetEvents() []*AutoMsgRoleWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgRoleWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Role  `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) Reset()         { *m = AutoMsgRoleWatchHelper_WatchEvent{} }
func (m *AutoMsgRoleWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRoleWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgRoleWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{3, 0}
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) GetObject() *Role {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgUserPreferenceWatchHelper is a wrapper object for watch events for UserPreference objects
type AutoMsgUserPreferenceWatchHelper struct {
	Events []*AutoMsgUserPreferenceWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgUserPreferenceWatchHelper) Reset()         { *m = AutoMsgUserPreferenceWatchHelper{} }
func (m *AutoMsgUserPreferenceWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgUserPreferenceWatchHelper) ProtoMessage()    {}
func (*AutoMsgUserPreferenceWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{4}
}

func (m *AutoMsgUserPreferenceWatchHelper) GetEvents() []*AutoMsgUserPreferenceWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgUserPreferenceWatchHelper_WatchEvent struct {
	Type   string          `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *UserPreference `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgUserPreferenceWatchHelper_WatchEvent{}
}
func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgUserPreferenceWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgUserPreferenceWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{4, 0}
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) GetObject() *UserPreference {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgUserWatchHelper is a wrapper object for watch events for User objects
type AutoMsgUserWatchHelper struct {
	Events []*AutoMsgUserWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgUserWatchHelper) Reset()                    { *m = AutoMsgUserWatchHelper{} }
func (m *AutoMsgUserWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgUserWatchHelper) ProtoMessage()               {}
func (*AutoMsgUserWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{5} }

func (m *AutoMsgUserWatchHelper) GetEvents() []*AutoMsgUserWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgUserWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *User  `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgUserWatchHelper_WatchEvent) Reset()         { *m = AutoMsgUserWatchHelper_WatchEvent{} }
func (m *AutoMsgUserWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgUserWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgUserWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcAuth, []int{5, 0}
}

func (m *AutoMsgUserWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgUserWatchHelper_WatchEvent) GetObject() *User {
	if m != nil {
		return m.Object
	}
	return nil
}

// RoleBindingList is a container object for list of RoleBinding objects
type RoleBindingList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of RoleBinding objects
	Items []*RoleBinding `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *RoleBindingList) Reset()                    { *m = RoleBindingList{} }
func (m *RoleBindingList) String() string            { return proto.CompactTextString(m) }
func (*RoleBindingList) ProtoMessage()               {}
func (*RoleBindingList) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{6} }

func (m *RoleBindingList) GetItems() []*RoleBinding {
	if m != nil {
		return m.Items
	}
	return nil
}

// RoleList is a container object for list of Role objects
type RoleList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Role objects
	Items []*Role `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{7} }

func (m *RoleList) GetItems() []*Role {
	if m != nil {
		return m.Items
	}
	return nil
}

// UserList is a container object for list of User objects
type UserList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of User objects
	Items []*User `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{8} }

func (m *UserList) GetItems() []*User {
	if m != nil {
		return m.Items
	}
	return nil
}

// UserPreferenceList is a container object for list of UserPreference objects
type UserPreferenceList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of UserPreference objects
	Items []*UserPreference `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *UserPreferenceList) Reset()                    { *m = UserPreferenceList{} }
func (m *UserPreferenceList) String() string            { return proto.CompactTextString(m) }
func (*UserPreferenceList) ProtoMessage()               {}
func (*UserPreferenceList) Descriptor() ([]byte, []int) { return fileDescriptorSvcAuth, []int{9} }

func (m *UserPreferenceList) GetItems() []*UserPreference {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthenticationPolicyList)(nil), "auth.AuthenticationPolicyList")
	proto.RegisterType((*AutoMsgAuthenticationPolicyWatchHelper)(nil), "auth.AutoMsgAuthenticationPolicyWatchHelper")
	proto.RegisterType((*AutoMsgAuthenticationPolicyWatchHelper_WatchEvent)(nil), "auth.AutoMsgAuthenticationPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgRoleBindingWatchHelper)(nil), "auth.AutoMsgRoleBindingWatchHelper")
	proto.RegisterType((*AutoMsgRoleBindingWatchHelper_WatchEvent)(nil), "auth.AutoMsgRoleBindingWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgRoleWatchHelper)(nil), "auth.AutoMsgRoleWatchHelper")
	proto.RegisterType((*AutoMsgRoleWatchHelper_WatchEvent)(nil), "auth.AutoMsgRoleWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgUserPreferenceWatchHelper)(nil), "auth.AutoMsgUserPreferenceWatchHelper")
	proto.RegisterType((*AutoMsgUserPreferenceWatchHelper_WatchEvent)(nil), "auth.AutoMsgUserPreferenceWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgUserWatchHelper)(nil), "auth.AutoMsgUserWatchHelper")
	proto.RegisterType((*AutoMsgUserWatchHelper_WatchEvent)(nil), "auth.AutoMsgUserWatchHelper.WatchEvent")
	proto.RegisterType((*RoleBindingList)(nil), "auth.RoleBindingList")
	proto.RegisterType((*RoleList)(nil), "auth.RoleList")
	proto.RegisterType((*UserList)(nil), "auth.UserList")
	proto.RegisterType((*UserPreferenceList)(nil), "auth.UserPreferenceList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthV1 service

type AuthV1Client interface {
	// Create AuthenticationPolicy object
	AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Create Role object
	AutoAddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// Create RoleBinding object
	AutoAddRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error)
	// Create User object
	AutoAddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// Create UserPreference object
	AutoAddUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error)
	// Delete AuthenticationPolicy object
	AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Delete Role object
	AutoDeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// Delete RoleBinding object
	AutoDeleteRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error)
	// Delete User object
	AutoDeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// Delete UserPreference object
	AutoDeleteUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error)
	// Get AuthenticationPolicy object
	AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Get Role object
	AutoGetRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// Get RoleBinding object
	AutoGetRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error)
	// Get User object
	AutoGetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// Get UserPreference object
	AutoGetUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error)
	// Label AuthenticationPolicy object
	AutoLabelAuthenticationPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Label Role object
	AutoLabelRole(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Role, error)
	// Label RoleBinding object
	AutoLabelRoleBinding(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*RoleBinding, error)
	// Label User object
	AutoLabelUser(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*User, error)
	// Label UserPreference object
	AutoLabelUserPreference(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*UserPreference, error)
	// List AuthenticationPolicy objects
	AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AuthenticationPolicyList, error)
	// List Role objects
	AutoListRole(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoleList, error)
	// List RoleBinding objects
	AutoListRoleBinding(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoleBindingList, error)
	// List User objects
	AutoListUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*UserList, error)
	// List UserPreference objects
	AutoListUserPreference(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*UserPreferenceList, error)
	// Update AuthenticationPolicy object
	AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Update Role object
	AutoUpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	// Update RoleBinding object
	AutoUpdateRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error)
	// Update User object
	AutoUpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// Update UserPreference object
	AutoUpdateUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error)
	// Watch AuthenticationPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchAuthenticationPolicyClient, error)
	// Watch Role objects. Supports WebSockets or HTTP long poll
	AutoWatchRole(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchRoleClient, error)
	// Watch RoleBinding objects. Supports WebSockets or HTTP long poll
	AutoWatchRoleBinding(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchRoleBindingClient, error)
	AutoWatchSvcAuthV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchSvcAuthV1Client, error)
	// Watch User objects. Supports WebSockets or HTTP long poll
	AutoWatchUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchUserClient, error)
	// Watch UserPreference objects. Supports WebSockets or HTTP long poll
	AutoWatchUserPreference(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchUserPreferenceClient, error)
	// Review authorization for user
	IsAuthorized(ctx context.Context, in *SubjectAccessReviewRequest, opts ...grpc.CallOption) (*User, error)
	// Test LDAP bind operation
	LdapBindCheck(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Test LDAP connection
	LdapConnectionCheck(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
	// Change user password
	PasswordChange(ctx context.Context, in *PasswordChangeRequest, opts ...grpc.CallOption) (*User, error)
	// Reset user password
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*User, error)
	// Generate secret for token signing
	TokenSecretGenerate(ctx context.Context, in *TokenSecretRequest, opts ...grpc.CallOption) (*AuthenticationPolicy, error)
}

type authV1Client struct {
	cc *grpc.ClientConn
}

func NewAuthV1Client(cc *grpc.ClientConn) AuthV1Client {
	return &authV1Client{cc}
}

func (c *authV1Client) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoAddAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoAddRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoAddRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoAddRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error) {
	out := new(RoleBinding)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoAddRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoAddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoAddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoAddUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error) {
	out := new(UserPreference)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoAddUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoDeleteAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoDeleteRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoDeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoDeleteRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error) {
	out := new(RoleBinding)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoDeleteRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoDeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoDeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoDeleteUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error) {
	out := new(UserPreference)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoDeleteUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoGetAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoGetRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoGetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoGetRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error) {
	out := new(RoleBinding)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoGetRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoGetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoGetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoGetUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error) {
	out := new(UserPreference)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoGetUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoLabelAuthenticationPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoLabelAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoLabelRole(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoLabelRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoLabelRoleBinding(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*RoleBinding, error) {
	out := new(RoleBinding)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoLabelRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoLabelUser(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoLabelUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoLabelUserPreference(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*UserPreference, error) {
	out := new(UserPreference)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoLabelUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AuthenticationPolicyList, error) {
	out := new(AuthenticationPolicyList)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoListAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoListRole(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoListRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoListRoleBinding(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoleBindingList, error) {
	out := new(RoleBindingList)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoListRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoListUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoListUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoListUserPreference(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*UserPreferenceList, error) {
	out := new(UserPreferenceList)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoListUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoUpdateAuthenticationPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoUpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoUpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoUpdateRoleBinding(ctx context.Context, in *RoleBinding, opts ...grpc.CallOption) (*RoleBinding, error) {
	out := new(RoleBinding)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoUpdateRoleBinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoUpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoUpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoUpdateUserPreference(ctx context.Context, in *UserPreference, opts ...grpc.CallOption) (*UserPreference, error) {
	out := new(UserPreference)
	err := grpc.Invoke(ctx, "/auth.AuthV1/AutoUpdateUserPreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchAuthenticationPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[0], c.cc, "/auth.AuthV1/AutoWatchAuthenticationPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchAuthenticationPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchAuthenticationPolicyClient interface {
	Recv() (*AutoMsgAuthenticationPolicyWatchHelper, error)
	grpc.ClientStream
}

type authV1AutoWatchAuthenticationPolicyClient struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchAuthenticationPolicyClient) Recv() (*AutoMsgAuthenticationPolicyWatchHelper, error) {
	m := new(AutoMsgAuthenticationPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) AutoWatchRole(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchRoleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[1], c.cc, "/auth.AuthV1/AutoWatchRole", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchRoleClient interface {
	Recv() (*AutoMsgRoleWatchHelper, error)
	grpc.ClientStream
}

type authV1AutoWatchRoleClient struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchRoleClient) Recv() (*AutoMsgRoleWatchHelper, error) {
	m := new(AutoMsgRoleWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) AutoWatchRoleBinding(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchRoleBindingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[2], c.cc, "/auth.AuthV1/AutoWatchRoleBinding", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchRoleBindingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchRoleBindingClient interface {
	Recv() (*AutoMsgRoleBindingWatchHelper, error)
	grpc.ClientStream
}

type authV1AutoWatchRoleBindingClient struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchRoleBindingClient) Recv() (*AutoMsgRoleBindingWatchHelper, error) {
	m := new(AutoMsgRoleBindingWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) AutoWatchSvcAuthV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchSvcAuthV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[3], c.cc, "/auth.AuthV1/AutoWatchSvcAuthV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchSvcAuthV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchSvcAuthV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type authV1AutoWatchSvcAuthV1Client struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchSvcAuthV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) AutoWatchUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[4], c.cc, "/auth.AuthV1/AutoWatchUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchUserClient interface {
	Recv() (*AutoMsgUserWatchHelper, error)
	grpc.ClientStream
}

type authV1AutoWatchUserClient struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchUserClient) Recv() (*AutoMsgUserWatchHelper, error) {
	m := new(AutoMsgUserWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) AutoWatchUserPreference(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AuthV1_AutoWatchUserPreferenceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthV1_serviceDesc.Streams[5], c.cc, "/auth.AuthV1/AutoWatchUserPreference", opts...)
	if err != nil {
		return nil, err
	}
	x := &authV1AutoWatchUserPreferenceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuthV1_AutoWatchUserPreferenceClient interface {
	Recv() (*AutoMsgUserPreferenceWatchHelper, error)
	grpc.ClientStream
}

type authV1AutoWatchUserPreferenceClient struct {
	grpc.ClientStream
}

func (x *authV1AutoWatchUserPreferenceClient) Recv() (*AutoMsgUserPreferenceWatchHelper, error) {
	m := new(AutoMsgUserPreferenceWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authV1Client) IsAuthorized(ctx context.Context, in *SubjectAccessReviewRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/IsAuthorized", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) LdapBindCheck(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/LdapBindCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) LdapConnectionCheck(ctx context.Context, in *AuthenticationPolicy, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/LdapConnectionCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) PasswordChange(ctx context.Context, in *PasswordChangeRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/PasswordChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/auth.AuthV1/PasswordReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) TokenSecretGenerate(ctx context.Context, in *TokenSecretRequest, opts ...grpc.CallOption) (*AuthenticationPolicy, error) {
	out := new(AuthenticationPolicy)
	err := grpc.Invoke(ctx, "/auth.AuthV1/TokenSecretGenerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthV1 service

type AuthV1Server interface {
	// Create AuthenticationPolicy object
	AutoAddAuthenticationPolicy(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Create Role object
	AutoAddRole(context.Context, *Role) (*Role, error)
	// Create RoleBinding object
	AutoAddRoleBinding(context.Context, *RoleBinding) (*RoleBinding, error)
	// Create User object
	AutoAddUser(context.Context, *User) (*User, error)
	// Create UserPreference object
	AutoAddUserPreference(context.Context, *UserPreference) (*UserPreference, error)
	// Delete AuthenticationPolicy object
	AutoDeleteAuthenticationPolicy(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Delete Role object
	AutoDeleteRole(context.Context, *Role) (*Role, error)
	// Delete RoleBinding object
	AutoDeleteRoleBinding(context.Context, *RoleBinding) (*RoleBinding, error)
	// Delete User object
	AutoDeleteUser(context.Context, *User) (*User, error)
	// Delete UserPreference object
	AutoDeleteUserPreference(context.Context, *UserPreference) (*UserPreference, error)
	// Get AuthenticationPolicy object
	AutoGetAuthenticationPolicy(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Get Role object
	AutoGetRole(context.Context, *Role) (*Role, error)
	// Get RoleBinding object
	AutoGetRoleBinding(context.Context, *RoleBinding) (*RoleBinding, error)
	// Get User object
	AutoGetUser(context.Context, *User) (*User, error)
	// Get UserPreference object
	AutoGetUserPreference(context.Context, *UserPreference) (*UserPreference, error)
	// Label AuthenticationPolicy object
	AutoLabelAuthenticationPolicy(context.Context, *api.Label) (*AuthenticationPolicy, error)
	// Label Role object
	AutoLabelRole(context.Context, *api.Label) (*Role, error)
	// Label RoleBinding object
	AutoLabelRoleBinding(context.Context, *api.Label) (*RoleBinding, error)
	// Label User object
	AutoLabelUser(context.Context, *api.Label) (*User, error)
	// Label UserPreference object
	AutoLabelUserPreference(context.Context, *api.Label) (*UserPreference, error)
	// List AuthenticationPolicy objects
	AutoListAuthenticationPolicy(context.Context, *api.ListWatchOptions) (*AuthenticationPolicyList, error)
	// List Role objects
	AutoListRole(context.Context, *api.ListWatchOptions) (*RoleList, error)
	// List RoleBinding objects
	AutoListRoleBinding(context.Context, *api.ListWatchOptions) (*RoleBindingList, error)
	// List User objects
	AutoListUser(context.Context, *api.ListWatchOptions) (*UserList, error)
	// List UserPreference objects
	AutoListUserPreference(context.Context, *api.ListWatchOptions) (*UserPreferenceList, error)
	// Update AuthenticationPolicy object
	AutoUpdateAuthenticationPolicy(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Update Role object
	AutoUpdateRole(context.Context, *Role) (*Role, error)
	// Update RoleBinding object
	AutoUpdateRoleBinding(context.Context, *RoleBinding) (*RoleBinding, error)
	// Update User object
	AutoUpdateUser(context.Context, *User) (*User, error)
	// Update UserPreference object
	AutoUpdateUserPreference(context.Context, *UserPreference) (*UserPreference, error)
	// Watch AuthenticationPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchAuthenticationPolicy(*api.ListWatchOptions, AuthV1_AutoWatchAuthenticationPolicyServer) error
	// Watch Role objects. Supports WebSockets or HTTP long poll
	AutoWatchRole(*api.ListWatchOptions, AuthV1_AutoWatchRoleServer) error
	// Watch RoleBinding objects. Supports WebSockets or HTTP long poll
	AutoWatchRoleBinding(*api.ListWatchOptions, AuthV1_AutoWatchRoleBindingServer) error
	AutoWatchSvcAuthV1(*api.ListWatchOptions, AuthV1_AutoWatchSvcAuthV1Server) error
	// Watch User objects. Supports WebSockets or HTTP long poll
	AutoWatchUser(*api.ListWatchOptions, AuthV1_AutoWatchUserServer) error
	// Watch UserPreference objects. Supports WebSockets or HTTP long poll
	AutoWatchUserPreference(*api.ListWatchOptions, AuthV1_AutoWatchUserPreferenceServer) error
	// Review authorization for user
	IsAuthorized(context.Context, *SubjectAccessReviewRequest) (*User, error)
	// Test LDAP bind operation
	LdapBindCheck(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Test LDAP connection
	LdapConnectionCheck(context.Context, *AuthenticationPolicy) (*AuthenticationPolicy, error)
	// Change user password
	PasswordChange(context.Context, *PasswordChangeRequest) (*User, error)
	// Reset user password
	PasswordReset(context.Context, *PasswordResetRequest) (*User, error)
	// Generate secret for token signing
	TokenSecretGenerate(context.Context, *TokenSecretRequest) (*AuthenticationPolicy, error)
}

func RegisterAuthV1Server(s *grpc.Server, srv AuthV1Server) {
	s.RegisterService(&_AuthV1_serviceDesc, srv)
}

func _AuthV1_AutoAddAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoAddAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoAddAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoAddAuthenticationPolicy(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoAddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoAddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoAddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoAddRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoAddRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoAddRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoAddRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoAddRoleBinding(ctx, req.(*RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoAddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoAddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoAddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoAddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoAddUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoAddUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoAddUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoAddUserPreference(ctx, req.(*UserPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoDeleteAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoDeleteAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoDeleteAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoDeleteAuthenticationPolicy(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoDeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoDeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoDeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoDeleteRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoDeleteRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoDeleteRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoDeleteRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoDeleteRoleBinding(ctx, req.(*RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoDeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoDeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoDeleteUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoDeleteUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoDeleteUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoDeleteUserPreference(ctx, req.(*UserPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoGetAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoGetAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoGetAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoGetAuthenticationPolicy(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoGetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoGetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoGetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoGetRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoGetRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoGetRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoGetRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoGetRoleBinding(ctx, req.(*RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoGetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoGetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoGetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoGetUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoGetUserPreference(ctx, req.(*UserPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoLabelAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoLabelAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoLabelAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoLabelAuthenticationPolicy(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoLabelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoLabelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoLabelRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoLabelRole(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoLabelRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoLabelRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoLabelRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoLabelRoleBinding(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoLabelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoLabelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoLabelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoLabelUser(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoLabelUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoLabelUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoLabelUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoLabelUserPreference(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoListAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoListAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoListAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoListAuthenticationPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoListRole(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoListRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoListRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoListRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoListRoleBinding(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoListUser(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoListUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoListUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoListUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoListUserPreference(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoUpdateAuthenticationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoUpdateAuthenticationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoUpdateAuthenticationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoUpdateAuthenticationPolicy(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoUpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoUpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoUpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoUpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoUpdateRoleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoUpdateRoleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoUpdateRoleBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoUpdateRoleBinding(ctx, req.(*RoleBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoUpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoUpdateUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).AutoUpdateUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/AutoUpdateUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).AutoUpdateUserPreference(ctx, req.(*UserPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_AutoWatchAuthenticationPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchAuthenticationPolicy(m, &authV1AutoWatchAuthenticationPolicyServer{stream})
}

type AuthV1_AutoWatchAuthenticationPolicyServer interface {
	Send(*AutoMsgAuthenticationPolicyWatchHelper) error
	grpc.ServerStream
}

type authV1AutoWatchAuthenticationPolicyServer struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchAuthenticationPolicyServer) Send(m *AutoMsgAuthenticationPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_AutoWatchRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchRole(m, &authV1AutoWatchRoleServer{stream})
}

type AuthV1_AutoWatchRoleServer interface {
	Send(*AutoMsgRoleWatchHelper) error
	grpc.ServerStream
}

type authV1AutoWatchRoleServer struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchRoleServer) Send(m *AutoMsgRoleWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_AutoWatchRoleBinding_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchRoleBinding(m, &authV1AutoWatchRoleBindingServer{stream})
}

type AuthV1_AutoWatchRoleBindingServer interface {
	Send(*AutoMsgRoleBindingWatchHelper) error
	grpc.ServerStream
}

type authV1AutoWatchRoleBindingServer struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchRoleBindingServer) Send(m *AutoMsgRoleBindingWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_AutoWatchSvcAuthV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchSvcAuthV1(m, &authV1AutoWatchSvcAuthV1Server{stream})
}

type AuthV1_AutoWatchSvcAuthV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type authV1AutoWatchSvcAuthV1Server struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchSvcAuthV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_AutoWatchUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchUser(m, &authV1AutoWatchUserServer{stream})
}

type AuthV1_AutoWatchUserServer interface {
	Send(*AutoMsgUserWatchHelper) error
	grpc.ServerStream
}

type authV1AutoWatchUserServer struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchUserServer) Send(m *AutoMsgUserWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_AutoWatchUserPreference_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuthV1Server).AutoWatchUserPreference(m, &authV1AutoWatchUserPreferenceServer{stream})
}

type AuthV1_AutoWatchUserPreferenceServer interface {
	Send(*AutoMsgUserPreferenceWatchHelper) error
	grpc.ServerStream
}

type authV1AutoWatchUserPreferenceServer struct {
	grpc.ServerStream
}

func (x *authV1AutoWatchUserPreferenceServer) Send(m *AutoMsgUserPreferenceWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AuthV1_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectAccessReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).IsAuthorized(ctx, req.(*SubjectAccessReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_LdapBindCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).LdapBindCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/LdapBindCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).LdapBindCheck(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_LdapConnectionCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).LdapConnectionCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/LdapConnectionCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).LdapConnectionCheck(ctx, req.(*AuthenticationPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_PasswordChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).PasswordChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/PasswordChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).PasswordChange(ctx, req.(*PasswordChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/PasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_TokenSecretGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).TokenSecretGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthV1/TokenSecretGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).TokenSecretGenerate(ctx, req.(*TokenSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthV1",
	HandlerType: (*AuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddAuthenticationPolicy",
			Handler:    _AuthV1_AutoAddAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoAddRole",
			Handler:    _AuthV1_AutoAddRole_Handler,
		},
		{
			MethodName: "AutoAddRoleBinding",
			Handler:    _AuthV1_AutoAddRoleBinding_Handler,
		},
		{
			MethodName: "AutoAddUser",
			Handler:    _AuthV1_AutoAddUser_Handler,
		},
		{
			MethodName: "AutoAddUserPreference",
			Handler:    _AuthV1_AutoAddUserPreference_Handler,
		},
		{
			MethodName: "AutoDeleteAuthenticationPolicy",
			Handler:    _AuthV1_AutoDeleteAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteRole",
			Handler:    _AuthV1_AutoDeleteRole_Handler,
		},
		{
			MethodName: "AutoDeleteRoleBinding",
			Handler:    _AuthV1_AutoDeleteRoleBinding_Handler,
		},
		{
			MethodName: "AutoDeleteUser",
			Handler:    _AuthV1_AutoDeleteUser_Handler,
		},
		{
			MethodName: "AutoDeleteUserPreference",
			Handler:    _AuthV1_AutoDeleteUserPreference_Handler,
		},
		{
			MethodName: "AutoGetAuthenticationPolicy",
			Handler:    _AuthV1_AutoGetAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoGetRole",
			Handler:    _AuthV1_AutoGetRole_Handler,
		},
		{
			MethodName: "AutoGetRoleBinding",
			Handler:    _AuthV1_AutoGetRoleBinding_Handler,
		},
		{
			MethodName: "AutoGetUser",
			Handler:    _AuthV1_AutoGetUser_Handler,
		},
		{
			MethodName: "AutoGetUserPreference",
			Handler:    _AuthV1_AutoGetUserPreference_Handler,
		},
		{
			MethodName: "AutoLabelAuthenticationPolicy",
			Handler:    _AuthV1_AutoLabelAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoLabelRole",
			Handler:    _AuthV1_AutoLabelRole_Handler,
		},
		{
			MethodName: "AutoLabelRoleBinding",
			Handler:    _AuthV1_AutoLabelRoleBinding_Handler,
		},
		{
			MethodName: "AutoLabelUser",
			Handler:    _AuthV1_AutoLabelUser_Handler,
		},
		{
			MethodName: "AutoLabelUserPreference",
			Handler:    _AuthV1_AutoLabelUserPreference_Handler,
		},
		{
			MethodName: "AutoListAuthenticationPolicy",
			Handler:    _AuthV1_AutoListAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoListRole",
			Handler:    _AuthV1_AutoListRole_Handler,
		},
		{
			MethodName: "AutoListRoleBinding",
			Handler:    _AuthV1_AutoListRoleBinding_Handler,
		},
		{
			MethodName: "AutoListUser",
			Handler:    _AuthV1_AutoListUser_Handler,
		},
		{
			MethodName: "AutoListUserPreference",
			Handler:    _AuthV1_AutoListUserPreference_Handler,
		},
		{
			MethodName: "AutoUpdateAuthenticationPolicy",
			Handler:    _AuthV1_AutoUpdateAuthenticationPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateRole",
			Handler:    _AuthV1_AutoUpdateRole_Handler,
		},
		{
			MethodName: "AutoUpdateRoleBinding",
			Handler:    _AuthV1_AutoUpdateRoleBinding_Handler,
		},
		{
			MethodName: "AutoUpdateUser",
			Handler:    _AuthV1_AutoUpdateUser_Handler,
		},
		{
			MethodName: "AutoUpdateUserPreference",
			Handler:    _AuthV1_AutoUpdateUserPreference_Handler,
		},
		{
			MethodName: "IsAuthorized",
			Handler:    _AuthV1_IsAuthorized_Handler,
		},
		{
			MethodName: "LdapBindCheck",
			Handler:    _AuthV1_LdapBindCheck_Handler,
		},
		{
			MethodName: "LdapConnectionCheck",
			Handler:    _AuthV1_LdapConnectionCheck_Handler,
		},
		{
			MethodName: "PasswordChange",
			Handler:    _AuthV1_PasswordChange_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _AuthV1_PasswordReset_Handler,
		},
		{
			MethodName: "TokenSecretGenerate",
			Handler:    _AuthV1_TokenSecretGenerate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchAuthenticationPolicy",
			Handler:       _AuthV1_AutoWatchAuthenticationPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchRole",
			Handler:       _AuthV1_AutoWatchRole_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchRoleBinding",
			Handler:       _AuthV1_AutoWatchRoleBinding_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcAuthV1",
			Handler:       _AuthV1_AutoWatchSvcAuthV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchUser",
			Handler:       _AuthV1_AutoWatchUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchUserPreference",
			Handler:       _AuthV1_AutoWatchUserPreference_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_auth.proto",
}

func (m *AuthenticationPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.ListMeta.Size()))
	n2, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgRoleBindingWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoleBindingWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgRoleWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoleWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgUserPreferenceWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgUserPreferenceWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgUserWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgUserWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgUserWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgUserWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcAuth(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *RoleBindingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleBindingList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.ListMeta.Size()))
	n9, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.ListMeta.Size()))
	n11, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserPreferenceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferenceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcAuth(dAtA, i, uint64(m.ListMeta.Size()))
	n15, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcAuth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcAuth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuthenticationPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAuthenticationPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	return n
}

func (m *AutoMsgRoleBindingWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	return n
}

func (m *AutoMsgRoleWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgRoleWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	return n
}

func (m *AutoMsgUserPreferenceWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	return n
}

func (m *AutoMsgUserWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgUserWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcAuth(uint64(l))
	}
	return n
}

func (m *RoleBindingList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *RoleList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *UserList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func (m *UserPreferenceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcAuth(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcAuth(uint64(l))
		}
	}
	return n
}

func sovSvcAuth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcAuth(x uint64) (n int) {
	return sovSvcAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthenticationPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AuthenticationPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAuthenticationPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAuthenticationPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAuthenticationPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAuthenticationPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAuthenticationPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AuthenticationPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoleBindingWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRoleBindingWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRoleBindingWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgRoleBindingWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoleBindingWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &RoleBinding{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoleWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRoleWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRoleWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgRoleWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoleWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Role{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgUserPreferenceWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgUserPreferenceWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgUserPreferenceWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgUserPreferenceWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgUserPreferenceWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &UserPreference{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgUserWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgUserWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgUserWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgUserWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgUserWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &User{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleBindingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleBindingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleBindingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RoleBinding{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Role{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &User{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreferenceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferenceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferenceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcAuth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &UserPreference{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcAuth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcAuth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcAuth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcAuth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcAuth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_auth.proto", fileDescriptorSvcAuth) }

var fileDescriptorSvcAuth = []byte{
	// 2198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x5f, 0x6c, 0x1c, 0x47,
	0x19, 0xf7, 0xc4, 0x8e, 0xdb, 0x8e, 0xff, 0x24, 0x1d, 0xdb, 0xad, 0x77, 0xe3, 0xd8, 0x9b, 0x2d,
	0x4d, 0x5c, 0x63, 0xdf, 0x39, 0xc7, 0x9f, 0x40, 0x40, 0xa8, 0x76, 0xda, 0xa6, 0x01, 0xb7, 0xb6,
	0x2e, 0x76, 0x5a, 0xa5, 0x88, 0xb2, 0xde, 0x9b, 0x9c, 0xb7, 0x39, 0xef, 0x2e, 0xb7, 0x7b, 0x0e,
	0x0e, 0x14, 0x50, 0xce, 0x45, 0x48, 0xbc, 0x05, 0x24, 0x10, 0x3c, 0x20, 0x45, 0xaa, 0x2a, 0x15,
	0x09, 0x89, 0x48, 0x45, 0xc5, 0x4f, 0xf0, 0x56, 0xfa, 0x14, 0x89, 0x17, 0xd4, 0x07, 0x0b, 0x45,
	0x7d, 0x40, 0x91, 0x90, 0x78, 0xe2, 0x19, 0xcd, 0x37, 0x7b, 0x77, 0x33, 0x7b, 0xb3, 0x7b, 0xbb,
	0x49, 0x40, 0xe1, 0xc9, 0x77, 0xb3, 0xdf, 0x9f, 0xdf, 0xf7, 0xcd, 0xef, 0xfb, 0xe6, 0x9b, 0x3d,
	0xe3, 0xd1, 0x60, 0xc7, 0x7e, 0xd3, 0x6a, 0x84, 0x5b, 0x05, 0xbf, 0xee, 0x85, 0x1e, 0x19, 0x60,
	0x9f, 0xf5, 0xa9, 0xaa, 0xe7, 0x55, 0x6b, 0xb4, 0x68, 0xf9, 0x4e, 0xd1, 0x72, 0x5d, 0x2f, 0xb4,
	0x42, 0xc7, 0x73, 0x03, 0x2e, 0xa3, 0xbf, 0x58, 0x75, 0xc2, 0xad, 0xc6, 0x66, 0xc1, 0xf6, 0xb6,
	0x8b, 0x3e, 0x75, 0x03, 0xcb, 0xad, 0x78, 0xc5, 0xe0, 0x5a, 0x71, 0x87, 0xba, 0x8e, 0x4d, 0x8b,
	0x8d, 0xd0, 0xa9, 0x05, 0x4c, 0xb5, 0x4a, 0x5d, 0x51, 0xbb, 0xe8, 0xb8, 0x76, 0xad, 0x51, 0xa1,
	0x2d, 0x33, 0x0b, 0x82, 0x99, 0xaa, 0x57, 0xf5, 0x8a, 0xb0, 0xbc, 0xd9, 0xb8, 0x02, 0xdf, 0xe0,
	0x0b, 0x7c, 0x8a, 0xc4, 0x87, 0x43, 0xea, 0x5a, 0x6e, 0x18, 0x7d, 0xc3, 0x1d, 0xcc, 0xfa, 0xb3,
	0x09, 0x78, 0x18, 0xfa, 0x6d, 0x1a, 0x5a, 0x5c, 0xcc, 0xfc, 0x17, 0xc2, 0x93, 0x4b, 0x8d, 0x70,
	0x8b, 0xba, 0xa1, 0x63, 0x03, 0xa4, 0x35, 0xaf, 0xe6, 0xd8, 0xbb, 0x2b, 0x4e, 0x10, 0x92, 0x2f,
	0x62, 0xb4, 0x3e, 0x79, 0xc8, 0x40, 0xb3, 0x43, 0xa5, 0x91, 0x82, 0xe5, 0x3b, 0x85, 0xf5, 0x5d,
	0x9f, 0xbe, 0x42, 0x43, 0x6b, 0x79, 0xec, 0xa3, 0x83, 0x99, 0xbe, 0x3b, 0x07, 0x33, 0xe8, 0xde,
	0xc1, 0xcc, 0x63, 0xf3, 0x8e, 0x5b, 0x73, 0x5c, 0x5a, 0x6e, 0x7d, 0x20, 0xab, 0xf8, 0x71, 0xa6,
	0xcf, 0x24, 0x27, 0xfb, 0x05, 0xf5, 0xd6, 0xe2, 0xf2, 0x94, 0xa0, 0x7e, 0xb4, 0xe6, 0x04, 0xe1,
	0x02, 0x83, 0xd4, 0xb2, 0xd3, 0xb5, 0x42, 0xbe, 0x82, 0x0f, 0x5f, 0x08, 0xe9, 0x76, 0x30, 0x39,
	0x60, 0xf4, 0xcf, 0x0e, 0x95, 0xf4, 0x02, 0x04, 0xaa, 0xc2, 0xbd, 0xfc, 0xc4, 0xbd, 0x83, 0x99,
	0xc3, 0x0e, 0x13, 0x2e, 0xf3, 0x3f, 0x67, 0x47, 0x3f, 0x79, 0x47, 0xc3, 0xcc, 0xe4, 0x16, 0xad,
	0xf9, 0xb4, 0x6e, 0xfe, 0xe4, 0x10, 0x3e, 0xb9, 0xd4, 0x08, 0xbd, 0x57, 0x82, 0xaa, 0xca, 0xc2,
	0x6b, 0x56, 0x68, 0x6f, 0xbd, 0x0c, 0xa2, 0xe4, 0x0d, 0x3c, 0xf8, 0xe2, 0x0e, 0x75, 0xc3, 0x60,
	0x12, 0x81, 0xe3, 0x33, 0x6d, 0xc7, 0x19, 0xb4, 0x0b, 0xf0, 0x19, 0xf4, 0x97, 0xf1, 0xbd, 0x83,
	0x99, 0x41, 0x0a, 0xa6, 0xca, 0xd1, 0x5f, 0xdd, 0xc7, 0xb8, 0x23, 0x41, 0x0c, 0x3c, 0xc0, 0xb2,
	0x3b, 0x89, 0x0c, 0x34, 0xfb, 0xc4, 0x32, 0xb9, 0x77, 0x30, 0x33, 0x1a, 0xee, 0xfa, 0x74, 0xde,
	0xdb, 0x66, 0x51, 0xf8, 0xe1, 0x2e, 0x79, 0x1e, 0x0f, 0xae, 0x6e, 0xbe, 0x45, 0xed, 0x30, 0xda,
	0x92, 0xb4, 0x2c, 0x8c, 0xb3, 0xc4, 0x7a, 0x20, 0xdd, 0xb1, 0x70, 0xf6, 0xc8, 0x27, 0xef, 0x68,
	0x43, 0xd7, 0x98, 0xcf, 0x28, 0x15, 0xff, 0x44, 0xf8, 0x78, 0x14, 0x4c, 0xd9, 0xab, 0xd1, 0x65,
	0xc7, 0xad, 0x38, 0x6e, 0x55, 0xcc, 0x40, 0x39, 0x96, 0x81, 0x82, 0x94, 0x01, 0xb5, 0x52, 0xaf,
	0xc0, 0xab, 0x39, 0x03, 0x3f, 0x13, 0x0b, 0xfc, 0x49, 0x8e, 0x41, 0x70, 0x9e, 0x35, 0xde, 0xbf,
	0x21, 0xfc, 0x94, 0x00, 0x5d, 0x0c, 0xf4, 0x1b, 0xb1, 0x40, 0x4f, 0x75, 0x05, 0x9a, 0x23, 0xc2,
	0x6f, 0xe7, 0x8c, 0x70, 0x31, 0x16, 0x21, 0x16, 0x22, 0xcc, 0x18, 0xda, 0xbf, 0x11, 0x36, 0x22,
	0xb0, 0x1b, 0x01, 0xad, 0xaf, 0xd5, 0xe9, 0x15, 0x5a, 0xa7, 0xae, 0x2d, 0x05, 0xb9, 0x11, 0x0b,
	0xf2, 0xb4, 0x14, 0x64, 0xa2, 0x5e, 0xaf, 0x70, 0xdf, 0xca, 0x19, 0xee, 0xd9, 0x58, 0xb8, 0xe3,
	0x1c, 0x86, 0xec, 0xff, 0x3e, 0xf6, 0x94, 0x19, 0xc8, 0xbe, 0xa7, 0x31, 0xe9, 0xff, 0xd1, 0x9e,
	0x32, 0xaf, 0x59, 0x43, 0x3b, 0x40, 0xf8, 0x88, 0xc0, 0xf2, 0x47, 0xab, 0x27, 0x97, 0xe4, 0x9e,
	0xac, 0x28, 0xca, 0xde, 0xad, 0xf8, 0x0e, 0xc2, 0x8f, 0x33, 0x8d, 0x47, 0x2b, 0xb2, 0xcf, 0xca,
	0x91, 0x89, 0xc5, 0x98, 0x2d, 0x24, 0xb6, 0xc7, 0xff, 0x0f, 0x21, 0x01, 0x17, 0x7b, 0x87, 0xf4,
	0x29, 0xc2, 0x44, 0xae, 0xcd, 0x47, 0x2b, 0xb8, 0x2f, 0xc8, 0xc1, 0xa9, 0xbb, 0x49, 0xcf, 0x30,
	0x4b, 0xbf, 0x3d, 0x83, 0x07, 0xd9, 0x61, 0x7a, 0xe9, 0x34, 0x69, 0x22, 0x7c, 0x8c, 0x75, 0x89,
	0xa5, 0x4a, 0x45, 0x75, 0xbc, 0x92, 0x94, 0xa3, 0x57, 0x4f, 0x79, 0x66, 0xce, 0xdf, 0xde, 0xd3,
	0x06, 0xed, 0x3a, 0xb5, 0x42, 0xfa, 0xe1, 0x9e, 0x86, 0xfe, 0xb4, 0xa7, 0xf5, 0xdd, 0xf8, 0xeb,
	0xa7, 0x3f, 0x3b, 0x34, 0x8e, 0xfb, 0xce, 0xa2, 0x39, 0x73, 0xa4, 0xc8, 0x54, 0xdd, 0x05, 0x9f,
	0x7b, 0xd9, 0xc6, 0x43, 0x11, 0x08, 0xc6, 0x3d, 0x22, 0xf0, 0x50, 0x17, 0x3e, 0x9b, 0x2f, 0x75,
	0x19, 0x45, 0x60, 0xb4, 0x00, 0x46, 0x2f, 0x8f, 0x70, 0xdb, 0x83, 0xc5, 0xba, 0x57, 0xa3, 0x81,
	0x39, 0x59, 0xe4, 0x23, 0x63, 0xf1, 0x7b, 0xab, 0x85, 0x75, 0xf8, 0xf4, 0x36, 0x7f, 0x42, 0x6e,
	0x22, 0x4c, 0x04, 0x7f, 0x51, 0x15, 0x93, 0xee, 0xc2, 0xd6, 0xbb, 0x97, 0xcc, 0x4b, 0x09, 0x20,
	0xbe, 0xc6, 0x41, 0x4c, 0x70, 0x10, 0xa3, 0xe0, 0x6a, 0x61, 0x93, 0x2b, 0x05, 0xa6, 0x91, 0x00,
	0xa6, 0x2d, 0x21, 0xe4, 0x80, 0xed, 0x27, 0x11, 0x88, 0xab, 0x0b, 0x9f, 0x33, 0xe7, 0xa0, 0x11,
	0xd0, 0xba, 0x3a, 0x07, 0xf0, 0x84, 0xbc, 0x86, 0x27, 0x04, 0x77, 0x1d, 0xfa, 0x10, 0x25, 0xa9,
	0x74, 0xe5, 0xaa, 0x49, 0xba, 0x77, 0x99, 0xd4, 0xf0, 0x34, 0x33, 0xfc, 0x02, 0xad, 0xd1, 0x90,
	0x3e, 0x54, 0x4e, 0x81, 0xb7, 0x0a, 0xd8, 0x6d, 0x7b, 0xfb, 0x11, 0xc2, 0xa3, 0x1d, 0x77, 0xa9,
	0xec, 0xb9, 0xd4, 0xa5, 0xde, 0xd9, 0xb8, 0x3e, 0xd8, 0xb7, 0xbe, 0xb9, 0x23, 0x9c, 0x21, 0x2c,
	0x5d, 0xaf, 0x5a, 0xdb, 0xf4, 0xed, 0xb9, 0x13, 0x49, 0x24, 0x6a, 0x8b, 0x90, 0x77, 0x11, 0x4f,
	0x65, 0x07, 0x42, 0x3e, 0x42, 0x5d, 0x49, 0xc0, 0xf5, 0x2a, 0xe0, 0x3a, 0x0e, 0xb8, 0x9e, 0x96,
	0xc9, 0xd2, 0xc1, 0xf7, 0x5c, 0x2f, 0x5e, 0x75, 0x70, 0xca, 0xa9, 0x4a, 0x25, 0x59, 0xb6, 0x54,
	0x01, 0x91, 0xd2, 0x53, 0x25, 0x8b, 0x90, 0xcb, 0x70, 0x05, 0x13, 0x10, 0x3c, 0x08, 0xef, 0x62,
	0x4c, 0xf8, 0x21, 0x6f, 0x64, 0xe7, 0x69, 0xf8, 0x50, 0x49, 0x37, 0x7b, 0x7b, 0x4f, 0xeb, 0xaf,
	0xd2, 0x50, 0xea, 0x62, 0x63, 0x2c, 0x03, 0x24, 0xd6, 0xc4, 0xae, 0xf3, 0x02, 0x3e, 0x4f, 0xc3,
	0x54, 0x1a, 0x5e, 0x94, 0x0d, 0x76, 0x25, 0x96, 0xc4, 0x39, 0x48, 0x32, 0x70, 0xf0, 0x37, 0x51,
	0x47, 0x8b, 0x9c, 0xe7, 0x23, 0xa0, 0xad, 0x42, 0x24, 0xb0, 0x8f, 0x24, 0xb1, 0x8f, 0xe4, 0x60,
	0x5f, 0x27, 0x3b, 0xa9, 0xcc, 0xcb, 0x90, 0x9d, 0x18, 0xa7, 0x32, 0xd0, 0xee, 0x77, 0x51, 0x85,
	0x46, 0xce, 0xef, 0x93, 0x74, 0x8e, 0x0a, 0xda, 0x3a, 0x40, 0x33, 0x00, 0x9a, 0x0e, 0x7e, 0x17,
	0xfc, 0xb6, 0x8a, 0x00, 0x61, 0x3e, 0x01, 0xa5, 0x5a, 0xfa, 0x66, 0x74, 0x5b, 0x5d, 0xb1, 0x36,
	0x69, 0x4d, 0x49, 0x67, 0xcc, 0x07, 0x09, 0xf6, 0x3c, 0x95, 0xbe, 0x17, 0x6e, 0xef, 0x69, 0x87,
	0x6b, 0x4c, 0xac, 0x45, 0xe0, 0x8f, 0xf7, 0xb4, 0x71, 0x95, 0x28, 0x84, 0xa3, 0xf3, 0xe3, 0x63,
	0x4c, 0x62, 0x76, 0x11, 0xf4, 0xc9, 0xcf, 0x11, 0x1e, 0x69, 0x83, 0x6a, 0x51, 0xbc, 0x0d, 0x42,
	0xa4, 0xf8, 0xd5, 0xb8, 0x53, 0xf4, 0xf1, 0x9e, 0x36, 0xc0, 0x1e, 0x81, 0x93, 0x15, 0x7e, 0x54,
	0x4d, 0x71, 0x5f, 0x13, 0x31, 0x2e, 0x73, 0x6f, 0xe6, 0xa9, 0x9e, 0xa4, 0x8f, 0x60, 0xed, 0x23,
	0x3c, 0x2e, 0xc1, 0x6a, 0x91, 0x5f, 0x44, 0xa7, 0x60, 0xfd, 0x0d, 0xa4, 0x42, 0x39, 0x24, 0x88,
	0x00, 0xd8, 0x6f, 0x72, 0xb0, 0x9f, 0xe1, 0x60, 0x8f, 0x27, 0xd0, 0x3b, 0x02, 0x5d, 0xcc, 0x5c,
	0x0f, 0xaa, 0x9c, 0xb6, 0x0a, 0x23, 0x9e, 0x53, 0x28, 0x0c, 0x75, 0x4e, 0xd9, 0x23, 0x65, 0x4e,
	0xe5, 0x0a, 0x48, 0xc9, 0xa9, 0x4a, 0x90, 0xfc, 0x05, 0xe1, 0xa7, 0x25, 0x58, 0x42, 0xc9, 0x88,
	0x00, 0xd5, 0x85, 0xf2, 0x53, 0x65, 0x66, 0x47, 0x65, 0x29, 0x40, 0xbd, 0xc9, 0x51, 0x9f, 0xe2,
	0xa8, 0x8d, 0xe4, 0x8a, 0x88, 0x02, 0x28, 0xe5, 0xa9, 0xa2, 0x28, 0x96, 0x2a, 0x9e, 0x82, 0x50,
	0x9c, 0x40, 0x7d, 0x30, 0x4c, 0xb4, 0x47, 0x72, 0xb8, 0xf4, 0xae, 0xfa, 0xf0, 0xb6, 0x52, 0x9f,
	0x4e, 0x2e, 0x2a, 0x26, 0x6b, 0x1e, 0xbd, 0xbd, 0xa7, 0x0d, 0xb0, 0x99, 0xba, 0x7d, 0x00, 0xed,
	0xe2, 0xe1, 0x96, 0x23, 0xa8, 0x8e, 0x04, 0xc3, 0xa3, 0x1d, 0x2a, 0x82, 0xa1, 0xe5, 0x98, 0x21,
	0xde, 0x57, 0xe6, 0xa1, 0xaf, 0x0c, 0x43, 0x5f, 0x89, 0x06, 0x5a, 0x92, 0x3c, 0xd0, 0xfe, 0x02,
	0xe1, 0x31, 0xd1, 0x77, 0xab, 0x04, 0x12, 0x20, 0x4c, 0x74, 0x55, 0x03, 0x20, 0x29, 0x2b, 0x91,
	0x7c, 0x15, 0x90, 0x8c, 0x03, 0x92, 0xd8, 0x54, 0x4b, 0x7a, 0x4f, 0xb5, 0x42, 0x52, 0x80, 0xde,
	0xe9, 0x49, 0x69, 0x5d, 0x27, 0x33, 0x25, 0x85, 0xcf, 0xb1, 0xc9, 0x13, 0xee, 0x1b, 0xfc, 0x6d,
	0x49, 0xcb, 0xb5, 0x40, 0xe1, 0x04, 0x10, 0x93, 0x2a, 0x36, 0x27, 0x6c, 0xf6, 0x8f, 0x11, 0x1f,
	0x73, 0x37, 0xfc, 0x8a, 0xf5, 0x90, 0xc7, 0x5c, 0xb8, 0x3a, 0x35, 0xc0, 0xae, 0xe2, 0xea, 0xa4,
	0xc7, 0xa6, 0x8e, 0x1b, 0xd1, 0x54, 0xc7, 0x81, 0xa4, 0x4e, 0x1e, 0xaf, 0x77, 0x19, 0xe6, 0x69,
	0x7d, 0x9e, 0x57, 0xe1, 0x53, 0xdc, 0x7e, 0x7c, 0xfc, 0xd0, 0x33, 0x8c, 0x1f, 0xef, 0x45, 0x07,
	0x6c, 0x07, 0x44, 0xbe, 0x09, 0x64, 0x2b, 0x01, 0xd9, 0x1a, 0x47, 0x36, 0xcd, 0x91, 0x25, 0x8d,
	0x21, 0x7a, 0x8e, 0x31, 0x44, 0x4e, 0x57, 0xea, 0x28, 0x92, 0x35, 0x5d, 0x72, 0x07, 0xd5, 0x33,
	0xcc, 0x23, 0x7f, 0xe0, 0x3f, 0x45, 0x08, 0x20, 0xee, 0x73, 0x24, 0x71, 0x13, 0x20, 0x5e, 0xe2,
	0x10, 0x4f, 0x70, 0x88, 0x29, 0x73, 0x89, 0x9e, 0x6f, 0x2e, 0xf9, 0x65, 0x34, 0x97, 0x40, 0xd9,
	0xe4, 0xe9, 0xa6, 0xf3, 0x79, 0x7e, 0x4e, 0x30, 0x17, 0xd9, 0xf9, 0x01, 0xaf, 0x07, 0xa5, 0x02,
	0xd0, 0xa0, 0xf0, 0xc7, 0x8a, 0xf0, 0x44, 0xaa, 0x82, 0x45, 0xc4, 0x5a, 0xe0, 0x48, 0x1b, 0x5a,
	0x5a, 0xff, 0x9d, 0x4a, 0x7b, 0xdd, 0x6d, 0xae, 0xc6, 0x5d, 0xf3, 0x84, 0x7e, 0x09, 0x3a, 0x0f,
	0x01, 0x00, 0xc3, 0x11, 0x00, 0xde, 0x7a, 0xa7, 0xa3, 0x6f, 0x09, 0x35, 0xb2, 0x88, 0xc8, 0x07,
	0xd1, 0x80, 0xd2, 0x46, 0xd6, 0xa3, 0x3b, 0x3f, 0x93, 0xe1, 0x87, 0x07, 0xf3, 0x4d, 0x35, 0xce,
	0x97, 0x01, 0xa7, 0x0e, 0x38, 0xc7, 0x05, 0x9c, 0x9d, 0x86, 0x7c, 0x32, 0x15, 0x6f, 0x5b, 0x6e,
	0x11, 0x91, 0x0d, 0x7e, 0xa5, 0x00, 0xaf, 0x17, 0x77, 0xec, 0xe8, 0x85, 0x51, 0x02, 0xe8, 0x31,
	0x58, 0xee, 0xbc, 0x36, 0x86, 0xb6, 0xf9, 0x64, 0xd7, 0x3e, 0xc6, 0x37, 0x2a, 0xed, 0x4c, 0x98,
	0x4a, 0x7b, 0x87, 0x9d, 0x67, 0xa3, 0xf8, 0x71, 0x90, 0xbc, 0x51, 0xf0, 0x7c, 0x11, 0x91, 0x3f,
	0x47, 0x53, 0x4f, 0x1b, 0x59, 0xef, 0x23, 0xe3, 0x64, 0xb6, 0x9f, 0x15, 0x4c, 0xaa, 0x46, 0x2b,
	0x5f, 0xb2, 0x3a, 0x68, 0xc5, 0xea, 0x23, 0xcf, 0xa5, 0x02, 0x17, 0x45, 0x17, 0x11, 0xf9, 0x10,
	0xe1, 0xe1, 0x0b, 0x01, 0xdb, 0x2b, 0xaf, 0xee, 0x5c, 0xa7, 0x15, 0x62, 0x70, 0x84, 0x17, 0x1b,
	0xf0, 0x0e, 0x7e, 0xc9, 0xb6, 0x69, 0x10, 0x94, 0xe9, 0x8e, 0x43, 0xaf, 0x95, 0xe9, 0x77, 0x1a,
	0x34, 0x08, 0xa5, 0x9e, 0x77, 0xbd, 0xfb, 0xed, 0x92, 0x34, 0x66, 0x5e, 0xe6, 0x8d, 0xe5, 0x19,
	0x3e, 0xb0, 0x4d, 0xc5, 0xa7, 0x47, 0xd1, 0xb3, 0x59, 0xe8, 0x3d, 0x6d, 0x4a, 0x48, 0x7f, 0x8d,
	0xf0, 0xc8, 0x4a, 0xc5, 0xf2, 0x19, 0xdb, 0xcf, 0x6d, 0x51, 0xfb, 0xea, 0x7d, 0x9f, 0xa0, 0xe5,
	0xee, 0xd7, 0x52, 0xa9, 0xb7, 0x1e, 0x93, 0x87, 0x73, 0x4c, 0xbe, 0xf5, 0xc8, 0x58, 0xde, 0x43,
	0x78, 0x8c, 0xad, 0x9c, 0xf3, 0x5c, 0x97, 0xda, 0xcc, 0xc0, 0x83, 0x61, 0x7c, 0x3d, 0x27, 0xc6,
	0x59, 0x8e, 0xf1, 0x44, 0x37, 0xc6, 0x38, 0xa2, 0x3f, 0x22, 0x3c, 0xba, 0x66, 0x05, 0xc1, 0x35,
	0xaf, 0x5e, 0x39, 0xb7, 0x65, 0xb9, 0x55, 0x4a, 0x8e, 0x71, 0x20, 0xf2, 0xaa, 0x6a, 0xff, 0x7f,
	0xd0, 0x63, 0xff, 0xbf, 0xc5, 0xf7, 0xff, 0x59, 0x0e, 0x66, 0x3a, 0xbe, 0x9f, 0xb2, 0x03, 0x73,
	0xb1, 0x37, 0x03, 0x62, 0x40, 0x3f, 0x40, 0x78, 0xa4, 0xb5, 0x54, 0xa6, 0x01, 0x0d, 0x5b, 0xf9,
	0x95, 0x16, 0x55, 0xc8, 0xbf, 0xdf, 0x03, 0x79, 0xfc, 0x1e, 0x97, 0x80, 0x03, 0xec, 0x2b, 0xef,
	0x71, 0x69, 0x0a, 0xe4, 0x5d, 0x84, 0xc7, 0xd6, 0xbd, 0xab, 0xd4, 0xbd, 0x48, 0xed, 0x3a, 0x0d,
	0xcf, 0x53, 0x97, 0xd6, 0xad, 0x90, 0x92, 0x68, 0xa4, 0x14, 0x1e, 0xb5, 0xb0, 0xff, 0xf7, 0xb9,
	0xa1, 0xc0, 0xa3, 0xff, 0xfe, 0xb1, 0x9b, 0x4d, 0xed, 0xd0, 0xce, 0xe9, 0x5f, 0x35, 0x35, 0xf8,
	0x57, 0x8f, 0x5b, 0x4d, 0x9e, 0xa2, 0x5b, 0x4d, 0xb5, 0x79, 0xf6, 0x9c, 0x9d, 0x40, 0xb7, 0x9a,
	0xd2, 0xcd, 0xf8, 0x56, 0x33, 0x7e, 0x9d, 0x7b, 0xbf, 0xa9, 0x95, 0x30, 0x98, 0x22, 0xfd, 0x55,
	0x1a, 0x92, 0x7e, 0xbf, 0x11, 0x92, 0xe8, 0x15, 0x1d, 0x19, 0xf0, 0xbd, 0x20, 0x24, 0x30, 0x40,
	0x13, 0xde, 0x05, 0x09, 0xbf, 0x1e, 0xbe, 0xdf, 0xd4, 0x3e, 0x8f, 0x95, 0x8e, 0x05, 0x2b, 0x5c,
	0x3b, 0xae, 0x37, 0x8b, 0x63, 0x08, 0x04, 0x8d, 0xb8, 0x6c, 0x09, 0x43, 0x10, 0x39, 0x91, 0x7d,
	0x19, 0x8b, 0x21, 0xe7, 0x51, 0xde, 0x6f, 0x6a, 0x5f, 0x27, 0x90, 0x0c, 0x3d, 0x56, 0x89, 0xe6,
	0x84, 0xb2, 0x06, 0xe7, 0x40, 0xb8, 0x34, 0xc1, 0x17, 0x0d, 0x46, 0x35, 0xc3, 0x8f, 0x04, 0x8d,
	0xfd, 0xa6, 0xf6, 0x52, 0x64, 0x4d, 0xae, 0x0d, 0x73, 0x5c, 0x55, 0x15, 0x91, 0xad, 0x31, 0x58,
	0x93, 0x4d, 0xed, 0x37, 0xb5, 0x8d, 0xc8, 0x92, 0x74, 0x48, 0x98, 0x7a, 0xf2, 0xf1, 0x10, 0x99,
	0x3b, 0xce, 0x17, 0x0d, 0x2b, 0x52, 0x82, 0xad, 0x32, 0xae, 0x78, 0x75, 0xf0, 0xb0, 0xdf, 0xd4,
	0xb6, 0x89, 0x72, 0x1f, 0x75, 0x55, 0xd3, 0x34, 0x95, 0xa2, 0x73, 0xca, 0xd5, 0xd2, 0xf8, 0x3a,
	0x0d, 0x42, 0x63, 0xe5, 0x85, 0xa5, 0x35, 0xc3, 0x6e, 0x9b, 0xd9, 0x6f, 0x6a, 0x57, 0x13, 0x1c,
	0xca, 0x67, 0x48, 0x2e, 0x57, 0x93, 0x1d, 0x57, 0x6c, 0x0e, 0x32, 0x3c, 0x9f, 0x55, 0x0d, 0x77,
	0xf7, 0xdd, 0xa4, 0xf8, 0x14, 0x65, 0x66, 0x92, 0xee, 0x82, 0x4f, 0x70, 0x79, 0xa2, 0xa5, 0x63,
	0x04, 0x20, 0x0d, 0x29, 0x0d, 0x99, 0xb6, 0x11, 0x38, 0x55, 0xd7, 0x71, 0xab, 0xcb, 0x47, 0x3f,
	0xba, 0x3b, 0x8d, 0xee, 0xdc, 0x9d, 0x46, 0x7f, 0xbf, 0x3b, 0x8d, 0xfe, 0x71, 0x77, 0xba, 0x6f,
	0x0d, 0x6d, 0x0e, 0xc2, 0xff, 0x34, 0x7d, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x12,
	0x8b, 0xf6, 0xc0, 0x25, 0x00, 0x00,
}
